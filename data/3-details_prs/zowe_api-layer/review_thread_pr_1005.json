{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwOTk1NjQw", "number": 1005, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTowNjoxMFrOFGFRjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo1NzozM1rOFGNI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTIyMTkxOnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTowNjoxMFrOIG66lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTowNjoxMFrOIG66lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyNzYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    secureHealthCheckUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/application/health\n          \n          \n            \n                    secureHealthCheckUrl: https://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/application/health", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544127638", "createdAt": "2020-12-16T09:06:10Z", "author": {"login": "pj892031"}, "path": "api-catalog-services/src/main/resources/application.yml", "diffHunk": "@@ -99,6 +99,7 @@ eureka:\n         hostname: ${apiml.service.hostname}\n         statusPageUrlPath: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/application/info\n         healthCheckUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/application/health\n+        secureHealthCheckUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/application/health", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d024411b285e4e5e9670cb7b0fe8d44d2db057"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTIyNzk4OnYy", "diffSide": "RIGHT", "path": "common-service-core/src/main/java/org/zowe/apiml/auth/Authentication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTowNzoyNlrOIG697w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTowNzoyNlrOIG697w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyODQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.scheme = scheme;\n          \n          \n            \n                    this.applid = applid;\n          \n          \n            \n                    this.supportsSso = null;\n          \n          \n            \n                    this(scheme, applid, null);", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544128495", "createdAt": "2020-12-16T09:07:26Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/main/java/org/zowe/apiml/auth/Authentication.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.*;\n+\n+/**\n+ * Information about expected authentication scheme and APPLID for PassTickets generation.\n+ */\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class Authentication {\n+\n+    private AuthenticationScheme scheme;\n+    private String applid;\n+\n+    @JsonIgnore\n+    @Getter(AccessLevel.NONE)\n+    private Boolean supportsSso;\n+\n+    public Authentication(AuthenticationScheme scheme, String applid) {\n+        this.scheme = scheme;\n+        this.applid = applid;\n+        this.supportsSso = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d024411b285e4e5e9670cb7b0fe8d44d2db057"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTIzMzA2OnYy", "diffSide": "RIGHT", "path": "common-service-core/src/main/java/org/zowe/apiml/auth/Authentication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTowODo0MFrOIG7A7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDowNDoyNVrOIHG2GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyOTI2MA==", "bodyText": "Why this field has no getter a is ignored in JSON? \"@JsonInclude(JsonInclude.Include.NON_NULL)\" is not enough?", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544129260", "createdAt": "2020-12-16T09:08:40Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/main/java/org/zowe/apiml/auth/Authentication.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.*;\n+\n+/**\n+ * Information about expected authentication scheme and APPLID for PassTickets generation.\n+ */\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class Authentication {\n+\n+    private AuthenticationScheme scheme;\n+    private String applid;\n+\n+    @JsonIgnore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d024411b285e4e5e9670cb7b0fe8d44d2db057"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyMzA5Nw==", "bodyText": "This value represents the state of metadata, not the actual SSO support. We don't want to display it in JSON. Getter would allow making a mistake. Method supportsSso() should be used instead.", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544323097", "createdAt": "2020-12-16T14:04:25Z", "author": {"login": "JirkaAichler"}, "path": "common-service-core/src/main/java/org/zowe/apiml/auth/Authentication.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.auth;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.*;\n+\n+/**\n+ * Information about expected authentication scheme and APPLID for PassTickets generation.\n+ */\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class Authentication {\n+\n+    private AuthenticationScheme scheme;\n+    private String applid;\n+\n+    @JsonIgnore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyOTI2MA=="}, "originalCommit": {"oid": "c7d024411b285e4e5e9670cb7b0fe8d44d2db057"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTM5MzIxOnYy", "diffSide": "RIGHT", "path": "common-service-core/src/test/java/org/zowe/apiml/auth/AuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0Mjo0OVrOIG8dfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0Mjo0OVrOIG8dfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1Mjk1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Authentication a;\n          \n          \n            \n            \n          \n          \n            \n                    a = new Authentication(AuthenticationScheme.HTTP_BASIC_PASSTICKET, \"applid\");\n          \n          \n            \n                    assertFalse(a.isEmpty());\n          \n          \n            \n            \n          \n          \n            \n                    a = new Authentication(AuthenticationScheme.ZOSMF, null);\n          \n          \n            \n                    assertFalse(a.isEmpty());\n          \n          \n            \n            \n          \n          \n            \n                    a = new Authentication(null, \"applid\");\n          \n          \n            \n                    assertFalse(a.isEmpty());\n          \n          \n            \n            \n          \n          \n            \n                    a = new Authentication(null, \"\");\n          \n          \n            \n                    assertFalse(a.isEmpty());\n          \n          \n            \n            \n          \n          \n            \n                    a = new Authentication(null, null);\n          \n          \n            \n                    assertTrue(a.isEmpty());\n          \n          \n            \n                    assertFalse(new Authentication(AuthenticationScheme.HTTP_BASIC_PASSTICKET, \"applid\").isEmpty());\n          \n          \n            \n                    assertFalse(new Authentication(AuthenticationScheme.ZOSMF, null).isEmpty());\n          \n          \n            \n                    assertFalse(new Authentication(null, \"applid\").isEmpty());\n          \n          \n            \n                    assertFalse(new Authentication(null, \"\").isEmpty());\n          \n          \n            \n                    assertTrue(new Authentication(null, null).isEmpty());\n          \n      \n    \n    \n  \n\nOr to use parametrizedTest?", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544152956", "createdAt": "2020-12-16T09:42:49Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/test/java/org/zowe/apiml/auth/AuthenticationTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.auth;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class AuthenticationTest {\n+\n+    @Test\n+    void testIsEmpty() {\n+        Authentication a;\n+\n+        a = new Authentication(AuthenticationScheme.HTTP_BASIC_PASSTICKET, \"applid\");\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(AuthenticationScheme.ZOSMF, null);\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(null, \"applid\");\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(null, \"\");\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(null, null);\n+        assertTrue(a.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQwMzIzOnYy", "diffSide": "RIGHT", "path": "common-service-core/src/test/java/org/zowe/apiml/auth/AuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0NTowMVrOIG8jdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0NTowMVrOIG8jdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1NDQ4NQ==", "bodyText": "What about passticket and negative test? Could you split it to few tests? Btw. asserts are the same - just 2 casess", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544154485", "createdAt": "2020-12-16T09:45:01Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/test/java/org/zowe/apiml/auth/AuthenticationTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.auth;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class AuthenticationTest {\n+\n+    @Test\n+    void testIsEmpty() {\n+        Authentication a;\n+\n+        a = new Authentication(AuthenticationScheme.HTTP_BASIC_PASSTICKET, \"applid\");\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(AuthenticationScheme.ZOSMF, null);\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(null, \"applid\");\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(null, \"\");\n+        assertFalse(a.isEmpty());\n+\n+        a = new Authentication(null, null);\n+        assertTrue(a.isEmpty());\n+    }\n+\n+    @Test\n+    void testSupportSso() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQxOTYyOnYy", "diffSide": "RIGHT", "path": "common-service-core/src/test/java/org/zowe/apiml/eurekaservice/client/util/EurekaMetadataParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0ODoyNlrOIG8tGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo0ODoyNlrOIG8tGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1Njk1Mw==", "bodyText": "nseo? notSet?", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544156953", "createdAt": "2020-12-16T09:48:26Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/test/java/org/zowe/apiml/eurekaservice/client/util/EurekaMetadataParserTest.java", "diffHunk": "@@ -173,30 +165,57 @@ public void generateNoMetadata() {\n     }\n \n     @Test\n-    public void generateMetadataWithIncorrectSwaggerUrl() {\n+    void generateMetadataWithIncorrectSwaggerUrl() {\n         String serviceId = \"test service\";\n         String gatewayUrl = \"api/v1\";\n         String swaggerUrl = \"www.badAddress\";\n \n-        exceptionRule.expect(MetadataValidationException.class);\n-        exceptionRule.expectMessage(\"The Swagger URL \\\"\" + swaggerUrl + \"\\\" for service \" + serviceId + \" is not valid\");\n-\n         ApiInfo apiInfo = new ApiInfo(null, gatewayUrl, null, swaggerUrl, null);\n-        EurekaMetadataParser.generateMetadata(serviceId, apiInfo);\n-    }\n \n+        Exception exception = assertThrows(MetadataValidationException.class, () ->\n+                EurekaMetadataParser.generateMetadata(serviceId, apiInfo)\n+        );\n+\n+        assertTrue(exception.getMessage().contains(\"The Swagger URL \\\"\" + swaggerUrl + \"\\\" for service \" + serviceId + \" is not valid\"));\n+    }\n \n     @Test\n-    public void generateMetadataWithIncorrectDocumentationUrl() {\n+    void generateMetadataWithIncorrectDocumentationUrl() {\n         String serviceId = \"test service\";\n         String gatewayUrl = \"api/v1\";\n         String documentationUrl = \"www.badAddress\";\n \n-        exceptionRule.expect(MetadataValidationException.class);\n-        exceptionRule.expectMessage(\"The documentation URL \\\"\" + documentationUrl + \"\\\" for service \" + serviceId + \" is not valid\");\n-\n         ApiInfo apiInfo = new ApiInfo(null, gatewayUrl, null, null, documentationUrl);\n-        EurekaMetadataParser.generateMetadata(serviceId, apiInfo);\n+\n+        Exception exception = assertThrows(MetadataValidationException.class, () ->\n+                EurekaMetadataParser.generateMetadata(serviceId, apiInfo));\n+\n+        assertTrue(exception.getMessage().contains(\"The documentation URL \\\"\" + documentationUrl + \"\\\" for service \" + serviceId + \" is not valid\"));\n+    }\n+\n+    @Test\n+    void whenFullInfo_testAuthenticationParser() {\n+        String applid = \"applid\";\n+\n+        Map<String, String> metadata = new HashMap<>();\n+        metadata.put(AUTHENTICATION_SCHEME, ZOSMF.getScheme());\n+        metadata.put(AUTHENTICATION_APPLID, applid);\n+        metadata.put(AUTHENTICATION_SSO, Boolean.TRUE.toString());\n+\n+        Authentication authentication = eurekaMetadataParser.parseAuthentication(metadata);\n+\n+        assertEquals(ZOSMF, authentication.getScheme());\n+        assertEquals(applid, authentication.getApplid());\n+        assertTrue(authentication.supportsSso());\n+    }\n+\n+    @Test\n+    void whenNseoInfo_testAuthenticationParser() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQzMTk2OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/routing/ApimlRoutingConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo1MToxMFrOIG80Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo1MToxMFrOIG80Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1ODc5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Autowired", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544158795", "createdAt": "2020-12-16T09:51:10Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/routing/ApimlRoutingConfig.java", "diffHunk": "@@ -63,8 +63,8 @@ public ServiceNotFoundFilter serviceNotFoundFilter() {\n     @Bean\n     @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQ0NzQzOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServerInfoConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo1NDozMlrOIG89jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzo1MTo0MFrOIH2j5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MTE2Ng==", "bodyText": "This configuration bean is without reason, just @component on bean is needed", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544161166", "createdAt": "2020-12-16T09:54:32Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServerInfoConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.zowe.apiml.eurekaservice.client.util.EurekaMetadataParser;\n+\n+@Configuration\n+public class ServerInfoConfig {\n+\n+    @Bean\n+    public EurekaMetadataParser getEurekaMetadataParser() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNDg2OA==", "bodyText": "I think EurekaMetadataParser is not in the Spring library", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r545104868", "createdAt": "2020-12-17T13:51:40Z", "author": {"login": "JirkaAichler"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServerInfoConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.zowe.apiml.eurekaservice.client.util.EurekaMetadataParser;\n+\n+@Configuration\n+public class ServerInfoConfig {\n+\n+    @Bean\n+    public EurekaMetadataParser getEurekaMetadataParser() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MTE2Ng=="}, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQ1MTI5OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServiceInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo1NToxN1rOIG8_wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0NTo0N1rOIH4-uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MTczMA==", "bodyText": "What about singular annotation? Also on next lists values...", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544161730", "createdAt": "2020-12-16T09:55:17Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServiceInfo.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.netflix.appinfo.InstanceInfo;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.experimental.SuperBuilder;\n+import org.zowe.apiml.auth.Authentication;\n+import org.zowe.apiml.config.ApiInfo;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@Builder\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class ServiceInfo {\n+    private String serviceId;\n+    private InstanceInfo.InstanceStatus status;\n+    private Apiml apiml;\n+    private Map<String, Instances> instances;\n+\n+    @Data\n+    @Builder\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static class Apiml {\n+        private List<ApiInfoExtended> apiInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0NDUwNA==", "bodyText": "It changes the behavior that I wanted. The new object creates an empty List instead of null which is ignored by the object mapper.", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r545144504", "createdAt": "2020-12-17T14:45:47Z", "author": {"login": "JirkaAichler"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServiceInfo.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.netflix.appinfo.InstanceInfo;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.experimental.SuperBuilder;\n+import org.zowe.apiml.auth.Authentication;\n+import org.zowe.apiml.config.ApiInfo;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@Builder\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class ServiceInfo {\n+    private String serviceId;\n+    private InstanceInfo.InstanceStatus status;\n+    private Apiml apiml;\n+    private Map<String, Instances> instances;\n+\n+    @Data\n+    @Builder\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public static class Apiml {\n+        private List<ApiInfoExtended> apiInfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MTczMA=="}, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQ3NTQ2OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowMDoyNFrOIG9OCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowMDoyNFrOIG9OCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NTM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (application == null)\n          \n          \n            \n                        return ServiceInfo.builder()\n          \n          \n            \n                                .serviceId(serviceId)\n          \n          \n            \n                                .status(InstanceInfo.InstanceStatus.UNKNOWN)\n          \n          \n            \n                                .build();\n          \n          \n            \n                    if (application == null) {\n          \n          \n            \n                        return ServiceInfo.builder()\n          \n          \n            \n                                .serviceId(serviceId)\n          \n          \n            \n                                .status(InstanceInfo.InstanceStatus.UNKNOWN)\n          \n          \n            \n                                .build();\n          \n          \n            \n                    }", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544165385", "createdAt": "2020-12-16T10:00:24Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.discovery.EurekaClient;\n+import com.netflix.discovery.shared.Application;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.auth.Authentication;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.util.EurekaMetadataParser;\n+import org.zowe.apiml.product.gateway.GatewayConfigProperties;\n+import org.zowe.apiml.product.routing.RoutedServices;\n+import org.zowe.apiml.product.routing.ServiceType;\n+import org.zowe.apiml.product.routing.transform.TransformService;\n+import org.zowe.apiml.product.routing.transform.URLTransformationException;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_DESCRIPTION;\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_TITLE;\n+\n+@Slf4j\n+@Service\n+@RequiredArgsConstructor\n+public class ServicesInfoService {\n+\n+    private final EurekaClient eurekaClient;\n+    private final GatewayConfigProperties gatewayConfigProperties;\n+    private final EurekaMetadataParser eurekaMetadataParser;\n+    private final TransformService transformService;\n+\n+    public ServiceInfo getServiceInfo(String serviceId) {\n+        Application application = eurekaClient.getApplication(serviceId);\n+        if (application == null)\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.UNKNOWN)\n+                    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQ3ODE1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowMTowNVrOIG9Puw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowMTowNVrOIG9Puw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2NTgxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (appInstances == null || appInstances.isEmpty())\n          \n          \n            \n                        return ServiceInfo.builder()\n          \n          \n            \n                                .serviceId(serviceId)\n          \n          \n            \n                                .status(InstanceInfo.InstanceStatus.DOWN)\n          \n          \n            \n                                .build();\n          \n          \n            \n                    if (appInstances == null || appInstances.isEmpty()) {\n          \n          \n            \n                        return ServiceInfo.builder()\n          \n          \n            \n                                .serviceId(serviceId)\n          \n          \n            \n                                .status(InstanceInfo.InstanceStatus.DOWN)\n          \n          \n            \n                                .build();\n          \n          \n            \n                    }", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544165819", "createdAt": "2020-12-16T10:01:05Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.discovery.EurekaClient;\n+import com.netflix.discovery.shared.Application;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.auth.Authentication;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.util.EurekaMetadataParser;\n+import org.zowe.apiml.product.gateway.GatewayConfigProperties;\n+import org.zowe.apiml.product.routing.RoutedServices;\n+import org.zowe.apiml.product.routing.ServiceType;\n+import org.zowe.apiml.product.routing.transform.TransformService;\n+import org.zowe.apiml.product.routing.transform.URLTransformationException;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_DESCRIPTION;\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_TITLE;\n+\n+@Slf4j\n+@Service\n+@RequiredArgsConstructor\n+public class ServicesInfoService {\n+\n+    private final EurekaClient eurekaClient;\n+    private final GatewayConfigProperties gatewayConfigProperties;\n+    private final EurekaMetadataParser eurekaMetadataParser;\n+    private final TransformService transformService;\n+\n+    public ServiceInfo getServiceInfo(String serviceId) {\n+        Application application = eurekaClient.getApplication(serviceId);\n+        if (application == null)\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.UNKNOWN)\n+                    .build();\n+\n+        List<InstanceInfo> appInstances = application.getInstances();\n+        if (appInstances == null || appInstances.isEmpty())\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.DOWN)\n+                    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTQ5NDQ2OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowNDo0NlrOIG9Zjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowNDo0NlrOIG9Zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2ODMzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<ServiceInfo.ApiInfoExtended> result = new ArrayList<>();\n          \n          \n            \n                    List<ServiceInfo.ApiInfoExtended> result = new ArrayList<>(completeList.size());", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544168335", "createdAt": "2020-12-16T10:04:46Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.discovery.EurekaClient;\n+import com.netflix.discovery.shared.Application;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.auth.Authentication;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.util.EurekaMetadataParser;\n+import org.zowe.apiml.product.gateway.GatewayConfigProperties;\n+import org.zowe.apiml.product.routing.RoutedServices;\n+import org.zowe.apiml.product.routing.ServiceType;\n+import org.zowe.apiml.product.routing.transform.TransformService;\n+import org.zowe.apiml.product.routing.transform.URLTransformationException;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_DESCRIPTION;\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_TITLE;\n+\n+@Slf4j\n+@Service\n+@RequiredArgsConstructor\n+public class ServicesInfoService {\n+\n+    private final EurekaClient eurekaClient;\n+    private final GatewayConfigProperties gatewayConfigProperties;\n+    private final EurekaMetadataParser eurekaMetadataParser;\n+    private final TransformService transformService;\n+\n+    public ServiceInfo getServiceInfo(String serviceId) {\n+        Application application = eurekaClient.getApplication(serviceId);\n+        if (application == null)\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.UNKNOWN)\n+                    .build();\n+\n+        List<InstanceInfo> appInstances = application.getInstances();\n+        if (appInstances == null || appInstances.isEmpty())\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.DOWN)\n+                    .build();\n+\n+        return ServiceInfo.builder()\n+                .serviceId(serviceId)\n+                .status(getStatus(appInstances))\n+                .apiml(getApiml(appInstances))\n+                .instances(getInstances(appInstances))\n+                .build();\n+    }\n+\n+    private ServiceInfo.Apiml getApiml(List<InstanceInfo> appInstances) {\n+        return ServiceInfo.Apiml.builder()\n+                .apiInfo(getApiInfos(appInstances))\n+                .service(getService(appInstances))\n+                .authentication(getAuthentication(appInstances))\n+                .build();\n+    }\n+\n+    private List<ServiceInfo.ApiInfoExtended> getApiInfos(List<InstanceInfo> appInstances) {\n+        List<ServiceInfo.ApiInfoExtended> completeList = new ArrayList<>();\n+\n+        for (InstanceInfo instanceInfo : appInstances) {\n+            List<ApiInfo> apiInfoList = eurekaMetadataParser.parseApiInfo(instanceInfo.getMetadata());\n+            completeList.addAll(apiInfoList.stream()\n+                    .map(apiInfo -> ServiceInfo.ApiInfoExtended.builder()\n+                            .apiId(apiInfo.getApiId())\n+                            .basePath(getBasePath(apiInfo, instanceInfo))\n+                            .baseUrl(getBaseUrl(apiInfo, instanceInfo))\n+                            .gatewayUrl(apiInfo.getGatewayUrl())\n+                            .swaggerUrl(getGatewayUrl(\n+                                    apiInfo.getSwaggerUrl(),\n+                                    instanceInfo.getAppName().toLowerCase(),\n+                                    ServiceType.API,\n+                                    eurekaMetadataParser.parseRoutes(instanceInfo.getMetadata())\n+                            ))\n+                            .documentationUrl(apiInfo.getDocumentationUrl())\n+                            .version(apiInfo.getVersion())\n+                            .isDefaultApi(apiInfo.isDefaultApi())\n+                            .build())\n+                    .collect(Collectors.toList()));\n+        }\n+\n+        return filterByIdAndMajorVersion(completeList);\n+    }\n+\n+    private ServiceInfo.Service getService(List<InstanceInfo> appInstances) {\n+        InstanceInfo instanceInfo = appInstances.get(0);\n+        Version highestVersion = Version.unknownVersion();\n+        for (InstanceInfo currentInfo : appInstances) {\n+            List<ApiInfo> apiInfoList = eurekaMetadataParser.parseApiInfo(currentInfo.getMetadata());\n+            for (ApiInfo apiInfo : apiInfoList) {\n+                Version version = getVersion(apiInfo.getVersion());\n+                if (version.compareTo(highestVersion) > 0) {\n+                    highestVersion = version;\n+                    instanceInfo = currentInfo;\n+                }\n+            }\n+        }\n+\n+        RoutedServices routes = eurekaMetadataParser.parseRoutes(instanceInfo.getMetadata());\n+\n+        return ServiceInfo.Service.builder()\n+                .title(instanceInfo.getMetadata().get(SERVICE_TITLE))\n+                .description(instanceInfo.getMetadata().get(SERVICE_DESCRIPTION))\n+                .homePageUrl(getGatewayUrl(instanceInfo.getHomePageUrl(), instanceInfo.getAppName().toLowerCase(), ServiceType.UI, routes))\n+                .build();\n+    }\n+\n+    private List<Authentication> getAuthentication(List<InstanceInfo> appInstances) {\n+        return appInstances.stream()\n+                .map(instanceInfo -> {\n+                    Authentication authentication = eurekaMetadataParser.parseAuthentication(instanceInfo.getMetadata());\n+                    return authentication.isEmpty() ? null : authentication;\n+                })\n+                .filter(Objects::nonNull)\n+                .distinct()\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, ServiceInfo.Instances> getInstances(List<InstanceInfo> appInstances) {\n+        return appInstances.stream()\n+                .collect(Collectors.toMap(\n+                        InstanceInfo::getInstanceId,\n+                        instanceInfo -> ServiceInfo.Instances.builder()\n+                                .status(instanceInfo.getStatus())\n+                                .hostname(instanceInfo.getHostName())\n+                                .ipAddr(instanceInfo.getIPAddr())\n+                                .protocol(getProtocol(instanceInfo))\n+                                .port(getPort(instanceInfo))\n+                                .homePageUrl(instanceInfo.getHomePageUrl())\n+                                .healthCheckUrl(getHealthCheckUrl(instanceInfo))\n+                                .statusPageUrl(instanceInfo.getStatusPageUrl())\n+                                .customMetadata(getCustomMetadata(instanceInfo.getMetadata()))\n+                                .build()\n+                ));\n+    }\n+\n+    private List<ServiceInfo.ApiInfoExtended> filterByIdAndMajorVersion(List<ServiceInfo.ApiInfoExtended> completeList) {\n+        if (completeList.isEmpty()) return Collections.emptyList();\n+\n+        completeList.sort(Comparator\n+                .comparing(ServiceInfo.ApiInfoExtended::getApiId, Comparator.nullsFirst(Comparator.naturalOrder()))\n+                .thenComparing(ServiceInfo.ApiInfoExtended::getVersion, Comparator.comparing(this::getVersion))\n+        );\n+\n+        List<ServiceInfo.ApiInfoExtended> result = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTY5MzcxOnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/services/status/APIDocRetrievalService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDo0OTozOFrOIG_N7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDo0OTozOFrOIG_N7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5ODEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Takes the versions available in each 'apiml.serviceapiInfo' element.\n          \n          \n            \n                 * Takes the versions available in each 'apiml.service.apiInfo' element.", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544198125", "createdAt": "2020-12-16T10:49:38Z", "author": {"login": "plavjanik"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/services/status/APIDocRetrievalService.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n     /**\n      * Retrieves the available API versions for a registered service.\n-     * Takes the versions available in each 'apiml.service.apiInfo' element.\n+     * Takes the versions available in each 'apiml.serviceapiInfo' element.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74a717109f856db27aa5da33466c21a7a5963c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDAzNjA3OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/org/zowe/apiml/acceptance/config/ApimlRoutingConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxMDowOVrOIHCQRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzo1NDoxM1rOIH2rCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0Nzg3OA==", "bodyText": "This configuration method coud be replaces with annotation @component at the class", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544247878", "createdAt": "2020-12-16T12:10:09Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/test/java/org/zowe/apiml/acceptance/config/ApimlRoutingConfig.java", "diffHunk": "@@ -63,8 +63,8 @@ public ServiceNotFoundFilter serviceNotFoundFilter() {\n     @Bean\n     @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNjY5Nw==", "bodyText": "I don't want to do additional refactoring since the pull request is already too large.", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r545106697", "createdAt": "2020-12-17T13:54:13Z", "author": {"login": "JirkaAichler"}, "path": "gateway-service/src/test/java/org/zowe/apiml/acceptance/config/ApimlRoutingConfig.java", "diffHunk": "@@ -63,8 +63,8 @@ public ServiceNotFoundFilter serviceNotFoundFilter() {\n     @Bean\n     @Autowired", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0Nzg3OA=="}, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDE3NzcwOnYy", "diffSide": "RIGHT", "path": "common-service-core/src/main/java/org/zowe/apiml/config/ApiInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjo0Mzo1NFrOIHDhDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjo0Mzo1NFrOIHDhDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2ODU1OQ==", "bodyText": "I see this for the first time - https://projectlombok.org/features/experimental/SuperBuilder - Bob now knows his ancestors: Builders with fields from superclasses, too.", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544268559", "createdAt": "2020-12-16T12:43:54Z", "author": {"login": "plavjanik"}, "path": "common-service-core/src/main/java/org/zowe/apiml/config/ApiInfo.java", "diffHunk": "@@ -26,6 +27,7 @@\n @NoArgsConstructor\n @AllArgsConstructor\n @Data\n+@SuperBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74a717109f856db27aa5da33466c21a7a5963c8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDUxMDUwOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo1NzozM1rOIHGiZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzo1MjoxOVrOIH2lrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxODA1NA==", "bodyText": "What about replace this Version class, with class like:\nimport org.apache.commons.lang3.StringUtils;\npublic class Version implements Comparable {\nprivate String[] numbers;\n\npublic Version(String version) {\n    this.numbers = version.split(\"\\\\.\");\n}\n\npublic int getLength() {\n    return numbers.length;\n}\n\npublic String getNumber(int i) {\n    if (i < 0) {\n        throw new IllegalArgumentException(\"Index of number has to be equal or greater than zero\")\n    }\n\n    if (i >= numbers.length) {\n        return \"0\";\n    }\n\n    return numbers[i];\n}\n\nprivate int compare(String a, String b) {\n    if (StringUtils.isNumeric(a) && StringUtils.isNumeric(b)) {\n        return Integer.valueOf(a).compareTo(Integer.valueOf(b));\n    }\n    return a.compareTo(b);\n}\n\n@Override\npublic int compareTo(Version o) {\n    int length = Math.max(getLength(), o.getLength());\n    for (int i = 0; i < length; i++) {\n        int c = compare(getNumber(i), o.getNumber(i));\n        if (c != 0) {\n            return c;\n        }\n    }\n\n    return 0;\n}\n\n}\nIt will be easier to use (see parsing). Support N numbers, not just 3. It supports also alphabets characters in a version.", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r544318054", "createdAt": "2020-12-16T13:57:33Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.discovery.EurekaClient;\n+import com.netflix.discovery.shared.Application;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.auth.Authentication;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.util.EurekaMetadataParser;\n+import org.zowe.apiml.product.gateway.GatewayConfigProperties;\n+import org.zowe.apiml.product.routing.RoutedServices;\n+import org.zowe.apiml.product.routing.ServiceType;\n+import org.zowe.apiml.product.routing.transform.TransformService;\n+import org.zowe.apiml.product.routing.transform.URLTransformationException;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_DESCRIPTION;\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_TITLE;\n+\n+@Slf4j\n+@Service\n+@RequiredArgsConstructor\n+public class ServicesInfoService {\n+\n+    private final EurekaClient eurekaClient;\n+    private final GatewayConfigProperties gatewayConfigProperties;\n+    private final EurekaMetadataParser eurekaMetadataParser;\n+    private final TransformService transformService;\n+\n+    public ServiceInfo getServiceInfo(String serviceId) {\n+        Application application = eurekaClient.getApplication(serviceId);\n+        if (application == null)\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.UNKNOWN)\n+                    .build();\n+\n+        List<InstanceInfo> appInstances = application.getInstances();\n+        if (appInstances == null || appInstances.isEmpty())\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.DOWN)\n+                    .build();\n+\n+        return ServiceInfo.builder()\n+                .serviceId(serviceId)\n+                .status(getStatus(appInstances))\n+                .apiml(getApiml(appInstances))\n+                .instances(getInstances(appInstances))\n+                .build();\n+    }\n+\n+    private ServiceInfo.Apiml getApiml(List<InstanceInfo> appInstances) {\n+        return ServiceInfo.Apiml.builder()\n+                .apiInfo(getApiInfos(appInstances))\n+                .service(getService(appInstances))\n+                .authentication(getAuthentication(appInstances))\n+                .build();\n+    }\n+\n+    private List<ServiceInfo.ApiInfoExtended> getApiInfos(List<InstanceInfo> appInstances) {\n+        List<ServiceInfo.ApiInfoExtended> completeList = new ArrayList<>();\n+\n+        for (InstanceInfo instanceInfo : appInstances) {\n+            List<ApiInfo> apiInfoList = eurekaMetadataParser.parseApiInfo(instanceInfo.getMetadata());\n+            completeList.addAll(apiInfoList.stream()\n+                    .map(apiInfo -> ServiceInfo.ApiInfoExtended.builder()\n+                            .apiId(apiInfo.getApiId())\n+                            .basePath(getBasePath(apiInfo, instanceInfo))\n+                            .baseUrl(getBaseUrl(apiInfo, instanceInfo))\n+                            .gatewayUrl(apiInfo.getGatewayUrl())\n+                            .swaggerUrl(getGatewayUrl(\n+                                    apiInfo.getSwaggerUrl(),\n+                                    instanceInfo.getAppName().toLowerCase(),\n+                                    ServiceType.API,\n+                                    eurekaMetadataParser.parseRoutes(instanceInfo.getMetadata())\n+                            ))\n+                            .documentationUrl(apiInfo.getDocumentationUrl())\n+                            .version(apiInfo.getVersion())\n+                            .isDefaultApi(apiInfo.isDefaultApi())\n+                            .build())\n+                    .collect(Collectors.toList()));\n+        }\n+\n+        return filterByIdAndMajorVersion(completeList);\n+    }\n+\n+    private ServiceInfo.Service getService(List<InstanceInfo> appInstances) {\n+        InstanceInfo instanceInfo = appInstances.get(0);\n+        Version highestVersion = Version.unknownVersion();\n+        for (InstanceInfo currentInfo : appInstances) {\n+            List<ApiInfo> apiInfoList = eurekaMetadataParser.parseApiInfo(currentInfo.getMetadata());\n+            for (ApiInfo apiInfo : apiInfoList) {\n+                Version version = getVersion(apiInfo.getVersion());\n+                if (version.compareTo(highestVersion) > 0) {\n+                    highestVersion = version;\n+                    instanceInfo = currentInfo;\n+                }\n+            }\n+        }\n+\n+        RoutedServices routes = eurekaMetadataParser.parseRoutes(instanceInfo.getMetadata());\n+\n+        return ServiceInfo.Service.builder()\n+                .title(instanceInfo.getMetadata().get(SERVICE_TITLE))\n+                .description(instanceInfo.getMetadata().get(SERVICE_DESCRIPTION))\n+                .homePageUrl(getGatewayUrl(instanceInfo.getHomePageUrl(), instanceInfo.getAppName().toLowerCase(), ServiceType.UI, routes))\n+                .build();\n+    }\n+\n+    private List<Authentication> getAuthentication(List<InstanceInfo> appInstances) {\n+        return appInstances.stream()\n+                .map(instanceInfo -> {\n+                    Authentication authentication = eurekaMetadataParser.parseAuthentication(instanceInfo.getMetadata());\n+                    return authentication.isEmpty() ? null : authentication;\n+                })\n+                .filter(Objects::nonNull)\n+                .distinct()\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, ServiceInfo.Instances> getInstances(List<InstanceInfo> appInstances) {\n+        return appInstances.stream()\n+                .collect(Collectors.toMap(\n+                        InstanceInfo::getInstanceId,\n+                        instanceInfo -> ServiceInfo.Instances.builder()\n+                                .status(instanceInfo.getStatus())\n+                                .hostname(instanceInfo.getHostName())\n+                                .ipAddr(instanceInfo.getIPAddr())\n+                                .protocol(getProtocol(instanceInfo))\n+                                .port(getPort(instanceInfo))\n+                                .homePageUrl(instanceInfo.getHomePageUrl())\n+                                .healthCheckUrl(getHealthCheckUrl(instanceInfo))\n+                                .statusPageUrl(instanceInfo.getStatusPageUrl())\n+                                .customMetadata(getCustomMetadata(instanceInfo.getMetadata()))\n+                                .build()\n+                ));\n+    }\n+\n+    private List<ServiceInfo.ApiInfoExtended> filterByIdAndMajorVersion(List<ServiceInfo.ApiInfoExtended> completeList) {\n+        if (completeList.isEmpty()) return Collections.emptyList();\n+\n+        completeList.sort(Comparator\n+                .comparing(ServiceInfo.ApiInfoExtended::getApiId, Comparator.nullsFirst(Comparator.naturalOrder()))\n+                .thenComparing(ServiceInfo.ApiInfoExtended::getVersion, Comparator.comparing(this::getVersion))\n+        );\n+\n+        List<ServiceInfo.ApiInfoExtended> result = new ArrayList<>();\n+        ServiceInfo.ApiInfoExtended lastApiInfo = null;\n+        for (ServiceInfo.ApiInfoExtended apiInfo : completeList) {\n+            if (lastApiInfo == null ||\n+                    !apiInfo.getApiId().equals(lastApiInfo.getApiId()) ||\n+                    (apiInfo.getApiId().equals(lastApiInfo.getApiId()) &&\n+                            getVersion(apiInfo.getVersion()).getMajorVersion() > getVersion(lastApiInfo.getVersion()).getMajorVersion())\n+            ) {\n+                result.add(apiInfo);\n+                lastApiInfo = apiInfo;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private String getGatewayUrl(String url, String serviceId, ServiceType type, RoutedServices routes) {\n+        if (url == null) return null;\n+\n+        try {\n+            return transformService.transformURL(\n+                    type,\n+                    serviceId,\n+                    url,\n+                    routes);\n+        } catch (URLTransformationException e) {\n+            return url;\n+        }\n+    }\n+\n+    private Version getVersion(String version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNTMyNg==", "bodyText": "Feel free to do this change ;-)", "url": "https://github.com/zowe/api-layer/pull/1005#discussion_r545105326", "createdAt": "2020-12-17T13:52:19Z", "author": {"login": "JirkaAichler"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/services/ServicesInfoService.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.services;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.discovery.EurekaClient;\n+import com.netflix.discovery.shared.Application;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.auth.Authentication;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.util.EurekaMetadataParser;\n+import org.zowe.apiml.product.gateway.GatewayConfigProperties;\n+import org.zowe.apiml.product.routing.RoutedServices;\n+import org.zowe.apiml.product.routing.ServiceType;\n+import org.zowe.apiml.product.routing.transform.TransformService;\n+import org.zowe.apiml.product.routing.transform.URLTransformationException;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_DESCRIPTION;\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.SERVICE_TITLE;\n+\n+@Slf4j\n+@Service\n+@RequiredArgsConstructor\n+public class ServicesInfoService {\n+\n+    private final EurekaClient eurekaClient;\n+    private final GatewayConfigProperties gatewayConfigProperties;\n+    private final EurekaMetadataParser eurekaMetadataParser;\n+    private final TransformService transformService;\n+\n+    public ServiceInfo getServiceInfo(String serviceId) {\n+        Application application = eurekaClient.getApplication(serviceId);\n+        if (application == null)\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.UNKNOWN)\n+                    .build();\n+\n+        List<InstanceInfo> appInstances = application.getInstances();\n+        if (appInstances == null || appInstances.isEmpty())\n+            return ServiceInfo.builder()\n+                    .serviceId(serviceId)\n+                    .status(InstanceInfo.InstanceStatus.DOWN)\n+                    .build();\n+\n+        return ServiceInfo.builder()\n+                .serviceId(serviceId)\n+                .status(getStatus(appInstances))\n+                .apiml(getApiml(appInstances))\n+                .instances(getInstances(appInstances))\n+                .build();\n+    }\n+\n+    private ServiceInfo.Apiml getApiml(List<InstanceInfo> appInstances) {\n+        return ServiceInfo.Apiml.builder()\n+                .apiInfo(getApiInfos(appInstances))\n+                .service(getService(appInstances))\n+                .authentication(getAuthentication(appInstances))\n+                .build();\n+    }\n+\n+    private List<ServiceInfo.ApiInfoExtended> getApiInfos(List<InstanceInfo> appInstances) {\n+        List<ServiceInfo.ApiInfoExtended> completeList = new ArrayList<>();\n+\n+        for (InstanceInfo instanceInfo : appInstances) {\n+            List<ApiInfo> apiInfoList = eurekaMetadataParser.parseApiInfo(instanceInfo.getMetadata());\n+            completeList.addAll(apiInfoList.stream()\n+                    .map(apiInfo -> ServiceInfo.ApiInfoExtended.builder()\n+                            .apiId(apiInfo.getApiId())\n+                            .basePath(getBasePath(apiInfo, instanceInfo))\n+                            .baseUrl(getBaseUrl(apiInfo, instanceInfo))\n+                            .gatewayUrl(apiInfo.getGatewayUrl())\n+                            .swaggerUrl(getGatewayUrl(\n+                                    apiInfo.getSwaggerUrl(),\n+                                    instanceInfo.getAppName().toLowerCase(),\n+                                    ServiceType.API,\n+                                    eurekaMetadataParser.parseRoutes(instanceInfo.getMetadata())\n+                            ))\n+                            .documentationUrl(apiInfo.getDocumentationUrl())\n+                            .version(apiInfo.getVersion())\n+                            .isDefaultApi(apiInfo.isDefaultApi())\n+                            .build())\n+                    .collect(Collectors.toList()));\n+        }\n+\n+        return filterByIdAndMajorVersion(completeList);\n+    }\n+\n+    private ServiceInfo.Service getService(List<InstanceInfo> appInstances) {\n+        InstanceInfo instanceInfo = appInstances.get(0);\n+        Version highestVersion = Version.unknownVersion();\n+        for (InstanceInfo currentInfo : appInstances) {\n+            List<ApiInfo> apiInfoList = eurekaMetadataParser.parseApiInfo(currentInfo.getMetadata());\n+            for (ApiInfo apiInfo : apiInfoList) {\n+                Version version = getVersion(apiInfo.getVersion());\n+                if (version.compareTo(highestVersion) > 0) {\n+                    highestVersion = version;\n+                    instanceInfo = currentInfo;\n+                }\n+            }\n+        }\n+\n+        RoutedServices routes = eurekaMetadataParser.parseRoutes(instanceInfo.getMetadata());\n+\n+        return ServiceInfo.Service.builder()\n+                .title(instanceInfo.getMetadata().get(SERVICE_TITLE))\n+                .description(instanceInfo.getMetadata().get(SERVICE_DESCRIPTION))\n+                .homePageUrl(getGatewayUrl(instanceInfo.getHomePageUrl(), instanceInfo.getAppName().toLowerCase(), ServiceType.UI, routes))\n+                .build();\n+    }\n+\n+    private List<Authentication> getAuthentication(List<InstanceInfo> appInstances) {\n+        return appInstances.stream()\n+                .map(instanceInfo -> {\n+                    Authentication authentication = eurekaMetadataParser.parseAuthentication(instanceInfo.getMetadata());\n+                    return authentication.isEmpty() ? null : authentication;\n+                })\n+                .filter(Objects::nonNull)\n+                .distinct()\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, ServiceInfo.Instances> getInstances(List<InstanceInfo> appInstances) {\n+        return appInstances.stream()\n+                .collect(Collectors.toMap(\n+                        InstanceInfo::getInstanceId,\n+                        instanceInfo -> ServiceInfo.Instances.builder()\n+                                .status(instanceInfo.getStatus())\n+                                .hostname(instanceInfo.getHostName())\n+                                .ipAddr(instanceInfo.getIPAddr())\n+                                .protocol(getProtocol(instanceInfo))\n+                                .port(getPort(instanceInfo))\n+                                .homePageUrl(instanceInfo.getHomePageUrl())\n+                                .healthCheckUrl(getHealthCheckUrl(instanceInfo))\n+                                .statusPageUrl(instanceInfo.getStatusPageUrl())\n+                                .customMetadata(getCustomMetadata(instanceInfo.getMetadata()))\n+                                .build()\n+                ));\n+    }\n+\n+    private List<ServiceInfo.ApiInfoExtended> filterByIdAndMajorVersion(List<ServiceInfo.ApiInfoExtended> completeList) {\n+        if (completeList.isEmpty()) return Collections.emptyList();\n+\n+        completeList.sort(Comparator\n+                .comparing(ServiceInfo.ApiInfoExtended::getApiId, Comparator.nullsFirst(Comparator.naturalOrder()))\n+                .thenComparing(ServiceInfo.ApiInfoExtended::getVersion, Comparator.comparing(this::getVersion))\n+        );\n+\n+        List<ServiceInfo.ApiInfoExtended> result = new ArrayList<>();\n+        ServiceInfo.ApiInfoExtended lastApiInfo = null;\n+        for (ServiceInfo.ApiInfoExtended apiInfo : completeList) {\n+            if (lastApiInfo == null ||\n+                    !apiInfo.getApiId().equals(lastApiInfo.getApiId()) ||\n+                    (apiInfo.getApiId().equals(lastApiInfo.getApiId()) &&\n+                            getVersion(apiInfo.getVersion()).getMajorVersion() > getVersion(lastApiInfo.getVersion()).getMajorVersion())\n+            ) {\n+                result.add(apiInfo);\n+                lastApiInfo = apiInfo;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private String getGatewayUrl(String url, String serviceId, ServiceType type, RoutedServices routes) {\n+        if (url == null) return null;\n+\n+        try {\n+            return transformService.transformURL(\n+                    type,\n+                    serviceId,\n+                    url,\n+                    routes);\n+        } catch (URLTransformationException e) {\n+            return url;\n+        }\n+    }\n+\n+    private Version getVersion(String version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxODA1NA=="}, "originalCommit": {"oid": "52eab34b1463dfbd35f4e65393b2a7cbbde4a227"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 472, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}