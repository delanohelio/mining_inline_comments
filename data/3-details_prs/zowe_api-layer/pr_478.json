{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MjcxMjE3", "number": 478, "title": "Allow encoded characters through spring", "bodyText": "This change includes a new httpFirewall that allows encoded characters in the URL of the request and a filter that checks if the service allows encoded characters and only allow or reject the request accordingly.", "createdAt": "2020-01-21T12:08:14Z", "url": "https://github.com/zowe/api-layer/pull/478", "merged": true, "mergeCommit": {"oid": "3e3a532d7218732dfa82cd7ae4e553b93d0007f4"}, "closed": true, "closedAt": "2020-01-28T10:46:20Z", "author": {"login": "cZikos"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8j6aiABqjI5NjY5MzQ3MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-vBoMgFqTM0OTI3OTQyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "197577ce533bb7b995116274530391240bfce784", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/197577ce533bb7b995116274530391240bfce784", "committedDate": "2020-01-21T16:35:08Z", "message": "Add integration test\nMinor change on controller\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}, "afterCommit": {"oid": "69836f5413914e3a6961eb574cb4cab1861a6886", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/69836f5413914e3a6961eb574cb4cab1861a6886", "committedDate": "2020-01-21T16:40:22Z", "message": "Add integration test\nMinor change on controller\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcf7d625b6817745412589ef30df3aa1b1c0ad07", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/bcf7d625b6817745412589ef30df3aa1b1c0ad07", "committedDate": "2020-01-22T14:24:33Z", "message": "first commit\nChange Discoverable Client endpoint to cover encoded characters on URL\nConfigure discoverable client and gateway to allow encoded characters(unconditionally)\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc4a7d36fdfb6d8db8e4432afa813a7376a48adc", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/fc4a7d36fdfb6d8db8e4432afa813a7376a48adc", "committedDate": "2020-01-22T14:24:33Z", "message": "Filter prototype\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b354057edfb8d14d44af47bc784655406e4da9b5", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/b354057edfb8d14d44af47bc784655406e4da9b5", "committedDate": "2020-01-22T14:24:33Z", "message": "Filter prototype tests\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64988ea7fc89c370bcff535533b22bbc78c3776d", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/64988ea7fc89c370bcff535533b22bbc78c3776d", "committedDate": "2020-01-22T14:24:33Z", "message": "add filter functionality and minor changes\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b53de7e9b71512129ed2d5fd678c35ea824d1731", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/b53de7e9b71512129ed2d5fd678c35ea824d1731", "committedDate": "2020-01-22T14:24:33Z", "message": "add unit tests, document error message\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2eb5be9c69ec8db14e30139688f49354f16e09a", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/d2eb5be9c69ec8db14e30139688f49354f16e09a", "committedDate": "2020-01-22T14:24:33Z", "message": "Add integration test\nMinor change on controller\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2057a94fbad683a356caee00d495bc3ffc5443ca", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/2057a94fbad683a356caee00d495bc3ffc5443ca", "committedDate": "2020-01-22T14:24:33Z", "message": "more unit tests\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7c058d5c74a18956713526e19f6772c6d0d8739", "author": {"user": {"login": "vsev0lod", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/d7c058d5c74a18956713526e19f6772c6d0d8739", "committedDate": "2020-01-22T08:58:14Z", "message": "Unused logger removed, imports formatted.\n\nSigned-off-by: Vsevolod Khanin <vsevolod.khanin@broadcom.com>"}, "afterCommit": {"oid": "2057a94fbad683a356caee00d495bc3ffc5443ca", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/2057a94fbad683a356caee00d495bc3ffc5443ca", "committedDate": "2020-01-22T14:24:33Z", "message": "more unit tests\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cace763585ad84803a271ed20785e6218770f98d", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/cace763585ad84803a271ed20785e6218770f98d", "committedDate": "2020-01-22T17:59:28Z", "message": "Add another integration test\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51be86d19d20032b55c6e18af0564b10f82250a6", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/51be86d19d20032b55c6e18af0564b10f82250a6", "committedDate": "2020-01-23T11:04:05Z", "message": "Add unit test\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/209de4b72630c900a2fc0c3d0bd14be092e7b68b", "committedDate": "2020-01-23T17:07:03Z", "message": "Refactor GatewayRibbonLoadBalancingHttpClient\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODg2OTg2", "url": "https://github.com/zowe/api-layer/pull/478#pullrequestreview-347886986", "createdAt": "2020-01-24T11:10:43Z", "commit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNzowM1rOFhatWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxOTo0MFrOFhaw5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDkyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldReconstructURIWithServerWhenUnsecurePortEnabled() throws URISyntaxException {\n          \n          \n            \n                public void shouldReconstructURIWithServer_WhenUnsecurePortEnabled() throws URISyntaxException {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370584921", "createdAt": "2020-01-24T11:17:03Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {\n+\n+    private GatewayRibbonLoadBalancingHttpClient gatewayRibbonLoadBalancingHttpClient;\n+    private CloseableHttpClient closeableHttpClient;\n+    private IClientConfig iClientConfig;\n+\n+    @Autowired\n+    private ServerIntrospector serverIntrospector;\n+\n+    @Before\n+    public void setup() {\n+        closeableHttpClient = mock(CloseableHttpClient.class);\n+        iClientConfig = IClientConfig.Builder.newBuilder(DefaultClientConfigImpl.class, \"apicatalog\").withSecure(false).withFollowRedirects(false).withDeploymentContextBasedVipAddresses(\"apicatalog\").withLoadBalancerEnabled(false).build();\n+        gatewayRibbonLoadBalancingHttpClient = new GatewayRibbonLoadBalancingHttpClient(closeableHttpClient, iClientConfig, serverIntrospector);\n+    }\n+\n+    @Test\n+    public void shouldReconstructURIWithServerWhenUnsecurePortEnabled() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTE5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenMultipleInstancesWhenMixedSetupShouldBePesimistic() {\n          \n          \n            \n                public void givenMultipleInstances_WhenMixedSetup_ShouldBePesimistic() {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585199", "createdAt": "2020-01-24T11:17:49Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.cloud.client.DefaultServiceInstance;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EncodedCharactersFilterTest {\n+\n+    private EncodedCharactersFilter filter;\n+\n+    private final String METADATA_KEY = EncodedCharactersFilter.METADATA_KEY;\n+    private final String SERVICE_ID = \"serviceid\";\n+\n+    private final DefaultServiceInstance serviceInstanceWithConfiguration = new DefaultServiceInstance(\"INSTANCE1\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+    private final DefaultServiceInstance serviceInstanceWithoutConfiguration = new DefaultServiceInstance(\"INSTANCE2\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+\n+    @Mock\n+    DiscoveryClient discoveryClient;\n+\n+    @Before\n+    public void setup() {\n+        filter = new EncodedCharactersFilter(discoveryClient);\n+        serviceInstanceWithConfiguration.getMetadata().put(METADATA_KEY, \"true\");\n+        serviceInstanceWithoutConfiguration.getMetadata().put(METADATA_KEY, \"false\");\n+        RequestContext ctx = RequestContext.getCurrentContext();\n+        ctx.clear();\n+        ctx.set(PROXY_KEY, \"api/v1/\" + SERVICE_ID);\n+        ctx.set(SERVICE_ID_KEY, SERVICE_ID);\n+        ctx.setResponse(new MockHttpServletResponse());\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenNotConfiguredShouldFilter() {\n+        List<ServiceInstance> instanceList = new ArrayList<>();\n+        instanceList.add(serviceInstanceWithoutConfiguration);\n+        when(discoveryClient.getInstances(SERVICE_ID)).thenReturn(instanceList);\n+\n+        assertThat(filter.shouldFilter(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenConfiguredShouldNotFilter() {\n+        List<ServiceInstance> instanceList = new ArrayList<>();\n+        instanceList.add(serviceInstanceWithConfiguration);\n+        when(discoveryClient.getInstances(SERVICE_ID)).thenReturn(instanceList);\n+\n+        assertThat(filter.shouldFilter(), is(equalTo(false)));\n+    }\n+\n+    @Test\n+    public void shouldReturnFilterType() {\n+        String filterType = this.filter.filterType();\n+        assertEquals(\"pre\", filterType);\n+    }\n+\n+    @Test\n+    public void shouldReturnFilterOrder() {\n+        int filterOrder = this.filter.filterOrder();\n+        assertEquals(6, filterOrder);\n+    }\n+\n+    @Test\n+    public void givenMultipleInstancesWhenMixedSetupShouldBePesimistic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTM1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenSingleInstanceWhenConfiguredShouldNotFilter() {\n          \n          \n            \n                public void givenSingleInstance_WhenConfigured_ShouldNotFilter() {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585350", "createdAt": "2020-01-24T11:18:14Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.cloud.client.DefaultServiceInstance;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EncodedCharactersFilterTest {\n+\n+    private EncodedCharactersFilter filter;\n+\n+    private final String METADATA_KEY = EncodedCharactersFilter.METADATA_KEY;\n+    private final String SERVICE_ID = \"serviceid\";\n+\n+    private final DefaultServiceInstance serviceInstanceWithConfiguration = new DefaultServiceInstance(\"INSTANCE1\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+    private final DefaultServiceInstance serviceInstanceWithoutConfiguration = new DefaultServiceInstance(\"INSTANCE2\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+\n+    @Mock\n+    DiscoveryClient discoveryClient;\n+\n+    @Before\n+    public void setup() {\n+        filter = new EncodedCharactersFilter(discoveryClient);\n+        serviceInstanceWithConfiguration.getMetadata().put(METADATA_KEY, \"true\");\n+        serviceInstanceWithoutConfiguration.getMetadata().put(METADATA_KEY, \"false\");\n+        RequestContext ctx = RequestContext.getCurrentContext();\n+        ctx.clear();\n+        ctx.set(PROXY_KEY, \"api/v1/\" + SERVICE_ID);\n+        ctx.set(SERVICE_ID_KEY, SERVICE_ID);\n+        ctx.setResponse(new MockHttpServletResponse());\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenNotConfiguredShouldFilter() {\n+        List<ServiceInstance> instanceList = new ArrayList<>();\n+        instanceList.add(serviceInstanceWithoutConfiguration);\n+        when(discoveryClient.getInstances(SERVICE_ID)).thenReturn(instanceList);\n+\n+        assertThat(filter.shouldFilter(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenConfiguredShouldNotFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTQ3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenSingleInstanceWhenNotConfiguredShouldFilter() {\n          \n          \n            \n                public void givenSingleInstance_WhenNotConfigured_ShouldFilter() {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585475", "createdAt": "2020-01-24T11:18:37Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.cloud.client.DefaultServiceInstance;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EncodedCharactersFilterTest {\n+\n+    private EncodedCharactersFilter filter;\n+\n+    private final String METADATA_KEY = EncodedCharactersFilter.METADATA_KEY;\n+    private final String SERVICE_ID = \"serviceid\";\n+\n+    private final DefaultServiceInstance serviceInstanceWithConfiguration = new DefaultServiceInstance(\"INSTANCE1\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+    private final DefaultServiceInstance serviceInstanceWithoutConfiguration = new DefaultServiceInstance(\"INSTANCE2\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+\n+    @Mock\n+    DiscoveryClient discoveryClient;\n+\n+    @Before\n+    public void setup() {\n+        filter = new EncodedCharactersFilter(discoveryClient);\n+        serviceInstanceWithConfiguration.getMetadata().put(METADATA_KEY, \"true\");\n+        serviceInstanceWithoutConfiguration.getMetadata().put(METADATA_KEY, \"false\");\n+        RequestContext ctx = RequestContext.getCurrentContext();\n+        ctx.clear();\n+        ctx.set(PROXY_KEY, \"api/v1/\" + SERVICE_ID);\n+        ctx.set(SERVICE_ID_KEY, SERVICE_ID);\n+        ctx.setResponse(new MockHttpServletResponse());\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenNotConfiguredShouldFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTgzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldReconstructURIWithServerWhenSecurePortEnabled() throws URISyntaxException {\n          \n          \n            \n                public void shouldReconstructURIWithServer_WhenSecurePortEnabled() throws URISyntaxException {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585830", "createdAt": "2020-01-24T11:19:40Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {\n+\n+    private GatewayRibbonLoadBalancingHttpClient gatewayRibbonLoadBalancingHttpClient;\n+    private CloseableHttpClient closeableHttpClient;\n+    private IClientConfig iClientConfig;\n+\n+    @Autowired\n+    private ServerIntrospector serverIntrospector;\n+\n+    @Before\n+    public void setup() {\n+        closeableHttpClient = mock(CloseableHttpClient.class);\n+        iClientConfig = IClientConfig.Builder.newBuilder(DefaultClientConfigImpl.class, \"apicatalog\").withSecure(false).withFollowRedirects(false).withDeploymentContextBasedVipAddresses(\"apicatalog\").withLoadBalancerEnabled(false).build();\n+        gatewayRibbonLoadBalancingHttpClient = new GatewayRibbonLoadBalancingHttpClient(closeableHttpClient, iClientConfig, serverIntrospector);\n+    }\n+\n+    @Test\n+    public void shouldReconstructURIWithServerWhenUnsecurePortEnabled() throws URISyntaxException {\n+        HttpGet httpGet = mock(HttpGet.class);\n+        CloseableHttpResponse closeableHttpResponse = mock(CloseableHttpResponse.class);\n+        try {\n+            when(closeableHttpClient.execute(httpGet)).thenReturn(closeableHttpResponse);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        URI request = new URI(\"/apicatalog/\");\n+\n+        Server server = createServer(\"localhost\", 10014, false, true, \"defaultZone\");\n+        URI reconstructedURI = gatewayRibbonLoadBalancingHttpClient.reconstructURIWithServer(server, request);\n+        assertEquals(\"http://localhost:10014/apicatalog/\", reconstructedURI.toString());\n+    }\n+\n+    @Test\n+    public void shouldReconstructURIWithServerWhenSecurePortEnabled() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cae257af3b097b5a597bb80cc1ad2d734c07540", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/5cae257af3b097b5a597bb80cc1ad2d734c07540", "committedDate": "2020-01-24T13:18:44Z", "message": "Refactor GatewayRibbonLoadBalancingHttpClient\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTQ4NDY0", "url": "https://github.com/zowe/api-layer/pull/478#pullrequestreview-347948464", "createdAt": "2020-01-24T13:22:57Z", "commit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyMjo1N1rOFhdeGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNjozMVrOFheqxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMDE2OQ==", "bodyText": "This class actually provides functionality for LatencyUtils .\nWe can change LatencyUtilsConfigInitializer class content and name.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370630169", "createdAt": "2020-01-24T13:22:57Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-common/src/main/java/com/ca/mfaas/product/monitoring/LatencyUtilsConfigInitializer.java", "diffHunk": "@@ -23,6 +23,7 @@\n     private static final String PROPERTY_KEY = \"LatencyUtils.useActualTime\";\n     @Override\n     public void initialize(@Nonnull ConfigurableApplicationContext applicationContext) {\n+        System.setProperty(\"org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMTE0NQ==", "bodyText": "may i ask why it is removed?", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370631145", "createdAt": "2020-01-24T13:25:23Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/main/java/com/ca/mfaas/client/api/GreetingController.java", "diffHunk": "@@ -8,21 +8,21 @@\n  * Copyright Contributors to the Zowe Project.\n  */\n package com.ca.mfaas.client.api;\n-\n import com.ca.mfaas.client.model.Greeting;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n-\n import java.util.Date;\n \n+\n /**\n  * Version 1 of the controller that returns greetings.\n  */\n @RestController\n-@Api(tags = {\"Other Operations\"}, description = \"General Operations\")\n+@Api(tags = {\"Other Operations\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzODI1MA==", "bodyText": "please follow ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$: for variable name", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370638250", "createdAt": "2020-01-24T13:41:32Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.ca.mfaas.message.log.ApimlLogger;\n+import com.ca.mfaas.product.logging.annotations.InjectApimlLogger;\n+import com.netflix.zuul.ZuulFilter;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+/**\n+ *  This filter should run on all requests for services, which do not have enabled encoded characters in URL\n+ *\n+ *  Special characters encoding is enabled on Tomcat and Spring Firewall so this filter takes over responsibility\n+ *  for filtering them.\n+ *  Encoded characters in URL are allowed only for services that have it explicitly configured on the metadata.\n+ *\n+ */\n+\n+@RequiredArgsConstructor\n+public class EncodedCharactersFilter extends ZuulFilter {\n+\n+    private final DiscoveryClient discoveryClient;\n+    public static final String METADATA_KEY = \"apiml.enableUrlEncodedCharacters\";\n+    private static final List<String> prohibitedCharacters = Arrays.asList(\"%2e\", \"%2E\", \";\", \"%3b\", \"%3B\", \"%2f\", \"%2F\", \"\\\\\", \"%5c\", \"%5C\", \"%25\", \"%\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0Njc3NQ==", "bodyText": "private boolean checkRequestForEncodedCharacters(String request) {\n        return prohibitedCharacters.stream()\n            .anyMatch(forbidden -> pathContains(request, forbidden));\n    }", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370646775", "createdAt": "2020-01-24T14:00:21Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.ca.mfaas.message.log.ApimlLogger;\n+import com.ca.mfaas.product.logging.annotations.InjectApimlLogger;\n+import com.netflix.zuul.ZuulFilter;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+/**\n+ *  This filter should run on all requests for services, which do not have enabled encoded characters in URL\n+ *\n+ *  Special characters encoding is enabled on Tomcat and Spring Firewall so this filter takes over responsibility\n+ *  for filtering them.\n+ *  Encoded characters in URL are allowed only for services that have it explicitly configured on the metadata.\n+ *\n+ */\n+\n+@RequiredArgsConstructor\n+public class EncodedCharactersFilter extends ZuulFilter {\n+\n+    private final DiscoveryClient discoveryClient;\n+    public static final String METADATA_KEY = \"apiml.enableUrlEncodedCharacters\";\n+    private static final List<String> prohibitedCharacters = Arrays.asList(\"%2e\", \"%2E\", \";\", \"%3b\", \"%3B\", \"%2f\", \"%2F\", \"\\\\\", \"%5c\", \"%5C\", \"%25\", \"%\");\n+\n+    @InjectApimlLogger\n+    private final ApimlLogger apimlLog = ApimlLogger.empty();\n+\n+    @Override\n+    public String filterType() {\n+        return FilterConstants.PRE_TYPE;\n+    }\n+\n+    @Override\n+    public int filterOrder() {\n+        return PRE_DECORATION_FILTER_ORDER + 1;\n+    }\n+\n+    @Override\n+    public boolean shouldFilter() {\n+        boolean shouldFilter = true;\n+\n+        RequestContext context = RequestContext.getCurrentContext();\n+        final String serviceId = (String) context.get(SERVICE_ID_KEY);\n+\n+        List<ServiceInstance> instanceList = discoveryClient.getInstances(serviceId);\n+\n+        List<Map<String, String>> enabledList = instanceList.stream()\n+            .map(ServiceInstance::getMetadata)\n+            .filter( metadata -> String.valueOf(true).equalsIgnoreCase(metadata.get(METADATA_KEY)) )\n+            .collect(Collectors.toList());\n+\n+        if (enabledList.size() == instanceList.size()) {\n+            shouldFilter = false;\n+        }\n+\n+        return shouldFilter;\n+    }\n+\n+    @Override\n+    public Object run() {\n+        RequestContext context = RequestContext.getCurrentContext();\n+        final String requestPath = context.getRequest().getRequestURI();\n+        if (checkRequestForEncodedCharacters(requestPath)) {\n+            rejectRequest(context);\n+        }\n+        return null;\n+    }\n+\n+    private boolean checkRequestForEncodedCharacters(String request) {\n+        for (String forbidden : prohibitedCharacters) {\n+            if (pathContains(request, forbidden)) {\n+                return true;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0NzgyOA==", "bodyText": "Please, throw exception instead of wrapping in the tests.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370647828", "createdAt": "2020-01-24T14:02:32Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0OTc5Nw==", "bodyText": "For this class, there is no need to setup spring env. May I ask to redesign this class like this?\nhttps://github.com/zowe/api-layer/blob/48bfe42dac0117c7a3a237d17abad8cf219e5106/gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370649797", "createdAt": "2020-01-24T14:06:31Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0NzgyOA=="}, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f497da3d1a9a3e68234587303ad3023fa72ef98", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/7f497da3d1a9a3e68234587303ad3023fa72ef98", "committedDate": "2020-01-24T14:23:10Z", "message": "remove redundant tomcat configuration\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34a7117bcc408484ab9f92fb03ef23cf40cebb5e", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/34a7117bcc408484ab9f92fb03ef23cf40cebb5e", "committedDate": "2020-01-24T15:11:34Z", "message": "more changes from comments\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/96d02fddbddf221301aa3299cbcd6f290b924010", "committedDate": "2020-01-24T15:36:24Z", "message": "change from ERROR to WARNING\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NDUyMzQ0", "url": "https://github.com/zowe/api-layer/pull/478#pullrequestreview-348452344", "createdAt": "2020-01-27T06:10:45Z", "commit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoxMDo0NVrOFh4lEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoyNTo0MFrOFh4ulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NDMyMg==", "bodyText": "customGreeting doesn't have delayMs param", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r371074322", "createdAt": "2020-01-27T06:10:45Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/test/java/com/ca/mfaas/client/api/GreetingControllerTest.java", "diffHunk": "@@ -45,4 +45,29 @@ public void callGreetingEndpointWithDelay() throws Exception {\n             .andExpect(jsonPath(\"$.content\", is(\"Hello, \" + name + \"!\")));\n     }\n \n+    @Test\n+    public void callPlainGreeting() throws Exception {\n+\n+        this.mockMvc.perform(get(\"/api/v1/greeting\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.content\", is(\"Hello, world!\")));\n+    }\n+\n+    @Test\n+    public void callGreetingWithoutQuery() throws Exception {\n+        String name = \"Petr\";\n+\n+        this.mockMvc.perform(get(\"/api/v1/\" + name + \"/greeting\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.content\", is(\"Hello, \" + name + \"!\")));\n+    }\n+\n+    @Test\n+    public void callGreetingWithoutQueryWithDelay() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NDcxOA==", "bodyText": "customGreeting doesn't have any query param.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r371074718", "createdAt": "2020-01-27T06:12:59Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/test/java/com/ca/mfaas/client/api/GreetingControllerTest.java", "diffHunk": "@@ -45,4 +45,29 @@ public void callGreetingEndpointWithDelay() throws Exception {\n             .andExpect(jsonPath(\"$.content\", is(\"Hello, \" + name + \"!\")));\n     }\n \n+    @Test\n+    public void callPlainGreeting() throws Exception {\n+\n+        this.mockMvc.perform(get(\"/api/v1/greeting\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.content\", is(\"Hello, world!\")));\n+    }\n+\n+    @Test\n+    public void callGreetingWithoutQuery() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3Njc1OQ==", "bodyText": "I think var name = $('#name').val(); can't be undefined because it is defined in html. It may provide empty string or text from input. So when I click Test Rest Call without filling input it returns 500", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r371076759", "createdAt": "2020-01-27T06:25:40Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/main/resources/static/js/hello.js", "diffHunk": "@@ -1,13 +1,15 @@\n function unsecureCall() {\n     var name = $('#name').val();\n     $.ajax({\n-        url: \"api/v1/greeting\" + ((name !== undefined) ? (\"?name=\" + name) : \"\")\n+        url: \"api/v1/\" + ((name !== undefined) ? (name + \"/greeting\") : \"greeting\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f08bc14be84ceb601df203dc4c915917af0eeabe", "author": {"user": {"login": "cZikos", "name": null}}, "url": "https://github.com/zowe/api-layer/commit/f08bc14be84ceb601df203dc4c915917af0eeabe", "committedDate": "2020-01-27T12:08:26Z", "message": "Minor changes: greeting test + discoverable client ui\n\nSigned-off-by: cZikos <christos.zikos@broadcom.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Mjc4NDMz", "url": "https://github.com/zowe/api-layer/pull/478#pullrequestreview-349278433", "createdAt": "2020-01-28T10:43:57Z", "commit": {"oid": "f08bc14be84ceb601df203dc4c915917af0eeabe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Mjc5NDI5", "url": "https://github.com/zowe/api-layer/pull/478#pullrequestreview-349279429", "createdAt": "2020-01-28T10:45:33Z", "commit": {"oid": "f08bc14be84ceb601df203dc4c915917af0eeabe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4958, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}