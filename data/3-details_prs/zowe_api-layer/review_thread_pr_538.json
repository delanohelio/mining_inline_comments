{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDc3OTUz", "number": 538, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTo0NzozNFrODk-cuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0MTowNFrODlVRww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDk4NDg4OnYy", "diffSide": "RIGHT", "path": "discovery-service/src/main/java/org/zowe/apiml/discovery/GatewayNotifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTo0NzozNFrOFxmXqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDowMjo0NFrOFxm5qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MzE5NQ==", "bodyText": "You can use Gateway constant from org.zowe.apiml.product.constants.CoreService instead.", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387553195", "createdAt": "2020-03-04T09:47:34Z", "author": {"login": "JirkaAichler"}, "path": "discovery-service/src/main/java/org/zowe/apiml/discovery/GatewayNotifier.java", "diffHunk": "@@ -14,30 +14,66 @@\n import com.netflix.eureka.EurekaServerContext;\n import com.netflix.eureka.EurekaServerContextHolder;\n import com.netflix.eureka.registry.PeerAwareInstanceRegistry;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.util.BiConsumer;\n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n import org.springframework.stereotype.Component;\n import org.springframework.web.client.RestTemplate;\n import org.zowe.apiml.message.core.MessageService;\n import org.zowe.apiml.message.log.ApimlLogger;\n import org.zowe.apiml.util.EurekaUtils;\n \n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n+/**\n+ * This bean is used to send a notification to the Gateways. It is sending notification asynchronous (at first they\n+ * are stored into the queue and then with a delay send to Gateways). If same notification is waiting for sending\n+ * it send it only once.\n+ *\n+ * Purpose of this bean is at first in notification Gateways about new and removed services and process at least\n+ * evicting of caches there.\n+ */\n @Component\n @Slf4j\n-public class GatewayNotifier {\n+public class GatewayNotifier implements Runnable {\n+\n+    public static final String GATEWAY_SERVICE_ID = \"GATEWAY\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ecf898789335e87f000c0ca0c443c6bf719b6f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MTg5Ng==", "bodyText": "Fixed, just here is needed uppercase value, so I just replace the literal, constant itself is still there.", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387561896", "createdAt": "2020-03-04T10:02:44Z", "author": {"login": "pj892031"}, "path": "discovery-service/src/main/java/org/zowe/apiml/discovery/GatewayNotifier.java", "diffHunk": "@@ -14,30 +14,66 @@\n import com.netflix.eureka.EurekaServerContext;\n import com.netflix.eureka.EurekaServerContextHolder;\n import com.netflix.eureka.registry.PeerAwareInstanceRegistry;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.util.BiConsumer;\n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n import org.springframework.stereotype.Component;\n import org.springframework.web.client.RestTemplate;\n import org.zowe.apiml.message.core.MessageService;\n import org.zowe.apiml.message.log.ApimlLogger;\n import org.zowe.apiml.util.EurekaUtils;\n \n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n+/**\n+ * This bean is used to send a notification to the Gateways. It is sending notification asynchronous (at first they\n+ * are stored into the queue and then with a delay send to Gateways). If same notification is waiting for sending\n+ * it send it only once.\n+ *\n+ * Purpose of this bean is at first in notification Gateways about new and removed services and process at least\n+ * evicting of caches there.\n+ */\n @Component\n @Slf4j\n-public class GatewayNotifier {\n+public class GatewayNotifier implements Runnable {\n+\n+    public static final String GATEWAY_SERVICE_ID = \"GATEWAY\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MzE5NQ=="}, "originalCommit": {"oid": "25ecf898789335e87f000c0ca0c443c6bf719b6f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTE0ODAxOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDozMzo0N1rOFxn-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTowNzowOVrOFxpCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3OTQyNw==", "bodyText": "Please use constant as well.", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387579427", "createdAt": "2020-03-04T10:33:47Z", "author": {"login": "JirkaAichler"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -139,6 +145,31 @@ public TokenAuthentication validateJwtToken(String jwtToken) {\n         return validTokenAuthentication;\n     }\n \n+    /**\n+     * This method get all invalidated JWT token in the cache and distributes them to instance of Gateway with name\n+     * in argument toInstanceId. If instance cannot be find it return false. A notification can throw an runtime\n+     * exception. In all other cases all invalidated token are distributed and method returns true.\n+     *\n+     * @param toInstanceId instanceId of Gateway where invalidated JWT token should be sent\n+     * @return true if all token were sent, otherwise false\n+     */\n+    public boolean distributeInvalidate(String toInstanceId) {\n+        final Application application = discoveryClient.getApplication(\"gateway\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5a0c01d98905f3a5a3d9dbccd61baa96d25c40"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5NjkzMA==", "bodyText": "all instances of \"gateway\" were changed", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387596930", "createdAt": "2020-03-04T11:07:09Z", "author": {"login": "pj892031"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -139,6 +145,31 @@ public TokenAuthentication validateJwtToken(String jwtToken) {\n         return validTokenAuthentication;\n     }\n \n+    /**\n+     * This method get all invalidated JWT token in the cache and distributes them to instance of Gateway with name\n+     * in argument toInstanceId. If instance cannot be find it return false. A notification can throw an runtime\n+     * exception. In all other cases all invalidated token are distributed and method returns true.\n+     *\n+     * @param toInstanceId instanceId of Gateway where invalidated JWT token should be sent\n+     * @return true if all token were sent, otherwise false\n+     */\n+    public boolean distributeInvalidate(String toInstanceId) {\n+        final Application application = discoveryClient.getApplication(\"gateway\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3OTQyNw=="}, "originalCommit": {"oid": "4c5a0c01d98905f3a5a3d9dbccd61baa96d25c40"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjI5ODE1OnYy", "diffSide": "RIGHT", "path": "discovery-service/src/test/java/org/zowe/apiml/discovery/GatewayNotifierTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo1Njo0NVrOFxzFDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxMjo0NFrOFyJy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2MTQyMg==", "bodyText": "I think you can move\nRestTemplate restTemplate = mock(RestTemplate.class); MessageService messageService = mock(MessageService.class); GatewayNotifier gatewayNotifier = new GatewayNotifierSync(restTemplate, messageService);\nto the setup method since they are used by severals tests. Just for better readability of the tests", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387761422", "createdAt": "2020-03-04T15:56:45Z", "author": {"login": "taban03"}, "path": "discovery-service/src/test/java/org/zowe/apiml/discovery/GatewayNotifierTest.java", "diffHunk": "@@ -134,4 +144,96 @@ public void testNotificationFailed() {\n         );\n     }\n \n+    @Test\n+    public void testDistributeInvalidatedCredentials() {\n+        InstanceInfo targetInstanceInfo = createInstanceInfo(\"host\", 1000, 1433);\n+        String targetInstanceId = targetInstanceInfo.getInstanceId();\n+\n+        InstanceInfo gatewayInstance = createInstanceInfo(\"gateway\", 111, 123);\n+        String gatewayUrl = \"https://gateway:123/auth/distribute/\" + targetInstanceId;\n+\n+        RestTemplate restTemplate = mock(RestTemplate.class);\n+        MessageService messageService = mock(MessageService.class);\n+        GatewayNotifier gatewayNotifier = new GatewayNotifierSync(restTemplate, messageService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzMzYzMA==", "bodyText": "done", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r388133630", "createdAt": "2020-03-05T08:12:44Z", "author": {"login": "pj892031"}, "path": "discovery-service/src/test/java/org/zowe/apiml/discovery/GatewayNotifierTest.java", "diffHunk": "@@ -134,4 +144,96 @@ public void testNotificationFailed() {\n         );\n     }\n \n+    @Test\n+    public void testDistributeInvalidatedCredentials() {\n+        InstanceInfo targetInstanceInfo = createInstanceInfo(\"host\", 1000, 1433);\n+        String targetInstanceId = targetInstanceInfo.getInstanceId();\n+\n+        InstanceInfo gatewayInstance = createInstanceInfo(\"gateway\", 111, 123);\n+        String gatewayUrl = \"https://gateway:123/auth/distribute/\" + targetInstanceId;\n+\n+        RestTemplate restTemplate = mock(RestTemplate.class);\n+        MessageService messageService = mock(MessageService.class);\n+        GatewayNotifier gatewayNotifier = new GatewayNotifierSync(restTemplate, messageService);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2MTQyMg=="}, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjMzOTY0OnYy", "diffSide": "RIGHT", "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowNjoxMFrOFxzeuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxMjo1MFrOFyJzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Nzk5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testGetAllRecords_MissingCache() {\n          \n          \n            \n                public void givenUnknownCacheName_whenGetAllRecords_thenThrowsException() {", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387767993", "createdAt": "2020-03-04T16:06:10Z", "author": {"login": "taban03"}, "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "diffHunk": "@@ -91,4 +92,57 @@ public void testEvictSubset() {\n         verify(ehCache2, times(1)).remove(keys.get(3));\n     }\n \n+    @Test\n+    public void testGetAllRecords_MissingCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzMzY2Nw==", "bodyText": "done", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r388133667", "createdAt": "2020-03-05T08:12:50Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "diffHunk": "@@ -91,4 +92,57 @@ public void testEvictSubset() {\n         verify(ehCache2, times(1)).remove(keys.get(3));\n     }\n \n+    @Test\n+    public void testGetAllRecords_MissingCache() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2Nzk5Mw=="}, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjM1MTQzOnYy", "diffSide": "RIGHT", "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjowODo1M1rOFxzl7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxMjo1NVrOFyJzRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2OTgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testGetAllRecords_UnsupportedCacheManager() {\n          \n          \n            \n                public void givenUnsupportedCacheManager_whenGetAllRecords_thenThrowsException() {", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387769838", "createdAt": "2020-03-04T16:08:53Z", "author": {"login": "taban03"}, "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "diffHunk": "@@ -91,4 +92,57 @@ public void testEvictSubset() {\n         verify(ehCache2, times(1)).remove(keys.get(3));\n     }\n \n+    @Test\n+    public void testGetAllRecords_MissingCache() {\n+        CacheManager cacheManager = mock(CacheManager.class);\n+        IllegalArgumentException iae = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            CacheUtils.getAllRecords(cacheManager, \"unknownCacheName\");\n+        });\n+        assertEquals(\"Unknown cache unknownCacheName\", iae.getMessage());\n+    }\n+\n+    @Test\n+    public void testGetAllRecords_UnsupportedCacheManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzMzcwMA==", "bodyText": "done", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r388133700", "createdAt": "2020-03-05T08:12:55Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "diffHunk": "@@ -91,4 +92,57 @@ public void testEvictSubset() {\n         verify(ehCache2, times(1)).remove(keys.get(3));\n     }\n \n+    @Test\n+    public void testGetAllRecords_MissingCache() {\n+        CacheManager cacheManager = mock(CacheManager.class);\n+        IllegalArgumentException iae = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            CacheUtils.getAllRecords(cacheManager, \"unknownCacheName\");\n+        });\n+        assertEquals(\"Unknown cache unknownCacheName\", iae.getMessage());\n+    }\n+\n+    @Test\n+    public void testGetAllRecords_UnsupportedCacheManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2OTgzOA=="}, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjM3MzgyOnYy", "diffSide": "RIGHT", "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoxNDoyN1rOFxz0SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxMzowMVrOFyJzcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MzUxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testGetAllRecords_Success() {\n          \n          \n            \n                public void givenValidCacheManager_whenGetAllRecords_thenReadAllStoredRecords() {", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r387773512", "createdAt": "2020-03-04T16:14:27Z", "author": {"login": "taban03"}, "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "diffHunk": "@@ -91,4 +92,57 @@ public void testEvictSubset() {\n         verify(ehCache2, times(1)).remove(keys.get(3));\n     }\n \n+    @Test\n+    public void testGetAllRecords_MissingCache() {\n+        CacheManager cacheManager = mock(CacheManager.class);\n+        IllegalArgumentException iae = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            CacheUtils.getAllRecords(cacheManager, \"unknownCacheName\");\n+        });\n+        assertEquals(\"Unknown cache unknownCacheName\", iae.getMessage());\n+    }\n+\n+    @Test\n+    public void testGetAllRecords_UnsupportedCacheManager() {\n+        CacheManager cacheManager = mock(CacheManager.class);\n+        Cache cache = mock(Cache.class);\n+        when(cacheManager.getCache(\"knownCacheName\")).thenReturn(cache);\n+        IllegalArgumentException iae = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            CacheUtils.getAllRecords(cacheManager, \"knownCacheName\");\n+        });\n+        assertTrue(iae.getMessage().startsWith(\"Unsupported type of cache : \"));\n+    }\n+\n+    private Map<Object, Element> convert(Map<Integer, String> in) {\n+        Map<Object, Element> out = new HashMap<>();\n+        for (Map.Entry<Integer, String> entry : in.entrySet()) {\n+            out.put(entry.getKey(), new Element(entry.getKey(), entry.getValue()));\n+        }\n+        return out;\n+    }\n+\n+    @Test\n+    public void testGetAllRecords_Success() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzMzc0NQ==", "bodyText": "done", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r388133745", "createdAt": "2020-03-05T08:13:01Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/test/java/org/zowe/apiml/util/CacheUtilsTest.java", "diffHunk": "@@ -91,4 +92,57 @@ public void testEvictSubset() {\n         verify(ehCache2, times(1)).remove(keys.get(3));\n     }\n \n+    @Test\n+    public void testGetAllRecords_MissingCache() {\n+        CacheManager cacheManager = mock(CacheManager.class);\n+        IllegalArgumentException iae = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            CacheUtils.getAllRecords(cacheManager, \"unknownCacheName\");\n+        });\n+        assertEquals(\"Unknown cache unknownCacheName\", iae.getMessage());\n+    }\n+\n+    @Test\n+    public void testGetAllRecords_UnsupportedCacheManager() {\n+        CacheManager cacheManager = mock(CacheManager.class);\n+        Cache cache = mock(Cache.class);\n+        when(cacheManager.getCache(\"knownCacheName\")).thenReturn(cache);\n+        IllegalArgumentException iae = Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            CacheUtils.getAllRecords(cacheManager, \"knownCacheName\");\n+        });\n+        assertTrue(iae.getMessage().startsWith(\"Unsupported type of cache : \"));\n+    }\n+\n+    private Map<Object, Element> convert(Map<Integer, String> in) {\n+        Map<Object, Element> out = new HashMap<>();\n+        for (Map.Entry<Integer, String> entry : in.entrySet()) {\n+            out.put(entry.getKey(), new Element(entry.getKey(), entry.getValue()));\n+        }\n+        return out;\n+    }\n+\n+    @Test\n+    public void testGetAllRecords_Success() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3MzUxMg=="}, "originalCommit": {"oid": "2e1eadf530b60567050741336a8f01cccd4e0fca"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcyNTE1OnYy", "diffSide": "RIGHT", "path": "discovery-service/src/main/java/org/zowe/apiml/discovery/GatewayNotifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0MTowNFrOFyKjAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTowMjo0OFrOFyLN4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NTkyMg==", "bodyText": "We should use externalized messages for warn, info and error.", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r388145922", "createdAt": "2020-03-05T08:41:04Z", "author": {"login": "JirkaAichler"}, "path": "discovery-service/src/main/java/org/zowe/apiml/discovery/GatewayNotifier.java", "diffHunk": "@@ -185,6 +185,9 @@ public void run() {\n                     notification.process();\n                 }\n             } catch (InterruptedException e) {\n+                log.warn(\"Thread for Gateway notification was interrupted\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29dd5d3fd83db260f03e4168d98819a129b3c04"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1Njg5OQ==", "bodyText": "done", "url": "https://github.com/zowe/api-layer/pull/538#discussion_r388156899", "createdAt": "2020-03-05T09:02:48Z", "author": {"login": "pj892031"}, "path": "discovery-service/src/main/java/org/zowe/apiml/discovery/GatewayNotifier.java", "diffHunk": "@@ -185,6 +185,9 @@ public void run() {\n                     notification.process();\n                 }\n             } catch (InterruptedException e) {\n+                log.warn(\"Thread for Gateway notification was interrupted\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NTkyMg=="}, "originalCommit": {"oid": "a29dd5d3fd83db260f03e4168d98819a129b3c04"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 448, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}