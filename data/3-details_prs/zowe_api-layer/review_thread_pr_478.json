{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MjcxMjE3", "number": 478, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNzowM1rODadINQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoyNTo0MFrODaxfFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY2ODA1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNzowM1rOFhatWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNzowM1rOFhatWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDkyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldReconstructURIWithServerWhenUnsecurePortEnabled() throws URISyntaxException {\n          \n          \n            \n                public void shouldReconstructURIWithServer_WhenUnsecurePortEnabled() throws URISyntaxException {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370584921", "createdAt": "2020-01-24T11:17:03Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {\n+\n+    private GatewayRibbonLoadBalancingHttpClient gatewayRibbonLoadBalancingHttpClient;\n+    private CloseableHttpClient closeableHttpClient;\n+    private IClientConfig iClientConfig;\n+\n+    @Autowired\n+    private ServerIntrospector serverIntrospector;\n+\n+    @Before\n+    public void setup() {\n+        closeableHttpClient = mock(CloseableHttpClient.class);\n+        iClientConfig = IClientConfig.Builder.newBuilder(DefaultClientConfigImpl.class, \"apicatalog\").withSecure(false).withFollowRedirects(false).withDeploymentContextBasedVipAddresses(\"apicatalog\").withLoadBalancerEnabled(false).build();\n+        gatewayRibbonLoadBalancingHttpClient = new GatewayRibbonLoadBalancingHttpClient(closeableHttpClient, iClientConfig, serverIntrospector);\n+    }\n+\n+    @Test\n+    public void shouldReconstructURIWithServerWhenUnsecurePortEnabled() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY2OTc1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNzo0OVrOFhaubw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNzo0OVrOFhaubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTE5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenMultipleInstancesWhenMixedSetupShouldBePesimistic() {\n          \n          \n            \n                public void givenMultipleInstances_WhenMixedSetup_ShouldBePesimistic() {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585199", "createdAt": "2020-01-24T11:17:49Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.cloud.client.DefaultServiceInstance;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EncodedCharactersFilterTest {\n+\n+    private EncodedCharactersFilter filter;\n+\n+    private final String METADATA_KEY = EncodedCharactersFilter.METADATA_KEY;\n+    private final String SERVICE_ID = \"serviceid\";\n+\n+    private final DefaultServiceInstance serviceInstanceWithConfiguration = new DefaultServiceInstance(\"INSTANCE1\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+    private final DefaultServiceInstance serviceInstanceWithoutConfiguration = new DefaultServiceInstance(\"INSTANCE2\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+\n+    @Mock\n+    DiscoveryClient discoveryClient;\n+\n+    @Before\n+    public void setup() {\n+        filter = new EncodedCharactersFilter(discoveryClient);\n+        serviceInstanceWithConfiguration.getMetadata().put(METADATA_KEY, \"true\");\n+        serviceInstanceWithoutConfiguration.getMetadata().put(METADATA_KEY, \"false\");\n+        RequestContext ctx = RequestContext.getCurrentContext();\n+        ctx.clear();\n+        ctx.set(PROXY_KEY, \"api/v1/\" + SERVICE_ID);\n+        ctx.set(SERVICE_ID_KEY, SERVICE_ID);\n+        ctx.setResponse(new MockHttpServletResponse());\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenNotConfiguredShouldFilter() {\n+        List<ServiceInstance> instanceList = new ArrayList<>();\n+        instanceList.add(serviceInstanceWithoutConfiguration);\n+        when(discoveryClient.getInstances(SERVICE_ID)).thenReturn(instanceList);\n+\n+        assertThat(filter.shouldFilter(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenConfiguredShouldNotFilter() {\n+        List<ServiceInstance> instanceList = new ArrayList<>();\n+        instanceList.add(serviceInstanceWithConfiguration);\n+        when(discoveryClient.getInstances(SERVICE_ID)).thenReturn(instanceList);\n+\n+        assertThat(filter.shouldFilter(), is(equalTo(false)));\n+    }\n+\n+    @Test\n+    public void shouldReturnFilterType() {\n+        String filterType = this.filter.filterType();\n+        assertEquals(\"pre\", filterType);\n+    }\n+\n+    @Test\n+    public void shouldReturnFilterOrder() {\n+        int filterOrder = this.filter.filterOrder();\n+        assertEquals(6, filterOrder);\n+    }\n+\n+    @Test\n+    public void givenMultipleInstancesWhenMixedSetupShouldBePesimistic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY3MDc2OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxODoxNFrOFhavBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxODoxNFrOFhavBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTM1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenSingleInstanceWhenConfiguredShouldNotFilter() {\n          \n          \n            \n                public void givenSingleInstance_WhenConfigured_ShouldNotFilter() {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585350", "createdAt": "2020-01-24T11:18:14Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.cloud.client.DefaultServiceInstance;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EncodedCharactersFilterTest {\n+\n+    private EncodedCharactersFilter filter;\n+\n+    private final String METADATA_KEY = EncodedCharactersFilter.METADATA_KEY;\n+    private final String SERVICE_ID = \"serviceid\";\n+\n+    private final DefaultServiceInstance serviceInstanceWithConfiguration = new DefaultServiceInstance(\"INSTANCE1\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+    private final DefaultServiceInstance serviceInstanceWithoutConfiguration = new DefaultServiceInstance(\"INSTANCE2\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+\n+    @Mock\n+    DiscoveryClient discoveryClient;\n+\n+    @Before\n+    public void setup() {\n+        filter = new EncodedCharactersFilter(discoveryClient);\n+        serviceInstanceWithConfiguration.getMetadata().put(METADATA_KEY, \"true\");\n+        serviceInstanceWithoutConfiguration.getMetadata().put(METADATA_KEY, \"false\");\n+        RequestContext ctx = RequestContext.getCurrentContext();\n+        ctx.clear();\n+        ctx.set(PROXY_KEY, \"api/v1/\" + SERVICE_ID);\n+        ctx.set(SERVICE_ID_KEY, SERVICE_ID);\n+        ctx.setResponse(new MockHttpServletResponse());\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenNotConfiguredShouldFilter() {\n+        List<ServiceInstance> instanceList = new ArrayList<>();\n+        instanceList.add(serviceInstanceWithoutConfiguration);\n+        when(discoveryClient.getInstances(SERVICE_ID)).thenReturn(instanceList);\n+\n+        assertThat(filter.shouldFilter(), is(equalTo(true)));\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenConfiguredShouldNotFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY3MTU4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxODozN1rOFhavgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxODozN1rOFhavgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTQ3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenSingleInstanceWhenNotConfiguredShouldFilter() {\n          \n          \n            \n                public void givenSingleInstance_WhenNotConfigured_ShouldFilter() {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585475", "createdAt": "2020-01-24T11:18:37Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilterTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.cloud.client.DefaultServiceInstance;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EncodedCharactersFilterTest {\n+\n+    private EncodedCharactersFilter filter;\n+\n+    private final String METADATA_KEY = EncodedCharactersFilter.METADATA_KEY;\n+    private final String SERVICE_ID = \"serviceid\";\n+\n+    private final DefaultServiceInstance serviceInstanceWithConfiguration = new DefaultServiceInstance(\"INSTANCE1\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+    private final DefaultServiceInstance serviceInstanceWithoutConfiguration = new DefaultServiceInstance(\"INSTANCE2\", SERVICE_ID ,\"\",0,true, new HashMap<String, String>());\n+\n+    @Mock\n+    DiscoveryClient discoveryClient;\n+\n+    @Before\n+    public void setup() {\n+        filter = new EncodedCharactersFilter(discoveryClient);\n+        serviceInstanceWithConfiguration.getMetadata().put(METADATA_KEY, \"true\");\n+        serviceInstanceWithoutConfiguration.getMetadata().put(METADATA_KEY, \"false\");\n+        RequestContext ctx = RequestContext.getCurrentContext();\n+        ctx.clear();\n+        ctx.set(PROXY_KEY, \"api/v1/\" + SERVICE_ID);\n+        ctx.set(SERVICE_ID_KEY, SERVICE_ID);\n+        ctx.setResponse(new MockHttpServletResponse());\n+    }\n+\n+    @Test\n+    public void givenSingleInstanceWhenNotConfiguredShouldFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY3MzgxOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxOTo0MFrOFhaw5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxOTo0MFrOFhaw5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldReconstructURIWithServerWhenSecurePortEnabled() throws URISyntaxException {\n          \n          \n            \n                public void shouldReconstructURIWithServer_WhenSecurePortEnabled() throws URISyntaxException {", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370585830", "createdAt": "2020-01-24T11:19:40Z", "author": {"login": "taban03"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {\n+\n+    private GatewayRibbonLoadBalancingHttpClient gatewayRibbonLoadBalancingHttpClient;\n+    private CloseableHttpClient closeableHttpClient;\n+    private IClientConfig iClientConfig;\n+\n+    @Autowired\n+    private ServerIntrospector serverIntrospector;\n+\n+    @Before\n+    public void setup() {\n+        closeableHttpClient = mock(CloseableHttpClient.class);\n+        iClientConfig = IClientConfig.Builder.newBuilder(DefaultClientConfigImpl.class, \"apicatalog\").withSecure(false).withFollowRedirects(false).withDeploymentContextBasedVipAddresses(\"apicatalog\").withLoadBalancerEnabled(false).build();\n+        gatewayRibbonLoadBalancingHttpClient = new GatewayRibbonLoadBalancingHttpClient(closeableHttpClient, iClientConfig, serverIntrospector);\n+    }\n+\n+    @Test\n+    public void shouldReconstructURIWithServerWhenUnsecurePortEnabled() throws URISyntaxException {\n+        HttpGet httpGet = mock(HttpGet.class);\n+        CloseableHttpResponse closeableHttpResponse = mock(CloseableHttpResponse.class);\n+        try {\n+            when(closeableHttpClient.execute(httpGet)).thenReturn(closeableHttpResponse);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        URI request = new URI(\"/apicatalog/\");\n+\n+        Server server = createServer(\"localhost\", 10014, false, true, \"defaultZone\");\n+        URI reconstructedURI = gatewayRibbonLoadBalancingHttpClient.reconstructURIWithServer(server, request);\n+        assertEquals(\"http://localhost:10014/apicatalog/\", reconstructedURI.toString());\n+    }\n+\n+    @Test\n+    public void shouldReconstructURIWithServerWhenSecurePortEnabled() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDk2Mjk4OnYy", "diffSide": "RIGHT", "path": "apiml-common/src/main/java/com/ca/mfaas/product/monitoring/LatencyUtilsConfigInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyMjo1N1rOFhdeGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDoyODo1M1rOFhfXbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMDE2OQ==", "bodyText": "This class actually provides functionality for LatencyUtils .\nWe can change LatencyUtilsConfigInitializer class content and name.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370630169", "createdAt": "2020-01-24T13:22:57Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-common/src/main/java/com/ca/mfaas/product/monitoring/LatencyUtilsConfigInitializer.java", "diffHunk": "@@ -23,6 +23,7 @@\n     private static final String PROPERTY_KEY = \"LatencyUtils.useActualTime\";\n     @Override\n     public void initialize(@Nonnull ConfigurableApplicationContext applicationContext) {\n+        System.setProperty(\"org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MTIzMQ==", "bodyText": "This is a temporary placement. There will be a new TomcatConfiguration file in the near future.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370661231", "createdAt": "2020-01-24T14:28:53Z", "author": {"login": "cZikos"}, "path": "apiml-common/src/main/java/com/ca/mfaas/product/monitoring/LatencyUtilsConfigInitializer.java", "diffHunk": "@@ -23,6 +23,7 @@\n     private static final String PROPERTY_KEY = \"LatencyUtils.useActualTime\";\n     @Override\n     public void initialize(@Nonnull ConfigurableApplicationContext applicationContext) {\n+        System.setProperty(\"org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMDE2OQ=="}, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDk2OTQ0OnYy", "diffSide": "RIGHT", "path": "discoverable-client/src/main/java/com/ca/mfaas/client/api/GreetingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyNToyM1rOFhdh6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDoyOTozMVrOFhfYwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMTE0NQ==", "bodyText": "may i ask why it is removed?", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370631145", "createdAt": "2020-01-24T13:25:23Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/main/java/com/ca/mfaas/client/api/GreetingController.java", "diffHunk": "@@ -8,21 +8,21 @@\n  * Copyright Contributors to the Zowe Project.\n  */\n package com.ca.mfaas.client.api;\n-\n import com.ca.mfaas.client.model.Greeting;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n-\n import java.util.Date;\n \n+\n /**\n  * Version 1 of the controller that returns greetings.\n  */\n @RestController\n-@Api(tags = {\"Other Operations\"}, description = \"General Operations\")\n+@Api(tags = {\"Other Operations\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MTU2OQ==", "bodyText": "description tag was depricated. I will replace with latest relevant parameter.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370661569", "createdAt": "2020-01-24T14:29:31Z", "author": {"login": "cZikos"}, "path": "discoverable-client/src/main/java/com/ca/mfaas/client/api/GreetingController.java", "diffHunk": "@@ -8,21 +8,21 @@\n  * Copyright Contributors to the Zowe Project.\n  */\n package com.ca.mfaas.client.api;\n-\n import com.ca.mfaas.client.model.Greeting;\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n-\n import java.util.Date;\n \n+\n /**\n  * Version 1 of the controller that returns greetings.\n  */\n @RestController\n-@Api(tags = {\"Other Operations\"}, description = \"General Operations\")\n+@Api(tags = {\"Other Operations\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMTE0NQ=="}, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTAxNzE1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzo0MTozMlrOFhd9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDozMDoyMFrOFhfaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzODI1MA==", "bodyText": "please follow ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$: for variable name", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370638250", "createdAt": "2020-01-24T13:41:32Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.ca.mfaas.message.log.ApimlLogger;\n+import com.ca.mfaas.product.logging.annotations.InjectApimlLogger;\n+import com.netflix.zuul.ZuulFilter;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+/**\n+ *  This filter should run on all requests for services, which do not have enabled encoded characters in URL\n+ *\n+ *  Special characters encoding is enabled on Tomcat and Spring Firewall so this filter takes over responsibility\n+ *  for filtering them.\n+ *  Encoded characters in URL are allowed only for services that have it explicitly configured on the metadata.\n+ *\n+ */\n+\n+@RequiredArgsConstructor\n+public class EncodedCharactersFilter extends ZuulFilter {\n+\n+    private final DiscoveryClient discoveryClient;\n+    public static final String METADATA_KEY = \"apiml.enableUrlEncodedCharacters\";\n+    private static final List<String> prohibitedCharacters = Arrays.asList(\"%2e\", \"%2E\", \";\", \"%3b\", \"%3B\", \"%2f\", \"%2F\", \"\\\\\", \"%5c\", \"%5C\", \"%25\", \"%\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MTk2OA==", "bodyText": "Done", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370661968", "createdAt": "2020-01-24T14:30:20Z", "author": {"login": "cZikos"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.ca.mfaas.message.log.ApimlLogger;\n+import com.ca.mfaas.product.logging.annotations.InjectApimlLogger;\n+import com.netflix.zuul.ZuulFilter;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+/**\n+ *  This filter should run on all requests for services, which do not have enabled encoded characters in URL\n+ *\n+ *  Special characters encoding is enabled on Tomcat and Spring Firewall so this filter takes over responsibility\n+ *  for filtering them.\n+ *  Encoded characters in URL are allowed only for services that have it explicitly configured on the metadata.\n+ *\n+ */\n+\n+@RequiredArgsConstructor\n+public class EncodedCharactersFilter extends ZuulFilter {\n+\n+    private final DiscoveryClient discoveryClient;\n+    public static final String METADATA_KEY = \"apiml.enableUrlEncodedCharacters\";\n+    private static final List<String> prohibitedCharacters = Arrays.asList(\"%2e\", \"%2E\", \";\", \"%3b\", \"%3B\", \"%2f\", \"%2F\", \"\\\\\", \"%5c\", \"%5C\", \"%25\", \"%\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzODI1MA=="}, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA3MzI3OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMDoyMVrOFhee9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDozOTowOVrOFhfr7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0Njc3NQ==", "bodyText": "private boolean checkRequestForEncodedCharacters(String request) {\n        return prohibitedCharacters.stream()\n            .anyMatch(forbidden -> pathContains(request, forbidden));\n    }", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370646775", "createdAt": "2020-01-24T14:00:21Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.ca.mfaas.message.log.ApimlLogger;\n+import com.ca.mfaas.product.logging.annotations.InjectApimlLogger;\n+import com.netflix.zuul.ZuulFilter;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+/**\n+ *  This filter should run on all requests for services, which do not have enabled encoded characters in URL\n+ *\n+ *  Special characters encoding is enabled on Tomcat and Spring Firewall so this filter takes over responsibility\n+ *  for filtering them.\n+ *  Encoded characters in URL are allowed only for services that have it explicitly configured on the metadata.\n+ *\n+ */\n+\n+@RequiredArgsConstructor\n+public class EncodedCharactersFilter extends ZuulFilter {\n+\n+    private final DiscoveryClient discoveryClient;\n+    public static final String METADATA_KEY = \"apiml.enableUrlEncodedCharacters\";\n+    private static final List<String> prohibitedCharacters = Arrays.asList(\"%2e\", \"%2E\", \";\", \"%3b\", \"%3B\", \"%2f\", \"%2F\", \"\\\\\", \"%5c\", \"%5C\", \"%25\", \"%\");\n+\n+    @InjectApimlLogger\n+    private final ApimlLogger apimlLog = ApimlLogger.empty();\n+\n+    @Override\n+    public String filterType() {\n+        return FilterConstants.PRE_TYPE;\n+    }\n+\n+    @Override\n+    public int filterOrder() {\n+        return PRE_DECORATION_FILTER_ORDER + 1;\n+    }\n+\n+    @Override\n+    public boolean shouldFilter() {\n+        boolean shouldFilter = true;\n+\n+        RequestContext context = RequestContext.getCurrentContext();\n+        final String serviceId = (String) context.get(SERVICE_ID_KEY);\n+\n+        List<ServiceInstance> instanceList = discoveryClient.getInstances(serviceId);\n+\n+        List<Map<String, String>> enabledList = instanceList.stream()\n+            .map(ServiceInstance::getMetadata)\n+            .filter( metadata -> String.valueOf(true).equalsIgnoreCase(metadata.get(METADATA_KEY)) )\n+            .collect(Collectors.toList());\n+\n+        if (enabledList.size() == instanceList.size()) {\n+            shouldFilter = false;\n+        }\n+\n+        return shouldFilter;\n+    }\n+\n+    @Override\n+    public Object run() {\n+        RequestContext context = RequestContext.getCurrentContext();\n+        final String requestPath = context.getRequest().getRequestURI();\n+        if (checkRequestForEncodedCharacters(requestPath)) {\n+            rejectRequest(context);\n+        }\n+        return null;\n+    }\n+\n+    private boolean checkRequestForEncodedCharacters(String request) {\n+        for (String forbidden : prohibitedCharacters) {\n+            if (pathContains(request, forbidden)) {\n+                return true;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NjQ3OA==", "bodyText": "Nice one, thanks.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370666478", "createdAt": "2020-01-24T14:39:09Z", "author": {"login": "cZikos"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/EncodedCharactersFilter.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.filters.pre;\n+\n+import com.ca.mfaas.message.log.ApimlLogger;\n+import com.ca.mfaas.product.logging.annotations.InjectApimlLogger;\n+import com.netflix.zuul.ZuulFilter;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.*;\n+\n+/**\n+ *  This filter should run on all requests for services, which do not have enabled encoded characters in URL\n+ *\n+ *  Special characters encoding is enabled on Tomcat and Spring Firewall so this filter takes over responsibility\n+ *  for filtering them.\n+ *  Encoded characters in URL are allowed only for services that have it explicitly configured on the metadata.\n+ *\n+ */\n+\n+@RequiredArgsConstructor\n+public class EncodedCharactersFilter extends ZuulFilter {\n+\n+    private final DiscoveryClient discoveryClient;\n+    public static final String METADATA_KEY = \"apiml.enableUrlEncodedCharacters\";\n+    private static final List<String> prohibitedCharacters = Arrays.asList(\"%2e\", \"%2E\", \";\", \"%3b\", \"%3B\", \"%2f\", \"%2F\", \"\\\\\", \"%5c\", \"%5C\", \"%25\", \"%\");\n+\n+    @InjectApimlLogger\n+    private final ApimlLogger apimlLog = ApimlLogger.empty();\n+\n+    @Override\n+    public String filterType() {\n+        return FilterConstants.PRE_TYPE;\n+    }\n+\n+    @Override\n+    public int filterOrder() {\n+        return PRE_DECORATION_FILTER_ORDER + 1;\n+    }\n+\n+    @Override\n+    public boolean shouldFilter() {\n+        boolean shouldFilter = true;\n+\n+        RequestContext context = RequestContext.getCurrentContext();\n+        final String serviceId = (String) context.get(SERVICE_ID_KEY);\n+\n+        List<ServiceInstance> instanceList = discoveryClient.getInstances(serviceId);\n+\n+        List<Map<String, String>> enabledList = instanceList.stream()\n+            .map(ServiceInstance::getMetadata)\n+            .filter( metadata -> String.valueOf(true).equalsIgnoreCase(metadata.get(METADATA_KEY)) )\n+            .collect(Collectors.toList());\n+\n+        if (enabledList.size() == instanceList.size()) {\n+            shouldFilter = false;\n+        }\n+\n+        return shouldFilter;\n+    }\n+\n+    @Override\n+    public Object run() {\n+        RequestContext context = RequestContext.getCurrentContext();\n+        final String requestPath = context.getRequest().getRequestURI();\n+        if (checkRequestForEncodedCharacters(requestPath)) {\n+            rejectRequest(context);\n+        }\n+        return null;\n+    }\n+\n+    private boolean checkRequestForEncodedCharacters(String request) {\n+        for (String forbidden : prohibitedCharacters) {\n+            if (pathContains(request, forbidden)) {\n+                return true;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0Njc3NQ=="}, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTA4MDM4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowMjozMlrOFhejFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDowNjozMVrOFheqxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0NzgyOA==", "bodyText": "Please, throw exception instead of wrapping in the tests.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370647828", "createdAt": "2020-01-24T14:02:32Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0OTc5Nw==", "bodyText": "For this class, there is no need to setup spring env. May I ask to redesign this class like this?\nhttps://github.com/zowe/api-layer/blob/48bfe42dac0117c7a3a237d17abad8cf219e5106/gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r370649797", "createdAt": "2020-01-24T14:06:31Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/ribbon/GatewayRibbonLoadBalancingHttpClientTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package com.ca.mfaas.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.client.config.DefaultClientConfigImpl;\n+import com.netflix.client.config.IClientConfig;\n+import com.netflix.loadbalancer.*;\n+import com.netflix.niws.loadbalancer.DiscoveryEnabledServer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.netflix.ribbon.DefaultServerIntrospector;\n+import org.springframework.cloud.netflix.ribbon.ServerIntrospector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+\n+@Import(GatewayRibbonLoadBalancingHttpClientTest.TestConfiguration.class)\n+public class GatewayRibbonLoadBalancingHttpClientTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0NzgyOA=="}, "originalCommit": {"oid": "209de4b72630c900a2fc0c3d0bd14be092e7b68b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzk4NjkwOnYy", "diffSide": "RIGHT", "path": "discoverable-client/src/test/java/com/ca/mfaas/client/api/GreetingControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoxMDo0NVrOFh4lEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoxMDo0NVrOFh4lEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NDMyMg==", "bodyText": "customGreeting doesn't have delayMs param", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r371074322", "createdAt": "2020-01-27T06:10:45Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/test/java/com/ca/mfaas/client/api/GreetingControllerTest.java", "diffHunk": "@@ -45,4 +45,29 @@ public void callGreetingEndpointWithDelay() throws Exception {\n             .andExpect(jsonPath(\"$.content\", is(\"Hello, \" + name + \"!\")));\n     }\n \n+    @Test\n+    public void callPlainGreeting() throws Exception {\n+\n+        this.mockMvc.perform(get(\"/api/v1/greeting\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.content\", is(\"Hello, world!\")));\n+    }\n+\n+    @Test\n+    public void callGreetingWithoutQuery() throws Exception {\n+        String name = \"Petr\";\n+\n+        this.mockMvc.perform(get(\"/api/v1/\" + name + \"/greeting\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.content\", is(\"Hello, \" + name + \"!\")));\n+    }\n+\n+    @Test\n+    public void callGreetingWithoutQueryWithDelay() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzk4OTY2OnYy", "diffSide": "RIGHT", "path": "discoverable-client/src/test/java/com/ca/mfaas/client/api/GreetingControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoxMjo1OVrOFh4mng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoxMjo1OVrOFh4mng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NDcxOA==", "bodyText": "customGreeting doesn't have any query param.", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r371074718", "createdAt": "2020-01-27T06:12:59Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/test/java/com/ca/mfaas/client/api/GreetingControllerTest.java", "diffHunk": "@@ -45,4 +45,29 @@ public void callGreetingEndpointWithDelay() throws Exception {\n             .andExpect(jsonPath(\"$.content\", is(\"Hello, \" + name + \"!\")));\n     }\n \n+    @Test\n+    public void callPlainGreeting() throws Exception {\n+\n+        this.mockMvc.perform(get(\"/api/v1/greeting\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.content\", is(\"Hello, world!\")));\n+    }\n+\n+    @Test\n+    public void callGreetingWithoutQuery() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDAwMzQyOnYy", "diffSide": "RIGHT", "path": "discoverable-client/src/main/resources/static/js/hello.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoyNTo0MFrOFh4ulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjoyNTo0MFrOFh4ulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3Njc1OQ==", "bodyText": "I think var name = $('#name').val(); can't be undefined because it is defined in html. It may provide empty string or text from input. So when I click Test Rest Call without filling input it returns 500", "url": "https://github.com/zowe/api-layer/pull/478#discussion_r371076759", "createdAt": "2020-01-27T06:25:40Z", "author": {"login": "ilkinabdullayev"}, "path": "discoverable-client/src/main/resources/static/js/hello.js", "diffHunk": "@@ -1,13 +1,15 @@\n function unsecureCall() {\n     var name = $('#name').val();\n     $.ajax({\n-        url: \"api/v1/greeting\" + ((name !== undefined) ? (\"?name=\" + name) : \"\")\n+        url: \"api/v1/\" + ((name !== undefined) ? (name + \"/greeting\") : \"greeting\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d02fddbddf221301aa3299cbcd6f290b924010"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 464, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}