{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzU5MzQy", "number": 620, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1Mzo1MlrOD2hFUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDoxMDoyNVrOD2mZsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkxNzI4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/error/check/RibbonRetryErrorCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1Mzo1MlrOGMTiBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1Mzo1MlrOGMTiBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1NjEwMg==", "bodyText": "Deduplicate by extracting in private method?", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415556102", "createdAt": "2020-04-27T06:53:52Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/error/check/RibbonRetryErrorCheck.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.error.check;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.zowe.apiml.gateway.error.ErrorUtils;\n+import org.zowe.apiml.gateway.ribbon.http.RequestAbortException;\n+import org.zowe.apiml.gateway.ribbon.http.RequestContextNotPreparedException;\n+import org.zowe.apiml.message.api.ApiMessageView;\n+import org.zowe.apiml.message.core.MessageService;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.net.ConnectException;\n+\n+/**\n+ * Handler for exceptions that arise during the Ribbon retries\n+ */\n+@RequiredArgsConstructor\n+public class RibbonRetryErrorCheck implements ErrorCheck {\n+    private final MessageService messageService;\n+    @Override\n+    public ResponseEntity<ApiMessageView> checkError(HttpServletRequest request, Throwable exc) {\n+\n+        int exceptionIndex = -1;\n+\n+        if ( (exceptionIndex = ExceptionUtils.indexOfType(exc, RequestAbortException.class)) != -1) {\n+            Throwable t = ExceptionUtils.getThrowables(exc)[exceptionIndex];\n+            if (t instanceof RequestContextNotPreparedException) {\n+                ApiMessageView messageView = messageService.createMessage(\"org.zowe.apiml.gateway.contextNotPrepared\").mapToView();\n+                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc2807d5c8c7b05072ff438d2c30648643de91f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk3NjIwOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/schema/ZosmfScheme.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMDoxMVrOGMUDNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMDoxMVrOGMUDNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDU5Nw==", "bodyText": "Possibly deduplicate via extraction to private?", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415564597", "createdAt": "2020-04-27T07:10:11Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/schema/ZosmfScheme.java", "diffHunk": "@@ -108,6 +112,40 @@ public void apply(InstanceInfo instanceInfo) {\n             });\n         }\n \n+        @Override\n+        public void applyToRequest(HttpRequest request) {\n+            RequestUtils wrapper = RequestUtils.of(request);\n+            final RequestContext context = RequestContext.getCurrentContext();\n+\n+            Optional<String> jwtToken = authenticationService.getJwtTokenFromRequest(context.getRequest());\n+            jwtToken.ifPresent(token -> {\n+                // parse JWT token to detect the source (z/OSMF / Zowe)\n+                QueryResponse queryResponse = authenticationService.parseJwtToken(token);\n+                switch (queryResponse.getSource()) {\n+                    case ZOSMF:\n+                        wrapper.removeCookie(authConfigurationProperties.getCookieProperties().getCookieName());\n+                        HttpCookie jwtCookie = new HttpCookie(ZosmfService.TokenType.JWT.getCookieName(), token);\n+                        jwtCookie.setSecure(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc2807d5c8c7b05072ff438d2c30648643de91f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTc2Nzg1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/http/ServiceAuthenticationDecorator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDowNTozMFrOGMbLow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1Njo1M1rOGMdKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4MTQ0Mw==", "bodyText": "We are loosing the information from the original exception. Maybe at least log the information?", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415681443", "createdAt": "2020-04-27T10:05:30Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/http/ServiceAuthenticationDecorator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.ribbon.http;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.http.HttpRequest;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.AuthenticationException;\n+import org.zowe.apiml.gateway.ribbon.RequestContextUtils;\n+import org.zowe.apiml.gateway.security.service.AuthenticationService;\n+import org.zowe.apiml.gateway.security.service.ServiceAuthenticationServiceImpl;\n+import org.zowe.apiml.gateway.security.service.schema.AuthenticationCommand;\n+import org.zowe.apiml.gateway.security.service.schema.ServiceAuthenticationService;\n+import org.zowe.apiml.security.common.auth.Authentication;\n+\n+import static org.zowe.apiml.gateway.security.service.ServiceAuthenticationServiceImpl.AUTHENTICATION_COMMAND_KEY;\n+\n+@RequiredArgsConstructor\n+public class ServiceAuthenticationDecorator {\n+\n+    private final ServiceAuthenticationService serviceAuthenticationService;\n+    private final AuthenticationService authenticationService;\n+\n+    private static final String INVALID_JWT_MESSAGE = \"Invalid JWT token\";\n+\n+    public void process(HttpRequest request) {\n+        final RequestContext context = RequestContext.getCurrentContext();\n+\n+        if (context.get(AUTHENTICATION_COMMAND_KEY) instanceof ServiceAuthenticationServiceImpl.UniversalAuthenticationCommand) {\n+            InstanceInfo info = RequestContextUtils.getInstanceInfo().orElseThrow(\n+                () -> new RequestContextNotPreparedException(\"InstanceInfo of loadbalanced instance is not present in RequestContext\")\n+            );\n+            final Authentication authentication = serviceAuthenticationService.getAuthentication(info);\n+            boolean rejected = false;\n+            AuthenticationCommand cmd = null;\n+\n+            try {\n+                final String jwtToken = authenticationService.getJwtTokenFromRequest(context.getRequest()).orElse(null);\n+\n+                cmd = serviceAuthenticationService.getAuthenticationCommand(authentication, jwtToken);\n+\n+                if (cmd == null) {\n+                    return;\n+                }\n+\n+                if (cmd.isRequiredValidJwt()) {\n+                    rejected = (jwtToken == null) || !authenticationService.validateJwtToken(jwtToken).isAuthenticated();\n+                }\n+            }\n+            catch (AuthenticationException ae) {\n+                rejected = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fe9c05caf3ee76a60a9b282f9ce873a741cc4d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4OTg0Nw==", "bodyText": "Yes I think we may log some message. We just reused part of code from some other class which is doing similar thing (ServiceAuthenticationFilter) , we should add a log there as well. What do you think @jandadav  ?", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415689847", "createdAt": "2020-04-27T10:18:43Z", "author": {"login": "taban03"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/http/ServiceAuthenticationDecorator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.ribbon.http;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.http.HttpRequest;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.AuthenticationException;\n+import org.zowe.apiml.gateway.ribbon.RequestContextUtils;\n+import org.zowe.apiml.gateway.security.service.AuthenticationService;\n+import org.zowe.apiml.gateway.security.service.ServiceAuthenticationServiceImpl;\n+import org.zowe.apiml.gateway.security.service.schema.AuthenticationCommand;\n+import org.zowe.apiml.gateway.security.service.schema.ServiceAuthenticationService;\n+import org.zowe.apiml.security.common.auth.Authentication;\n+\n+import static org.zowe.apiml.gateway.security.service.ServiceAuthenticationServiceImpl.AUTHENTICATION_COMMAND_KEY;\n+\n+@RequiredArgsConstructor\n+public class ServiceAuthenticationDecorator {\n+\n+    private final ServiceAuthenticationService serviceAuthenticationService;\n+    private final AuthenticationService authenticationService;\n+\n+    private static final String INVALID_JWT_MESSAGE = \"Invalid JWT token\";\n+\n+    public void process(HttpRequest request) {\n+        final RequestContext context = RequestContext.getCurrentContext();\n+\n+        if (context.get(AUTHENTICATION_COMMAND_KEY) instanceof ServiceAuthenticationServiceImpl.UniversalAuthenticationCommand) {\n+            InstanceInfo info = RequestContextUtils.getInstanceInfo().orElseThrow(\n+                () -> new RequestContextNotPreparedException(\"InstanceInfo of loadbalanced instance is not present in RequestContext\")\n+            );\n+            final Authentication authentication = serviceAuthenticationService.getAuthentication(info);\n+            boolean rejected = false;\n+            AuthenticationCommand cmd = null;\n+\n+            try {\n+                final String jwtToken = authenticationService.getJwtTokenFromRequest(context.getRequest()).orElse(null);\n+\n+                cmd = serviceAuthenticationService.getAuthenticationCommand(authentication, jwtToken);\n+\n+                if (cmd == null) {\n+                    return;\n+                }\n+\n+                if (cmd.isRequiredValidJwt()) {\n+                    rejected = (jwtToken == null) || !authenticationService.validateJwtToken(jwtToken).isAuthenticated();\n+                }\n+            }\n+            catch (AuthenticationException ae) {\n+                rejected = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4MTQ0Mw=="}, "originalCommit": {"oid": "73fe9c05caf3ee76a60a9b282f9ce873a741cc4d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMzkwMw==", "bodyText": "good point, @taban03 we can do it here and build abortexception with cause. The exception handling is already in place for that", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415713903", "createdAt": "2020-04-27T10:56:53Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/http/ServiceAuthenticationDecorator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.ribbon.http;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.zuul.context.RequestContext;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.http.HttpRequest;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.AuthenticationException;\n+import org.zowe.apiml.gateway.ribbon.RequestContextUtils;\n+import org.zowe.apiml.gateway.security.service.AuthenticationService;\n+import org.zowe.apiml.gateway.security.service.ServiceAuthenticationServiceImpl;\n+import org.zowe.apiml.gateway.security.service.schema.AuthenticationCommand;\n+import org.zowe.apiml.gateway.security.service.schema.ServiceAuthenticationService;\n+import org.zowe.apiml.security.common.auth.Authentication;\n+\n+import static org.zowe.apiml.gateway.security.service.ServiceAuthenticationServiceImpl.AUTHENTICATION_COMMAND_KEY;\n+\n+@RequiredArgsConstructor\n+public class ServiceAuthenticationDecorator {\n+\n+    private final ServiceAuthenticationService serviceAuthenticationService;\n+    private final AuthenticationService authenticationService;\n+\n+    private static final String INVALID_JWT_MESSAGE = \"Invalid JWT token\";\n+\n+    public void process(HttpRequest request) {\n+        final RequestContext context = RequestContext.getCurrentContext();\n+\n+        if (context.get(AUTHENTICATION_COMMAND_KEY) instanceof ServiceAuthenticationServiceImpl.UniversalAuthenticationCommand) {\n+            InstanceInfo info = RequestContextUtils.getInstanceInfo().orElseThrow(\n+                () -> new RequestContextNotPreparedException(\"InstanceInfo of loadbalanced instance is not present in RequestContext\")\n+            );\n+            final Authentication authentication = serviceAuthenticationService.getAuthentication(info);\n+            boolean rejected = false;\n+            AuthenticationCommand cmd = null;\n+\n+            try {\n+                final String jwtToken = authenticationService.getJwtTokenFromRequest(context.getRequest()).orElse(null);\n+\n+                cmd = serviceAuthenticationService.getAuthenticationCommand(authentication, jwtToken);\n+\n+                if (cmd == null) {\n+                    return;\n+                }\n+\n+                if (cmd.isRequiredValidJwt()) {\n+                    rejected = (jwtToken == null) || !authenticationService.validateJwtToken(jwtToken).isAuthenticated();\n+                }\n+            }\n+            catch (AuthenticationException ae) {\n+                rejected = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4MTQ0Mw=="}, "originalCommit": {"oid": "73fe9c05caf3ee76a60a9b282f9ce873a741cc4d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTc4ODY0OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/RequestContextUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDoxMDoyNVrOGMbX4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo0NzozNVrOGMe_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NDU3Nw==", "bodyText": "Have you considered implementing as a Bean instead of as a collection of static methods?", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415684577", "createdAt": "2020-04-27T10:10:25Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/RequestContextUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.zuul.context.RequestContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Class for storing and retrieving instance information from RequestContext\n+ */\n+public class RequestContextUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fe9c05caf3ee76a60a9b282f9ce873a741cc4d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4ODE4OQ==", "bodyText": "It's an utility class which by definitions contain static methods. What would be the advantage of creating instead a bean? Just asking, I don't know, we can definitely do it if it's worthy! :)", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415688189", "createdAt": "2020-04-27T10:16:01Z", "author": {"login": "taban03"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/RequestContextUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.zuul.context.RequestContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Class for storing and retrieving instance information from RequestContext\n+ */\n+public class RequestContextUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NDU3Nw=="}, "originalCommit": {"oid": "73fe9c05caf3ee76a60a9b282f9ce873a741cc4d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMjg3NA==", "bodyText": "I have considered it but decided to go with static class instead. Given the RequestContext is also static and threadlocal based and ease of testing it, i chose this simple way.", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415712874", "createdAt": "2020-04-27T10:55:22Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/RequestContextUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.zuul.context.RequestContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Class for storing and retrieving instance information from RequestContext\n+ */\n+public class RequestContextUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NDU3Nw=="}, "originalCommit": {"oid": "73fe9c05caf3ee76a60a9b282f9ce873a741cc4d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0Mzg3MQ==", "bodyText": "Beans that we are using and most of the beans in general are Singletons and as such they are more or less equal to the Class with static methods.\nThe difference is mainly in the usage, where the static classes are a bit simpler to use but more difficult to work with in tests.\nAnd in this case I am ok with both choices, I am happy with the answer from David.", "url": "https://github.com/zowe/api-layer/pull/620#discussion_r415743871", "createdAt": "2020-04-27T11:47:35Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/ribbon/RequestContextUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.gateway.ribbon;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import com.netflix.zuul.context.RequestContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Class for storing and retrieving instance information from RequestContext\n+ */\n+public class RequestContextUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4NDU3Nw=="}, "originalCommit": {"oid": "73fe9c05caf3ee76a60a9b282f9ce873a741cc4d"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 498, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}