{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NzM2MjY5", "number": 505, "title": "enabler custom metadata support", "bodyText": "Add support for custom metadata addition through our onboarding enablers", "createdAt": "2020-02-13T08:36:58Z", "url": "https://github.com/zowe/api-layer/pull/505", "merged": true, "mergeCommit": {"oid": "953f26e37d2914e329eebfb957cacef06793da7d"}, "closed": true, "closedAt": "2020-02-19T09:39:51Z", "author": {"login": "jandadav"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEQtL-gBqjMwMzg5OTY4MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFy_SYgFqTM2MDk0ODk5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54f0133cda947fc43ec9334664d2731578aaaef1", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/54f0133cda947fc43ec9334664d2731578aaaef1", "committedDate": "2020-02-14T14:11:29Z", "message": "refactor sonar issue\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}, "afterCommit": {"oid": "72b27c76296de167fa53d66b0b57ea29d9ab088e", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/72b27c76296de167fa53d66b0b57ea29d9ab088e", "committedDate": "2020-02-14T14:49:06Z", "message": "fix after rebase\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72b27c76296de167fa53d66b0b57ea29d9ab088e", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/72b27c76296de167fa53d66b0b57ea29d9ab088e", "committedDate": "2020-02-14T14:49:06Z", "message": "fix after rebase\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}, "afterCommit": {"oid": "2546c473895345cc567cb35d77138b07e2fad705", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/2546c473895345cc567cb35d77138b07e2fad705", "committedDate": "2020-02-14T14:57:41Z", "message": "fix after rebase\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDcwMTQw", "url": "https://github.com/zowe/api-layer/pull/505#pullrequestreview-359070140", "createdAt": "2020-02-14T16:37:33Z", "commit": {"oid": "5e1a4f3ea0a22a6fafd5f96224093939d9fe3fc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNzozM1rOFp8p-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNzozM1rOFp8p-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyOTcyMg==", "bodyText": "No need to assign variable that is not used, just mapUtils.flattenMap(null, testMap); will throw the exception. Same in tests below.", "url": "https://github.com/zowe/api-layer/pull/505#discussion_r379529722", "createdAt": "2020-02-14T16:37:33Z", "author": {"login": "cZikos"}, "path": "common-service-core/src/test/java/org/zowe/apiml/util/MapUtilsTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.util;\n+\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.junit.Assert.assertThat;\n+\n+public class MapUtilsTest {\n+\n+    private MapUtils mapUtils = new MapUtils();\n+\n+    @Test\n+    public void givenMap_whenFlattenedWithRootKey_shouldReturnMapKeysWithRootKey() {\n+        Map<String, Object> testMap = new HashMap<>();\n+        testMap.put(\"key\", null);\n+        Map<String, String> resultMap = mapUtils.flattenMap(\"apiml\", testMap);\n+        assertThat(resultMap, hasEntry(\"apiml.key\", \"\"));\n+    }\n+\n+    @Test\n+    public void givenMapWithNullValue_whenFlattened_shouldReturnValueEmptyString() {\n+        Map<String, Object> testMap = new HashMap<>();\n+        testMap.put(\"key\", null);\n+        Map<String, String> resultMap = mapUtils.flattenMap(null, testMap);\n+        assertThat(resultMap, hasEntry(\"key\", \"\"));\n+    }\n+\n+    @Test\n+    public void givenMapWithPrimitiveValues_whenFlattened_shouldReturnCorrectValues() {\n+        Map<String, Object> testMap = new HashMap<>();\n+        testMap.put(\"key1\", true);\n+        testMap.put(\"key2\", 23);\n+        testMap.put(\"key3\", 23.0d);\n+        testMap.put(\"key4\", 23.0f);\n+        Map<String, String> resultMap = mapUtils.flattenMap(null, testMap);\n+        assertThat(resultMap, hasEntry(\"key1\", \"true\"));\n+        assertThat(resultMap, hasEntry(\"key2\", \"23\"));\n+        assertThat(resultMap, hasEntry(\"key3\", \"23.0\"));\n+        assertThat(resultMap, hasEntry(\"key4\", \"23.0\"));\n+    }\n+\n+    @Test\n+    public void givenMapWithNestedMap_whenFlattened_shouldReturnFlattened() {\n+        Map<String, Object> nestedLvl2 = new HashMap<>();\n+        nestedLvl2.put(\"keyzzz\", \"valuezzz\");\n+\n+        Map<String, Object> nested = new HashMap<>();\n+        nested.put(\"key1\", \"value1\");\n+        nested.put(\"key2\", \"value2\");\n+        nested.put(\"key3\", nestedLvl2);\n+\n+        Map<String, Object> testMap = new HashMap<>();\n+        testMap.put(\"masterKey\", nested);\n+\n+        Map<String, String> resultMap = mapUtils.flattenMap(null, testMap);\n+        assertThat(resultMap, hasEntry(\"masterKey.key1\", \"value1\"));\n+        assertThat(resultMap, hasEntry(\"masterKey.key2\", \"value2\"));\n+        assertThat(resultMap, hasEntry(\"masterKey.key3.keyzzz\", \"valuezzz\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void givenMapWithNestedList_whenFlattened_shouldReturnException() {\n+        List<Object> nested = new ArrayList<>();\n+        nested.add(\"value1\");\n+        nested.add(\"value2\");\n+\n+        Map<String, Object> testMap = new HashMap<>();\n+        testMap.put(\"masterKey\", nested);\n+\n+        Map<String, String> resultMap = mapUtils.flattenMap(null, testMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e1a4f3ea0a22a6fafd5f96224093939d9fe3fc5"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38ab5a76b01eded1a6cb0880dc278ee8f1bfcd42", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/38ab5a76b01eded1a6cb0880dc278ee8f1bfcd42", "committedDate": "2020-02-18T07:06:09Z", "message": "refactor configuration of discoverable client\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d677e2c0b5f2b211d86099224a2c72d0781d3ef2", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/d677e2c0b5f2b211d86099224a2c72d0781d3ef2", "committedDate": "2020-02-18T07:06:10Z", "message": "loading of metadata from yaml\nrefactorings\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a1f8c599bf7e8e904e01084d5bb56d83f566df1", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/7a1f8c599bf7e8e904e01084d5bb56d83f566df1", "committedDate": "2020-02-18T07:06:10Z", "message": "refactor of local config\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6327db74c6a6774f419805bf7d81b66606b79df9", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/6327db74c6a6774f419805bf7d81b66606b79df9", "committedDate": "2020-02-18T07:06:10Z", "message": "incorporate changes after rebase\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d70f17a268f8b47a5b10da7048864c42e61366b", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/1d70f17a268f8b47a5b10da7048864c42e61366b", "committedDate": "2020-02-18T07:06:10Z", "message": "tests for config merging\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a5d1c01b6f03de9707e21d0a5e104daab548c6", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/38a5d1c01b6f03de9707e21d0a5e104daab548c6", "committedDate": "2020-02-18T07:06:10Z", "message": "enableUrlEncodedCharacters for DC\nadded tests for primitive deserialization\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a8da78a57d129d59ac615792172010435017a8e", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/2a8da78a57d129d59ac615792172010435017a8e", "committedDate": "2020-02-18T07:06:10Z", "message": "fix string format\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44890423b2b0e6a867299b3f2d542f3e3041f1bc", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/44890423b2b0e6a867299b3f2d542f3e3041f1bc", "committedDate": "2020-02-18T07:06:10Z", "message": "move classes\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3329b16aa68ef322773887ffef6f5074801aab05", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/3329b16aa68ef322773887ffef6f5074801aab05", "committedDate": "2020-02-18T07:06:10Z", "message": "refactor sonar issue\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "795d83ea6054d88a93c98dec303c9c7ad66021c4", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/795d83ea6054d88a93c98dec303c9c7ad66021c4", "committedDate": "2020-02-18T07:06:10Z", "message": "fix after rebase\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2381de42217ea7ee5fe0285f6614cbad0573c3d2", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/2381de42217ea7ee5fe0285f6614cbad0573c3d2", "committedDate": "2020-02-18T07:06:10Z", "message": "remove irrelevant doc\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e911ae94d803551af714911279ab5b2e0982df26", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/e911ae94d803551af714911279ab5b2e0982df26", "committedDate": "2020-02-18T07:06:11Z", "message": "custom metadata for static definitions\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3729756e07767ff522cec67e1e2ff4533520da0e", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/3729756e07767ff522cec67e1e2ff4533520da0e", "committedDate": "2020-02-18T07:06:11Z", "message": "Tests are good\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/6e2edacac2cac529ad948018b4dd323530e2feeb", "committedDate": "2020-02-18T07:06:11Z", "message": "Review refactor\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a1f7d67d9f49104f27768f22da6a7fafe705129", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/6a1f7d67d9f49104f27768f22da6a7fafe705129", "committedDate": "2020-02-17T13:01:35Z", "message": "Review refactor\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}, "afterCommit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/6e2edacac2cac529ad948018b4dd323530e2feeb", "committedDate": "2020-02-18T07:06:11Z", "message": "Review refactor\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTE3MDA4", "url": "https://github.com/zowe/api-layer/pull/505#pullrequestreview-360117008", "createdAt": "2020-02-18T07:31:04Z", "commit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjA4NzEx", "url": "https://github.com/zowe/api-layer/pull/505#pullrequestreview-360208711", "createdAt": "2020-02-18T10:03:52Z", "commit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDowMzo1MlrOFq8Oew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDoxOTowMFrOFq8vSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3MTI1OQ==", "bodyText": "What about make this mapping in static part. For rootKey of course use BiFunction. In this case the map is constructed all times.", "url": "https://github.com/zowe/api-layer/pull/505#discussion_r380571259", "createdAt": "2020-02-18T10:03:52Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/main/java/org/zowe/apiml/util/MapUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.util;\n+\n+import java.util.*;\n+import java.util.function.Consumer;\n+\n+public class MapUtils {\n+\n+    public Map<String, String> flattenMap(String rootKey, Map<String, Object> collection) {\n+        if (collection == null || collection.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        Map<String, String> result = new HashMap<>();\n+\n+        Map<Class, Consumer<Map.Entry<String, Object>>> actionMap = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3MjczMg==", "bodyText": "There is possible to test in first step with current class. If it is not found, then make this iteration and then store new type in the class. It could be helpfull (like cache), but I am not sure how often it is run.\nMap<Class, Consumer<Map.Entry<String, Object>>> actionMap = new LinkedHashMap<>();\nMap<Class, Consumer<Map.Entry<String, Object>>> cache = new HashMap<>();\nstatic {\ninit(actionMap);\ncache.putAll(actionMap)\n}\n....\nConsumer c = cache.get(...);\nif (c != null) return c....;\nfor (Entry e : actionMap) {\nif (instanceof...) {\ncache.put(class, e.getValue);\nreturn e.getValue....\n}", "url": "https://github.com/zowe/api-layer/pull/505#discussion_r380572732", "createdAt": "2020-02-18T10:06:28Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/main/java/org/zowe/apiml/util/MapUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.util;\n+\n+import java.util.*;\n+import java.util.function.Consumer;\n+\n+public class MapUtils {\n+\n+    public Map<String, String> flattenMap(String rootKey, Map<String, Object> collection) {\n+        if (collection == null || collection.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        Map<String, String> result = new HashMap<>();\n+\n+        Map<Class, Consumer<Map.Entry<String, Object>>> actionMap = new LinkedHashMap<>();\n+        actionMap.put(Map.class, entry -> result.putAll(flattenMap(mergeKey(rootKey, entry.getKey()), (Map<String, Object>)entry.getValue())));\n+        actionMap.put(String.class, entry -> result.put(mergeKey(rootKey, entry.getKey()), entry.getValue().toString()));\n+        actionMap.put(Boolean.class, entry -> result.put(mergeKey(rootKey, entry.getKey()), entry.getValue().toString()));\n+        actionMap.put(Integer.class, entry -> result.put(mergeKey(rootKey, entry.getKey()), entry.getValue().toString()));\n+        actionMap.put(Double.class, entry -> result.put(mergeKey(rootKey, entry.getKey()), entry.getValue().toString()));\n+        actionMap.put(Float.class, entry -> result.put(mergeKey(rootKey, entry.getKey()), entry.getValue().toString()));\n+        actionMap.put(List.class, entry -> { throw new IllegalArgumentException(\"List parsing is not supported\"); } );\n+        actionMap.put(Object[].class, entry -> { throw new IllegalArgumentException(\"Array parsing is not supported\"); } );\n+        actionMap.put(Object.class, entry -> { throw new IllegalArgumentException(String.format(\"Cannot parse key: %s with value %s\", entry.getKey(), entry.getValue().toString())); } );\n+\n+        for (Map.Entry<String, Object> entry : collection.entrySet()) {\n+            if (entry.getValue() == null) {\n+                result.put( mergeKey(rootKey, entry.getKey()), \"\");\n+                continue;\n+            }\n+            executeAction(entry,actionMap);\n+        }\n+        return result;\n+    }\n+\n+    private void executeAction(Map.Entry<String, Object> switchSubject, Map<Class, Consumer<Map.Entry<String, Object>>> actionMap) {\n+        for (Map.Entry<Class, Consumer<Map.Entry<String, Object>>> action : actionMap.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3NzczOA==", "bodyText": "empty (null) values should not be set", "url": "https://github.com/zowe/api-layer/pull/505#discussion_r380577738", "createdAt": "2020-02-18T10:15:25Z", "author": {"login": "pj892031"}, "path": "onboarding-enabler-java/src/main/java/org/zowe/apiml/eurekaservice/client/util/EurekaInstanceConfigCreator.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.eurekaservice.client.util;\n+\n+import com.netflix.appinfo.EurekaInstanceConfig;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.config.*;\n+import org.zowe.apiml.exception.MetadataValidationException;\n+import org.zowe.apiml.exception.ServiceDefinitionException;\n+import org.zowe.apiml.util.MapUtils;\n+import org.zowe.apiml.util.UrlUtils;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.zowe.apiml.constants.EurekaMetadataDefinition.*;\n+\n+public class EurekaInstanceConfigCreator {\n+\n+    private final MapUtils mapUtils;\n+\n+    public EurekaInstanceConfigCreator(MapUtils mapUtils) {\n+        this.mapUtils = mapUtils;\n+    }\n+\n+    public EurekaInstanceConfig createEurekaInstanceConfig(ApiMediationServiceConfig config) throws ServiceDefinitionException {\n+        ApimlEurekaInstanceConfig result = new ApimlEurekaInstanceConfig();\n+\n+        String hostname;\n+        int port;\n+        URL baseUrl;\n+\n+        try {\n+            baseUrl = new URL(config.getBaseUrl());\n+            hostname = baseUrl.getHost();\n+            port = baseUrl.getPort();\n+        } catch (MalformedURLException e) {\n+            String message = String.format(\"baseUrl: [%s] is not valid URL\", config.getBaseUrl());\n+            throw new ServiceDefinitionException(message, e);\n+        }\n+\n+        result.setInstanceId(String.format(\"%s:%s:%s\", hostname, config.getServiceId(), port));\n+        result.setAppname(config.getServiceId());\n+        result.setAppGroupName(config.getServiceId());\n+        result.setHostName(hostname);\n+        result.setIpAddress(config.getServiceIpAddress());\n+        result.setInstanceEnabledOnit(true);\n+        result.setSecureVirtualHostName(config.getServiceId());\n+        result.setVirtualHostName(config.getServiceId());\n+        result.setStatusPageUrl(config.getBaseUrl() + config.getStatusPageRelativeUrl());\n+\n+        if ((config.getHomePageRelativeUrl() != null) && !config.getHomePageRelativeUrl().isEmpty()) {\n+            result.setHomePageUrl(config.getBaseUrl() + config.getHomePageRelativeUrl());\n+        }\n+\n+        String protocol = baseUrl.getProtocol();\n+        result.setNonSecurePort(port);\n+        result.setSecurePort(port);\n+\n+        switch (protocol) {\n+            case \"http\":\n+                result.setNonSecurePortEnabled(true);\n+                result.setHealthCheckUrl(config.getBaseUrl() + config.getHealthCheckRelativeUrl());\n+                break;\n+            case \"https\":\n+                result.setSecurePortEnabled(true);\n+                result.setSecureHealthCheckUrl(config.getBaseUrl() + config.getHealthCheckRelativeUrl());\n+                break;\n+            default:\n+                throw new ServiceDefinitionException(String.format(\"'%s' is not valid protocol for baseUrl property\", protocol));\n+        }\n+\n+        try {\n+            result.setMetadataMap(createMetadata(config));\n+        } catch (MetadataValidationException | IllegalArgumentException e) {\n+            throw new ServiceDefinitionException(\"Service configuration failed to create service metadata: \", e);\n+        }\n+\n+        return result;\n+    }\n+\n+    private Map<String, String> createMetadata(ApiMediationServiceConfig config) {\n+        Map<String, String> metadata = new HashMap<>();\n+\n+        // fill authentication metadata\n+        Authentication authentication = config.getAuthentication();\n+        if (authentication != null) {\n+            metadata.put(AUTHENTICATION_SCHEME, authentication.getScheme());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3ODgwNg==", "bodyText": "What about write it like class library (not as \"helper\")?\npublic final class MapUtils {\nprivate MapUtils() {}\npublic static final Map<String, String> flattenMap....\n}", "url": "https://github.com/zowe/api-layer/pull/505#discussion_r380578806", "createdAt": "2020-02-18T10:17:31Z", "author": {"login": "pj892031"}, "path": "common-service-core/src/main/java/org/zowe/apiml/util/MapUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.util;\n+\n+import java.util.*;\n+import java.util.function.Consumer;\n+\n+public class MapUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3OTY1Ng==", "bodyText": "Why use serviceId under service? Just id is not enought?", "url": "https://github.com/zowe/api-layer/pull/505#discussion_r380579656", "createdAt": "2020-02-18T10:19:00Z", "author": {"login": "pj892031"}, "path": "config/local/discoverable-client.yml", "diffHunk": "@@ -5,18 +5,14 @@ spring:\n         ansi:\n             enabled: always\n \n+# The `apiml` node contains API Mediation Layer specific configuration\n apiml:\n-    security:\n-        ssl:\n-            ciphers: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\n-    # The `apiml` node contains API Mediation Layer specific configuration\n     service:\n         # The `apiml.service` node contains information required by any APIML service\n-        id: discoverableclient  # Service ID of this service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2edacac2cac529ad948018b4dd323530e2feeb"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6551e1fb846234e11451f8557bc32a4f809dc5b3", "author": {"user": {"login": "jandadav", "name": "David Janda"}}, "url": "https://github.com/zowe/api-layer/commit/6551e1fb846234e11451f8557bc32a4f809dc5b3", "committedDate": "2020-02-18T16:04:14Z", "message": "MapUtils Review refactor\n\nSigned-off-by: jandadav <janda.david@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTQ1OTMw", "url": "https://github.com/zowe/api-layer/pull/505#pullrequestreview-360945930", "createdAt": "2020-02-19T09:15:29Z", "commit": {"oid": "6551e1fb846234e11451f8557bc32a4f809dc5b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTQ4OTk5", "url": "https://github.com/zowe/api-layer/pull/505#pullrequestreview-360948999", "createdAt": "2020-02-19T09:20:05Z", "commit": {"oid": "6551e1fb846234e11451f8557bc32a4f809dc5b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4907, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}