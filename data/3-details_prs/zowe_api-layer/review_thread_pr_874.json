{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Nzg5NDc1", "number": 874, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxMzoyMlrOEokjdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxMzoyMlrOEokjdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTc3Mzk2OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/JWTLogoutHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxMzoyMlrOHZvUrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMzozOFrOHZ3LBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTc5MA==", "bodyText": "I think this is causing some problem on the error handling. I've tried to intentionally pass an invalid token via Cookie (I deleted part of the token) and call the /logout endpoint. On master it returns 400 with TokenFormatNotValidException exception, which is the expected behaviour. Now it returns 500 with:\n{\n    \"messages\": [\n        {\n            \"messageType\": \"ERROR\",\n            \"messageNumber\": \"ZWEAG100E\",\n            \"messageContent\": \"Authentication exception: 'Error while logging out token' for URL '/api/v1/gateway/auth/logout'\",\n            \"messageKey\": \"org.zowe.apiml.security.generic\"\n        }\n    ]\n}\n\nIt is because authenticationService.invalidateJwtToken(token, true); is throwing TokenNotValidException and you are catching a generic Exception e that will throw this message, which is not correct in this case. It should rather return 400 with TokenFormatNotValidException, based on how it was before.\nTherefore I think you can add a catch:\n } catch (TokenNotValidException e) {\n                failure.onAuthenticationFailure(request, response, new TokenFormatNotValidException(e.getMessage()));\n            }\n\nand keep the last generic catch to catch other possible exception such as ServiceNotAccessibleException", "url": "https://github.com/zowe/api-layer/pull/874#discussion_r496751790", "createdAt": "2020-09-29T14:13:22Z", "author": {"login": "taban03"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/JWTLogoutHandler.java", "diffHunk": "@@ -34,21 +36,27 @@\n     public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {\n         Optional<String> token = authenticationService.getJwtTokenFromRequest(request);\n         try {\n-            checkJwtTokenFormat(failure, request, response, token);\n+            if (token.isPresent()) {\n+                invalidateJwtToken(failure, request, response, token.get());\n+            } else {\n+                failure.onAuthenticationFailure(request, response, new TokenNotProvidedException(\"The token you are trying to logout is not present in the header\"));\n+            }\n         } catch (ServletException e) {\n             log.error(\"The response cannot be written during the logout exception handler: {}\", e.getMessage());\n         }\n     }\n \n-    private void checkJwtTokenFormat(FailedAuthenticationHandler failure, HttpServletRequest request, HttpServletResponse response, Optional<String> token) throws ServletException {\n-        if (token.isPresent()) {\n+    private void invalidateJwtToken(FailedAuthenticationHandler failure, HttpServletRequest request, HttpServletResponse response, String token) throws ServletException {\n+        if (authenticationService.isInvalidated(token)) {\n+            failure.onAuthenticationFailure(request, response, new TokenNotValidException(\"The token you are trying to logout is not valid\"));\n+        } else {\n             try {\n-                authenticationService.invalidateJwtToken(token.get(), true);\n-            } catch (TokenNotValidException e) {\n-                failure.onAuthenticationFailure(request, response, new TokenFormatNotValidException(e.getMessage()));\n+                authenticationService.invalidateJwtToken(token, true);\n+            } catch (TokenFormatNotValidException e) {\n+                failure.onAuthenticationFailure(request, response, e);\n+            } catch (Exception e) {\n+                failure.onAuthenticationFailure(request, response, new AuthenticationTokenException(\"Error while logging out token\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e110034b828275165a88313a6e347fc20f40bb2b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MDM4OQ==", "bodyText": "Added TokenNotValidException catch that returns TokenFormatNotValidException, and included AuthenticationException catch as well as generic Exception catch to provide error handling for a specific instance of AuthenticationException as well as handle any other errors that happen (like ServiceNotAccessibleException).", "url": "https://github.com/zowe/api-layer/pull/874#discussion_r496880389", "createdAt": "2020-09-29T16:33:38Z", "author": {"login": "CarsonCook"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/JWTLogoutHandler.java", "diffHunk": "@@ -34,21 +36,27 @@\n     public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {\n         Optional<String> token = authenticationService.getJwtTokenFromRequest(request);\n         try {\n-            checkJwtTokenFormat(failure, request, response, token);\n+            if (token.isPresent()) {\n+                invalidateJwtToken(failure, request, response, token.get());\n+            } else {\n+                failure.onAuthenticationFailure(request, response, new TokenNotProvidedException(\"The token you are trying to logout is not present in the header\"));\n+            }\n         } catch (ServletException e) {\n             log.error(\"The response cannot be written during the logout exception handler: {}\", e.getMessage());\n         }\n     }\n \n-    private void checkJwtTokenFormat(FailedAuthenticationHandler failure, HttpServletRequest request, HttpServletResponse response, Optional<String> token) throws ServletException {\n-        if (token.isPresent()) {\n+    private void invalidateJwtToken(FailedAuthenticationHandler failure, HttpServletRequest request, HttpServletResponse response, String token) throws ServletException {\n+        if (authenticationService.isInvalidated(token)) {\n+            failure.onAuthenticationFailure(request, response, new TokenNotValidException(\"The token you are trying to logout is not valid\"));\n+        } else {\n             try {\n-                authenticationService.invalidateJwtToken(token.get(), true);\n-            } catch (TokenNotValidException e) {\n-                failure.onAuthenticationFailure(request, response, new TokenFormatNotValidException(e.getMessage()));\n+                authenticationService.invalidateJwtToken(token, true);\n+            } catch (TokenFormatNotValidException e) {\n+                failure.onAuthenticationFailure(request, response, e);\n+            } catch (Exception e) {\n+                failure.onAuthenticationFailure(request, response, new AuthenticationTokenException(\"Error while logging out token\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTc5MA=="}, "originalCommit": {"oid": "e110034b828275165a88313a6e347fc20f40bb2b"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 491, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}