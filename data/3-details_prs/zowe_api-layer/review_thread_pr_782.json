{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTUyMzU5", "number": 782, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoyNzoxOFrOEX7e5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoyNzoxOFrOEX7e5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTI3MjY5OnYy", "diffSide": "RIGHT", "path": "apiml-utility/src/test/java/org/zowe/apiml/product/logging/LogMessageTrackerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzoyNzoxOFrOG__TOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowODoyNFrOHAKtig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MDU4NQ==", "bodyText": "We are trying to keep the given_when_then structure in the test names, would it be possible to have it here as well?", "url": "https://github.com/zowe/api-layer/pull/782#discussion_r469750585", "createdAt": "2020-08-13T07:27:18Z", "author": {"login": "balhar-jakub"}, "path": "apiml-utility/src/test/java/org/zowe/apiml/product/logging/LogMessageTrackerTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.product.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static junit.framework.TestCase.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+class LogMessageTrackerTest {\n+    private static final String LOG_MESSAGE = \"This is a log message.\";\n+    private static final String NOT_LOGGED_MESSAGE = \"This is not a log message.\";\n+\n+    private static final Pattern MESSAGE_REGEX = Pattern.compile(\"^This.*\");\n+    private static final Pattern NOT_MESSAGE_REGEX = Pattern.compile(\"^dummy\");\n+\n+    private final LogMessageTracker logMessageTracker = new LogMessageTracker(this.getClass());\n+    private final Logger log = (Logger) LoggerFactory.getLogger(this.getClass());\n+\n+    @BeforeEach\n+    void setup() {\n+        logMessageTracker.startTracking();\n+        log.trace(LOG_MESSAGE);\n+        log.debug(LOG_MESSAGE);\n+        log.info(LOG_MESSAGE);\n+        log.warn(LOG_MESSAGE);\n+        log.error(LOG_MESSAGE);\n+    }\n+\n+    @AfterEach\n+    void cleanUp() {\n+        logMessageTracker.stopTracking();\n+    }\n+\n+    @Test\n+    void testSearch() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8015d6316a5cfe732452743c1a65512ffb6259a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNzU0Ng==", "bodyText": "Yes I will change them.", "url": "https://github.com/zowe/api-layer/pull/782#discussion_r469937546", "createdAt": "2020-08-13T13:08:24Z", "author": {"login": "CarsonCook"}, "path": "apiml-utility/src/test/java/org/zowe/apiml/product/logging/LogMessageTrackerTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.product.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static junit.framework.TestCase.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+class LogMessageTrackerTest {\n+    private static final String LOG_MESSAGE = \"This is a log message.\";\n+    private static final String NOT_LOGGED_MESSAGE = \"This is not a log message.\";\n+\n+    private static final Pattern MESSAGE_REGEX = Pattern.compile(\"^This.*\");\n+    private static final Pattern NOT_MESSAGE_REGEX = Pattern.compile(\"^dummy\");\n+\n+    private final LogMessageTracker logMessageTracker = new LogMessageTracker(this.getClass());\n+    private final Logger log = (Logger) LoggerFactory.getLogger(this.getClass());\n+\n+    @BeforeEach\n+    void setup() {\n+        logMessageTracker.startTracking();\n+        log.trace(LOG_MESSAGE);\n+        log.debug(LOG_MESSAGE);\n+        log.info(LOG_MESSAGE);\n+        log.warn(LOG_MESSAGE);\n+        log.error(LOG_MESSAGE);\n+    }\n+\n+    @AfterEach\n+    void cleanUp() {\n+        logMessageTracker.stopTracking();\n+    }\n+\n+    @Test\n+    void testSearch() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MDU4NQ=="}, "originalCommit": {"oid": "f8015d6316a5cfe732452743c1a65512ffb6259a"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 480, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}