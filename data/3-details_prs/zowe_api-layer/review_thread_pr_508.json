{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTYyMTQ1", "number": 508, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo1NDoxOFrODg_ERw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTowNDowMlrODg_Qfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTE0MzExOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/filters/pre/TomcatFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo1NDoxOFrOFrfoiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMToyMzo0NFrOFrkkBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MTM2OQ==", "bodyText": "May I ask why reference type(not primitive boolean)? It requires to check whether is null:\nboolean allowEncoded = allowEncodedSlashes != null && allowEncodedSlashes;", "url": "https://github.com/zowe/api-layer/pull/508#discussion_r381151369", "createdAt": "2020-02-19T08:54:18Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/filters/pre/TomcatFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.filters.pre;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.zowe.apiml.message.core.Message;\n+import org.zowe.apiml.message.core.MessageService;\n+import org.zowe.apiml.message.log.ApimlLogger;\n+import org.zowe.apiml.product.logging.annotations.InjectApimlLogger;\n+\n+import javax.servlet.*;\n+import javax.servlet.annotation.WebFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URLDecoder;\n+\n+@Component\n+@WebFilter\n+@RequiredArgsConstructor\n+public class TomcatFilter implements Filter {\n+\n+    private final MessageService messageService;\n+    private final ObjectMapper mapper;\n+\n+    @Value(\"${apiml.service.allowEncodedSlashes:#{false}}\")\n+    private Boolean allowEncodedSlashes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd5dc059ee6494599b389e059bad4246757cc73"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzMjEzNA==", "bodyText": "I did it because of unit tests, where we need to reset this field, and for this porpose I used 'ReflectionTestUtils.setField', where the value of field is Object. I forgot about autoboxing...", "url": "https://github.com/zowe/api-layer/pull/508#discussion_r381232134", "createdAt": "2020-02-19T11:23:44Z", "author": {"login": "arxioly"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/filters/pre/TomcatFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.filters.pre;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.zowe.apiml.message.core.Message;\n+import org.zowe.apiml.message.core.MessageService;\n+import org.zowe.apiml.message.log.ApimlLogger;\n+import org.zowe.apiml.product.logging.annotations.InjectApimlLogger;\n+\n+import javax.servlet.*;\n+import javax.servlet.annotation.WebFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URLDecoder;\n+\n+@Component\n+@WebFilter\n+@RequiredArgsConstructor\n+public class TomcatFilter implements Filter {\n+\n+    private final MessageService messageService;\n+    private final ObjectMapper mapper;\n+\n+    @Value(\"${apiml.service.allowEncodedSlashes:#{false}}\")\n+    private Boolean allowEncodedSlashes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MTM2OQ=="}, "originalCommit": {"oid": "5cd5dc059ee6494599b389e059bad4246757cc73"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTE3NDM4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/filters/pre/TomcatFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTowNDowMlrOFrf8Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTo0NDo0NVrOFrlHEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NjM2Ng==", "bodyText": "ApimlLogger has method that takes Message as a argument.\n   /**\n     * Method which allows to log text in its level type, without passing message parameters.\n     *\n     * @param message the message\n     */\n    public void log(Message message) {", "url": "https://github.com/zowe/api-layer/pull/508#discussion_r381156366", "createdAt": "2020-02-19T09:04:02Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/filters/pre/TomcatFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.filters.pre;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.zowe.apiml.message.core.Message;\n+import org.zowe.apiml.message.core.MessageService;\n+import org.zowe.apiml.message.log.ApimlLogger;\n+import org.zowe.apiml.product.logging.annotations.InjectApimlLogger;\n+\n+import javax.servlet.*;\n+import javax.servlet.annotation.WebFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URLDecoder;\n+\n+@Component\n+@WebFilter\n+@RequiredArgsConstructor\n+public class TomcatFilter implements Filter {\n+\n+    private final MessageService messageService;\n+    private final ObjectMapper mapper;\n+\n+    @Value(\"${apiml.service.allowEncodedSlashes:#{false}}\")\n+    private Boolean allowEncodedSlashes;\n+\n+    @InjectApimlLogger\n+    private final ApimlLogger apimlLog = ApimlLogger.empty();\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+        HttpServletRequest req = (HttpServletRequest) request;\n+        HttpServletResponse res = (HttpServletResponse) response;\n+\n+        String uri = req.getRequestURI();\n+        String decodedUri = URLDecoder.decode(uri, \"UTF-8\");\n+        final boolean isRequestEncoded = !uri.equals(decodedUri);\n+\n+        Message message = messageService.createMessage(\"org.zowe.apiml.gateway.requestContainEncodedSlash\", uri);\n+        boolean allowEncoded = allowEncodedSlashes != null && allowEncodedSlashes;\n+        if (!allowEncoded && isRequestEncoded) {\n+            res.setStatus(HttpStatus.BAD_REQUEST.value());\n+            res.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\n+            try {\n+                mapper.writeValue(res.getWriter(), message.mapToView());\n+            } catch (IOException e) {\n+                apimlLog.log(\"org.zowe.apiml.security.errorWrittingResponse\", e.getMessage());\n+                throw new ServletException(\"Error writing response\", e);\n+            }\n+            apimlLog.log(\"org.zowe.apiml.gateway.requestContainEncodedSlash\", uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd5dc059ee6494599b389e059bad4246757cc73"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MDE1OA==", "bodyText": "Sorry, My wrong:\nSo,\nIn the line 53 you have message instance already. In the line 64, with same params Message instance is created inside APIMLogger. My point was that you can send your message object to APIMLLogger which you have already.", "url": "https://github.com/zowe/api-layer/pull/508#discussion_r381240158", "createdAt": "2020-02-19T11:42:32Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/filters/pre/TomcatFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.filters.pre;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.zowe.apiml.message.core.Message;\n+import org.zowe.apiml.message.core.MessageService;\n+import org.zowe.apiml.message.log.ApimlLogger;\n+import org.zowe.apiml.product.logging.annotations.InjectApimlLogger;\n+\n+import javax.servlet.*;\n+import javax.servlet.annotation.WebFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URLDecoder;\n+\n+@Component\n+@WebFilter\n+@RequiredArgsConstructor\n+public class TomcatFilter implements Filter {\n+\n+    private final MessageService messageService;\n+    private final ObjectMapper mapper;\n+\n+    @Value(\"${apiml.service.allowEncodedSlashes:#{false}}\")\n+    private Boolean allowEncodedSlashes;\n+\n+    @InjectApimlLogger\n+    private final ApimlLogger apimlLog = ApimlLogger.empty();\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+        HttpServletRequest req = (HttpServletRequest) request;\n+        HttpServletResponse res = (HttpServletResponse) response;\n+\n+        String uri = req.getRequestURI();\n+        String decodedUri = URLDecoder.decode(uri, \"UTF-8\");\n+        final boolean isRequestEncoded = !uri.equals(decodedUri);\n+\n+        Message message = messageService.createMessage(\"org.zowe.apiml.gateway.requestContainEncodedSlash\", uri);\n+        boolean allowEncoded = allowEncodedSlashes != null && allowEncodedSlashes;\n+        if (!allowEncoded && isRequestEncoded) {\n+            res.setStatus(HttpStatus.BAD_REQUEST.value());\n+            res.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\n+            try {\n+                mapper.writeValue(res.getWriter(), message.mapToView());\n+            } catch (IOException e) {\n+                apimlLog.log(\"org.zowe.apiml.security.errorWrittingResponse\", e.getMessage());\n+                throw new ServletException(\"Error writing response\", e);\n+            }\n+            apimlLog.log(\"org.zowe.apiml.gateway.requestContainEncodedSlash\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NjM2Ng=="}, "originalCommit": {"oid": "5cd5dc059ee6494599b389e059bad4246757cc73"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MTEwNQ==", "bodyText": "Good point. Thanks!", "url": "https://github.com/zowe/api-layer/pull/508#discussion_r381241105", "createdAt": "2020-02-19T11:44:45Z", "author": {"login": "arxioly"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/filters/pre/TomcatFilter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.filters.pre;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.zowe.apiml.message.core.Message;\n+import org.zowe.apiml.message.core.MessageService;\n+import org.zowe.apiml.message.log.ApimlLogger;\n+import org.zowe.apiml.product.logging.annotations.InjectApimlLogger;\n+\n+import javax.servlet.*;\n+import javax.servlet.annotation.WebFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URLDecoder;\n+\n+@Component\n+@WebFilter\n+@RequiredArgsConstructor\n+public class TomcatFilter implements Filter {\n+\n+    private final MessageService messageService;\n+    private final ObjectMapper mapper;\n+\n+    @Value(\"${apiml.service.allowEncodedSlashes:#{false}}\")\n+    private Boolean allowEncodedSlashes;\n+\n+    @InjectApimlLogger\n+    private final ApimlLogger apimlLog = ApimlLogger.empty();\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+        HttpServletRequest req = (HttpServletRequest) request;\n+        HttpServletResponse res = (HttpServletResponse) response;\n+\n+        String uri = req.getRequestURI();\n+        String decodedUri = URLDecoder.decode(uri, \"UTF-8\");\n+        final boolean isRequestEncoded = !uri.equals(decodedUri);\n+\n+        Message message = messageService.createMessage(\"org.zowe.apiml.gateway.requestContainEncodedSlash\", uri);\n+        boolean allowEncoded = allowEncodedSlashes != null && allowEncodedSlashes;\n+        if (!allowEncoded && isRequestEncoded) {\n+            res.setStatus(HttpStatus.BAD_REQUEST.value());\n+            res.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\n+            try {\n+                mapper.writeValue(res.getWriter(), message.mapToView());\n+            } catch (IOException e) {\n+                apimlLog.log(\"org.zowe.apiml.security.errorWrittingResponse\", e.getMessage());\n+                throw new ServletException(\"Error writing response\", e);\n+            }\n+            apimlLog.log(\"org.zowe.apiml.gateway.requestContainEncodedSlash\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NjM2Ng=="}, "originalCommit": {"oid": "5cd5dc059ee6494599b389e059bad4246757cc73"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 444, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}