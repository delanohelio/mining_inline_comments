{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDIwMjM0", "number": 740, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo0NzoyOFrOENSFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDo1NjozNFrOENrrxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzYzMTY3OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/config/EurekaEventsRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo0NzoyOFrOGv4CEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDo0NjozMlrOGwjPrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NDI4OQ==", "bodyText": "Are there any left? Could this class be removed?", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r452854289", "createdAt": "2020-07-10T13:47:28Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/config/EurekaEventsRegistry.java", "diffHunk": "@@ -25,7 +25,7 @@\n public class EurekaEventsRegistry {\n \n     private final EurekaClient eurekaClient;\n-    private final List<MetadataProcessor> processors;\n+    private final List<EurekaEventListener> processors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MjI4Ng==", "bodyText": "not used anymore, class deleted", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r453562286", "createdAt": "2020-07-13T10:46:32Z", "author": {"login": "achmelo"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/config/EurekaEventsRegistry.java", "diffHunk": "@@ -25,7 +25,7 @@\n public class EurekaEventsRegistry {\n \n     private final EurekaClient eurekaClient;\n-    private final List<MetadataProcessor> processors;\n+    private final List<EurekaEventListener> processors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NDI4OQ=="}, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzY0MTcwOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/metadata/service/RefreshEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1MDowOFrOGv4IWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDo0NjowOVrOGwjOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NTg5OQ==", "bodyText": "I think you are missing several events, in which the routes do get refreshed.\nCompare with cases in\norg.springframework.cloud.netflix.zuul.ZuulServerAutoConfiguration.ZuulRefreshListener#onApplicationEvent", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r452855899", "createdAt": "2020-07-10T13:50:08Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/metadata/service/RefreshEventListener.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.metadata.service;\n+\n+import org.springframework.cloud.client.discovery.event.HeartbeatEvent;\n+import org.springframework.context.ApplicationEvent;\n+import org.springframework.context.ApplicationListener;\n+\n+public abstract class RefreshEventListener implements ApplicationListener<ApplicationEvent> {\n+\n+    @Override\n+    public void onApplicationEvent(ApplicationEvent event) {\n+        if (isRefreshEvent(event)) {\n+            refresh();\n+        }\n+    }\n+\n+    public abstract void refresh();\n+\n+\n+    boolean isRefreshEvent(ApplicationEvent event) {\n+        return event instanceof HeartbeatEvent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MjA2Mg==", "bodyText": "added events same as in ZullServerAutoConfiguration", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r453562062", "createdAt": "2020-07-13T10:46:09Z", "author": {"login": "achmelo"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/metadata/service/RefreshEventListener.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.metadata.service;\n+\n+import org.springframework.cloud.client.discovery.event.HeartbeatEvent;\n+import org.springframework.context.ApplicationEvent;\n+import org.springframework.context.ApplicationListener;\n+\n+public abstract class RefreshEventListener implements ApplicationListener<ApplicationEvent> {\n+\n+    @Override\n+    public void onApplicationEvent(ApplicationEvent event) {\n+        if (isRefreshEvent(event)) {\n+            refresh();\n+        }\n+    }\n+\n+    public abstract void refresh();\n+\n+\n+    boolean isRefreshEvent(ApplicationEvent event) {\n+        return event instanceof HeartbeatEvent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NTg5OQ=="}, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzY3MTYwOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/metadata/service/LoadBalancerEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1Nzo1OVrOGv4bYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDo0NToyN1rOGwjNUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MDc3MA==", "bodyText": "This name should describe more closely what this object does. It is not a listener, it's load balancer registry ... In other pieces of code it looks weird.", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r452860770", "createdAt": "2020-07-10T13:57:59Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/metadata/service/LoadBalancerEventListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.metadata.service;\n+\n+import com.netflix.loadbalancer.DynamicServerListLoadBalancer;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+@Service\n+@Order(10)\n+public class LoadBalancerEventListener extends RefreshEventListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTY4MQ==", "bodyText": "renamed to LoadBalancerRegistry", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r453561681", "createdAt": "2020-07-13T10:45:27Z", "author": {"login": "achmelo"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/metadata/service/LoadBalancerEventListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.metadata.service;\n+\n+import com.netflix.loadbalancer.DynamicServerListLoadBalancer;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+@Service\n+@Order(10)\n+public class LoadBalancerEventListener extends RefreshEventListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MDc3MA=="}, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzgyNjYwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/zowe/apiml/gatewayservice/AuthenticationOnDeploymentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDo1NjozNFrOGwbcQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDo0NToyMlrOGwjNLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQzNDQzMg==", "bodyText": "Sonar has some good suggestions about these Thread.sleep(). I would implement them.", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r453434432", "createdAt": "2020-07-13T04:56:34Z", "author": {"login": "jandadav"}, "path": "integration-tests/src/test/java/org/zowe/apiml/gatewayservice/AuthenticationOnDeploymentTest.java", "diffHunk": "@@ -186,4 +186,79 @@ void testReregistration() throws Exception {\n \n         }\n     }\n+\n+    @Test\n+    @Flaky\n+    @NotForMainframeTest\n+    void testServiceStatus() throws Exception {\n+\n+        String serviceId = \"testservice4\";\n+        String host = InetAddress.getLocalHost().getHostName();\n+\n+        List<Integer> ports = Arrays.asList(5678, 5679, 5680);\n+\n+        try (\n+            final VirtualService service1 = new VirtualService(serviceId, 5678);\n+            final VirtualService service2 = new VirtualService(serviceId, 5679);\n+            final VirtualService service3 = new VirtualService(serviceId, 5680)\n+        ) {\n+\n+\n+            service1.addVerifyServlet().start();\n+            service2.addVerifyServlet().start();\n+            service3.addVerifyServlet().start();\n+            for (int i = 0; i < 10; i++) {\n+\n+                ports.forEach(port -> {\n+                    given().when()\n+                        .put(\"https://localhost:10011/eureka/apps/\" + serviceId + \"/\" + host + \":\" + serviceId + \":\" + port + \"/status?value=OUT_OF_SERVICE\")\n+                        .then().statusCode(SC_OK);\n+                });\n+                Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTY0NQ==", "bodyText": "replaced with awaitility", "url": "https://github.com/zowe/api-layer/pull/740#discussion_r453561645", "createdAt": "2020-07-13T10:45:22Z", "author": {"login": "achmelo"}, "path": "integration-tests/src/test/java/org/zowe/apiml/gatewayservice/AuthenticationOnDeploymentTest.java", "diffHunk": "@@ -186,4 +186,79 @@ void testReregistration() throws Exception {\n \n         }\n     }\n+\n+    @Test\n+    @Flaky\n+    @NotForMainframeTest\n+    void testServiceStatus() throws Exception {\n+\n+        String serviceId = \"testservice4\";\n+        String host = InetAddress.getLocalHost().getHostName();\n+\n+        List<Integer> ports = Arrays.asList(5678, 5679, 5680);\n+\n+        try (\n+            final VirtualService service1 = new VirtualService(serviceId, 5678);\n+            final VirtualService service2 = new VirtualService(serviceId, 5679);\n+            final VirtualService service3 = new VirtualService(serviceId, 5680)\n+        ) {\n+\n+\n+            service1.addVerifyServlet().start();\n+            service2.addVerifyServlet().start();\n+            service3.addVerifyServlet().start();\n+            for (int i = 0; i < 10; i++) {\n+\n+                ports.forEach(port -> {\n+                    given().when()\n+                        .put(\"https://localhost:10011/eureka/apps/\" + serviceId + \"/\" + host + \":\" + serviceId + \":\" + port + \"/status?value=OUT_OF_SERVICE\")\n+                        .then().statusCode(SC_OK);\n+                });\n+                Thread.sleep(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQzNDQzMg=="}, "originalCommit": {"oid": "7a1c59a82f9f7d1aec6ce51dabd533a758404c19"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 514, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}