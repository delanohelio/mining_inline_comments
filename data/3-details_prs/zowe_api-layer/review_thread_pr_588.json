{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDExNjE2", "number": 588, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0ODo1MVrODyzQDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODowMDoyM1rODyzebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk1MDg0OnYy", "diffSide": "RIGHT", "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/client/HttpsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0ODo1MVrOGHDidw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODowMzoyN1rOGHD_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MTE5MQ==", "bodyText": "This block is repeating, shouldn't it be as separate method?\nIf path is null, how would user know? Does he need to know?", "url": "https://github.com/zowe/api-layer/pull/588#discussion_r410051191", "createdAt": "2020-04-17T07:48:51Z", "author": {"login": "achmelo"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/client/HttpsClient.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.zaasclient.client;\n+\n+import lombok.AllArgsConstructor;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.zowe.apiml.zaasclient.config.ConfigProperties;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.*;\n+import java.security.cert.CertificateException;\n+\n+@AllArgsConstructor\n+public class HttpsClient implements Closeable {\n+    private CloseableHttpClient closeableHttpsClient;\n+    private final String keyStorePassword;\n+    private final String trustStorePassword;\n+    private final String keyStoreType;\n+    private final String trustStoreType;\n+    private final RequestConfig requestConfig;\n+    private String trustStorePath;\n+    private String keyStorePath;\n+\n+    public HttpsClient(ConfigProperties configProperties) {\n+        this.requestConfig = this.buildCustomRequestConfig();\n+        this.keyStorePath = configProperties.getKeyStorePath();\n+        this.keyStorePassword = configProperties.getKeyStorePassword();\n+        this.keyStoreType = configProperties.getKeyStoreType();\n+        this.trustStorePath = configProperties.getTrustStorePath();\n+        this.trustStorePassword = configProperties.getTrustStorePassword();\n+        this.trustStoreType = configProperties.getTrustStoreType();\n+    }\n+\n+\n+    public CloseableHttpClient getHttpsClientWithTrustStore()\n+        throws NoSuchAlgorithmException, KeyStoreException, IOException, CertificateException, KeyManagementException {\n+        SSLContext sslContext;\n+        TrustManagerFactory tmf = null;\n+\n+        if (trustStorePath != null) {\n+            tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n+            File trustFile = new File(trustStorePath);\n+            trustStore.load(new FileInputStream(trustFile), trustStorePassword.toCharArray());\n+            tmf.init(trustStore);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02faf0e2e2f892440bc3e80449715209bd87d73"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1ODU2OQ==", "bodyText": "Thanks for the feedback. We are working on error handling(based on the reviews received from Petr). Sooner you will get latest updates in the branch.", "url": "https://github.com/zowe/api-layer/pull/588#discussion_r410058569", "createdAt": "2020-04-17T08:03:27Z", "author": {"login": "ankitachdhr145"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/client/HttpsClient.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.zaasclient.client;\n+\n+import lombok.AllArgsConstructor;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.zowe.apiml.zaasclient.config.ConfigProperties;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.*;\n+import java.security.cert.CertificateException;\n+\n+@AllArgsConstructor\n+public class HttpsClient implements Closeable {\n+    private CloseableHttpClient closeableHttpsClient;\n+    private final String keyStorePassword;\n+    private final String trustStorePassword;\n+    private final String keyStoreType;\n+    private final String trustStoreType;\n+    private final RequestConfig requestConfig;\n+    private String trustStorePath;\n+    private String keyStorePath;\n+\n+    public HttpsClient(ConfigProperties configProperties) {\n+        this.requestConfig = this.buildCustomRequestConfig();\n+        this.keyStorePath = configProperties.getKeyStorePath();\n+        this.keyStorePassword = configProperties.getKeyStorePassword();\n+        this.keyStoreType = configProperties.getKeyStoreType();\n+        this.trustStorePath = configProperties.getTrustStorePath();\n+        this.trustStorePassword = configProperties.getTrustStorePassword();\n+        this.trustStoreType = configProperties.getTrustStoreType();\n+    }\n+\n+\n+    public CloseableHttpClient getHttpsClientWithTrustStore()\n+        throws NoSuchAlgorithmException, KeyStoreException, IOException, CertificateException, KeyManagementException {\n+        SSLContext sslContext;\n+        TrustManagerFactory tmf = null;\n+\n+        if (trustStorePath != null) {\n+            tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n+            File trustFile = new File(trustStorePath);\n+            trustStore.load(new FileInputStream(trustFile), trustStorePassword.toCharArray());\n+            tmf.init(trustStore);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MTE5MQ=="}, "originalCommit": {"oid": "e02faf0e2e2f892440bc3e80449715209bd87d73"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk4NzY2OnYy", "diffSide": "RIGHT", "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/token/TokenServiceHttpsJwt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODowMDoyM1rOGHD5mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODowMjoxNVrOGHD88w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NzExNA==", "bodyText": "Are these endpoints stable? Can't be changed in future?", "url": "https://github.com/zowe/api-layer/pull/588#discussion_r410057114", "createdAt": "2020-04-17T08:00:23Z", "author": {"login": "achmelo"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/token/TokenServiceHttpsJwt.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.zaasclient.token;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.http.HeaderElement;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.cookie.BasicClientCookie;\n+import org.apache.http.util.EntityUtils;\n+import org.zowe.apiml.zaasclient.client.HttpsClient;\n+import org.zowe.apiml.zaasclient.exception.ZaasClientErrorCodes;\n+import org.zowe.apiml.zaasclient.exception.ZaasClientException;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+@Slf4j\n+public class TokenServiceHttpsJwt implements TokenService {\n+    private static final String COOKIE_PREFIX = \"apimlAuthenticationToken\";\n+    private final String loginEndpoint;\n+    private final String queryEndpoint;\n+    private final String host;\n+\n+    private HttpsClient httpsClient;\n+\n+    public TokenServiceHttpsJwt(HttpsClient client, String baseUrl, String host) {\n+        this.httpsClient = client;\n+        this.host = host;\n+\n+        loginEndpoint = baseUrl + \"/login\";\n+        queryEndpoint = baseUrl + \"/query\";\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02faf0e2e2f892440bc3e80449715209bd87d73"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1Nzk3MQ==", "bodyText": "These are APIML endpoints. In case any changes are made in APIML endpoints zaas-client should be modified to accommodate those changes.", "url": "https://github.com/zowe/api-layer/pull/588#discussion_r410057971", "createdAt": "2020-04-17T08:02:15Z", "author": {"login": "ankitachdhr145"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/token/TokenServiceHttpsJwt.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.zaasclient.token;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.http.HeaderElement;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.cookie.BasicClientCookie;\n+import org.apache.http.util.EntityUtils;\n+import org.zowe.apiml.zaasclient.client.HttpsClient;\n+import org.zowe.apiml.zaasclient.exception.ZaasClientErrorCodes;\n+import org.zowe.apiml.zaasclient.exception.ZaasClientException;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+@Slf4j\n+public class TokenServiceHttpsJwt implements TokenService {\n+    private static final String COOKIE_PREFIX = \"apimlAuthenticationToken\";\n+    private final String loginEndpoint;\n+    private final String queryEndpoint;\n+    private final String host;\n+\n+    private HttpsClient httpsClient;\n+\n+    public TokenServiceHttpsJwt(HttpsClient client, String baseUrl, String host) {\n+        this.httpsClient = client;\n+        this.host = host;\n+\n+        loginEndpoint = baseUrl + \"/login\";\n+        queryEndpoint = baseUrl + \"/query\";\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NzExNA=="}, "originalCommit": {"oid": "e02faf0e2e2f892440bc3e80449715209bd87d73"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 456, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}