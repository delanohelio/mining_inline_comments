{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTEzNzY4", "number": 532, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo0ODowNFrODjgXPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDoxOFrODnD_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTU2OTg4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/org/zowe/apiml/gateway/controllers/VersionControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo0ODowNFrOFvWZog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyODoyOFrOFvaZFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5NDQwMg==", "bodyText": "Could you please provide more information in the name about what it is supposed to do?\n\nThe given, when, then form is good to store this information", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r385194402", "createdAt": "2020-02-27T15:48:04Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/test/java/org/zowe/apiml/gateway/controllers/VersionControllerTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.controllers;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.zowe.apiml.product.version.VersionInfo;\n+import org.zowe.apiml.product.version.VersionService;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(SpringRunner.class)\n+public class VersionControllerTest {\n+    @Mock\n+    private VersionService versionService;\n+\n+    private MockMvc mockMvc;\n+\n+    @Before\n+    public void setUp() {\n+        VersionController versionController = new VersionController(versionService);\n+        mockMvc = MockMvcBuilders.standaloneSetup(versionController).build();\n+    }\n+\n+    @Test\n+    public void callVersionEndpoint() throws Exception {\n+        Mockito.when(versionService.getVersion()).thenReturn(getDummyVersionInfo());\n+        this.mockMvc.perform(get(\"/version\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.zoweVersion\", is(\"0.0.0 build #000\")))\n+            .andExpect(jsonPath(\"$.apimlVersion\", is(\"0.0.0 build #000 (1a3b5c7)\")));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d984be2f88cc7fcaf52efde833c191632848e05"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1OTc5OQ==", "bodyText": "Done!", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r385259799", "createdAt": "2020-02-27T17:28:28Z", "author": {"login": "arxioly"}, "path": "gateway-service/src/test/java/org/zowe/apiml/gateway/controllers/VersionControllerTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.controllers;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.zowe.apiml.product.version.VersionInfo;\n+import org.zowe.apiml.product.version.VersionService;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(SpringRunner.class)\n+public class VersionControllerTest {\n+    @Mock\n+    private VersionService versionService;\n+\n+    private MockMvc mockMvc;\n+\n+    @Before\n+    public void setUp() {\n+        VersionController versionController = new VersionController(versionService);\n+        mockMvc = MockMvcBuilders.standaloneSetup(versionController).build();\n+    }\n+\n+    @Test\n+    public void callVersionEndpoint() throws Exception {\n+        Mockito.when(versionService.getVersion()).thenReturn(getDummyVersionInfo());\n+        this.mockMvc.perform(get(\"/version\"))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.zoweVersion\", is(\"0.0.0 build #000\")))\n+            .andExpect(jsonPath(\"$.apimlVersion\", is(\"0.0.0 build #000 (1a3b5c7)\")));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5NDQwMg=="}, "originalCommit": {"oid": "8d984be2f88cc7fcaf52efde833c191632848e05"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTU4Mzk1OnYy", "diffSide": "RIGHT", "path": "docs/diagnostics.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo1MToxNVrOFvWiIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyODoxMFrOFvaXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5NjU3Nw==", "bodyText": "Add an example of how the version information looks like.", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r385196577", "createdAt": "2020-02-27T15:51:15Z", "author": {"login": "balhar-jakub"}, "path": "docs/diagnostics.md", "diffHunk": "@@ -28,3 +28,10 @@ It is also printed to the log as the very first messsage:\n     [GS] 16:32:04.098 [main] INFO org.zowe.apiml.product.service.BuildInfo - Service gateway-service version xyz #n/a on 2018-08-23T14:28:33.231Z by plape03mac850 commit 6fd7c53\n     [DC] 16:32:04.195 [main] INFO org.zowe.apiml.product.service.BuildInfo - Service discoverable-client version xyz #n/a on 2018-08-23T14:28:33.217Z by plape03mac850 commit 6fd7c53\n     [AC] 16:32:04.317 [main] INFO org.zowe.apiml.product.service.BuildInfo - Service api-catalog-services version xyz #n/a on 2018-08-23T14:28:33.201Z by plape03mac850 commit 6fd7c53\n+\n+\n+## Version Information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d984be2f88cc7fcaf52efde833c191632848e05"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1OTQ2MQ==", "bodyText": "Done!", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r385259461", "createdAt": "2020-02-27T17:28:10Z", "author": {"login": "arxioly"}, "path": "docs/diagnostics.md", "diffHunk": "@@ -28,3 +28,10 @@ It is also printed to the log as the very first messsage:\n     [GS] 16:32:04.098 [main] INFO org.zowe.apiml.product.service.BuildInfo - Service gateway-service version xyz #n/a on 2018-08-23T14:28:33.231Z by plape03mac850 commit 6fd7c53\n     [DC] 16:32:04.195 [main] INFO org.zowe.apiml.product.service.BuildInfo - Service discoverable-client version xyz #n/a on 2018-08-23T14:28:33.217Z by plape03mac850 commit 6fd7c53\n     [AC] 16:32:04.317 [main] INFO org.zowe.apiml.product.service.BuildInfo - Service api-catalog-services version xyz #n/a on 2018-08-23T14:28:33.201Z by plape03mac850 commit 6fd7c53\n+\n+\n+## Version Information", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5NjU3Nw=="}, "originalCommit": {"oid": "8d984be2f88cc7fcaf52efde833c191632848e05"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTYxMjY4OnYy", "diffSide": "RIGHT", "path": "apiml-common/src/main/java/org/zowe/apiml/product/version/VersionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo1NzozM1rOFvWzQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyNzo0N1rOFvaWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIwMDk2Mg==", "bodyText": "Would it be possible to move at least the internal logic to the separate private method to make this method more easily understood?", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r385200962", "createdAt": "2020-02-27T15:57:33Z", "author": {"login": "balhar-jakub"}, "path": "apiml-common/src/main/java/org/zowe/apiml/product/version/VersionService.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.product.version;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.util.FileUtils;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Class for retrieving information about Zowe version from Zowe's manifest.json\n+ * and information about API ML version from build-info.properties and git.properties\n+ */\n+\n+@Slf4j\n+@Service\n+public class VersionService {\n+    private static final String NO_VERSION = \"Build information is not available\";\n+    private static final VersionInfo version = new VersionInfo();\n+\n+    private final BuildInfoDetails buildInfo;\n+\n+    @Value(\"${apiml.zoweManifest:#{null}}\")\n+    private String zoweManifest;\n+\n+    public VersionService() {\n+        buildInfo = new BuildInfo().getBuildInfoDetails();\n+    }\n+\n+    public VersionService(BuildInfoDetails buildInfo) {\n+        this.buildInfo = buildInfo;\n+    }\n+\n+    /**\n+     * Getting the cached VersionInfo object, if it's empty it will be filled\n+     * @return filled VersionInfo object\n+     */\n+    public VersionInfo getVersion() {\n+        if (version.getApimlVersion() == null) {\n+            updateVersionInfo();\n+        }\n+        return version;\n+    }\n+\n+    /**\n+     * Updating the cached VersionInfo object with values from Zowe's manifest.json, API ML's build-info.properties\n+     * and git.properties files\n+     */\n+    public void updateVersionInfo() {\n+        if (StringUtils.isNotEmpty(zoweManifest)) {\n+            version.setZoweVersion(getZoweVersion(zoweManifest));\n+        }\n+        version.setApimlVersion(getApimlVersion());\n+    }\n+\n+    /**\n+     * Retrieving the information about API ML version from build-info.properties and git.properties files\n+     * @return the version, build and commit numbers in one string\n+     */\n+    private String getApimlVersion() {\n+        String apimlVersion = NO_VERSION;\n+        if (!buildInfo.getVersion().equalsIgnoreCase(\"unknown\")) {\n+            apimlVersion = String.format(\"%s build #%s (%s)\", buildInfo.getVersion(), buildInfo.getNumber(), buildInfo.getCommitId());\n+        }\n+        return apimlVersion;\n+    }\n+\n+    /**\n+     * Retrieving the information about Zowe version from manifest.json file\n+     * @param manifestJsonFile the path to Zowe's manifest.json file\n+     * @return the version and build numbers in one string\n+     */\n+    private String getZoweVersion(String manifestJsonFile) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+        try {\n+            String manifestJson = FileUtils.readFile(manifestJsonFile);\n+            if (manifestJson != null) {\n+                ObjectNode objectNode = mapper.readValue(manifestJson, ObjectNode.class);\n+                JsonNode versionNode = objectNode.get(\"version\");\n+                if (versionNode != null && !versionNode.asText().isEmpty()) {\n+                    StringBuilder zoweVersion = new StringBuilder();\n+                    zoweVersion.append(versionNode.asText());\n+                    String buildNumber = \"n/a\";\n+                    JsonNode buildNode = objectNode.get(\"build\");\n+                    if (buildNode != null) {\n+                        JsonNode buildNumberNode = buildNode.get(\"number\");\n+                        if (buildNumberNode != null && StringUtils.isNotEmpty(buildNumberNode.asText())) {\n+                            buildNumber = buildNumberNode.asText();\n+                        }\n+                    }\n+                    zoweVersion.append(\" build #\");\n+                    zoweVersion.append(buildNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d984be2f88cc7fcaf52efde833c191632848e05"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1OTAzMg==", "bodyText": "Sure! Even into two private methods!", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r385259032", "createdAt": "2020-02-27T17:27:47Z", "author": {"login": "arxioly"}, "path": "apiml-common/src/main/java/org/zowe/apiml/product/version/VersionService.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.product.version;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.util.FileUtils;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Class for retrieving information about Zowe version from Zowe's manifest.json\n+ * and information about API ML version from build-info.properties and git.properties\n+ */\n+\n+@Slf4j\n+@Service\n+public class VersionService {\n+    private static final String NO_VERSION = \"Build information is not available\";\n+    private static final VersionInfo version = new VersionInfo();\n+\n+    private final BuildInfoDetails buildInfo;\n+\n+    @Value(\"${apiml.zoweManifest:#{null}}\")\n+    private String zoweManifest;\n+\n+    public VersionService() {\n+        buildInfo = new BuildInfo().getBuildInfoDetails();\n+    }\n+\n+    public VersionService(BuildInfoDetails buildInfo) {\n+        this.buildInfo = buildInfo;\n+    }\n+\n+    /**\n+     * Getting the cached VersionInfo object, if it's empty it will be filled\n+     * @return filled VersionInfo object\n+     */\n+    public VersionInfo getVersion() {\n+        if (version.getApimlVersion() == null) {\n+            updateVersionInfo();\n+        }\n+        return version;\n+    }\n+\n+    /**\n+     * Updating the cached VersionInfo object with values from Zowe's manifest.json, API ML's build-info.properties\n+     * and git.properties files\n+     */\n+    public void updateVersionInfo() {\n+        if (StringUtils.isNotEmpty(zoweManifest)) {\n+            version.setZoweVersion(getZoweVersion(zoweManifest));\n+        }\n+        version.setApimlVersion(getApimlVersion());\n+    }\n+\n+    /**\n+     * Retrieving the information about API ML version from build-info.properties and git.properties files\n+     * @return the version, build and commit numbers in one string\n+     */\n+    private String getApimlVersion() {\n+        String apimlVersion = NO_VERSION;\n+        if (!buildInfo.getVersion().equalsIgnoreCase(\"unknown\")) {\n+            apimlVersion = String.format(\"%s build #%s (%s)\", buildInfo.getVersion(), buildInfo.getNumber(), buildInfo.getCommitId());\n+        }\n+        return apimlVersion;\n+    }\n+\n+    /**\n+     * Retrieving the information about Zowe version from manifest.json file\n+     * @param manifestJsonFile the path to Zowe's manifest.json file\n+     * @return the version and build numbers in one string\n+     */\n+    private String getZoweVersion(String manifestJsonFile) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+        try {\n+            String manifestJson = FileUtils.readFile(manifestJsonFile);\n+            if (manifestJson != null) {\n+                ObjectNode objectNode = mapper.readValue(manifestJson, ObjectNode.class);\n+                JsonNode versionNode = objectNode.get(\"version\");\n+                if (versionNode != null && !versionNode.asText().isEmpty()) {\n+                    StringBuilder zoweVersion = new StringBuilder();\n+                    zoweVersion.append(versionNode.asText());\n+                    String buildNumber = \"n/a\";\n+                    JsonNode buildNode = objectNode.get(\"build\");\n+                    if (buildNode != null) {\n+                        JsonNode buildNumberNode = buildNode.get(\"number\");\n+                        if (buildNumberNode != null && StringUtils.isNotEmpty(buildNumberNode.asText())) {\n+                            buildNumber = buildNumberNode.asText();\n+                        }\n+                    }\n+                    zoweVersion.append(\" build #\");\n+                    zoweVersion.append(buildNumber);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIwMDk2Mg=="}, "originalCommit": {"oid": "8d984be2f88cc7fcaf52efde833c191632848e05"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzc1NjE1OnYy", "diffSide": "RIGHT", "path": "api-catalog-ui/frontend/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoyNTowNlrOFzeGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoxMzowMlrOF0OIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxNDk0Mw==", "bodyText": "Should update other scripts referencing this one and documentation, if this is not WIP", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r389514943", "createdAt": "2020-03-09T08:25:06Z", "author": {"login": "jandadav"}, "path": "api-catalog-ui/frontend/package.json", "diffHunk": "@@ -36,13 +36,13 @@\n         \"redux-thunk\": \"2.3.0\",\n         \"rimraf\": \"^3.0.0\",\n         \"rxjs\": \"6.3.3\",\n-        \"swagger-ui\": \"^3.23.1\",\n+        \"swagger-ui-react\": \"^3.23.0\",\n         \"uuid\": \"3.3.2\"\n     },\n     \"scripts\": {\n         \"start\": \"cross-env HTTPS=true react-scripts start\",\n         \"start:dev\": \"concurrently -c blue,green -n Backend,UI \\\"npm run start:mocked-backend\\\" \\\"cross-env REACT_APP_GATEWAY_URL=http://localhost:8000 npm run start\\\"\",\n-        \"start:mocked-backend\": \"cross-env REACT_APP_GATEWAY_URL=http://localhost:8000 nodemon mocked-backend/server.js\",\n+        \"start:mock\": \"cross-env REACT_APP_GATEWAY_URL=http://localhost:8000 nodemon mocked-backend/server.js\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9e59314cf44c254de6dc3c6a1ace88a80d2d2e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTgzNA==", "bodyText": "Not actual", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r390301834", "createdAt": "2020-03-10T13:13:02Z", "author": {"login": "arxioly"}, "path": "api-catalog-ui/frontend/package.json", "diffHunk": "@@ -36,13 +36,13 @@\n         \"redux-thunk\": \"2.3.0\",\n         \"rimraf\": \"^3.0.0\",\n         \"rxjs\": \"6.3.3\",\n-        \"swagger-ui\": \"^3.23.1\",\n+        \"swagger-ui-react\": \"^3.23.0\",\n         \"uuid\": \"3.3.2\"\n     },\n     \"scripts\": {\n         \"start\": \"cross-env HTTPS=true react-scripts start\",\n         \"start:dev\": \"concurrently -c blue,green -n Backend,UI \\\"npm run start:mocked-backend\\\" \\\"cross-env REACT_APP_GATEWAY_URL=http://localhost:8000 npm run start\\\"\",\n-        \"start:mocked-backend\": \"cross-env REACT_APP_GATEWAY_URL=http://localhost:8000 nodemon mocked-backend/server.js\",\n+        \"start:mock\": \"cross-env REACT_APP_GATEWAY_URL=http://localhost:8000 nodemon mocked-backend/server.js\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxNDk0Mw=="}, "originalCommit": {"oid": "ae9e59314cf44c254de6dc3c6a1ace88a80d2d2e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzc4MzI5OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/resources/gateway-api-doc.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODozNToyOVrOFzeWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjowNzo0NFrOF00OUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxOTAxMw==", "bodyText": "This was not changed by you but we have typo here", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r389519013", "createdAt": "2020-03-09T08:35:29Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/resources/gateway-api-doc.json", "diffHunk": "@@ -65,7 +69,7 @@\n                 }\n             }\n         },\n-        \"/query\": {\n+        \"/auth/query\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9e59314cf44c254de6dc3c6a1ace88a80d2d2e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNTkwNg==", "bodyText": "Fixed.", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r390925906", "createdAt": "2020-03-11T12:07:44Z", "author": {"login": "arxioly"}, "path": "gateway-service/src/main/resources/gateway-api-doc.json", "diffHunk": "@@ -65,7 +69,7 @@\n                 }\n             }\n         },\n-        \"/query\": {\n+        \"/auth/query\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxOTAxMw=="}, "originalCommit": {"oid": "ae9e59314cf44c254de6dc3c6a1ace88a80d2d2e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzgwMDE4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/resources/gateway-api-doc.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo0MToxNVrOFzegig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoxMjozM1rOF0OHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyMTU0Ng==", "bodyText": "Calling the endpoint for version as documented is timing out and throwing zuul exceptions on gw\nimplies URL https://localhost:10010/api/v1/gateway/version\nPlease help me if i'm interpreting the information on the apidoc incorrectly", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r389521546", "createdAt": "2020-03-09T08:41:15Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/resources/gateway-api-doc.json", "diffHunk": "@@ -164,11 +168,38 @@\n                     }\n                 }\n             }\n+        },\n+        \"/version\": {\n+            \"get\": {\n+                \"tags\": [\n+                    \"Diagnostic\"\n+                ],\n+                \"summary\": \"Return version information of API Mediation Layer and Zowe\",\n+                \"description\": \"Use the `/version` API to get the version information of API Mediation Layer and Zowe.\\nThe version information includes version, build number and commit hash.\\nIn the response can be only API ML version information or API ML and Zowe version information, this depends on API ML installed as part of Zowe build or as standalone application.\",\n+                \"operationId\": \"VersionInfoUsingGET\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"OK\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/VersionInfo\"\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            },\n+            \"servers\": [\n+                {\n+                    \"url\": \"/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae9e59314cf44c254de6dc3c6a1ace88a80d2d2e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTU0OA==", "bodyText": "Not actual", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r390301548", "createdAt": "2020-03-10T13:12:33Z", "author": {"login": "arxioly"}, "path": "gateway-service/src/main/resources/gateway-api-doc.json", "diffHunk": "@@ -164,11 +168,38 @@\n                     }\n                 }\n             }\n+        },\n+        \"/version\": {\n+            \"get\": {\n+                \"tags\": [\n+                    \"Diagnostic\"\n+                ],\n+                \"summary\": \"Return version information of API Mediation Layer and Zowe\",\n+                \"description\": \"Use the `/version` API to get the version information of API Mediation Layer and Zowe.\\nThe version information includes version, build number and commit hash.\\nIn the response can be only API ML version information or API ML and Zowe version information, this depends on API ML installed as part of Zowe build or as standalone application.\",\n+                \"operationId\": \"VersionInfoUsingGET\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"OK\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/VersionInfo\"\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            },\n+            \"servers\": [\n+                {\n+                    \"url\": \"/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyMTU0Ng=="}, "originalCommit": {"oid": "ae9e59314cf44c254de6dc3c6a1ace88a80d2d2e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg2NDQzOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/zowe/apiml/gatewayservice/VersionEndpointTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NDoxOFrOF01owQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoxMDoyMVrOF04klQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTA1Nw==", "bodyText": "Integration test is failing. requestString should be updated to contain also either /gateway or /api/v1/gateway I guess.", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r390949057", "createdAt": "2020-03-11T12:54:18Z", "author": {"login": "taban03"}, "path": "integration-tests/src/test/java/org/zowe/apiml/gatewayservice/VersionEndpointTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gatewayservice;\n+\n+import io.restassured.RestAssured;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.zowe.apiml.util.config.ConfigReader;\n+import org.zowe.apiml.util.config.GatewayServiceConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.apache.http.HttpStatus.SC_OK;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class VersionEndpointTest {\n+\n+    private String requestString;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        RestAssured.useRelaxedHTTPSValidation();\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        GatewayServiceConfiguration serviceConfiguration = ConfigReader.environmentConfiguration().getGatewayServiceConfiguration();\n+        String scheme = serviceConfiguration.getScheme();\n+        String host = serviceConfiguration.getHost();\n+        int port = serviceConfiguration.getPort();\n+        requestString = String.format(\"%s://%s:%s%s\", scheme, host, port, \"/version\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c845fecffc842996747e4265d2fe09546d6899"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5NzE0MQ==", "bodyText": "Good point! Thanks for catched it!", "url": "https://github.com/zowe/api-layer/pull/532#discussion_r390997141", "createdAt": "2020-03-11T14:10:21Z", "author": {"login": "arxioly"}, "path": "integration-tests/src/test/java/org/zowe/apiml/gatewayservice/VersionEndpointTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gatewayservice;\n+\n+import io.restassured.RestAssured;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.zowe.apiml.util.config.ConfigReader;\n+import org.zowe.apiml.util.config.GatewayServiceConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.apache.http.HttpStatus.SC_OK;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+\n+public class VersionEndpointTest {\n+\n+    private String requestString;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        RestAssured.useRelaxedHTTPSValidation();\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        GatewayServiceConfiguration serviceConfiguration = ConfigReader.environmentConfiguration().getGatewayServiceConfiguration();\n+        String scheme = serviceConfiguration.getScheme();\n+        String host = serviceConfiguration.getHost();\n+        int port = serviceConfiguration.getPort();\n+        requestString = String.format(\"%s://%s:%s%s\", scheme, host, port, \"/version\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTA1Nw=="}, "originalCommit": {"oid": "41c845fecffc842996747e4265d2fe09546d6899"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 446, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}