{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NTc5ODkw", "number": 465, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDozNjozOVrODWznwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0OTozMFrODYfeuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjQxMDI0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDozNjozOVrOFbxhbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMToyOTowMFrOFeoKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY2NzI0NA==", "bodyText": "Do you think this step is necessary ? gradle build will trigger ```pnpm install``. Won't it?", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r364667244", "createdAt": "2020-01-09T10:36:39Z", "author": {"login": "ilkinabdullayev"}, "path": "README.md", "diffHunk": "@@ -17,25 +17,39 @@ Following platform is required to run the API Mediation Layer:\n \n Following tools are required to build and develop API Mediation Layer:\n \n-Nodejs and npm are required to be installed globally to be able to build the API Catalog ui\n+* Node.js and npm are required to be installed globally to be able to build the API Catalog UI\n \n ## Quick start\n \n 1. Install the package manager `pnpm` globally in order to build the project:\n-    \n-        npm add -g pnpm\n-    \n-2. Install `concurrently` globally:\n-   \n-       npm install -g concurrently\n-       \n-3. Build all modules:\n \n-       ./gradlew build\n+    ```sh\n+    npm add -g pnpm\n+    ```\n \n-4. Run all service on local machine:\n+2. Install npm packages for the UI:\n \n-       npm run api-layer\n+    ```sh\n+    cd api-catalog-ui/frontend/; pnpm install; cd ../..\n+    ```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d989da5b7d9d2189722bfef768459bf3b0b8729b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1OTYyMQ==", "bodyText": "I had to run it for the first build and then every time after ./gradlew clean otherwise the build has failed. It took some time to figure this out so I had added this step so new users that happen to have the same problem are not struggling.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r367659621", "createdAt": "2020-01-16T21:29:00Z", "author": {"login": "plavjanik"}, "path": "README.md", "diffHunk": "@@ -17,25 +17,39 @@ Following platform is required to run the API Mediation Layer:\n \n Following tools are required to build and develop API Mediation Layer:\n \n-Nodejs and npm are required to be installed globally to be able to build the API Catalog ui\n+* Node.js and npm are required to be installed globally to be able to build the API Catalog UI\n \n ## Quick start\n \n 1. Install the package manager `pnpm` globally in order to build the project:\n-    \n-        npm add -g pnpm\n-    \n-2. Install `concurrently` globally:\n-   \n-       npm install -g concurrently\n-       \n-3. Build all modules:\n \n-       ./gradlew build\n+    ```sh\n+    npm add -g pnpm\n+    ```\n \n-4. Run all service on local machine:\n+2. Install npm packages for the UI:\n \n-       npm run api-layer\n+    ```sh\n+    cd api-catalog-ui/frontend/; pnpm install; cd ../..\n+    ```\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY2NzI0NA=="}, "originalCommit": {"oid": "d989da5b7d9d2189722bfef768459bf3b0b8729b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mjk2MDYwOnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzo1NjoxMlrOFb2mXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzo1NjoxMlrOFb2mXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDQzMA==", "bodyText": "Do u think it is good idea to be dependent from library outcome? My point is that these tests would be failed, if vendor changed message.\nhttps://github.com/swagger-api/swagger-parser/blob/master/modules/swagger-parser-v3/src/main/java/io/swagger/v3/parser/OpenAPIV3Parser.java line:219", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r364750430", "createdAt": "2020-01-09T13:56:12Z", "author": {"login": "ilkinabdullayev"}, "path": "api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java", "diffHunk": "@@ -108,13 +109,24 @@ public void givenOpenApiValidJson_whenApiDocTransform_thenCheckUpdatedValues() {\n     }\n \n     @Test\n-    public void givenInvalidJson_whenApiDocTransform_thenThrowExeption() throws IOException {\n+    public void givenEmptyJson_whenApiDocTransform_thenThrowException() {\n         String invalidJson = \"\";\n         ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n         ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n \n         exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"Response is not an OpenAPI type object.\");\n+        exceptionRule.expectMessage(\"No swagger supplied\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d989da5b7d9d2189722bfef768459bf3b0b8729b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mjk2MjYzOnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzo1Njo1MVrOFb2nqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzo1Njo1MVrOFb2nqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDc2Mg==", "bodyText": "Same case like a givenEmptyJson_whenApiDocTransform_thenThrowException", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r364750762", "createdAt": "2020-01-09T13:56:51Z", "author": {"login": "ilkinabdullayev"}, "path": "api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java", "diffHunk": "@@ -108,13 +109,24 @@ public void givenOpenApiValidJson_whenApiDocTransform_thenCheckUpdatedValues() {\n     }\n \n     @Test\n-    public void givenInvalidJson_whenApiDocTransform_thenThrowExeption() throws IOException {\n+    public void givenEmptyJson_whenApiDocTransform_thenThrowException() {\n         String invalidJson = \"\";\n         ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n         ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n \n         exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"Response is not an OpenAPI type object.\");\n+        exceptionRule.expectMessage(\"No swagger supplied\");\n+        apiDocV3Service.transformApiDoc(SERVICE_ID, apiDocInfo);\n+    }\n+\n+    @Test\n+    public void givenInvalidJson_whenApiDocTransform_thenThrowException() {\n+        String invalidJson = \"nonsense\";\n+        ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n+        ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n+\n+        exceptionRule.expect(UnexpectedTypeException.class);\n+        exceptionRule.expectMessage(\"attribute openapi is not of type `object`\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d989da5b7d9d2189722bfef768459bf3b0b8729b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjM3NzAzOnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyNDozM1rOFcXSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo1NzoyOFrOFcxqRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjA3NQ==", "bodyText": "It looks like this method is not used anywhere", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365286075", "createdAt": "2020-01-10T15:24:33Z", "author": {"login": "taban03"}, "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This method allow to get a PassTicket from SAF.\n+ */\n+@Service\n+public class PassTicketService {\n+\n+    private IRRPassTicket irrPassTicket;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n+                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+    }\n+\n+    public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+        irrPassTicket.evaluate(userId, applId, passTicket);\n+    }\n+\n+    public String generate(String userId, String applId) throws IRRPassTicketGenerationException {\n+        return irrPassTicket.generate(userId, applId);\n+    }\n+\n+    public boolean isUsingSafImplementation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwNzkzMA==", "bodyText": "Hi Andreas, thanks for a thorough review. You are right that this method is not used. We think that it is useful to have it here since it provides a way how to check if a real implementation is used.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365707930", "createdAt": "2020-01-13T09:34:47Z", "author": {"login": "plavjanik"}, "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This method allow to get a PassTicket from SAF.\n+ */\n+@Service\n+public class PassTicketService {\n+\n+    private IRRPassTicket irrPassTicket;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n+                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+    }\n+\n+    public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+        irrPassTicket.evaluate(userId, applId, passTicket);\n+    }\n+\n+    public String generate(String userId, String applId) throws IRRPassTicketGenerationException {\n+        return irrPassTicket.generate(userId, applId);\n+    }\n+\n+    public boolean isUsingSafImplementation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjA3NQ=="}, "originalCommit": {"oid": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxODA4NQ==", "bodyText": "Hi Petr! That's fine, I was not sure if it was intentional. Thanks for the clarification!", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365718085", "createdAt": "2020-01-13T09:57:28Z", "author": {"login": "taban03"}, "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This method allow to get a PassTicket from SAF.\n+ */\n+@Service\n+public class PassTicketService {\n+\n+    private IRRPassTicket irrPassTicket;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n+                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+    }\n+\n+    public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+        irrPassTicket.evaluate(userId, applId, passTicket);\n+    }\n+\n+    public String generate(String userId, String applId) throws IRRPassTicketGenerationException {\n+        return irrPassTicket.generate(userId, applId);\n+    }\n+\n+    public boolean isUsingSafImplementation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjA3NQ=="}, "originalCommit": {"oid": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjM5NDE1OnYy", "diffSide": "RIGHT", "path": "apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyOToyMVrOFcXdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNzowMToxMFrOFcuXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4ODc2MA==", "bodyText": "int delayFactor is never used even tho is passed", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365288760", "createdAt": "2020-01-10T15:29:21Z", "author": {"login": "taban03"}, "path": "apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java", "diffHunk": "@@ -20,19 +20,21 @@\n \n public class ServiceStartupEventHandler {\n     public static final int DEFAULT_DELAY_FACTOR = 5;\n-    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class, YamlMessageServiceInstance.getInstance());\n+    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class,\n+            YamlMessageServiceInstance.getInstance());\n \n     @SuppressWarnings(\"squid:S1172\")\n     public void onServiceStartup(String serviceName, int delayFactor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2MjUzMQ==", "bodyText": "Hello Andrea @taban03, thank you for noticing it. It is in the code that we have not to change but only formatted. But it is good to notice these things and we will improve the code as the boy-scout rule says: always leave the code behind in a better state than you found it. (https://martinfowler.com/bliki/OpportunisticRefactoring.html)", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365662531", "createdAt": "2020-01-13T06:53:04Z", "author": {"login": "plavjanik"}, "path": "apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java", "diffHunk": "@@ -20,19 +20,21 @@\n \n public class ServiceStartupEventHandler {\n     public static final int DEFAULT_DELAY_FACTOR = 5;\n-    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class, YamlMessageServiceInstance.getInstance());\n+    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class,\n+            YamlMessageServiceInstance.getInstance());\n \n     @SuppressWarnings(\"squid:S1172\")\n     public void onServiceStartup(String serviceName, int delayFactor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4ODc2MA=="}, "originalCommit": {"oid": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2NDA0Mg==", "bodyText": "The delayFactor is now used. Thank you, Andrea, for noticing it!", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365664042", "createdAt": "2020-01-13T07:01:10Z", "author": {"login": "plavjanik"}, "path": "apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java", "diffHunk": "@@ -20,19 +20,21 @@\n \n public class ServiceStartupEventHandler {\n     public static final int DEFAULT_DELAY_FACTOR = 5;\n-    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class, YamlMessageServiceInstance.getInstance());\n+    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class,\n+            YamlMessageServiceInstance.getInstance());\n \n     @SuppressWarnings(\"squid:S1172\")\n     public void onServiceStartup(String serviceName, int delayFactor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4ODc2MA=="}, "originalCommit": {"oid": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzE1MzEyOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/ticket/ApplicationNameNotFoundException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjozMTowMFrOFdV4AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjozMTowMFrOFdV4AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxMTQyNA==", "bodyText": "Unused", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366311424", "createdAt": "2020-01-14T12:31:00Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/ticket/ApplicationNameNotFoundException.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.security.ticket;\n+\n+/**\n+ * Exception thrown when applicationName parameter was not provided\n+ */\n+public class ApplicationNameNotFoundException extends Exception {\n+\n+    public ApplicationNameNotFoundException(String message) {\n+        super(message);\n+    }\n+\n+    public ApplicationNameNotFoundException(String message, Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzUzMjgyOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/AuthController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDozMjowOFrOFdZewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDozMjowOFrOFdZewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3MDQ5OA==", "bodyText": "Response true or false? Please consider about api design... Can be 204 if everything is ok, otherwise you can say what is a problem with api response.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366370498", "createdAt": "2020-01-14T14:32:08Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/AuthController.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.controllers;\n+\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * Controller offer method to control security. It can contains method for user and also method for calling services\n+ * by gateway to distribute state of authentication between nodes.\n+ */\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/auth\")\n+public class AuthController {\n+\n+    private final AuthenticationService authenticationService;\n+\n+    @DeleteMapping(path = \"/invalidate/**\")\n+    public Boolean invalidateJwtToken(HttpServletRequest request) {\n+        final String path = \"/auth/invalidate/\";\n+        final String uri = request.getRequestURI();\n+        final int index = uri.indexOf(path);\n+\n+        final String jwtToken = (index >= 0) ? uri.substring(index + path.length()) : \"\";\n+        return authenticationService.invalidateJwtToken(jwtToken, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzUzOTY5OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/AuthController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDozMzo0NlrOFdZisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDozMzo0NlrOFdZisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3MTUwNw==", "bodyText": "Why all of gateway urls start with /api/v1/gateway/* except this.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366371507", "createdAt": "2020-01-14T14:33:46Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/AuthController.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.controllers;\n+\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * Controller offer method to control security. It can contains method for user and also method for calling services\n+ * by gateway to distribute state of authentication between nodes.\n+ */\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/auth\")\n+public class AuthController {\n+\n+    private final AuthenticationService authenticationService;\n+\n+    @DeleteMapping(path = \"/invalidate/**\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzU1NjUxOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/service/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDozODozMFrOFdZs8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDozODozMFrOFdZs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3NDEyOA==", "bodyText": "There is a comment \"gateway have to exists\". Can you explain a little why we need to check ?", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366374128", "createdAt": "2020-01-14T14:38:30Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -69,6 +92,53 @@ public String createJwtToken(String username, String domain, String ltpaToken) {\n             .compact();\n     }\n \n+    /**\n+     * Method will invalidate jwtToken. It could be called from two reasons:\n+     * - on logout phase (distribute = true)\n+     * - from another gateway instance to notify about change (distribute = false)\n+     *\n+     * @param jwtToken   token to invalidated\n+     * @param distribute distribute invalidation to another instances?\n+     * @return state of invalidate (true - token was invalidated)\n+     */\n+    @CacheEvict(value = \"validationJwtToken\", key = \"#jwtToken\")\n+    @Cacheable(value = \"invalidatedJwtTokens\", key = \"#jwtToken\", condition = \"#jwtToken != null\")\n+    public Boolean invalidateJwtToken(String jwtToken, boolean distribute) {\n+        /*\n+         * until ehCache is not distributed, send to other instances invalidation request\n+         */\n+        if (distribute) {\n+            final Application application = discoveryClient.getApplication(\"gateway\");\n+            // wrong state, gateway have to exists (at least this current instance), return false like unsuccessful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzU3NzU0OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/service/AuthenticationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0NDoxM1rOFdZ5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0NDoxM1rOFdZ5uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3NzQwMQ==", "bodyText": "Method doesn't give to any message to consumer. I meant it used by api controller. So i requested api /invalidate and it returns false. What does it mean?\nDo we need return boolean? Can we be more specific?", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366377401", "createdAt": "2020-01-14T14:44:13Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -69,6 +92,53 @@ public String createJwtToken(String username, String domain, String ltpaToken) {\n             .compact();\n     }\n \n+    /**\n+     * Method will invalidate jwtToken. It could be called from two reasons:\n+     * - on logout phase (distribute = true)\n+     * - from another gateway instance to notify about change (distribute = false)\n+     *\n+     * @param jwtToken   token to invalidated\n+     * @param distribute distribute invalidation to another instances?\n+     * @return state of invalidate (true - token was invalidated)\n+     */\n+    @CacheEvict(value = \"validationJwtToken\", key = \"#jwtToken\")\n+    @Cacheable(value = \"invalidatedJwtTokens\", key = \"#jwtToken\", condition = \"#jwtToken != null\")\n+    public Boolean invalidateJwtToken(String jwtToken, boolean distribute) {\n+        /*\n+         * until ehCache is not distributed, send to other instances invalidation request\n+         */\n+        if (distribute) {\n+            final Application application = discoveryClient.getApplication(\"gateway\");\n+            // wrong state, gateway have to exists (at least this current instance), return false like unsuccessful\n+            if (application == null) return Boolean.FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzYzODc4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/CacheServiceController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo1OTozOVrOFdaefA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo1OTozOVrOFdaefA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NjgxMg==", "bodyText": "path=\"\" is redundant", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366386812", "createdAt": "2020-01-14T14:59:39Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/CacheServiceController.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.controllers;\n+\n+import com.ca.mfaas.gateway.security.service.ServiceCacheEvict;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * This controller allows control the caches about services. The main purpose is to evict cached data\n+ * about services when a update happened in discovery service. Discovery service notifies about any\n+ * change to be sure that cache on gateway is still valid.\n+ */\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/cache/services\")\n+public class CacheServiceController {\n+\n+    private final List<ServiceCacheEvict> toEvict;\n+\n+    @DeleteMapping(path = \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzY2OTkyOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/controllers/AuthControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTowODowOFrOFdaxxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTowODowOFrOFdaxxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MTc0OA==", "bodyText": "Please check it, it is not fully covered.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366391748", "createdAt": "2020-01-14T15:08:08Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/controllers/AuthControllerTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.ca.mfaas.gateway.controllers;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+\n+import static org.mockito.Mockito.*;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class AuthControllerTest {\n+\n+    private MockMvc mockMvc;\n+\n+    @Mock\n+    private AuthenticationService authenticationService;\n+\n+    private AuthController authController;\n+\n+    @Before\n+    public void setUp() {\n+        authController = new AuthController(authenticationService);\n+        mockMvc = MockMvcBuilders.standaloneSetup(authController).build();\n+    }\n+\n+    @Test\n+    public void invalidateJwtToken() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzY5NDgxOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/ZosmfSchemeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxNDo1OVrOFdbBcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxNDo1OVrOFdbBcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NTc2MQ==", "bodyText": "Please split unit test to small ones. It is too big. And name test methods regarding to what you test.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366395761", "createdAt": "2020-01-14T15:14:59Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/ZosmfSchemeTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.ca.apiml.security.common.token.TokenNotValidException;\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import com.netflix.zuul.context.RequestContext;\n+import io.jsonwebtoken.JwtException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+import java.util.Optional;\n+\n+import static com.ca.mfaas.gateway.security.service.schema.ZosmfScheme.ZosmfCommand.COOKIE_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ZosmfSchemeTest {\n+\n+    @Mock\n+    private AuthenticationService authenticationService;\n+\n+    @InjectMocks\n+    private ZosmfScheme zosmfScheme;\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzY5ODY5OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/ZosmfSchemeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxNjowMVrOFdbDvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxNjowMVrOFdbDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NjM0OA==", "bodyText": "And it is not fully covered.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366396348", "createdAt": "2020-01-14T15:16:01Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/ZosmfSchemeTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.ca.apiml.security.common.token.TokenNotValidException;\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import com.netflix.zuul.context.RequestContext;\n+import io.jsonwebtoken.JwtException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+import java.util.Optional;\n+\n+import static com.ca.mfaas.gateway.security.service.schema.ZosmfScheme.ZosmfCommand.COOKIE_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ZosmfSchemeTest {\n+\n+    @Mock\n+    private AuthenticationService authenticationService;\n+\n+    @InjectMocks\n+    private ZosmfScheme zosmfScheme;\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {\n+        Calendar calendar = Calendar.getInstance();\n+        Authentication authentication = new Authentication(AuthenticationScheme.ZOSMF, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzcwNjQ5OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/HttpBasicPassTicketSchemeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxODoxMlrOFdbItw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxODoxMlrOFdbItw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NzYyMw==", "bodyText": "Please split unit test to small ones. It is too big. And name test methods regarding to what you test.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366397623", "createdAt": "2020-01-14T15:18:12Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/HttpBasicPassTicketSchemeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.service.PassTicketService;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HttpBasicPassTicketSchemeTest {\n+\n+    private final int PASSTICKET_DURATION = 300;\n+\n+    @Mock\n+    private PassTicketService passTicketService;\n+\n+    @InjectMocks\n+    private HttpBasicPassTicketScheme httpBasicPassTicketScheme;\n+\n+    @Before\n+    public void init() {\n+        ReflectionTestUtils.setField(httpBasicPassTicketScheme, \"timeout\", PASSTICKET_DURATION);\n+    }\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzcwNzYzOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/HttpBasicPassTicketSchemeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxODozMVrOFdbJdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToxODozMVrOFdbJdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NzgxNQ==", "bodyText": "And it is not fully covered.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366397815", "createdAt": "2020-01-14T15:18:31Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/HttpBasicPassTicketSchemeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.service.PassTicketService;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HttpBasicPassTicketSchemeTest {\n+\n+    private final int PASSTICKET_DURATION = 300;\n+\n+    @Mock\n+    private PassTicketService passTicketService;\n+\n+    @InjectMocks\n+    private HttpBasicPassTicketScheme httpBasicPassTicketScheme;\n+\n+    @Before\n+    public void init() {\n+        ReflectionTestUtils.setField(httpBasicPassTicketScheme, \"timeout\", PASSTICKET_DURATION);\n+    }\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {\n+        Calendar calendar = Calendar.getInstance();\n+        Authentication authentication = new Authentication(AuthenticationScheme.HTTP_BASIC_PASSTICKET, \"applid\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzc2Mjg3OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/AuthenticationSchemeFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTozMzoyOVrOFdbr8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTozMzoyOVrOFdbr8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwNjY0Mw==", "bodyText": "Test is too big", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366406643", "createdAt": "2020-01-14T15:33:29Z", "author": {"login": "ilkinabdullayev"}, "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/AuthenticationSchemeFactoryTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(JUnit4.class)\n+public class AuthenticationSchemeFactoryTest {\n+\n+    private static final AuthenticationCommand COMMAND = mock(AuthenticationCommand.class);\n+\n+    private AbstractAuthenticationScheme createScheme(final AuthenticationScheme scheme, final boolean isDefault) {\n+        return new AbstractAuthenticationScheme() {\n+            @Override\n+            public AuthenticationScheme getScheme() {\n+                return scheme;\n+            }\n+\n+            @Override\n+            public boolean isDefault() {\n+                return isDefault;\n+            }\n+\n+            @Override\n+            public AuthenticationCommand createCommand(Authentication authentication, QueryResponse token) {\n+                return COMMAND;\n+            }\n+        };\n+    }\n+\n+    @Before\n+    public void init() {\n+        RequestContext.testSetCurrentContext(null);\n+    }\n+\n+    @Test\n+    public void testInit() {\n+        // happy day\n+        new AuthenticationSchemeFactory(\n+            mock(AuthenticationService.class),\n+            Arrays.asList(\n+                createScheme(AuthenticationScheme.BYPASS, true),\n+                createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, false),\n+                createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+            )\n+        );\n+\n+        // no default\n+        try {\n+            new AuthenticationSchemeFactory(\n+                mock(AuthenticationService.class),\n+                Arrays.asList(\n+                    createScheme(AuthenticationScheme.BYPASS, false),\n+                    createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, false),\n+                    createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+                )\n+            );\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            assertTrue(e.getMessage().contains(\"No scheme\"));\n+        }\n+\n+        // multiple default\n+        try {\n+            new AuthenticationSchemeFactory(\n+                mock(AuthenticationService.class),\n+                Arrays.asList(\n+                    createScheme(AuthenticationScheme.BYPASS, true),\n+                    createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, true),\n+                    createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+                )\n+            );\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            assertTrue(e.getMessage().contains(\"Multiple scheme\"));\n+            assertTrue(e.getMessage().contains(\"as default\"));\n+            assertTrue(e.getMessage().contains(AuthenticationScheme.BYPASS.getScheme()));\n+            assertTrue(e.getMessage().contains(AuthenticationScheme.HTTP_BASIC_PASSTICKET.getScheme()));\n+        }\n+    }\n+\n+    @Test\n+    public void testGetSchema() {\n+        AuthenticationSchemeFactory asf = new AuthenticationSchemeFactory(\n+            mock(AuthenticationService.class),\n+            Arrays.asList(\n+                createScheme(AuthenticationScheme.BYPASS, true),\n+                createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, false),\n+                createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+            )\n+        );\n+\n+        assertEquals(AuthenticationScheme.BYPASS, asf.getSchema(AuthenticationScheme.BYPASS).getScheme());\n+        assertEquals(AuthenticationScheme.HTTP_BASIC_PASSTICKET, asf.getSchema(AuthenticationScheme.HTTP_BASIC_PASSTICKET).getScheme());\n+        assertEquals(AuthenticationScheme.ZOWE_JWT, asf.getSchema(AuthenticationScheme.ZOWE_JWT).getScheme());\n+        // default one\n+        assertEquals(AuthenticationScheme.BYPASS, asf.getSchema(null).getScheme());\n+    }\n+\n+    @Test\n+    public void testGetAuthenticationCommand() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTk3MDMzOnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/auth/Authentication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwODo1MjoyMVrOFdw5gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwODo1MjoyMVrOFdw5gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc1NDE3OA==", "bodyText": "That line is not covered fully by tests.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366754178", "createdAt": "2020-01-15T08:52:21Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/auth/Authentication.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.auth;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Information about expected authentication scheme and APPLID for PassTickets generation.\n+ */\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class Authentication {\n+\n+    private AuthenticationScheme scheme;\n+    private String applid;\n+\n+    public boolean isEmpty() {\n+        return (scheme == null) && (applid == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA0MzMyOnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/config/AuthConfigurationProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToxNzozNVrOFdxl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToxNzozNVrOFdxl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NTUzMQ==", "bodyText": "What is this class for? I understand it is designed to have apiml.security.auth.passTicket.timeout property. But it is totally unused.\nI checked apiml.security.auth.passTicket.timeout param is being used with @Value(\"${apiml.security.auth.passTicket.timeout:540}\"). So this param is called by spring feature, not by AuthConfigurationProperties.\nAnother point is that default value of apiml.security.auth.passTicket.timeout is mentioned as two value:\n   @Data\n    public static class PassTicket {\n        private Integer timeout = 360;\n    }\n@Value(\"${apiml.security.auth.passTicket.timeout:540}\")", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366765531", "createdAt": "2020-01-15T09:17:35Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/config/AuthConfigurationProperties.java", "diffHunk": "@@ -62,9 +65,15 @@\n         private Integer cookieMaxAge = -1;\n     }\n \n+    @Data\n+    public static class PassTicket {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA0ODM3OnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/auth/AuthenticationSchemeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToxOToyMlrOFdxo-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToxOToyMlrOFdxo-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NjMzMQ==", "bodyText": "Not fully covered", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366766331", "createdAt": "2020-01-15T09:19:22Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/auth/AuthenticationSchemeTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.ca.apiml.security.common.auth;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import static org.junit.Assert.*;\n+@RunWith(JUnit4.class)\n+public class AuthenticationSchemeTest {\n+\n+    @Test\n+    public void testFromScheme() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA5MzMyOnYy", "diffSide": "LEFT", "path": "api-catalog-ui/frontend/cypress/integration/e2e/detail-page/detail-page.test.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozNDoxNlrOFdyEfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNDo1NjoxMlrOFd7B6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzM3NQ==", "bodyText": "do you think this check should be removed?", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366773375", "createdAt": "2020-01-15T09:34:16Z", "author": {"login": "ilkinabdullayev"}, "path": "api-catalog-ui/frontend/cypress/integration/e2e/detail-page/detail-page.test.js", "diffHunk": "@@ -90,8 +90,6 @@ describe('>>> Detail page test', () => {\n \n         cy.contains('Service Homepage').should('exist');\n \n-        cy.get('pre.version').should('contain', '1.1.2');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgwNTc1Nw==", "bodyText": "Do you think it makes sense to check the API version? I don't see much value in it and you have to increase it when you update the API.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366805757", "createdAt": "2020-01-15T10:40:03Z", "author": {"login": "JirkaAichler"}, "path": "api-catalog-ui/frontend/cypress/integration/e2e/detail-page/detail-page.test.js", "diffHunk": "@@ -90,8 +90,6 @@ describe('>>> Detail page test', () => {\n \n         cy.contains('Service Homepage').should('exist');\n \n-        cy.get('pre.version').should('contain', '1.1.2');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzM3NQ=="}, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkyMDE2OA==", "bodyText": "Yes, it doesn't have much value to keep it. I wanted just to ask", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366920168", "createdAt": "2020-01-15T14:56:12Z", "author": {"login": "ilkinabdullayev"}, "path": "api-catalog-ui/frontend/cypress/integration/e2e/detail-page/detail-page.test.js", "diffHunk": "@@ -90,8 +90,6 @@ describe('>>> Detail page test', () => {\n \n         cy.contains('Service Homepage').should('exist');\n \n-        cy.get('pre.version').should('contain', '1.1.2');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzM3NQ=="}, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjE3MzY4OnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/service/PassTicketServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTo1ODo0NVrOFdy0xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTo1ODo0NVrOFdy0xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NTczMw==", "bodyText": "What is intended with @Order?", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366785733", "createdAt": "2020-01-15T09:58:45Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/service/PassTicketServiceTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration\n+public class PassTicketServiceTest {\n+\n+    private static final String TEST_USERID = \"userId\";\n+\n+    @Autowired\n+    private PassTicketService passTicketService;\n+\n+    private static String evaluated;\n+\n+    @Test\n+    @Order(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjY0NTgxOnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjo1Mzo0MVrOFd3TLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjo1Mzo0MVrOFd3TLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg1OTA1Mw==", "bodyText": "ObjectUtil.requireNotNull(userId, \"Parameter userId is empty\");\n  ObjectUtil.requireNotNull(applId, \"Parameter applId is empty\");\n  ObjectUtil.requireNotNull(passTicket, \"Parameter passTicket is empty\");", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366859053", "createdAt": "2020-01-15T12:53:41Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This method allow to get a PassTicket from SAF.\n+ */\n+@Service\n+public class PassTicketService {\n+\n+    private IRRPassTicket irrPassTicket;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n+                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+    }\n+\n+    public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+        irrPassTicket.evaluate(userId, applId, passTicket);\n+    }\n+\n+    public String generate(String userId, String applId) throws IRRPassTicketGenerationException {\n+        return irrPassTicket.generate(userId, applId);\n+    }\n+\n+    public boolean isUsingSafImplementation() {\n+        ClassOrDefaultProxyUtils.ClassOrDefaultProxyState stateInterface = (ClassOrDefaultProxyUtils.ClassOrDefaultProxyState) irrPassTicket;\n+        return stateInterface.isUsingBaseImplementation();\n+    }\n+\n+    public static class DefaultPassTicketImpl implements IRRPassTicket {\n+\n+        private static int id = 0;\n+\n+        public static final String ZOWE_DUMMY_USERID = \"user\";\n+        public static final String ZOWE_DUMMY_PASS_TICKET_PREFIX = \"ZoweDummyPassTicket\";\n+\n+        public static final String UNKWNOWN_USER = \"unknownUser\";\n+        public static final String UNKWNOWN_APPLID = \"XBADAPPL\";\n+\n+        private Map<UserApp, Set<String>> userAppToPasstickets = new HashMap<>();\n+\n+        @Override\n+        public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+            if (userId == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzEyMjI2OnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/AbstractIRRPassTicketException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNToxOTo1NlrOFd73tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNToxOTo1NlrOFd73tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkzMzk0Mg==", "bodyText": "throw new IRRPassTicketEvaluationException(8, 16, 28); //easy to make mistake\n  throw new IRRPassTicketEvaluationException(ErrorCode.ERR_8_8_16);", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366933942", "createdAt": "2020-01-15T15:19:56Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/AbstractIRRPassTicketException.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Abstact exception from IRR passticket service. It collect common values about exception\n+ */\n+@AllArgsConstructor\n+@Getter\n+public abstract class AbstractIRRPassTicketException extends Exception {\n+\n+    private static final long serialVersionUID = -6233392272992529775L;\n+\n+    protected final int safRc;\n+    protected final int racfRsn;\n+    protected final int racfRc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYwOTg0OnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/token/QueryResponseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NjoxNVrOFeTxiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NjoxNVrOFeTxiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNTU3Nw==", "bodyText": "Redundant", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r367325577", "createdAt": "2020-01-16T09:56:15Z", "author": {"login": "ilkinabdullayev"}, "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/token/QueryResponseTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.ca.apiml.security.common.token;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6325a6eb156ffa24810268809074ffd9840328c9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAxMjIxOnYy", "diffSide": "RIGHT", "path": "common-service-core/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyMTo0MFrOFeXmzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjowNTo1N1rOFfjD3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4ODM2NA==", "bodyText": "Our intention was to keep common-service-core as isolated from spring dependencies.  I would like to ask that why don't you keep your classes( which depend on these spring-deps) in apiml-common module?", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r367388364", "createdAt": "2020-01-16T12:21:40Z", "author": {"login": "ilkinabdullayev"}, "path": "common-service-core/build.gradle", "diffHunk": "@@ -9,7 +9,11 @@ dependencies {\n \n     compileOnly(libraries.javax_servlet_api)\n     compileOnly(libraries.lombok)\n+    compileOnly(libraries.spring_boot_starter_cache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6325a6eb156ffa24810268809074ffd9840328c9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNDYwNA==", "bodyText": "Spring libraries are needed only during compilation and usage of cache class.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r368624604", "createdAt": "2020-01-20T16:05:57Z", "author": {"login": "JirkaAichler"}, "path": "common-service-core/build.gradle", "diffHunk": "@@ -9,7 +9,11 @@ dependencies {\n \n     compileOnly(libraries.javax_servlet_api)\n     compileOnly(libraries.lombok)\n+    compileOnly(libraries.spring_boot_starter_cache)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4ODM2NA=="}, "originalCommit": {"oid": "6325a6eb156ffa24810268809074ffd9840328c9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDA4MTg3OnYy", "diffSide": "RIGHT", "path": "common-service-core/src/test/java/com/ca/mfaas/cache/CompositeKeyGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0OTozMFrOFeYQpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0OTozMFrOFeYQpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5OTA3OA==", "bodyText": "Not fully covered.", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r367399078", "createdAt": "2020-01-16T12:49:30Z", "author": {"login": "ilkinabdullayev"}, "path": "common-service-core/src/test/java/com/ca/mfaas/cache/CompositeKeyGeneratorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.ca.mfaas.cache;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(JUnit4.class)\n+public class CompositeKeyGeneratorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6325a6eb156ffa24810268809074ffd9840328c9"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 461, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}