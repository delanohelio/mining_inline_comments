{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjUzMTA1", "number": 1025, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyNDoxMVrOFHwcpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyNDoyM1rOFHwczw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjc4MTE3OnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/auth/saf/SafResourceAccessConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyNDoxMVrOIJVCQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyNDoxMVrOIJVCQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1MjczOA==", "bodyText": "Logger will be used?", "url": "https://github.com/zowe/api-layer/pull/1025#discussion_r546652738", "createdAt": "2020-12-21T11:24:11Z", "author": {"login": "achmelo"}, "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/auth/saf/SafResourceAccessConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.security.common.auth.saf;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.io.IOException;\n+\n+@Configuration\n+@Slf4j\n+public class SafResourceAccessConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2876abcc3c42c250da0e70a9ca8fc0e2380b069"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjc4MTQwOnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/auth/saf/SafResourceAccessConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyNDoxN1rOIJVCZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjo1MTozOFrOIJ6IDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1Mjc3NA==", "bodyText": "could be a conditional bean? but can be done in the next PR, once another implementation is available", "url": "https://github.com/zowe/api-layer/pull/1025#discussion_r546652774", "createdAt": "2020-12-21T11:24:17Z", "author": {"login": "achmelo"}, "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/auth/saf/SafResourceAccessConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.security.common.auth.saf;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.io.IOException;\n+\n+@Configuration\n+@Slf4j\n+public class SafResourceAccessConfig {\n+\n+    @Bean\n+    public SafResourceAccessVerifying safResourceAccessVerifying() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2876abcc3c42c250da0e70a9ca8fc0e2380b069"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MDQzMQ==", "bodyText": "I have changed it for this issue, but with the next pr it will created again with a if clausule.", "url": "https://github.com/zowe/api-layer/pull/1025#discussion_r547260431", "createdAt": "2020-12-22T12:51:38Z", "author": {"login": "pj892031"}, "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/auth/saf/SafResourceAccessConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.security.common.auth.saf;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.io.IOException;\n+\n+@Configuration\n+@Slf4j\n+public class SafResourceAccessConfig {\n+\n+    @Bean\n+    public SafResourceAccessVerifying safResourceAccessVerifying() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1Mjc3NA=="}, "originalCommit": {"oid": "f2876abcc3c42c250da0e70a9ca8fc0e2380b069"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjc4MTU5OnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/auth/saf/SafResourceAccessDummy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyNDoyM1rOIJVCgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyNDoyM1rOIJVCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1MjgwMg==", "bodyText": "Could you please add some comment or rename the load and set methods so we better know what they are doing. For future maintenance.", "url": "https://github.com/zowe/api-layer/pull/1025#discussion_r546652802", "createdAt": "2020-12-21T11:24:23Z", "author": {"login": "achmelo"}, "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/auth/saf/SafResourceAccessDummy.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.security.common.auth.saf;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import org.springframework.security.core.Authentication;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.*;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class SafResourceAccessDummy implements SafResourceAccessVerifying {\n+\n+    private static final String SAF_ACCESS = \"safAccess\";\n+    private static final String DEFAULT_FILE_LOCATION = \"saf.yml\";\n+    private static final String DEFAULT_RESOURCE_LOCATION = \"mock-saf.yml\";\n+\n+    private Map<ResourceUser, AccessLevel> resourceUserToAccessLevel = new HashMap<>();\n+\n+    public SafResourceAccessDummy() throws IOException {\n+        File file = getFile();\n+        if (file.exists()) {\n+            try (\n+                FileInputStream fis = new FileInputStream(file);\n+                BufferedInputStream bis = new BufferedInputStream(fis)\n+            ) {\n+                load(bis);\n+            }\n+        } else {\n+            try (InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(DEFAULT_RESOURCE_LOCATION)) {\n+                load(inputStream);\n+            }\n+        }\n+    }\n+\n+    protected File getFile() {\n+        return new File(DEFAULT_FILE_LOCATION);\n+    }\n+\n+    public SafResourceAccessDummy(InputStream inputStream) {\n+        load(inputStream);\n+    }\n+\n+    @Override\n+    public boolean hasSafResourceAccess(Authentication authentication, String resourceClass, String resourceName, String accessLevel) {\n+        ResourceUser resourceUser = ResourceUser.builder()\n+            .resourceClass(resourceClass)\n+            .resourceName(resourceName)\n+            .userId(authentication.getName())\n+            .build();\n+        AccessLevel currentLevel = resourceUserToAccessLevel.get(resourceUser);\n+        if (currentLevel == null) return false;\n+        return currentLevel.compareTo(AccessLevel.valueOf(accessLevel)) >= 0;\n+    }\n+\n+    private void load(InputStream inputStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2876abcc3c42c250da0e70a9ca8fc0e2380b069"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 473, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}