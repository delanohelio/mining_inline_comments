{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMTU2NDA4", "number": 802, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODoxNDo1NlrOEdiJjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDoxMDo0M1rOEdnluw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDAzNjYyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/resources/environment-configuration.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODoxNDo1NlrOHIvTwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOTowOTozOVrOHIzZdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkyNTc2MQ==", "bodyText": "This will need change in internal repo to work on internal jenkins (if this is used by some test on mf...)", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r478925761", "createdAt": "2020-08-28T08:14:56Z", "author": {"login": "jandadav"}, "path": "integration-tests/src/test/resources/environment-configuration.yml", "diffHunk": "@@ -21,6 +21,7 @@ tlsConfiguration:\n     keyPassword: password\n     keyStoreType: PKCS12\n     keyStore: ../keystore/localhost/localhost.keystore.p12\n+    clientKeystore: ../keystore/client_cert/cert_key.p12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk5Mjc1OA==", "bodyText": "which you're not doing", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r478992758", "createdAt": "2020-08-28T09:09:39Z", "author": {"login": "jandadav"}, "path": "integration-tests/src/test/resources/environment-configuration.yml", "diffHunk": "@@ -21,6 +21,7 @@ tlsConfiguration:\n     keyPassword: password\n     keyStoreType: PKCS12\n     keyStore: ../keystore/localhost/localhost.keystore.p12\n+    clientKeystore: ../keystore/client_cert/cert_key.p12", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkyNTc2MQ=="}, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDQ2NTc3OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOToxMToxN1rOHIziHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzozNDoxOVrOHJF0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk5NDk3Mw==", "bodyText": "This class makes my brain hurt. The code is working but it could be made more readable, and the javadoc could use an update.", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r478994973", "createdAt": "2020-08-28T09:11:17Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -35,26 +34,28 @@\n \n     /**\n      * Filter certificated by allowed - see publicKeyCertificatesBase64\n+     *\n      * @param certs all certificated to filter\n      * @return filtered certificates (certs), contains only certificated used to sign in APIML\n      */\n-    private X509Certificate[] filter(X509Certificate[] certs) {\n-        return Arrays.stream(certs)\n-            .filter(x -> publicKeyCertificatesBase64.contains(\n-                Base64.getEncoder().encodeToString(x.getPublicKey().getEncoded())\n-            ))\n-            .toArray(X509Certificate[]::new);\n+    private Map<Boolean, List<X509Certificate>> filter(X509Certificate[] certs) {\n+        return Arrays.stream(certs).collect(Collectors.partitioningBy(cer -> publicKeyCertificatesBase64.contains(Base64.getEncoder().encodeToString(cer.getPublicKey().getEncoded()))));\n     }\n \n     /**\n      * Get certificates from request (if exists), filter them (to use only APIML certificate to request sign) and\n      * store again into request.\n+     *\n      * @param request Request to filter certificates\n      */\n     private void filterCerts(ServletRequest request) {\n         X509Certificate[] certs = (X509Certificate[]) request.getAttribute(\"javax.servlet.request.X509Certificate\");\n         if (certs != null) {\n-            certs = filter(certs);\n+            Map<Boolean, List<X509Certificate>> separatedCerts = filter(certs);\n+            X509Certificate[] clientAuthCerts = new X509Certificate[separatedCerts.get(false).size()];\n+            request.setAttribute(\"client.auth.X509Certificate\", separatedCerts.get(false).toArray(clientAuthCerts));\n+            X509Certificate[] zoweCerts = new X509Certificate[separatedCerts.get(true).size()];\n+            certs = separatedCerts.get(true).toArray(zoweCerts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk5NjQyNw==", "bodyText": "maybe it's just me : )", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r478996427", "createdAt": "2020-08-28T09:12:21Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -35,26 +34,28 @@\n \n     /**\n      * Filter certificated by allowed - see publicKeyCertificatesBase64\n+     *\n      * @param certs all certificated to filter\n      * @return filtered certificates (certs), contains only certificated used to sign in APIML\n      */\n-    private X509Certificate[] filter(X509Certificate[] certs) {\n-        return Arrays.stream(certs)\n-            .filter(x -> publicKeyCertificatesBase64.contains(\n-                Base64.getEncoder().encodeToString(x.getPublicKey().getEncoded())\n-            ))\n-            .toArray(X509Certificate[]::new);\n+    private Map<Boolean, List<X509Certificate>> filter(X509Certificate[] certs) {\n+        return Arrays.stream(certs).collect(Collectors.partitioningBy(cer -> publicKeyCertificatesBase64.contains(Base64.getEncoder().encodeToString(cer.getPublicKey().getEncoded()))));\n     }\n \n     /**\n      * Get certificates from request (if exists), filter them (to use only APIML certificate to request sign) and\n      * store again into request.\n+     *\n      * @param request Request to filter certificates\n      */\n     private void filterCerts(ServletRequest request) {\n         X509Certificate[] certs = (X509Certificate[]) request.getAttribute(\"javax.servlet.request.X509Certificate\");\n         if (certs != null) {\n-            certs = filter(certs);\n+            Map<Boolean, List<X509Certificate>> separatedCerts = filter(certs);\n+            X509Certificate[] clientAuthCerts = new X509Certificate[separatedCerts.get(false).size()];\n+            request.setAttribute(\"client.auth.X509Certificate\", separatedCerts.get(false).toArray(clientAuthCerts));\n+            X509Certificate[] zoweCerts = new X509Certificate[separatedCerts.get(true).size()];\n+            certs = separatedCerts.get(true).toArray(zoweCerts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk5NDk3Mw=="}, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3MTI2OA==", "bodyText": "I feel the same way", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r479071268", "createdAt": "2020-08-28T10:10:59Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -35,26 +34,28 @@\n \n     /**\n      * Filter certificated by allowed - see publicKeyCertificatesBase64\n+     *\n      * @param certs all certificated to filter\n      * @return filtered certificates (certs), contains only certificated used to sign in APIML\n      */\n-    private X509Certificate[] filter(X509Certificate[] certs) {\n-        return Arrays.stream(certs)\n-            .filter(x -> publicKeyCertificatesBase64.contains(\n-                Base64.getEncoder().encodeToString(x.getPublicKey().getEncoded())\n-            ))\n-            .toArray(X509Certificate[]::new);\n+    private Map<Boolean, List<X509Certificate>> filter(X509Certificate[] certs) {\n+        return Arrays.stream(certs).collect(Collectors.partitioningBy(cer -> publicKeyCertificatesBase64.contains(Base64.getEncoder().encodeToString(cer.getPublicKey().getEncoded()))));\n     }\n \n     /**\n      * Get certificates from request (if exists), filter them (to use only APIML certificate to request sign) and\n      * store again into request.\n+     *\n      * @param request Request to filter certificates\n      */\n     private void filterCerts(ServletRequest request) {\n         X509Certificate[] certs = (X509Certificate[]) request.getAttribute(\"javax.servlet.request.X509Certificate\");\n         if (certs != null) {\n-            certs = filter(certs);\n+            Map<Boolean, List<X509Certificate>> separatedCerts = filter(certs);\n+            X509Certificate[] clientAuthCerts = new X509Certificate[separatedCerts.get(false).size()];\n+            request.setAttribute(\"client.auth.X509Certificate\", separatedCerts.get(false).toArray(clientAuthCerts));\n+            X509Certificate[] zoweCerts = new X509Certificate[separatedCerts.get(true).size()];\n+            certs = separatedCerts.get(true).toArray(zoweCerts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk5NDk3Mw=="}, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5NDY2NA==", "bodyText": "It's now refactored for readability", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r479294664", "createdAt": "2020-08-28T13:34:19Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -35,26 +34,28 @@\n \n     /**\n      * Filter certificated by allowed - see publicKeyCertificatesBase64\n+     *\n      * @param certs all certificated to filter\n      * @return filtered certificates (certs), contains only certificated used to sign in APIML\n      */\n-    private X509Certificate[] filter(X509Certificate[] certs) {\n-        return Arrays.stream(certs)\n-            .filter(x -> publicKeyCertificatesBase64.contains(\n-                Base64.getEncoder().encodeToString(x.getPublicKey().getEncoded())\n-            ))\n-            .toArray(X509Certificate[]::new);\n+    private Map<Boolean, List<X509Certificate>> filter(X509Certificate[] certs) {\n+        return Arrays.stream(certs).collect(Collectors.partitioningBy(cer -> publicKeyCertificatesBase64.contains(Base64.getEncoder().encodeToString(cer.getPublicKey().getEncoded()))));\n     }\n \n     /**\n      * Get certificates from request (if exists), filter them (to use only APIML certificate to request sign) and\n      * store again into request.\n+     *\n      * @param request Request to filter certificates\n      */\n     private void filterCerts(ServletRequest request) {\n         X509Certificate[] certs = (X509Certificate[]) request.getAttribute(\"javax.servlet.request.X509Certificate\");\n         if (certs != null) {\n-            certs = filter(certs);\n+            Map<Boolean, List<X509Certificate>> separatedCerts = filter(certs);\n+            X509Certificate[] clientAuthCerts = new X509Certificate[separatedCerts.get(false).size()];\n+            request.setAttribute(\"client.auth.X509Certificate\", separatedCerts.get(false).toArray(clientAuthCerts));\n+            X509Certificate[] zoweCerts = new X509Certificate[separatedCerts.get(true).size()];\n+            certs = separatedCerts.get(true).toArray(zoweCerts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk5NDk3Mw=="}, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDUwMjI4OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/X509Filter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOToxNToyOVrOHIz4NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOToxNToyOVrOHIz4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAwMDYyOQ==", "bodyText": "Don't you have the filter names reversed? X509Filter is doing authentication, the ApimlX509AuthenticationFilter is not doing authentication and yet the name suggests that.", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r479000629", "createdAt": "2020-08-28T09:15:29Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/X509Filter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.gateway.security.config;\n+\n+import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;\n+import org.springframework.security.web.authentication.AuthenticationSuccessHandler;\n+import org.zowe.apiml.security.common.token.X509AuthenticationToken;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+\n+public class X509Filter extends AbstractAuthenticationProcessingFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDkyMzE3OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDoxMDowMlrOHI4H4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzozMzoyN1rOHJFyAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3MDE3OQ==", "bodyText": "Isn't ending of the tag  missing?", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r479070179", "createdAt": "2020-08-28T10:10:02Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -18,14 +18,13 @@\n import javax.servlet.ServletResponse;\n import java.io.IOException;\n import java.security.cert.X509Certificate;\n-import java.util.Arrays;\n-import java.util.Base64;\n-import java.util.Set;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n /**\n  * This filter extends authentication via certificate. It removes all certificates signature from request which are not\n  * related to private key using to request signing.\n- *\n+ * <p>\n  * Be careful with usage as later on it means that the set of original certificates won't be available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5Mzk1Mg==", "bodyText": "i removed it", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r479293952", "createdAt": "2020-08-28T13:33:27Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -18,14 +18,13 @@\n import javax.servlet.ServletResponse;\n import java.io.IOException;\n import java.security.cert.X509Certificate;\n-import java.util.Arrays;\n-import java.util.Base64;\n-import java.util.Set;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n /**\n  * This filter extends authentication via certificate. It removes all certificates signature from request which are not\n  * related to private key using to request signing.\n- *\n+ * <p>\n  * Be careful with usage as later on it means that the set of original certificates won't be available.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3MDE3OQ=="}, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDkyNzk1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDoxMDo0M1rOHI4K7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzozMzo0MVrOHJFy3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3MDk1OQ==", "bodyText": "Is it possible at least to structure it in multiple lines?", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r479070959", "createdAt": "2020-08-28T10:10:43Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -35,26 +34,28 @@\n \n     /**\n      * Filter certificated by allowed - see publicKeyCertificatesBase64\n+     *\n      * @param certs all certificated to filter\n      * @return filtered certificates (certs), contains only certificated used to sign in APIML\n      */\n-    private X509Certificate[] filter(X509Certificate[] certs) {\n-        return Arrays.stream(certs)\n-            .filter(x -> publicKeyCertificatesBase64.contains(\n-                Base64.getEncoder().encodeToString(x.getPublicKey().getEncoded())\n-            ))\n-            .toArray(X509Certificate[]::new);\n+    private Map<Boolean, List<X509Certificate>> filter(X509Certificate[] certs) {\n+        return Arrays.stream(certs).collect(Collectors.partitioningBy(cer -> publicKeyCertificatesBase64.contains(Base64.getEncoder().encodeToString(cer.getPublicKey().getEncoded()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5NDE3Mg==", "bodyText": "i refactored it, check the new one", "url": "https://github.com/zowe/api-layer/pull/802#discussion_r479294172", "createdAt": "2020-08-28T13:33:41Z", "author": {"login": "jandadav"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/ApimlX509AuthenticationFilter.java", "diffHunk": "@@ -35,26 +34,28 @@\n \n     /**\n      * Filter certificated by allowed - see publicKeyCertificatesBase64\n+     *\n      * @param certs all certificated to filter\n      * @return filtered certificates (certs), contains only certificated used to sign in APIML\n      */\n-    private X509Certificate[] filter(X509Certificate[] certs) {\n-        return Arrays.stream(certs)\n-            .filter(x -> publicKeyCertificatesBase64.contains(\n-                Base64.getEncoder().encodeToString(x.getPublicKey().getEncoded())\n-            ))\n-            .toArray(X509Certificate[]::new);\n+    private Map<Boolean, List<X509Certificate>> filter(X509Certificate[] certs) {\n+        return Arrays.stream(certs).collect(Collectors.partitioningBy(cer -> publicKeyCertificatesBase64.contains(Base64.getEncoder().encodeToString(cer.getPublicKey().getEncoded()))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA3MDk1OQ=="}, "originalCommit": {"oid": "8d8651953fb2c616ddfb87c4e852e04cf339e4f1"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 484, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}