{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzI5ODM4", "number": 554, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMDo0OVrODnh4pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNzowNDo0MVrODoNb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc2MjMwOnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/test/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMDo0OVrOF1lQ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyMDoyOFrOF1lpYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyOTM3OQ==", "bodyText": "Use  the given_when_then convention if possible for all the new tests", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391729379", "createdAt": "2020-03-12T16:10:49Z", "author": {"login": "taban03"}, "path": "api-catalog-services/src/test/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicatorTest.java", "diffHunk": "@@ -17,32 +18,109 @@\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n \n import java.util.Collections;\n+import java.util.HashMap;\n \n import static org.junit.Assert.*;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class ApiCatalogHealthIndicatorTest {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n+    private static String GATEWAY_SERVICE_ID = CoreService.GATEWAY.getServiceId();\n \n     private final DiscoveryClient discoveryClient = mock(DiscoveryClient.class);\n     private final ApiCatalogHealthIndicator apiCatalogHealthIndicator = new ApiCatalogHealthIndicator(discoveryClient);\n     private final Health.Builder builder = new Health.Builder();\n \n     @Test\n-    public void testStatusIsUpWhenGatewayIsAvailable() {\n-        when(discoveryClient.getInstances(CoreService.GATEWAY.getServiceId())).thenReturn(\n-            Collections.singletonList(\n-                new DefaultServiceInstance(CoreService.GATEWAY.getServiceId(), \"host\", 10010, true)));\n+    public void testStatusIsUpWhenGatewayIsAvailableAndProviderIsAvailable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczNTY1MA==", "bodyText": "My bad, I am on it.", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391735650", "createdAt": "2020-03-12T16:20:28Z", "author": {"login": "cZikos"}, "path": "api-catalog-services/src/test/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicatorTest.java", "diffHunk": "@@ -17,32 +18,109 @@\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n \n import java.util.Collections;\n+import java.util.HashMap;\n \n import static org.junit.Assert.*;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class ApiCatalogHealthIndicatorTest {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n+    private static String GATEWAY_SERVICE_ID = CoreService.GATEWAY.getServiceId();\n \n     private final DiscoveryClient discoveryClient = mock(DiscoveryClient.class);\n     private final ApiCatalogHealthIndicator apiCatalogHealthIndicator = new ApiCatalogHealthIndicator(discoveryClient);\n     private final Health.Builder builder = new Health.Builder();\n \n     @Test\n-    public void testStatusIsUpWhenGatewayIsAvailable() {\n-        when(discoveryClient.getInstances(CoreService.GATEWAY.getServiceId())).thenReturn(\n-            Collections.singletonList(\n-                new DefaultServiceInstance(CoreService.GATEWAY.getServiceId(), \"host\", 10010, true)));\n+    public void testStatusIsUpWhenGatewayIsAvailableAndProviderIsAvailable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyOTM3OQ=="}, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc2NzA4OnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/test/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMjowNFrOF1lT7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMjowNFrOF1lT7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMDE1Nw==", "bodyText": "Can you move the preparation of the metadata into the small private method?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391730157", "createdAt": "2020-03-12T16:12:04Z", "author": {"login": "balhar-jakub"}, "path": "api-catalog-services/src/test/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicatorTest.java", "diffHunk": "@@ -17,32 +18,109 @@\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n \n import java.util.Collections;\n+import java.util.HashMap;\n \n import static org.junit.Assert.*;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class ApiCatalogHealthIndicatorTest {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n+    private static String GATEWAY_SERVICE_ID = CoreService.GATEWAY.getServiceId();\n \n     private final DiscoveryClient discoveryClient = mock(DiscoveryClient.class);\n     private final ApiCatalogHealthIndicator apiCatalogHealthIndicator = new ApiCatalogHealthIndicator(discoveryClient);\n     private final Health.Builder builder = new Health.Builder();\n \n     @Test\n-    public void testStatusIsUpWhenGatewayIsAvailable() {\n-        when(discoveryClient.getInstances(CoreService.GATEWAY.getServiceId())).thenReturn(\n-            Collections.singletonList(\n-                new DefaultServiceInstance(CoreService.GATEWAY.getServiceId(), \"host\", 10010, true)));\n+    public void testStatusIsUpWhenGatewayIsAvailableAndProviderIsAvailable() {\n+        HashMap<String, String> metadata = new HashMap<>();\n+        metadata.put(AUTHENTICATION_SERVICE_ID, ZOSMF);\n+        metadata.put(AUTHENTICATION_SERVICE_PROVIDER, ZOSMF);\n+        when(discoveryClient.getInstances(GATEWAY_SERVICE_ID)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                GATEWAY_SERVICE_ID, GATEWAY_SERVICE_ID, \"host\", 10010, true, metadata)));\n+        when(discoveryClient.getInstances(ZOSMF)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                ZOSMF, ZOSMF, \"host\", 1443, true)));\n+        apiCatalogHealthIndicator.doHealthCheck(builder);\n+\n+        assertEquals(Status.UP, builder.build().getStatus());\n+    }\n \n+    @Test\n+    public void testStatusIsUpWhenGatewayIsAvailableAndProviderIsDummy() {\n+        HashMap<String, String> metadata = new HashMap<>();\n+        metadata.put(AUTHENTICATION_SERVICE_ID, \"\");\n+        metadata.put(AUTHENTICATION_SERVICE_PROVIDER, \"dummy\");\n+        when(discoveryClient.getInstances(GATEWAY_SERVICE_ID)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                GATEWAY_SERVICE_ID, GATEWAY_SERVICE_ID, \"host\", 10010, true, metadata)));\n+        when(discoveryClient.getInstances(ZOSMF)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                ZOSMF, ZOSMF, \"host\", 1443, true)));\n         apiCatalogHealthIndicator.doHealthCheck(builder);\n \n         assertEquals(Status.UP, builder.build().getStatus());\n     }\n \n     @Test\n-    public void testStatusIsDownWhenGatewayIsNotAvailable() {\n-        when(discoveryClient.getInstances(CoreService.GATEWAY.getServiceId())).thenReturn(Collections.emptyList());\n+    public void testStatusIsDownWhenGatewayIsAvailableAndProviderIsWrong() {\n+        HashMap<String, String> metadata = new HashMap<>();\n+        metadata.put(AUTHENTICATION_SERVICE_ID, \"notzosmf\");\n+        metadata.put(AUTHENTICATION_SERVICE_PROVIDER, ZOSMF);\n+        when(discoveryClient.getInstances(GATEWAY_SERVICE_ID)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                GATEWAY_SERVICE_ID, GATEWAY_SERVICE_ID, \"host\", 10010, true, metadata)));\n+        when(discoveryClient.getInstances(ZOSMF)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                ZOSMF, ZOSMF, \"host\", 1443, true)));\n+        apiCatalogHealthIndicator.doHealthCheck(builder);\n+\n+        assertEquals(Status.DOWN, builder.build().getStatus());\n+    }\n+\n+    @Test\n+    public void testStatusIsDownWhenGatewayIsAvailableAndProviderIsEmpty() {\n+        HashMap<String, String> metadata = new HashMap<>();\n+        metadata.put(AUTHENTICATION_SERVICE_ID, ZOSMF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc3MjQ1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/org/zowe/apiml/gateway/controllers/GatewayHomepageControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMzozNFrOF1lXeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMzozNFrOF1lXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTA2NQ==", "bodyText": "Following four lines are duplicates. What about moving them in the private method?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391731065", "createdAt": "2020-03-12T16:13:34Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/test/java/org/zowe/apiml/gateway/controllers/GatewayHomepageControllerTest.java", "diffHunk": "@@ -120,6 +172,15 @@ public void givenApiCatalogWithEmptyInstances_whenHomePageCalled_thenHomePageMod\n \n     @Test\n     public void givenApiCatalogInstance_whenHomePageCalled_thenHomePageModelShouldContain() {\n+        ServiceInstance authserviceInstance = new DefaultServiceInstance(\"instanceId\", \"serviceId\",\n+            \"host\", 10000, true);\n+        when(discoveryClient.getInstances(\"zosmf\")).thenReturn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc3NjgwOnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNDoyNlrOF1lZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyMzoyOFrOF2pl_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTY4Mw==", "bodyText": "Is it safe to strictly link to specific authentication provider?\nIn future plans we should support SSO, wouldn't this have impact here?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391731683", "createdAt": "2020-03-12T16:14:26Z", "author": {"login": "balhar-jakub"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0ODg5Mw==", "bodyText": "I see that this is just a link to configuration. As such this is going to be fine.\nWhen I was going through the code, I was confused why add these parameters when there are already the parameters:\napiml.security.auth.provider\napiml.security.auth.zosmfServiceId", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r392848893", "createdAt": "2020-03-16T08:23:28Z", "author": {"login": "balhar-jakub"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTY4Mw=="}, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc3OTg2OnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNToxM1rOF1lbtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNToxM1rOF1lbtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMjE1MQ==", "bodyText": "Would it be possible to modify to remove the duplicities and deep chains?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391732151", "createdAt": "2020-03-12T16:15:13Z", "author": {"login": "balhar-jakub"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n \n     private final DiscoveryClient discoveryClient;\n \n     @Override\n     protected void doHealthCheck(Health.Builder builder) {\n         String gatewayServiceId = CoreService.GATEWAY.getServiceId();\n+        String authServiceId = ZOSMF;\n+        String authServiceProvider = ZOSMF;\n+        if (!this.discoveryClient.getInstances(gatewayServiceId).isEmpty()){\n+            authServiceId = this.discoveryClient.getInstances(gatewayServiceId).get(0).getMetadata().get(AUTHENTICATION_SERVICE_ID);\n+            authServiceProvider = this.discoveryClient.getInstances(gatewayServiceId).get(0).getMetadata().get(AUTHENTICATION_SERVICE_PROVIDER);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc4MzU3OnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNjowMVrOF1ld9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNjowMVrOF1ld9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMjcyNg==", "bodyText": "Would it be possible to move the check for whether authorization is up at least to separate private function?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391732726", "createdAt": "2020-03-12T16:16:01Z", "author": {"login": "balhar-jakub"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n \n     private final DiscoveryClient discoveryClient;\n \n     @Override\n     protected void doHealthCheck(Health.Builder builder) {\n         String gatewayServiceId = CoreService.GATEWAY.getServiceId();\n+        String authServiceId = ZOSMF;\n+        String authServiceProvider = ZOSMF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc4NTY0OnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNjozMFrOF1lfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNDoyOFrOF1lzzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMzA1OA==", "bodyText": "Not sure, should it be debug?\nConsider maybe using   the already existing message\n- key: org.zowe.apiml.security.zosmfInstanceNotFound number: ZWEAG108 with apimlLog.log", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391733058", "createdAt": "2020-03-12T16:16:30Z", "author": {"login": "taban03"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n \n     private final DiscoveryClient discoveryClient;\n \n     @Override\n     protected void doHealthCheck(Health.Builder builder) {\n         String gatewayServiceId = CoreService.GATEWAY.getServiceId();\n+        String authServiceId = ZOSMF;\n+        String authServiceProvider = ZOSMF;\n+        if (!this.discoveryClient.getInstances(gatewayServiceId).isEmpty()){\n+            authServiceId = this.discoveryClient.getInstances(gatewayServiceId).get(0).getMetadata().get(AUTHENTICATION_SERVICE_ID);\n+            authServiceProvider = this.discoveryClient.getInstances(gatewayServiceId).get(0).getMetadata().get(AUTHENTICATION_SERVICE_PROVIDER);\n+        }\n+        boolean authServiceUp = false;\n+        try {\n+            if (authServiceProvider.equalsIgnoreCase(ZOSMF)) {\n+                authServiceUp = !this.discoveryClient.getInstances(authServiceId).isEmpty();\n+            } else if (authServiceProvider.equalsIgnoreCase(\"dummy\")) {\n+                authServiceUp = true;\n+            }\n+        } catch (AuthenticationServiceException ex) {\n+            log.debug(\"The parameter 'zosmfServiceId' is not configured.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczODMxOA==", "bodyText": "This is actually not needed anymore, it's a leftover and it does not throw the exception anymore. I will change this.", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391738318", "createdAt": "2020-03-12T16:24:28Z", "author": {"login": "cZikos"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n \n     private final DiscoveryClient discoveryClient;\n \n     @Override\n     protected void doHealthCheck(Health.Builder builder) {\n         String gatewayServiceId = CoreService.GATEWAY.getServiceId();\n+        String authServiceId = ZOSMF;\n+        String authServiceProvider = ZOSMF;\n+        if (!this.discoveryClient.getInstances(gatewayServiceId).isEmpty()){\n+            authServiceId = this.discoveryClient.getInstances(gatewayServiceId).get(0).getMetadata().get(AUTHENTICATION_SERVICE_ID);\n+            authServiceProvider = this.discoveryClient.getInstances(gatewayServiceId).get(0).getMetadata().get(AUTHENTICATION_SERVICE_PROVIDER);\n+        }\n+        boolean authServiceUp = false;\n+        try {\n+            if (authServiceProvider.equalsIgnoreCase(ZOSMF)) {\n+                authServiceUp = !this.discoveryClient.getInstances(authServiceId).isEmpty();\n+            } else if (authServiceProvider.equalsIgnoreCase(\"dummy\")) {\n+                authServiceUp = true;\n+            }\n+        } catch (AuthenticationServiceException ex) {\n+            log.debug(\"The parameter 'zosmfServiceId' is not configured.\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMzA1OA=="}, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc5MDQ2OnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/test/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNzozN1rOF1liSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNzozN1rOF1liSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMzgzNQ==", "bodyText": "There is a duplication with previous test. Move to private method?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391733835", "createdAt": "2020-03-12T16:17:37Z", "author": {"login": "balhar-jakub"}, "path": "api-catalog-services/src/test/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicatorTest.java", "diffHunk": "@@ -17,32 +18,109 @@\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n \n import java.util.Collections;\n+import java.util.HashMap;\n \n import static org.junit.Assert.*;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class ApiCatalogHealthIndicatorTest {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n+    private static String GATEWAY_SERVICE_ID = CoreService.GATEWAY.getServiceId();\n \n     private final DiscoveryClient discoveryClient = mock(DiscoveryClient.class);\n     private final ApiCatalogHealthIndicator apiCatalogHealthIndicator = new ApiCatalogHealthIndicator(discoveryClient);\n     private final Health.Builder builder = new Health.Builder();\n \n     @Test\n-    public void testStatusIsUpWhenGatewayIsAvailable() {\n-        when(discoveryClient.getInstances(CoreService.GATEWAY.getServiceId())).thenReturn(\n-            Collections.singletonList(\n-                new DefaultServiceInstance(CoreService.GATEWAY.getServiceId(), \"host\", 10010, true)));\n+    public void testStatusIsUpWhenGatewayIsAvailableAndProviderIsAvailable() {\n+        HashMap<String, String> metadata = new HashMap<>();\n+        metadata.put(AUTHENTICATION_SERVICE_ID, ZOSMF);\n+        metadata.put(AUTHENTICATION_SERVICE_PROVIDER, ZOSMF);\n+        when(discoveryClient.getInstances(GATEWAY_SERVICE_ID)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                GATEWAY_SERVICE_ID, GATEWAY_SERVICE_ID, \"host\", 10010, true, metadata)));\n+        when(discoveryClient.getInstances(ZOSMF)).thenReturn(\n+            Collections.singletonList(new DefaultServiceInstance(\n+                ZOSMF, ZOSMF, \"host\", 1443, true)));\n+        apiCatalogHealthIndicator.doHealthCheck(builder);\n+\n+        assertEquals(Status.UP, builder.build().getStatus());\n+    }\n \n+    @Test\n+    public void testStatusIsUpWhenGatewayIsAvailableAndProviderIsDummy() {\n+        HashMap<String, String> metadata = new HashMap<>();\n+        metadata.put(AUTHENTICATION_SERVICE_ID, \"\");\n+        metadata.put(AUTHENTICATION_SERVICE_PROVIDER, \"dummy\");\n+        when(discoveryClient.getInstances(GATEWAY_SERVICE_ID)).thenReturn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc5NDAwOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/test/java/org/zowe/apiml/gateway/controllers/GatewayHomepageControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxODozNlrOF1lkug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxODozNlrOF1lkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczNDQ1OA==", "bodyText": "Few lines duplication with next method. Maybe extract to small private method?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391734458", "createdAt": "2020-03-12T16:18:36Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/test/java/org/zowe/apiml/gateway/controllers/GatewayHomepageControllerTest.java", "diffHunk": "@@ -103,8 +103,60 @@ public void givenApiCatalogWithNullInstances_whenHomePageCalled_thenHomePageMode\n         assertThat(actualModelMap, not(hasKey(\"catalogLink\")));\n     }\n \n+    @Test\n+    public void givenApiCatalogInstanceWithEmptyAuthService_whenHomePageCalled_thenHomePageModelShouldBeReportedDown() {\n+        Map<String, String> metadataMap = new HashMap<>();\n+        metadataMap.put(\"apiml.routes.ui_v1.gatewayUrl\", \"ui/v1\");\n+        metadataMap.put(\"apiml.routes.ui_v1.serviceUrl\", \"/apicatalog\");\n+        ServiceInstance serviceInstance = new DefaultServiceInstance(\"instanceId\", \"serviceId\",\n+            \"host\", 10000, true, metadataMap);\n+\n+        when(discoveryClient.getInstances(\"apicatalog\")).thenReturn(Arrays.asList(serviceInstance));\n+        when(discoveryClient.getInstances(\"zosmf\")).thenReturn(Collections.EMPTY_LIST);\n+\n+        authConfigurationProperties.setProvider(\"zosmf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODE1MTU4OnYy", "diffSide": "RIGHT", "path": "config/local/api-defs/zosmf-sample.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzo1MToyM1rOF1pICQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozNDo1M1rOF2ISNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MjY0OQ==", "bodyText": "This is a sample, it shouldn't contain real information like url to internal Broadcom systems. Could you please remove it?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391792649", "createdAt": "2020-03-12T17:51:23Z", "author": {"login": "arxioly"}, "path": "config/local/api-defs/zosmf-sample.yml", "diffHunk": "@@ -14,12 +14,12 @@\n #   http --verify=keystore/local_ca/localca.cer GET https://localhost:10010/api/{zosmf-service-id}/zosmf/info 'X-CSRF-ZOSMF-HEADER;'\n #\n services:\n-    - serviceId: zosmfserviceid                                   # unique lowercase ID of the service\n+    - serviceId: zosmf                                   # unique lowercase ID of the service\n       title: IBM z/OSMF                                           # Title of the z/OSMF service in the API catalog\n       description: IBM z/OS Management Facility REST API service  # Description of the z/OSMF service in the API catalog\n       catalogUiTileId: zosmf                                      # ID of the API Catalog UI tile for z/OSMF services\n       instanceBaseUrls:                                           # list of base URLs for each instance\n-        -                                                         # scheme://hostname:port/contextPath\n+        - https://usilca32.lvn.broadcom.net:1443/zosmf/           # scheme://hostname:port/contextPath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3MzEzMA==", "bodyText": "Fixed It", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391973130", "createdAt": "2020-03-13T00:32:59Z", "author": {"login": "cZikos"}, "path": "config/local/api-defs/zosmf-sample.yml", "diffHunk": "@@ -14,12 +14,12 @@\n #   http --verify=keystore/local_ca/localca.cer GET https://localhost:10010/api/{zosmf-service-id}/zosmf/info 'X-CSRF-ZOSMF-HEADER;'\n #\n services:\n-    - serviceId: zosmfserviceid                                   # unique lowercase ID of the service\n+    - serviceId: zosmf                                   # unique lowercase ID of the service\n       title: IBM z/OSMF                                           # Title of the z/OSMF service in the API catalog\n       description: IBM z/OS Management Facility REST API service  # Description of the z/OSMF service in the API catalog\n       catalogUiTileId: zosmf                                      # ID of the API Catalog UI tile for z/OSMF services\n       instanceBaseUrls:                                           # list of base URLs for each instance\n-        -                                                         # scheme://hostname:port/contextPath\n+        - https://usilca32.lvn.broadcom.net:1443/zosmf/           # scheme://hostname:port/contextPath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MjY0OQ=="}, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMzE1OA==", "bodyText": "Great! Thanks!", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r392303158", "createdAt": "2020-03-13T15:34:53Z", "author": {"login": "arxioly"}, "path": "config/local/api-defs/zosmf-sample.yml", "diffHunk": "@@ -14,12 +14,12 @@\n #   http --verify=keystore/local_ca/localca.cer GET https://localhost:10010/api/{zosmf-service-id}/zosmf/info 'X-CSRF-ZOSMF-HEADER;'\n #\n services:\n-    - serviceId: zosmfserviceid                                   # unique lowercase ID of the service\n+    - serviceId: zosmf                                   # unique lowercase ID of the service\n       title: IBM z/OSMF                                           # Title of the z/OSMF service in the API catalog\n       description: IBM z/OS Management Facility REST API service  # Description of the z/OSMF service in the API catalog\n       catalogUiTileId: zosmf                                      # ID of the API Catalog UI tile for z/OSMF services\n       instanceBaseUrls:                                           # list of base URLs for each instance\n-        -                                                         # scheme://hostname:port/contextPath\n+        - https://usilca32.lvn.broadcom.net:1443/zosmf/           # scheme://hostname:port/contextPath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MjY0OQ=="}, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODE5Nzk0OnYy", "diffSide": "RIGHT", "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODowNToxNVrOF1pmew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozNToxNFrOF2ITKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwMDQ0Mw==", "bodyText": "How about replace this with:\nboolean gatewayUp = !this.discoveryClient.getInstances(gatewayServiceId).isEmpty();\nif (gatewayUp ) {\nBecause below we use the same check, in line 55.", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391800443", "createdAt": "2020-03-12T18:05:15Z", "author": {"login": "arxioly"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n \n     private final DiscoveryClient discoveryClient;\n \n     @Override\n     protected void doHealthCheck(Health.Builder builder) {\n         String gatewayServiceId = CoreService.GATEWAY.getServiceId();\n+        String authServiceId = ZOSMF;\n+        String authServiceProvider = ZOSMF;\n+        if (!this.discoveryClient.getInstances(gatewayServiceId).isEmpty()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MTM3NQ==", "bodyText": "I merged the two logic checks.", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r391981375", "createdAt": "2020-03-13T01:10:45Z", "author": {"login": "cZikos"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n \n     private final DiscoveryClient discoveryClient;\n \n     @Override\n     protected void doHealthCheck(Health.Builder builder) {\n         String gatewayServiceId = CoreService.GATEWAY.getServiceId();\n+        String authServiceId = ZOSMF;\n+        String authServiceProvider = ZOSMF;\n+        if (!this.discoveryClient.getInstances(gatewayServiceId).isEmpty()){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwMDQ0Mw=="}, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMzQwMw==", "bodyText": "Thanks!", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r392303403", "createdAt": "2020-03-13T15:35:14Z", "author": {"login": "arxioly"}, "path": "api-catalog-services/src/main/java/org/zowe/apiml/apicatalog/health/ApiCatalogHealthIndicator.java", "diffHunk": "@@ -22,19 +24,40 @@\n  */\n @Component\n @RequiredArgsConstructor\n+@Slf4j\n public class ApiCatalogHealthIndicator extends AbstractHealthIndicator {\n+    private static String AUTHENTICATION_SERVICE_ID = \"apiml.authorizationService.zosmfServiceId\";\n+    private static String AUTHENTICATION_SERVICE_PROVIDER = \"apiml.authorizationService.provider\";\n+    private static String ZOSMF = \"zosmf\";\n \n     private final DiscoveryClient discoveryClient;\n \n     @Override\n     protected void doHealthCheck(Health.Builder builder) {\n         String gatewayServiceId = CoreService.GATEWAY.getServiceId();\n+        String authServiceId = ZOSMF;\n+        String authServiceProvider = ZOSMF;\n+        if (!this.discoveryClient.getInstances(gatewayServiceId).isEmpty()){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwMDQ0Mw=="}, "originalCommit": {"oid": "8306d4e74ff5d94a7f53f92a2bdd51d8a3206862"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDg5NzUwOnYy", "diffSide": "LEFT", "path": "gateway-service/src/main/resources/application.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNzowNDo0MVrOF2nwcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNzowNDo0MVrOF2nwcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxODgwMg==", "bodyText": "Why do you replicate the information here?\nIsn't it enough to use directly the apiml.security.auth.provider?", "url": "https://github.com/zowe/api-layer/pull/554#discussion_r392818802", "createdAt": "2020-03-16T07:04:41Z", "author": {"login": "balhar-jakub"}, "path": "gateway-service/src/main/resources/application.yml", "diffHunk": "@@ -165,7 +165,9 @@ eureka:\n                       gatewayUrl: api/v1\n                       swaggerUrl: https://${apiml.service.hostname}:${apiml.service.port}/api-doc\n                       documentationUrl: https://zowe.github.io/docs-site/\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b90bc863b908dd565d8fbeabc167776a58aca7"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 450, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}