{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MjczMTMy", "number": 687, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxNDo0NVrOECeYsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxODoyNFrOECed6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDMwNDQ5OnYy", "diffSide": "RIGHT", "path": "onboarding-enabler-java/src/main/java/org/zowe/apiml/eurekaservice/client/ApiMediationClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxNDo0NVrOGe8-Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxNDo0NVrOGe8-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwOTQwNw==", "bodyText": "I would keep only the ServiceDefinitionException.", "url": "https://github.com/zowe/api-layer/pull/687#discussion_r435109407", "createdAt": "2020-06-04T09:14:45Z", "author": {"login": "balhar-jakub"}, "path": "onboarding-enabler-java/src/main/java/org/zowe/apiml/eurekaservice/client/ApiMediationClient.java", "diffHunk": "@@ -26,7 +28,7 @@\n      * @param config\n      * @throws ServiceDefinitionException - checked exception encapsulating the real reason why registration has failed.\n      */\n-    void register(ApiMediationServiceConfig config) throws ServiceDefinitionException;\n+    void register(ApiMediationServiceConfig config) throws ServiceDefinitionException, MalformedURLException;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76be3cd8bc2e9039eace4260af5c99027d2ca82b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDMxMjQ0OnYy", "diffSide": "RIGHT", "path": "onboarding-enabler-java/src/main/java/org/zowe/apiml/eurekaservice/client/util/EurekaInstanceConfigCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxNjo1M1rOGe9DNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxNjo1M1rOGe9DNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMDcwOA==", "bodyText": "I would catch the Exception here and then throw a RuntimeException as the failure should never happen here", "url": "https://github.com/zowe/api-layer/pull/687#discussion_r435110708", "createdAt": "2020-06-04T09:16:53Z", "author": {"login": "balhar-jakub"}, "path": "onboarding-enabler-java/src/main/java/org/zowe/apiml/eurekaservice/client/util/EurekaInstanceConfigCreator.java", "diffHunk": "@@ -27,21 +27,14 @@\n \n public class EurekaInstanceConfigCreator {\n \n-    public EurekaInstanceConfig createEurekaInstanceConfig(ApiMediationServiceConfig config) throws ServiceDefinitionException {\n+    public EurekaInstanceConfig createEurekaInstanceConfig(ApiMediationServiceConfig config) throws ServiceDefinitionException, MalformedURLException {\n+        EurekaInstanceConfigValidator eurekaInstanceConfigValidator = new EurekaInstanceConfigValidator();\n+        eurekaInstanceConfigValidator.validate(config);\n         ApimlEurekaInstanceConfig result = new ApimlEurekaInstanceConfig();\n \n-        String hostname;\n-        int port;\n-        URL baseUrl;\n-\n-        try {\n-            baseUrl = new URL(config.getBaseUrl());\n-            hostname = baseUrl.getHost();\n-            port = baseUrl.getPort();\n-        } catch (MalformedURLException e) {\n-            String message = String.format(\"baseUrl: [%s] is not valid URL\", config.getBaseUrl());\n-            throw new ServiceDefinitionException(message, e);\n-        }\n+        URL baseUrl = new URL(config.getBaseUrl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7254c0c59621f12ae68d86783e73cdd2cb6c5bee"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDMxNzg1OnYy", "diffSide": "RIGHT", "path": "onboarding-enabler-java/src/main/java/org/zowe/apiml/eurekaservice/client/util/EurekaInstanceConfigValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxODoyNFrOGe9G1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxODoyNFrOGe9G1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMTYzOQ==", "bodyText": "What about extracting it to something like:\nprivate boolean isInvalid(String value) {\nreturn value == null || value.isEmpty() || value.contains(\"{apiml.\")\n}\nThis way you could use it for verification of all the properties", "url": "https://github.com/zowe/api-layer/pull/687#discussion_r435111639", "createdAt": "2020-06-04T09:18:24Z", "author": {"login": "balhar-jakub"}, "path": "onboarding-enabler-java/src/main/java/org/zowe/apiml/eurekaservice/client/util/EurekaInstanceConfigValidator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+package org.zowe.apiml.eurekaservice.client.util;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.zowe.apiml.eurekaservice.client.config.ApiMediationServiceConfig;\n+import org.zowe.apiml.eurekaservice.client.config.Route;\n+import org.zowe.apiml.eurekaservice.client.config.Ssl;\n+import org.zowe.apiml.exception.MetadataValidationException;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.List;\n+\n+/**\n+ * Class that validates a service configuration before the registration with API ML\n+ */\n+@Slf4j\n+public class EurekaInstanceConfigValidator {\n+\n+    /**\n+     * Validation method that validates mandatory and non-mandatory parameters\n+     * @param config\n+     * @throws MetadataValidationException if the validation fails\n+     */\n+    public void validate(ApiMediationServiceConfig config) {\n+        URL baseUrl;\n+        validateRoutes(config.getRoutes());\n+\n+        validateSsl(config.getSsl());\n+\n+        try {\n+            baseUrl = new URL(config.getBaseUrl());\n+            baseUrl.getHost();\n+            baseUrl.getPort();\n+        } catch (MalformedURLException e) {\n+            String message = String.format(\"baseUrl: [%s] is not valid URL\", config.getBaseUrl());\n+            throw new MetadataValidationException(message, e);\n+        }\n+\n+        String protocol = baseUrl.getProtocol();\n+        if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) {\n+            throw new MetadataValidationException(String.format(\"'%s' is not valid protocol for baseUrl property\", protocol));\n+        }\n+        if (config.getCatalog() == null) {\n+            log.warn(\"The API Catalog UI tile configuration is not provided. Try to add apiml.service.catalog.tile section.\");\n+        }\n+\n+        if (config.getHomePageRelativeUrl() == null || config.getHomePageRelativeUrl().isEmpty() || config.getHomePageRelativeUrl().contains(\"${apiml.\")) {\n+            log.warn(\"The home page URL is not provided. Try to add apiml.service.homePageRelativeUrl property or check its value.\");\n+        }\n+\n+        if (config.getApiInfo() == null || config.getApiInfo().isEmpty()) {\n+            log.warn(\"The API info configuration is not provided. Try to add apiml.service.apiInfo section.\");\n+        }\n+    }\n+\n+    private void validateRoutes(List<Route> routes) {\n+        if (routes == null || routes.isEmpty()) {\n+            throw new MetadataValidationException(\"Routes configuration was not provided. Try to add apiml.service.routes section.\");\n+        }\n+        routes.forEach(route -> {\n+            if (route.getGatewayUrl() == null ||\n+                route.getGatewayUrl().isEmpty() ||\n+                route.getGatewayUrl().contains(\"{apiml.\") ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7254c0c59621f12ae68d86783e73cdd2cb6c5bee"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 506, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}