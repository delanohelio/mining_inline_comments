{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MzU0Mzc5", "number": 11319, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzowMTo0OFrODvOMvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxNDoyMVrODwOuXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQyMzAyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/metrics/metric_test.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzowMTo0OFrOGBhVnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxNTowMFrOGBkEjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0Nzk2NQ==", "bodyText": "not all runners support attempted metrics, please only compare against committed metrics for now", "url": "https://github.com/apache/beam/pull/11319#discussion_r404247965", "createdAt": "2020-04-06T17:01:48Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,6 +169,17 @@ def process(self, element):\n         outputs_counter.key.metric.name, 'metrics_user_counter_element')\n     self.assertEqual(outputs_counter.committed, 4)\n \n+    # Verify user distribution counter.\n+    metric_results = res.metrics().query()\n+    namespace = 'apache_beam.metrics.metric_test.SomeDoFn'\n+    hc.assert_that(\n+        metric_results['distributions'],\n+        hc.contains_inanyorder(\n+            MetricResult(\n+                MetricKey('ApplyPardo', MetricName(namespace, 'element_dist')),\n+                DistributionResult(DistributionData(10, 4, 1, 4)),\n+                DistributionResult(DistributionData(10, 4, 1, 4)))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f81493eeda0fccfe00fc002724b4be10349ff92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NzEwMw==", "bodyText": "I see. Thanks for the information!\nI checked MetricResult interface, it only works when passed in both 'commited' and 'attempted'.\nI will take a look what alternative we need to do.  If you by any chance are aware of a particular API I should use, please let me know.", "url": "https://github.com/apache/beam/pull/11319#discussion_r404257103", "createdAt": "2020-04-06T17:16:25Z", "author": {"login": "HuangLED"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,6 +169,17 @@ def process(self, element):\n         outputs_counter.key.metric.name, 'metrics_user_counter_element')\n     self.assertEqual(outputs_counter.committed, 4)\n \n+    # Verify user distribution counter.\n+    metric_results = res.metrics().query()\n+    namespace = 'apache_beam.metrics.metric_test.SomeDoFn'\n+    hc.assert_that(\n+        metric_results['distributions'],\n+        hc.contains_inanyorder(\n+            MetricResult(\n+                MetricKey('ApplyPardo', MetricName(namespace, 'element_dist')),\n+                DistributionResult(DistributionData(10, 4, 1, 4)),\n+                DistributionResult(DistributionData(10, 4, 1, 4)))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0Nzk2NQ=="}, "originalCommit": {"oid": "4f81493eeda0fccfe00fc002724b4be10349ff92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4ODk1NQ==", "bodyText": "Write your own matcher and/or use any that already exist.", "url": "https://github.com/apache/beam/pull/11319#discussion_r404288955", "createdAt": "2020-04-06T18:08:33Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,6 +169,17 @@ def process(self, element):\n         outputs_counter.key.metric.name, 'metrics_user_counter_element')\n     self.assertEqual(outputs_counter.committed, 4)\n \n+    # Verify user distribution counter.\n+    metric_results = res.metrics().query()\n+    namespace = 'apache_beam.metrics.metric_test.SomeDoFn'\n+    hc.assert_that(\n+        metric_results['distributions'],\n+        hc.contains_inanyorder(\n+            MetricResult(\n+                MetricKey('ApplyPardo', MetricName(namespace, 'element_dist')),\n+                DistributionResult(DistributionData(10, 4, 1, 4)),\n+                DistributionResult(DistributionData(10, 4, 1, 4)))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0Nzk2NQ=="}, "originalCommit": {"oid": "4f81493eeda0fccfe00fc002724b4be10349ff92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5Mjc1MQ==", "bodyText": "Sure.\nDone update.\nPlease take a look if it makes sense.", "url": "https://github.com/apache/beam/pull/11319#discussion_r404292751", "createdAt": "2020-04-06T18:15:00Z", "author": {"login": "HuangLED"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,6 +169,17 @@ def process(self, element):\n         outputs_counter.key.metric.name, 'metrics_user_counter_element')\n     self.assertEqual(outputs_counter.committed, 4)\n \n+    # Verify user distribution counter.\n+    metric_results = res.metrics().query()\n+    namespace = 'apache_beam.metrics.metric_test.SomeDoFn'\n+    hc.assert_that(\n+        metric_results['distributions'],\n+        hc.contains_inanyorder(\n+            MetricResult(\n+                MetricKey('ApplyPardo', MetricName(namespace, 'element_dist')),\n+                DistributionResult(DistributionData(10, 4, 1, 4)),\n+                DistributionResult(DistributionData(10, 4, 1, 4)))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0Nzk2NQ=="}, "originalCommit": {"oid": "4f81493eeda0fccfe00fc002724b4be10349ff92"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk5NDg3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/metrics/execution.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxNDoyMVrOGDHPhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDowNjoyMFrOGDI4eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNzU3Mw==", "bodyText": "This is not what I meant when I suggested a matcher, see https://github.com/hamcrest/PyHamcrest#writing-custom-matchers for an example.", "url": "https://github.com/apache/beam/pull/11319#discussion_r405917573", "createdAt": "2020-04-09T02:14:21Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/metrics/execution.py", "diffHunk": "@@ -106,11 +107,13 @@ def __init__(self, key, committed, attempted):\n     self.key = key\n     self.committed = committed\n     self.attempted = attempted\n+    self.committed_only = committed_only\n \n   def __eq__(self, other):\n     return (\n         self.key == other.key and self.committed == other.committed and\n-        self.attempted == other.attempted)\n+        (self.committed_only or other.committed_only or\n+         self.attempted == other.attempted))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68b39e9869687e7f46045915710a60d231859650"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0NDQ0Mg==", "bodyText": "By searching for MatcherBase, found an existing implementation under testing folder.\nUpdated.   PTAL.", "url": "https://github.com/apache/beam/pull/11319#discussion_r405944442", "createdAt": "2020-04-09T04:06:20Z", "author": {"login": "HuangLED"}, "path": "sdks/python/apache_beam/metrics/execution.py", "diffHunk": "@@ -106,11 +107,13 @@ def __init__(self, key, committed, attempted):\n     self.key = key\n     self.committed = committed\n     self.attempted = attempted\n+    self.committed_only = committed_only\n \n   def __eq__(self, other):\n     return (\n         self.key == other.key and self.committed == other.committed and\n-        self.attempted == other.attempted)\n+        (self.committed_only or other.committed_only or\n+         self.attempted == other.attempted))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNzU3Mw=="}, "originalCommit": {"oid": "68b39e9869687e7f46045915710a60d231859650"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1382, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}