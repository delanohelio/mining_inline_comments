{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MzI5MTg3", "number": 11532, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTo1ODozOFrOD4eBCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTo0ODoyN1rOD93DsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTM4NjM0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOTo1ODozOFrOGPUIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDowMjo0MFrOGXwkAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMTcyOQ==", "bodyText": "I was wondering if this condition needs to be based on the input passed to this stage or based on some parameter from the user?", "url": "https://github.com/apache/beam/pull/11532#discussion_r418711729", "createdAt": "2020-05-01T19:58:38Z", "author": {"login": "allenpradeep"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1066,7 +1079,12 @@ public SpannerWriteResult expand(PCollection<MutationGroup> input) {\n                               spec.getBatchSizeBytes(),\n                               spec.getMaxNumMutations(),\n                               spec.getMaxNumRows(),\n-                              spec.getGroupingFactor(),\n+                              // Do not group on streaming unless explicitly set.\n+                              spec.getGroupingFactor()\n+                                  .orElse(\n+                                      input.isBounded() == IsBounded.BOUNDED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573bfb936940dea91709cdc656c36f41a4715866"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyOTgxNw==", "bodyText": "it's kinda both!\nIf the source is unbounded (streaming) -  and the groupingFactor has not been specified by the user, then default to no grouping.", "url": "https://github.com/apache/beam/pull/11532#discussion_r426929817", "createdAt": "2020-05-18T22:38:38Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1066,7 +1079,12 @@ public SpannerWriteResult expand(PCollection<MutationGroup> input) {\n                               spec.getBatchSizeBytes(),\n                               spec.getMaxNumMutations(),\n                               spec.getMaxNumRows(),\n-                              spec.getGroupingFactor(),\n+                              // Do not group on streaming unless explicitly set.\n+                              spec.getGroupingFactor()\n+                                  .orElse(\n+                                      input.isBounded() == IsBounded.BOUNDED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMTcyOQ=="}, "originalCommit": {"oid": "573bfb936940dea91709cdc656c36f41a4715866"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMTU0OA==", "bodyText": "Is there any chance that someone using SpannerIO in a streaming pipeline is relying on the default grouping factor being 1000? I'm concerned this backwards-incompatible change could break them. Would it be sufficient to just give users the option to disable batching by setting the grouping factor to 1?", "url": "https://github.com/apache/beam/pull/11532#discussion_r427421548", "createdAt": "2020-05-19T16:06:51Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1066,7 +1079,12 @@ public SpannerWriteResult expand(PCollection<MutationGroup> input) {\n                               spec.getBatchSizeBytes(),\n                               spec.getMaxNumMutations(),\n                               spec.getMaxNumRows(),\n-                              spec.getGroupingFactor(),\n+                              // Do not group on streaming unless explicitly set.\n+                              spec.getGroupingFactor()\n+                                  .orElse(\n+                                      input.isBounded() == IsBounded.BOUNDED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMTcyOQ=="}, "originalCommit": {"oid": "573bfb936940dea91709cdc656c36f41a4715866"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4NTA4MQ==", "bodyText": "They already can set groupingFactorb to 1 if they want...\nBreaking backward compatibility: unlikely.\nThe default of 1000 causes OOMs when using streaming, with wide windows, and high throughput... When this happens, it is not always obvious that grouping is the issue...\nWith smaller windows/less throughput, it is much less likely that a group will be filled, (groups are bounded by bundles, which are bounded by windows)., So it is unlikely that anyone ever got to fill the group with 1000 batches.", "url": "https://github.com/apache/beam/pull/11532#discussion_r427485081", "createdAt": "2020-05-19T17:44:14Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1066,7 +1079,12 @@ public SpannerWriteResult expand(PCollection<MutationGroup> input) {\n                               spec.getBatchSizeBytes(),\n                               spec.getMaxNumMutations(),\n                               spec.getMaxNumRows(),\n-                              spec.getGroupingFactor(),\n+                              // Do not group on streaming unless explicitly set.\n+                              spec.getGroupingFactor()\n+                                  .orElse(\n+                                      input.isBounded() == IsBounded.BOUNDED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMTcyOQ=="}, "originalCommit": {"oid": "573bfb936940dea91709cdc656c36f41a4715866"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NjA4MA==", "bodyText": "They already can set groupingFactorb to 1 if they want...\n\nHa yeah sorry that was unclear. At the time I thought that groupingFactor = 1 enabled the optimization in #11529, so I was wondering if this was really necessary since users could just enable them by setting grouping factor manually. But I see now that grouping is separate from batching. And its disabling batching that enables your other PR.", "url": "https://github.com/apache/beam/pull/11532#discussion_r427566080", "createdAt": "2020-05-19T20:02:40Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1066,7 +1079,12 @@ public SpannerWriteResult expand(PCollection<MutationGroup> input) {\n                               spec.getBatchSizeBytes(),\n                               spec.getMaxNumMutations(),\n                               spec.getMaxNumRows(),\n-                              spec.getGroupingFactor(),\n+                              // Do not group on streaming unless explicitly set.\n+                              spec.getGroupingFactor()\n+                                  .orElse(\n+                                      input.isBounded() == IsBounded.BOUNDED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMTcyOQ=="}, "originalCommit": {"oid": "573bfb936940dea91709cdc656c36f41a4715866"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTkxNzkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTo0ODoyN1rOGXm78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo0NToyOVrOGXrq7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODM2OA==", "bodyText": "It would be nice if this were another constant. We could have DEFAULT_GROUPING_FACTOR_BOUNDED and DEFAULT_GROUPING_FACTOR_UNBOUNDED. It doesn't need to be done here, could be in a follow-up PR.", "url": "https://github.com/apache/beam/pull/11532#discussion_r427408368", "createdAt": "2020-05-19T15:48:27Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1059,7 +1071,12 @@ public SpannerWriteResult expand(PCollection<MutationGroup> input) {\n                               spec.getBatchSizeBytes(),\n                               spec.getMaxNumMutations(),\n                               spec.getMaxNumRows(),\n-                              spec.getGroupingFactor(),\n+                              // Do not group on streaming unless explicitly set.\n+                              spec.getGroupingFactor()\n+                                  .orElse(\n+                                      input.isBounded() == IsBounded.BOUNDED\n+                                          ? DEFAULT_GROUPING_FACTOR\n+                                          : 1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64df6a95fb818a8eadfad9d3f2fbd4ceac32660"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4NTkzMw==", "bodyText": "Will do in a separate pr", "url": "https://github.com/apache/beam/pull/11532#discussion_r427485933", "createdAt": "2020-05-19T17:45:29Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1059,7 +1071,12 @@ public SpannerWriteResult expand(PCollection<MutationGroup> input) {\n                               spec.getBatchSizeBytes(),\n                               spec.getMaxNumMutations(),\n                               spec.getMaxNumRows(),\n-                              spec.getGroupingFactor(),\n+                              // Do not group on streaming unless explicitly set.\n+                              spec.getGroupingFactor()\n+                                  .orElse(\n+                                      input.isBounded() == IsBounded.BOUNDED\n+                                          ? DEFAULT_GROUPING_FACTOR\n+                                          : 1),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODM2OA=="}, "originalCommit": {"oid": "d64df6a95fb818a8eadfad9d3f2fbd4ceac32660"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1150, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}