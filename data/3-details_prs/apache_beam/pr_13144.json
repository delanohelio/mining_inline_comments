{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzQxOTg1", "number": 13144, "title": "[BEAM-10475] Add max buffering duration option for GroupIntoBatches transform in Python", "bodyText": "The option was added for Java in #12726\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-10-19T23:30:13Z", "url": "https://github.com/apache/beam/pull/13144", "merged": true, "mergeCommit": {"oid": "562041956efeae2a186b1d815ea6bcd7d54682ae"}, "closed": true, "closedAt": "2020-10-28T20:52:53Z", "author": {"login": "nehsyc"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU2txDgFqTUxNDI3NjM1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXD75fAFqTUxOTA3MzgyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0Mjc2MzU4", "url": "https://github.com/apache/beam/pull/13144#pullrequestreview-514276358", "createdAt": "2020-10-22T00:14:39Z", "commit": {"oid": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxNDozOVrOHmMIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMDoxODo0M1rOHmMMzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjY5OA==", "bodyText": "Pull this (and the exact same logic above and below) into common helper method.", "url": "https://github.com/apache/beam/pull/13144#discussion_r509806698", "createdAt": "2020-10-22T00:14:39Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -777,33 +795,56 @@ def process(\n         window=DoFn.WindowParam,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n         count_state=DoFn.StateParam(COUNT_STATE),\n-        expiry_timer=DoFn.TimerParam(EXPIRY_TIMER)):\n+        window_timer=DoFn.TimerParam(WINDOW_TIMER),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n       # Allowed lateness not supported in Python SDK\n       # https://beam.apache.org/documentation/programming-guide/#watermarks-and-late-data\n-      expiry_timer.set(window.end)\n+      window_timer.set(window.end)\n       element_state.add(element)\n       count_state.add(1)\n       count = count_state.read()\n+      if count == 1 and max_buffering_duration_secs is not None:\n+        # This is the first element in batch. Start counting buffering time if a\n+        # limit was set.\n+        buffering_timer.set(clock() + max_buffering_duration_secs)\n       if count >= batch_size:\n         batch = [element for element in element_state.read()]\n         key, _ = batch[0]\n         batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n+        yield key, batch_values\n         element_state.clear()\n         count_state.clear()\n+        buffering_timer.clear()\n \n-    @on_timer(EXPIRY_TIMER)\n-    def expiry(\n+    @on_timer(WINDOW_TIMER)\n+    def on_window_timer(\n         self,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n-        count_state=DoFn.StateParam(COUNT_STATE)):\n+        count_state=DoFn.StateParam(COUNT_STATE),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n+      batch = [element for element in element_state.read()]\n+      if batch:\n+        key, _ = batch[0]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzM2MQ==", "bodyText": "Was this wrong?", "url": "https://github.com/apache/beam/pull/13144#discussion_r509807361", "createdAt": "2020-10-22T00:16:50Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -1009,7 +1050,7 @@ def _process(element):\n \n   @staticmethod\n   @typehints.with_input_types(str)\n-  @typehints.with_output_types(Union[List[str], List[Tuple[str, str]]])\n+  @typehints.with_output_types(Union[List[str], Tuple[str, str]])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzYzMg==", "bodyText": "Nit: I prefer the previous formatting (as the comment applies to the whole set of elements).", "url": "https://github.com/apache/beam/pull/13144#discussion_r509807632", "createdAt": "2020-10-22T00:17:55Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/util_test.py", "diffHunk": "@@ -110,10 +117,16 @@ def test_windowed_batches(self):\n           | util.BatchElements(\n               min_batch_size=5, max_batch_size=10, clock=FakeClock())\n           | beam.Map(len))\n-      assert_that(res, equal_to([\n-          5, 5, 10, 10,  # elements in [0, 30)\n-          10, 7,         # elements in [30, 47)\n-      ]))\n+      assert_that(\n+          res,\n+          equal_to([\n+              5,\n+              5,\n+              10,\n+              10,  # elements in [0, 30)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzgyMQ==", "bodyText": "_ExpandValuesIterable?\nThis could also be FlatMapTuple(lambda k, vs: vs)", "url": "https://github.com/apache/beam/pull/13144#discussion_r509807821", "createdAt": "2020-10-22T00:18:43Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/util_test.py", "diffHunk": "@@ -644,6 +657,12 @@ def _create_test_data():\n       data.append((\"key\", scientists[index]))\n     return data\n \n+  class _ExpandIterable(DoFn):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16c1e1e2b89de6e853e4d798daa49ab70ebe56d5", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/16c1e1e2b89de6e853e4d798daa49ab70ebe56d5", "committedDate": "2020-10-22T04:38:42Z", "message": "extracted common logic to a helper; minor fixes"}, "afterCommit": {"oid": "062bfb2a5351e2eecf98a3e51904b6d1fa9470b8", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/062bfb2a5351e2eecf98a3e51904b6d1fa9470b8", "committedDate": "2020-10-22T04:57:35Z", "message": "extracted common logic to a helper; minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTc2NzYw", "url": "https://github.com/apache/beam/pull/13144#pullrequestreview-514176760", "createdAt": "2020-10-21T20:53:00Z", "commit": {"oid": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDo1MzowMFrOHmE4AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDo1MzowMFrOHmE4AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY4NzgwOQ==", "bodyText": "You can use parenthesis to avoid using \\ as line continuation.", "url": "https://github.com/apache/beam/pull/13144#discussion_r509687809", "createdAt": "2020-10-21T20:53:00Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -751,24 +751,42 @@ class GroupIntoBatches(PTransform):\n   GroupIntoBatches is experimental. Its use case will depend on the runner if\n   it has support of States and Timers.\n   \"\"\"\n-  def __init__(self, batch_size):\n+  def __init__(\n+      self, batch_size, max_buffering_duration_secs=None, clock=time.time):\n     \"\"\"Create a new GroupIntoBatches with batch size.\n \n     Arguments:\n       batch_size: (required) How many elements should be in a batch\n+      max_buffering_duration_secs: (optional) How long in seconds at most an\n+        incomplete batch of elements is allowed to be buffered in the states.\n+        The duration must be a positive second duration and should be given as\n+        an int or float.\n+      clock: (optional) an alternative to time.time (mostly for testing)\n     \"\"\"\n     self.batch_size = batch_size\n \n+    if max_buffering_duration_secs is not None:\n+      assert max_buffering_duration_secs > 0, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "062bfb2a5351e2eecf98a3e51904b6d1fa9470b8", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/062bfb2a5351e2eecf98a3e51904b6d1fa9470b8", "committedDate": "2020-10-22T04:57:35Z", "message": "extracted common logic to a helper; minor fixes"}, "afterCommit": {"oid": "858ce1df7a4ccd12a2234f3a3a4b252b0c3dd4a3", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/858ce1df7a4ccd12a2234f3a3a4b252b0c3dd4a3", "committedDate": "2020-10-22T18:03:44Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "858ce1df7a4ccd12a2234f3a3a4b252b0c3dd4a3", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/858ce1df7a4ccd12a2234f3a3a4b252b0c3dd4a3", "committedDate": "2020-10-22T18:03:44Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}, "afterCommit": {"oid": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "committedDate": "2020-10-22T18:27:41Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjA5MDc3", "url": "https://github.com/apache/beam/pull/13144#pullrequestreview-515209077", "createdAt": "2020-10-23T00:40:11Z", "commit": {"oid": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo0MDoxMVrOHm4kIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo0MzozMlrOHm4nOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNDY4OQ==", "bodyText": "None is a valid key, so this is not quite safe. Instead, you could make flush_batch an iterable, and just do return self.flush_batch() everywhere.", "url": "https://github.com/apache/beam/pull/13144#discussion_r510534689", "createdAt": "2020-10-23T00:40:11Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -777,33 +795,56 @@ def process(\n         window=DoFn.WindowParam,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n         count_state=DoFn.StateParam(COUNT_STATE),\n-        expiry_timer=DoFn.TimerParam(EXPIRY_TIMER)):\n+        window_timer=DoFn.TimerParam(WINDOW_TIMER),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n       # Allowed lateness not supported in Python SDK\n       # https://beam.apache.org/documentation/programming-guide/#watermarks-and-late-data\n-      expiry_timer.set(window.end)\n+      window_timer.set(window.end)\n       element_state.add(element)\n       count_state.add(1)\n       count = count_state.read()\n+      if count == 1 and max_buffering_duration_secs is not None:\n+        # This is the first element in batch. Start counting buffering time if a\n+        # limit was set.\n+        buffering_timer.set(clock() + max_buffering_duration_secs)\n       if count >= batch_size:\n-        batch = [element for element in element_state.read()]\n-        key, _ = batch[0]\n-        batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n-        element_state.clear()\n-        count_state.clear()\n-\n-    @on_timer(EXPIRY_TIMER)\n-    def expiry(\n+        key, batch_values = self.flush_batch(\n+            element_state, count_state, buffering_timer)\n+        if key is not None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNTQ4Mw==", "bodyText": "Specifically, here you would just return and below you would yield key, batch_values.", "url": "https://github.com/apache/beam/pull/13144#discussion_r510535483", "createdAt": "2020-10-23T00:43:32Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -777,33 +795,56 @@ def process(\n         window=DoFn.WindowParam,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n         count_state=DoFn.StateParam(COUNT_STATE),\n-        expiry_timer=DoFn.TimerParam(EXPIRY_TIMER)):\n+        window_timer=DoFn.TimerParam(WINDOW_TIMER),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n       # Allowed lateness not supported in Python SDK\n       # https://beam.apache.org/documentation/programming-guide/#watermarks-and-late-data\n-      expiry_timer.set(window.end)\n+      window_timer.set(window.end)\n       element_state.add(element)\n       count_state.add(1)\n       count = count_state.read()\n+      if count == 1 and max_buffering_duration_secs is not None:\n+        # This is the first element in batch. Start counting buffering time if a\n+        # limit was set.\n+        buffering_timer.set(clock() + max_buffering_duration_secs)\n       if count >= batch_size:\n-        batch = [element for element in element_state.read()]\n-        key, _ = batch[0]\n-        batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n-        element_state.clear()\n-        count_state.clear()\n-\n-    @on_timer(EXPIRY_TIMER)\n-    def expiry(\n+        key, batch_values = self.flush_batch(\n+            element_state, count_state, buffering_timer)\n+        if key is not None:\n+          yield key, batch_values\n+\n+    @on_timer(WINDOW_TIMER)\n+    def on_window_timer(\n         self,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n-        count_state=DoFn.StateParam(COUNT_STATE)):\n+        count_state=DoFn.StateParam(COUNT_STATE),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n+      key, batch_values = self.flush_batch(\n+          element_state, count_state, buffering_timer)\n+      if key is not None:\n+        yield key, batch_values\n+\n+    @on_timer(BUFFERING_TIMER)\n+    def on_buffering_timer(\n+        self,\n+        element_state=DoFn.StateParam(ELEMENT_STATE),\n+        count_state=DoFn.StateParam(COUNT_STATE),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n+      key, batch_values = self.flush_batch(\n+          element_state, count_state, buffering_timer)\n+      if key is not None:\n+        yield key, batch_values\n+\n+    def flush_batch(self, element_state, count_state, buffering_timer):\n       batch = [element for element in element_state.read()]\n-      if batch:\n-        key, _ = batch[0]\n-        batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n-        element_state.clear()\n-        count_state.clear()\n+      if not batch:\n+        return None, None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91"}, "originalPosition": 112}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "committedDate": "2020-10-22T18:27:41Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}, "afterCommit": {"oid": "0160603d95f6f2d20564737ee735ce3ef3800dc1", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/0160603d95f6f2d20564737ee735ce3ef3800dc1", "committedDate": "2020-10-23T04:35:32Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0160603d95f6f2d20564737ee735ce3ef3800dc1", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/0160603d95f6f2d20564737ee735ce3ef3800dc1", "committedDate": "2020-10-23T04:35:32Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}, "afterCommit": {"oid": "c37f4d1dd553f29d1c15cc93650630d1d8e93b0f", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/c37f4d1dd553f29d1c15cc93650630d1d8e93b0f", "committedDate": "2020-10-23T23:43:42Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c37f4d1dd553f29d1c15cc93650630d1d8e93b0f", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/c37f4d1dd553f29d1c15cc93650630d1d8e93b0f", "committedDate": "2020-10-23T23:43:42Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}, "afterCommit": {"oid": "65cc9727916fcfd138879b2579efe4b2d97eaef6", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/65cc9727916fcfd138879b2579efe4b2d97eaef6", "committedDate": "2020-10-27T16:38:09Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65cc9727916fcfd138879b2579efe4b2d97eaef6", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/65cc9727916fcfd138879b2579efe4b2d97eaef6", "committedDate": "2020-10-27T16:38:09Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}, "afterCommit": {"oid": "03d5362ceb1028424d396462a3660306651e756e", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/03d5362ceb1028424d396462a3660306651e756e", "committedDate": "2020-10-27T17:06:17Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "578d6f6816311d3a649608a5ec33d40d174d7e7b", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/578d6f6816311d3a649608a5ec33d40d174d7e7b", "committedDate": "2020-10-28T00:44:44Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03d5362ceb1028424d396462a3660306651e756e", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/03d5362ceb1028424d396462a3660306651e756e", "committedDate": "2020-10-27T17:06:17Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}, "afterCommit": {"oid": "578d6f6816311d3a649608a5ec33d40d174d7e7b", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/578d6f6816311d3a649608a5ec33d40d174d7e7b", "committedDate": "2020-10-28T00:44:44Z", "message": "Add max buffering duration for GroupIntoBatches in Python SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDczODI5", "url": "https://github.com/apache/beam/pull/13144#pullrequestreview-519073829", "createdAt": "2020-10-28T20:52:38Z", "commit": {"oid": "578d6f6816311d3a649608a5ec33d40d174d7e7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2136, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}