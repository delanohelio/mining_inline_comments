{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NjE0NTA3", "number": 12839, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozMjozNVrOEyitTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozMjozNVrOEyitTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDMyOTA5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaJsonTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDozMjozNVrOHpPvAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoxNToxNFrOHpcpBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMTQ1Ng==", "bodyText": "nit: I think this and JsonRecorderEncoder can be private", "url": "https://github.com/apache/beam/pull/12839#discussion_r513011456", "createdAt": "2020-10-27T20:32:35Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaJsonTable.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.List;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.util.RowJson;\n+import org.apache.beam.sdk.util.RowJsonUtils;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+\n+public class BeamKafkaJsonTable extends BeamKafkaTable {\n+  public BeamKafkaJsonTable(Schema beamSchema, String bootstrapServers, List<String> topics) {\n+    super(beamSchema, bootstrapServers, topics);\n+  }\n+\n+  @Override\n+  public PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> getPTransformForInput() {\n+    ObjectMapper objectMapper =\n+        RowJsonUtils.newObjectMapperWith(RowJson.RowJsonDeserializer.forSchema(schema));\n+    return new BeamKafkaJsonTable.JsonRecorderDecoder(schema, objectMapper);\n+  }\n+\n+  @Override\n+  public PTransform<PCollection<Row>, PCollection<KV<byte[], byte[]>>> getPTransformForOutput() {\n+    ObjectMapper objectMapper =\n+        RowJsonUtils.newObjectMapperWith(RowJson.RowJsonSerializer.forSchema(schema));\n+    return new BeamKafkaJsonTable.JsonRecorderEncoder(objectMapper);\n+  }\n+\n+  /** A PTransform to convert {@code KV<byte[], byte[]>} to {@link Row}. */\n+  public static class JsonRecorderDecoder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8db52ad407a3cd25695b93928e7efba0c1e30d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyMjkxNw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12839#discussion_r513222917", "createdAt": "2020-10-28T07:15:14Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaJsonTable.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.List;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.util.RowJson;\n+import org.apache.beam.sdk.util.RowJsonUtils;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+\n+public class BeamKafkaJsonTable extends BeamKafkaTable {\n+  public BeamKafkaJsonTable(Schema beamSchema, String bootstrapServers, List<String> topics) {\n+    super(beamSchema, bootstrapServers, topics);\n+  }\n+\n+  @Override\n+  public PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> getPTransformForInput() {\n+    ObjectMapper objectMapper =\n+        RowJsonUtils.newObjectMapperWith(RowJson.RowJsonDeserializer.forSchema(schema));\n+    return new BeamKafkaJsonTable.JsonRecorderDecoder(schema, objectMapper);\n+  }\n+\n+  @Override\n+  public PTransform<PCollection<Row>, PCollection<KV<byte[], byte[]>>> getPTransformForOutput() {\n+    ObjectMapper objectMapper =\n+        RowJsonUtils.newObjectMapperWith(RowJson.RowJsonSerializer.forSchema(schema));\n+    return new BeamKafkaJsonTable.JsonRecorderEncoder(objectMapper);\n+  }\n+\n+  /** A PTransform to convert {@code KV<byte[], byte[]>} to {@link Row}. */\n+  public static class JsonRecorderDecoder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxMTQ1Ng=="}, "originalCommit": {"oid": "ee8db52ad407a3cd25695b93928e7efba0c1e30d"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3316, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}