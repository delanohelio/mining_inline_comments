{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDgyMDI2", "number": 13003, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToxNDo0NFrOEp6_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToxNDo0NFrOEp6_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzkzNzIzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/FieldValueTypeInformation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToxNDo0NFrOHb421A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NTozNVrOHclY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTE0MA==", "bodyText": "I hate inheritance but I have to ask: what happens with\n@SchemaCaseFormat(A)\nclass Parent {\n  ... fields ...\n}\n\n@SchemaCaseFormat(B)\nclass Child extends Parent { }\nI'm honestly not sure what should happen. I think in your case anything not overridden will get case format A. That seems right but just want to highlight it.", "url": "https://github.com/apache/beam/pull/13003#discussion_r499005140", "createdAt": "2020-10-02T19:14:44Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/FieldValueTypeInformation.java", "diffHunk": "@@ -118,6 +123,29 @@ public static FieldValueTypeInformation forField(Field field) {\n         .build();\n   }\n \n+  public static <T extends AnnotatedElement & Member> String getNameOverride(\n+      String original, T member) {\n+    SchemaFieldName fieldName = member.getAnnotation(SchemaFieldName.class);\n+    SchemaCaseFormat caseFormatAnnotation = member.getAnnotation(SchemaCaseFormat.class);\n+    SchemaCaseFormat classCaseFormatAnnotation =\n+        member.getDeclaringClass().getAnnotation(SchemaCaseFormat.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17c9d4920ec5627ffedce97679bb978a528f8d7e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMjI2Ng==", "bodyText": "Hm I didn't consider inheritance at all. I think your assessment about how this will behave is correct. I think this behavior would be fine, except in a context like this:\nclass SomethingOutOfMyControl {\n   ... fields ...\n}\n\n@SchemaCaseFormat(B)\nclass MyBeamObject extends SomethingOutOfMyControl { }\nNot sure how often something like that comes up, but maybe that's enough reason to scope the case format to the class we're inferring the schema from.", "url": "https://github.com/apache/beam/pull/13003#discussion_r499022266", "createdAt": "2020-10-02T19:55:35Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/FieldValueTypeInformation.java", "diffHunk": "@@ -118,6 +123,29 @@ public static FieldValueTypeInformation forField(Field field) {\n         .build();\n   }\n \n+  public static <T extends AnnotatedElement & Member> String getNameOverride(\n+      String original, T member) {\n+    SchemaFieldName fieldName = member.getAnnotation(SchemaFieldName.class);\n+    SchemaCaseFormat caseFormatAnnotation = member.getAnnotation(SchemaCaseFormat.class);\n+    SchemaCaseFormat classCaseFormatAnnotation =\n+        member.getDeclaringClass().getAnnotation(SchemaCaseFormat.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTE0MA=="}, "originalCommit": {"oid": "17c9d4920ec5627ffedce97679bb978a528f8d7e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNDczNw==", "bodyText": "Worst cast, the person authoring MyBeamObject has to write a bunch of trivial overrides. I'm OK with that.", "url": "https://github.com/apache/beam/pull/13003#discussion_r499734737", "createdAt": "2020-10-05T16:45:35Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/FieldValueTypeInformation.java", "diffHunk": "@@ -118,6 +123,29 @@ public static FieldValueTypeInformation forField(Field field) {\n         .build();\n   }\n \n+  public static <T extends AnnotatedElement & Member> String getNameOverride(\n+      String original, T member) {\n+    SchemaFieldName fieldName = member.getAnnotation(SchemaFieldName.class);\n+    SchemaCaseFormat caseFormatAnnotation = member.getAnnotation(SchemaCaseFormat.class);\n+    SchemaCaseFormat classCaseFormatAnnotation =\n+        member.getDeclaringClass().getAnnotation(SchemaCaseFormat.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTE0MA=="}, "originalCommit": {"oid": "17c9d4920ec5627ffedce97679bb978a528f8d7e"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3104, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}