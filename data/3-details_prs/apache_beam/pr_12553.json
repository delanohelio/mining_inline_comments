{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTUwMzE3", "number": 12553, "title": "[BEAM-9615] Add initial schema proto documentation.", "bodyText": "Add some initial documentation to the schema protos, where the fields have implemented meanings and restrictions that weren't yet documented.\nOpen for discussion.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-12T19:00:06Z", "url": "https://github.com/apache/beam/pull/12553", "merged": true, "mergeCommit": {"oid": "636bf8bf944b7e0c085480456a7a3df586255ab6"}, "closed": true, "closedAt": "2020-09-14T23:49:23Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-QJiSgH2gAyNDY2OTUwMzE3OmVjNDAxNDhkMjc4NzcwZjhlMDcyNDgwZWNiYWZiMzc5YjUxMTI3YmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI6ZpOAH2gAyNDY2OTUwMzE3OmIxYTI5MTYyNWNjYmJjYjJhMThhZDk2ODk2NGZjOGNmZWRmMDFlNGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec40148d278770f8e072480ecbafb379b51127bd", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/ec40148d278770f8e072480ecbafb379b51127bd", "committedDate": "2020-08-12T18:58:17Z", "message": "[BEAM-9615] Add initial document schema protos."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzIzMTk2", "url": "https://github.com/apache/beam/pull/12553#pullrequestreview-469723196", "createdAt": "2020-08-18T18:36:09Z", "commit": {"oid": "ec40148d278770f8e072480ecbafb379b51127bd"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODozNjowOVrOHChIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo0NjoxN1rOHChclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMTk0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // for this option.\n          \n          \n            \n              // for this option and value is ignored.", "url": "https://github.com/apache/beam/pull/12553#discussion_r472401947", "createdAt": "2020-08-18T18:36:09Z", "author": {"login": "TheNeuralBit"}, "path": "model/pipeline/src/main/proto/schema.proto", "diffHunk": "@@ -97,7 +108,11 @@ message LogicalType {\n }\n \n message Option {\n+  // REQUIRED. Identifier for the option.\n   string name = 1;\n+  // Optional type specifer for the structure of value.\n+  // If not present, assumes no additional configuration is needed\n+  // for this option.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec40148d278770f8e072480ecbafb379b51127bd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNjY2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               // OPTIONAL. The position of this field's data in the encoding.\n          \n          \n            \n               // Either no fields in a given row are have encoding position populated,\n          \n          \n            \n               // or all of them are. Used to support backwards compatibility with schema\n          \n          \n            \n               // changes.\n          \n          \n            \n               // Two schemas, one with encoding positions and one without, are equal\n          \n          \n            \n               // if the fields when sorted by encoding position would otherwise be equal.\n          \n          \n            \n               // OPTIONAL. The position of this field's data when encoded, e.g. with beam:coder:row:v1.\n          \n          \n            \n               // Either no fields in a given row are have encoding position populated,\n          \n          \n            \n               // or all of them are. Used to support backwards compatibility with schema\n          \n          \n            \n               // changes.\n          \n          \n            \n               // If no fields have encoding position populated the order of encoding is the same as the order in the Schema.\n          \n      \n    \n    \n  \n\nAdded a reference to beam:coder:row:v1 and a note about default behavior. Removed the note about equality - the way equality is implemented in Java, two schemas are only equal if they are exactly the same. There are lower levels of compatibility though, like assignable, equivalent: \n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/Schema.java\n    \n    \n        Lines 340 to 353\n      in\n      29ea00e\n    \n    \n    \n    \n\n        \n          \n           /** Returns true if two Schemas have the same fields, but possibly in different orders. */ \n        \n\n        \n          \n           public boolean equivalent(Schema other) { \n        \n\n        \n          \n             return equivalent(other, EquivalenceNullablePolicy.SAME); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           /** Returns true if this Schema can be assigned to another Schema. * */ \n        \n\n        \n          \n           public boolean assignableTo(Schema other) { \n        \n\n        \n          \n             return equivalent(other, EquivalenceNullablePolicy.WEAKEN); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           /** Returns true if this Schema can be assigned to another Schema, ignoring nullable. * */ \n        \n\n        \n          \n           public boolean assignableToIgnoreNullable(Schema other) { \n        \n\n        \n          \n             return equivalent(other, EquivalenceNullablePolicy.IGNORE); \n        \n\n        \n          \n           }", "url": "https://github.com/apache/beam/pull/12553#discussion_r472406668", "createdAt": "2020-08-18T18:45:19Z", "author": {"login": "TheNeuralBit"}, "path": "model/pipeline/src/main/proto/schema.proto", "diffHunk": "@@ -32,16 +32,27 @@ option java_package = \"org.apache.beam.model.pipeline.v1\";\n option java_outer_classname = \"SchemaApi\";\n \n message Schema {\n+  // List of fields for this schema. Two fields may not share a name.\n   repeated Field fields = 1;\n+  // REQUIRED. An RFC 4122 UUID.\n   string id = 2;\n   repeated Option options = 3;\n }\n \n message Field {\n+  // REQUIRED. Name of this field within the schema.\n   string name = 1;\n+  // OPTIONAL. Human readable description of this field, such as the query that generated it.\n   string description = 2;\n   FieldType type = 3;\n+  \n   int32 id = 4;\n+   // OPTIONAL. The position of this field's data in the encoding.\n+   // Either no fields in a given row are have encoding position populated,\n+   // or all of them are. Used to support backwards compatibility with schema\n+   // changes.\n+   // Two schemas, one with encoding positions and one without, are equal\n+   // if the fields when sorted by encoding position would otherwise be equal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec40148d278770f8e072480ecbafb379b51127bd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNzE5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Optional type specifer for the structure of value.\n          \n          \n            \n              // OPTIONAL. Type specifer for the structure of value.", "url": "https://github.com/apache/beam/pull/12553#discussion_r472407190", "createdAt": "2020-08-18T18:46:17Z", "author": {"login": "TheNeuralBit"}, "path": "model/pipeline/src/main/proto/schema.proto", "diffHunk": "@@ -97,7 +108,11 @@ message LogicalType {\n }\n \n message Option {\n+  // REQUIRED. Identifier for the option.\n   string name = 1;\n+  // Optional type specifer for the structure of value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec40148d278770f8e072480ecbafb379b51127bd"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1a291625ccbbcb2a18ad968964fc8cfedf01e4d", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/b1a291625ccbbcb2a18ad968964fc8cfedf01e4d", "committedDate": "2020-09-14T21:51:08Z", "message": "Apply suggestions from code review\r\n\r\nTheNeuralBit's documentation suggestions\n\nCo-authored-by: Brian Hulette <hulettbh@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3479, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}