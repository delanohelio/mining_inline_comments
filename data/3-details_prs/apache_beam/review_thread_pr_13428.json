{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTUzMjEy", "number": 13428, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1NDowMlrOE-xWHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTozNzo1MFrOFDinZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjU1NjQ3OnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1NDowMlrOH8G0ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo1MDo0MFrOH8wfiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4ODMyNA==", "bodyText": "This won't be in 2.26.0 as that release branch has already been cut, it will likely be in 2.27.0", "url": "https://github.com/apache/beam/pull/13428#discussion_r532788324", "createdAt": "2020-11-30T17:54:02Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -96,6 +96,7 @@\n * Added support for avro payload format in Beam SQL Pubsub Table ([BEAM-5504](https://issues.apache.org/jira/browse/BEAM-5504))\n * Added option to disable unnecessary copying between operators in Flink Runner (Java) ([BEAM-11146](https://issues.apache.org/jira/browse/BEAM-11146))\n * Added CombineFn.setup and CombineFn.teardown to Python SDK. These methods let you initialize the CombineFn's state before any of the other methods of the CombineFn is executed and clean that state up later on. If you are using Dataflow, you need to enable Dataflow Runner V2 by passing `--experiments=use_runner_v2` before using this feature. ([BEAM-3736](https://issues.apache.org/jira/browse/BEAM-3736))\n+* Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62873a6bc486d6c90d6f254b7872d9ea506a41c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MTExNQ==", "bodyText": "ok, I moved it to 2.27.0", "url": "https://github.com/apache/beam/pull/13428#discussion_r533471115", "createdAt": "2020-12-01T14:50:40Z", "author": {"login": "ccciudatu"}, "path": "CHANGES.md", "diffHunk": "@@ -96,6 +96,7 @@\n * Added support for avro payload format in Beam SQL Pubsub Table ([BEAM-5504](https://issues.apache.org/jira/browse/BEAM-5504))\n * Added option to disable unnecessary copying between operators in Flink Runner (Java) ([BEAM-11146](https://issues.apache.org/jira/browse/BEAM-11146))\n * Added CombineFn.setup and CombineFn.teardown to Python SDK. These methods let you initialize the CombineFn's state before any of the other methods of the CombineFn is executed and clean that state up later on. If you are using Dataflow, you need to enable Dataflow Runner V2 by passing `--experiments=use_runner_v2` before using this feature. ([BEAM-3736](https://issues.apache.org/jira/browse/BEAM-3736))\n+* Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4ODMyNA=="}, "originalCommit": {"oid": "b62873a6bc486d6c90d6f254b7872d9ea506a41c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU4Mjg4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowNDoxNFrOICrl6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozMjo0M1rOIDVDLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjI4Mw==", "bodyText": "It irks me a little bit that this is in an io/thrift module, while the protobuf SchemaProvider is in an extensions/protobuf. With your ThriftCoder change this module is looking a lot like the protobuf one.\nBut whether we call it an IO module or an extension makes little practical difference... I think you're doing the right thing by just expanding the existing io/thrift module.", "url": "https://github.com/apache/beam/pull/13428#discussion_r539682283", "createdAt": "2020-12-09T22:04:14Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.schemas.FieldValueGetter;\n+import org.apache.beam.sdk.schemas.FieldValueTypeInformation;\n+import org.apache.beam.sdk.schemas.GetterBasedSchemaProvider;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Builder;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.SchemaUserTypeCreator;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TEnum;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.meta_data.EnumMetaData;\n+import org.apache.thrift.meta_data.FieldMetaData;\n+import org.apache.thrift.meta_data.FieldValueMetaData;\n+import org.apache.thrift.meta_data.ListMetaData;\n+import org.apache.thrift.meta_data.MapMetaData;\n+import org.apache.thrift.meta_data.SetMetaData;\n+import org.apache.thrift.meta_data.StructMetaData;\n+import org.apache.thrift.protocol.TType;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+@Experimental(Experimental.Kind.SCHEMAS)\n+public final class ThriftSchema extends GetterBasedSchemaProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MTUxOA==", "bodyText": "I agree, I noticed this but thought my patch does not deserve a structural change or a dedicated module.", "url": "https://github.com/apache/beam/pull/13428#discussion_r540361518", "createdAt": "2020-12-10T17:32:43Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.schemas.FieldValueGetter;\n+import org.apache.beam.sdk.schemas.FieldValueTypeInformation;\n+import org.apache.beam.sdk.schemas.GetterBasedSchemaProvider;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Builder;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.SchemaUserTypeCreator;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TEnum;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.meta_data.EnumMetaData;\n+import org.apache.thrift.meta_data.FieldMetaData;\n+import org.apache.thrift.meta_data.FieldValueMetaData;\n+import org.apache.thrift.meta_data.ListMetaData;\n+import org.apache.thrift.meta_data.MapMetaData;\n+import org.apache.thrift.meta_data.SetMetaData;\n+import org.apache.thrift.meta_data.StructMetaData;\n+import org.apache.thrift.protocol.TType;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+@Experimental(Experimental.Kind.SCHEMAS)\n+public final class ThriftSchema extends GetterBasedSchemaProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjI4Mw=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU5NjU3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/TestThriftEnum.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowNzo0MFrOICrtkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo0ODozMFrOIDKFcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4NDI0Mw==", "bodyText": "You can exclude this class by adding it to the generatedClassPatterns in build.gradle, like how its done in for protobuf: \n  \n    \n      beam/sdks/java/extensions/protobuf/build.gradle\n    \n    \n        Lines 20 to 26\n      in\n      c5d5b9a\n    \n    \n    \n    \n\n        \n          \n           applyJavaNature( \n        \n\n        \n          \n             generatedClassPatterns: [ \n        \n\n        \n          \n               /^org\\.apache\\.beam\\.sdk\\.extensions\\.protobuf\\.Proto2CoderTestMessages/, \n        \n\n        \n          \n               /^org\\.apache\\.beam\\.sdk\\.extensions\\.protobuf\\.Proto2SchemaMessages/, \n        \n\n        \n          \n               /^org\\.apache\\.beam\\.sdk\\.extensions\\.protobuf\\.Proto3SchemaMessages/, \n        \n\n        \n          \n               /^org\\.apache\\.beam\\.sdk\\.extensions\\.protobuf\\.Proto3SchemaOptions/, \n        \n\n        \n          \n             ], \n        \n    \n  \n\n\n(Same for the other generated classes)", "url": "https://github.com/apache/beam/pull/13428#discussion_r539684243", "createdAt": "2020-12-09T22:07:40Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/TestThriftEnum.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4MTg3Mw==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/13428#discussion_r540181873", "createdAt": "2020-12-10T13:48:30Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/TestThriftEnum.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4NDI0Mw=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODYyNzkxOnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoxNjowOFrOICr_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoxNDozNVrOIDUQ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODgxMw==", "bodyText": "It could be nice if this linked to the (future) javadoc for ThriftSchema. The javadoc doesn't exist now, but it will once this file is turned into release notes and a blog post.", "url": "https://github.com/apache/beam/pull/13428#discussion_r539688813", "createdAt": "2020-12-09T22:16:08Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -63,6 +63,7 @@\n * Beam modules that depend on Hadoop are now tested for compatibility with Hadoop 3 ([BEAM-8569](https://issues.apache.org/jira/browse/BEAM-8569)). (Hive/HCatalog pending)\n * Publishing Java 11 SDK container images now supported as part of Apache Beam release process. ([BEAM-8106](https://issues.apache.org/jira/browse/BEAM-8106))\n * Added Cloud Bigtable Provider extension to Beam SQL ([BEAM-11173](https://issues.apache.org/jira/browse/BEAM-11173), [BEAM-11373](https://issues.apache.org/jira/browse/BEAM-11373))\n+* Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5OTAxOA==", "bodyText": "I added comprehensive javadoc for ThriftSchema, so the future is almost here :). Please have a look and let me know if I covered everything.\nBy linking to the future javadoc, you mean pointing to this URL: https://beam.apache.org/releases/javadoc/2.27.0/org/apache/beam/sdk/io/thrift/ThriftSchema.html ?\nEverything else in the CHANGES.md file seems to point to Jira, but I'm fine either way.", "url": "https://github.com/apache/beam/pull/13428#discussion_r540199018", "createdAt": "2020-12-10T14:11:35Z", "author": {"login": "ccciudatu"}, "path": "CHANGES.md", "diffHunk": "@@ -63,6 +63,7 @@\n * Beam modules that depend on Hadoop are now tested for compatibility with Hadoop 3 ([BEAM-8569](https://issues.apache.org/jira/browse/BEAM-8569)). (Hive/HCatalog pending)\n * Publishing Java 11 SDK container images now supported as part of Apache Beam release process. ([BEAM-8106](https://issues.apache.org/jira/browse/BEAM-8106))\n * Added Cloud Bigtable Provider extension to Beam SQL ([BEAM-11173](https://issues.apache.org/jira/browse/BEAM-11173), [BEAM-11373](https://issues.apache.org/jira/browse/BEAM-11373))\n+* Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODgxMw=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxODg1OA==", "bodyText": "Yeah you're right we don't do that for anything else, this is fine.\nThe javadoc looks great! My only nit: All the bullet points should be capitalized and have periods", "url": "https://github.com/apache/beam/pull/13428#discussion_r540318858", "createdAt": "2020-12-10T16:37:06Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -63,6 +63,7 @@\n * Beam modules that depend on Hadoop are now tested for compatibility with Hadoop 3 ([BEAM-8569](https://issues.apache.org/jira/browse/BEAM-8569)). (Hive/HCatalog pending)\n * Publishing Java 11 SDK container images now supported as part of Apache Beam release process. ([BEAM-8106](https://issues.apache.org/jira/browse/BEAM-8106))\n * Added Cloud Bigtable Provider extension to Beam SQL ([BEAM-11173](https://issues.apache.org/jira/browse/BEAM-11173), [BEAM-11373](https://issues.apache.org/jira/browse/BEAM-11373))\n+* Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODgxMw=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0ODYyNA==", "bodyText": "Thanks, done.", "url": "https://github.com/apache/beam/pull/13428#discussion_r540348624", "createdAt": "2020-12-10T17:14:35Z", "author": {"login": "ccciudatu"}, "path": "CHANGES.md", "diffHunk": "@@ -63,6 +63,7 @@\n * Beam modules that depend on Hadoop are now tested for compatibility with Hadoop 3 ([BEAM-8569](https://issues.apache.org/jira/browse/BEAM-8569)). (Hive/HCatalog pending)\n * Publishing Java 11 SDK container images now supported as part of Apache Beam release process. ([BEAM-8106](https://issues.apache.org/jira/browse/BEAM-8106))\n * Added Cloud Bigtable Provider extension to Beam SQL ([BEAM-11173](https://issues.apache.org/jira/browse/BEAM-11173), [BEAM-11373](https://issues.apache.org/jira/browse/BEAM-11373))\n+* Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODgxMw=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODYzNTc5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftSchemaTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoxODoxM1rOICsD9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyMzoyNVrOIDUpug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTk3Mg==", "bodyText": "Could you try to address the nullness errors? We're working on removing all these class-level suppressions.\nIf it's too much trouble this is fine for now, at least the implementation is not suppressed.", "url": "https://github.com/apache/beam/pull/13428#discussion_r539689972", "createdAt": "2020-12-09T22:18:13Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftSchemaTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Field;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.Schema.TypeName;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.schemas.transforms.Group;\n+import org.apache.beam.sdk.schemas.transforms.Select;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.Distinct;\n+import org.apache.beam.sdk.transforms.FlatMapElements;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.Sum;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4Njg5OA==", "bodyText": "I removed the class-level suppression, but had to keep this at the method level for half of of the tests. Is this acceptable?\nOne funny thing is that assertNotNull() expects the argument to be @NonNull already.", "url": "https://github.com/apache/beam/pull/13428#discussion_r540186898", "createdAt": "2020-12-10T13:55:09Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftSchemaTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Field;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.Schema.TypeName;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.schemas.transforms.Group;\n+import org.apache.beam.sdk.schemas.transforms.Select;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.Distinct;\n+import org.apache.beam.sdk.transforms.FlatMapElements;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.Sum;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTk3Mg=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNDAzNQ==", "bodyText": "Oh yes I ran into this as well but forgot about it. I just filed BEAM-11436 to track this problem, could you please link that in the TODO? It's fine if you just do it at the class level, sorry for the churn.", "url": "https://github.com/apache/beam/pull/13428#discussion_r540314035", "createdAt": "2020-12-10T16:31:43Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftSchemaTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Field;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.Schema.TypeName;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.schemas.transforms.Group;\n+import org.apache.beam.sdk.schemas.transforms.Select;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.Distinct;\n+import org.apache.beam.sdk.transforms.FlatMapElements;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.Sum;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTk3Mg=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NTAwMg==", "bodyText": "Sure, I'll revert and point to the new Jira.\nMeanwhile, I found another annoying restriction of the checker:\nif (value == null) {\n    setSomething(null); // not allowed\n    setSomething(value); // allowed\n}\n\nAnd the compiler warns about value being always null here.", "url": "https://github.com/apache/beam/pull/13428#discussion_r540355002", "createdAt": "2020-12-10T17:23:25Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/test/java/org/apache/beam/sdk/io/thrift/ThriftSchemaTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Field;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.Schema.TypeName;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.schemas.transforms.Group;\n+import org.apache.beam.sdk.schemas.transforms.Select;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.Distinct;\n+import org.apache.beam.sdk.transforms.FlatMapElements;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.Sum;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTk3Mg=="}, "originalCommit": {"oid": "1497ec40f19a3940b27119df8ab51a975e2ee695"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjU3MTg5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTozNzo1MFrOIDPbeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTozNzo1MFrOIDPbeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2OTQzMg==", "bodyText": "This should never happen with generated code, so we don't need to bother keeping track /inferring of the actual parameter type in order to choose the proper factory method here.", "url": "https://github.com/apache/beam/pull/13428#discussion_r540269432", "createdAt": "2020-12-10T15:37:50Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.thrift;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.schemas.FieldValueGetter;\n+import org.apache.beam.sdk.schemas.FieldValueTypeInformation;\n+import org.apache.beam.sdk.schemas.GetterBasedSchemaProvider;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Builder;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.SchemaUserTypeCreator;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.schemas.logicaltypes.OneOfType;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TEnum;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.TUnion;\n+import org.apache.thrift.meta_data.EnumMetaData;\n+import org.apache.thrift.meta_data.FieldMetaData;\n+import org.apache.thrift.meta_data.FieldValueMetaData;\n+import org.apache.thrift.meta_data.ListMetaData;\n+import org.apache.thrift.meta_data.MapMetaData;\n+import org.apache.thrift.meta_data.SetMetaData;\n+import org.apache.thrift.meta_data.StructMetaData;\n+import org.apache.thrift.protocol.TType;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+/**\n+ * Schema provider for generated thrift types.\n+ *\n+ * <ul>\n+ *   <li>primitive type mapping is straight-forward (e.g. {@link TType#I32} -> {@link\n+ *       FieldType#INT32})\n+ *   <li>{@link TType#STRING} gets mapped as either {@link FieldType#STRING} or {@link\n+ *       FieldType#BYTES}, depending on whether the {@link FieldValueMetaData#isBinary()} flag is\n+ *       set.\n+ *   <li>{@link TType#MAP} becomes {@link FieldType#map(FieldType, FieldType) a beam map} passing\n+ *       the key and value types recursively\n+ *   <li>{@link TType#SET} gets translated into a beam {@link FieldType#iterable(FieldType)\n+ *       iterable}, passing the corresponding element type\n+ *   <li>{@link TType#LIST} becomes an {@link FieldType#array(FieldType) array} of the corresponding\n+ *       element type\n+ *   <li>{@link TType#ENUM thrift enums} are converted into {@link EnumerationType beam enumeration\n+ *       types}\n+ *   <li>{@link TUnion thrift union} types get mapped to {@link OneOfType beam one-of} types\n+ * </ul>\n+ *\n+ * <p>The mapping logic relies on the available {@link FieldMetaData thrift metadata} introspection\n+ * and tries to make as few assumptions about the generated code as possible (i.e. does not rely on\n+ * accessor naming convention, as the thrift compiler supports options such as \"beans\" or\n+ * \"fullcamel\"/\"nocamel\".<br>\n+ * However, the following strong assumptions are made by this class:\n+ *\n+ * <ul>\n+ *   <li>all thrift generated classes implement {@link TBase}, except for enums which become {@link\n+ *       Enum java enums} implementing {@link TEnum}\n+ *   <li>all {@link TUnion} types provide static factory methods for each of the supported field\n+ *       types, with the same name as the field itself and only one such method taking a single\n+ *       parameter exists.\n+ *   <li>all non-union types have a corresponding java field with the same name for every field in\n+ *       the original thrift source file\n+ *   <li>the underlying {@link FieldMetaData#getStructMetaDataMap(Class) metadata maps} are {@link\n+ *       java.util.EnumMap enum maps}, so the natural order of the field keys is preserved\n+ * </ul>\n+ *\n+ * <p>Thrift typedefs for container types (and possibly others) do not preserve the full type\n+ * information. For this reason, this class allows for {@link #custom() manual registration} of such\n+ * \"lossy\" typedefs with their corresponding beam types.\n+ */\n+@Experimental(Experimental.Kind.SCHEMAS)\n+public final class ThriftSchema extends GetterBasedSchemaProvider {\n+  private static final ThriftSchema defaultProvider = new ThriftSchema(Collections.emptyMap());\n+\n+  private final Map<String, FieldType> typedefs;\n+\n+  private ThriftSchema(Map<String, FieldType> typedefs) {\n+    this.typedefs = typedefs;\n+  }\n+\n+  /**\n+   * Schema provider that maps any thrift type to a Beam schema, assuming that any typedefs that\n+   * might have been used in the thrift definitions will preserve all required metadata to infer the\n+   * beam type (which is the case for any primitive typedefs and alike).\n+   *\n+   * @see #custom() for how to manually pass the beam type for container typedefs\n+   */\n+  public static @NonNull SchemaProvider provider() {\n+    return defaultProvider;\n+  }\n+\n+  /**\n+   * Builds a schema provider that maps any thrift type to a Beam schema, allowing for custom thrift\n+   * typedef entries (which cannot be resolved using the available metadata) to be manually\n+   * registered with their corresponding beam types.\n+   *\n+   * <p>E.g. {@code typedef set<string> StringSet} will not carry the element type information and\n+   * needs to be manually mapped here as {@code .custom().withTypedef(\"StringSet\",\n+   * FieldType.iterable(FieldType.STRING)).provider()}.\n+   */\n+  public static @NonNull Customizer custom() {\n+    return new Customizer();\n+  }\n+\n+  public static final class Customizer {\n+    private final Map<String, FieldType> typedefs = new HashMap<>();\n+\n+    private Customizer() {}\n+\n+    public @NonNull Customizer typedef(\n+        @NonNull String thriftTypedefName, @NonNull FieldType beamType) {\n+      typedefs.put(thriftTypedefName, beamType);\n+      return this;\n+    }\n+\n+    public @NonNull SchemaProvider provider() {\n+      if (typedefs.isEmpty()) {\n+        return defaultProvider;\n+      } else {\n+        return new ThriftSchema(unmodifiableMap(new HashMap<>(typedefs)));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> @NonNull Schema schemaFor(TypeDescriptor<T> typeDescriptor) {\n+    return schemaFor(typeDescriptor.getRawType());\n+  }\n+\n+  private Schema schemaFor(Class<?> targetClass) {\n+    if (!TBase.class.isAssignableFrom(targetClass)) {\n+      throw new IllegalArgumentException(\"Expected thrift class but got: \" + targetClass);\n+    }\n+    final Stream<Schema.Field> fields =\n+        thriftFieldDescriptors(targetClass).values().stream().map(this::beamField);\n+    if (TUnion.class.isAssignableFrom(targetClass)) {\n+      return OneOfType.create(fields.collect(Collectors.toList())).getOneOfSchema();\n+    } else {\n+      return fields\n+          .reduce(Schema.builder(), Builder::addField, ThriftSchema::throwingCombiner)\n+          .build();\n+    }\n+  }\n+\n+  private static <X> X throwingCombiner(X lhs, X rhs) {\n+    throw new IllegalStateException();\n+  }\n+\n+  private Schema.Field beamField(FieldMetaData fieldDescriptor) {\n+    try {\n+      final FieldType type = beamType(fieldDescriptor.valueMetaData);\n+      return Schema.Field.nullable(fieldDescriptor.fieldName, type);\n+    } catch (Exception e) {\n+      throw new IllegalStateException(\n+          \"Could not infer beam type for thrift field: \" + fieldDescriptor.fieldName, e);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @Override\n+  public @NonNull List<FieldValueGetter> fieldValueGetters(\n+      @NonNull Class<?> targetClass, @NonNull Schema schema) {\n+    return thriftFieldDescriptors(targetClass).keySet().stream()\n+        .map(FieldExtractor::new)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public @NonNull List<FieldValueTypeInformation> fieldValueTypeInformations(\n+      @NonNull Class<?> targetClass, @NonNull Schema schema) {\n+    return thriftFieldDescriptors(targetClass).values().stream()\n+        .map(descriptor -> fieldValueTypeInfo(targetClass, descriptor.fieldName))\n+        .collect(Collectors.toList());\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static <FieldT extends Enum<FieldT> & TFieldIdEnum, T extends TBase<T, FieldT>>\n+      Map<FieldT, FieldMetaData> thriftFieldDescriptors(Class<?> targetClass) {\n+    return (Map<FieldT, FieldMetaData>) FieldMetaData.getStructMetaDataMap((Class<T>) targetClass);\n+  }\n+\n+  private FieldValueTypeInformation fieldValueTypeInfo(Class<?> type, String fieldName) {\n+    if (TUnion.class.isAssignableFrom(type)) {\n+      final List<Method> factoryMethods =\n+          Stream.of(type.getDeclaredMethods())\n+              .filter(m -> m.getName().equals(fieldName))\n+              .filter(m -> m.getModifiers() == (Modifier.PUBLIC | Modifier.STATIC))\n+              .filter(m -> m.getParameterCount() == 1)\n+              .filter(m -> m.getReturnType() == type)\n+              .collect(Collectors.toList());\n+      if (factoryMethods.isEmpty()) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"No suitable static factory method: %s.%s(...)\", type.getName(), fieldName));\n+      }\n+      if (factoryMethods.size() > 1) {\n+        throw new IllegalStateException(\"Overloaded factory methods: \" + factoryMethods);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeb61beab08eb0ce5cf96e552f0b3c26729b9290"}, "originalPosition": 227}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2664, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}