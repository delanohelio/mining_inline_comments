{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MzI0MzEx", "number": 12339, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDo0MDowNVrOEUwBiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDo0MDoxN1rOEUwBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTkzODAwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDo0MDowNVrOG7H_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDo1Njo0MFrOG7IdoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDExMQ==", "bodyText": "should we check that it's running / stopped before evicting?", "url": "https://github.com/apache/beam/pull/12339#discussion_r464650111", "createdAt": "2020-08-03T20:40:05Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -364,26 +382,37 @@ def get_background_caching_job(self, pipeline):\n     \"\"\"Gets the background caching job started from the given pipeline.\"\"\"\n     return self._background_caching_jobs.get(str(id(pipeline)), None)\n \n+  def evict_background_caching_job(self, pipeline=None):\n+    \"\"\"Evicts the background caching job started from the given pipeline. Noop\n+    if the given pipeline is absent from the environment. If no pipeline is\n+    specified, evicts for all pipelines.\"\"\"\n+    if pipeline:\n+      return self._background_caching_jobs.pop(str(id(pipeline)), None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8390afa46c8575ec88c0585215c0b81efa43937"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1NzgyNA==", "bodyText": "That should not be necessary.\nThe idea is to let cleanup clear all states and evict_* functions only do eviction for each field.\nBecause if we stop a test stream, probably, we'll also have to stop the background caching job and any other in-memory states that is related. There is rarely a case that one of the fields get evicted without clearing other fields except in some unit tests, for example:\n# In tests:\nevict_xxx()\n\n# Then in teardown, cleanup.\n\nThis also makes sure cleanup code doesn't redundantly show up in multiple places or cause infinite loop when evicting/cleanup are called by different modules.", "url": "https://github.com/apache/beam/pull/12339#discussion_r464657824", "createdAt": "2020-08-03T20:56:40Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -364,26 +382,37 @@ def get_background_caching_job(self, pipeline):\n     \"\"\"Gets the background caching job started from the given pipeline.\"\"\"\n     return self._background_caching_jobs.get(str(id(pipeline)), None)\n \n+  def evict_background_caching_job(self, pipeline=None):\n+    \"\"\"Evicts the background caching job started from the given pipeline. Noop\n+    if the given pipeline is absent from the environment. If no pipeline is\n+    specified, evicts for all pipelines.\"\"\"\n+    if pipeline:\n+      return self._background_caching_jobs.pop(str(id(pipeline)), None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDExMQ=="}, "originalCommit": {"oid": "f8390afa46c8575ec88c0585215c0b81efa43937"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTkzODU5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDo0MDoxN1rOG7H_0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDo1ODowMVrOG7IgLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDE5Mw==", "bodyText": "should we check that it's running / stopped before evicting?", "url": "https://github.com/apache/beam/pull/12339#discussion_r464650193", "createdAt": "2020-08-03T20:40:17Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -364,26 +382,37 @@ def get_background_caching_job(self, pipeline):\n     \"\"\"Gets the background caching job started from the given pipeline.\"\"\"\n     return self._background_caching_jobs.get(str(id(pipeline)), None)\n \n+  def evict_background_caching_job(self, pipeline=None):\n+    \"\"\"Evicts the background caching job started from the given pipeline. Noop\n+    if the given pipeline is absent from the environment. If no pipeline is\n+    specified, evicts for all pipelines.\"\"\"\n+    if pipeline:\n+      return self._background_caching_jobs.pop(str(id(pipeline)), None)\n+    self._background_caching_jobs.clear()\n+\n   def set_test_stream_service_controller(self, pipeline, controller):\n     \"\"\"Sets the test stream service controller that has started a gRPC server\n-    serving the test stream for any job started from the given user-defined\n+    serving the test stream for any job started from the given user defined\n     pipeline.\n     \"\"\"\n     self._test_stream_service_controllers[str(id(pipeline))] = controller\n \n   def get_test_stream_service_controller(self, pipeline):\n     \"\"\"Gets the test stream service controller that has started a gRPC server\n-    serving the test stream for any job started from the given user-defined\n+    serving the test stream for any job started from the given user defined\n     pipeline.\n     \"\"\"\n     return self._test_stream_service_controllers.get(str(id(pipeline)), None)\n \n   def evict_test_stream_service_controller(self, pipeline):\n     \"\"\"Evicts and pops the test stream service controller that has started a\n     gRPC server serving the test stream for any job started from the given\n-    user-defined pipeline.\n+    user defined pipeline. Noop if the given pipeline is absent from the\n+    environment. If no pipeline is specified, evicts for all pipelines.\n     \"\"\"\n-    return self._test_stream_service_controllers.pop(str(id(pipeline)), None)\n+    if pipeline:\n+      return self._test_stream_service_controllers.pop(str(id(pipeline)), None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8390afa46c8575ec88c0585215c0b81efa43937"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1ODQ3OQ==", "bodyText": "Ditto. Evict_* only handles popping out from internal dictionaries. Other cleanup routine should be handled by cleanup.", "url": "https://github.com/apache/beam/pull/12339#discussion_r464658479", "createdAt": "2020-08-03T20:58:01Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -364,26 +382,37 @@ def get_background_caching_job(self, pipeline):\n     \"\"\"Gets the background caching job started from the given pipeline.\"\"\"\n     return self._background_caching_jobs.get(str(id(pipeline)), None)\n \n+  def evict_background_caching_job(self, pipeline=None):\n+    \"\"\"Evicts the background caching job started from the given pipeline. Noop\n+    if the given pipeline is absent from the environment. If no pipeline is\n+    specified, evicts for all pipelines.\"\"\"\n+    if pipeline:\n+      return self._background_caching_jobs.pop(str(id(pipeline)), None)\n+    self._background_caching_jobs.clear()\n+\n   def set_test_stream_service_controller(self, pipeline, controller):\n     \"\"\"Sets the test stream service controller that has started a gRPC server\n-    serving the test stream for any job started from the given user-defined\n+    serving the test stream for any job started from the given user defined\n     pipeline.\n     \"\"\"\n     self._test_stream_service_controllers[str(id(pipeline))] = controller\n \n   def get_test_stream_service_controller(self, pipeline):\n     \"\"\"Gets the test stream service controller that has started a gRPC server\n-    serving the test stream for any job started from the given user-defined\n+    serving the test stream for any job started from the given user defined\n     pipeline.\n     \"\"\"\n     return self._test_stream_service_controllers.get(str(id(pipeline)), None)\n \n   def evict_test_stream_service_controller(self, pipeline):\n     \"\"\"Evicts and pops the test stream service controller that has started a\n     gRPC server serving the test stream for any job started from the given\n-    user-defined pipeline.\n+    user defined pipeline. Noop if the given pipeline is absent from the\n+    environment. If no pipeline is specified, evicts for all pipelines.\n     \"\"\"\n-    return self._test_stream_service_controllers.pop(str(id(pipeline)), None)\n+    if pipeline:\n+      return self._test_stream_service_controllers.pop(str(id(pipeline)), None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDE5Mw=="}, "originalCommit": {"oid": "f8390afa46c8575ec88c0585215c0b81efa43937"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 912, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}