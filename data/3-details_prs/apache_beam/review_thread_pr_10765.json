{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTQ3ODE5", "number": 10765, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0ODo1MFrODdxkfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToyOToxMVrODfq8_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTQ3NDU0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0ODo1MFrOFmkbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0ODo1MFrOFmkbMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4Njk5Mw==", "bodyText": "I had to add these classes in whitelist. Details in BEAM-8758.\nI hope they are acceptable.", "url": "https://github.com/apache/beam/pull/10765#discussion_r375986993", "createdAt": "2020-02-06T17:48:50Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java", "diffHunk": "@@ -91,6 +91,20 @@ public void testGcpApiSurface() throws Exception {\n             Matchers.<Class<?>>equalTo(com.google.cloud.ByteArray.class),\n             Matchers.<Class<?>>equalTo(com.google.cloud.Date.class),\n             Matchers.<Class<?>>equalTo(com.google.cloud.Timestamp.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Identity.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Identity.Type.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.Builder.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.Marshaller.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.DefaultMarshaller.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Role.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.StringEnumValue.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Binding.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Binding.Builder.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Policy.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Policy.Builder.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.BindingOrBuilder.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.PolicyOrBuilder.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df9bdb35dc5e7747ba712c992b1fa1873619f73"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTI1MTUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1NDozNlrOFpfpKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTowODo1NFrOFpgFCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NDM3Ng==", "bodyText": "I think this line is the cause of the API surface leak, because all the test failure error messages have\n...\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\nIs it ok to make this package private? My IntelliJ says this method is unused. But Beam users might touch the method.", "url": "https://github.com/apache/beam/pull/10765#discussion_r379054376", "createdAt": "2020-02-13T18:54:36Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -40,6 +57,59 @@\n     this.batchClient = batchClient;\n   }\n \n+  static SpannerAccessor create(SpannerConfig spannerConfig) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    ValueProvider<Duration> commitDeadline = spannerConfig.getCommitDeadline();\n+    if (commitDeadline != null && commitDeadline.get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =\n+      // builder.getSpannerStubSettingsBuilder().commitSettings();\n+      // RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder()\n+      // commitSettings.setRetrySettings(\n+      //     commitRetrySettings.setTotalTimeout(\n+      //         Duration.ofMillis(getCommitDeadlineMillis().get()))\n+      //     .build());\n+      //\n+      // However, at time of this commit, the Spanner API is at only at v1.6.0, where the only\n+      // method to set a deadline is with GRPC Interceptors, so we have to use that...\n+      SpannerInterceptorProvider interceptorProvider =\n+          SpannerInterceptorProvider.createDefault()\n+              .with(new CommitDeadlineSettingInterceptor(commitDeadline.get()));\n+      builder.setInterceptorProvider(interceptorProvider);\n+    }\n+\n+    ValueProvider<String> projectId = spannerConfig.getProjectId();\n+    if (projectId != null) {\n+      builder.setProjectId(projectId.get());\n+    }\n+    ServiceFactory<Spanner, SpannerOptions> serviceFactory = spannerConfig.getServiceFactory();\n+    if (serviceFactory != null) {\n+      builder.setServiceFactory(serviceFactory);\n+    }\n+    ValueProvider<String> host = spannerConfig.getHost();\n+    if (host != null) {\n+      builder.setHost(host.get());\n+    }\n+    String userAgentString = USER_AGENT_PREFIX + \"/\" + ReleaseInfo.getReleaseInfo().getVersion();\n+    builder.setHeaderProvider(FixedHeaderProvider.create(\"user-agent\", userAgentString));\n+    SpannerOptions options = builder.build();\n+\n+    Spanner spanner = options.getService();\n+    String instanceId = spannerConfig.getInstanceId().get();\n+    String databaseId = spannerConfig.getDatabaseId().get();\n+    DatabaseClient databaseClient =\n+        spanner.getDatabaseClient(DatabaseId.of(options.getProjectId(), instanceId, databaseId));\n+    BatchClient batchClient =\n+        spanner.getBatchClient(DatabaseId.of(options.getProjectId(), instanceId, databaseId));\n+    DatabaseAdminClient databaseAdminClient = spanner.getDatabaseAdminClient();\n+\n+    return new SpannerAccessor(spanner, databaseClient, databaseAdminClient, batchClient);\n+  }\n+\n   public DatabaseClient getDatabaseClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ff3cddea01a4f948b6dba28362c467e5b82fe8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2MTUxMg==", "bodyText": "The commit message was by Mairbek:\ncommit b99c67e9f2f5064cc6ac708fdedf2a3aeba55ae3\nDate:   Tue May 1 16:58:23 2018 -0700\n\n    Expose DatabaseAdminClient\n    \n    Change-Id: I50670b8cd6a479fcad6ff866c6adb97434ae2ed8", "url": "https://github.com/apache/beam/pull/10765#discussion_r379061512", "createdAt": "2020-02-13T19:08:54Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -40,6 +57,59 @@\n     this.batchClient = batchClient;\n   }\n \n+  static SpannerAccessor create(SpannerConfig spannerConfig) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    ValueProvider<Duration> commitDeadline = spannerConfig.getCommitDeadline();\n+    if (commitDeadline != null && commitDeadline.get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =\n+      // builder.getSpannerStubSettingsBuilder().commitSettings();\n+      // RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder()\n+      // commitSettings.setRetrySettings(\n+      //     commitRetrySettings.setTotalTimeout(\n+      //         Duration.ofMillis(getCommitDeadlineMillis().get()))\n+      //     .build());\n+      //\n+      // However, at time of this commit, the Spanner API is at only at v1.6.0, where the only\n+      // method to set a deadline is with GRPC Interceptors, so we have to use that...\n+      SpannerInterceptorProvider interceptorProvider =\n+          SpannerInterceptorProvider.createDefault()\n+              .with(new CommitDeadlineSettingInterceptor(commitDeadline.get()));\n+      builder.setInterceptorProvider(interceptorProvider);\n+    }\n+\n+    ValueProvider<String> projectId = spannerConfig.getProjectId();\n+    if (projectId != null) {\n+      builder.setProjectId(projectId.get());\n+    }\n+    ServiceFactory<Spanner, SpannerOptions> serviceFactory = spannerConfig.getServiceFactory();\n+    if (serviceFactory != null) {\n+      builder.setServiceFactory(serviceFactory);\n+    }\n+    ValueProvider<String> host = spannerConfig.getHost();\n+    if (host != null) {\n+      builder.setHost(host.get());\n+    }\n+    String userAgentString = USER_AGENT_PREFIX + \"/\" + ReleaseInfo.getReleaseInfo().getVersion();\n+    builder.setHeaderProvider(FixedHeaderProvider.create(\"user-agent\", userAgentString));\n+    SpannerOptions options = builder.build();\n+\n+    Spanner spanner = options.getService();\n+    String instanceId = spannerConfig.getInstanceId().get();\n+    String databaseId = spannerConfig.getDatabaseId().get();\n+    DatabaseClient databaseClient =\n+        spanner.getDatabaseClient(DatabaseId.of(options.getProjectId(), instanceId, databaseId));\n+    BatchClient batchClient =\n+        spanner.getBatchClient(DatabaseId.of(options.getProjectId(), instanceId, databaseId));\n+    DatabaseAdminClient databaseAdminClient = spanner.getDatabaseAdminClient();\n+\n+    return new SpannerAccessor(spanner, databaseClient, databaseAdminClient, batchClient);\n+  }\n+\n   public DatabaseClient getDatabaseClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NDM3Ng=="}, "originalCommit": {"oid": "59ff3cddea01a4f948b6dba28362c467e5b82fe8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTI1Mzk0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1NToyNVrOFpfqww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1NToyNVrOFpfqww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NDc4Nw==", "bodyText": "SpannerAccessor is public. Therefore any public methods' return values may become the source of the API surface leak.", "url": "https://github.com/apache/beam/pull/10765#discussion_r379054787", "createdAt": "2020-02-13T18:55:25Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -17,19 +17,36 @@\n  */\n package org.apache.beam.sdk.io.gcp.spanner;\n \n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.cloud.ServiceFactory;\n import com.google.cloud.spanner.BatchClient;\n import com.google.cloud.spanner.DatabaseAdminClient;\n import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.spi.v1.SpannerInterceptorProvider;\n+import io.grpc.CallOptions;\n+import io.grpc.Channel;\n+import io.grpc.ClientCall;\n+import io.grpc.ClientInterceptor;\n+import io.grpc.MethodDescriptor;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.beam.sdk.options.ValueProvider;\n+import org.apache.beam.sdk.util.ReleaseInfo;\n+import org.joda.time.Duration;\n \n /** Manages lifecycle of {@link DatabaseClient} and {@link Spanner} instances. */\n public class SpannerAccessor implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ff3cddea01a4f948b6dba28362c467e5b82fe8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTM2MTkxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToyOToxMVrOFpgvQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTo0Mzo1NFrOFphMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MjMyMA==", "bodyText": "Please file a JIRA and add a TODO for this comment linking the JIRA now that the upgrade has been done.\nYour free to pick up doing this TODO in a follow-up PR.", "url": "https://github.com/apache/beam/pull/10765#discussion_r379072320", "createdAt": "2020-02-13T19:29:11Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -40,21 +57,91 @@\n     this.batchClient = batchClient;\n   }\n \n-  public DatabaseClient getDatabaseClient() {\n+  static SpannerAccessor create(SpannerConfig spannerConfig) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    ValueProvider<Duration> commitDeadline = spannerConfig.getCommitDeadline();\n+    if (commitDeadline != null && commitDeadline.get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e12c341655f29fb028370a7ffa69bfc9f36abe"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3OTc0MQ==", "bodyText": "Added JIRA ticket in CHANGES.", "url": "https://github.com/apache/beam/pull/10765#discussion_r379079741", "createdAt": "2020-02-13T19:43:54Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -40,21 +57,91 @@\n     this.batchClient = batchClient;\n   }\n \n-  public DatabaseClient getDatabaseClient() {\n+  static SpannerAccessor create(SpannerConfig spannerConfig) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    ValueProvider<Duration> commitDeadline = spannerConfig.getCommitDeadline();\n+    if (commitDeadline != null && commitDeadline.get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MjMyMA=="}, "originalCommit": {"oid": "62e12c341655f29fb028370a7ffa69bfc9f36abe"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2154, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}