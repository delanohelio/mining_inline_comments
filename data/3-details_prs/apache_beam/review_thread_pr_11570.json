{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzgwOTg0", "number": 11570, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1NDo1MFrOD57hQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1NDo1MFrOD57hQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDcwNTk0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1NDo1MFrOGReuZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzozMzoyMlrOGXK0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MjM3Mg==", "bodyText": "Do we need to mark this as synchronized. Looks like all the callers are synchronized themselves.", "url": "https://github.com/apache/beam/pull/11570#discussion_r420982372", "createdAt": "2020-05-06T17:54:50Z", "author": {"login": "allenpradeep"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1171,67 +1145,127 @@ public void processElement(ProcessContext c) {\n    * occur, Therefore this DoFn has to be tested in isolation.\n    */\n   @VisibleForTesting\n-  static class GatherBundleAndSortFn extends DoFn<MutationGroup, Iterable<KV<byte[], byte[]>>> {\n-    private final long maxBatchSizeBytes;\n-    private final long maxNumMutations;\n-    private final long maxNumRows;\n-\n-    // total size of the current batch.\n-    private long batchSizeBytes;\n-    // total number of mutated cells.\n-    private long batchCells;\n-    // total number of rows mutated.\n-    private long batchRows;\n+  static class GatherSortCreateBatchesFn extends DoFn<MutationGroup, Iterable<MutationGroup>> {\n \n+    private final long maxBatchSizeBytes;\n+    private final long maxBatchNumMutations;\n+    private final long maxBatchNumRows;\n+    private final long maxSortableSizeBytes;\n+    private final long maxSortableNumMutations;\n+    private final long maxSortableNumRows;\n     private final PCollectionView<SpannerSchema> schemaView;\n+    private final ArrayList<MutationGroupContainer> mutationsToSort = new ArrayList<>();\n \n-    private transient ArrayList<KV<byte[], byte[]>> mutationsToSort = null;\n+    // total size of MutationGroups in mutationsToSort.\n+    private long sortableSizeBytes;\n+    // total number of mutated cells in mutationsToSort\n+    private long sortableNumCells;\n+    // total number of rows mutated in mutationsToSort\n+    private long sortableNumRows;\n \n-    GatherBundleAndSortFn(\n+    GatherSortCreateBatchesFn(\n         long maxBatchSizeBytes,\n         long maxNumMutations,\n         long maxNumRows,\n         long groupingFactor,\n         PCollectionView<SpannerSchema> schemaView) {\n-      this.maxBatchSizeBytes = maxBatchSizeBytes * groupingFactor;\n-      this.maxNumMutations = maxNumMutations * groupingFactor;\n-      this.maxNumRows = maxNumRows * groupingFactor;\n+      this.maxBatchSizeBytes = maxBatchSizeBytes;\n+      this.maxBatchNumMutations = maxNumMutations;\n+      this.maxBatchNumRows = maxNumRows;\n+\n+      if (groupingFactor <= 0) {\n+        groupingFactor = 1;\n+      }\n+\n+      this.maxSortableSizeBytes = maxBatchSizeBytes * groupingFactor;\n+      this.maxSortableNumMutations = maxNumMutations * groupingFactor;\n+      this.maxSortableNumRows = maxNumRows * groupingFactor;\n       this.schemaView = schemaView;\n     }\n \n     @StartBundle\n     public synchronized void startBundle() throws Exception {\n-      if (mutationsToSort == null) {\n-        initSorter();\n-      } else {\n-        throw new IllegalStateException(\"Sorter should be null here\");\n-      }\n+      initSorter();\n     }\n \n-    private void initSorter() {\n-      mutationsToSort = new ArrayList<KV<byte[], byte[]>>((int) maxNumMutations);\n-      batchSizeBytes = 0;\n-      batchCells = 0;\n-      batchRows = 0;\n+    private synchronized void initSorter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d22b580317d8cf0dfbb1446a27abcd353e248b"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0NzYzMA==", "bodyText": "Do we need to mark this as synchronized. Looks like all the callers are synchronized themselves.\n\nProbably not, but it does not harm.", "url": "https://github.com/apache/beam/pull/11570#discussion_r426947630", "createdAt": "2020-05-18T23:33:22Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1171,67 +1145,127 @@ public void processElement(ProcessContext c) {\n    * occur, Therefore this DoFn has to be tested in isolation.\n    */\n   @VisibleForTesting\n-  static class GatherBundleAndSortFn extends DoFn<MutationGroup, Iterable<KV<byte[], byte[]>>> {\n-    private final long maxBatchSizeBytes;\n-    private final long maxNumMutations;\n-    private final long maxNumRows;\n-\n-    // total size of the current batch.\n-    private long batchSizeBytes;\n-    // total number of mutated cells.\n-    private long batchCells;\n-    // total number of rows mutated.\n-    private long batchRows;\n+  static class GatherSortCreateBatchesFn extends DoFn<MutationGroup, Iterable<MutationGroup>> {\n \n+    private final long maxBatchSizeBytes;\n+    private final long maxBatchNumMutations;\n+    private final long maxBatchNumRows;\n+    private final long maxSortableSizeBytes;\n+    private final long maxSortableNumMutations;\n+    private final long maxSortableNumRows;\n     private final PCollectionView<SpannerSchema> schemaView;\n+    private final ArrayList<MutationGroupContainer> mutationsToSort = new ArrayList<>();\n \n-    private transient ArrayList<KV<byte[], byte[]>> mutationsToSort = null;\n+    // total size of MutationGroups in mutationsToSort.\n+    private long sortableSizeBytes;\n+    // total number of mutated cells in mutationsToSort\n+    private long sortableNumCells;\n+    // total number of rows mutated in mutationsToSort\n+    private long sortableNumRows;\n \n-    GatherBundleAndSortFn(\n+    GatherSortCreateBatchesFn(\n         long maxBatchSizeBytes,\n         long maxNumMutations,\n         long maxNumRows,\n         long groupingFactor,\n         PCollectionView<SpannerSchema> schemaView) {\n-      this.maxBatchSizeBytes = maxBatchSizeBytes * groupingFactor;\n-      this.maxNumMutations = maxNumMutations * groupingFactor;\n-      this.maxNumRows = maxNumRows * groupingFactor;\n+      this.maxBatchSizeBytes = maxBatchSizeBytes;\n+      this.maxBatchNumMutations = maxNumMutations;\n+      this.maxBatchNumRows = maxNumRows;\n+\n+      if (groupingFactor <= 0) {\n+        groupingFactor = 1;\n+      }\n+\n+      this.maxSortableSizeBytes = maxBatchSizeBytes * groupingFactor;\n+      this.maxSortableNumMutations = maxNumMutations * groupingFactor;\n+      this.maxSortableNumRows = maxNumRows * groupingFactor;\n       this.schemaView = schemaView;\n     }\n \n     @StartBundle\n     public synchronized void startBundle() throws Exception {\n-      if (mutationsToSort == null) {\n-        initSorter();\n-      } else {\n-        throw new IllegalStateException(\"Sorter should be null here\");\n-      }\n+      initSorter();\n     }\n \n-    private void initSorter() {\n-      mutationsToSort = new ArrayList<KV<byte[], byte[]>>((int) maxNumMutations);\n-      batchSizeBytes = 0;\n-      batchCells = 0;\n-      batchRows = 0;\n+    private synchronized void initSorter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MjM3Mg=="}, "originalCommit": {"oid": "87d22b580317d8cf0dfbb1446a27abcd353e248b"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1211, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}