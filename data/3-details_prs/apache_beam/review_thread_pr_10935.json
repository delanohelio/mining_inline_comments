{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTI2MTg3", "number": 10935, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxOTozMToyOFrODiGe6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxOTozNTo1M1rODiGf0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg0Mzk1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/sdf_utils.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxOTozMToyOFrOFtMiAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo1ODozN1rOFty8qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTU1NA==", "bodyText": "Our linters do not enforce alphanumeric order for modules inside the TYPE_CHECKING block, but we should still be diligent about it.  Can you move this up one, please.", "url": "https://github.com/apache/beam/pull/10935#discussion_r382935554", "createdAt": "2020-02-22T19:31:28Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -38,6 +38,8 @@\n \n if TYPE_CHECKING:\n   from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.io.iobase import RestrictionProgress", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NDk3MQ==", "bodyText": "Done. Thanks for mentioning that!", "url": "https://github.com/apache/beam/pull/10935#discussion_r383564971", "createdAt": "2020-02-24T22:58:37Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -38,6 +38,8 @@\n \n if TYPE_CHECKING:\n   from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.io.iobase import RestrictionProgress", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTU1NA=="}, "originalCommit": {"oid": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg0NjI0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/common.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxOTozNTo1M1rOFtMjKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzoyMDoyOVrOFtzbSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTg0OQ==", "bodyText": "A slight refactor here will avoid introducing a new mypy error:\n  def get_restriction_coder(self):\n    # type: () -> Optional[TupleCoder]\n    \"\"\"Get coder for a restriction when processing an SDF. \"\"\"\n    if self.is_splittable_dofn():\n      return TupleCoder([\n          (self.get_restriction_provider().restriction_coder()),\n          (self.get_watermark_estimator_provider().estimator_state_coder())\n      ])\n    else:\n      return None\nThis avoids having to declare  the restriction_coder variable as Optional[TupleCoder].", "url": "https://github.com/apache/beam/pull/10935#discussion_r382935849", "createdAt": "2020-02-22T19:35:53Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -333,6 +336,7 @@ def is_splittable_dofn(self):\n     return self.get_restriction_provider() is not None\n \n   def get_restriction_coder(self):\n+    # type: () -> Optional[TupleCoder]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NDgyNA==", "bodyText": "Done. I think the return type should still be Optional[TupleCoder] given that it also returns None.", "url": "https://github.com/apache/beam/pull/10935#discussion_r383564824", "createdAt": "2020-02-24T22:58:15Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -333,6 +336,7 @@ def is_splittable_dofn(self):\n     return self.get_restriction_provider() is not None\n \n   def get_restriction_coder(self):\n+    # type: () -> Optional[TupleCoder]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTg0OQ=="}, "originalCommit": {"oid": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MjgwOQ==", "bodyText": "correct.  my comment about avoiding the declaration of  Optional[TupleCoder] refers to the variable (which my edit does away with), not the the return type.", "url": "https://github.com/apache/beam/pull/10935#discussion_r383572809", "createdAt": "2020-02-24T23:20:29Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -333,6 +336,7 @@ def is_splittable_dofn(self):\n     return self.get_restriction_provider() is not None\n \n   def get_restriction_coder(self):\n+    # type: () -> Optional[TupleCoder]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTg0OQ=="}, "originalCommit": {"oid": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1881, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}