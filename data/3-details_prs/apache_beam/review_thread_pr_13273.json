{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzE2NTUw", "number": 13273, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoxNTozMFrOE14kwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoxNTozMFrOE14kwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTM2ODk2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/TestPubsub.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoxNTozMFrOHuaUkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDozMDo0NFrOHub23A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyNzc5Mg==", "bodyText": "Assert isn't guaranteed to run. Would something like org.apache.beam.sdk.util.Preconditions.checkArgumentNotNull be more appropriate?", "url": "https://github.com/apache/beam/pull/13273#discussion_r518427792", "createdAt": "2020-11-05T23:15:30Z", "author": {"login": "apilloud"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/TestPubsub.java", "diffHunk": "@@ -195,43 +227,46 @@ public SubscriptionPath subscriptionPath() {\n     return subscriptionPath;\n   }\n \n-  private List<SubscriptionPath> listSubscriptions(ProjectPath projectPath, TopicPath topicPath)\n-      throws IOException {\n-    return pubsub.listSubscriptions(projectPath, topicPath).stream()\n-        .filter((path) -> !path.equals(subscriptionPath))\n-        .collect(ImmutableList.toImmutableList());\n+  private Iterable<String> listSubscriptions(TopicPath topicPath) {\n+    assert topicAdmin != null;\n+    return topicAdmin.listTopicSubscriptions(topicPath.getPath()).iterateAll();\n   }\n \n   /** Publish messages to {@link #topicPath()}. */\n-  public void publish(List<PubsubMessage> messages) throws IOException {\n-    List<PubsubClient.OutgoingMessage> outgoingMessages =\n-        messages.stream().map(this::toOutgoingMessage).collect(toList());\n-    pubsub.publish(eventsTopicPath, outgoingMessages);\n-  }\n+  public void publish(List<PubsubMessage> messages) {\n+    assert eventsTopicPath != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4378767d90cf580d39c8cee345bf635b31131e"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1Mjk1Ng==", "bodyText": "Good point, done", "url": "https://github.com/apache/beam/pull/13273#discussion_r518452956", "createdAt": "2020-11-06T00:30:44Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/TestPubsub.java", "diffHunk": "@@ -195,43 +227,46 @@ public SubscriptionPath subscriptionPath() {\n     return subscriptionPath;\n   }\n \n-  private List<SubscriptionPath> listSubscriptions(ProjectPath projectPath, TopicPath topicPath)\n-      throws IOException {\n-    return pubsub.listSubscriptions(projectPath, topicPath).stream()\n-        .filter((path) -> !path.equals(subscriptionPath))\n-        .collect(ImmutableList.toImmutableList());\n+  private Iterable<String> listSubscriptions(TopicPath topicPath) {\n+    assert topicAdmin != null;\n+    return topicAdmin.listTopicSubscriptions(topicPath.getPath()).iterateAll();\n   }\n \n   /** Publish messages to {@link #topicPath()}. */\n-  public void publish(List<PubsubMessage> messages) throws IOException {\n-    List<PubsubClient.OutgoingMessage> outgoingMessages =\n-        messages.stream().map(this::toOutgoingMessage).collect(toList());\n-    pubsub.publish(eventsTopicPath, outgoingMessages);\n-  }\n+  public void publish(List<PubsubMessage> messages) {\n+    assert eventsTopicPath != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyNzc5Mg=="}, "originalCommit": {"oid": "5f4378767d90cf580d39c8cee345bf635b31131e"}, "originalPosition": 171}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2718, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}