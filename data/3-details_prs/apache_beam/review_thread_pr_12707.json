{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTgxMjAy", "number": 12707, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzowMzowNVrOEd0wlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzowMzowNVrOEd0wlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzA4NTY3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/core.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzowMzowNVrOHJOBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoyNzoyN1rOHLKaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyODkzNA==", "bodyText": "optional: should this be named serialized_fn or serialized_dofn_data to match the naming in bundle_processor.py?", "url": "https://github.com/apache/beam/pull/12707#discussion_r479428934", "createdAt": "2020-08-28T17:03:05Z", "author": {"login": "yifanmai"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -1493,6 +1488,72 @@ def expand(self, pcoll):\n         pcoll.pipeline, self._do_transform, self._tags, self._main_tag)\n \n \n+class DoFnInfo(object):\n+  \"\"\"This class represents the state in the ParDoPayload's function spec,\n+  which is the actual DoFn together with some data required for invoking it.\n+  \"\"\"\n+  @staticmethod\n+  def register_stateless_dofn(urn):\n+    def wrapper(cls):\n+      StatelessDoFnInfo.REGISTERED_DOFNS[urn] = cls\n+      cls._stateless_dofn_urn = urn\n+      return cls\n+\n+    return wrapper\n+\n+  @classmethod\n+  def create(cls, fn, args, kwargs):\n+    if hasattr(fn, '_stateless_dofn_urn'):\n+      assert not args and not kwargs\n+      return StatelessDoFnInfo(fn._stateless_dofn_urn)\n+    else:\n+      return PickledDoFnInfo(cls._pickled_do_fn_info(fn, args, kwargs))\n+\n+  @staticmethod\n+  def from_runner_api(spec, unused_context):\n+    if spec.urn == python_urns.PICKLED_DOFN_INFO:\n+      return PickledDoFnInfo(spec.payload)\n+    elif spec.urn in StatelessDoFnInfo.REGISTERED_DOFNS:\n+      return StatelessDoFnInfo(spec.urn)\n+    else:\n+      raise ValueError('Unexpected DoFn type: %s' % spec.urn)\n+\n+  @staticmethod\n+  def _pickled_do_fn_info(fn, args, kwargs):\n+    # This can be cleaned up once all runners move to portability.\n+    return pickler.dumps((fn, args, kwargs, None, None))\n+\n+  def serialized_data(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ec430b7fca5cf3e0aa1077be7bcf3f592cc3f5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2Njk1Mw==", "bodyText": "Yeah, I'll rename this.", "url": "https://github.com/apache/beam/pull/12707#discussion_r481466953", "createdAt": "2020-09-01T22:27:27Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -1493,6 +1488,72 @@ def expand(self, pcoll):\n         pcoll.pipeline, self._do_transform, self._tags, self._main_tag)\n \n \n+class DoFnInfo(object):\n+  \"\"\"This class represents the state in the ParDoPayload's function spec,\n+  which is the actual DoFn together with some data required for invoking it.\n+  \"\"\"\n+  @staticmethod\n+  def register_stateless_dofn(urn):\n+    def wrapper(cls):\n+      StatelessDoFnInfo.REGISTERED_DOFNS[urn] = cls\n+      cls._stateless_dofn_urn = urn\n+      return cls\n+\n+    return wrapper\n+\n+  @classmethod\n+  def create(cls, fn, args, kwargs):\n+    if hasattr(fn, '_stateless_dofn_urn'):\n+      assert not args and not kwargs\n+      return StatelessDoFnInfo(fn._stateless_dofn_urn)\n+    else:\n+      return PickledDoFnInfo(cls._pickled_do_fn_info(fn, args, kwargs))\n+\n+  @staticmethod\n+  def from_runner_api(spec, unused_context):\n+    if spec.urn == python_urns.PICKLED_DOFN_INFO:\n+      return PickledDoFnInfo(spec.payload)\n+    elif spec.urn in StatelessDoFnInfo.REGISTERED_DOFNS:\n+      return StatelessDoFnInfo(spec.urn)\n+    else:\n+      raise ValueError('Unexpected DoFn type: %s' % spec.urn)\n+\n+  @staticmethod\n+  def _pickled_do_fn_info(fn, args, kwargs):\n+    # This can be cleaned up once all runners move to portability.\n+    return pickler.dumps((fn, args, kwargs, None, None))\n+\n+  def serialized_data(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyODkzNA=="}, "originalCommit": {"oid": "86ec430b7fca5cf3e0aa1077be7bcf3f592cc3f5"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 375, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}