{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTAzMDkx", "number": 12461, "title": "[BEAM-10633] UdfImpl hits NPE when returns a List", "bodyText": "Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-04T03:18:59Z", "url": "https://github.com/apache/beam/pull/12461", "merged": true, "mergeCommit": {"oid": "aa6e64ce80ad37f0c3ac2a51b357a9181ee1ecbd"}, "closed": true, "closedAt": "2020-08-06T18:54:47Z", "author": {"login": "amaliujia"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7sD9tAFqTQ2MTExOTY3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8UfgPgFqTQ2Mjc5MTE5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTE5Njc3", "url": "https://github.com/apache/beam/pull/12461#pullrequestreview-461119677", "createdAt": "2020-08-04T19:42:51Z", "commit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0Mjo1MVrOG7u71w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NTo1N1rOG7vB4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODE1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return typeFactory.createArrayType(collectionElementType, -1L);\n          \n          \n            \n                  return typeFactory.createArrayType(collectionElementType, UNLIMITED_ARRAY_SIZE);", "url": "https://github.com/apache/beam/pull/12461#discussion_r465288151", "createdAt": "2020-08-04T19:42:51Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.\n    *\n-   * @param rawType\n+   * @param type\n    * @return\n    */\n-  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type rawType) {\n+  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type type) {\n     // For Joda time types, return SQL type for java.util.Date.\n-    if (rawType instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) rawType)) {\n+    if (type instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(Date.class);\n-    } else if (rawType instanceof Class && ByteString.class.isAssignableFrom((Class<?>) rawType)) {\n+    } else if (type instanceof Class && ByteString.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(byte[].class);\n+    } else if (type instanceof ParameterizedType\n+        && java.util.List.class.isAssignableFrom(\n+            (Class<?>) ((ParameterizedType) type).getRawType())) {\n+      ParameterizedType parameterizedType = (ParameterizedType) type;\n+      Class<?> genericType = (Class<?>) parameterizedType.getActualTypeArguments()[0];\n+      RelDataType collectionElementType = typeFactory.createJavaType(genericType);\n+      return typeFactory.createArrayType(collectionElementType, -1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODY0Nw==", "bodyText": "We should probably update this comment to explain how/why ByteString and List are special cases.", "url": "https://github.com/apache/beam/pull/12461#discussion_r465288647", "createdAt": "2020-08-04T19:43:53Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4OTY5OQ==", "bodyText": "Nit: why are row1, sql1, etc. variable names numbered when there's only one of each?", "url": "https://github.com/apache/beam/pull/12461#discussion_r465289699", "createdAt": "2020-08-04T19:45:57Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +103,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {\n+    Schema resultType = Schema.builder().addArrayField(\"array_field\", FieldType.INT64).build();\n+\n+    Row row1 = Row.withSchema(resultType).addValue(Arrays.asList(1L)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjU5MDQ2", "url": "https://github.com/apache/beam/pull/12461#pullrequestreview-461259046", "createdAt": "2020-08-05T00:17:52Z", "commit": {"oid": "b6043a981f950242b8c144ba34bf00acbc0bcbda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxNzo1M1rOG71xZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxNzo1M1rOG71xZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw==", "bodyText": "We should separate this into two modular test cases, one with a UDF that takes an array as an argument (e.g. the length function), and one with a UDF that returns an array (e.g. array constructor, like your previous test).", "url": "https://github.com/apache/beam/pull/12461#discussion_r465400167", "createdAt": "2020-08-05T00:17:53Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +104,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6043a981f950242b8c144ba34bf00acbc0bcbda"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab1c53fa878f10b72f73e463064f651ea01cee42", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/ab1c53fa878f10b72f73e463064f651ea01cee42", "committedDate": "2020-08-05T03:26:26Z", "message": "[BEAM-10633] UdfImpl should be able to return java.util.List."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6043a981f950242b8c144ba34bf00acbc0bcbda", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/b6043a981f950242b8c144ba34bf00acbc0bcbda", "committedDate": "2020-08-04T22:02:32Z", "message": "fixup! enhance the test case to test List as arguments."}, "afterCommit": {"oid": "ab1c53fa878f10b72f73e463064f651ea01cee42", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/ab1c53fa878f10b72f73e463064f651ea01cee42", "committedDate": "2020-08-05T03:26:26Z", "message": "[BEAM-10633] UdfImpl should be able to return java.util.List."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzkxMTk1", "url": "https://github.com/apache/beam/pull/12461#pullrequestreview-462791195", "createdAt": "2020-08-06T18:54:03Z", "commit": {"oid": "ab1c53fa878f10b72f73e463064f651ea01cee42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3716, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}