{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODIwNjQx", "number": 10613, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0NjozOVrODZpZpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1NzoxM1rODZplHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE5MzAwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/options/pipeline_options.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0NjozOVrOFgJ2lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTozMzoxMFrOFhKJXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MDE4Mg==", "bodyText": "Looks like there are two spaces.", "url": "https://github.com/apache/beam/pull/10613#discussion_r369260182", "createdAt": "2020-01-21T21:46:39Z", "author": {"login": "ihji"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -288,15 +288,20 @@ def get_all_options(self,\n       _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n     result = vars(known_args)\n \n+    overrides = self._all_options.copy()\n     # Apply the overrides if any\n     for k in list(result):\n+      overrides.pop(k, None)\n       if k in self._all_options:\n         result[k] = self._all_options[k]\n       if (drop_default and\n           parser.get_default(k) == result[k] and\n           not isinstance(parser.get_default(k), ValueProvider)):\n         del result[k]\n \n+    if  overrides:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79158748de2c0a50cc986a0cb154a0d3d39635f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMzU2NQ==", "bodyText": "Good catch. I don't know why lint did not catch it.", "url": "https://github.com/apache/beam/pull/10613#discussion_r370313565", "createdAt": "2020-01-23T19:33:10Z", "author": {"login": "angoenka"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -288,15 +288,20 @@ def get_all_options(self,\n       _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n     result = vars(known_args)\n \n+    overrides = self._all_options.copy()\n     # Apply the overrides if any\n     for k in list(result):\n+      overrides.pop(k, None)\n       if k in self._all_options:\n         result[k] = self._all_options[k]\n       if (drop_default and\n           parser.get_default(k) == result[k] and\n           not isinstance(parser.get_default(k), ValueProvider)):\n         del result[k]\n \n+    if  overrides:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MDE4Mg=="}, "originalCommit": {"oid": "79158748de2c0a50cc986a0cb154a0d3d39635f6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjIyMjM2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/options/pipeline_options_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1NzoxM1rOFgKJFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTozMjo1NlrOFhKI8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NDkxOQ==", "bodyText": "It would be great if we could also capture the logging in addition to only checking mock_flag is untouched.", "url": "https://github.com/apache/beam/pull/10613#discussion_r369264919", "createdAt": "2020-01-21T21:57:13Z", "author": {"login": "ihji"}, "path": "sdks/python/apache_beam/options/pipeline_options_test.py", "diffHunk": "@@ -264,6 +264,18 @@ def test_override_options(self):\n     self.assertEqual(options.get_all_options()['num_workers'], 5)\n     self.assertTrue(options.get_all_options()['mock_flag'])\n \n+  def test_override_init_options(self):\n+    base_flags = ['--num_workers', '5']\n+    options = PipelineOptions(base_flags, mock_flag=True)\n+    self.assertEqual(options.get_all_options()['num_workers'], 5)\n+    self.assertEqual(options.get_all_options()['mock_flag'], True)\n+\n+  def test_invalid_override_init_options(self):\n+    base_flags = ['--num_workers', '5']\n+    options = PipelineOptions(base_flags, mock_invalid_flag=True)\n+    self.assertEqual(options.get_all_options()['num_workers'], 5)\n+    self.assertEqual(options.get_all_options()['mock_flag'], False)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79158748de2c0a50cc986a0cb154a0d3d39635f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMzQ1OA==", "bodyText": "Checking log message for test correctness will not be idle i suppose.", "url": "https://github.com/apache/beam/pull/10613#discussion_r370313458", "createdAt": "2020-01-23T19:32:56Z", "author": {"login": "angoenka"}, "path": "sdks/python/apache_beam/options/pipeline_options_test.py", "diffHunk": "@@ -264,6 +264,18 @@ def test_override_options(self):\n     self.assertEqual(options.get_all_options()['num_workers'], 5)\n     self.assertTrue(options.get_all_options()['mock_flag'])\n \n+  def test_override_init_options(self):\n+    base_flags = ['--num_workers', '5']\n+    options = PipelineOptions(base_flags, mock_flag=True)\n+    self.assertEqual(options.get_all_options()['num_workers'], 5)\n+    self.assertEqual(options.get_all_options()['mock_flag'], True)\n+\n+  def test_invalid_override_init_options(self):\n+    base_flags = ['--num_workers', '5']\n+    options = PipelineOptions(base_flags, mock_invalid_flag=True)\n+    self.assertEqual(options.get_all_options()['num_workers'], 5)\n+    self.assertEqual(options.get_all_options()['mock_flag'], False)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NDkxOQ=="}, "originalCommit": {"oid": "79158748de2c0a50cc986a0cb154a0d3d39635f6"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2190, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}