{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTc5NzQ1", "number": 13114, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0NTowNFrOEuGufg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0NTowNFrOEuGufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzgwMTU4OnYy", "diffSide": "RIGHT", "path": "examples/java/src/main/java/org/apache/beam/examples/WordCount.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0NTowNFrOHiTFvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODowNDoxNlrOHiTyzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNjM5OA==", "bodyText": "The --streaming flag really just controls whether a runner is in \"streaming mode\". Not all runners even have a streaming mode, and it should never affect the semantics of the pipeline. So I don't think that should affect the code or logic of the example. The problem seems to be a bug in the DataflowRunner, not anything to do with the example.", "url": "https://github.com/apache/beam/pull/13114#discussion_r505726398", "createdAt": "2020-10-15T17:45:04Z", "author": {"login": "kennknowles"}, "path": "examples/java/src/main/java/org/apache/beam/examples/WordCount.java", "diffHunk": "@@ -180,8 +181,11 @@ static void runWordCount(WordCountOptions options) {\n     p.apply(\"ReadLines\", TextIO.read().from(options.getInputFile()))\n         .apply(new CountWords())\n         .apply(MapElements.via(new FormatAsTextFn()))\n-        .apply(\"WriteCounts\", TextIO.write().to(options.getOutput()));\n-\n+        .apply(\n+            \"WriteCounts\",\n+            options.as(StreamingOptions.class).isStreaming()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c16969b9fcff36a3e03e287556bfce5e9ecd73f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTczMDk2NQ==", "bodyText": "looks like the StreamingShardedWriteFactory overwrites the WriteFiles transform(which incorporates Create.Values() that should be overwritten by StreamingFnApiCreateOverrideFactory, I've tested reordering of the overrides and it seems to solve the problem.\nit seems hard in general to keep the ordering always correct if we only replace all transforms in one run but I guess the Factories that overwrites into a composite transform should be added first.", "url": "https://github.com/apache/beam/pull/13114#discussion_r505730965", "createdAt": "2020-10-15T17:52:42Z", "author": {"login": "y1chi"}, "path": "examples/java/src/main/java/org/apache/beam/examples/WordCount.java", "diffHunk": "@@ -180,8 +181,11 @@ static void runWordCount(WordCountOptions options) {\n     p.apply(\"ReadLines\", TextIO.read().from(options.getInputFile()))\n         .apply(new CountWords())\n         .apply(MapElements.via(new FormatAsTextFn()))\n-        .apply(\"WriteCounts\", TextIO.write().to(options.getOutput()));\n-\n+        .apply(\n+            \"WriteCounts\",\n+            options.as(StreamingOptions.class).isStreaming()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNjM5OA=="}, "originalCommit": {"oid": "1c16969b9fcff36a3e03e287556bfce5e9ecd73f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTczNzkzMg==", "bodyText": "Yea it is hard to keep the ordering correct. I have some troubles with it all. We probably need to have a bigger plan for ordering them. Or, we could just apply them over and over until it stops... (or times out)", "url": "https://github.com/apache/beam/pull/13114#discussion_r505737932", "createdAt": "2020-10-15T18:04:16Z", "author": {"login": "kennknowles"}, "path": "examples/java/src/main/java/org/apache/beam/examples/WordCount.java", "diffHunk": "@@ -180,8 +181,11 @@ static void runWordCount(WordCountOptions options) {\n     p.apply(\"ReadLines\", TextIO.read().from(options.getInputFile()))\n         .apply(new CountWords())\n         .apply(MapElements.via(new FormatAsTextFn()))\n-        .apply(\"WriteCounts\", TextIO.write().to(options.getOutput()));\n-\n+        .apply(\n+            \"WriteCounts\",\n+            options.as(StreamingOptions.class).isStreaming()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNjM5OA=="}, "originalCommit": {"oid": "1c16969b9fcff36a3e03e287556bfce5e9ecd73f"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2981, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}