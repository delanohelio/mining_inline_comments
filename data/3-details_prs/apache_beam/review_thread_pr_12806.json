{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMzQ3OTE0", "number": 12806, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyNjo1OVrOEiPdUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxOTo0NVrOEzUe0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzQwMzA3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyNjo1OVrOHQAoNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo0Mzo1MVrOHRl4pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0OTU1OQ==", "bodyText": "Won't this break pipeline update?\nAlso, the implementation only uses the payload so I don't think we need the TODO since we don't use any of the other attributes from the message so we can leave a comment here stating instead that the unbounded sink only uses the payload of the pubsub message.", "url": "https://github.com/apache/beam/pull/12806#discussion_r486549559", "createdAt": "2020-09-10T18:26:59Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java", "diffHunk": "@@ -1012,6 +1012,8 @@ public PDone expand(PCollection<T> input) {\n         case UNBOUNDED:\n           return input\n               .apply(MapElements.into(new TypeDescriptor<PubsubMessage>() {}).via(getFormatFn()))\n+              // TODO(BEAM-10869): Also plump through PubsubMessageWithAttributesCoder if needed.\n+              .setCoder(PubsubMessagePayloadOnlyCoder.of())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9490a614bbe4a5418a23b65025bb27e043501a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNTk5Ng==", "bodyText": "That's a good point. We can have it guard with \"beam_fn_api\" and \"use_runner_v2\".\nIt seems like given Cham work here: #12760, we just need to send PubsubMessage.data as bytes for portable dataflow.", "url": "https://github.com/apache/beam/pull/12806#discussion_r486605996", "createdAt": "2020-09-10T20:12:27Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java", "diffHunk": "@@ -1012,6 +1012,8 @@ public PDone expand(PCollection<T> input) {\n         case UNBOUNDED:\n           return input\n               .apply(MapElements.into(new TypeDescriptor<PubsubMessage>() {}).via(getFormatFn()))\n+              // TODO(BEAM-10869): Also plump through PubsubMessageWithAttributesCoder if needed.\n+              .setCoder(PubsubMessagePayloadOnlyCoder.of())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0OTU1OQ=="}, "originalCommit": {"oid": "c9490a614bbe4a5418a23b65025bb27e043501a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMDE3Ng==", "bodyText": "I misunderstood what PR12760 does. Can you explain more about \"we don't use any of the other attributes from the message\"? It seems like both PubsubMessage in python and java contain 'attribute' map.", "url": "https://github.com/apache/beam/pull/12806#discussion_r487310176", "createdAt": "2020-09-11T22:02:13Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java", "diffHunk": "@@ -1012,6 +1012,8 @@ public PDone expand(PCollection<T> input) {\n         case UNBOUNDED:\n           return input\n               .apply(MapElements.into(new TypeDescriptor<PubsubMessage>() {}).via(getFormatFn()))\n+              // TODO(BEAM-10869): Also plump through PubsubMessageWithAttributesCoder if needed.\n+              .setCoder(PubsubMessagePayloadOnlyCoder.of())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0OTU1OQ=="}, "originalCommit": {"oid": "c9490a614bbe4a5418a23b65025bb27e043501a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODU1MA==", "bodyText": "PubsubUnboundedSink only consumes the data blob and sets the other attributes using properties from the element (e.g. timestamp).", "url": "https://github.com/apache/beam/pull/12806#discussion_r488208550", "createdAt": "2020-09-14T20:43:51Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java", "diffHunk": "@@ -1012,6 +1012,8 @@ public PDone expand(PCollection<T> input) {\n         case UNBOUNDED:\n           return input\n               .apply(MapElements.into(new TypeDescriptor<PubsubMessage>() {}).via(getFormatFn()))\n+              // TODO(BEAM-10869): Also plump through PubsubMessageWithAttributesCoder if needed.\n+              .setCoder(PubsubMessagePayloadOnlyCoder.of())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0OTU1OQ=="}, "originalCommit": {"oid": "c9490a614bbe4a5418a23b65025bb27e043501a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDYxODk3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1OTozNVrOHRmX1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1OTozNVrOHRmX1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxNjUzNQ==", "bodyText": "I think this should be \"beam_fn_api\" || \"use_runner_v2\" || \"use_unified_worker\"\nAlso, can we use the full pubsub with message attributes coder, this will allow for future changes to the PubsubUnboundedSink without needing to break update compatibility", "url": "https://github.com/apache/beam/pull/12806#discussion_r488216535", "createdAt": "2020-09-14T20:59:35Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java", "diffHunk": "@@ -1010,20 +1011,27 @@ public PDone expand(PCollection<T> input) {\n                           getMaxBatchBytesSize(), MAX_PUBLISH_BATCH_BYTE_SIZE_DEFAULT))));\n           return PDone.in(input.getPipeline());\n         case UNBOUNDED:\n-          return input\n-              .apply(MapElements.into(new TypeDescriptor<PubsubMessage>() {}).via(getFormatFn()))\n-              .apply(\n-                  new PubsubUnboundedSink(\n-                      getPubsubClientFactory(),\n-                      NestedValueProvider.of(getTopicProvider(), new TopicPathTranslator()),\n-                      getTimestampAttribute(),\n-                      getIdAttribute(),\n-                      100 /* numShards */,\n-                      MoreObjects.firstNonNull(\n-                          getMaxBatchSize(), PubsubUnboundedSink.DEFAULT_PUBLISH_BATCH_SIZE),\n-                      MoreObjects.firstNonNull(\n-                          getMaxBatchBytesSize(),\n-                          PubsubUnboundedSink.DEFAULT_PUBLISH_BATCH_BYTES)));\n+          PCollection<PubsubMessage> output =\n+              input.apply(\n+                  MapElements.into(new TypeDescriptor<PubsubMessage>() {}).via(getFormatFn()));\n+          if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f4beb36bd8b01747cdefbee1ceb7315f0a7bd9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDkwMTI3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjo0Mjo1OFrOHSiV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo1Mjo1NFrOHS75Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5OTA3Ng==", "bodyText": "Update the pydoc for 'with_attributes' property above ?", "url": "https://github.com/apache/beam/pull/12806#discussion_r489199076", "createdAt": "2020-09-16T06:42:58Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -299,12 +299,7 @@ def to_proto_str(element):\n     return element._to_proto_str()\n \n   def expand(self, pcoll):\n-    if self.with_attributes:\n-      pcoll = pcoll | 'ToProtobuf' >> Map(self.to_proto_str)\n-\n-    # Without attributes, message data is written as-is. With attributes,\n-    # message data + attributes are passed as a serialized protobuf string (see\n-    # ``PubsubMessage._to_proto_str`` for exact protobuf message type).\n+    pcoll = pcoll | 'ToProtobuf' >> Map(self.to_proto_str)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01ad96340e193dd9eec38785e7502e4ab5c61ab"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxNzY4Mg==", "bodyText": "I just realized that with_attributes means different type of input. Changed the expansion with respect to with_attributes.", "url": "https://github.com/apache/beam/pull/12806#discussion_r489617682", "createdAt": "2020-09-16T17:52:54Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -299,12 +299,7 @@ def to_proto_str(element):\n     return element._to_proto_str()\n \n   def expand(self, pcoll):\n-    if self.with_attributes:\n-      pcoll = pcoll | 'ToProtobuf' >> Map(self.to_proto_str)\n-\n-    # Without attributes, message data is written as-is. With attributes,\n-    # message data + attributes are passed as a serialized protobuf string (see\n-    # ``PubsubMessage._to_proto_str`` for exact protobuf message type).\n+    pcoll = pcoll | 'ToProtobuf' >> Map(self.to_proto_str)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5OTA3Ng=="}, "originalCommit": {"oid": "d01ad96340e193dd9eec38785e7502e4ab5c61ab"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDc1MzYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzo0Njo0OFrOHTH3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyNzowN1rOHVS5JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMzkzNA==", "bodyText": "This is fine but probably means that we'll have to keep the with_attributes property in PubSubWritePayload to properly reconstruct the transforms from the proto.", "url": "https://github.com/apache/beam/pull/12806#discussion_r489813934", "createdAt": "2020-09-16T23:46:48Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -290,21 +290,26 @@ def __init__(self,\n         topic, id_label, with_attributes, timestamp_attribute)\n \n   @staticmethod\n-  def to_proto_str(element):\n+  def message_to_proto_str(element):\n     # type: (PubsubMessage) -> bytes\n     if not isinstance(element, PubsubMessage):\n       raise TypeError(\n           'Unexpected element. Type: %s (expected: PubsubMessage), '\n           'value: %r' % (type(element), element))\n     return element._to_proto_str()\n \n+  @staticmethod\n+  def bytes_to_proto_str(element):\n+    # type: (bytes) -> bytes\n+    msg = pubsub.types.pubsub_pb2.PubsubMessage()\n+    msg.data = element\n+    return msg.SerializeToString()\n+\n   def expand(self, pcoll):\n     if self.with_attributes:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d7cf1cf1c31a8af379020714f345ec315df3f1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNzg5MQ==", "bodyText": "We can also clean up with_attributes and check the element type in Map. It depends on which way is preferred. One pushback for checking element type might be it will allow the upstream to produce a mixed pcollection of PubsubMessage and bytes.", "url": "https://github.com/apache/beam/pull/12806#discussion_r489827891", "createdAt": "2020-09-17T00:37:40Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -290,21 +290,26 @@ def __init__(self,\n         topic, id_label, with_attributes, timestamp_attribute)\n \n   @staticmethod\n-  def to_proto_str(element):\n+  def message_to_proto_str(element):\n     # type: (PubsubMessage) -> bytes\n     if not isinstance(element, PubsubMessage):\n       raise TypeError(\n           'Unexpected element. Type: %s (expected: PubsubMessage), '\n           'value: %r' % (type(element), element))\n     return element._to_proto_str()\n \n+  @staticmethod\n+  def bytes_to_proto_str(element):\n+    # type: (bytes) -> bytes\n+    msg = pubsub.types.pubsub_pb2.PubsubMessage()\n+    msg.data = element\n+    return msg.SerializeToString()\n+\n   def expand(self, pcoll):\n     if self.with_attributes:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMzkzNA=="}, "originalCommit": {"oid": "1d7cf1cf1c31a8af379020714f345ec315df3f1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTg0NQ==", "bodyText": "Using the Write transform that consumes the Pubsub proto after formatting should be the well known transform represented by the PubSubWritePayload and not the WriteToPubSub transform as it contains an ambiguous input type.", "url": "https://github.com/apache/beam/pull/12806#discussion_r491175845", "createdAt": "2020-09-18T20:30:26Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -290,21 +290,26 @@ def __init__(self,\n         topic, id_label, with_attributes, timestamp_attribute)\n \n   @staticmethod\n-  def to_proto_str(element):\n+  def message_to_proto_str(element):\n     # type: (PubsubMessage) -> bytes\n     if not isinstance(element, PubsubMessage):\n       raise TypeError(\n           'Unexpected element. Type: %s (expected: PubsubMessage), '\n           'value: %r' % (type(element), element))\n     return element._to_proto_str()\n \n+  @staticmethod\n+  def bytes_to_proto_str(element):\n+    # type: (bytes) -> bytes\n+    msg = pubsub.types.pubsub_pb2.PubsubMessage()\n+    msg.data = element\n+    return msg.SerializeToString()\n+\n   def expand(self, pcoll):\n     if self.with_attributes:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMzkzNA=="}, "originalCommit": {"oid": "1d7cf1cf1c31a8af379020714f345ec315df3f1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwNjg2Ng==", "bodyText": "After a video meeting, we should update the Dataflow translation for v2 to always pass through the has_attributes version for the sink part (aka Write transform in Python)", "url": "https://github.com/apache/beam/pull/12806#discussion_r491206866", "createdAt": "2020-09-18T21:50:21Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -290,21 +290,26 @@ def __init__(self,\n         topic, id_label, with_attributes, timestamp_attribute)\n \n   @staticmethod\n-  def to_proto_str(element):\n+  def message_to_proto_str(element):\n     # type: (PubsubMessage) -> bytes\n     if not isinstance(element, PubsubMessage):\n       raise TypeError(\n           'Unexpected element. Type: %s (expected: PubsubMessage), '\n           'value: %r' % (type(element), element))\n     return element._to_proto_str()\n \n+  @staticmethod\n+  def bytes_to_proto_str(element):\n+    # type: (bytes) -> bytes\n+    msg = pubsub.types.pubsub_pb2.PubsubMessage()\n+    msg.data = element\n+    return msg.SerializeToString()\n+\n   def expand(self, pcoll):\n     if self.with_attributes:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMzkzNA=="}, "originalCommit": {"oid": "1d7cf1cf1c31a8af379020714f345ec315df3f1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNTA5Mg==", "bodyText": "Lemme look into this.", "url": "https://github.com/apache/beam/pull/12806#discussion_r491215092", "createdAt": "2020-09-18T22:07:23Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -290,21 +290,26 @@ def __init__(self,\n         topic, id_label, with_attributes, timestamp_attribute)\n \n   @staticmethod\n-  def to_proto_str(element):\n+  def message_to_proto_str(element):\n     # type: (PubsubMessage) -> bytes\n     if not isinstance(element, PubsubMessage):\n       raise TypeError(\n           'Unexpected element. Type: %s (expected: PubsubMessage), '\n           'value: %r' % (type(element), element))\n     return element._to_proto_str()\n \n+  @staticmethod\n+  def bytes_to_proto_str(element):\n+    # type: (bytes) -> bytes\n+    msg = pubsub.types.pubsub_pb2.PubsubMessage()\n+    msg.data = element\n+    return msg.SerializeToString()\n+\n   def expand(self, pcoll):\n     if self.with_attributes:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMzkzNA=="}, "originalCommit": {"oid": "1d7cf1cf1c31a8af379020714f345ec315df3f1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5MTY4NA==", "bodyText": "Sent #12888", "url": "https://github.com/apache/beam/pull/12806#discussion_r492091684", "createdAt": "2020-09-21T14:27:07Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -290,21 +290,26 @@ def __init__(self,\n         topic, id_label, with_attributes, timestamp_attribute)\n \n   @staticmethod\n-  def to_proto_str(element):\n+  def message_to_proto_str(element):\n     # type: (PubsubMessage) -> bytes\n     if not isinstance(element, PubsubMessage):\n       raise TypeError(\n           'Unexpected element. Type: %s (expected: PubsubMessage), '\n           'value: %r' % (type(element), element))\n     return element._to_proto_str()\n \n+  @staticmethod\n+  def bytes_to_proto_str(element):\n+    # type: (bytes) -> bytes\n+    msg = pubsub.types.pubsub_pb2.PubsubMessage()\n+    msg.data = element\n+    return msg.SerializeToString()\n+\n   def expand(self, pcoll):\n     if self.with_attributes:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMzkzNA=="}, "originalCommit": {"oid": "1d7cf1cf1c31a8af379020714f345ec315df3f1c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzQ2Nzk4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDozNTo1OVrOHUbI_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDozNTo1OVrOHUbI_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3ODIzNw==", "bodyText": "nit: rename classes to PubsubMessages", "url": "https://github.com/apache/beam/pull/12806#discussion_r491178237", "createdAt": "2020-09-18T20:35:59Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsub;\n+\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import java.util.Map;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+\n+/** Common util functions for converting between PubsubMessage proto and {@link PubsubMessage}. */\n+public class PubsubMessageUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdc93239aefab09d5b2f544882205f501ba38cc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAxMjg0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0MzozNFrOHqFrHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0MzozNFrOHqFrHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5NTE5Ng==", "bodyText": "We can remove with_attributes from PubSubSink in the cleanup PR. @chamikaramj", "url": "https://github.com/apache/beam/pull/12806#discussion_r513895196", "createdAt": "2020-10-29T02:43:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -418,10 +439,11 @@ def __init__(self,\n                id_label,  # type: Optional[str]\n                with_attributes,  # type: bool\n                timestamp_attribute  # type: Optional[str]\n-              ):\n+               ):\n     self.coder = coders.BytesCoder()\n     self.full_topic = topic\n     self.id_label = id_label\n+    #TODO(BEAM-10869): Remove with_attributes since we will never look at it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a309c2ce602fba67351f36067f9c65b150b86a8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjQ4NDAzOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxOTo0NlrOHqeFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODoxMDowMlrOHqoiHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5NTA3MA==", "bodyText": "BTW doesn't Java work (for runner v2) when we just set PropertyNames.PUBSUB_SERIALIZED_ATTRIBUTES_FN to empty string ?", "url": "https://github.com/apache/beam/pull/12806#discussion_r514295070", "createdAt": "2020-10-29T14:19:46Z", "author": {"login": "chamikaramj"}, "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "diffHunk": "@@ -1508,7 +1578,7 @@ public void translate(StreamingPubsubIOWrite transform, TranslationContext conte\n       // Using a GlobalWindowCoder as a place holder because GlobalWindowCoder is known coder.\n       stepContext.addEncodingInput(\n           WindowedValue.getFullCoder(VoidCoder.of(), GlobalWindow.Coder.INSTANCE));\n-      stepContext.addInput(PropertyNames.PARALLEL_INPUT, context.getInput(transform));\n+      stepContext.addInput(PropertyNames.PARALLEL_INPUT, input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a309c2ce602fba67351f36067f9c65b150b86a8"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2NjMzMg==", "bodyText": "Please refer to L1574. In java, it's not an empty string but a serialized func, though the func is not used in portable run.", "url": "https://github.com/apache/beam/pull/12806#discussion_r514466332", "createdAt": "2020-10-29T18:10:02Z", "author": {"login": "boyuanzz"}, "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "diffHunk": "@@ -1508,7 +1578,7 @@ public void translate(StreamingPubsubIOWrite transform, TranslationContext conte\n       // Using a GlobalWindowCoder as a place holder because GlobalWindowCoder is known coder.\n       stepContext.addEncodingInput(\n           WindowedValue.getFullCoder(VoidCoder.of(), GlobalWindow.Coder.INSTANCE));\n-      stepContext.addInput(PropertyNames.PARALLEL_INPUT, context.getInput(transform));\n+      stepContext.addInput(PropertyNames.PARALLEL_INPUT, input);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5NTA3MA=="}, "originalCommit": {"oid": "7a309c2ce602fba67351f36067f9c65b150b86a8"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3274, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}