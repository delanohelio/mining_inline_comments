{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MDk3NzI3", "number": 13435, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDozNjo1N1rOFAJ5Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMzoxMlrOFE7ikQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzA2NDA2OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/External.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDozNjo1N1rOH-Snyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDozNjo1N1rOH-Snyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA3ODg1OQ==", "bodyText": "please revert this change as it is unrelated", "url": "https://github.com/apache/beam/pull/13435#discussion_r535078859", "createdAt": "2020-12-03T10:36:57Z", "author": {"login": "echauchot"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/External.java", "diffHunk": "@@ -78,7 +78,7 @@\n   private static AtomicInteger namespaceCounter = new AtomicInteger(0);\n \n   private static final ExpansionServiceClientFactory DEFAULT =\n-     DefaultExpansionServiceClientFactory.create(\n+      DefaultExpansionServiceClientFactory.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af09a5b61ab97ec22f175fa9a3b4ef5ff4f28555"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjg4NzAzOnYy", "diffSide": "LEFT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/NexmarkQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxNTo1MFrOIFJTbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxNTo1MFrOIFJTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2NjIyMQ==", "bodyText": "+1 on cleaning", "url": "https://github.com/apache/beam/pull/13435#discussion_r542266221", "createdAt": "2020-12-14T10:15:50Z", "author": {"login": "echauchot"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/NexmarkQuery.java", "diffHunk": "@@ -39,7 +39,6 @@\n   final NexmarkConfiguration configuration;\n   public final Monitor<Event> eventMonitor;\n   public final Monitor<T> resultMonitor;\n-  private final Monitor<Event> endOfStreamMonitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af09a5b61ab97ec22f175fa9a3b4ef5ff4f28555"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzA4NjU1OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowMDoyNFrOIFLGCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODoxNjoyMFrOIPi2Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5NTU2MA==", "bodyText": "it is not a timeStamp, it is in processing time (the wall clock) as opposed to a timestamp which is a component of an element put by the source. Please rename to \"processingTime\"", "url": "https://github.com/apache/beam/pull/13435#discussion_r542295560", "createdAt": "2020-12-14T11:00:24Z", "author": {"login": "echauchot"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java", "diffHunk": "@@ -39,20 +39,15 @@\n   private class MonitorDoFn extends DoFn<T, T> {\n     final Counter elementCounter = Metrics.counter(name, prefix + \".elements\");\n     final Counter bytesCounter = Metrics.counter(name, prefix + \".bytes\");\n-    final Distribution startTime = Metrics.distribution(name, prefix + \".startTime\");\n-    final Distribution endTime = Metrics.distribution(name, prefix + \".endTime\");\n-    final Distribution startTimestamp = Metrics.distribution(name, prefix + \".startTimestamp\");\n-    final Distribution endTimestamp = Metrics.distribution(name, prefix + \".endTimestamp\");\n+    final Distribution systemTimestamp = Metrics.distribution(name, prefix + \".systemTimestamp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af09a5b61ab97ec22f175fa9a3b4ef5ff4f28555"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE3MDQ0Mw==", "bodyText": "please rename also the metric name", "url": "https://github.com/apache/beam/pull/13435#discussion_r553170443", "createdAt": "2021-01-07T08:16:20Z", "author": {"login": "echauchot"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java", "diffHunk": "@@ -39,20 +39,15 @@\n   private class MonitorDoFn extends DoFn<T, T> {\n     final Counter elementCounter = Metrics.counter(name, prefix + \".elements\");\n     final Counter bytesCounter = Metrics.counter(name, prefix + \".bytes\");\n-    final Distribution startTime = Metrics.distribution(name, prefix + \".startTime\");\n-    final Distribution endTime = Metrics.distribution(name, prefix + \".endTime\");\n-    final Distribution startTimestamp = Metrics.distribution(name, prefix + \".startTimestamp\");\n-    final Distribution endTimestamp = Metrics.distribution(name, prefix + \".endTimestamp\");\n+    final Distribution systemTimestamp = Metrics.distribution(name, prefix + \".systemTimestamp\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5NTU2MA=="}, "originalCommit": {"oid": "af09a5b61ab97ec22f175fa9a3b4ef5ff4f28555"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEwMjY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowNDowNVrOIFLPFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowNDowNVrOIFLPFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5Nzg3OA==", "bodyText": "true that this expression is equivalent and simpler but less readable. I would prefer a revert", "url": "https://github.com/apache/beam/pull/13435#discussion_r542297878", "createdAt": "2020-12-14T11:04:05Z", "author": {"login": "echauchot"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java", "diffHunk": "@@ -302,7 +302,7 @@ private NexmarkPerf currentPerf(\n       effectiveEnd = eventEnd;\n     }\n \n-    if (effectiveEnd >= 0 && eventStart >= 0 && effectiveEnd >= eventStart) {\n+    if (eventStart >= 0 && effectiveEnd >= eventStart) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af09a5b61ab97ec22f175fa9a3b4ef5ff4f28555"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEwNDQ1OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowNDoyNlrOIFLQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowNDoyNlrOIFLQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5ODEzMQ==", "bodyText": "same here", "url": "https://github.com/apache/beam/pull/13435#discussion_r542298131", "createdAt": "2020-12-14T11:04:26Z", "author": {"login": "echauchot"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java", "diffHunk": "@@ -336,7 +336,7 @@ private NexmarkPerf currentPerf(\n       perf.startupDelaySec = (eventStart - startMsSinceEpoch) / 1000.0;\n     }\n \n-    if (resultStart >= 0 && eventStart >= 0 && resultStart >= eventStart) {\n+    if (eventStart >= 0 && resultStart >= eventStart) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af09a5b61ab97ec22f175fa9a3b4ef5ff4f28555"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzE0MTI5OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMzoxMlrOIFLkmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMzoxMlrOIFLkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMzM4NA==", "bodyText": "agree with your simplification for these reasons:\n\nfor each element processed, the distribution metrics start and end will be updated with the same value and, as the distribution reports min, max and average, and, as in MetricsReader we are requesting the minimum and the maximum, there is no impact of having a single distribution\nthe methods in MetricsReader use a SplitIterator on the distributions that is not immutable for the underlying source (which could explain that there was 2 distributions created) but it does only reading (by calling getMin() and getMax()) so there will be no side effect on the underlying distribution.", "url": "https://github.com/apache/beam/pull/13435#discussion_r542303384", "createdAt": "2020-12-14T11:13:12Z", "author": {"login": "echauchot"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java", "diffHunk": "@@ -39,20 +39,15 @@\n   private class MonitorDoFn extends DoFn<T, T> {\n     final Counter elementCounter = Metrics.counter(name, prefix + \".elements\");\n     final Counter bytesCounter = Metrics.counter(name, prefix + \".bytes\");\n-    final Distribution startTime = Metrics.distribution(name, prefix + \".startTime\");\n-    final Distribution endTime = Metrics.distribution(name, prefix + \".endTime\");\n-    final Distribution startTimestamp = Metrics.distribution(name, prefix + \".startTimestamp\");\n-    final Distribution endTimestamp = Metrics.distribution(name, prefix + \".endTimestamp\");\n+    final Distribution systemTimestamp = Metrics.distribution(name, prefix + \".systemTimestamp\");\n+    final Distribution eventTimestamp = Metrics.distribution(name, prefix + \".eventTimestamp\");\n \n     @ProcessElement\n     public void processElement(ProcessContext c) {\n       elementCounter.inc();\n       bytesCounter.inc(c.element().sizeInBytes());\n-      long now = System.currentTimeMillis();\n-      startTime.update(now);\n-      endTime.update(now);\n-      startTimestamp.update(c.timestamp().getMillis());\n-      endTimestamp.update(c.timestamp().getMillis());\n+      systemTimestamp.update(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af09a5b61ab97ec22f175fa9a3b4ef5ff4f28555"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2677, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}