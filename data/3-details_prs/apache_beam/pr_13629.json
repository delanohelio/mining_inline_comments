{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Mjc3NDE2", "number": 13629, "title": "[BEAM-10925] Load SQL UDFs from jar.", "bodyText": "Please add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-29T00:15:10Z", "url": "https://github.com/apache/beam/pull/13629", "merged": true, "mergeCommit": {"oid": "4f437269d2caae77c016787ff7bc3b2f656c53ae"}, "closed": true, "closedAt": "2021-01-26T19:23:55Z", "author": {"login": "ibzib"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqvXlOgH2gAyNTQ2Mjc3NDE2OjcxYjdkOGJiMmYwZjExN2IzMzA3MmVmM2FhMzIwMTk4MDE4NWI2ZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0AaL9AFqTU3NjY3Mzc1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "71b7d8bb2f0f117b33072ef3aa3201980185b6e2", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/71b7d8bb2f0f117b33072ef3aa3201980185b6e2", "committedDate": "2020-12-29T00:13:21Z", "message": "[BEAM-10925] Load SQL UDFs from jar."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b890379a492e01b4e48e90bf716fb51eb846bb", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/25b890379a492e01b4e48e90bf716fb51eb846bb", "committedDate": "2020-12-29T02:53:24Z", "message": "Move JavaUdfLoader from zetasql -> sql."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/ee4d14a3271ec3b1d512d7f30c7430246ebdf582", "committedDate": "2020-12-29T03:10:57Z", "message": "Make JavaUdfDefinitions a subclass of JavaUdfLoader.\n\nSince JavaUdfLoader should be the only consumer anyway."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzcwNTc1", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-559370575", "createdAt": "2020-12-29T04:01:37Z", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDowMTozN1rOIMGeRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDowMTozN1rOIMGeRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1OTg3Ng==", "bodyText": "You've leaked the class loader here. setContextClassLoader should always be inside a try finally block that resets the class loader. For example: \n  \n    \n      beam/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamEnumerableConverter.java\n    \n    \n         Line 118\n      in\n      3bb232f\n    \n    \n    \n    \n\n        \n          \n           final ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();", "url": "https://github.com/apache/beam/pull/13629#discussion_r549559876", "createdAt": "2020-12-29T04:01:37Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/JavaUdfLoader.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.ProviderNotFoundException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.extensions.sql.udf.UdfProvider;\n+import org.apache.beam.sdk.io.FileSystems;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Loads {@link UdfProvider} implementations from user-provided jars.\n+ *\n+ * <p>All UDFs are loaded and cached for each jar to mitigate IO costs.\n+ */\n+public class JavaUdfLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(JavaUdfLoader.class);\n+\n+  /**\n+   * Maps the external jar location to the functions the jar defines. Static so it can persist\n+   * across multiple SQL transforms.\n+   */\n+  private static final Map<String, FunctionDefinitions> cache = new HashMap<>();\n+\n+  private static final ClassLoader originalClassLoader = ReflectHelpers.findClassLoader();\n+\n+  /**\n+   * Load a user-defined scalar function from the specified jar.\n+   *\n+   * <p><strong>WARNING</strong>: The first time a jar is loaded, it is added to the thread's\n+   * context {@link ClassLoader} so that the jar can be staged by the runner.\n+   */\n+  public ScalarFn loadScalarFunction(List<String> functionPath, String jarPath) {\n+    String functionFullName = String.join(\".\", functionPath);\n+    try {\n+      FunctionDefinitions functionDefinitions = loadJar(jarPath);\n+      if (!functionDefinitions.scalarFunctions().containsKey(functionPath)) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"No implementation of scalar function %s found in %s.%n\"\n+                    + \" 1. Create a class implementing %s and annotate it with @AutoService(%s.class).%n\"\n+                    + \" 2. Add function %s to the class's userDefinedScalarFunctions implementation.\",\n+                functionFullName,\n+                jarPath,\n+                UdfProvider.class.getSimpleName(),\n+                UdfProvider.class.getSimpleName(),\n+                functionFullName));\n+      }\n+      return functionDefinitions.scalarFunctions().get(functionPath);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          String.format(\n+              \"Failed to load user-defined scalar function %s from %s\", functionFullName, jarPath),\n+          e);\n+    }\n+  }\n+\n+  /**\n+   * Creates a temporary local copy of the file at {@code inputPath}, and returns a handle to the\n+   * local copy.\n+   */\n+  private File downloadFile(String inputPath, String mimeType) throws IOException {\n+    Preconditions.checkArgument(!inputPath.isEmpty(), \"Path cannot be empty.\");\n+    ResourceId inputResource = FileSystems.matchNewResource(inputPath, false /* is directory */);\n+    try (ReadableByteChannel inputChannel = FileSystems.open(inputResource)) {\n+      File outputFile = File.createTempFile(\"sql-udf-\", inputResource.getFilename());\n+      ResourceId outputResource =\n+          FileSystems.matchNewResource(outputFile.getAbsolutePath(), false /* is directory */);\n+      try (WritableByteChannel outputChannel = FileSystems.create(outputResource, mimeType)) {\n+        ByteStreams.copy(inputChannel, outputChannel);\n+      }\n+      // Compute and log checksum.\n+      try (InputStream inputStream = new FileInputStream(outputFile)) {\n+        LOG.info(\n+            \"Copied {} to {} with md5 hash {}.\",\n+            inputPath,\n+            outputFile.getAbsolutePath(),\n+            DigestUtils.md5Hex(inputStream));\n+      }\n+      return outputFile;\n+    }\n+  }\n+\n+  private ClassLoader createAndSetClassLoader(String inputJarPath) throws IOException {\n+    File tmpJar = downloadFile(inputJarPath, \"application/java-archive\");\n+    // Set the thread's context class loader so that the jar can be staged by the runner.\n+    Thread.currentThread()\n+        .setContextClassLoader(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Mzc0NDYw", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-559374460", "createdAt": "2020-12-29T04:31:44Z", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDozMTo0NFrOIMGu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDozMTo0NFrOIMGu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2NDE1MQ==", "bodyText": "This is probably unsafe to cache.", "url": "https://github.com/apache/beam/pull/13629#discussion_r549564151", "createdAt": "2020-12-29T04:31:44Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/JavaUdfLoader.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.ProviderNotFoundException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.extensions.sql.udf.UdfProvider;\n+import org.apache.beam.sdk.io.FileSystems;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Loads {@link UdfProvider} implementations from user-provided jars.\n+ *\n+ * <p>All UDFs are loaded and cached for each jar to mitigate IO costs.\n+ */\n+public class JavaUdfLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(JavaUdfLoader.class);\n+\n+  /**\n+   * Maps the external jar location to the functions the jar defines. Static so it can persist\n+   * across multiple SQL transforms.\n+   */\n+  private static final Map<String, FunctionDefinitions> cache = new HashMap<>();\n+\n+  private static final ClassLoader originalClassLoader = ReflectHelpers.findClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Mzc0Njc2", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-559374676", "createdAt": "2020-12-29T04:33:25Z", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDozMzoyNVrOIMGvyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDozMzoyNVrOIMGvyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2NDM2MQ==", "bodyText": "I'm not sure this is safe as is. It will probably work for most cases, but I think you might want to key it on original class loader?", "url": "https://github.com/apache/beam/pull/13629#discussion_r549564361", "createdAt": "2020-12-29T04:33:25Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/JavaUdfLoader.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.ProviderNotFoundException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.extensions.sql.udf.UdfProvider;\n+import org.apache.beam.sdk.io.FileSystems;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Loads {@link UdfProvider} implementations from user-provided jars.\n+ *\n+ * <p>All UDFs are loaded and cached for each jar to mitigate IO costs.\n+ */\n+public class JavaUdfLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(JavaUdfLoader.class);\n+\n+  /**\n+   * Maps the external jar location to the functions the jar defines. Static so it can persist\n+   * across multiple SQL transforms.\n+   */\n+  private static final Map<String, FunctionDefinitions> cache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Mzc0ODUy", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-559374852", "createdAt": "2020-12-29T04:34:36Z", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Mzg1Mjgx", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-559385281", "createdAt": "2020-12-29T05:43:12Z", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNTo0MzoxMlrOIMHcSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNTo0NjoxOVrOIMHeOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NTc1Mg==", "bodyText": "I am a bit confused on what is List<String> functionPath (i.e. why it is a list?) Can you add a @param on java doc to explain this parameter?", "url": "https://github.com/apache/beam/pull/13629#discussion_r549575752", "createdAt": "2020-12-29T05:43:12Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/JavaUdfLoader.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.ProviderNotFoundException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.extensions.sql.udf.UdfProvider;\n+import org.apache.beam.sdk.io.FileSystems;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Loads {@link UdfProvider} implementations from user-provided jars.\n+ *\n+ * <p>All UDFs are loaded and cached for each jar to mitigate IO costs.\n+ */\n+public class JavaUdfLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(JavaUdfLoader.class);\n+\n+  /**\n+   * Maps the external jar location to the functions the jar defines. Static so it can persist\n+   * across multiple SQL transforms.\n+   */\n+  private static final Map<String, FunctionDefinitions> cache = new HashMap<>();\n+\n+  private static final ClassLoader originalClassLoader = ReflectHelpers.findClassLoader();\n+\n+  /**\n+   * Load a user-defined scalar function from the specified jar.\n+   *\n+   * <p><strong>WARNING</strong>: The first time a jar is loaded, it is added to the thread's\n+   * context {@link ClassLoader} so that the jar can be staged by the runner.\n+   */\n+  public ScalarFn loadScalarFunction(List<String> functionPath, String jarPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NjI1MQ==", "bodyText": "Will it better to add a randomization on temple file name?\nI am thinking a case that there are two create function statement that each one specify a jar which has the same path but different buckets, so there might be a same local file name in this case?", "url": "https://github.com/apache/beam/pull/13629#discussion_r549576251", "createdAt": "2020-12-29T05:46:19Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/JavaUdfLoader.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.ProviderNotFoundException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.extensions.sql.udf.UdfProvider;\n+import org.apache.beam.sdk.io.FileSystems;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Loads {@link UdfProvider} implementations from user-provided jars.\n+ *\n+ * <p>All UDFs are loaded and cached for each jar to mitigate IO costs.\n+ */\n+public class JavaUdfLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(JavaUdfLoader.class);\n+\n+  /**\n+   * Maps the external jar location to the functions the jar defines. Static so it can persist\n+   * across multiple SQL transforms.\n+   */\n+  private static final Map<String, FunctionDefinitions> cache = new HashMap<>();\n+\n+  private static final ClassLoader originalClassLoader = ReflectHelpers.findClassLoader();\n+\n+  /**\n+   * Load a user-defined scalar function from the specified jar.\n+   *\n+   * <p><strong>WARNING</strong>: The first time a jar is loaded, it is added to the thread's\n+   * context {@link ClassLoader} so that the jar can be staged by the runner.\n+   */\n+  public ScalarFn loadScalarFunction(List<String> functionPath, String jarPath) {\n+    String functionFullName = String.join(\".\", functionPath);\n+    try {\n+      FunctionDefinitions functionDefinitions = loadJar(jarPath);\n+      if (!functionDefinitions.scalarFunctions().containsKey(functionPath)) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"No implementation of scalar function %s found in %s.%n\"\n+                    + \" 1. Create a class implementing %s and annotate it with @AutoService(%s.class).%n\"\n+                    + \" 2. Add function %s to the class's userDefinedScalarFunctions implementation.\",\n+                functionFullName,\n+                jarPath,\n+                UdfProvider.class.getSimpleName(),\n+                UdfProvider.class.getSimpleName(),\n+                functionFullName));\n+      }\n+      return functionDefinitions.scalarFunctions().get(functionPath);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          String.format(\n+              \"Failed to load user-defined scalar function %s from %s\", functionFullName, jarPath),\n+          e);\n+    }\n+  }\n+\n+  /**\n+   * Creates a temporary local copy of the file at {@code inputPath}, and returns a handle to the\n+   * local copy.\n+   */\n+  private File downloadFile(String inputPath, String mimeType) throws IOException {\n+    Preconditions.checkArgument(!inputPath.isEmpty(), \"Path cannot be empty.\");\n+    ResourceId inputResource = FileSystems.matchNewResource(inputPath, false /* is directory */);\n+    try (ReadableByteChannel inputChannel = FileSystems.open(inputResource)) {\n+      File outputFile = File.createTempFile(\"sql-udf-\", inputResource.getFilename());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Njc2MjQy", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-559676242", "createdAt": "2020-12-29T19:45:59Z", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTk0ODM5", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-562994839", "createdAt": "2021-01-06T19:47:52Z", "commit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTo0Nzo1MlrOIPUDIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOTo0Nzo1MlrOIPUDIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkyODAzMw==", "bodyText": "This method duplicates functionality built into the JVM. It might be possible to just construct a URL directly? If not,  here is an example that grabs the path to the temp file from the builtin URL jar cache:\n((JarURLConnection)new URL(\"jar:https://repo1.maven.org/maven2/com/google/api/gax-grpc/1.60.0/gax-grpc-1.60.0-guavashaded.jar!/\").openConnection()).getJarFile().getName()\n(JarURLConnection also provides a getInputStream method if you still want to log a hash.)", "url": "https://github.com/apache/beam/pull/13629#discussion_r552928033", "createdAt": "2021-01-06T19:47:52Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/JavaUdfLoader.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.ProviderNotFoundException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.extensions.sql.udf.UdfProvider;\n+import org.apache.beam.sdk.io.FileSystems;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Loads {@link UdfProvider} implementations from user-provided jars.\n+ *\n+ * <p>All UDFs are loaded and cached for each jar to mitigate IO costs.\n+ */\n+public class JavaUdfLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(JavaUdfLoader.class);\n+\n+  /**\n+   * Maps the external jar location to the functions the jar defines. Static so it can persist\n+   * across multiple SQL transforms.\n+   */\n+  private static final Map<String, FunctionDefinitions> cache = new HashMap<>();\n+\n+  private static final ClassLoader originalClassLoader = ReflectHelpers.findClassLoader();\n+\n+  /**\n+   * Load a user-defined scalar function from the specified jar.\n+   *\n+   * <p><strong>WARNING</strong>: The first time a jar is loaded, it is added to the thread's\n+   * context {@link ClassLoader} so that the jar can be staged by the runner.\n+   */\n+  public ScalarFn loadScalarFunction(List<String> functionPath, String jarPath) {\n+    String functionFullName = String.join(\".\", functionPath);\n+    try {\n+      FunctionDefinitions functionDefinitions = loadJar(jarPath);\n+      if (!functionDefinitions.scalarFunctions().containsKey(functionPath)) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"No implementation of scalar function %s found in %s.%n\"\n+                    + \" 1. Create a class implementing %s and annotate it with @AutoService(%s.class).%n\"\n+                    + \" 2. Add function %s to the class's userDefinedScalarFunctions implementation.\",\n+                functionFullName,\n+                jarPath,\n+                UdfProvider.class.getSimpleName(),\n+                UdfProvider.class.getSimpleName(),\n+                functionFullName));\n+      }\n+      return functionDefinitions.scalarFunctions().get(functionPath);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          String.format(\n+              \"Failed to load user-defined scalar function %s from %s\", functionFullName, jarPath),\n+          e);\n+    }\n+  }\n+\n+  /**\n+   * Creates a temporary local copy of the file at {@code inputPath}, and returns a handle to the\n+   * local copy.\n+   */\n+  private File downloadFile(String inputPath, String mimeType) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4d14a3271ec3b1d512d7f30c7430246ebdf582"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fbf45c53824c94a1502f6cfa4f60299a4d1c030", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/1fbf45c53824c94a1502f6cfa4f60299a4d1c030", "committedDate": "2021-01-26T02:02:13Z", "message": "Don't set context classloader.\n\nThe classloader will need to be set in CalcFn#compile. We will do that\nin a subsequent PR.\n\nAlso fixes nullability errors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2NjczNzUy", "url": "https://github.com/apache/beam/pull/13629#pullrequestreview-576673752", "createdAt": "2021-01-26T19:09:54Z", "commit": {"oid": "1fbf45c53824c94a1502f6cfa4f60299a4d1c030"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4278, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}