{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjgyMDU0", "number": 13118, "title": "[BEAM-11094] Only work with fully expanded PCollections in TransformHierarchy and PTransformReplacements", "bodyText": "While developing #13053 I discovered that some output replacements were not being re-wired correctly. The current types in output replacements would allow false misses when two PValues were not expanded to the same degree. Fully expanding all PValues to PCollections is always allowed, always correct, and eliminates this class of errors.\nIn this PR, I make all the maps only allow PCollections to eliminate that class of error. I also add a bit more testing to transform replacement.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-10-14T22:11:42Z", "url": "https://github.com/apache/beam/pull/13118", "merged": true, "mergeCommit": {"oid": "415572debd39c8773569705f3714a83f995cbb7e"}, "closed": true, "closedAt": "2020-10-21T23:33:49Z", "author": {"login": "kennknowles"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSmAx7gBqjM4Nzg5NDI0NzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXZCeAgFqTUyMDEwMTYyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c5aee13fd0db296bad3dff9a588afa11abc22cc", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/6c5aee13fd0db296bad3dff9a588afa11abc22cc", "committedDate": "2020-10-14T22:10:34Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}, "afterCommit": {"oid": "80a9cded867b90ff3335409f84452ec85d2babc3", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/80a9cded867b90ff3335409f84452ec85d2babc3", "committedDate": "2020-10-14T23:44:56Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80a9cded867b90ff3335409f84452ec85d2babc3", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/80a9cded867b90ff3335409f84452ec85d2babc3", "committedDate": "2020-10-14T23:44:56Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}, "afterCommit": {"oid": "83ad40d372864dc12c9ac258ae08382b50f8548c", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/83ad40d372864dc12c9ac258ae08382b50f8548c", "committedDate": "2020-10-15T02:32:43Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83ad40d372864dc12c9ac258ae08382b50f8548c", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/83ad40d372864dc12c9ac258ae08382b50f8548c", "committedDate": "2020-10-15T02:32:43Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}, "afterCommit": {"oid": "45748f2ea89964a1fe4d1737c970c84a32429dbe", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/45748f2ea89964a1fe4d1737c970c84a32429dbe", "committedDate": "2020-10-15T03:25:48Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/fc2f84abe50724803de083b397a1a00ee8677ce6", "committedDate": "2020-10-16T22:15:39Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45748f2ea89964a1fe4d1737c970c84a32429dbe", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/45748f2ea89964a1fe4d1737c970c84a32429dbe", "committedDate": "2020-10-15T03:25:48Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}, "afterCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/fc2f84abe50724803de083b397a1a00ee8677ce6", "committedDate": "2020-10-16T22:15:39Z", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjA2MzI2", "url": "https://github.com/apache/beam/pull/13118#pullrequestreview-512206326", "createdAt": "2020-10-19T22:32:17Z", "commit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjozMjoxN1rOHkkAZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjo1Nzo0OFrOHkkklA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDcwOA==", "bodyText": "Can we choose not to expose this as it looks like it is only used within PipelineTest.java\nIf there is a future need we can move it again (in hopefully a much smaller change) so its easier to reason about visibility.", "url": "https://github.com/apache/beam/pull/13118#discussion_r508100708", "createdAt": "2020-10-19T22:32:17Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java", "diffHunk": "@@ -1403,4 +1427,55 @@ public int size() {\n       };\n     }\n   }\n+\n+  public static <InputT, ViewT> PCollectionView<ViewT> findPCollectionView(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTE4Ng==", "bodyText": "Might as well and make this javadoc.", "url": "https://github.com/apache/beam/pull/13118#discussion_r508101186", "createdAt": "2020-10-19T22:33:33Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+\n+/**\n+ * <b><i>For internal use. No backwards compatibility guarantees.</i></b>\n+ *\n+ * <p>A primitive value within Beam.\n+ */\n+@Internal\n+public class PValues {\n+\n+  // Do not instantiate\n+  private PValues() {}\n+\n+  // For backwards-compatibility, PCollectionView is still a \"PValue\" to users, which occurs in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTM0Mw==", "bodyText": "nit: if you use /* */ blocks they will get line formatted correctly", "url": "https://github.com/apache/beam/pull/13118#discussion_r508101343", "createdAt": "2020-10-19T22:33:58Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+\n+/**\n+ * <b><i>For internal use. No backwards compatibility guarantees.</i></b>\n+ *\n+ * <p>A primitive value within Beam.\n+ */\n+@Internal\n+public class PValues {\n+\n+  // Do not instantiate\n+  private PValues() {}\n+\n+  // For backwards-compatibility, PCollectionView is still a \"PValue\" to users, which occurs in\n+  // three places:\n+  //\n+  //    POutput#expand (users can write custom POutputs)\n+  //    PInput#expand (users can write custom PInputs)\n+  //    PTransform#getAdditionalInputs (users can have their composites report inputs not passed by\n+  // apply())\n+  //\n+  // These all return Map<TupleTag<?> PValue>. A user's implementation of these methods is permitted\n+  // to return\n+  // either a PCollection or a PCollectionView for each PValue. PCollection's expand to themselves\n+  // and\n+  // PCollectionView expands to the PCollection that it is a view of.\n+  public static Map<TupleTag<?>, PCollection<?>> fullyExpand(\n+      Map<TupleTag<?>, PValue> partiallyExpanded) {\n+    Map<TupleTag<?>, PCollection<?>> result = new LinkedHashMap<>();\n+    for (Map.Entry<TupleTag<?>, PValue> pvalue : partiallyExpanded.entrySet()) {\n+      if (pvalue.getValue() instanceof PCollection) {\n+        PCollection<?> previous = result.put(pvalue.getKey(), (PCollection<?>) pvalue.getValue());\n+        checkArgument(\n+            previous == null,\n+            \"Found conflicting %ss in flattened expansion of %s: %s maps to %s and %s\",\n+            partiallyExpanded,\n+            TupleTag.class.getSimpleName(),\n+            pvalue.getKey(),\n+            previous,\n+            pvalue.getValue());\n+      } else {\n+        if (pvalue.getValue().expand().size() == 1\n+            && Iterables.getOnlyElement(pvalue.getValue().expand().values())\n+                .equals(pvalue.getValue())) {\n+          throw new IllegalStateException(\n+              String.format(\n+                  \"Non %s %s that expands into itself %s\",\n+                  PCollection.class.getSimpleName(),\n+                  PValue.class.getSimpleName(),\n+                  pvalue.getValue()));\n+        }\n+        // At this point we know it is a PCollectionView or some internal hacked PValue. To be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNTAwMw==", "bodyText": "Why did this (and related classes) have to move?\nI could be convinced otherwise to keep the move but it looks like long term we would want to get rid of Pipeline#replaceAll some day since runners should only doing proto -> proto conversions.\nThe only place I could find it in was PipelineTest. Can we instead move that test to somewhere in runners core construction?", "url": "https://github.com/apache/beam/pull/13118#discussion_r508105003", "createdAt": "2020-10-19T22:43:52Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformReplacements.java", "diffHunk": "@@ -15,20 +15,22 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.beam.runners.core.construction;\n+package org.apache.beam.sdk.runners;\n \n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n \n import java.util.Map;\n import java.util.Set;\n-import org.apache.beam.sdk.runners.AppliedPTransform;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Internal;\n import org.apache.beam.sdk.transforms.PTransform;\n import org.apache.beam.sdk.values.PCollection;\n-import org.apache.beam.sdk.values.PValue;\n import org.apache.beam.sdk.values.TupleTag;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n \n /** */\n+@Internal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwOTk3Mg==", "bodyText": "This might make more sense in org.apache.beam.sdk.runners", "url": "https://github.com/apache/beam/pull/13118#discussion_r508109972", "createdAt": "2020-10-19T22:57:48Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzQxNzc2", "url": "https://github.com/apache/beam/pull/13118#pullrequestreview-513341776", "createdAt": "2020-10-21T06:26:54Z", "commit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyNjo1NVrOHlcCPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyNjo1NVrOHlcCPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxODY4NA==", "bodyText": "Yea. This is actually a simplified version of something that exists in DataflowRunner.java. I did not want to risk the stability of this change by also altering it there, but they should be merged.", "url": "https://github.com/apache/beam/pull/13118#discussion_r509018684", "createdAt": "2020-10-21T06:26:55Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java", "diffHunk": "@@ -1403,4 +1427,55 @@ public int size() {\n       };\n     }\n   }\n+\n+  public static <InputT, ViewT> PCollectionView<ViewT> findPCollectionView(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDcwOA=="}, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052a0f1fa03700c76ea52e27ef7a4667cfd09985", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/052a0f1fa03700c76ea52e27ef7a4667cfd09985", "committedDate": "2020-10-21T17:34:34Z", "message": "fixup! Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTAzMDgy", "url": "https://github.com/apache/beam/pull/13118#pullrequestreview-513903082", "createdAt": "2020-10-21T16:30:45Z", "commit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjozMDo0NlrOHl1PTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0Nzo1NVrOHl17qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMTYyOQ==", "bodyText": "Resolved: I am removing the moves from the PR to avoid getting blocked on anything that could reopen discussions.", "url": "https://github.com/apache/beam/pull/13118#discussion_r509431629", "createdAt": "2020-10-21T16:30:46Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformReplacements.java", "diffHunk": "@@ -15,20 +15,22 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.beam.runners.core.construction;\n+package org.apache.beam.sdk.runners;\n \n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n \n import java.util.Map;\n import java.util.Set;\n-import org.apache.beam.sdk.runners.AppliedPTransform;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Internal;\n import org.apache.beam.sdk.transforms.PTransform;\n import org.apache.beam.sdk.values.PCollection;\n-import org.apache.beam.sdk.values.PValue;\n import org.apache.beam.sdk.values.TupleTag;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n \n /** */\n+@Internal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNTAwMw=="}, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMzAxOA==", "bodyText": "I've moved it into the test class where it is used. I would still like to leave the alteration of DataflowRunner out of this PR, since my other PR that just adds a checkState illustrates that the DataflowRunner batch view overrides result in a corrupted graph that sort of works by luck. I don't want to disturb that potentially sensitive situation.", "url": "https://github.com/apache/beam/pull/13118#discussion_r509433018", "createdAt": "2020-10-21T16:32:53Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java", "diffHunk": "@@ -1403,4 +1427,55 @@ public int size() {\n       };\n     }\n   }\n+\n+  public static <InputT, ViewT> PCollectionView<ViewT> findPCollectionView(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDcwOA=="}, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzOTc1Ng==", "bodyText": "I put it here because it is a companion to PValue. It is conventional for that to be the plural name, in the same package. If you still want me to move it after this explanation, I will. I don't care enough to block on it.", "url": "https://github.com/apache/beam/pull/13118#discussion_r509439756", "createdAt": "2020-10-21T16:43:08Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwOTk3Mg=="}, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MjkyOA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/13118#discussion_r509442928", "createdAt": "2020-10-21T16:47:50Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+\n+/**\n+ * <b><i>For internal use. No backwards compatibility guarantees.</i></b>\n+ *\n+ * <p>A primitive value within Beam.\n+ */\n+@Internal\n+public class PValues {\n+\n+  // Do not instantiate\n+  private PValues() {}\n+\n+  // For backwards-compatibility, PCollectionView is still a \"PValue\" to users, which occurs in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTE4Ng=="}, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0Mjk4NQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/13118#discussion_r509442985", "createdAt": "2020-10-21T16:47:55Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+\n+/**\n+ * <b><i>For internal use. No backwards compatibility guarantees.</i></b>\n+ *\n+ * <p>A primitive value within Beam.\n+ */\n+@Internal\n+public class PValues {\n+\n+  // Do not instantiate\n+  private PValues() {}\n+\n+  // For backwards-compatibility, PCollectionView is still a \"PValue\" to users, which occurs in\n+  // three places:\n+  //\n+  //    POutput#expand (users can write custom POutputs)\n+  //    PInput#expand (users can write custom PInputs)\n+  //    PTransform#getAdditionalInputs (users can have their composites report inputs not passed by\n+  // apply())\n+  //\n+  // These all return Map<TupleTag<?> PValue>. A user's implementation of these methods is permitted\n+  // to return\n+  // either a PCollection or a PCollectionView for each PValue. PCollection's expand to themselves\n+  // and\n+  // PCollectionView expands to the PCollection that it is a view of.\n+  public static Map<TupleTag<?>, PCollection<?>> fullyExpand(\n+      Map<TupleTag<?>, PValue> partiallyExpanded) {\n+    Map<TupleTag<?>, PCollection<?>> result = new LinkedHashMap<>();\n+    for (Map.Entry<TupleTag<?>, PValue> pvalue : partiallyExpanded.entrySet()) {\n+      if (pvalue.getValue() instanceof PCollection) {\n+        PCollection<?> previous = result.put(pvalue.getKey(), (PCollection<?>) pvalue.getValue());\n+        checkArgument(\n+            previous == null,\n+            \"Found conflicting %ss in flattened expansion of %s: %s maps to %s and %s\",\n+            partiallyExpanded,\n+            TupleTag.class.getSimpleName(),\n+            pvalue.getKey(),\n+            previous,\n+            pvalue.getValue());\n+      } else {\n+        if (pvalue.getValue().expand().size() == 1\n+            && Iterables.getOnlyElement(pvalue.getValue().expand().values())\n+                .equals(pvalue.getValue())) {\n+          throw new IllegalStateException(\n+              String.format(\n+                  \"Non %s %s that expands into itself %s\",\n+                  PCollection.class.getSimpleName(),\n+                  PValue.class.getSimpleName(),\n+                  pvalue.getValue()));\n+        }\n+        // At this point we know it is a PCollectionView or some internal hacked PValue. To be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTM0Mw=="}, "originalCommit": {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56e1c6bd41e8b6a115f7ed06543cdb9c6f39926", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/a56e1c6bd41e8b6a115f7ed06543cdb9c6f39926", "committedDate": "2020-10-21T20:47:43Z", "message": "fixup! fixup! Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd", "committedDate": "2020-10-21T20:51:52Z", "message": "fixup! fixup! fixup! Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjEwNDUw", "url": "https://github.com/apache/beam/pull/13118#pullrequestreview-514210450", "createdAt": "2020-10-21T21:46:49Z", "commit": {"oid": "09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTAxNjIw", "url": "https://github.com/apache/beam/pull/13118#pullrequestreview-520101620", "createdAt": "2020-10-29T21:27:48Z", "commit": {"oid": "09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyNzo0OVrOHqvYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyNzo0OVrOHqvYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODQ4OQ==", "bodyText": "I think this line and the similar one below below made it so a PCollectionView is not in outputs, so topological traversal does not eagerly process PCollectionView as a value, and PCollectionViews also do not have a producer (which is correct for the Beam model). This seems to affect only Dataflow and only because it has special logic which treats PCollectionView as a value in its v1beta3 translation.", "url": "https://github.com/apache/beam/pull/13118#discussion_r514578489", "createdAt": "2020-10-29T21:27:49Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/runners/TransformHierarchy.java", "diffHunk": "@@ -483,12 +402,12 @@ private void setOutput(POutput output) {\n       checkState(\n           this.outputs == null, \"Tried to specify more than one output for %s\", getFullName());\n       checkNotNull(output, \"Tried to set the output of %s to null\", getFullName());\n-      this.outputs = output.expand();\n+      this.outputs = PValues.fullyExpand(output.expand());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd"}, "originalPosition": 267}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2060, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}