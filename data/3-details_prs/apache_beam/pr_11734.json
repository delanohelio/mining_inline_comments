{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDExOTgw", "number": 11734, "title": "[BEAM-9679] Add Core Transforms section / GroupByKey lesson to the Go SDK katas", "bodyText": "This pull request adds a GroupByKey lesson to the Go SDK katas.  I would like to request the following reviewers:\n(R: @lostluck )\n(R: @henryken )\nIf accepted, please wait until the Stepik course is updated before finally merging this PR.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-16T19:24:04Z", "url": "https://github.com/apache/beam/pull/11734", "merged": true, "mergeCommit": {"oid": "b2fefaf9e02b83942eeb1c7b85c8f765da89a14d"}, "closed": true, "closedAt": "2020-05-20T19:58:42Z", "author": {"login": "damondouglas"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchYYUYAH2gAyNDE5MDExOTgwOjM5ZjM2MjI1NzJhYzFmMTEyNzUyNzkwMGFmYTg2ZDc2ZDdhZTJlNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjC53ngH2gAyNDE5MDExOTgwOmQ3N2E3YWE4OGIyODk3ZTg0Nzc5MDY3OGU4MGE3N2M3ZjcwM2UwNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39f3622572ac1f1127527900afa86d76d7ae2e40", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/39f3622572ac1f1127527900afa86d76d7ae2e40", "committedDate": "2020-05-15T02:09:52Z", "message": "Add GroupByKey lesson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f5cdecf8b7e39faeb09a6d61c40589275ee63b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/78f5cdecf8b7e39faeb09a6d61c40589275ee63b", "committedDate": "2020-05-16T19:09:30Z", "message": "Edit task descriptor to make hint more meaningful"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/73715e693ebe46f8c3e6e4c054dda6c10eb5b9df", "committedDate": "2020-05-16T19:22:07Z", "message": "Rename ParDo function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzI1NTE5", "url": "https://github.com/apache/beam/pull/11734#pullrequestreview-413325519", "createdAt": "2020-05-18T07:15:09Z", "commit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzcxNTY5", "url": "https://github.com/apache/beam/pull/11734#pullrequestreview-413371569", "createdAt": "2020-05-18T08:22:47Z", "commit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoyMjo0N1rOGWscIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOToxMToxOVrOGWuS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0OTk1NA==", "bodyText": "Add newline above for better readability", "url": "https://github.com/apache/beam/pull/11734#discussion_r426449954", "createdAt": "2020-05-18T08:22:47Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/task.md", "diffHunk": "@@ -0,0 +1,50 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# GroupByKey\n+\n+GroupByKey is a Beam transform for processing collections of key/value pairs. It\u2019s a parallel\n+reduction operation, analogous to the Shuffle phase of a Map/Shuffle/Reduce-style algorithm. The\n+input to GroupByKey is a collection of key/value pairs that represents a multimap, where the\n+collection contains multiple pairs that have the same key, but different values. Given such a\n+collection, you use GroupByKey to collect all of the values associated with each unique key.\n+\n+**Kata:** Implement a \n+<a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+beam.GroupByKey</a> transform that groups words by its first letter.\n+<div class=\"hint\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NTkxMA==", "bodyText": "I think the whole function body should be part of answer placeholder.", "url": "https://github.com/apache/beam/pull/11734#discussion_r426455910", "createdAt": "2020-05-18T08:32:13Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,27 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tkv := beam.ParDo(s, splitByFirstChar, input)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NzI0NA==", "bodyText": "This function is not doing any splitting. It creates a KV.\nI suggest finding a better function name.", "url": "https://github.com/apache/beam/pull/11734#discussion_r426457244", "createdAt": "2020-05-18T08:34:29Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,27 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tkv := beam.ParDo(s, splitByFirstChar, input)\n+\treturn beam.GroupByKey(s, kv)\n+}\n+\n+func splitByFirstChar(element string) (uint8, string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1OTEwNA==", "bodyText": "Can we provide this hint as the 3rd so that the theory parts are hinted first?", "url": "https://github.com/apache/beam/pull/11734#discussion_r426459104", "createdAt": "2020-05-18T08:37:39Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/task.md", "diffHunk": "@@ -0,0 +1,50 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# GroupByKey\n+\n+GroupByKey is a Beam transform for processing collections of key/value pairs. It\u2019s a parallel\n+reduction operation, analogous to the Shuffle phase of a Map/Shuffle/Reduce-style algorithm. The\n+input to GroupByKey is a collection of key/value pairs that represents a multimap, where the\n+collection contains multiple pairs that have the same key, but different values. Given such a\n+collection, you use GroupByKey to collect all of the values associated with each unique key.\n+\n+**Kata:** Implement a \n+<a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+beam.GroupByKey</a> transform that groups words by its first letter.\n+<div class=\"hint\">\n+  Refer to <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> to solve this problem.\n+</div>\n+<div class=\"hint\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MzY5Ng==", "bodyText": "It was not apparent to me when reading this hint. Can help to improve further, something similar to below if it makes sense?\nTo return as KV struct, you can return two values from your DoFn. The first return value represents the Key, and the second return value represents the Value.", "url": "https://github.com/apache/beam/pull/11734#discussion_r426463696", "createdAt": "2020-05-18T08:44:45Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/task.md", "diffHunk": "@@ -0,0 +1,50 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# GroupByKey\n+\n+GroupByKey is a Beam transform for processing collections of key/value pairs. It\u2019s a parallel\n+reduction operation, analogous to the Shuffle phase of a Map/Shuffle/Reduce-style algorithm. The\n+input to GroupByKey is a collection of key/value pairs that represents a multimap, where the\n+collection contains multiple pairs that have the same key, but different values. Given such a\n+collection, you use GroupByKey to collect all of the values associated with each unique key.\n+\n+**Kata:** Implement a \n+<a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+beam.GroupByKey</a> transform that groups words by its first letter.\n+<div class=\"hint\">\n+  Refer to <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> to solve this problem.\n+</div>\n+<div class=\"hint\">\n+  Providing your ParDo a func with two return values, such as below, will transform a PCollection&lt;B&gt; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3NTY0Mw==", "bodyText": "If we return using rune, the output might not be as intuitive.\nI suggest that we return as KV<string, string>.", "url": "https://github.com/apache/beam/pull/11734#discussion_r426475643", "createdAt": "2020-05-18T09:03:34Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,27 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tkv := beam.ParDo(s, splitByFirstChar, input)\n+\treturn beam.GroupByKey(s, kv)\n+}\n+\n+func splitByFirstChar(element string) (uint8, string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4MDMzOA==", "bodyText": "How about this error message to make it easier to understand?\nt.Errorf(\"ApplyTransform() key = %v, got %v , want %v\", key, got, tt.want[key])", "url": "https://github.com/apache/beam/pull/11734#discussion_r426480338", "createdAt": "2020-05-18T09:11:19Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/test/task_test.go", "diffHunk": "@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"groupbykey/pkg/task\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+func TestApplyTransform(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant map[uint8][]string\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, \"apple\", \"ball\", \"car\", \"bear\", \"cheetah\", \"ant\"),\n+\t\t\twant: map[uint8][]string{\n+\t\t\t\t97: []string{\"apple\", \"ant\"},\n+\t\t\t\t98: []string{\"ball\", \"bear\"},\n+\t\t\t\t99: []string{\"car\", \"cheetah\"},\n+\t\t\t},\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tgot := task.ApplyTransform(s, tt.input)\n+\t\tbeam.ParDo0(s, func(key uint8, values func(*string) bool) {\n+\t\t\tvar got []string\n+\t\t\tvar v string\n+\t\t\tfor values(&v) {\n+\t\t\t\tgot = append(got, v)\n+\t\t\t}\n+\t\t\tif !reflect.DeepEqual(got, tt.want[key]) {\n+\t\t\t\tt.Errorf(\"ApplyTransform() = %v , want %v\", got, tt.want[key])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTE1Nzk3", "url": "https://github.com/apache/beam/pull/11734#pullrequestreview-413515797", "createdAt": "2020-05-18T11:45:24Z", "commit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo0NToyNFrOGWzf3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTo0NzoyNlrOGWzj5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTU5Ng==", "bodyText": "How about this example?\nfunc doFn(element string) (string, string)  {\n  key := // extract key\n  value := // extract value\n  return key, value\n}", "url": "https://github.com/apache/beam/pull/11734#discussion_r426565596", "createdAt": "2020-05-18T11:45:24Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/task.md", "diffHunk": "@@ -0,0 +1,50 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# GroupByKey\n+\n+GroupByKey is a Beam transform for processing collections of key/value pairs. It\u2019s a parallel\n+reduction operation, analogous to the Shuffle phase of a Map/Shuffle/Reduce-style algorithm. The\n+input to GroupByKey is a collection of key/value pairs that represents a multimap, where the\n+collection contains multiple pairs that have the same key, but different values. Given such a\n+collection, you use GroupByKey to collect all of the values associated with each unique key.\n+\n+**Kata:** Implement a \n+<a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+beam.GroupByKey</a> transform that groups words by its first letter.\n+<div class=\"hint\">\n+  Refer to <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> to solve this problem.\n+</div>\n+<div class=\"hint\">\n+  Providing your ParDo a func with two return values, such as below, will transform a PCollection&lt;B&gt; \n+  into a PCollection&lt;KV&lt;A,B&gt;&gt;.\n+  \n+```\n+func someFunc(element string) (uint8, string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NjYyOQ==", "bodyText": "Can be simplified to 97: {\"apple\", \"ant\"}", "url": "https://github.com/apache/beam/pull/11734#discussion_r426566629", "createdAt": "2020-05-18T11:47:26Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/test/task_test.go", "diffHunk": "@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"groupbykey/pkg/task\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+func TestApplyTransform(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant map[uint8][]string\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, \"apple\", \"ball\", \"car\", \"bear\", \"cheetah\", \"ant\"),\n+\t\t\twant: map[uint8][]string{\n+\t\t\t\t97: []string{\"apple\", \"ant\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73715e693ebe46f8c3e6e4c054dda6c10eb5b9df"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a84ac41a2fee556ba52a709a3c37d6758ed11b0", "author": {"user": {"login": "damondouglas", "name": "Damon Douglas"}}, "url": "https://github.com/apache/beam/commit/5a84ac41a2fee556ba52a709a3c37d6758ed11b0", "committedDate": "2020-05-19T02:48:03Z", "message": "Edit as per PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NzA1NDg2", "url": "https://github.com/apache/beam/pull/11734#pullrequestreview-414705486", "createdAt": "2020-05-19T18:15:46Z", "commit": {"oid": "5a84ac41a2fee556ba52a709a3c37d6758ed11b0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNTo0NlrOGXs1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNTo0NlrOGXs1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwNTA1Ng==", "bodyText": "Consider using the cmp package instead of reflect.DeepEqual which doesn't allow handling ordering changes or similar.\nhttps://pkg.go.dev/github.com/google/go-cmp/cmp?tab=doc", "url": "https://github.com/apache/beam/pull/11734#discussion_r427505056", "createdAt": "2020-05-19T18:15:46Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/GroupByKey/GroupByKey/test/task_test.go", "diffHunk": "@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"groupbykey/pkg/task\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+func TestApplyTransform(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant map[string][]string\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, \"apple\", \"ball\", \"car\", \"bear\", \"cheetah\", \"ant\"),\n+\t\t\twant: map[string][]string{\n+\t\t\t\t\"a\": {\"apple\", \"ant\"},\n+\t\t\t\t\"b\": {\"ball\", \"bear\"},\n+\t\t\t\t\"c\": {\"car\", \"cheetah\"},\n+\t\t\t},\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tgot := task.ApplyTransform(s, tt.input)\n+\t\tbeam.ParDo0(s, func(key string, values func(*string) bool) {\n+\t\t\tvar got []string\n+\t\t\tvar v string\n+\t\t\tfor values(&v) {\n+\t\t\t\tgot = append(got, v)\n+\t\t\t}\n+\t\t\tif !reflect.DeepEqual(got, tt.want[key]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a84ac41a2fee556ba52a709a3c37d6758ed11b0"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea101eef2ce2ce164de64f72724fcb08818930c0", "author": {"user": {"login": "damondouglas", "name": "Damon Douglas"}}, "url": "https://github.com/apache/beam/commit/ea101eef2ce2ce164de64f72724fcb08818930c0", "committedDate": "2020-05-19T18:43:46Z", "message": "Use google/go-cmp instead of reflect in tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTcwMTMw", "url": "https://github.com/apache/beam/pull/11734#pullrequestreview-414970130", "createdAt": "2020-05-20T03:37:54Z", "commit": {"oid": "ea101eef2ce2ce164de64f72724fcb08818930c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d77a7aa88b2897e847790678e80a77c7f703e068", "author": {"user": {"login": "damondouglas", "name": "Damon Douglas"}}, "url": "https://github.com/apache/beam/commit/d77a7aa88b2897e847790678e80a77c7f703e068", "committedDate": "2020-05-20T06:16:27Z", "message": "Update stepik course"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4631, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}