{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MTM4MTEy", "number": 11708, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToxNToxMVrOD8pveQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjozNjo0MlrOD9CHnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTI1MDQ5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToxNToxMVrOGVufIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToxNToxMVrOGVufIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNDkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n          \n          \n            \n                throw new UnsupportedOperationException(\"Un-globbable filesystem.\");", "url": "https://github.com/apache/beam/pull/11708#discussion_r425434913", "createdAt": "2020-05-14T21:15:11Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTI1MjUxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToxNTo1MVrOGVugXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjozNDoyOVrOGVwgyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNTIyOA==", "bodyText": "Nice! But I don't see this actually used anywhere?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425435228", "createdAt": "2020-05-14T21:15:51Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2Mjk0NA==", "bodyText": "It's used on the Python side.", "url": "https://github.com/apache/beam/pull/11708#discussion_r425462944", "createdAt": "2020-05-14T22:19:59Z", "author": {"login": "robertwb"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNTIyOA=="}, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2ODEwNg==", "bodyText": "That's what I get for only reading half the PR...", "url": "https://github.com/apache/beam/pull/11708#discussion_r425468106", "createdAt": "2020-05-14T22:34:29Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNTIyOA=="}, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTI3MjAwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToyMjoxOFrOGVuslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToyMjoxOFrOGVuslg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzODM1OA==", "bodyText": "How did I never know this? \ud83d\ude06", "url": "https://github.com/apache/beam/pull/11708#discussion_r425438358", "createdAt": "2020-05-14T21:22:18Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static java.nio.channels.Channels.newInputStream;\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.ReadableByteChannel;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class ClassLoaderFileSystemTest {\n+\n+  private static final String SOME_CLASS =\n+      \"classpath://org/apache/beam/sdk/io/ClassLoaderFilesystem.class\";\n+\n+  @Test\n+  public void testOpen() throws IOException {\n+    ClassLoaderFileSystem filesystem = new ClassLoaderFileSystem();\n+    ReadableByteChannel channel = filesystem.open(filesystem.matchNewResource(SOME_CLASS, false));\n+    checkIsClass(channel);\n+  }\n+\n+  @Test\n+  public void testRegistrar() throws IOException {\n+    ReadableByteChannel channel = FileSystems.open(FileSystems.matchNewResource(SOME_CLASS, false));\n+    checkIsClass(channel);\n+  }\n+\n+  public void checkIsClass(ReadableByteChannel channel) throws IOException {\n+    FileSystems.setDefaultPipelineOptions(PipelineOptionsFactory.create());\n+    InputStream inputStream = newInputStream(channel);\n+    byte[] magic = new byte[4];\n+    inputStream.read(magic);\n+    assertArrayEquals(magic, new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTI4MTA1OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToyNToyNlrOGVuyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1MToxNFrOGWQNIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTg3OA==", "bodyText": "Can we add a couple trivial unit tests as sanity checks / documentation for resolve and getCurrentDirectory?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425439878", "createdAt": "2020-05-14T21:25:26Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n+  }\n+\n+  @Override\n+  protected WritableByteChannel create(\n+      ClassLoaderResourceId resourceId, CreateOptions createOptions) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    InputStream inputStream =\n+        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+    if (inputStream == null) {\n+      throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n+    }\n+    return Channels.newChannel(inputStream);\n+  }\n+\n+  @Override\n+  protected void copy(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void rename(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void delete(Collection<ClassLoaderResourceId> resourceIds) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ClassLoaderResourceId matchNewResource(String path, boolean isDirectory) {\n+    return new ClassLoaderResourceId(path);\n+  }\n+\n+  @Override\n+  protected String getScheme() {\n+    return SCHEMA;\n+  }\n+\n+  public static class ClassLoaderResourceId implements ResourceId {\n+\n+    private final String path;\n+\n+    private ClassLoaderResourceId(String path) {\n+      checkArgument(path.startsWith(PREFIX), path);\n+      this.path = path;\n+    }\n+\n+    @Override\n+    public ResourceId resolve(String other, ResolveOptions resolveOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MjgzMA==", "bodyText": "The documentation is in the super classes, but I added a test.", "url": "https://github.com/apache/beam/pull/11708#discussion_r425462830", "createdAt": "2020-05-14T22:19:43Z", "author": {"login": "robertwb"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n+  }\n+\n+  @Override\n+  protected WritableByteChannel create(\n+      ClassLoaderResourceId resourceId, CreateOptions createOptions) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    InputStream inputStream =\n+        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+    if (inputStream == null) {\n+      throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n+    }\n+    return Channels.newChannel(inputStream);\n+  }\n+\n+  @Override\n+  protected void copy(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void rename(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void delete(Collection<ClassLoaderResourceId> resourceIds) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ClassLoaderResourceId matchNewResource(String path, boolean isDirectory) {\n+    return new ClassLoaderResourceId(path);\n+  }\n+\n+  @Override\n+  protected String getScheme() {\n+    return SCHEMA;\n+  }\n+\n+  public static class ClassLoaderResourceId implements ResourceId {\n+\n+    private final String path;\n+\n+    private ClassLoaderResourceId(String path) {\n+      checkArgument(path.startsWith(PREFIX), path);\n+      this.path = path;\n+    }\n+\n+    @Override\n+    public ResourceId resolve(String other, ResolveOptions resolveOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTg3OA=="}, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4NzM2MQ==", "bodyText": "Thanks!", "url": "https://github.com/apache/beam/pull/11708#discussion_r425987361", "createdAt": "2020-05-15T18:51:14Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n+  }\n+\n+  @Override\n+  protected WritableByteChannel create(\n+      ClassLoaderResourceId resourceId, CreateOptions createOptions) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    InputStream inputStream =\n+        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+    if (inputStream == null) {\n+      throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n+    }\n+    return Channels.newChannel(inputStream);\n+  }\n+\n+  @Override\n+  protected void copy(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void rename(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void delete(Collection<ClassLoaderResourceId> resourceIds) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ClassLoaderResourceId matchNewResource(String path, boolean isDirectory) {\n+    return new ClassLoaderResourceId(path);\n+  }\n+\n+  @Override\n+  protected String getScheme() {\n+    return SCHEMA;\n+  }\n+\n+  public static class ClassLoaderResourceId implements ResourceId {\n+\n+    private final String path;\n+\n+    private ClassLoaderResourceId(String path) {\n+      checkArgument(path.startsWith(PREFIX), path);\n+      this.path = path;\n+    }\n+\n+    @Override\n+    public ResourceId resolve(String other, ResolveOptions resolveOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTg3OA=="}, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjY1NzM4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODozOTo1MFrOGWP3fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTo0NzoxM1rOGWUu9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTgyMA==", "bodyText": "Can't we remove this now?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425981820", "createdAt": "2020-05-15T18:39:50Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)\n     return port\n \n   def _stop_artifact_service(self):\n     self._artifact_staging_server.stop(1)\n-    self._artifact_staging_service.close()\n-    self._artifact_manifest_location = (\n-        self._artifact_staging_service.retrieval_token(self._job_id))\n+    self._artifact_manifest_location = None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MTU1OA==", "bodyText": "Yep. Done.", "url": "https://github.com/apache/beam/pull/11708#discussion_r426061558", "createdAt": "2020-05-15T21:47:13Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)\n     return port\n \n   def _stop_artifact_service(self):\n     self._artifact_staging_server.stop(1)\n-    self._artifact_staging_service.close()\n-    self._artifact_manifest_location = (\n-        self._artifact_staging_service.retrieval_token(self._job_id))\n+    self._artifact_manifest_location = None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTgyMA=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjY1ODUwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo0MDowOFrOGWP4Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTo0NjozOFrOGWUuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTk3NQ==", "bodyText": "Why error?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425981975", "createdAt": "2020-05-15T18:40:08Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MTM5Mw==", "bodyText": "Leftover debugging. Removed.", "url": "https://github.com/apache/beam/pull/11708#discussion_r426061393", "createdAt": "2020-05-15T21:46:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTk3NQ=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjY2OTg3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo0NDowMFrOGWP_Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTo0NjowN1rOGWUtxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Mzg0Mg==", "bodyText": "Can we get a type annotation and/or comment on the return value here?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425983842", "createdAt": "2020-05-15T18:44:00Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -278,6 +279,23 @@ def to_runner_api(self):\n         state=self.state)\n \n \n+class JarArtifactManager(object):\n+  def __init__(self, jar_path, root):\n+    self._root = root\n+    self._zipfile_handle = zipfile.ZipFile(jar_path, 'a')\n+\n+  def close(self):\n+    self._zipfile_handle.close()\n+\n+  def file_writer(self, path):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MTI1NA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11708#discussion_r426061254", "createdAt": "2020-05-15T21:46:07Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -278,6 +279,23 @@ def to_runner_api(self):\n         state=self.state)\n \n \n+class JarArtifactManager(object):\n+  def __init__(self, jar_path, root):\n+    self._root = root\n+    self._zipfile_handle = zipfile.ZipFile(jar_path, 'a')\n+\n+  def close(self):\n+    self._zipfile_handle.close()\n+\n+  def file_writer(self, path):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Mzg0Mg=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjY4OTM4OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1MDoyNFrOGWQLoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTozOTo0NlrOGWUl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Njk3Nw==", "bodyText": "Should we change PortablePipelineJarUtils to use ClassLoaderFileSystem? (Maybe in a follow-up PR) https://github.com/apache/beam/blob/master/runners/java-job-service/src/main/java/org/apache/beam/runners/jobsubmission/PortablePipelineJarUtils.java", "url": "https://github.com/apache/beam/pull/11708#discussion_r425986977", "createdAt": "2020-05-15T18:50:24Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1OTIzMQ==", "bodyText": "Yes, we'll want to do that too (and use the new artifact api).", "url": "https://github.com/apache/beam/pull/11708#discussion_r426059231", "createdAt": "2020-05-15T21:39:46Z", "author": {"login": "robertwb"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Njk3Nw=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzI0NDQ0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjozNjo0MlrOGWVlhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjozNjo0MlrOGWVlhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NTUyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                and an reference that can later be used to read this file.\"\"\"\n          \n          \n            \n                and a reference that can later be used to read this file.\"\"\"", "url": "https://github.com/apache/beam/pull/11708#discussion_r426075525", "createdAt": "2020-05-15T22:36:42Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -288,6 +289,9 @@ def close(self):\n     self._zipfile_handle.close()\n \n   def file_writer(self, path):\n+    # type: (str) -> Tuple[BinaryIO, str]\n+    \"\"\"Given a relative path, returns an open handle that can be written to\n+    and an reference that can later be used to read this file.\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122b1598593d417b79d61457991fe6fce7f31744"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3764, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}