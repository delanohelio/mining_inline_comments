{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjIwNjc3", "number": 11092, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo0NjowMlrODv6rgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoyNzo1M1rODwO3hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTcxMDcyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo0NjowMlrOGCnf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo1MTo1OVrOGDPmqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg==", "bodyText": "@tvalentyn Do we have a JIRA issue that accumulates all things that have to be done when Beam drops py2? I know there is a https://issues.apache.org/jira/browse/BEAM-5949, but this refers only to __ne__", "url": "https://github.com/apache/beam/pull/11092#discussion_r405397492", "createdAt": "2020-04-08T09:46:02Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n), *map(self.getrandbits, itertools.repeat(64,\n+                                                                 n)))[:length]\n+\n+\n+Generator = _Random\n+\n+# TODO: Remove this when Beam drops Python 2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdbcae364277d5ea20547e8ed24df1920dec4b0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMTE3NQ==", "bodyText": "yes - https://issues.apache.org/jira/browse/BEAM-7372", "url": "https://github.com/apache/beam/pull/11092#discussion_r405711175", "createdAt": "2020-04-08T17:59:54Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n), *map(self.getrandbits, itertools.repeat(64,\n+                                                                 n)))[:length]\n+\n+\n+Generator = _Random\n+\n+# TODO: Remove this when Beam drops Python 2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg=="}, "originalCommit": {"oid": "1bdbcae364277d5ea20547e8ed24df1920dec4b0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMTM0Mw==", "bodyText": "Commented on BEAM-5459, thank you!", "url": "https://github.com/apache/beam/pull/11092#discussion_r405711343", "createdAt": "2020-04-08T18:00:10Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n), *map(self.getrandbits, itertools.repeat(64,\n+                                                                 n)))[:length]\n+\n+\n+Generator = _Random\n+\n+# TODO: Remove this when Beam drops Python 2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg=="}, "originalCommit": {"oid": "1bdbcae364277d5ea20547e8ed24df1920dec4b0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NDU2OA==", "bodyText": "Thanks, this is what I was looking for", "url": "https://github.com/apache/beam/pull/11092#discussion_r406054568", "createdAt": "2020-04-09T08:51:59Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n), *map(self.getrandbits, itertools.repeat(64,\n+                                                                 n)))[:length]\n+\n+\n+Generator = _Random\n+\n+# TODO: Remove this when Beam drops Python 2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg=="}, "originalCommit": {"oid": "1bdbcae364277d5ea20547e8ed24df1920dec4b0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTAxODMwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoyNzo1M1rOGDHdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0MToyNlrOGDiz7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA==", "bodyText": "Since we don't need py2 compatibility anymore, consider using to_bytes. Here's an equivalent for chunk_size=8. It seems to be somewhat slower than current method (perhaps since I'm not using map+repeat()), but with larger chuck_size, seems to be more efficient. Large chunk size may be less efficient for short bytesequences.\nchunk_size_bytes = 8 // TBD - larger chunks seem to improve performance.\nchunk_size_bits = chunk_size_bytes * 8\nnum_chunks = length // chunk_size_bytes + 1\n\nreturn b''.join([self.getrandbits(chunk_size_bits).to_bytes(chunk_size_bytes, sys.byteorder) for _ in range(num_chunks)])[:length]\n\nIf you decide to keep current implementation - please add a comment explaining the mechanics for readers not familiar with this code (we generate 8-byte stings, and then fit them into a representation of C++'s long-long, which also takes up 8 bytes).", "url": "https://github.com/apache/beam/pull/11092#discussion_r405921080", "createdAt": "2020-04-09T02:27:53Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n),\n+        *map(self.getrandbits, itertools.repeat(64, n)))[:length]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ab608743e0c0fc182e4ab10da48239da1cf18c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MjI0NQ==", "bodyText": "How about not using chunks at all? I did some tests again and, surprisingly, it looks like we don't need them.\nHere's a test with a set of different chunk sizes:\nfor CHUNK_SIZE in {4,8,32,64}; do python -m timeit -s \"import random; import sys; chunk_size=$CHUNK_SIZE; len=10; num_chunks=len//chunk_size+1\" 'b\"\".join([random.getrandbits(chunk_size * 8).to_bytes(chunk_size, sys.byteorder) for _ in range(num_chunks)])[:len]'; done \nResults:\nfor len==10:\n200000 loops, best of 5: 1.62 usec per loop\n200000 loops, best of 5: 1.34 usec per loop\n200000 loops, best of 5: 1.02 usec per loop\n200000 loops, best of 5: 1.19 usec per loop\nfor len==1000:\n5000 loops, best of 5: 87.7 usec per loop\n5000 loops, best of 5: 50.7 usec per loop\n20000 loops, best of 5: 16.7 usec per loop\n20000 loops, best of 5: 11 usec per loop\nAnd without chunks:\npython -m timeit -s \"import random; import sys; len=10\" 'random.getrandbits(len * 8).to_bytes(len, sys.byteorder)'\nfor len==10:\n1000000 loops, best of 5: 358 nsec per loop\nfor len==1000:\n50000 loops, best of 5: 4.5 usec per loop", "url": "https://github.com/apache/beam/pull/11092#discussion_r406142245", "createdAt": "2020-04-09T11:36:02Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n),\n+        *map(self.getrandbits, itertools.repeat(64, n)))[:length]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA=="}, "originalCommit": {"oid": "e6ab608743e0c0fc182e4ab10da48239da1cf18c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NDcyNg==", "bodyText": "I'll push a commit with that so you can see how it looks in the code.", "url": "https://github.com/apache/beam/pull/11092#discussion_r406144726", "createdAt": "2020-04-09T11:41:21Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n),\n+        *map(self.getrandbits, itertools.repeat(64, n)))[:length]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA=="}, "originalCommit": {"oid": "e6ab608743e0c0fc182e4ab10da48239da1cf18c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2OTI2Mg==", "bodyText": "This is great. I really like how we simplified this code.", "url": "https://github.com/apache/beam/pull/11092#discussion_r406369262", "createdAt": "2020-04-09T17:41:26Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n),\n+        *map(self.getrandbits, itertools.repeat(64, n)))[:length]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA=="}, "originalCommit": {"oid": "e6ab608743e0c0fc182e4ab10da48239da1cf18c"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1840, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}