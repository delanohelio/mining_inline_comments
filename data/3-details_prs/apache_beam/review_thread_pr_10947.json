{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODQ5MTA5", "number": 10947, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo1Njo0N1rODiZu9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNzo1M1rODiZ-wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzk5Nzk2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo1Njo0OFrOFtoM8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDoyOToyOFrOFtuyqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODkxNA==", "bodyText": "Why do we need to set key deserializer explicitly here if it will be overridden later?", "url": "https://github.com/apache/beam/pull/10947#discussion_r383388914", "createdAt": "2020-02-24T16:56:48Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -588,7 +584,10 @@ public void setValueDeserializer(String valueDeserializer) {\n      * provide the key coder explicitly.\n      */\n     public Read<K, V> withKeyDeserializer(Class<? extends Deserializer<K>> keyDeserializer) {\n-      return toBuilder().setKeyDeserializer(keyDeserializer).build();\n+      return toBuilder()\n+          .setKeyDeserializer(keyDeserializer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5Njg3NA==", "bodyText": "This was to save the state of the object in case someone call the getDeserializer method, but it is now inconsistent so probably better to remove it.", "url": "https://github.com/apache/beam/pull/10947#discussion_r383496874", "createdAt": "2020-02-24T20:29:28Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -588,7 +584,10 @@ public void setValueDeserializer(String valueDeserializer) {\n      * provide the key coder explicitly.\n      */\n     public Read<K, V> withKeyDeserializer(Class<? extends Deserializer<K>> keyDeserializer) {\n-      return toBuilder().setKeyDeserializer(keyDeserializer).build();\n+      return toBuilder()\n+          .setKeyDeserializer(keyDeserializer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODkxNA=="}, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDAxMzA5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowMDo0NlrOFtoWUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTozODoxMVrOFt-0VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5MTMxMw==", "bodyText": "I'd suggest to extract these two string arguments into dedicated Confluent Schema Registry input arguments object to avoid potential collisions with other withKeyDeserializer(String, String) methods that can be added in the future. Also, it can be extended (if needed) and it will make clear that this is used only for CSR's schema.", "url": "https://github.com/apache/beam/pull/10947#discussion_r383391313", "createdAt": "2020-02-24T17:00:46Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -600,7 +599,20 @@ public void setValueDeserializer(String valueDeserializer) {\n      */\n     public Read<K, V> withKeyDeserializerAndCoder(\n         Class<? extends Deserializer<K>> keyDeserializer, Coder<K> keyCoder) {\n-      return toBuilder().setKeyDeserializer(keyDeserializer).setKeyCoder(keyCoder).build();\n+      return withKeyDeserializer(keyDeserializer).toBuilder().setKeyCoder(keyCoder).build();\n+    }\n+\n+    /**\n+     * Specify Confluent schema registry url and subject to get a deserializer (and schema) from\n+     * Confluent Schema Registry.\n+     */\n+    public Read<K, V> withKeyDeserializer(String schemaRegistryUrl, String subject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1OTQ0NQ==", "bodyText": "Let's remove completely the method signature and let users use the DeserializerProvider verion that way they will put explicitly the Confluent variant with their arguments.", "url": "https://github.com/apache/beam/pull/10947#discussion_r383759445", "createdAt": "2020-02-25T09:38:11Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -600,7 +599,20 @@ public void setValueDeserializer(String valueDeserializer) {\n      */\n     public Read<K, V> withKeyDeserializerAndCoder(\n         Class<? extends Deserializer<K>> keyDeserializer, Coder<K> keyCoder) {\n-      return toBuilder().setKeyDeserializer(keyDeserializer).setKeyCoder(keyCoder).build();\n+      return withKeyDeserializer(keyDeserializer).toBuilder().setKeyCoder(keyCoder).build();\n+    }\n+\n+    /**\n+     * Specify Confluent schema registry url and subject to get a deserializer (and schema) from\n+     * Confluent Schema Registry.\n+     */\n+    public Read<K, V> withKeyDeserializer(String schemaRegistryUrl, String subject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5MTMxMw=="}, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDAyMTc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowMzowNlrOFtoboQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozMTozM1rOFtu2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5MjY3Mw==", "bodyText": "The same question as for withKeyDeserializer", "url": "https://github.com/apache/beam/pull/10947#discussion_r383392673", "createdAt": "2020-02-24T17:03:06Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -612,7 +624,10 @@ public void setValueDeserializer(String valueDeserializer) {\n      * Coder)} to provide the value coder explicitly.\n      */\n     public Read<K, V> withValueDeserializer(Class<? extends Deserializer<V>> valueDeserializer) {\n-      return toBuilder().setValueDeserializer(valueDeserializer).build();\n+      return toBuilder()\n+          .setValueDeserializer(valueDeserializer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5Nzc4NA==", "bodyText": "I will remove it as mentioned above.", "url": "https://github.com/apache/beam/pull/10947#discussion_r383497784", "createdAt": "2020-02-24T20:31:33Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -612,7 +624,10 @@ public void setValueDeserializer(String valueDeserializer) {\n      * Coder)} to provide the value coder explicitly.\n      */\n     public Read<K, V> withValueDeserializer(Class<? extends Deserializer<V>> valueDeserializer) {\n-      return toBuilder().setValueDeserializer(valueDeserializer).build();\n+      return toBuilder()\n+          .setValueDeserializer(valueDeserializer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5MjY3Mw=="}, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDAyNjkxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNDoyOFrOFtoeyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNDoyOFrOFtoeyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5MzQ4Mw==", "bodyText": "The same note as for withKeyDeserializer(String, String)", "url": "https://github.com/apache/beam/pull/10947#discussion_r383393483", "createdAt": "2020-02-24T17:04:28Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -624,40 +639,20 @@ public void setValueDeserializer(String valueDeserializer) {\n      */\n     public Read<K, V> withValueDeserializerAndCoder(\n         Class<? extends Deserializer<V>> valueDeserializer, Coder<V> valueCoder) {\n-      return toBuilder().setValueDeserializer(valueDeserializer).setValueCoder(valueCoder).build();\n+      return withValueDeserializer(valueDeserializer).toBuilder().setValueCoder(valueCoder).build();\n     }\n \n     /**\n-     * Allows to specify custom {@link CSRClientProvider}. {@link CSRClientProvider} provides {@link\n-     * SchemaRegistryClient} instance which is used later for communication with Confluent Schema\n-     * Registry. You should use this method if {@link Read#withCSRClientProvider(String, String,\n-     * String)} does not suit your needs.\n+     * Specify Confluent schema registry url and subject to get a deserializer (and schema) from\n+     * Confluent Schema Registry.\n      */\n-    Read<K, V> withCSRClientProvider(CSRClientProvider csrClientProvider) {\n-      Builder<K, V> builder = toBuilder();\n-      if (csrClientProvider.getKeySchemaSubject() != null) {\n-        builder.setKeyDeserializer((Class) KafkaAvroDeserializer.class);\n-      }\n-      if (csrClientProvider.getValueSchemaSubject() != null) {\n-        builder.setValueDeserializer((Class) KafkaAvroDeserializer.class);\n-      }\n-      return builder\n-          .setCSRClientProvider(csrClientProvider)\n-          .build()\n-          .withConsumerConfigUpdates(\n-              ImmutableMap.of(\n-                  KafkaAvroDeserializerConfig.SCHEMA_REGISTRY_URL_CONFIG,\n-                  csrClientProvider.getSchemaRegistryUrl()));\n+    public Read<K, V> withValueDeserializer(String schemaRegistryUrl, String subject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDAzMzc1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/LocalDeserializerProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNjoyOFrOFtoi-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo0Njo0N1rOFtvRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NDU1NA==", "bodyText": "Please, add Javadoc for this class", "url": "https://github.com/apache/beam/pull/10947#discussion_r383394554", "createdAt": "2020-02-24T17:06:28Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/LocalDeserializerProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kafka;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import org.apache.beam.sdk.coders.CannotProvideCoderException;\n+import org.apache.beam.sdk.coders.CoderRegistry;\n+import org.apache.beam.sdk.coders.NullableCoder;\n+import org.apache.kafka.common.serialization.Deserializer;\n+\n+class LocalDeserializerProvider<T> implements DeserializerProvider<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNDc1OA==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/10947#discussion_r383504758", "createdAt": "2020-02-24T20:46:47Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/LocalDeserializerProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kafka;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import org.apache.beam.sdk.coders.CannotProvideCoderException;\n+import org.apache.beam.sdk.coders.CoderRegistry;\n+import org.apache.beam.sdk.coders.NullableCoder;\n+import org.apache.kafka.common.serialization.Deserializer;\n+\n+class LocalDeserializerProvider<T> implements DeserializerProvider<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NDU1NA=="}, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDAzODQxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/LocalDeserializerProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNzo1M1rOFtolyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo0Njo1NFrOFtvRog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NTI3Mw==", "bodyText": "Please, add a Javadoc from \"old\" inferCoder() method here.", "url": "https://github.com/apache/beam/pull/10947#discussion_r383395273", "createdAt": "2020-02-24T17:07:53Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/LocalDeserializerProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kafka;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import org.apache.beam.sdk.coders.CannotProvideCoderException;\n+import org.apache.beam.sdk.coders.CoderRegistry;\n+import org.apache.beam.sdk.coders.NullableCoder;\n+import org.apache.kafka.common.serialization.Deserializer;\n+\n+class LocalDeserializerProvider<T> implements DeserializerProvider<T> {\n+  private Class<? extends Deserializer<T>> deserializer;\n+\n+  private LocalDeserializerProvider(Class<? extends Deserializer<T>> deserializer) {\n+    checkArgument(deserializer != null, \"You should provide a deserializer.\");\n+    this.deserializer = deserializer;\n+  }\n+\n+  static <T> LocalDeserializerProvider<T> of(Class<? extends Deserializer<T>> deserializer) {\n+    return new LocalDeserializerProvider<>(deserializer);\n+  }\n+\n+  @Override\n+  public Deserializer<T> getDeserializer(Map<String, ?> configs, boolean isKey) {\n+    try {\n+      Deserializer<T> deserializer = this.deserializer.getDeclaredConstructor().newInstance();\n+      deserializer.configure(configs, isKey);\n+      return deserializer;\n+    } catch (InstantiationException\n+        | IllegalAccessException\n+        | InvocationTargetException\n+        | NoSuchMethodException e) {\n+      throw new RuntimeException(\"Could not instantiate deserializers\", e);\n+    }\n+  }\n+\n+  @Override\n+  public NullableCoder<T> getCoder(CoderRegistry coderRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwNDgwMg==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/10947#discussion_r383504802", "createdAt": "2020-02-24T20:46:54Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/LocalDeserializerProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kafka;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import org.apache.beam.sdk.coders.CannotProvideCoderException;\n+import org.apache.beam.sdk.coders.CoderRegistry;\n+import org.apache.beam.sdk.coders.NullableCoder;\n+import org.apache.kafka.common.serialization.Deserializer;\n+\n+class LocalDeserializerProvider<T> implements DeserializerProvider<T> {\n+  private Class<? extends Deserializer<T>> deserializer;\n+\n+  private LocalDeserializerProvider(Class<? extends Deserializer<T>> deserializer) {\n+    checkArgument(deserializer != null, \"You should provide a deserializer.\");\n+    this.deserializer = deserializer;\n+  }\n+\n+  static <T> LocalDeserializerProvider<T> of(Class<? extends Deserializer<T>> deserializer) {\n+    return new LocalDeserializerProvider<>(deserializer);\n+  }\n+\n+  @Override\n+  public Deserializer<T> getDeserializer(Map<String, ?> configs, boolean isKey) {\n+    try {\n+      Deserializer<T> deserializer = this.deserializer.getDeclaredConstructor().newInstance();\n+      deserializer.configure(configs, isKey);\n+      return deserializer;\n+    } catch (InstantiationException\n+        | IllegalAccessException\n+        | InvocationTargetException\n+        | NoSuchMethodException e) {\n+      throw new RuntimeException(\"Could not instantiate deserializers\", e);\n+    }\n+  }\n+\n+  @Override\n+  public NullableCoder<T> getCoder(CoderRegistry coderRegistry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NTI3Mw=="}, "originalCommit": {"oid": "8b0a24860f853f5ad8aae0c1e454cf34211a4f8a"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1898, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}