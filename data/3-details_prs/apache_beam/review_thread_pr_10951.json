{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MjAwMDk5", "number": 10951, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo1Mjo0MlrODjQXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozOToxOVrODkygTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjk0ODkyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/combiners_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo1Mjo0MlrOFu9rOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo1Mjo0MlrOFu9rOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4OTMwNA==", "bodyText": "We still want to ensure there is at least one 15 firing. (If we're being pedantic, a single on-time firing, plus a number of late firings) The second argument to assert_that can be any predicate taking the set of actual elements.", "url": "https://github.com/apache/beam/pull/10951#discussion_r384789304", "createdAt": "2020-02-26T21:52:42Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -482,9 +485,13 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n               trigger=AfterWatermark(early=AfterAll(AfterCount(1))))\n           | beam.CombineGlobally(sum).without_defaults().with_fanout(2))\n \n-      # The frings for DISCARDING mode is [1, 2, 3, 4, 5, 0, 0].\n-      firings = [1, 3, 6, 10, 15, 15, 15]\n-      assert_that(result, equal_to(firings))\n+      # Partition the result into early_firings and _.\n+      # In ACCUMULATING mode, the early_frings is [1, 3, 6, 10], other\n+      # firings are [15, 15, ...]. Different runners have different number\n+      # of 15s.\n+      early_firings, _ = result | beam.Partition(is_early_firing, 2)\n+      exepected_early_firings = [1, 3, 6, 10]\n+      assert_that(early_firings, equal_to(exepected_early_firings))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faaed37dd4aee6e3d9d4c52c9cbf099dc7338dda"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjk0OTQ0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/combiners_test.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo1Mjo1NVrOFu9rlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzowODowM1rOFwFTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4OTM5Ng==", "bodyText": "Wouldn't it be better to filter on the pane info itself?", "url": "https://github.com/apache/beam/pull/10951#discussion_r384789396", "createdAt": "2020-02-26T21:52:55Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -470,6 +470,9 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n       ts.add_elements([i])\n     ts.advance_watermark_to_infinity()\n \n+    def is_early_firing(element, num_partitions):\n+      return 0 if element < 15 else 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faaed37dd4aee6e3d9d4c52c9cbf099dc7338dda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0NTUwMQ==", "bodyText": "PaneInfo is not supported yet in Python.\nhttps://issues.apache.org/jira/browse/BEAM-3759", "url": "https://github.com/apache/beam/pull/10951#discussion_r384845501", "createdAt": "2020-02-27T00:18:44Z", "author": {"login": "bumblebee-coming"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -470,6 +470,9 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n       ts.add_elements([i])\n     ts.advance_watermark_to_infinity()\n \n+    def is_early_firing(element, num_partitions):\n+      return 0 if element < 15 else 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4OTM5Ng=="}, "originalCommit": {"oid": "faaed37dd4aee6e3d9d4c52c9cbf099dc7338dda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODAzMw==", "bodyText": "This was fixed last year. Looks like the bug was never closed.", "url": "https://github.com/apache/beam/pull/10951#discussion_r384848033", "createdAt": "2020-02-27T00:26:35Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -470,6 +470,9 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n       ts.add_elements([i])\n     ts.advance_watermark_to_infinity()\n \n+    def is_early_firing(element, num_partitions):\n+      return 0 if element < 15 else 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4OTM5Ng=="}, "originalCommit": {"oid": "faaed37dd4aee6e3d9d4c52c9cbf099dc7338dda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2Mjg2Ng==", "bodyText": "I tried to do this, but it doesn't work. Can't get the timing by calling pane.timing().\nAttributeError: '_DoFnParam' object has no attribute 'timing'\ndef partition_firings(element, num_partitions, pane=beam.DoFn.PaneInfoParam):\nif pane.timing() == windowed_value.PaneInfoTiming.EARLY:\nreturn 0\nelif pane.timing() == windowed_value.PaneInfoTiming.ON_TIME:\nreturn 1\nelse:\nreturn 2", "url": "https://github.com/apache/beam/pull/10951#discussion_r385962866", "createdAt": "2020-02-28T23:08:03Z", "author": {"login": "bumblebee-coming"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -470,6 +470,9 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n       ts.add_elements([i])\n     ts.advance_watermark_to_infinity()\n \n+    def is_early_firing(element, num_partitions):\n+      return 0 if element < 15 else 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4OTM5Ng=="}, "originalCommit": {"oid": "faaed37dd4aee6e3d9d4c52c9cbf099dc7338dda"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODc4ODk3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/combiners_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyODo0M1rOFxRdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyODo0M1rOFxRdTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMDU3Mw==", "bodyText": "Rather than do a partition, I would write something like\ndef has_expected_values(actual):\n  ordered = sorted(actual)\n  # Early firings.\n  hamcrest.assert_that(ordered[:4], hamcrest.contains(1, 3, 6, 10))\n  # Different runners have different number of 15s, but there should be at least one 15.\n  hamcrest.assert_that(set(ordered[4:]), hamcrest.contains(15))\nassert_that(result, has_expected_values)", "url": "https://github.com/apache/beam/pull/10951#discussion_r387210573", "createdAt": "2020-03-03T18:28:43Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -482,9 +492,20 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n               trigger=AfterWatermark(early=AfterAll(AfterCount(1))))\n           | beam.CombineGlobally(sum).without_defaults().with_fanout(2))\n \n-      # The frings for DISCARDING mode is [1, 2, 3, 4, 5, 0, 0].\n-      firings = [1, 3, 6, 10, 15, 15, 15]\n-      assert_that(result, equal_to(firings))\n+      # Partition the result into early_firings and _.\n+      # In ACCUMULATING mode, the early_frings is [1, 3, 6, 10],\n+      # other_firings is [15, 15, ...]. Different runners have different\n+      # number of 15s, but there should be at least one 15.\n+      smaller_than_fifteen, fifteen, greater_than_fifteen = (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26eb2fbc31e483a08e3507e5a538ced5da7148c9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTAyNzk5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/combiners_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozOToxOVrOFxT0ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDo1Njo0NVrOFxWN8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0OTI1Mg==", "bodyText": "only_contains allows for duplicates, which you don't want here. Use contains instead. (You could use it below, and drop the set in set(ordered[4:]).)", "url": "https://github.com/apache/beam/pull/10951#discussion_r387249252", "createdAt": "2020-03-03T19:39:19Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -482,9 +482,17 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n               trigger=AfterWatermark(early=AfterAll(AfterCount(1))))\n           | beam.CombineGlobally(sum).without_defaults().with_fanout(2))\n \n-      # The frings for DISCARDING mode is [1, 2, 3, 4, 5, 0, 0].\n-      firings = [1, 3, 6, 10, 15, 15, 15]\n-      assert_that(result, equal_to(firings))\n+      def has_expected_values(actual):\n+        from hamcrest.core import assert_that as hamcrest_assert\n+        from hamcrest.library.collection import only_contains\n+        ordered = sorted(actual)\n+        # Early firings.\n+        hamcrest_assert(ordered[:4], only_contains(1, 3, 6, 10))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3439342a08f223d07b21177e6123823d4cdfeaf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODU2MQ==", "bodyText": "Done. Thank you! I forgot that contains here means exactly match the entire sequence.", "url": "https://github.com/apache/beam/pull/10951#discussion_r387288561", "createdAt": "2020-03-03T20:56:45Z", "author": {"login": "bumblebee-coming"}, "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -482,9 +482,17 @@ def test_combining_with_accumulation_mode_and_fanout(self):\n               trigger=AfterWatermark(early=AfterAll(AfterCount(1))))\n           | beam.CombineGlobally(sum).without_defaults().with_fanout(2))\n \n-      # The frings for DISCARDING mode is [1, 2, 3, 4, 5, 0, 0].\n-      firings = [1, 3, 6, 10, 15, 15, 15]\n-      assert_that(result, equal_to(firings))\n+      def has_expected_values(actual):\n+        from hamcrest.core import assert_that as hamcrest_assert\n+        from hamcrest.library.collection import only_contains\n+        ordered = sorted(actual)\n+        # Early firings.\n+        hamcrest_assert(ordered[:4], only_contains(1, 3, 6, 10))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0OTI1Mg=="}, "originalCommit": {"oid": "e3439342a08f223d07b21177e6123823d4cdfeaf"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1909, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}