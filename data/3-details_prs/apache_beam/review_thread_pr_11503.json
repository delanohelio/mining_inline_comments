{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTkzNTE3", "number": 11503, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzowNToyM1rOD72t-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzowODozMVrOD72w2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg5MDgzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/direct/direct_runner.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzowNToyM1rOGUb-uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNToxOVrOGVDywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MzEyOA==", "bodyText": "Move ReifyWindows, _GroupByKeyOnly, _GroupAlsoByWindow, etc. here as well.", "url": "https://github.com/apache/beam/pull/11503#discussion_r424083128", "createdAt": "2020-05-12T23:05:23Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/direct/direct_runner.py", "diffHunk": "@@ -234,7 +234,89 @@ def get_replacement_transform(self, transform):\n       from apache_beam.runners.direct.test_stream_impl import _ExpandableTestStream\n       return _ExpandableTestStream(transform)\n \n+  class GroupByKeyPTransformOverride(PTransformOverride):\n+    \"\"\"A ``PTransformOverride`` for ``GroupByKey``.\n+\n+    This replaces the Beam implementation as a primitive.\n+    \"\"\"\n+    def matches(self, applied_ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+      if (isinstance(applied_ptransform.transform, GroupByKey) and\n+          not getattr(applied_ptransform.transform, 'override', False)):\n+        self.input_type = applied_ptransform.inputs[0].element_type\n+        return True\n+      return False\n+\n+    def get_replacement_transform(self, ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+\n+      # Subclass from GroupByKey to inherit all the proper methods.\n+      class GroupByKey(GroupByKey):\n+        override = True\n+\n+        def expand(self, pcoll):\n+          # Imported here to avoid circular dependencies.\n+          # pylint: disable=wrong-import-order, wrong-import-position\n+          from apache_beam.coders import typecoders\n+          from apache_beam.typehints import trivial_inference\n+\n+          input_type = pcoll.element_type\n+          if input_type is not None:\n+            # Initialize type-hints used below to enforce type-checking and to\n+            # pass downstream to further PTransforms.\n+            key_type, value_type = trivial_inference.key_value_types(input_type)\n+            # Enforce the input to a GBK has a KV element type.\n+            pcoll.element_type = typehints.typehints.coerce_to_kv_type(\n+                pcoll.element_type)\n+            typecoders.registry.verify_deterministic(\n+                typecoders.registry.get_coder(key_type),\n+                'GroupByKey operation \"%s\"' % self.label)\n+\n+            reify_output_type = typehints.KV[\n+                key_type, typehints.WindowedValue[value_type]]  # type: ignore[misc]\n+            gbk_input_type = (\n+                typehints.\n+                KV[key_type,\n+                   typehints.Iterable[\n+                       typehints.WindowedValue[  # type: ignore[misc]\n+                           value_type]]])\n+            gbk_output_type = typehints.KV[key_type,\n+                                           typehints.Iterable[value_type]]\n+\n+            # pylint: disable=bad-continuation\n+            return (\n+                pcoll\n+                | 'ReifyWindows' >> (\n+                    ParDo(self.ReifyWindows()).with_output_types(\n+                        reify_output_type))\n+                | 'GroupByKey' >> (\n+                    _GroupByKeyOnly().with_input_types(\n+                        reify_output_type).with_output_types(gbk_input_type))\n+                | (\n+                    'GroupByWindow' >>\n+                    _GroupAlsoByWindow(pcoll.windowing).with_input_types(\n+                        gbk_input_type).with_output_types(gbk_output_type)))\n+          else:\n+            # The input_type is None, run the default\n+            return (\n+                pcoll\n+                | 'ReifyWindows' >> ParDo(self.ReifyWindows())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70f16d1abd92c27eb6f54330a7427429827074"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTQyNA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11503#discussion_r424735424", "createdAt": "2020-05-13T21:15:19Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/direct/direct_runner.py", "diffHunk": "@@ -234,7 +234,89 @@ def get_replacement_transform(self, transform):\n       from apache_beam.runners.direct.test_stream_impl import _ExpandableTestStream\n       return _ExpandableTestStream(transform)\n \n+  class GroupByKeyPTransformOverride(PTransformOverride):\n+    \"\"\"A ``PTransformOverride`` for ``GroupByKey``.\n+\n+    This replaces the Beam implementation as a primitive.\n+    \"\"\"\n+    def matches(self, applied_ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+      if (isinstance(applied_ptransform.transform, GroupByKey) and\n+          not getattr(applied_ptransform.transform, 'override', False)):\n+        self.input_type = applied_ptransform.inputs[0].element_type\n+        return True\n+      return False\n+\n+    def get_replacement_transform(self, ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+\n+      # Subclass from GroupByKey to inherit all the proper methods.\n+      class GroupByKey(GroupByKey):\n+        override = True\n+\n+        def expand(self, pcoll):\n+          # Imported here to avoid circular dependencies.\n+          # pylint: disable=wrong-import-order, wrong-import-position\n+          from apache_beam.coders import typecoders\n+          from apache_beam.typehints import trivial_inference\n+\n+          input_type = pcoll.element_type\n+          if input_type is not None:\n+            # Initialize type-hints used below to enforce type-checking and to\n+            # pass downstream to further PTransforms.\n+            key_type, value_type = trivial_inference.key_value_types(input_type)\n+            # Enforce the input to a GBK has a KV element type.\n+            pcoll.element_type = typehints.typehints.coerce_to_kv_type(\n+                pcoll.element_type)\n+            typecoders.registry.verify_deterministic(\n+                typecoders.registry.get_coder(key_type),\n+                'GroupByKey operation \"%s\"' % self.label)\n+\n+            reify_output_type = typehints.KV[\n+                key_type, typehints.WindowedValue[value_type]]  # type: ignore[misc]\n+            gbk_input_type = (\n+                typehints.\n+                KV[key_type,\n+                   typehints.Iterable[\n+                       typehints.WindowedValue[  # type: ignore[misc]\n+                           value_type]]])\n+            gbk_output_type = typehints.KV[key_type,\n+                                           typehints.Iterable[value_type]]\n+\n+            # pylint: disable=bad-continuation\n+            return (\n+                pcoll\n+                | 'ReifyWindows' >> (\n+                    ParDo(self.ReifyWindows()).with_output_types(\n+                        reify_output_type))\n+                | 'GroupByKey' >> (\n+                    _GroupByKeyOnly().with_input_types(\n+                        reify_output_type).with_output_types(gbk_input_type))\n+                | (\n+                    'GroupByWindow' >>\n+                    _GroupAlsoByWindow(pcoll.windowing).with_input_types(\n+                        gbk_input_type).with_output_types(gbk_output_type)))\n+          else:\n+            # The input_type is None, run the default\n+            return (\n+                pcoll\n+                | 'ReifyWindows' >> ParDo(self.ReifyWindows())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MzEyOA=="}, "originalCommit": {"oid": "3e70f16d1abd92c27eb6f54330a7427429827074"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg5MjY4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/direct/direct_runner.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzowNjoxMFrOGUb_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNTo0NVrOGVDznw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MzM5OQ==", "bodyText": "Hopefully there should be few (if any) methods that need to be inherited, which could simplify this.", "url": "https://github.com/apache/beam/pull/11503#discussion_r424083399", "createdAt": "2020-05-12T23:06:10Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/direct/direct_runner.py", "diffHunk": "@@ -234,7 +234,89 @@ def get_replacement_transform(self, transform):\n       from apache_beam.runners.direct.test_stream_impl import _ExpandableTestStream\n       return _ExpandableTestStream(transform)\n \n+  class GroupByKeyPTransformOverride(PTransformOverride):\n+    \"\"\"A ``PTransformOverride`` for ``GroupByKey``.\n+\n+    This replaces the Beam implementation as a primitive.\n+    \"\"\"\n+    def matches(self, applied_ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+      if (isinstance(applied_ptransform.transform, GroupByKey) and\n+          not getattr(applied_ptransform.transform, 'override', False)):\n+        self.input_type = applied_ptransform.inputs[0].element_type\n+        return True\n+      return False\n+\n+    def get_replacement_transform(self, ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+\n+      # Subclass from GroupByKey to inherit all the proper methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70f16d1abd92c27eb6f54330a7427429827074"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTY0Nw==", "bodyText": "Yep, I took out the subclass dependency and simplified the override", "url": "https://github.com/apache/beam/pull/11503#discussion_r424735647", "createdAt": "2020-05-13T21:15:45Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/direct/direct_runner.py", "diffHunk": "@@ -234,7 +234,89 @@ def get_replacement_transform(self, transform):\n       from apache_beam.runners.direct.test_stream_impl import _ExpandableTestStream\n       return _ExpandableTestStream(transform)\n \n+  class GroupByKeyPTransformOverride(PTransformOverride):\n+    \"\"\"A ``PTransformOverride`` for ``GroupByKey``.\n+\n+    This replaces the Beam implementation as a primitive.\n+    \"\"\"\n+    def matches(self, applied_ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+      if (isinstance(applied_ptransform.transform, GroupByKey) and\n+          not getattr(applied_ptransform.transform, 'override', False)):\n+        self.input_type = applied_ptransform.inputs[0].element_type\n+        return True\n+      return False\n+\n+    def get_replacement_transform(self, ptransform):\n+      # Imported here to avoid circular dependencies.\n+      # pylint: disable=wrong-import-order, wrong-import-position\n+      from apache_beam.transforms.core import GroupByKey\n+\n+      # Subclass from GroupByKey to inherit all the proper methods.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MzM5OQ=="}, "originalCommit": {"oid": "3e70f16d1abd92c27eb6f54330a7427429827074"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg5ODE5OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzowODozMVrOGUcDDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo1Mzo0MlrOGVE3gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NDIzOQ==", "bodyText": "Hmm... this check seems to be vacuous if the element type is already a tuple, right?", "url": "https://github.com/apache/beam/pull/11503#discussion_r424084239", "createdAt": "2020-05-12T23:08:31Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "diffHunk": "@@ -404,10 +396,6 @@ def test_gbk_then_flatten_input_visitor(self):\n     flat = (none_str_pc, none_int_pc) | beam.Flatten()\n     _ = flat | beam.GroupByKey()\n \n-    # This may change if type inference changes, but we assert it here\n-    # to make sure the check below is not vacuous.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70f16d1abd92c27eb6f54330a7427429827074"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MzAyNw==", "bodyText": "I added it back in. The DataflowRunner should change the element type and we should test before and after.", "url": "https://github.com/apache/beam/pull/11503#discussion_r424753027", "createdAt": "2020-05-13T21:53:42Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "diffHunk": "@@ -404,10 +396,6 @@ def test_gbk_then_flatten_input_visitor(self):\n     flat = (none_str_pc, none_int_pc) | beam.Flatten()\n     _ = flat | beam.GroupByKey()\n \n-    # This may change if type inference changes, but we assert it here\n-    # to make sure the check below is not vacuous.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NDIzOQ=="}, "originalCommit": {"oid": "3e70f16d1abd92c27eb6f54330a7427429827074"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1116, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}