{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0Nzk4NTY0", "number": 10849, "title": "[BEAM-9258] Integrate Google Cloud Data loss prevention functionality for Python SDK", "bodyText": "Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-13T10:51:47Z", "url": "https://github.com/apache/beam/pull/10849", "merged": true, "mergeCommit": {"oid": "945b0bc97702fd57604341ca1fae04389d6118a6"}, "closed": true, "closedAt": "2020-02-18T16:38:21Z", "author": {"login": "mwalenia"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD5dryABqjMwMzQ1MTY0NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFkpo5AFqTM2MDQ5Mjk3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b4a7bb220e2104795ce8e480647a7898b9933cf", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2b4a7bb220e2104795ce8e480647a7898b9933cf", "committedDate": "2020-02-13T11:35:57Z", "message": "Fix line lengths"}, "afterCommit": {"oid": "5b332375971105febbbd51cfcc94ff7a95e71f32", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5b332375971105febbbd51cfcc94ff7a95e71f32", "committedDate": "2020-02-13T11:44:40Z", "message": "Fix line lengths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Mzg0MjE0", "url": "https://github.com/apache/beam/pull/10849#pullrequestreview-358384214", "createdAt": "2020-02-13T16:52:26Z", "commit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1MjoyNlrOFpbk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTo0NlrOFpcQVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4Nzc2Mg==", "bodyText": "Would it make sense to default to the project from gcp options?", "url": "https://github.com/apache/beam/pull/10849#discussion_r378987762", "createdAt": "2020-02-13T16:52:26Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4OTI2MQ==", "bodyText": "Let's do more explicit imports here\ne.g.\nfrom apache_beam.transforms import ParDo\nfrom apache_beam.transforms import PTransform\nthen use them directly like PTransform instead of the beam.PTransform style.", "url": "https://github.com/apache/beam/pull/10849#discussion_r378989261", "createdAt": "2020-02-13T16:55:03Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MDc5NQ==", "bodyText": "Arg order is not consistent with the MaskDetectedDetails transform. MaskDetectedDetails has:\n      project=None,\n      deidentification_template_name=None,\n      deidentification_config=None,\n      inspection_template_name=None,\n      inspection_config=None,\n\nThis one is:\n      inspection_template_name=None,\n      inspection_config=None,\n      project=None,\n      timeout=None", "url": "https://github.com/apache/beam/pull/10849#discussion_r378990795", "createdAt": "2020-02-13T16:57:31Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NDQ5MQ==", "bodyText": "retry argument is defined as\nretry (Optional[google.api_core.retry.Retry]) \u2013 A retry object used to retry requests. If None is specified, requests will be retried using a default configuration.\n\n(https://googleapis.dev/python/dlp/latest/gapic/v2/api.html)\nI do not believe retry.with_exponential_backoff returns a object of type google.api_core.retry.Retry", "url": "https://github.com/apache/beam/pull/10849#discussion_r378994491", "createdAt": "2020-02-13T17:02:42Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      project=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`InspectForDetails` transform.\n+    Args:\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      project (str): Required. Name of GCP project in which the processing\n+        will take place.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.project = project\n+    self.timeout = timeout\n+    self.config = {}\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return pcoll | beam.ParDo(\n+        _InspectFn(self.config, self.timeout, self.project))\n+\n+\n+class _DeidentifyFn(beam.DoFn):\n+  def __init__(self, config=None, timeout=None, project=None, client=None):\n+    self.config = config\n+    self.timeout = timeout\n+    self.client = client\n+    self.project = project\n+\n+  def start_bundle(self):\n+    if self.client is None:\n+      self.client = dlp_v2.DlpServiceClient()\n+\n+  def process(self, element, **kwargs):\n+    params = {\n+        'timeout': self.timeout,\n+        'retry': retry.with_exponential_backoff(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NTMxMw==", "bodyText": "params and params.update, could it move to start_bundle?", "url": "https://github.com/apache/beam/pull/10849#discussion_r378995313", "createdAt": "2020-02-13T17:03:34Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      project=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`InspectForDetails` transform.\n+    Args:\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      project (str): Required. Name of GCP project in which the processing\n+        will take place.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.project = project\n+    self.timeout = timeout\n+    self.config = {}\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return pcoll | beam.ParDo(\n+        _InspectFn(self.config, self.timeout, self.project))\n+\n+\n+class _DeidentifyFn(beam.DoFn):\n+  def __init__(self, config=None, timeout=None, project=None, client=None):\n+    self.config = config\n+    self.timeout = timeout\n+    self.client = client\n+    self.project = project\n+\n+  def start_bundle(self):\n+    if self.client is None:\n+      self.client = dlp_v2.DlpServiceClient()\n+\n+  def process(self, element, **kwargs):\n+    params = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODg2OQ==", "bodyText": "Version after 0.13 will not support py2. (notice at the top: https://googleapis.dev/python/dlp/latest/gapic/v2/api.html)\nI wonder if we need to add a comment note here for the person that will upgrade version ranges next?", "url": "https://github.com/apache/beam/pull/10849#discussion_r378998869", "createdAt": "2020-02-13T17:09:46Z", "author": {"login": "aaltay"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -203,6 +203,7 @@ def get_version():\n     'google-cloud-bigquery>=1.6.0,<1.18.0',\n     'google-cloud-core>=0.28.1,<2',\n     'google-cloud-bigtable>=0.31.1,<1.1.0',\n+    'google-cloud-dlp >=0.12.0,<=0.13.0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTAyMjcw", "url": "https://github.com/apache/beam/pull/10849#pullrequestreview-359102270", "createdAt": "2020-02-14T17:28:47Z", "commit": {"oid": "6882fe8b681bf16cea0e8dd23b41f54580e3b636"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoyODo0OFrOFp-JaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoyODo0OFrOFp-JaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NDE1Mg==", "bodyText": "You may need to update this example for the project argument.", "url": "https://github.com/apache/beam/pull/10849#discussion_r379554152", "createdAt": "2020-02-14T17:28:48Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,214 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.transforms import DoFn\n+from apache_beam.transforms import ParDo\n+from apache_beam.transforms import PTransform\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6882fe8b681bf16cea0e8dd23b41f54580e3b636"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5cab56d56d015e2e0396857a7840c259e47da0a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d5cab56d56d015e2e0396857a7840c259e47da0a", "committedDate": "2020-02-17T07:24:57Z", "message": "[BEAM-9258] Add cloud DLP transform to Python SDK"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33b819e342e0677058039967ec99d7426aeb7afb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/33b819e342e0677058039967ec99d7426aeb7afb", "committedDate": "2020-02-17T07:24:57Z", "message": "Add missing license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "404dd19dd3595a526a5c2206d7efa209896b77bb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/404dd19dd3595a526a5c2206d7efa209896b77bb", "committedDate": "2020-02-17T07:24:58Z", "message": "Add missing import, add description to CHANGES.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21d844736579e67606979bbbdc49dbf40fa13ce9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/21d844736579e67606979bbbdc49dbf40fa13ce9", "committedDate": "2020-02-17T07:24:58Z", "message": "Fix line lengths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c73f3e775a0c7b9276adb99d2e5ff7db4e18625b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c73f3e775a0c7b9276adb99d2e5ff7db4e18625b", "committedDate": "2020-02-17T07:24:58Z", "message": "Make linter happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f1b53c7114bbf61e8a57920dba07c158527df60", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/4f1b53c7114bbf61e8a57920dba07c158527df60", "committedDate": "2020-02-17T07:24:58Z", "message": "Explicit imports, rearrangement of options and optimalization of options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "695aa72b7abe2316d93433716d47f086a4ee3f47", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/695aa72b7abe2316d93433716d47f086a4ee3f47", "committedDate": "2020-02-17T07:24:58Z", "message": "Adapt parameters to how they work in DLP service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "809bc391dadad19f9e455c58587b12301bbaa54a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/809bc391dadad19f9e455c58587b12301bbaa54a", "committedDate": "2020-02-17T07:24:58Z", "message": "reformat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a5ec2657edcc66e9d04f017e7460eea6880bd6", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/35a5ec2657edcc66e9d04f017e7460eea6880bd6", "committedDate": "2020-02-17T07:24:58Z", "message": "make linter happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a0888ce47a0c4a44b683202764d678d3e8a8dac", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6a0888ce47a0c4a44b683202764d678d3e8a8dac", "committedDate": "2020-02-17T07:24:58Z", "message": "Add protection against environments without proper dependencies installed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39131b6684bf61e3c65ad375307015df561f771d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/39131b6684bf61e3c65ad375307015df561f771d", "committedDate": "2020-02-17T07:24:58Z", "message": "make linter happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3b4a9a22ee274dfd8a6cc1b536bb0e8798c77e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/3c3b4a9a22ee274dfd8a6cc1b536bb0e8798c77e", "committedDate": "2020-02-17T07:24:58Z", "message": "make linter happy again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6882fe8b681bf16cea0e8dd23b41f54580e3b636", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6882fe8b681bf16cea0e8dd23b41f54580e3b636", "committedDate": "2020-02-14T11:40:51Z", "message": "make linter happy again"}, "afterCommit": {"oid": "3c3b4a9a22ee274dfd8a6cc1b536bb0e8798c77e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/3c3b4a9a22ee274dfd8a6cc1b536bb0e8798c77e", "committedDate": "2020-02-17T07:24:58Z", "message": "make linter happy again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c8ffe2a857b4288336f6caa734fc9eb0411c12f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/8c8ffe2a857b4288336f6caa734fc9eb0411c12f", "committedDate": "2020-02-17T07:42:07Z", "message": "Reintroduce project parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b92ad4e623ffe2c4980685a8249d4bfe162fa5d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/4b92ad4e623ffe2c4980685a8249d4bfe162fa5d", "committedDate": "2020-02-17T11:49:26Z", "message": "fix docstrings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ac9680a38961a620f6078dea3081a34f85509b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/99ac9680a38961a620f6078dea3081a34f85509b", "committedDate": "2020-02-17T12:01:47Z", "message": "Fix indentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDkyOTc0", "url": "https://github.com/apache/beam/pull/10849#pullrequestreview-360492974", "createdAt": "2020-02-18T16:37:46Z", "commit": {"oid": "99ac9680a38961a620f6078dea3081a34f85509b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3106, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}