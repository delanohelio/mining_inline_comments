{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MTYwNTEw", "number": 13032, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoxNjoyMVrOEssk-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoxNjoyMVrOEssk-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzAzMTYxOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoxNjoyMVrOHgFGxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDo0NzowNVrOHgMq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMDEzMw==", "bodyText": "Re-reading the bug and thinking about your comments, can we eliminate this condition and invoke from some onDrain method?", "url": "https://github.com/apache/beam/pull/13032#discussion_r503400133", "createdAt": "2020-10-12T16:16:21Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -486,14 +487,23 @@ private void processTimers(\n     for (W window : windowsToCleanup) {\n       // The stepContext is the thing that know if it is batch or streaming, hence\n       // whether state needs to be cleaned up or will simply be discarded so the\n-      // timer can be ignored\n-\n+      // timer can be ignored.\n       Instant cleanupTime = earliestAllowableCleanupTime(window, windowingStrategy);\n-      // if DoFn has OnWindowExpiration then set holds for system timer.\n-      Instant cleanupOutputTimestamp =\n-          fnSignature.onWindowExpiration() == null ? cleanupTime : cleanupTime.minus(1L);\n-      stepContext.setStateCleanupTimer(\n-          CLEANUP_TIMER_ID, window, windowCoder, cleanupTime, cleanupOutputTimestamp);\n+      // Set a cleanup timer for state at the end of the window to trigger onWindowExpiration and\n+      // garbage collect state. We avoid doing this for the global window if there is no window\n+      // expiration set as the state will be up when the pipeline terminates. Setting the timer\n+      // leads to a unbounded growth of timers for pipelines with many unique keys in the global\n+      // window.\n+      if (cleanupTime.isBefore(GlobalWindow.INSTANCE.maxTimestamp())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ff30b7f2a9a00e8c9d327c21711cb9960da15e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MDMyNg==", "bodyText": "I'm not sure I understand your suggestion.\nIf we eliminate this condition, we are back to always setting timers which ends up accumulating timers for the global window.  If we eliminate setting the timer if the user did not specify onWindowExpiration, we are removing the automatic cleanup of windowed user-state for the non global window.\nAre you are concerned about setting the timers if onWindowExpiration was requested for the global window? That is true, but at least the user can work around that by removing the onWindowExpiration annotation and modifying their code. Currently there is no mechanism in the dataflow streaming backend to scan and delivering an onDrain notification for all keys with user state, though that would be possible to add.  Any onDrain mechanism currently would have to be powered by timers set for the end of time, which would have the same issues as the cleanup timer.", "url": "https://github.com/apache/beam/pull/13032#discussion_r503470326", "createdAt": "2020-10-12T18:39:49Z", "author": {"login": "scwhittle"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -486,14 +487,23 @@ private void processTimers(\n     for (W window : windowsToCleanup) {\n       // The stepContext is the thing that know if it is batch or streaming, hence\n       // whether state needs to be cleaned up or will simply be discarded so the\n-      // timer can be ignored\n-\n+      // timer can be ignored.\n       Instant cleanupTime = earliestAllowableCleanupTime(window, windowingStrategy);\n-      // if DoFn has OnWindowExpiration then set holds for system timer.\n-      Instant cleanupOutputTimestamp =\n-          fnSignature.onWindowExpiration() == null ? cleanupTime : cleanupTime.minus(1L);\n-      stepContext.setStateCleanupTimer(\n-          CLEANUP_TIMER_ID, window, windowCoder, cleanupTime, cleanupOutputTimestamp);\n+      // Set a cleanup timer for state at the end of the window to trigger onWindowExpiration and\n+      // garbage collect state. We avoid doing this for the global window if there is no window\n+      // expiration set as the state will be up when the pipeline terminates. Setting the timer\n+      // leads to a unbounded growth of timers for pipelines with many unique keys in the global\n+      // window.\n+      if (cleanupTime.isBefore(GlobalWindow.INSTANCE.maxTimestamp())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMDEzMw=="}, "originalCommit": {"oid": "d9ff30b7f2a9a00e8c9d327c21711cb9960da15e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNDA2MA==", "bodyText": "I meant the latter - concerned about setting timers if onWindowExpiration was requested for the global window.\nI meant to imply us implementing some internal onDrain callback just for ParDoFn to receive. The backend would have to store all the keys & windows that need a callback, indeed. Perhaps just loudly warning that they have submitted a pipeline that could be trouble is best.\nAt some point we probably do want a user-facing onDrain rather than having them inspect the PaneInfo but that is a bigger conversation than this change.", "url": "https://github.com/apache/beam/pull/13032#discussion_r503524060", "createdAt": "2020-10-12T20:47:05Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -486,14 +487,23 @@ private void processTimers(\n     for (W window : windowsToCleanup) {\n       // The stepContext is the thing that know if it is batch or streaming, hence\n       // whether state needs to be cleaned up or will simply be discarded so the\n-      // timer can be ignored\n-\n+      // timer can be ignored.\n       Instant cleanupTime = earliestAllowableCleanupTime(window, windowingStrategy);\n-      // if DoFn has OnWindowExpiration then set holds for system timer.\n-      Instant cleanupOutputTimestamp =\n-          fnSignature.onWindowExpiration() == null ? cleanupTime : cleanupTime.minus(1L);\n-      stepContext.setStateCleanupTimer(\n-          CLEANUP_TIMER_ID, window, windowCoder, cleanupTime, cleanupOutputTimestamp);\n+      // Set a cleanup timer for state at the end of the window to trigger onWindowExpiration and\n+      // garbage collect state. We avoid doing this for the global window if there is no window\n+      // expiration set as the state will be up when the pipeline terminates. Setting the timer\n+      // leads to a unbounded growth of timers for pipelines with many unique keys in the global\n+      // window.\n+      if (cleanupTime.isBefore(GlobalWindow.INSTANCE.maxTimestamp())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMDEzMw=="}, "originalCommit": {"oid": "d9ff30b7f2a9a00e8c9d327c21711cb9960da15e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3143, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}