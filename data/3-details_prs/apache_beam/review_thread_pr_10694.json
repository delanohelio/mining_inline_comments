{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjAxMDIz", "number": 10694, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToxMDo0MlrODbVrYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjoxNjo0MlrODcOB7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTkzMzEyOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToxMDo0MlrOFixHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToxMTo1NlrOFixJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwMDYzMw==", "bodyText": "Isn't close only called from unref? If so, how does this change the behavior? (Possibly some more explanation needs to be added.)", "url": "https://github.com/apache/beam/pull/10694#discussion_r372000633", "createdAt": "2020-01-28T19:10:42Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -464,6 +474,8 @@ ServerInfo getServerInfo() {\n     }\n \n     public void close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2713f9e1a8ad2dda68e08d2759fde1f61a15dd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwMTIzMg==", "bodyText": "It's now also called from here: https://github.com/apache/beam/pull/10694/files#diff-e80c769f0011537cc2b60d3e7898cf5aR260", "url": "https://github.com/apache/beam/pull/10694#discussion_r372001232", "createdAt": "2020-01-28T19:11:56Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -464,6 +474,8 @@ ServerInfo getServerInfo() {\n     }\n \n     public void close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwMDYzMw=="}, "originalCommit": {"oid": "0a2713f9e1a8ad2dda68e08d2759fde1f61a15dd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTkzOTk2OnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToxMzowMVrOFixLwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTozNzo0OVrOFix8zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwMTczMA==", "bodyText": "What would cause this extra ref in the actual operator lifecycle?", "url": "https://github.com/apache/beam/pull/10694#discussion_r372001730", "createdAt": "2020-01-28T19:13:01Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -360,6 +360,19 @@ public void closesEnvironmentOnCleanup() throws Exception {\n     verify(remoteEnvironment).close();\n   }\n \n+  @Test\n+  public void closesEnvironmentOnCleanupWithPendingRefs() throws Exception {\n+    try (DefaultJobBundleFactory bundleFactory =\n+        createDefaultJobBundleFactory(envFactoryProviderMap)) {\n+      DefaultJobBundleFactory.SimpleStageBundleFactory stageBundleFactory =\n+          (DefaultJobBundleFactory.SimpleStageBundleFactory)\n+              bundleFactory.forStage(getExecutableStage(environment));\n+      // The client is still being used, e.g. when the pipeline fails and is shut down\n+      stageBundleFactory.currentClient.wrappedClient.ref();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2713f9e1a8ad2dda68e08d2759fde1f61a15dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNDI4NA==", "bodyText": "I'm assuming here we have a ref() due to the client being used. If we had no ref, we would be idling. The error message we were seeing is only possible if we are currently processing a bundle.", "url": "https://github.com/apache/beam/pull/10694#discussion_r372014284", "createdAt": "2020-01-28T19:37:49Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -360,6 +360,19 @@ public void closesEnvironmentOnCleanup() throws Exception {\n     verify(remoteEnvironment).close();\n   }\n \n+  @Test\n+  public void closesEnvironmentOnCleanupWithPendingRefs() throws Exception {\n+    try (DefaultJobBundleFactory bundleFactory =\n+        createDefaultJobBundleFactory(envFactoryProviderMap)) {\n+      DefaultJobBundleFactory.SimpleStageBundleFactory stageBundleFactory =\n+          (DefaultJobBundleFactory.SimpleStageBundleFactory)\n+              bundleFactory.forStage(getExecutableStage(environment));\n+      // The client is still being used, e.g. when the pipeline fails and is shut down\n+      stageBundleFactory.currentClient.wrappedClient.ref();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwMTczMA=="}, "originalCommit": {"oid": "0a2713f9e1a8ad2dda68e08d2759fde1f61a15dd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTk1NTM4OnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToxODowN1rOFixVyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzo1OToxNlrOFjSDvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwNDI5OQ==", "bodyText": "Worth mentioning that this is added to close the environments irrespective of open bundles, since this will occur only during shutdown?", "url": "https://github.com/apache/beam/pull/10694#discussion_r372004299", "createdAt": "2020-01-28T19:18:07Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -255,6 +255,14 @@ public void close() throws Exception {\n     // Clear the cache. This closes all active environments.\n     // note this may cause open calls to be cancelled by the peer\n     for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache : environmentCaches) {\n+      for (WrappedSdkHarnessClient client : environmentCache.asMap().values()) {\n+        try {\n+          client.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2713f9e1a8ad2dda68e08d2759fde1f61a15dd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU0MDM1MQ==", "bodyText": "I've removed this in favor of using unref(). I think I found the case where unref() would not be called: https://github.com/apache/beam/pull/10694/files#diff-e80c769f0011537cc2b60d3e7898cf5aR413", "url": "https://github.com/apache/beam/pull/10694#discussion_r372540351", "createdAt": "2020-01-29T17:59:16Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -255,6 +255,14 @@ public void close() throws Exception {\n     // Clear the cache. This closes all active environments.\n     // note this may cause open calls to be cancelled by the peer\n     for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache : environmentCaches) {\n+      for (WrappedSdkHarnessClient client : environmentCache.asMap().values()) {\n+        try {\n+          client.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwNDI5OQ=="}, "originalCommit": {"oid": "0a2713f9e1a8ad2dda68e08d2759fde1f61a15dd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzY0OTUwOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyODo1NVrOFjU0Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyODo1NVrOFjU0Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NTU1MQ==", "bodyText": "Looks like this was responsible for the cleanup failing. bundle.close() may throw leaving the environment still referenced. My tests do not yield any more errors like in the description.", "url": "https://github.com/apache/beam/pull/10694#discussion_r372585551", "createdAt": "2020-01-29T19:28:55Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -406,11 +407,14 @@ public void split(double fractionOfRemainder) {\n \n         @Override\n         public void close() throws Exception {\n-          bundle.close();\n-          currentClient.wrappedClient.unref();\n-          if (loadBalanceBundles) {\n-            availableCaches.offer(currentCache);\n-            availableCachesSemaphore.release();\n+          try {\n+            bundle.close();\n+          } finally {\n+            currentClient.wrappedClient.unref();\n+            if (loadBalanceBundles) {\n+              availableCaches.offer(currentCache);\n+              availableCachesSemaphore.release();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "132e627cddb4392196694b608a0011a3a3f46462"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTE2NTg5OnYy", "diffSide": "LEFT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjoxNjo0MlrOFkJtQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjo1NDo1OVrOFkRlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjA5Ng==", "bodyText": "I discovered another issue in this code path. ref() is not called on the client in this case. Also, unref() will never be called because the code below does not insert the call to the bundle close. close() is only ever called on unref().", "url": "https://github.com/apache/beam/pull/10694#discussion_r373452096", "createdAt": "2020-01-31T12:16:42Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -342,22 +343,14 @@ public RemoteBundle getBundle(\n       // TODO: Consider having BundleProcessor#newBundle take in an OutputReceiverFactory rather\n       // than constructing the receiver map here. Every bundle factory will need this.\n \n-      if (environmentExpirationMillis == 0 && !loadBalanceBundles) {\n-        return currentClient.processor.newBundle(\n-            getOutputReceivers(currentClient.processBundleDescriptor, outputReceiverFactory)\n-                .build(),\n-            stateRequestHandler,\n-            progressHandler);\n-      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a0c82fd6a8b323bfceb0222dd3766fd14f7443b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MzY1NA==", "bodyText": "This is the original code path that was used when no reference counting is required. What was the problem with it?", "url": "https://github.com/apache/beam/pull/10694#discussion_r373563654", "createdAt": "2020-01-31T16:19:38Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -342,22 +343,14 @@ public RemoteBundle getBundle(\n       // TODO: Consider having BundleProcessor#newBundle take in an OutputReceiverFactory rather\n       // than constructing the receiver map here. Every bundle factory will need this.\n \n-      if (environmentExpirationMillis == 0 && !loadBalanceBundles) {\n-        return currentClient.processor.newBundle(\n-            getOutputReceivers(currentClient.processBundleDescriptor, outputReceiverFactory)\n-                .build(),\n-            stateRequestHandler,\n-            progressHandler);\n-      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjA5Ng=="}, "originalCommit": {"oid": "7a0c82fd6a8b323bfceb0222dd3766fd14f7443b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MDIwOA==", "bodyText": "I suppose it was working correctly due to the initial ref() when creating the environment. Still, it doesn't hurt to remove this bit because it just adds a specialized execution path to the generalized version. The ref business is already complex enough. If you think differently feel free to add it back, but IMHO this is easier to understand.", "url": "https://github.com/apache/beam/pull/10694#discussion_r373580208", "createdAt": "2020-01-31T16:53:01Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -342,22 +343,14 @@ public RemoteBundle getBundle(\n       // TODO: Consider having BundleProcessor#newBundle take in an OutputReceiverFactory rather\n       // than constructing the receiver map here. Every bundle factory will need this.\n \n-      if (environmentExpirationMillis == 0 && !loadBalanceBundles) {\n-        return currentClient.processor.newBundle(\n-            getOutputReceivers(currentClient.processBundleDescriptor, outputReceiverFactory)\n-                .build(),\n-            stateRequestHandler,\n-            progressHandler);\n-      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjA5Ng=="}, "originalCommit": {"oid": "7a0c82fd6a8b323bfceb0222dd3766fd14f7443b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MTExMQ==", "bodyText": "During the initial review of the bundle load balancing the idea came up to have two implementations, one with refing, one without. I think that would be the best improvement moving forward.", "url": "https://github.com/apache/beam/pull/10694#discussion_r373581111", "createdAt": "2020-01-31T16:54:59Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -342,22 +343,14 @@ public RemoteBundle getBundle(\n       // TODO: Consider having BundleProcessor#newBundle take in an OutputReceiverFactory rather\n       // than constructing the receiver map here. Every bundle factory will need this.\n \n-      if (environmentExpirationMillis == 0 && !loadBalanceBundles) {\n-        return currentClient.processor.newBundle(\n-            getOutputReceivers(currentClient.processBundleDescriptor, outputReceiverFactory)\n-                .build(),\n-            stateRequestHandler,\n-            progressHandler);\n-      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjA5Ng=="}, "originalCommit": {"oid": "7a0c82fd6a8b323bfceb0222dd3766fd14f7443b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2265, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}