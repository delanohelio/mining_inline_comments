{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDc4ODQ3", "number": 10994, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxMzo0NlrODlON-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozNzo1N1rODlOnag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzU2ODU3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/test_stream_service.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxMzo0NlrOFx_mvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoxOToyOFrOFyBMjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NjY1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                reader = self._reader.read_multiple([['full', key]\n          \n          \n            \n                reader = self._reader.read_multiple([('full', key)", "url": "https://github.com/apache/beam/pull/10994#discussion_r387966654", "createdAt": "2020-03-04T22:13:46Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/test_stream_service.py", "diffHunk": "@@ -52,5 +56,9 @@ def stop(self):\n   def Events(self, request, context):\n     \"\"\"Streams back all of the events from the streaming cache.\"\"\"\n \n-    for e in self._events:\n+    # TODO(srohde): Once we get rid of the CacheManager, get rid of this 'full'\n+    # label.\n+    reader = self._reader.read_multiple([['full', key]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3OTI0NQ==", "bodyText": "s/key/tag/ ?", "url": "https://github.com/apache/beam/pull/10994#discussion_r387979245", "createdAt": "2020-03-04T22:43:45Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/test_stream_service.py", "diffHunk": "@@ -52,5 +56,9 @@ def stop(self):\n   def Events(self, request, context):\n     \"\"\"Streams back all of the events from the streaming cache.\"\"\"\n \n-    for e in self._events:\n+    # TODO(srohde): Once we get rid of the CacheManager, get rid of this 'full'\n+    # label.\n+    reader = self._reader.read_multiple([['full', key]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NjY1NA=="}, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjcxNw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/10994#discussion_r387992717", "createdAt": "2020-03-04T23:19:28Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/testing/test_stream_service.py", "diffHunk": "@@ -52,5 +56,9 @@ def stop(self):\n   def Events(self, request, context):\n     \"\"\"Streams back all of the events from the streaming cache.\"\"\"\n \n-    for e in self._events:\n+    # TODO(srohde): Once we get rid of the CacheManager, get rid of this 'full'\n+    # label.\n+    reader = self._reader.read_multiple([['full', key]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NjY1NA=="}, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzU3NjE5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/test_stream.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxNjoyNFrOFx_rTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoxOTozNVrOFyBMsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NzgyMQ==", "bodyText": "please document inputs", "url": "https://github.com/apache/beam/pull/10994#discussion_r387967821", "createdAt": "2020-03-04T22:16:24Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -236,14 +235,19 @@ class TestStream(PTransform):\n \n   \"\"\"\n   def __init__(\n-      self, coder=coders.FastPrimitivesCoder(), events=None, output_tags=None):\n+      self,\n+      coder=coders.FastPrimitivesCoder(),\n+      events=None,\n+      output_tags=None,\n+      endpoint=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5Mjc1NQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/10994#discussion_r387992755", "createdAt": "2020-03-04T23:19:35Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -236,14 +235,19 @@ class TestStream(PTransform):\n \n   \"\"\"\n   def __init__(\n-      self, coder=coders.FastPrimitivesCoder(), events=None, output_tags=None):\n+      self,\n+      coder=coders.FastPrimitivesCoder(),\n+      events=None,\n+      output_tags=None,\n+      endpoint=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NzgyMQ=="}, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYxNDc5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/direct/transform_evaluator.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozMDozNVrOFyADGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoxOToyMFrOFyBMVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MzkxMg==", "bodyText": "This should be events += instead of events =", "url": "https://github.com/apache/beam/pull/10994#discussion_r387973912", "createdAt": "2020-03-04T22:30:35Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/direct/transform_evaluator.py", "diffHunk": "@@ -527,9 +548,21 @@ def process_element(self, element):\n       for event in self.test_stream._set_up(self.test_stream.output_tags):\n         events.append(event)\n \n-    events += [e for e in self.test_stream.events(self.current_index)]\n+    # Index into the global state of all the different TestStream event streams.\n+    # Retrieve this TestStream's event stream and read from it.\n+    try:\n+      events = [next(self.test_stream_events[self.event_index])]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjY2Mw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/10994#discussion_r387992663", "createdAt": "2020-03-04T23:19:20Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/direct/transform_evaluator.py", "diffHunk": "@@ -527,9 +548,21 @@ def process_element(self, element):\n       for event in self.test_stream._set_up(self.test_stream.output_tags):\n         events.append(event)\n \n-    events += [e for e in self.test_stream.events(self.current_index)]\n+    # Index into the global state of all the different TestStream event streams.\n+    # Retrieve this TestStream's event stream and read from it.\n+    try:\n+      events = [next(self.test_stream_events[self.event_index])]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MzkxMg=="}, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYzMzcwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozNzo1N1rOFyAO6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoyMDozM1rOFyBN_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NjkzNg==", "bodyText": "Let's add an assert to make sure that this is only called when we have in-memory events vs rpc events (also in the method below).", "url": "https://github.com/apache/beam/pull/10994#discussion_r387976936", "createdAt": "2020-03-04T22:37:57Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "diffHunk": "@@ -226,17 +237,53 @@ def expand(self, pcoll):\n   def _infer_output_coder(self, input_type=None, input_coder=None):\n     return self.coder\n \n-  def _events_from_script(self, index):\n-    yield self._events[index]\n-\n-  def events(self, index):\n-    return self._events_from_script(index)\n-\n-  def begin(self):\n-    return 0\n-\n-  def end(self, index):\n-    return index >= len(self._events)\n+  @staticmethod\n+  def events_from_script(events):\n+    \"\"\"Yields the in-memory events.\n+    \"\"\"\n+    return itertools.chain(events)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MzA4NA==", "bodyText": "I added an assert in the TestStream constructor so that this shouldn't happen at pipeline run-time but construction time.", "url": "https://github.com/apache/beam/pull/10994#discussion_r387993084", "createdAt": "2020-03-04T23:20:33Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "diffHunk": "@@ -226,17 +237,53 @@ def expand(self, pcoll):\n   def _infer_output_coder(self, input_type=None, input_coder=None):\n     return self.coder\n \n-  def _events_from_script(self, index):\n-    yield self._events[index]\n-\n-  def events(self, index):\n-    return self._events_from_script(index)\n-\n-  def begin(self):\n-    return 0\n-\n-  def end(self, index):\n-    return index >= len(self._events)\n+  @staticmethod\n+  def events_from_script(events):\n+    \"\"\"Yields the in-memory events.\n+    \"\"\"\n+    return itertools.chain(events)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NjkzNg=="}, "originalCommit": {"oid": "171d28284c18470adba62fe47742eba4f994d500"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1944, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}