{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzUwOTk3", "number": 11746, "title": "[BEAM-10028] Add support for the state backed iterable coder to the Java SDK harness.", "bodyText": "This required supporting a translation context through CoderTranslator to give access to the BeamFnStateClient and current process bundle instruction id.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-18T21:27:07Z", "url": "https://github.com/apache/beam/pull/11746", "merged": true, "mergeCommit": {"oid": "ffd74b0c07bd9a89ffe021cfcb15cc5fbf40d9f9"}, "closed": true, "closedAt": "2020-05-21T03:13:14Z", "author": {"login": "lukecwik"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcinRmrABqjMzNDkyODgxNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjN81tgH2gAyNDE5NzUwOTk3OjZkYmJiNzcxZmMwZjdkMzc5ZDU5MWI2NTc3NGM1ZTNmNTBiMmEyZDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7c18302bc51cac54bc53d50aeca61cf451f99c0", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/d7c18302bc51cac54bc53d50aeca61cf451f99c0", "committedDate": "2020-05-18T21:26:29Z", "message": "[BEAM-10028] Add support for the state backed iterable coder to the Java SDK harness.\n\nThis required supporting a translation context through CoderTranslator to give access to the BeamFnStateClient and current process bundle instruction id."}, "afterCommit": {"oid": "0c45fd647116ec594307c3fd3c59a147ff39b948", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/0c45fd647116ec594307c3fd3c59a147ff39b948", "committedDate": "2020-05-18T22:04:49Z", "message": "[BEAM-10028] Add support for the state backed iterable coder to the Java SDK harness.\n\nThis required supporting a translation context through CoderTranslator to give access to the BeamFnStateClient and current process bundle instruction id."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/246e7eb64c3005f52ffb81a0721516a5b6fd2c4b", "committedDate": "2020-05-19T03:36:23Z", "message": "[BEAM-10028] Add support for the state backed iterable coder to the Java SDK harness.\n\nThis required supporting a translation context through CoderTranslator to give access to the BeamFnStateClient and current process bundle instruction id."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c45fd647116ec594307c3fd3c59a147ff39b948", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/0c45fd647116ec594307c3fd3c59a147ff39b948", "committedDate": "2020-05-18T22:04:49Z", "message": "[BEAM-10028] Add support for the state backed iterable coder to the Java SDK harness.\n\nThis required supporting a translation context through CoderTranslator to give access to the BeamFnStateClient and current process bundle instruction id."}, "afterCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/246e7eb64c3005f52ffb81a0721516a5b6fd2c4b", "committedDate": "2020-05-19T03:36:23Z", "message": "[BEAM-10028] Add support for the state backed iterable coder to the Java SDK harness.\n\nThis required supporting a translation context through CoderTranslator to give access to the BeamFnStateClient and current process bundle instruction id."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODkyNTQ4", "url": "https://github.com/apache/beam/pull/11746#pullrequestreview-414892548", "createdAt": "2020-05-19T23:30:00Z", "commit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzozMDowMFrOGX2Hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo1Nzo0NlrOGYZt_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1NzA5MA==", "bodyText": "Make this decoding function to handle multiple length + element list?\nBoth Python and Go are doing this way.", "url": "https://github.com/apache/beam/pull/11746#discussion_r427657090", "createdAt": "2020-05-19T23:30:00Z", "author": {"login": "HuangLED"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/state/StateBackedIterable.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness.state;\n+\n+import static org.apache.beam.runners.core.construction.ModelCoders.STATE_BACKED_ITERABLE_CODER_URN;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest;\n+import org.apache.beam.runners.core.construction.CoderTranslation.TranslationContext;\n+import org.apache.beam.runners.core.construction.CoderTranslator;\n+import org.apache.beam.runners.core.construction.CoderTranslatorRegistrar;\n+import org.apache.beam.sdk.coders.IterableLikeCoder;\n+import org.apache.beam.sdk.fn.stream.DataStreams;\n+import org.apache.beam.sdk.util.BufferedElementCountingOutputStream;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.vendor.grpc.v1p26p0.com.google.protobuf.ByteString;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterators;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+\n+/**\n+ * A {@link BeamFnStateClient state} backed iterable which allows for fetching elements over the\n+ * portability state API. See <a\n+ * href=\"https://s.apache.org/beam-fn-state-api-and-bundle-processing\">remote references</a> for\n+ * additional details.\n+ *\n+ * <p>One must supply a {@link StateBackedIterableTranslationContext} when using {@link\n+ * CoderTranslator#fromComponents} to be able to create a {@link StateBackedIterable.Coder}.\n+ */\n+public class StateBackedIterable<T> implements Iterable<T> {\n+\n+  private final BeamFnStateClient beamFnStateClient;\n+  private final org.apache.beam.sdk.coders.Coder<T> elemCoder;\n+  @VisibleForTesting final StateRequest request;\n+  @VisibleForTesting final List<T> prefix;\n+\n+  public StateBackedIterable(\n+      BeamFnStateClient beamFnStateClient,\n+      String instructionId,\n+      ByteString runnerKey,\n+      org.apache.beam.sdk.coders.Coder<T> elemCoder,\n+      List<T> prefix) {\n+    this.beamFnStateClient = beamFnStateClient;\n+    this.elemCoder = elemCoder;\n+\n+    StateRequest.Builder requestBuilder = StateRequest.newBuilder();\n+    requestBuilder\n+        .setInstructionId(instructionId)\n+        .getStateKeyBuilder()\n+        .getRunnerBuilder()\n+        .setKey(runnerKey);\n+    this.request = requestBuilder.build();\n+    this.prefix = prefix;\n+  }\n+\n+  @Override\n+  public Iterator<T> iterator() {\n+    return Iterators.concat(\n+        prefix.iterator(),\n+        new DataStreams.DataStreamDecoder(\n+            elemCoder,\n+            DataStreams.inbound(StateFetchingIterators.forFirstChunk(beamFnStateClient, request))));\n+  }\n+\n+  /**\n+   * Decodes an {@link Iterable} that might be backed by state. If the terminator at the end of the\n+   * value stream is {@code -1} then we return a {@link StateBackedIterable} otherwise we return an\n+   * {@link Iterable}.\n+   */\n+  public static class Coder<T> extends IterableLikeCoder<T, Iterable<T>> {\n+\n+    private final BeamFnStateClient beamFnStateClient;\n+    private final Supplier<String> instructionId;\n+\n+    public Coder(\n+        BeamFnStateClient beamFnStateClient,\n+        Supplier<String> instructionId,\n+        org.apache.beam.sdk.coders.Coder<T> elemCoder) {\n+      super(elemCoder, \"StateBackedIterable\");\n+      this.beamFnStateClient = beamFnStateClient;\n+      this.instructionId = instructionId;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(List<T> decodedElements) {\n+      return decodedElements;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(\n+        List<T> decodedElements, long terminatorValue, InputStream in) throws IOException {\n+      if (terminatorValue == -1L) {\n+        long tokenLength = VarInt.decodeLong(in);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NDkxMQ==", "bodyText": "Does the decoding as written handle such a case in the following (the InputStream contains multiple segments of byte sequence, each starts with a varint element size)?\n[127 ELEMENT, ELEMNT, ...] [127 ELEMENT, ELEMENT, ...][15 ELEMENT, ELEMENT, ...]\nwhere 127 and 15 indicate the number of elements within the bracket.\nIf we do, then never mind. (asking b/c I only saw the decoding of VarInt is done only once)", "url": "https://github.com/apache/beam/pull/11746#discussion_r428164911", "createdAt": "2020-05-20T16:54:27Z", "author": {"login": "HuangLED"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/state/StateBackedIterable.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness.state;\n+\n+import static org.apache.beam.runners.core.construction.ModelCoders.STATE_BACKED_ITERABLE_CODER_URN;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest;\n+import org.apache.beam.runners.core.construction.CoderTranslation.TranslationContext;\n+import org.apache.beam.runners.core.construction.CoderTranslator;\n+import org.apache.beam.runners.core.construction.CoderTranslatorRegistrar;\n+import org.apache.beam.sdk.coders.IterableLikeCoder;\n+import org.apache.beam.sdk.fn.stream.DataStreams;\n+import org.apache.beam.sdk.util.BufferedElementCountingOutputStream;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.vendor.grpc.v1p26p0.com.google.protobuf.ByteString;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterators;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+\n+/**\n+ * A {@link BeamFnStateClient state} backed iterable which allows for fetching elements over the\n+ * portability state API. See <a\n+ * href=\"https://s.apache.org/beam-fn-state-api-and-bundle-processing\">remote references</a> for\n+ * additional details.\n+ *\n+ * <p>One must supply a {@link StateBackedIterableTranslationContext} when using {@link\n+ * CoderTranslator#fromComponents} to be able to create a {@link StateBackedIterable.Coder}.\n+ */\n+public class StateBackedIterable<T> implements Iterable<T> {\n+\n+  private final BeamFnStateClient beamFnStateClient;\n+  private final org.apache.beam.sdk.coders.Coder<T> elemCoder;\n+  @VisibleForTesting final StateRequest request;\n+  @VisibleForTesting final List<T> prefix;\n+\n+  public StateBackedIterable(\n+      BeamFnStateClient beamFnStateClient,\n+      String instructionId,\n+      ByteString runnerKey,\n+      org.apache.beam.sdk.coders.Coder<T> elemCoder,\n+      List<T> prefix) {\n+    this.beamFnStateClient = beamFnStateClient;\n+    this.elemCoder = elemCoder;\n+\n+    StateRequest.Builder requestBuilder = StateRequest.newBuilder();\n+    requestBuilder\n+        .setInstructionId(instructionId)\n+        .getStateKeyBuilder()\n+        .getRunnerBuilder()\n+        .setKey(runnerKey);\n+    this.request = requestBuilder.build();\n+    this.prefix = prefix;\n+  }\n+\n+  @Override\n+  public Iterator<T> iterator() {\n+    return Iterators.concat(\n+        prefix.iterator(),\n+        new DataStreams.DataStreamDecoder(\n+            elemCoder,\n+            DataStreams.inbound(StateFetchingIterators.forFirstChunk(beamFnStateClient, request))));\n+  }\n+\n+  /**\n+   * Decodes an {@link Iterable} that might be backed by state. If the terminator at the end of the\n+   * value stream is {@code -1} then we return a {@link StateBackedIterable} otherwise we return an\n+   * {@link Iterable}.\n+   */\n+  public static class Coder<T> extends IterableLikeCoder<T, Iterable<T>> {\n+\n+    private final BeamFnStateClient beamFnStateClient;\n+    private final Supplier<String> instructionId;\n+\n+    public Coder(\n+        BeamFnStateClient beamFnStateClient,\n+        Supplier<String> instructionId,\n+        org.apache.beam.sdk.coders.Coder<T> elemCoder) {\n+      super(elemCoder, \"StateBackedIterable\");\n+      this.beamFnStateClient = beamFnStateClient;\n+      this.instructionId = instructionId;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(List<T> decodedElements) {\n+      return decodedElements;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(\n+        List<T> decodedElements, long terminatorValue, InputStream in) throws IOException {\n+      if (terminatorValue == -1L) {\n+        long tokenLength = VarInt.decodeLong(in);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1NzA5MA=="}, "originalCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMTk4OQ==", "bodyText": "I assume the DataStream here constructs iterator recursively right? so that not just first state chunk, but all the N state requests are handled.\nJust to double check, because the name \"forFirstChunk\" makes it a little confusing.\nMaybe add brief comments here?", "url": "https://github.com/apache/beam/pull/11746#discussion_r428221989", "createdAt": "2020-05-20T18:30:45Z", "author": {"login": "HuangLED"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/state/StateBackedIterable.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness.state;\n+\n+import static org.apache.beam.runners.core.construction.ModelCoders.STATE_BACKED_ITERABLE_CODER_URN;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest;\n+import org.apache.beam.runners.core.construction.CoderTranslation.TranslationContext;\n+import org.apache.beam.runners.core.construction.CoderTranslator;\n+import org.apache.beam.runners.core.construction.CoderTranslatorRegistrar;\n+import org.apache.beam.sdk.coders.IterableLikeCoder;\n+import org.apache.beam.sdk.fn.stream.DataStreams;\n+import org.apache.beam.sdk.util.BufferedElementCountingOutputStream;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.vendor.grpc.v1p26p0.com.google.protobuf.ByteString;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterators;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+\n+/**\n+ * A {@link BeamFnStateClient state} backed iterable which allows for fetching elements over the\n+ * portability state API. See <a\n+ * href=\"https://s.apache.org/beam-fn-state-api-and-bundle-processing\">remote references</a> for\n+ * additional details.\n+ *\n+ * <p>One must supply a {@link StateBackedIterableTranslationContext} when using {@link\n+ * CoderTranslator#fromComponents} to be able to create a {@link StateBackedIterable.Coder}.\n+ */\n+public class StateBackedIterable<T> implements Iterable<T> {\n+\n+  private final BeamFnStateClient beamFnStateClient;\n+  private final org.apache.beam.sdk.coders.Coder<T> elemCoder;\n+  @VisibleForTesting final StateRequest request;\n+  @VisibleForTesting final List<T> prefix;\n+\n+  public StateBackedIterable(\n+      BeamFnStateClient beamFnStateClient,\n+      String instructionId,\n+      ByteString runnerKey,\n+      org.apache.beam.sdk.coders.Coder<T> elemCoder,\n+      List<T> prefix) {\n+    this.beamFnStateClient = beamFnStateClient;\n+    this.elemCoder = elemCoder;\n+\n+    StateRequest.Builder requestBuilder = StateRequest.newBuilder();\n+    requestBuilder\n+        .setInstructionId(instructionId)\n+        .getStateKeyBuilder()\n+        .getRunnerBuilder()\n+        .setKey(runnerKey);\n+    this.request = requestBuilder.build();\n+    this.prefix = prefix;\n+  }\n+\n+  @Override\n+  public Iterator<T> iterator() {\n+    return Iterators.concat(\n+        prefix.iterator(),\n+        new DataStreams.DataStreamDecoder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjgwMg==", "bodyText": "Never mind.  Cleared via a chat.", "url": "https://github.com/apache/beam/pull/11746#discussion_r428222802", "createdAt": "2020-05-20T18:31:42Z", "author": {"login": "HuangLED"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/state/StateBackedIterable.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness.state;\n+\n+import static org.apache.beam.runners.core.construction.ModelCoders.STATE_BACKED_ITERABLE_CODER_URN;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest;\n+import org.apache.beam.runners.core.construction.CoderTranslation.TranslationContext;\n+import org.apache.beam.runners.core.construction.CoderTranslator;\n+import org.apache.beam.runners.core.construction.CoderTranslatorRegistrar;\n+import org.apache.beam.sdk.coders.IterableLikeCoder;\n+import org.apache.beam.sdk.fn.stream.DataStreams;\n+import org.apache.beam.sdk.util.BufferedElementCountingOutputStream;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.vendor.grpc.v1p26p0.com.google.protobuf.ByteString;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterators;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+\n+/**\n+ * A {@link BeamFnStateClient state} backed iterable which allows for fetching elements over the\n+ * portability state API. See <a\n+ * href=\"https://s.apache.org/beam-fn-state-api-and-bundle-processing\">remote references</a> for\n+ * additional details.\n+ *\n+ * <p>One must supply a {@link StateBackedIterableTranslationContext} when using {@link\n+ * CoderTranslator#fromComponents} to be able to create a {@link StateBackedIterable.Coder}.\n+ */\n+public class StateBackedIterable<T> implements Iterable<T> {\n+\n+  private final BeamFnStateClient beamFnStateClient;\n+  private final org.apache.beam.sdk.coders.Coder<T> elemCoder;\n+  @VisibleForTesting final StateRequest request;\n+  @VisibleForTesting final List<T> prefix;\n+\n+  public StateBackedIterable(\n+      BeamFnStateClient beamFnStateClient,\n+      String instructionId,\n+      ByteString runnerKey,\n+      org.apache.beam.sdk.coders.Coder<T> elemCoder,\n+      List<T> prefix) {\n+    this.beamFnStateClient = beamFnStateClient;\n+    this.elemCoder = elemCoder;\n+\n+    StateRequest.Builder requestBuilder = StateRequest.newBuilder();\n+    requestBuilder\n+        .setInstructionId(instructionId)\n+        .getStateKeyBuilder()\n+        .getRunnerBuilder()\n+        .setKey(runnerKey);\n+    this.request = requestBuilder.build();\n+    this.prefix = prefix;\n+  }\n+\n+  @Override\n+  public Iterator<T> iterator() {\n+    return Iterators.concat(\n+        prefix.iterator(),\n+        new DataStreams.DataStreamDecoder(\n+            elemCoder,\n+            DataStreams.inbound(StateFetchingIterators.forFirstChunk(beamFnStateClient, request))));\n+  }\n+\n+  /**\n+   * Decodes an {@link Iterable} that might be backed by state. If the terminator at the end of the\n+   * value stream is {@code -1} then we return a {@link StateBackedIterable} otherwise we return an\n+   * {@link Iterable}.\n+   */\n+  public static class Coder<T> extends IterableLikeCoder<T, Iterable<T>> {\n+\n+    private final BeamFnStateClient beamFnStateClient;\n+    private final Supplier<String> instructionId;\n+\n+    public Coder(\n+        BeamFnStateClient beamFnStateClient,\n+        Supplier<String> instructionId,\n+        org.apache.beam.sdk.coders.Coder<T> elemCoder) {\n+      super(elemCoder, \"StateBackedIterable\");\n+      this.beamFnStateClient = beamFnStateClient;\n+      this.instructionId = instructionId;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(List<T> decodedElements) {\n+      return decodedElements;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(\n+        List<T> decodedElements, long terminatorValue, InputStream in) throws IOException {\n+      if (terminatorValue == -1L) {\n+        long tokenLength = VarInt.decodeLong(in);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1NzA5MA=="}, "originalCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNTA4MA==", "bodyText": "Does it make sense to add a test case for re-iteration?", "url": "https://github.com/apache/beam/pull/11746#discussion_r428225080", "createdAt": "2020-05-20T18:34:13Z", "author": {"login": "HuangLED"}, "path": "sdks/java/harness/src/test/java/org/apache/beam/fn/harness/state/StateBackedIterableTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness.state;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.beam.model.fnexecution.v1.BeamFnApi.StateKey;\n+import org.apache.beam.sdk.coders.StringUtf8Coder;\n+import org.apache.beam.vendor.grpc.v1p26p0.com.google.protobuf.ByteString;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.FluentIterable;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+/** Tests for {@link StateBackedIterable}. */\n+@RunWith(Enclosed.class)\n+public class StateBackedIterableTest {\n+\n+  @RunWith(Parameterized.class)\n+  public static class IterationTest {\n+    @Parameterized.Parameters\n+    public static Iterable<Object[]> data() {\n+      return ImmutableList.<Object[]>builder()\n+          .add(new Object[] {Collections.emptyList(), \"emptySuffix\", ImmutableList.of()})\n+          .add(new Object[] {ImmutableList.of(\"A\", \"B\"), \"emptySuffix\", ImmutableList.of(\"A\", \"B\")})\n+          .add(\n+              new Object[] {\n+                Collections.emptyList(),\n+                \"nonEmptySuffix\",\n+                ImmutableList.of(\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\")\n+              })\n+          .add(\n+              new Object[] {\n+                ImmutableList.of(\"A\", \"B\"),\n+                \"nonEmptySuffix\",\n+                ImmutableList.of(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\")\n+              })\n+          .build();\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public List<String> prefix;\n+\n+    @Parameterized.Parameter(1)\n+    public String suffixKey;\n+\n+    @Parameterized.Parameter(2)\n+    public List<String> expected;\n+\n+    @Test\n+    public void testIteration() throws Exception {\n+      FakeBeamFnStateClient fakeBeamFnStateClient =\n+          new FakeBeamFnStateClient(\n+              ImmutableMap.of(\n+                  key(\"nonEmptySuffix\"), encode(\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"),\n+                  key(\"emptySuffix\"), encode()));\n+\n+      StateBackedIterable<String> iterable =\n+          new StateBackedIterable<>(\n+              fakeBeamFnStateClient,\n+              \"instruction\",\n+              encode(suffixKey),\n+              StringUtf8Coder.of(),\n+              prefix);\n+\n+      assertEquals(expected, Lists.newArrayList(iterable));\n+      assertEquals(expected, Lists.newArrayList(iterable));\n+      assertEquals(expected, Lists.newArrayList(iterable));\n+    }\n+\n+    @Test\n+    public void testUsingMultipleInterleavedIterators() throws Exception {\n+      FakeBeamFnStateClient fakeBeamFnStateClient =\n+          new FakeBeamFnStateClient(\n+              ImmutableMap.of(\n+                  key(\"nonEmptySuffix\"), encode(\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"),\n+                  key(\"emptySuffix\"), encode()));\n+\n+      StateBackedIterable<String> iterable =\n+          new StateBackedIterable<>(\n+              fakeBeamFnStateClient,\n+              \"instruction\",\n+              encode(suffixKey),\n+              StringUtf8Coder.of(),\n+              prefix);\n+\n+      List<Iterator<String>> iterators = new ArrayList<>();\n+      List<List<String>> results = new ArrayList<>();\n+      for (int i = 0; i < 3; ++i) {\n+        iterators.add(iterable.iterator());\n+        results.add(new ArrayList<>());\n+      }\n+\n+      Random random = new Random(42L);\n+      while (!iterators.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMTEzNQ==", "bodyText": "I am guessing the encoding for state channel also exist already in Java SDK.  That is why we don't need to implement them in this PR. Would you please point me to that?", "url": "https://github.com/apache/beam/pull/11746#discussion_r428231135", "createdAt": "2020-05-20T18:41:18Z", "author": {"login": "HuangLED"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/state/StateBackedIterable.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness.state;\n+\n+import static org.apache.beam.runners.core.construction.ModelCoders.STATE_BACKED_ITERABLE_CODER_URN;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import org.apache.beam.model.fnexecution.v1.BeamFnApi.StateRequest;\n+import org.apache.beam.runners.core.construction.CoderTranslation.TranslationContext;\n+import org.apache.beam.runners.core.construction.CoderTranslator;\n+import org.apache.beam.runners.core.construction.CoderTranslatorRegistrar;\n+import org.apache.beam.sdk.coders.IterableLikeCoder;\n+import org.apache.beam.sdk.fn.stream.DataStreams;\n+import org.apache.beam.sdk.util.BufferedElementCountingOutputStream;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.vendor.grpc.v1p26p0.com.google.protobuf.ByteString;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.VisibleForTesting;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterators;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.ByteStreams;\n+\n+/**\n+ * A {@link BeamFnStateClient state} backed iterable which allows for fetching elements over the\n+ * portability state API. See <a\n+ * href=\"https://s.apache.org/beam-fn-state-api-and-bundle-processing\">remote references</a> for\n+ * additional details.\n+ *\n+ * <p>One must supply a {@link StateBackedIterableTranslationContext} when using {@link\n+ * CoderTranslator#fromComponents} to be able to create a {@link StateBackedIterable.Coder}.\n+ */\n+public class StateBackedIterable<T> implements Iterable<T> {\n+\n+  private final BeamFnStateClient beamFnStateClient;\n+  private final org.apache.beam.sdk.coders.Coder<T> elemCoder;\n+  @VisibleForTesting final StateRequest request;\n+  @VisibleForTesting final List<T> prefix;\n+\n+  public StateBackedIterable(\n+      BeamFnStateClient beamFnStateClient,\n+      String instructionId,\n+      ByteString runnerKey,\n+      org.apache.beam.sdk.coders.Coder<T> elemCoder,\n+      List<T> prefix) {\n+    this.beamFnStateClient = beamFnStateClient;\n+    this.elemCoder = elemCoder;\n+\n+    StateRequest.Builder requestBuilder = StateRequest.newBuilder();\n+    requestBuilder\n+        .setInstructionId(instructionId)\n+        .getStateKeyBuilder()\n+        .getRunnerBuilder()\n+        .setKey(runnerKey);\n+    this.request = requestBuilder.build();\n+    this.prefix = prefix;\n+  }\n+\n+  @Override\n+  public Iterator<T> iterator() {\n+    return Iterators.concat(\n+        prefix.iterator(),\n+        new DataStreams.DataStreamDecoder(\n+            elemCoder,\n+            DataStreams.inbound(StateFetchingIterators.forFirstChunk(beamFnStateClient, request))));\n+  }\n+\n+  /**\n+   * Decodes an {@link Iterable} that might be backed by state. If the terminator at the end of the\n+   * value stream is {@code -1} then we return a {@link StateBackedIterable} otherwise we return an\n+   * {@link Iterable}.\n+   */\n+  public static class Coder<T> extends IterableLikeCoder<T, Iterable<T>> {\n+\n+    private final BeamFnStateClient beamFnStateClient;\n+    private final Supplier<String> instructionId;\n+\n+    public Coder(\n+        BeamFnStateClient beamFnStateClient,\n+        Supplier<String> instructionId,\n+        org.apache.beam.sdk.coders.Coder<T> elemCoder) {\n+      super(elemCoder, \"StateBackedIterable\");\n+      this.beamFnStateClient = beamFnStateClient;\n+      this.instructionId = instructionId;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(List<T> decodedElements) {\n+      return decodedElements;\n+    }\n+\n+    @Override\n+    protected Iterable<T> decodeToIterable(\n+        List<T> decodedElements, long terminatorValue, InputStream in) throws IOException {\n+      if (terminatorValue == -1L) {\n+        long tokenLength = VarInt.decodeLong(in);\n+        ByteString token = ByteString.readFrom(ByteStreams.limit(in, tokenLength));\n+        return new StateBackedIterable<>(\n+            beamFnStateClient, instructionId.get(), token, getElemCoder(), decodedElements);\n+      } else {\n+        throw new IllegalStateException(\n+            String.format(\n+                \"StateBackedIterable expected terminator of 0 or -1 but received %s.\",\n+                terminatorValue));\n+      }\n+    }\n+\n+    @Override\n+    public void encode(Iterable<T> iterable, OutputStream outStream) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0MDM4Mw==", "bodyText": "beam_runner_api.proto already have this constant, aren't we supposed to get this constant string from proto definition?", "url": "https://github.com/apache/beam/pull/11746#discussion_r428240383", "createdAt": "2020-05-20T18:57:46Z", "author": {"login": "HuangLED"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ModelCoders.java", "diffHunk": "@@ -59,6 +60,14 @@ private ModelCoders() {}\n \n   public static final String ROW_CODER_URN = getUrn(StandardCoders.Enum.ROW);\n \n+  public static final String STATE_BACKED_ITERABLE_CODER_URN =\n+      \"beam:coder:state_backed_iterable:v1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "246e7eb64c3005f52ffb81a0721516a5b6fd2c4b"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dbbb771fc0f7d379d591b65774c5e3f50b2a2d4", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/6dbbb771fc0f7d379d591b65774c5e3f50b2a2d4", "committedDate": "2020-05-20T19:08:39Z", "message": "fixup! Address PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4663, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}