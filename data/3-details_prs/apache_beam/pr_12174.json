{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MzU1MDE2", "number": 12174, "title": "[BEAM-10239] Support ZetaSQL NUMERIC type in BeamSQL", "bodyText": "This PR adds support of ZetaSQL NUMERIC type to BeamSQL:\n\nADD\nSUBTRACT\nMULTIPLY\nDIVIDE\nUNARY_MINUS\nMOD\nFLOOR\nCEIL\n\nWhile AVG and SUM are currently not supported.\nr: @apilloud @robinyqiu\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-05T03:54:01Z", "url": "https://github.com/apache/beam/pull/12174", "merged": true, "mergeCommit": {"oid": "26c1dad03cd2c95625b84f2d00088d2cad149b80"}, "closed": true, "closedAt": "2020-07-15T22:35:32Z", "author": {"login": "ZijieSong946"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0pPKmgFqTQ0NzYzODMwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1RwSkABqjM1NTA0ODE1NTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjM4MzA5", "url": "https://github.com/apache/beam/pull/12174#pullrequestreview-447638309", "createdAt": "2020-07-13T21:55:59Z", "commit": {"oid": "f80e89b617b64c7a97c58df806bda6550adbbffd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo1NjowMFrOGw7c5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjozMTo0NVrOGw87FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1ODg4NQ==", "bodyText": "new BigDecimal(\"some string\").setScale(9) is used a lot of times in this file and the test file. I would create a utility function for better style.\nHow about we create a new file ZetaSqlTypesUtils.java in /main and make a BigDecimal bigDecimalAsNumeric(String s)?", "url": "https://github.com/apache/beam/pull/12174#discussion_r453958885", "createdAt": "2020-07-13T21:56:00Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/TestInput.java", "diffHunk": "@@ -258,6 +259,14 @@\n           .addRows(LocalTime.of(15, 30, 0), \"s\")\n           .addRows(LocalTime.of(23, 35, 59), \"s\");\n \n+  private static final Schema TABLE_WTH_NUMERIC_SCHEMA =\n+      Schema.builder().addDecimalField(\"numeric_field\").addStringField(\"str_field\").build();\n+  public static final TestBoundedTable TABLE_WITH_NUMERIC =\n+      TestBoundedTable.of(TABLE_WTH_NUMERIC_SCHEMA)\n+          .addRows(new BigDecimal(\"123.4567\").setScale(9), \"str1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80e89b617b64c7a97c58df806bda6550adbbffd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2MDc1Ng==", "bodyText": "Nit: move this below testNumericLiteral() as we did in other places?", "url": "https://github.com/apache/beam/pull/12174#discussion_r453960756", "createdAt": "2020-07-13T21:58:40Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java", "diffHunk": "@@ -2174,6 +2175,246 @@ public void testZetaSQLNestedQueryFive() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  /////////////////////////////////////////////////////////////////////////////\n+  // NUMERIC type tests\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  @Test\n+  public void testNumericLiteral() {\n+    String sql =\n+        \"SELECT NUMERIC '0', \"\n+            + \"NUMERIC '123456', \"\n+            + \"NUMERIC '-3.14', \"\n+            + \"NUMERIC '-0.54321', \"\n+            + \"NUMERIC '1.23456e05', \"\n+            + \"NUMERIC '-9.876e-3', \"\n+            + \"NUMERIC '-99999999999999999999999999999.999999999', \"\n+            + \"NUMERIC '99999999999999999999999999999.999999999'\";\n+    ;\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(\n+                    Schema.builder()\n+                        .addDecimalField(\"f_numeric1\")\n+                        .addDecimalField(\"f_numeric2\")\n+                        .addDecimalField(\"f_numeric3\")\n+                        .addDecimalField(\"f_numeric4\")\n+                        .addDecimalField(\"f_numeric5\")\n+                        .addDecimalField(\"f_numeric6\")\n+                        .addDecimalField(\"f_numeric7\")\n+                        .addDecimalField(\"f_numeric8\")\n+                        .build())\n+                .addValues(new BigDecimal(\"0\").setScale(9))\n+                .addValues(new BigDecimal(\"123456\").setScale(9))\n+                .addValues(new BigDecimal(\"-3.14\").setScale(9))\n+                .addValues(new BigDecimal(\"-0.54321\").setScale(9))\n+                .addValues(new BigDecimal(\"123456\").setScale(9))\n+                .addValues(new BigDecimal(\"-0.009876\").setScale(9))\n+                .addValues(new BigDecimal(\"-99999999999999999999999999999.999999999\"))\n+                .addValues(new BigDecimal(\"99999999999999999999999999999.999999999\"))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testUnaryMinusNumeric() {\n+    String sql = \"SELECT - NUMERIC '1.23456e05'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addDecimalField(\"f_numeric\").build())\n+                .addValues(new BigDecimal(\"-123456\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testAddNumeric() {\n+    String sql = \"SELECT NUMERIC '1.23456e05' + NUMERIC '9.876e-3'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addDecimalField(\"f_numeric\").build())\n+                .addValues(new BigDecimal(\"123456.009876\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testSubNumeric() {\n+    String sql = \"SELECT NUMERIC '1.23456e05' - NUMERIC '-9.876e-3'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addDecimalField(\"f_numeric\").build())\n+                .addValues(new BigDecimal(\"123456.009876\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testMultiNumeric() {\n+    String sql = \"SELECT NUMERIC '1.23e02' * NUMERIC '-1.001e-3'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addDecimalField(\"f_numeric\").build())\n+                .addValues(new BigDecimal(\"-0.123123\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testDivNumeric() {\n+    String sql = \"SELECT NUMERIC '-1.23123e-1' / NUMERIC '-1.001e-3'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addDecimalField(\"f_numeric\").build())\n+                .addValues(new BigDecimal(\"123\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testModNumeric() {\n+    String sql = \"SELECT MOD(NUMERIC '1.23456e05', NUMERIC '5')\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addDecimalField(\"f_numeric\").build())\n+                .addValues(new BigDecimal(\"1\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testFloorNumeric() {\n+    String sql = \"SELECT FLOOR(NUMERIC '1.23456e04'), FLOOR(NUMERIC '-1.23456e04')\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(\n+                    Schema.builder()\n+                        .addDecimalField(\"f_numeric1\")\n+                        .addDecimalField(\"f_numeric2\")\n+                        .build())\n+                .addValues(new BigDecimal(\"12345\").setScale(9))\n+                .addValues(new BigDecimal(\"-12346\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testCeilNumeric() {\n+    String sql = \"SELECT CEIL(NUMERIC '1.23456e04'), CEIL(NUMERIC '-1.23456e04')\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(\n+                    Schema.builder()\n+                        .addDecimalField(\"f_numeric1\")\n+                        .addDecimalField(\"f_numeric2\")\n+                        .build())\n+                .addValues(new BigDecimal(\"12346\").setScale(9))\n+                .addValues(new BigDecimal(\"-12345\").setScale(9))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testNumericColumn() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80e89b617b64c7a97c58df806bda6550adbbffd"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MDM4MQ==", "bodyText": "Technically speaking, it is not \"unparsed as DOUBLE\". Also, I would update the comment to be more descriptive, like:\nCannot simply call makeExactLiteral() because later it will be unparsed to the string representation of the BigDecimal itself (e.g. \"SELECT NUMERIC '0'\" will be unparsed to \"SELECT 0E-9\"), and Calcite does not allow customize unparsing of SqlNumericLiteral. So we create a wrapper function here such that we can later recognize it and customize its unparsing in BeamBigQuerySqlDialect.", "url": "https://github.com/apache/beam/pull/12174#discussion_r453980381", "createdAt": "2020-07-13T22:28:07Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -805,6 +807,22 @@ private RexNode convertSimpleValueToRexNode(TypeKind kind, Value value) {\n                 .makeLiteral(\n                     value.getStringValue(), typeFactory().createSqlType(SqlTypeName.VARCHAR), true);\n         break;\n+      case TYPE_NUMERIC:\n+        // As ZetaSQL NUMERIC literal would be unparsed as DOUBLE through Calcite makeExactLiteral", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80e89b617b64c7a97c58df806bda6550adbbffd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4Mjk5Ng==", "bodyText": "Add comment on these are the min/max values that can be represented as ZetaSQL NUMERIC?", "url": "https://github.com/apache/beam/pull/12174#discussion_r453982996", "createdAt": "2020-07-13T22:31:45Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java", "diffHunk": "@@ -2174,6 +2175,246 @@ public void testZetaSQLNestedQueryFive() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  /////////////////////////////////////////////////////////////////////////////\n+  // NUMERIC type tests\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  @Test\n+  public void testNumericLiteral() {\n+    String sql =\n+        \"SELECT NUMERIC '0', \"\n+            + \"NUMERIC '123456', \"\n+            + \"NUMERIC '-3.14', \"\n+            + \"NUMERIC '-0.54321', \"\n+            + \"NUMERIC '1.23456e05', \"\n+            + \"NUMERIC '-9.876e-3', \"\n+            + \"NUMERIC '-99999999999999999999999999999.999999999', \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80e89b617b64c7a97c58df806bda6550adbbffd"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjY5NTkx", "url": "https://github.com/apache/beam/pull/12174#pullrequestreview-447669591", "createdAt": "2020-07-13T23:04:06Z", "commit": {"oid": "f80e89b617b64c7a97c58df806bda6550adbbffd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzowNDowNlrOGw9t3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMzowNDowNlrOGw9t3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NTk5Ng==", "bodyText": "Also, could you move this logic to a function unparseNumericLiteralWrapperFunction() like we do in other branches?", "url": "https://github.com/apache/beam/pull/12174#discussion_r453995996", "createdAt": "2020-07-13T23:04:06Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "diffHunk": "@@ -156,7 +156,14 @@ public void unparseCall(\n         break;\n       case OTHER_FUNCTION:\n         String funName = call.getOperator().getName();\n-        if (FUNCTIONS_USING_INTERVAL.contains(funName)) {\n+        if (funName.equals(\"numeric_literal\")) {\n+          // self-designed function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80e89b617b64c7a97c58df806bda6550adbbffd"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzIxMDQy", "url": "https://github.com/apache/beam/pull/12174#pullrequestreview-448321042", "createdAt": "2020-07-14T17:35:29Z", "commit": {"oid": "2aa74a2aa8a71eb3682392b7ed88687d8ed76bb2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozNTozMFrOGxeG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MzoyNVrOGxeyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNjcwNQ==", "bodyText": "Typo here NUMERIC", "url": "https://github.com/apache/beam/pull/12174#discussion_r454526705", "createdAt": "2020-07-14T17:35:30Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -808,9 +808,11 @@ private RexNode convertSimpleValueToRexNode(TypeKind kind, Value value) {\n                     value.getStringValue(), typeFactory().createSqlType(SqlTypeName.VARCHAR), true);\n         break;\n       case TYPE_NUMERIC:\n-        // As ZetaSQL NUMERIC literal would be unparsed as DOUBLE through Calcite makeExactLiteral\n-        // method, we design a function call specifically associate with ZetaSQL NUMERIC literal\n-        // unparsing\n+        // Cannot simply call makeExactLiteral() for ZetaSQL NUMERICE type because later it will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aa74a2aa8a71eb3682392b7ed88687d8ed76bb2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNzg2Mg==", "bodyText": "I hope the comment to include some information that people cannot get from reading the function. For example, ZetaSQL NUMERIC type definition. How about we add:\nCreate a ZetaSQL NUMERIC value represented as BigDecimal.\nZetaSQL NUMERIC type is an exact numeric value with 38 digits of precision and 9 decimal digits of scale. Precision is the number of digits that the number contains. Scale is how many of these digits appear after the decimal point.", "url": "https://github.com/apache/beam/pull/12174#discussion_r454537862", "createdAt": "2020-07-14T17:53:25Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTypesUtils.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql;\n+\n+import java.math.BigDecimal;\n+import org.apache.beam.sdk.annotations.Internal;\n+\n+/** Utils to deal with ZetaSQL type generation. */\n+@Internal\n+public class ZetaSqlTypesUtils {\n+\n+  private ZetaSqlTypesUtils() {}\n+\n+  /**\n+   * Creating a ZetaSQL NUMERIC value, which is java.math.BigDecimal with scale 9, from a string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aa74a2aa8a71eb3682392b7ed88687d8ed76bb2"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDI5MDY5", "url": "https://github.com/apache/beam/pull/12174#pullrequestreview-448429069", "createdAt": "2020-07-14T20:10:57Z", "commit": {"oid": "e6f6aa72cb357ed863973589d194a5e9fc74aaa8"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxMDo1N1rOGxjgCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoyNDo0NFrOGxj8uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTA0OA==", "bodyText": "Reverse the order here (\"numeric_literal\".equals(funName)) to avoid potential issues if funName is null. Also consider making \"numeric_literal\" a constant like the others.", "url": "https://github.com/apache/beam/pull/12174#discussion_r454615048", "createdAt": "2020-07-14T20:10:57Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "diffHunk": "@@ -156,7 +156,11 @@ public void unparseCall(\n         break;\n       case OTHER_FUNCTION:\n         String funName = call.getOperator().getName();\n-        if (FUNCTIONS_USING_INTERVAL.contains(funName)) {\n+        if (funName.equals(\"numeric_literal\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f6aa72cb357ed863973589d194a5e9fc74aaa8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxODgzMA==", "bodyText": "This class looks to be for tests only. Move it to '/src/test/' instead of '/src/main/'?", "url": "https://github.com/apache/beam/pull/12174#discussion_r454618830", "createdAt": "2020-07-14T20:18:24Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlTypesUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql;\n+\n+import java.math.BigDecimal;\n+import org.apache.beam.sdk.annotations.Internal;\n+\n+/** Utils to deal with ZetaSQL type generation. */\n+@Internal\n+public class ZetaSqlTypesUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f6aa72cb357ed863973589d194a5e9fc74aaa8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxOTM4Mg==", "bodyText": "I've seen this constant numeric_literal before somewhere...", "url": "https://github.com/apache/beam/pull/12174#discussion_r454619382", "createdAt": "2020-07-14T20:19:26Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -805,6 +807,24 @@ private RexNode convertSimpleValueToRexNode(TypeKind kind, Value value) {\n                 .makeLiteral(\n                     value.getStringValue(), typeFactory().createSqlType(SqlTypeName.VARCHAR), true);\n         break;\n+      case TYPE_NUMERIC:\n+        // Cannot simply call makeExactLiteral() for ZetaSQL NUMERIC type because later it will be\n+        // unparsed to the string representation of the BigDecimal itself (e.g. \"SELECT NUMERIC '0'\"\n+        // will be unparsed to \"SELECT 0E-9\"), and Calcite does not allow customize unparsing of\n+        // SqlNumericLiteral. So we create a wrapper function here such that we can later recognize\n+        // it and customize its unparsing in BeamBigQuerySqlDialect.\n+        ret =\n+            rexBuilder()\n+                .makeCall(\n+                    SqlOperators.createSimpleSqlFunction(\n+                        \"numeric_literal\", ZetaSqlCalciteTranslationUtils.toCalciteTypeName(kind)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f6aa72cb357ed863973589d194a5e9fc74aaa8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyMjM5Mg==", "bodyText": "This is a somewhat interesting approach. It might be worth writing up a mini design doc on why this approach was chosen and literals didn't work (but ask @robinyqiu first). I suspect this could also fix the Infinity and NaN issues I told you about (which are actually in Double, not Numeric BEAM-8057).", "url": "https://github.com/apache/beam/pull/12174#discussion_r454622392", "createdAt": "2020-07-14T20:24:44Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -805,6 +807,24 @@ private RexNode convertSimpleValueToRexNode(TypeKind kind, Value value) {\n                 .makeLiteral(\n                     value.getStringValue(), typeFactory().createSqlType(SqlTypeName.VARCHAR), true);\n         break;\n+      case TYPE_NUMERIC:\n+        // Cannot simply call makeExactLiteral() for ZetaSQL NUMERIC type because later it will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f6aa72cb357ed863973589d194a5e9fc74aaa8"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e28bd32cba30bb2ee7941ea63bdeb3af79ab4ab9", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/e28bd32cba30bb2ee7941ea63bdeb3af79ab4ab9", "committedDate": "2020-07-15T21:44:24Z", "message": "Support ZetaSQL NUMERIC type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87e57ea5a19e30083b5a7ba5473287e15499adcb", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/87e57ea5a19e30083b5a7ba5473287e15499adcb", "committedDate": "2020-07-15T18:22:45Z", "message": "Merge remote-tracking branch 'upstream/master' into NumericTypeFunc"}, "afterCommit": {"oid": "e28bd32cba30bb2ee7941ea63bdeb3af79ab4ab9", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/e28bd32cba30bb2ee7941ea63bdeb3af79ab4ab9", "committedDate": "2020-07-15T21:44:24Z", "message": "Support ZetaSQL NUMERIC type."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3361, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}