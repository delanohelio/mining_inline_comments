{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Njc3MDEx", "number": 13634, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzo0MTo1MVrOFKIuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODoxMTozMVrOFKJFIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTczMDg5OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/dataframe/frames_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzo0MTo1MlrOIMyCqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzo0MTo1MlrOIMyCqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MzcwNw==", "bodyText": "Thanks for the cleanup \ud83d\udc4d", "url": "https://github.com/apache/beam/pull/13634#discussion_r550273707", "createdAt": "2020-12-30T17:41:52Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/dataframe/frames_test.py", "diffHunk": "@@ -124,7 +124,6 @@ def test_groupby(self):\n \n     self._run_test(lambda df: df.groupby(['second', 'A']).sum(), df)\n \n-  @unittest.skipIf(sys.version_info <= (3, ), 'differing signature')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTc1NTUzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzo1Mzo0OVrOIMyQXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToxMTowNFrOIMzj4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3NzIxMg==", "bodyText": "Can we split test_merge_same_key into separate test methods for each invocation of _run_test?", "url": "https://github.com/apache/beam/pull/13634#discussion_r550277212", "createdAt": "2020-12-30T17:53:49Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/dataframe/frames_test.py", "diffHunk": "@@ -152,6 +151,45 @@ def test_merge(self):\n           df1,\n           df2)\n \n+  def test_merge_same_key(self):\n+    df1 = pd.DataFrame({\n+        'key': ['foo', 'bar', 'baz', 'foo'], 'value': [1, 2, 3, 5]\n+    })\n+    df2 = pd.DataFrame({\n+        'key': ['foo', 'bar', 'baz', 'foo'], 'value': [5, 6, 7, 8]\n+    })\n+    with beam.dataframe.allow_non_parallel_operations():\n+      self._run_test(\n+          lambda df1,\n+          df2: df1.merge(df2, on='key').rename(index=lambda x: '*').sort_values(\n+              ['value_x', 'value_y']),\n+          df1,\n+          df2)\n+      self._run_test(\n+          lambda df1,\n+          df2: df1.merge(df2, on='key', suffixes=('_left', '_right')).rename(\n+              index=lambda x: '*').sort_values(['value_left', 'value_right']),\n+          df1,\n+          df2)\n+\n+    df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n+    df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n+\n+    with beam.dataframe.allow_non_parallel_operations():\n+      self._run_test(\n+          lambda df1,\n+          df2: df1.merge(df2, how='left', on='a').rename(index=lambda x: '*').\n+          sort_values(['b', 'c']),\n+          df1,\n+          df2)\n+      # Test without specifying 'on'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5ODU5Mg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/13634#discussion_r550298592", "createdAt": "2020-12-30T19:11:04Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames_test.py", "diffHunk": "@@ -152,6 +151,45 @@ def test_merge(self):\n           df1,\n           df2)\n \n+  def test_merge_same_key(self):\n+    df1 = pd.DataFrame({\n+        'key': ['foo', 'bar', 'baz', 'foo'], 'value': [1, 2, 3, 5]\n+    })\n+    df2 = pd.DataFrame({\n+        'key': ['foo', 'bar', 'baz', 'foo'], 'value': [5, 6, 7, 8]\n+    })\n+    with beam.dataframe.allow_non_parallel_operations():\n+      self._run_test(\n+          lambda df1,\n+          df2: df1.merge(df2, on='key').rename(index=lambda x: '*').sort_values(\n+              ['value_x', 'value_y']),\n+          df1,\n+          df2)\n+      self._run_test(\n+          lambda df1,\n+          df2: df1.merge(df2, on='key', suffixes=('_left', '_right')).rename(\n+              index=lambda x: '*').sort_values(['value_left', 'value_right']),\n+          df1,\n+          df2)\n+\n+    df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n+    df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n+\n+    with beam.dataframe.allow_non_parallel_operations():\n+      self._run_test(\n+          lambda df1,\n+          df2: df1.merge(df2, how='left', on='a').rename(index=lambda x: '*').\n+          sort_values(['b', 'c']),\n+          df1,\n+          df2)\n+      # Test without specifying 'on'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3NzIxMg=="}, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTc2MTg1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNzo1Njo1OVrOIMyT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToxMTowNlrOIMzj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3ODEzMg==", "bodyText": "Nit: Why two newlines, shouldn't it just be one?", "url": "https://github.com/apache/beam/pull/13634#discussion_r550278132", "createdAt": "2020-12-30T17:56:59Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1218,15 +1219,32 @@ def merge(\n     merged = frame_base.DeferredFrame.wrap(\n         expressions.ComputedExpression(\n             'merge',\n-            lambda left, right: left.merge(\n-                right, left_index=True, right_index=True, **kwargs),\n+            lambda left, right: left.merge(right,\n+                                           left_index=True,\n+                                           right_index=True,\n+                                           suffixes=suffixes,\n+                                           **kwargs),\n             [indexed_left._expr, indexed_right._expr],\n             preserves_partition_by=partitionings.Singleton(),\n             requires_partition_by=partitionings.Index()))\n \n     if left_index or right_index:\n       return merged\n     else:\n+      common_cols = set(left_on).intersection(right_on)\n+      if len(common_cols):\n+        # When merging on the same column name from both dfs, merged will have\n+        # two duplicate columns, one with lsuffix and one with rsuffix.\n+        # Normally pandas de-dupes these into a single column with no suffix.\n+        # This replicates that logic by dropping the _right_ dupe, and removing\n+        # the suffix from the _left_ dupe.\n+        lsuffix, rsuffix = suffixes\n+        merged = merged.drop(\n+            columns=[f'{col}{rsuffix}' for col in common_cols])\n+        merged = merged.rename(\n+            columns={f'{col}{lsuffix}': col for col in common_cols})\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5ODYwOA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/13634#discussion_r550298608", "createdAt": "2020-12-30T19:11:06Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1218,15 +1219,32 @@ def merge(\n     merged = frame_base.DeferredFrame.wrap(\n         expressions.ComputedExpression(\n             'merge',\n-            lambda left, right: left.merge(\n-                right, left_index=True, right_index=True, **kwargs),\n+            lambda left, right: left.merge(right,\n+                                           left_index=True,\n+                                           right_index=True,\n+                                           suffixes=suffixes,\n+                                           **kwargs),\n             [indexed_left._expr, indexed_right._expr],\n             preserves_partition_by=partitionings.Singleton(),\n             requires_partition_by=partitionings.Index()))\n \n     if left_index or right_index:\n       return merged\n     else:\n+      common_cols = set(left_on).intersection(right_on)\n+      if len(common_cols):\n+        # When merging on the same column name from both dfs, merged will have\n+        # two duplicate columns, one with lsuffix and one with rsuffix.\n+        # Normally pandas de-dupes these into a single column with no suffix.\n+        # This replicates that logic by dropping the _right_ dupe, and removing\n+        # the suffix from the _left_ dupe.\n+        lsuffix, rsuffix = suffixes\n+        merged = merged.drop(\n+            columns=[f'{col}{rsuffix}' for col in common_cols])\n+        merged = merged.rename(\n+            columns={f'{col}{lsuffix}': col for col in common_cols})\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3ODEzMg=="}, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTc4ODQ4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODoxMTozMVrOIMyjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToxMjo0MFrOIMzlag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4MjAxMg==", "bodyText": "What if {col}{rsuffix} or {col}{lsuffix} already exists in the input?", "url": "https://github.com/apache/beam/pull/13634#discussion_r550282012", "createdAt": "2020-12-30T18:11:31Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1218,15 +1219,32 @@ def merge(\n     merged = frame_base.DeferredFrame.wrap(\n         expressions.ComputedExpression(\n             'merge',\n-            lambda left, right: left.merge(\n-                right, left_index=True, right_index=True, **kwargs),\n+            lambda left, right: left.merge(right,\n+                                           left_index=True,\n+                                           right_index=True,\n+                                           suffixes=suffixes,\n+                                           **kwargs),\n             [indexed_left._expr, indexed_right._expr],\n             preserves_partition_by=partitionings.Singleton(),\n             requires_partition_by=partitionings.Index()))\n \n     if left_index or right_index:\n       return merged\n     else:\n+      common_cols = set(left_on).intersection(right_on)\n+      if len(common_cols):\n+        # When merging on the same column name from both dfs, merged will have\n+        # two duplicate columns, one with lsuffix and one with rsuffix.\n+        # Normally pandas de-dupes these into a single column with no suffix.\n+        # This replicates that logic by dropping the _right_ dupe, and removing\n+        # the suffix from the _left_ dupe.\n+        lsuffix, rsuffix = suffixes\n+        merged = merged.drop(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4NDEwNQ==", "bodyText": "In that case I think it would have been renamed to {col}{rsuffix}{rsuffix} - this is a good edge case to think about though. I'll look at adding some more test cases.", "url": "https://github.com/apache/beam/pull/13634#discussion_r550284105", "createdAt": "2020-12-30T18:19:19Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1218,15 +1219,32 @@ def merge(\n     merged = frame_base.DeferredFrame.wrap(\n         expressions.ComputedExpression(\n             'merge',\n-            lambda left, right: left.merge(\n-                right, left_index=True, right_index=True, **kwargs),\n+            lambda left, right: left.merge(right,\n+                                           left_index=True,\n+                                           right_index=True,\n+                                           suffixes=suffixes,\n+                                           **kwargs),\n             [indexed_left._expr, indexed_right._expr],\n             preserves_partition_by=partitionings.Singleton(),\n             requires_partition_by=partitionings.Index()))\n \n     if left_index or right_index:\n       return merged\n     else:\n+      common_cols = set(left_on).intersection(right_on)\n+      if len(common_cols):\n+        # When merging on the same column name from both dfs, merged will have\n+        # two duplicate columns, one with lsuffix and one with rsuffix.\n+        # Normally pandas de-dupes these into a single column with no suffix.\n+        # This replicates that logic by dropping the _right_ dupe, and removing\n+        # the suffix from the _left_ dupe.\n+        lsuffix, rsuffix = suffixes\n+        merged = merged.drop(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4MjAxMg=="}, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5MzM3Nw==", "bodyText": "Ah nevermind you're right, pandas keeps {col}{rsuffix}. hmm", "url": "https://github.com/apache/beam/pull/13634#discussion_r550293377", "createdAt": "2020-12-30T18:52:33Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1218,15 +1219,32 @@ def merge(\n     merged = frame_base.DeferredFrame.wrap(\n         expressions.ComputedExpression(\n             'merge',\n-            lambda left, right: left.merge(\n-                right, left_index=True, right_index=True, **kwargs),\n+            lambda left, right: left.merge(right,\n+                                           left_index=True,\n+                                           right_index=True,\n+                                           suffixes=suffixes,\n+                                           **kwargs),\n             [indexed_left._expr, indexed_right._expr],\n             preserves_partition_by=partitionings.Singleton(),\n             requires_partition_by=partitionings.Index()))\n \n     if left_index or right_index:\n       return merged\n     else:\n+      common_cols = set(left_on).intersection(right_on)\n+      if len(common_cols):\n+        # When merging on the same column name from both dfs, merged will have\n+        # two duplicate columns, one with lsuffix and one with rsuffix.\n+        # Normally pandas de-dupes these into a single column with no suffix.\n+        # This replicates that logic by dropping the _right_ dupe, and removing\n+        # the suffix from the _left_ dupe.\n+        lsuffix, rsuffix = suffixes\n+        merged = merged.drop(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4MjAxMg=="}, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5ODk4Ng==", "bodyText": "Thanks for catching this. I updated the logic to drop the duplicate column(s) from the right df proactively", "url": "https://github.com/apache/beam/pull/13634#discussion_r550298986", "createdAt": "2020-12-30T19:12:40Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1218,15 +1219,32 @@ def merge(\n     merged = frame_base.DeferredFrame.wrap(\n         expressions.ComputedExpression(\n             'merge',\n-            lambda left, right: left.merge(\n-                right, left_index=True, right_index=True, **kwargs),\n+            lambda left, right: left.merge(right,\n+                                           left_index=True,\n+                                           right_index=True,\n+                                           suffixes=suffixes,\n+                                           **kwargs),\n             [indexed_left._expr, indexed_right._expr],\n             preserves_partition_by=partitionings.Singleton(),\n             requires_partition_by=partitionings.Index()))\n \n     if left_index or right_index:\n       return merged\n     else:\n+      common_cols = set(left_on).intersection(right_on)\n+      if len(common_cols):\n+        # When merging on the same column name from both dfs, merged will have\n+        # two duplicate columns, one with lsuffix and one with rsuffix.\n+        # Normally pandas de-dupes these into a single column with no suffix.\n+        # This replicates that logic by dropping the _right_ dupe, and removing\n+        # the suffix from the _left_ dupe.\n+        lsuffix, rsuffix = suffixes\n+        merged = merged.drop(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4MjAxMg=="}, "originalCommit": {"oid": "1c318c11f5d51ae5dc5ff12920be96ac41ba3970"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2477, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}