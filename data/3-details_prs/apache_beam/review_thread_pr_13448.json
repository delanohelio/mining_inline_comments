{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5OTE5Mzkx", "number": 13448, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjowNTo1N1rOE-61fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjoxMTo1OFrOE-66kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDExMTMyOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjowNTo1N1rOH8VQ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1MDoxNFrOH84w8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNDk3Nw==", "bodyText": "nit: You can drop this, Future will catch exceptions, wrap them in a ExecutionException and throw them out of get.", "url": "https://github.com/apache/beam/pull/13448#discussion_r533024977", "createdAt": "2020-12-01T02:05:57Z", "author": {"login": "apilloud"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -459,27 +461,28 @@ public void loadBalancesBundles() throws Exception {\n       verify(envFactory, Mockito.times(2)).createEnvironment(eq(environment), any());\n \n       long tms = System.currentTimeMillis();\n-      AtomicBoolean closed = new AtomicBoolean();\n-      // close to free up environment for another bundle\n-      TimerTask closeBundleTask =\n-          new TimerTask() {\n-            @Override\n-            public void run() {\n-              try {\n-                b2.close();\n-                closed.set(true);\n-              } catch (Exception e) {\n-                throw new RuntimeException(e);\n-              }\n-            }\n-          };\n-      new Timer().schedule(closeBundleTask, 100);\n-\n+      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+      ScheduledFuture<Optional<Exception>> closingFuture =\n+          executor.schedule(\n+              () -> {\n+                try {\n+                  b2.close();\n+                  return Optional.empty();\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3292bd0bb915322a3413476fa57323a46aec1905"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0ODMwNA==", "bodyText": "Hm could it be that Future only does that for unchecked exceptions? I had tried just making this executor.schedule(b2::close, ..) but it produces a compile error:\nincompatible thrown types Exception in method reference", "url": "https://github.com/apache/beam/pull/13448#discussion_r533048304", "createdAt": "2020-12-01T03:23:31Z", "author": {"login": "TheNeuralBit"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -459,27 +461,28 @@ public void loadBalancesBundles() throws Exception {\n       verify(envFactory, Mockito.times(2)).createEnvironment(eq(environment), any());\n \n       long tms = System.currentTimeMillis();\n-      AtomicBoolean closed = new AtomicBoolean();\n-      // close to free up environment for another bundle\n-      TimerTask closeBundleTask =\n-          new TimerTask() {\n-            @Override\n-            public void run() {\n-              try {\n-                b2.close();\n-                closed.set(true);\n-              } catch (Exception e) {\n-                throw new RuntimeException(e);\n-              }\n-            }\n-          };\n-      new Timer().schedule(closeBundleTask, 100);\n-\n+      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+      ScheduledFuture<Optional<Exception>> closingFuture =\n+          executor.schedule(\n+              () -> {\n+                try {\n+                  b2.close();\n+                  return Optional.empty();\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNDk3Nw=="}, "originalCommit": {"oid": "3292bd0bb915322a3413476fa57323a46aec1905"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYwNjY0Mg==", "bodyText": "Yes only unchecked exceptions. It is odd to me that the Java AutoCloseable interface defines it as throwing Exception, but it does.", "url": "https://github.com/apache/beam/pull/13448#discussion_r533606642", "createdAt": "2020-12-01T17:50:14Z", "author": {"login": "apilloud"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -459,27 +461,28 @@ public void loadBalancesBundles() throws Exception {\n       verify(envFactory, Mockito.times(2)).createEnvironment(eq(environment), any());\n \n       long tms = System.currentTimeMillis();\n-      AtomicBoolean closed = new AtomicBoolean();\n-      // close to free up environment for another bundle\n-      TimerTask closeBundleTask =\n-          new TimerTask() {\n-            @Override\n-            public void run() {\n-              try {\n-                b2.close();\n-                closed.set(true);\n-              } catch (Exception e) {\n-                throw new RuntimeException(e);\n-              }\n-            }\n-          };\n-      new Timer().schedule(closeBundleTask, 100);\n-\n+      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+      ScheduledFuture<Optional<Exception>> closingFuture =\n+          executor.schedule(\n+              () -> {\n+                try {\n+                  b2.close();\n+                  return Optional.empty();\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNDk3Nw=="}, "originalCommit": {"oid": "3292bd0bb915322a3413476fa57323a46aec1905"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDEyNDM0OnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjoxMTo1OFrOH8VYMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMjozMzoyMVrOIM2b3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNjg2Nw==", "bodyText": "nit: Small delays lead to flakes, for example if the system is busy and doesn't get back to the forked thread. Does having a small timeout add any value here? Could you just block?", "url": "https://github.com/apache/beam/pull/13448#discussion_r533026867", "createdAt": "2020-12-01T02:11:58Z", "author": {"login": "apilloud"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -459,27 +461,28 @@ public void loadBalancesBundles() throws Exception {\n       verify(envFactory, Mockito.times(2)).createEnvironment(eq(environment), any());\n \n       long tms = System.currentTimeMillis();\n-      AtomicBoolean closed = new AtomicBoolean();\n-      // close to free up environment for another bundle\n-      TimerTask closeBundleTask =\n-          new TimerTask() {\n-            @Override\n-            public void run() {\n-              try {\n-                b2.close();\n-                closed.set(true);\n-              } catch (Exception e) {\n-                throw new RuntimeException(e);\n-              }\n-            }\n-          };\n-      new Timer().schedule(closeBundleTask, 100);\n-\n+      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+      ScheduledFuture<Optional<Exception>> closingFuture =\n+          executor.schedule(\n+              () -> {\n+                try {\n+                  b2.close();\n+                  return Optional.empty();\n+                } catch (Exception e) {\n+                  return Optional.of(e);\n+                }\n+              },\n+              100,\n+              TimeUnit.MILLISECONDS);\n+\n+      // This call should block until closingFuture has finished closing b2\n       RemoteBundle b3 = sbf.getBundle(orf, srh, BundleProgressHandler.ignored());\n \n-      // ensure we waited for close\n+      // ensure the previous call waited for close\n       Assert.assertThat(System.currentTimeMillis() - tms, greaterThanOrEqualTo(100L));\n-      Assert.assertThat(closed.get(), is(true));\n+      // This assertion includes a small delay to give the forked thread a chance to finish if it's\n+      // been blocked\n+      Assert.assertThat(closingFuture.get(1, TimeUnit.MILLISECONDS), equalTo(Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3292bd0bb915322a3413476fa57323a46aec1905"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0OTU3NA==", "bodyText": "Yeah agree a small delay isn't ideal.. my concern with blocking indefinitely is that it could return much later and the test would still pass which wouldn't be correct. It should be done.\nMaybe I'm just splitting hairs, the prior assertion on System time is pretty strong so we could just do without this one.", "url": "https://github.com/apache/beam/pull/13448#discussion_r533049574", "createdAt": "2020-12-01T03:28:08Z", "author": {"login": "TheNeuralBit"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -459,27 +461,28 @@ public void loadBalancesBundles() throws Exception {\n       verify(envFactory, Mockito.times(2)).createEnvironment(eq(environment), any());\n \n       long tms = System.currentTimeMillis();\n-      AtomicBoolean closed = new AtomicBoolean();\n-      // close to free up environment for another bundle\n-      TimerTask closeBundleTask =\n-          new TimerTask() {\n-            @Override\n-            public void run() {\n-              try {\n-                b2.close();\n-                closed.set(true);\n-              } catch (Exception e) {\n-                throw new RuntimeException(e);\n-              }\n-            }\n-          };\n-      new Timer().schedule(closeBundleTask, 100);\n-\n+      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+      ScheduledFuture<Optional<Exception>> closingFuture =\n+          executor.schedule(\n+              () -> {\n+                try {\n+                  b2.close();\n+                  return Optional.empty();\n+                } catch (Exception e) {\n+                  return Optional.of(e);\n+                }\n+              },\n+              100,\n+              TimeUnit.MILLISECONDS);\n+\n+      // This call should block until closingFuture has finished closing b2\n       RemoteBundle b3 = sbf.getBundle(orf, srh, BundleProgressHandler.ignored());\n \n-      // ensure we waited for close\n+      // ensure the previous call waited for close\n       Assert.assertThat(System.currentTimeMillis() - tms, greaterThanOrEqualTo(100L));\n-      Assert.assertThat(closed.get(), is(true));\n+      // This assertion includes a small delay to give the forked thread a chance to finish if it's\n+      // been blocked\n+      Assert.assertThat(closingFuture.get(1, TimeUnit.MILLISECONDS), equalTo(Optional.empty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNjg2Nw=="}, "originalCommit": {"oid": "3292bd0bb915322a3413476fa57323a46aec1905"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzMzg5Ng==", "bodyText": "That does seem like a good reason to want a timeout.\nHere are some possible ways to tighten things down further:\n\nSet tms in the thread just before calling close(), then check getBundle returns after that time. (This guards against the system is running slow and the thread scheduling after significantly more than 100ms.)\nMake the delay of 100 ms random. (This with 1 guards against a Thread.sleep(100L) implementation of getBundle.)", "url": "https://github.com/apache/beam/pull/13448#discussion_r533633896", "createdAt": "2020-12-01T18:34:05Z", "author": {"login": "apilloud"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -459,27 +461,28 @@ public void loadBalancesBundles() throws Exception {\n       verify(envFactory, Mockito.times(2)).createEnvironment(eq(environment), any());\n \n       long tms = System.currentTimeMillis();\n-      AtomicBoolean closed = new AtomicBoolean();\n-      // close to free up environment for another bundle\n-      TimerTask closeBundleTask =\n-          new TimerTask() {\n-            @Override\n-            public void run() {\n-              try {\n-                b2.close();\n-                closed.set(true);\n-              } catch (Exception e) {\n-                throw new RuntimeException(e);\n-              }\n-            }\n-          };\n-      new Timer().schedule(closeBundleTask, 100);\n-\n+      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+      ScheduledFuture<Optional<Exception>> closingFuture =\n+          executor.schedule(\n+              () -> {\n+                try {\n+                  b2.close();\n+                  return Optional.empty();\n+                } catch (Exception e) {\n+                  return Optional.of(e);\n+                }\n+              },\n+              100,\n+              TimeUnit.MILLISECONDS);\n+\n+      // This call should block until closingFuture has finished closing b2\n       RemoteBundle b3 = sbf.getBundle(orf, srh, BundleProgressHandler.ignored());\n \n-      // ensure we waited for close\n+      // ensure the previous call waited for close\n       Assert.assertThat(System.currentTimeMillis() - tms, greaterThanOrEqualTo(100L));\n-      Assert.assertThat(closed.get(), is(true));\n+      // This assertion includes a small delay to give the forked thread a chance to finish if it's\n+      // been blocked\n+      Assert.assertThat(closingFuture.get(1, TimeUnit.MILLISECONDS), equalTo(Optional.empty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNjg2Nw=="}, "originalCommit": {"oid": "3292bd0bb915322a3413476fa57323a46aec1905"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0NTY5Mg==", "bodyText": "Ok I did similar to your (1), but rather than setting tms I just set an AtomicBoolean prior to calling close, and verify it is set right after getBundle returns.", "url": "https://github.com/apache/beam/pull/13448#discussion_r550345692", "createdAt": "2020-12-30T22:33:21Z", "author": {"login": "TheNeuralBit"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactoryTest.java", "diffHunk": "@@ -459,27 +461,28 @@ public void loadBalancesBundles() throws Exception {\n       verify(envFactory, Mockito.times(2)).createEnvironment(eq(environment), any());\n \n       long tms = System.currentTimeMillis();\n-      AtomicBoolean closed = new AtomicBoolean();\n-      // close to free up environment for another bundle\n-      TimerTask closeBundleTask =\n-          new TimerTask() {\n-            @Override\n-            public void run() {\n-              try {\n-                b2.close();\n-                closed.set(true);\n-              } catch (Exception e) {\n-                throw new RuntimeException(e);\n-              }\n-            }\n-          };\n-      new Timer().schedule(closeBundleTask, 100);\n-\n+      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+      ScheduledFuture<Optional<Exception>> closingFuture =\n+          executor.schedule(\n+              () -> {\n+                try {\n+                  b2.close();\n+                  return Optional.empty();\n+                } catch (Exception e) {\n+                  return Optional.of(e);\n+                }\n+              },\n+              100,\n+              TimeUnit.MILLISECONDS);\n+\n+      // This call should block until closingFuture has finished closing b2\n       RemoteBundle b3 = sbf.getBundle(orf, srh, BundleProgressHandler.ignored());\n \n-      // ensure we waited for close\n+      // ensure the previous call waited for close\n       Assert.assertThat(System.currentTimeMillis() - tms, greaterThanOrEqualTo(100L));\n-      Assert.assertThat(closed.get(), is(true));\n+      // This assertion includes a small delay to give the forked thread a chance to finish if it's\n+      // been blocked\n+      Assert.assertThat(closingFuture.get(1, TimeUnit.MILLISECONDS), equalTo(Optional.empty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNjg2Nw=="}, "originalCommit": {"oid": "3292bd0bb915322a3413476fa57323a46aec1905"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2694, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}