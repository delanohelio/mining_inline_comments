{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MzM5MTY1", "number": 11259, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDowOToxMVrODukIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxNDoyMlrODukTBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTUzMTAwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamAggregationRel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDowOToxMVrOGAnLIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo1Mzo1MFrOGApOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTAxMQ==", "bodyText": "I think this is missing a .build()", "url": "https://github.com/apache/beam/pull/11259#discussion_r403295011", "createdAt": "2020-04-03T20:09:11Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamAggregationRel.java", "diffHunk": "@@ -343,7 +351,11 @@ public void processElement(\n             fieldValues.add(windowStartFieldIndex, ((IntervalWindow) window).start());\n           }\n \n-          o.output(Row.withSchema(outputSchema).addValues(fieldValues).build());\n+          Row row =\n+              verifyRowValues\n+                  ? Row.withSchema(outputSchema).addValues(fieldValues).build()\n+                  : Row.withSchema(outputSchema).attachValues(fieldValues);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0155354227bf10e89bddb3271ee5348088c68d53"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyODU2OA==", "bodyText": "pr/10883 changed attachValues() to return a Row, so build() not needed.", "url": "https://github.com/apache/beam/pull/11259#discussion_r403328568", "createdAt": "2020-04-03T20:53:50Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamAggregationRel.java", "diffHunk": "@@ -343,7 +351,11 @@ public void processElement(\n             fieldValues.add(windowStartFieldIndex, ((IntervalWindow) window).start());\n           }\n \n-          o.output(Row.withSchema(outputSchema).addValues(fieldValues).build());\n+          Row row =\n+              verifyRowValues\n+                  ? Row.withSchema(outputSchema).addValues(fieldValues).build()\n+                  : Row.withSchema(outputSchema).attachValues(fieldValues);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTAxMQ=="}, "originalCommit": {"oid": "0155354227bf10e89bddb3271ee5348088c68d53"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTU1NzUxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/BeamZetaSqlCalcRel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxNDoxNVrOGAnY6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo1Mzo1M1rOGApOYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5ODUzOA==", "bodyText": "and here", "url": "https://github.com/apache/beam/pull/11259#discussion_r403298538", "createdAt": "2020-04-03T20:14:15Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/BeamZetaSqlCalcRel.java", "diffHunk": "@@ -185,14 +193,19 @@ public void processElement(ProcessContext c) {\n         return;\n       }\n \n-      Row.Builder output = Row.withSchema(outputSchema);\n+      List<Object> values = Lists.newArrayListWithExpectedSize(outputSchema.getFieldCount());\n       for (int i = 0; i < outputSchema.getFieldCount(); i++) {\n         // TODO[BEAM-8630]: performance optimization by bundling the gRPC calls\n         Value v = projectExps.get(i).execute(columns, params);\n-        output.addValue(\n-            ZetaSqlUtils.zetaSqlValueToJavaObject(v, outputSchema.getField(i).getType()));\n+        values.add(\n+            ZetaSqlUtils.zetaSqlValueToJavaObject(\n+                v, outputSchema.getField(i).getType(), verifyRowValues));\n       }\n-      c.output(output.build());\n+      Row outputRow =\n+          verifyRowValues\n+              ? Row.withSchema(outputSchema).addValues(values).build()\n+              : Row.withSchema(outputSchema).attachValues(values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0155354227bf10e89bddb3271ee5348088c68d53"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyODYxMA==", "bodyText": "ditto", "url": "https://github.com/apache/beam/pull/11259#discussion_r403328610", "createdAt": "2020-04-03T20:53:53Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/BeamZetaSqlCalcRel.java", "diffHunk": "@@ -185,14 +193,19 @@ public void processElement(ProcessContext c) {\n         return;\n       }\n \n-      Row.Builder output = Row.withSchema(outputSchema);\n+      List<Object> values = Lists.newArrayListWithExpectedSize(outputSchema.getFieldCount());\n       for (int i = 0; i < outputSchema.getFieldCount(); i++) {\n         // TODO[BEAM-8630]: performance optimization by bundling the gRPC calls\n         Value v = projectExps.get(i).execute(columns, params);\n-        output.addValue(\n-            ZetaSqlUtils.zetaSqlValueToJavaObject(v, outputSchema.getField(i).getType()));\n+        values.add(\n+            ZetaSqlUtils.zetaSqlValueToJavaObject(\n+                v, outputSchema.getField(i).getType(), verifyRowValues));\n       }\n-      c.output(output.build());\n+      Row outputRow =\n+          verifyRowValues\n+              ? Row.withSchema(outputSchema).addValues(values).build()\n+              : Row.withSchema(outputSchema).attachValues(values);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5ODUzOA=="}, "originalCommit": {"oid": "0155354227bf10e89bddb3271ee5348088c68d53"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTU1NzgxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxNDoyMlrOGAnZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo1Mzo1OFrOGApOoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5ODU4OQ==", "bodyText": "and here", "url": "https://github.com/apache/beam/pull/11259#discussion_r403298589", "createdAt": "2020-04-03T20:14:22Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlUtils.java", "diffHunk": "@@ -227,18 +229,25 @@ private static Instant zetaSqlTimestampValueToJodaInstant(Value timestampValue)\n     return Instant.ofEpochMilli(millis);\n   }\n \n-  private static List<Object> zetaSqlArrayValueToJavaList(Value arrayValue, FieldType elementType) {\n+  private static List<Object> zetaSqlArrayValueToJavaList(\n+      Value arrayValue, FieldType elementType, boolean verifyValues) {\n     return arrayValue.getElementList().stream()\n-        .map(e -> zetaSqlValueToJavaObject(e, elementType))\n+        .map(e -> zetaSqlValueToJavaObject(e, elementType, verifyValues))\n         .collect(Collectors.toList());\n   }\n \n-  private static Row zetaSqlStructValueToBeamRow(Value structValue, Schema schema) {\n+  private static Row zetaSqlStructValueToBeamRow(\n+      Value structValue, Schema schema, boolean verifyValues) {\n     List<Object> objects = new ArrayList<>(schema.getFieldCount());\n     List<Value> values = structValue.getFieldList();\n     for (int i = 0; i < values.size(); i++) {\n-      objects.add(zetaSqlValueToJavaObject(values.get(i), schema.getField(i).getType()));\n+      objects.add(\n+          zetaSqlValueToJavaObject(values.get(i), schema.getField(i).getType(), verifyValues));\n     }\n-    return Row.withSchema(schema).addValues(objects).build();\n+    Row row =\n+        verifyValues\n+            ? Row.withSchema(schema).addValues(objects).build()\n+            : Row.withSchema(schema).attachValues(objects);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0155354227bf10e89bddb3271ee5348088c68d53"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyODY3Mg==", "bodyText": "ditto", "url": "https://github.com/apache/beam/pull/11259#discussion_r403328672", "createdAt": "2020-04-03T20:53:58Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlUtils.java", "diffHunk": "@@ -227,18 +229,25 @@ private static Instant zetaSqlTimestampValueToJodaInstant(Value timestampValue)\n     return Instant.ofEpochMilli(millis);\n   }\n \n-  private static List<Object> zetaSqlArrayValueToJavaList(Value arrayValue, FieldType elementType) {\n+  private static List<Object> zetaSqlArrayValueToJavaList(\n+      Value arrayValue, FieldType elementType, boolean verifyValues) {\n     return arrayValue.getElementList().stream()\n-        .map(e -> zetaSqlValueToJavaObject(e, elementType))\n+        .map(e -> zetaSqlValueToJavaObject(e, elementType, verifyValues))\n         .collect(Collectors.toList());\n   }\n \n-  private static Row zetaSqlStructValueToBeamRow(Value structValue, Schema schema) {\n+  private static Row zetaSqlStructValueToBeamRow(\n+      Value structValue, Schema schema, boolean verifyValues) {\n     List<Object> objects = new ArrayList<>(schema.getFieldCount());\n     List<Value> values = structValue.getFieldList();\n     for (int i = 0; i < values.size(); i++) {\n-      objects.add(zetaSqlValueToJavaObject(values.get(i), schema.getField(i).getType()));\n+      objects.add(\n+          zetaSqlValueToJavaObject(values.get(i), schema.getField(i).getType(), verifyValues));\n     }\n-    return Row.withSchema(schema).addValues(objects).build();\n+    Row row =\n+        verifyValues\n+            ? Row.withSchema(schema).addValues(objects).build()\n+            : Row.withSchema(schema).attachValues(objects);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5ODU4OQ=="}, "originalCommit": {"oid": "0155354227bf10e89bddb3271ee5348088c68d53"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1557, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}