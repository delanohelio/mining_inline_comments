{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzQ0Mzcy", "number": 12841, "title": "[BEAM-10894] Basic CSV reading and writing.", "bodyText": "Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-14T16:38:38Z", "url": "https://github.com/apache/beam/pull/12841", "merged": true, "mergeCommit": {"oid": "c86759174e2b78977215502320cb16f5d9e0f4ce"}, "closed": true, "closedAt": "2020-09-18T23:04:48Z", "author": {"login": "robertwb"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI15a7gH2gAyNDg2NzQ0MzcyOmY4MTJmODU2NWY4MmVhZjdkZDMwZjlhMTBmMDgwMTEwOTI3NjE0NmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKKZ0oAH2gAyNDg2NzQ0MzcyOjUwMDI1MDhkZmYwNjRjYjE3ZTI1NzUxZWM4NjhmNzU0ZWEyZDk5N2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f812f8565f82eaf7dd30f9a10f0801109276146e", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/f812f8565f82eaf7dd30f9a10f0801109276146e", "committedDate": "2020-09-14T16:36:19Z", "message": "[BEAM-10894] Basic CSV reading and writing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "081840c7cadca2bfbb3784deb3576610c7feccba", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/081840c7cadca2bfbb3784deb3576610c7feccba", "committedDate": "2020-09-15T00:12:53Z", "message": "lint, circular import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28eb70c13f7114da4ff7659eb38641e8ab41770e", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/28eb70c13f7114da4ff7659eb38641e8ab41770e", "committedDate": "2020-09-15T00:21:19Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d86ce1a7744e274656d1f3ac77f3a3b5158bad", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/35d86ce1a7744e274656d1f3ac77f3a3b5158bad", "committedDate": "2020-09-15T15:37:42Z", "message": "lint, py2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab66e1ce1dfb1308a89a9cea21dbc9502c8c43e8", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/ab66e1ce1dfb1308a89a9cea21dbc9502c8c43e8", "committedDate": "2020-09-15T16:03:41Z", "message": "new lint issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzI4NjEz", "url": "https://github.com/apache/beam/pull/12841#pullrequestreview-489328613", "createdAt": "2020-09-16T07:01:13Z", "commit": {"oid": "ab66e1ce1dfb1308a89a9cea21dbc9502c8c43e8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowMToxM1rOHSi3kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1NToxNlrOHSksGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNzY5OA==", "bodyText": "Please add pydocs for public API here (or add a TODO/JIRA for this).", "url": "https://github.com/apache/beam/pull/12841#discussion_r489207698", "createdAt": "2020-09-16T07:01:13Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/dataframe/io.py", "diffHunk": "@@ -0,0 +1,178 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+from io import BytesIO\n+from io import StringIO\n+from io import TextIOWrapper\n+\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam import io\n+from apache_beam.dataframe import frame_base\n+\n+\n+def read_csv(path, *args, **kwargs):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab66e1ce1dfb1308a89a9cea21dbc9502c8c43e8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwODM5OQ==", "bodyText": "Is there a reason to provide these as methods instead of transforms (similar to other IO connectors) ?", "url": "https://github.com/apache/beam/pull/12841#discussion_r489208399", "createdAt": "2020-09-16T07:02:38Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/dataframe/io.py", "diffHunk": "@@ -0,0 +1,178 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+from io import BytesIO\n+from io import StringIO\n+from io import TextIOWrapper\n+\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam import io\n+from apache_beam.dataframe import frame_base\n+\n+\n+def read_csv(path, *args, **kwargs):\n+  return _ReadFromPandas(pd.read_csv, path, args, kwargs)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab66e1ce1dfb1308a89a9cea21dbc9502c8c43e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMjMwMA==", "bodyText": "Probably we can replace above file-handling related transforms with transforms available in fileio.\nhttps://github.com/apache/beam/blob/master/sdks/python/apache_beam/io/fileio.py\nFor example,\nfileio.MatchFiles(self.path) | ParDo(_ReadFromPandasFromReadableFileDoFn())\n(ReadableFile.metadata.path gives the file path).", "url": "https://github.com/apache/beam/pull/12841#discussion_r489222300", "createdAt": "2020-09-16T07:29:13Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/dataframe/io.py", "diffHunk": "@@ -0,0 +1,178 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+from io import BytesIO\n+from io import StringIO\n+from io import TextIOWrapper\n+\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam import io\n+from apache_beam.dataframe import frame_base\n+\n+\n+def read_csv(path, *args, **kwargs):\n+  return _ReadFromPandas(pd.read_csv, path, args, kwargs)\n+\n+\n+def write_csv(df, path, *args, **kwargs):\n+  from apache_beam.dataframe import convert\n+  # TODO(roberwb): Amortize the computation for multiple writes?\n+  return convert.to_pcollection(df) | _WriteToPandas(\n+      pd.DataFrame.to_csv, path, args, kwargs, incremental=True, binary=False)\n+\n+\n+def _prefix_range_index_with(prefix, df):\n+  if isinstance(df.index, pd.RangeIndex):\n+    return df.set_index(prefix + df.index.map(str).astype(str))\n+  else:\n+    return df\n+\n+\n+class _ReadFromPandas(beam.PTransform):\n+  def __init__(self, reader, path, args, kwargs):\n+    if not isinstance(path, str):\n+      raise frame_base.WontImplementError('non-deferred')\n+    self.reader = reader\n+    self.path = path\n+    self.args = args\n+    self.kwargs = kwargs\n+\n+  def expand(self, root):\n+    # TODO(robertwb): Handle streaming (with explicit schema).\n+    paths_pcoll = root | beam.Create([self.path])\n+    first = io.filesystems.FileSystems.match([self.path],\n+                                             limits=[1\n+                                                     ])[0].metadata_list[0].path\n+    with io.filesystems.FileSystems.open(first) as handle:\n+      df = next(self.reader(handle, *self.args, chunksize=100, **self.kwargs))\n+\n+    # TODO(robertwb): Actually make an SDF.\n+    def expand_pattern(pattern):\n+      for match_result in io.filesystems.FileSystems.match([pattern]):\n+        for metadata in match_result.metadata_list:\n+          yield metadata.path\n+\n+    pcoll = (\n+        paths_pcoll\n+        | beam.FlatMap(expand_pattern)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab66e1ce1dfb1308a89a9cea21dbc9502c8c43e8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNzUzMA==", "bodyText": "Instead of extending FileBasedSink here please implement a fileio.FileSink and use fileio.WriteToFiles.\nhttps://github.com/apache/beam/blob/master/sdks/python/apache_beam/io/fileio.py#L76", "url": "https://github.com/apache/beam/pull/12841#discussion_r489237530", "createdAt": "2020-09-16T07:55:16Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/dataframe/io.py", "diffHunk": "@@ -0,0 +1,178 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+from io import BytesIO\n+from io import StringIO\n+from io import TextIOWrapper\n+\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam import io\n+from apache_beam.dataframe import frame_base\n+\n+\n+def read_csv(path, *args, **kwargs):\n+  return _ReadFromPandas(pd.read_csv, path, args, kwargs)\n+\n+\n+def write_csv(df, path, *args, **kwargs):\n+  from apache_beam.dataframe import convert\n+  # TODO(roberwb): Amortize the computation for multiple writes?\n+  return convert.to_pcollection(df) | _WriteToPandas(\n+      pd.DataFrame.to_csv, path, args, kwargs, incremental=True, binary=False)\n+\n+\n+def _prefix_range_index_with(prefix, df):\n+  if isinstance(df.index, pd.RangeIndex):\n+    return df.set_index(prefix + df.index.map(str).astype(str))\n+  else:\n+    return df\n+\n+\n+class _ReadFromPandas(beam.PTransform):\n+  def __init__(self, reader, path, args, kwargs):\n+    if not isinstance(path, str):\n+      raise frame_base.WontImplementError('non-deferred')\n+    self.reader = reader\n+    self.path = path\n+    self.args = args\n+    self.kwargs = kwargs\n+\n+  def expand(self, root):\n+    # TODO(robertwb): Handle streaming (with explicit schema).\n+    paths_pcoll = root | beam.Create([self.path])\n+    first = io.filesystems.FileSystems.match([self.path],\n+                                             limits=[1\n+                                                     ])[0].metadata_list[0].path\n+    with io.filesystems.FileSystems.open(first) as handle:\n+      df = next(self.reader(handle, *self.args, chunksize=100, **self.kwargs))\n+\n+    # TODO(robertwb): Actually make an SDF.\n+    def expand_pattern(pattern):\n+      for match_result in io.filesystems.FileSystems.match([pattern]):\n+        for metadata in match_result.metadata_list:\n+          yield metadata.path\n+\n+    pcoll = (\n+        paths_pcoll\n+        | beam.FlatMap(expand_pattern)\n+        | beam.ParDo(_ReadFromPandasDoFn(self.reader, self.args, self.kwargs)))\n+    from apache_beam.dataframe import convert\n+    return convert.to_dataframe(\n+        pcoll, proxy=_prefix_range_index_with(':', df[:0]))\n+\n+\n+class _ReadFromPandasDoFn(beam.DoFn):\n+  def __init__(self, reader, args, kwargs):\n+    # avoid pickling issues\n+    self.reader = reader.__name__\n+    self.args = args\n+    self.kwargs = kwargs\n+\n+  def process(self, path):\n+    reader = getattr(pd, self.reader)\n+    for df in reader(path, *self.args, chunksize=100, **self.kwargs):\n+      yield _prefix_range_index_with(path + ':', df)\n+\n+\n+class _WriteToPandas(beam.PTransform):\n+  def __init__(\n+      self, writer, path, args, kwargs, incremental=False, binary=True):\n+    self.writer = writer\n+    self.path = path\n+    self.args = args\n+    self.kwargs = kwargs\n+    self.incremental = incremental\n+    self.binary = binary\n+\n+  def expand(self, pcoll):\n+    return pcoll | io.Write(\n+        _WriteToPandasFileBasedSink(\n+            self.writer,\n+            self.path,\n+            self.args,\n+            self.kwargs,\n+            self.incremental,\n+            self.binary))\n+\n+\n+class _WriteToPandasFileBasedSink(io.FileBasedSink):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab66e1ce1dfb1308a89a9cea21dbc9502c8c43e8"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2f7ae5626df4b0dec73a68b279b2db8c881aade", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/c2f7ae5626df4b0dec73a68b279b2db8c881aade", "committedDate": "2020-09-17T00:39:37Z", "message": "Docs for read_csv."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2604d6bfbff1a9f923c66cebe7025d02fff97cd6", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/2604d6bfbff1a9f923c66cebe7025d02fff97cd6", "committedDate": "2020-09-17T00:47:41Z", "message": "Use fileio.MatchFiles."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46a2df44bc6346e361c33d6b37093187d8670eb9", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/46a2df44bc6346e361c33d6b37093187d8670eb9", "committedDate": "2020-09-17T15:35:47Z", "message": "Use fileio.FileSink."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5c2553759fcaf5fa137a77b682a2ffc14ab77db", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/d5c2553759fcaf5fa137a77b682a2ffc14ab77db", "committedDate": "2020-09-17T23:18:48Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1be53570550a175badfddfe5143ce825ce8ee088", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/1be53570550a175badfddfe5143ce825ce8ee088", "committedDate": "2020-09-18T16:46:53Z", "message": "sep"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjY1Mzk1", "url": "https://github.com/apache/beam/pull/12841#pullrequestreview-491665395", "createdAt": "2020-09-18T17:45:51Z", "commit": {"oid": "1be53570550a175badfddfe5143ce825ce8ee088"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo0NTo1MVrOHUWZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowNzoxMFrOHUXCOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwMDU5OQ==", "bodyText": "Import at top (here and below) ?", "url": "https://github.com/apache/beam/pull/12841#discussion_r491100599", "createdAt": "2020-09-18T17:45:51Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/dataframe/io.py", "diffHunk": "@@ -0,0 +1,180 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+from io import BytesIO\n+from io import StringIO\n+from io import TextIOWrapper\n+\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam import io\n+from apache_beam.dataframe import frame_base\n+from apache_beam.io import fileio\n+\n+\n+def read_csv(path, *args, **kwargs):\n+  \"\"\"Emulates `pd.read_csv` from Pandas, but as a Beam PTransform.\n+\n+  Use this as\n+\n+      df = p | beam.dataframe.io.read_csv(...)\n+\n+  to get a deferred Beam dataframe representing the contents of the file.\n+  \"\"\"\n+  return _ReadFromPandas(pd.read_csv, path, args, kwargs)\n+\n+\n+def write_csv(df, path, *args, **kwargs):\n+  from apache_beam.dataframe import convert", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be53570550a175badfddfe5143ce825ce8ee088"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMDYxMg==", "bodyText": "test_read_csv (seems like this is testing read_csv) ?", "url": "https://github.com/apache/beam/pull/12841#discussion_r491110612", "createdAt": "2020-09-18T18:06:29Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/dataframe/io_test.py", "diffHunk": "@@ -0,0 +1,67 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+import glob\n+import os\n+import shutil\n+import sys\n+import tempfile\n+import unittest\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import io\n+\n+\n+class IOTest(unittest.TestCase):\n+  def setUp(self):\n+    self._temp_roots = []\n+\n+  def tearDown(self):\n+    for root in self._temp_roots:\n+      shutil.rmtree(root)\n+\n+  def temp_dir(self, files=None):\n+    dir = tempfile.mkdtemp(prefix='beam-test')\n+    self._temp_roots.append(dir)\n+    if files:\n+      for name, contents in files.items():\n+        with open(os.path.join(dir, name), 'w') as fout:\n+          fout.write(contents)\n+    return dir + os.sep\n+\n+  def read_all_lines(self, pattern):\n+    for path in glob.glob(pattern):\n+      with open(path) as fin:\n+        # TODO(Py3): yield from\n+        for line in fin:\n+          yield line.rstrip('\\n')\n+\n+  @unittest.skipIf(sys.version_info[0] < 3, 'unicode issues')\n+  def test_write_csv(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be53570550a175badfddfe5143ce825ce8ee088"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExMDk3MQ==", "bodyText": "Add a test for write_cvs as well ?", "url": "https://github.com/apache/beam/pull/12841#discussion_r491110971", "createdAt": "2020-09-18T18:07:10Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/dataframe/io_test.py", "diffHunk": "@@ -0,0 +1,67 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+import glob\n+import os\n+import shutil\n+import sys\n+import tempfile\n+import unittest\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import io\n+\n+\n+class IOTest(unittest.TestCase):\n+  def setUp(self):\n+    self._temp_roots = []\n+\n+  def tearDown(self):\n+    for root in self._temp_roots:\n+      shutil.rmtree(root)\n+\n+  def temp_dir(self, files=None):\n+    dir = tempfile.mkdtemp(prefix='beam-test')\n+    self._temp_roots.append(dir)\n+    if files:\n+      for name, contents in files.items():\n+        with open(os.path.join(dir, name), 'w') as fout:\n+          fout.write(contents)\n+    return dir + os.sep\n+\n+  def read_all_lines(self, pattern):\n+    for path in glob.glob(pattern):\n+      with open(path) as fin:\n+        # TODO(Py3): yield from\n+        for line in fin:\n+          yield line.rstrip('\\n')\n+\n+  @unittest.skipIf(sys.version_info[0] < 3, 'unicode issues')\n+  def test_write_csv(self):\n+    input = self.temp_dir({'1.csv': 'a,b\\n1,2\\n', '2.csv': 'a,b\\n3,4\\n'})\n+    output = self.temp_dir()\n+    with beam.Pipeline() as p:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be53570550a175badfddfe5143ce825ce8ee088"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "951f47b69e17bfc16c6636b81b9e5b944da83843", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/951f47b69e17bfc16c6636b81b9e5b944da83843", "committedDate": "2020-09-18T19:03:40Z", "message": "last couple fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5002508dff064cb17e25751ec868f754ea2d997e", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/5002508dff064cb17e25751ec868f754ea2d997e", "committedDate": "2020-09-18T19:03:44Z", "message": "Merge branch 'master' into dataframe-csv"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2753, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}