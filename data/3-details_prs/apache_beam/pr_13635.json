{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2OTAxMDQ3", "number": 13635, "title": "[BEAM-11538] Add a Deque Encoder", "bodyText": "Please add a meaningful description for your change here.\nA Deque is in certain situations faster than a List: https://stackoverflow.com/questions/6163166/why-is-arraydeque-better-than-linkedlist. When writing a custom CombineFn, appending is something that we often do, therefore I think it is a nice addition to the default encoders.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username). R: @iemejia\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-30T11:03:39Z", "url": "https://github.com/apache/beam/pull/13635", "merged": true, "mergeCommit": {"oid": "f437145a4e318f03d37b959f68b1e60535b70603"}, "closed": true, "closedAt": "2021-01-18T13:45:43Z", "author": {"login": "Fokko"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrNRVsgBqjQxNTY5NTE0MTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxW-RNgFqTU3MDUwMjYxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21b26cc6d57d805709e9723680390a73a9561d65", "author": {"user": {"login": "Fokko", "name": "Fokko Driesprong"}}, "url": "https://github.com/apache/beam/commit/21b26cc6d57d805709e9723680390a73a9561d65", "committedDate": "2020-12-30T10:55:10Z", "message": "[BEAM-11538] Add a Deque Encoder"}, "afterCommit": {"oid": "9868fb2211020d25822bd581411f99354c28be2a", "author": {"user": {"login": "Fokko", "name": "Fokko Driesprong"}}, "url": "https://github.com/apache/beam/commit/9868fb2211020d25822bd581411f99354c28be2a", "committedDate": "2020-12-30T11:03:14Z", "message": "[BEAM-11538] Add a Deque Encoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjM0MTU5", "url": "https://github.com/apache/beam/pull/13635#pullrequestreview-561234159", "createdAt": "2021-01-04T18:12:09Z", "commit": {"oid": "e4ffa71884d7e9288d2107c24fd879d7d16fd956"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxMjowOVrOIN7vjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxNTozM1rOIN710g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MTIyOA==", "bodyText": "DequeCoder.elemCoder or better to even not reference private variables and say \"Coder for elements of DequeCoder must be determistic\".", "url": "https://github.com/apache/beam/pull/13635#discussion_r551481228", "createdAt": "2021-01-04T18:12:09Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/coders/DequeCoder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeParameter;\n+\n+/**\n+ * A {@link Coder} for {@link Deque}, using the format of {@link IterableLikeCoder}.\n+ *\n+ * @param <T> the type of the elements of the Deques being transcoded\n+ */\n+public class DequeCoder<T> extends IterableLikeCoder<T, Deque<T>> {\n+\n+  public static <T> DequeCoder<T> of(Coder<T> elemCoder) {\n+    return new DequeCoder<>(elemCoder);\n+  }\n+\n+  /////////////////////////////////////////////////////////////////////////////\n+  // Internal operations below here.\n+\n+  @Override\n+  protected Deque<T> decodeToIterable(List<T> decodedElements) {\n+    return new ArrayDeque<>(decodedElements);\n+  }\n+\n+  protected DequeCoder(Coder<T> elemCoder) {\n+    super(elemCoder, \"Deque\");\n+  }\n+\n+  @Override\n+  public boolean consistentWithEquals() {\n+    return getElemCoder().consistentWithEquals();\n+  }\n+\n+  @Override\n+  public Object structuralValue(Deque<T> values) {\n+    if (consistentWithEquals()) {\n+      return values;\n+    } else {\n+      final Deque<Object> ret = new ArrayDeque<>(values.size());\n+      for (T value : values) {\n+        ret.add(getElemCoder().structuralValue(value));\n+      }\n+      return ret;\n+    }\n+  }\n+\n+  /**\n+   * Deque sizes are always known, so DequeIterable may be deterministic while the general\n+   * IterableLikeCoder is not.\n+   */\n+  @Override\n+  public void verifyDeterministic() throws NonDeterministicException {\n+    verifyDeterministic(this, \"ListCoder.elemCoder must be deterministic\", getElemCoder());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ffa71884d7e9288d2107c24fd879d7d16fd956"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MjM4OQ==", "bodyText": "Prefer ImmutableList.of since this is not converting an array to a list, but just building a list.", "url": "https://github.com/apache/beam/pull/13635#discussion_r551482389", "createdAt": "2021-01-04T18:14:37Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/coders/DequeCoderTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.testing.CoderProperties;\n+import org.apache.beam.sdk.transforms.windowing.GlobalWindow;\n+import org.apache.beam.sdk.util.CoderUtils;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Test case for {@link DequeCoder}. */\n+@RunWith(JUnit4.class)\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})\n+public class DequeCoderTest {\n+\n+  private static final Coder<Deque<Integer>> TEST_CODER = DequeCoder.of(VarIntCoder.of());\n+\n+  private static final List<Deque<Integer>> TEST_VALUES =\n+      Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ffa71884d7e9288d2107c24fd879d7d16fd956"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MjgzNA==", "bodyText": "It would be good to have some tests where the element type is not integer. For example for the case where the inner type is arrays or some other nested structure.", "url": "https://github.com/apache/beam/pull/13635#discussion_r551482834", "createdAt": "2021-01-04T18:15:33Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/coders/DequeCoderTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.testing.CoderProperties;\n+import org.apache.beam.sdk.transforms.windowing.GlobalWindow;\n+import org.apache.beam.sdk.util.CoderUtils;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Test case for {@link DequeCoder}. */\n+@RunWith(JUnit4.class)\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})\n+public class DequeCoderTest {\n+\n+  private static final Coder<Deque<Integer>> TEST_CODER = DequeCoder.of(VarIntCoder.of());\n+\n+  private static final List<Deque<Integer>> TEST_VALUES =\n+      Arrays.asList(\n+          new ArrayDeque<>(),\n+          new ArrayDeque<>(Collections.singleton(13)),\n+          new ArrayDeque<>(Arrays.asList(31, -5, 83)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ffa71884d7e9288d2107c24fd879d7d16fd956"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NDU0MzM3", "url": "https://github.com/apache/beam/pull/13635#pullrequestreview-564454337", "createdAt": "2021-01-08T17:38:58Z", "commit": {"oid": "16ea0bf7ab7eb13585d61adcd05af6ef42848ac7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzozODo1OFrOIQbJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzozODo1OFrOIQbJaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MjkwNA==", "bodyText": "I don't believe this one is tested.", "url": "https://github.com/apache/beam/pull/13635#discussion_r554092904", "createdAt": "2021-01-08T17:38:58Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/coders/DequeCoder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeParameter;\n+\n+/**\n+ * A {@link Coder} for {@link Deque}, using the format of {@link IterableLikeCoder}.\n+ *\n+ * @param <T> the type of the elements of the Deques being transcoded\n+ */\n+public class DequeCoder<T> extends IterableLikeCoder<T, Deque<T>> {\n+\n+  public static <T> DequeCoder<T> of(Coder<T> elemCoder) {\n+    return new DequeCoder<>(elemCoder);\n+  }\n+\n+  /////////////////////////////////////////////////////////////////////////////\n+  // Internal operations below here.\n+\n+  @Override\n+  protected Deque<T> decodeToIterable(List<T> decodedElements) {\n+    return new ArrayDeque<>(decodedElements);\n+  }\n+\n+  protected DequeCoder(Coder<T> elemCoder) {\n+    super(elemCoder, \"Deque\");\n+  }\n+\n+  @Override\n+  public boolean consistentWithEquals() {\n+    return getElemCoder().consistentWithEquals();\n+  }\n+\n+  @Override\n+  public Object structuralValue(Deque<T> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ea0bf7ab7eb13585d61adcd05af6ef42848ac7"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "743a631542d07637d87002a8d274570a0d8c864a", "author": {"user": {"login": "Fokko", "name": "Fokko Driesprong"}}, "url": "https://github.com/apache/beam/commit/743a631542d07637d87002a8d274570a0d8c864a", "committedDate": "2021-01-17T20:36:22Z", "message": "Revert unrelated changes"}, "afterCommit": {"oid": "cc27eaa6e57c3b5e87ab1e213bf23f06f2bc9d2f", "author": {"user": {"login": "Fokko", "name": "Fokko Driesprong"}}, "url": "https://github.com/apache/beam/commit/cc27eaa6e57c3b5e87ab1e213bf23f06f2bc9d2f", "committedDate": "2021-01-17T20:36:59Z", "message": "Revert unrelated changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMzQ4OTAz", "url": "https://github.com/apache/beam/pull/13635#pullrequestreview-570348903", "createdAt": "2021-01-18T10:18:18Z", "commit": {"oid": "cc27eaa6e57c3b5e87ab1e213bf23f06f2bc9d2f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1de1ab76d00a656199ddfd138523974f5dfd703", "author": {"user": {"login": "Fokko", "name": "Fokko Driesprong"}}, "url": "https://github.com/apache/beam/commit/d1de1ab76d00a656199ddfd138523974f5dfd703", "committedDate": "2021-01-18T11:06:15Z", "message": "[BEAM-11538] Add a Deque Encoder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc27eaa6e57c3b5e87ab1e213bf23f06f2bc9d2f", "author": {"user": {"login": "Fokko", "name": "Fokko Driesprong"}}, "url": "https://github.com/apache/beam/commit/cc27eaa6e57c3b5e87ab1e213bf23f06f2bc9d2f", "committedDate": "2021-01-17T20:36:59Z", "message": "Revert unrelated changes"}, "afterCommit": {"oid": "d1de1ab76d00a656199ddfd138523974f5dfd703", "author": {"user": {"login": "Fokko", "name": "Fokko Driesprong"}}, "url": "https://github.com/apache/beam/commit/d1de1ab76d00a656199ddfd138523974f5dfd703", "committedDate": "2021-01-18T11:06:15Z", "message": "[BEAM-11538] Add a Deque Encoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNTAyNjE2", "url": "https://github.com/apache/beam/pull/13635#pullrequestreview-570502616", "createdAt": "2021-01-18T13:45:27Z", "commit": {"oid": "d1de1ab76d00a656199ddfd138523974f5dfd703"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4294, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}