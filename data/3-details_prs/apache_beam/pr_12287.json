{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNjA2OTQ4", "number": 12287, "title": "[BEAM-10341] Support drain in Java SDK", "bodyText": "The majority of the review occurred on #12016 and this PR represents a large portion of that carved off that was almost ready for check in.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-16T23:48:15Z", "url": "https://github.com/apache/beam/pull/12287", "merged": true, "mergeCommit": {"oid": "ed39236db4bab1171264a4fc86e2e6acffcec6e0"}, "closed": true, "closedAt": "2020-07-17T19:07:09Z", "author": {"login": "boyuanzz"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1nsftAH2gAyNDUwNjA2OTQ4OjY5ODQwMWNmMDU1YTAwNjlmZjJhOTE0MzJkOTk2ZGM3ZmQ4MmE3MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc10hlggFqTQ1MDY5NDYyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "698401cf055a0069ff2a91432d996dc7fd82a719", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/698401cf055a0069ff2a91432d996dc7fd82a719", "committedDate": "2020-07-16T23:18:58Z", "message": "Insert TruncateSizedRestriction when pipeline starts to drain."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "024047196c317b58cc45d34874b9ad7fa0d0068c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/024047196c317b58cc45d34874b9ad7fa0d0068c", "committedDate": "2020-07-16T23:46:38Z", "message": "Address latest comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/047bed7303f7ec6b1ad6cb5db1a8ab68091638c1", "committedDate": "2020-07-16T23:52:28Z", "message": "SpotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzAzOTk1", "url": "https://github.com/apache/beam/pull/12287#pullrequestreview-450303995", "createdAt": "2020-07-17T00:40:26Z", "commit": {"oid": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0MDoyN1rOGzBeHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0MTowMVrOGzBeng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDY1NA==", "bodyText": "This should only handle splits if the mainOutputConsumers has only one value.", "url": "https://github.com/apache/beam/pull/12287#discussion_r456154654", "createdAt": "2020-07-17T00:40:27Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -488,90 +493,77 @@\n             || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n             || !sideInputMapping.isEmpty()) {\n           mainInputConsumer = this::processElementForWindowObservingSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new WindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentWindow,\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+\n         } else {\n           mainInputConsumer = this::processElementForSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new NonWindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentElement.getWindows(),\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionNonWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN:\n+        if ((doFnSignature.truncateRestriction() != null\n+                && doFnSignature.truncateRestriction().observesWindow())\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDc4Mg==", "bodyText": "ditto for handling splits if there is only one output consumer", "url": "https://github.com/apache/beam/pull/12287#discussion_r456154782", "createdAt": "2020-07-17T00:41:01Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -488,90 +493,77 @@\n             || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n             || !sideInputMapping.isEmpty()) {\n           mainInputConsumer = this::processElementForWindowObservingSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new WindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentWindow,\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+\n         } else {\n           mainInputConsumer = this::processElementForSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new NonWindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentElement.getWindows(),\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionNonWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN:\n+        if ((doFnSignature.truncateRestriction() != null\n+                && doFnSignature.truncateRestriction().observesWindow())\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {\n+            mainInputConsumer =\n+                new SplittableFnDataReceiver() {\n+                  @Override\n+                  public void accept(WindowedValue input) throws Exception {\n+                    processElementForWindowObservingTruncateRestriction(input);\n+                  }\n+\n+                  // TODO(BEAM-10303): Split should work with window observing optimization.\n+                  @Override\n+                  public SplitResult trySplit(double fractionOfRemainder) {\n+                    return null;\n+                  }\n+\n+                  // TODO(BEAM-10303): Progress should work with window observing optimization.\n+                  @Override\n+                  public double getProgress() {\n+                    return 0;\n+                  }\n+                };\n+          } else {\n+            mainInputConsumer = this::processElementForWindowObservingTruncateRestriction;\n+          }\n+          this.processContext =\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN);\n+        } else {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "280e33d3cd5222869eabe9192c6b46548dd8a460", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/280e33d3cd5222869eabe9192c6b46548dd8a460", "committedDate": "2020-07-17T02:46:45Z", "message": "Fix java build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf02dad217048a21f2527d4eed7bcf07331caec1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/cf02dad217048a21f2527d4eed7bcf07331caec1", "committedDate": "2020-07-17T02:59:28Z", "message": "spotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzQ1MjU4", "url": "https://github.com/apache/beam/pull/12287#pullrequestreview-450345258", "createdAt": "2020-07-17T03:09:26Z", "commit": {"oid": "cf02dad217048a21f2527d4eed7bcf07331caec1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzowOToyNlrOGzD1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzowOToyNlrOGzD1-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MzUyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *\n          \n          \n            \n               * .", "url": "https://github.com/apache/beam/pull/12287#discussion_r456193528", "createdAt": "2020-07-17T03:09:26Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -69,6 +69,31 @@ public static TransformReplacement createSizedReplacement() {\n     return SizedReplacement.INSTANCE;\n   }\n \n+  /**\n+   * Returns a transform replacement in drain mode which expands a splittable ParDo from:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\\n+   * sideInputB ---------V\n+   * mainInput ---> SplittableParDo --> outputA\n+   *                                \\-> outputB\n+   * }</pre>\n+   *\n+   * into:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\---------------------\\----------------------\\--------------------------\\\n+   * sideInputB ---------V---------------------V----------------------V--------------------------V\n+   * mainInput ---> PairWithRestriction --> SplitAndSize --> TruncateAndSize --> ProcessSizedElementsAndRestriction --> outputA\n+   *                                                                                                                \\-> outputB\n+   * }</pre>\n+   *\n+   * .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf02dad217048a21f2527d4eed7bcf07331caec1"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b66b72a32b3068236c8a9f0da2b8085b1a2e4db", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/9b66b72a32b3068236c8a9f0da2b8085b1a2e4db", "committedDate": "2020-07-17T03:37:06Z", "message": "Only forward split/progress when the only consumer is splittable."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNjk0NjI5", "url": "https://github.com/apache/beam/pull/12287#pullrequestreview-450694629", "createdAt": "2020-07-17T14:15:49Z", "commit": {"oid": "9b66b72a32b3068236c8a9f0da2b8085b1a2e4db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4142, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}