{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDc0Njky", "number": 12799, "title": "[BEAM-10603] Add record_pipeline, clear to RM and fix duration limiter", "bodyText": "This adds record_pipeline and clear to the RecordingManager.\nrecord_pipeline() allows to start a recording without going through show() or collect()\nclear() clears the cache of all recordings.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-09T19:18:41Z", "url": "https://github.com/apache/beam/pull/12799", "merged": true, "mergeCommit": {"oid": "89c3f51e6db92d58e7aebfdb70501015aee01f44"}, "closed": true, "closedAt": "2020-09-22T18:36:31Z", "author": {"login": "rohdesamuel"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJLAjlgBqjM3Njk0NTYyNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ3D8BABqjM3Nzk4MTE5OTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a4c0d4563b92d1af55744c0e0762f0bd989f290", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6a4c0d4563b92d1af55744c0e0762f0bd989f290", "committedDate": "2020-09-09T19:14:14Z", "message": "Add record_pipeline, clear to RM and fix duration limiter\n\nChange-Id: I1ec9e57731d94cb80d83d49f8ec610a18dea267f"}, "afterCommit": {"oid": "f2bf2b54fe91354d0d11483cfd49acf9e6ce171a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f2bf2b54fe91354d0d11483cfd49acf9e6ce171a", "committedDate": "2020-09-15T17:11:09Z", "message": "Add record_pipeline and clear to RM and fix duration limiter\n\nChange-Id: Ieed736a8b5f625fc3cdb3ea91b6a18b4141fade4"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2bf2b54fe91354d0d11483cfd49acf9e6ce171a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f2bf2b54fe91354d0d11483cfd49acf9e6ce171a", "committedDate": "2020-09-15T17:11:09Z", "message": "Add record_pipeline and clear to RM and fix duration limiter\n\nChange-Id: Ieed736a8b5f625fc3cdb3ea91b6a18b4141fade4"}, "afterCommit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4", "committedDate": "2020-09-15T20:05:37Z", "message": "Add record_pipeline and clear to RM and fix duration limiter\n\nChange-Id: Ieed736a8b5f625fc3cdb3ea91b6a18b4141fade4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzAxNDg1", "url": "https://github.com/apache/beam/pull/12799#pullrequestreview-489701485", "createdAt": "2020-09-16T14:44:15Z", "commit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0NDoxNVrOHS0XPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToxODozNFrOHS1-zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NDMzNQ==", "bodyText": "In this case, 'teststream events' seem t refer to watermark/processing time events only. Perhaps you can call it 'include_time_events' or something like that? (since Data events also come form the teststream but are ont affected by this flag)", "url": "https://github.com/apache/beam/pull/12799#discussion_r489494335", "createdAt": "2020-09-16T14:44:15Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -34,7 +34,8 @@ def to_element_list(\n     reader,  # type: Generator[Union[TestStreamPayload.Event, WindowedValueHolder]]\n     coder,  # type: Coder\n     include_window_info,  # type: bool\n-    n=None  # type: int\n+    n=None,  # type: int\n+    include_teststream_events=False, # type: bool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMzEzMA==", "bodyText": "Are Data elements sent decoded, and that's why we have this if/else?", "url": "https://github.com/apache/beam/pull/12799#discussion_r489503130", "createdAt": "2020-09-16T14:55:23Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -114,14 +113,19 @@ def read(self, tail=True):\n     # all elements from the cache were read. In the latter situation, it may be\n     # the case that the pipeline was still running. Thus, another invocation of\n     # `read` will yield new elements.\n+    count_limiter = CountLimiter(self._n)\n+    time_limiter = ProcessingTimeLimiter(self._duration_secs)\n+    limiters = (count_limiter, time_limiter)\n     for e in utils.to_element_list(reader,\n                                    coder,\n                                    include_window_info=True,\n-                                   n=self._n):\n-      for l in limiters:\n-        l.update(e)\n-\n-      yield e\n+                                   n=self._n,\n+                                   include_teststream_events=True):\n+      if isinstance(e, TestStreamPayload.Event):\n+        time_limiter.update(e)\n+      else:\n+        count_limiter.update(e)\n+        yield e", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMzQ1OA==", "bodyText": "Why are you removing start from here?", "url": "https://github.com/apache/beam/pull/12799#discussion_r489503458", "createdAt": "2020-09-16T14:55:47Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -256,7 +259,7 @@ def describe(self):\n \n     size = sum(\n         cache_manager.size('full', s.cache_key) for s in self._streams.values())\n-    return {'size': size, 'start': self._start}\n+    return {'size': size}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDUwOA==", "bodyText": "You can just add line 347 without the if/else. sum(..) over an empty list will return 0.", "url": "https://github.com/apache/beam/pull/12799#discussion_r489514508", "createdAt": "2020-09-16T15:10:05Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -314,15 +330,55 @@ def cancel(self):\n       r.wait_until_finish()\n     self._recordings = set()\n \n+    # The recordings rely on a reference to the BCJ to correctly finish. So we\n+    # evict the BCJ after they complete.\n+    ie.current_env().evict_background_caching_job(self.user_pipeline)\n+\n   def describe(self):\n     # type: () -> dict[str, int]\n \n     \"\"\"Returns a dictionary describing the cache and recording.\"\"\"\n \n+    cache_manager = ie.current_env().get_cache_manager(self.user_pipeline)\n+    capture_size = getattr(cache_manager, 'capture_size', 0)\n+\n     descriptions = [r.describe() for r in self._recordings]\n-    size = sum(d['size'] for d in descriptions)\n-    start = min(d['start'] for d in descriptions)\n-    return {'size': size, 'start': start}\n+    if descriptions:\n+      size = sum(d['size'] for d in descriptions) + capture_size\n+    else:\n+      size = capture_size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxOTc1NQ==", "bodyText": "Would this failure be logged / handled somewhere? Maybe we should log the fialure to start the BCJ?", "url": "https://github.com/apache/beam/pull/12799#discussion_r489519755", "createdAt": "2020-09-16T15:17:15Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -314,15 +330,55 @@ def cancel(self):\n       r.wait_until_finish()\n     self._recordings = set()\n \n+    # The recordings rely on a reference to the BCJ to correctly finish. So we\n+    # evict the BCJ after they complete.\n+    ie.current_env().evict_background_caching_job(self.user_pipeline)\n+\n   def describe(self):\n     # type: () -> dict[str, int]\n \n     \"\"\"Returns a dictionary describing the cache and recording.\"\"\"\n \n+    cache_manager = ie.current_env().get_cache_manager(self.user_pipeline)\n+    capture_size = getattr(cache_manager, 'capture_size', 0)\n+\n     descriptions = [r.describe() for r in self._recordings]\n-    size = sum(d['size'] for d in descriptions)\n-    start = min(d['start'] for d in descriptions)\n-    return {'size': size, 'start': start}\n+    if descriptions:\n+      size = sum(d['size'] for d in descriptions) + capture_size\n+    else:\n+      size = capture_size\n+    start = self._start_time_sec\n+    bcj = ie.current_env().get_background_caching_job(self.user_pipeline)\n+    if bcj:\n+      state = bcj.state\n+    else:\n+      state = PipelineState.STOPPED\n+    return {'size': size, 'start': start, 'state': state}\n+\n+  def record_pipeline(self):\n+    # type: () -> bool\n+\n+    \"\"\"Starts a background caching job for this RecordingManager's pipeline.\"\"\"\n+\n+    runner = self.user_pipeline.runner\n+    if isinstance(runner, ir.InteractiveRunner):\n+      runner = runner._underlying_runner\n+\n+    # Make sure that sources without a user reference are still cached.\n+    pi.watch_sources(self.user_pipeline)\n+\n+    # Attempt to run background caching job to record any sources.\n+    if ie.current_env().is_in_ipython:\n+      warnings.filterwarnings(\n+          'ignore',\n+          'options is deprecated since First stable release. References to '\n+          '<pipeline>.options will not be supported',\n+          category=DeprecationWarning)\n+    if bcj.attempt_to_run_background_caching_job(\n+        runner, self.user_pipeline, options=self.user_pipeline.options):\n+      self._start_time_sec = time.time()\n+      return True\n+    return False", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyMDg0Nw==", "bodyText": "I am trying to figure out - where did we stop passing encoded data events?", "url": "https://github.com/apache/beam/pull/12799#discussion_r489520847", "createdAt": "2020-09-16T15:18:34Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager_test.py", "diffHunk": "@@ -149,43 +152,37 @@ def test_read_n(self):\n \n   def test_read_duration(self):\n     \"\"\"Test that the stream only reads a 'duration' of elements.\"\"\"\n+    def as_windowed_value(element):\n+      return WindowedValueHolder(WindowedValue(element, 0, []))\n \n     values = (FileRecordsBuilder(tag=self.cache_key)\n               .advance_processing_time(1)\n-              .add_element(element=0, event_time_secs=0)\n+              .add_element(element=as_windowed_value(0), event_time_secs=0)\n               .advance_processing_time(1)\n-              .add_element(element=1, event_time_secs=1)\n+              .add_element(element=as_windowed_value(1), event_time_secs=1)\n               .advance_processing_time(1)\n-              .add_element(element=2, event_time_secs=3)\n+              .add_element(element=as_windowed_value(2), event_time_secs=3)\n               .advance_processing_time(1)\n-              .add_element(element=3, event_time_secs=4)\n+              .add_element(element=as_windowed_value(3), event_time_secs=4)\n               .advance_processing_time(1)\n-              .add_element(element=4, event_time_secs=5)\n+              .add_element(element=as_windowed_value(4), event_time_secs=5)\n               .build()) # yapf: disable\n \n+    values = [\n+        v.recorded_event for v in values if isinstance(v, TestStreamFileRecord)\n+    ]\n+\n     self.mock_result.set_state(PipelineState.DONE)\n     self.cache.write(values, 'full', self.cache_key)\n-    self.cache.save_pcoder(None, 'full', self.cache_key)\n-\n-    # The elements read from the cache are TestStreamFileRecord instances and\n-    # have the underlying elements encoded. This method decodes the elements\n-    # from the TestStreamFileRecord.\n-    def get_elements(events):\n-      coder = coders.FastPrimitivesCoder()\n-      elements = []\n-      for e in events:\n-        if not isinstance(e, TestStreamFileRecord):\n-          continue\n-\n-        if e.recorded_event.element_event:\n-          elements += ([\n-              coder.decode(el.encoded_element)\n-              for el in e.recorded_event.element_event.elements\n-          ])\n-      return elements\n+    self.cache.save_pcoder(coders.FastPrimitivesCoder(), 'full', self.cache_key)\n \n     # The following tests a progression of reading different durations from the\n     # cache.\n+\n+    # Small convienence function for getting the values.\n+    def get_elements(events):\n+      return [e.value for e in events]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba76c58ff93b70bb55d2cbc5a1d02d46257d2c4"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c9370e48c0616bb05483126c4cc3afc3ef1d097", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/7c9370e48c0616bb05483126c4cc3afc3ef1d097", "committedDate": "2020-09-17T20:31:16Z", "message": "Add record_pipeline and clear to RM and fix duration limiter\n\nChange-Id: Ieed736a8b5f625fc3cdb3ea91b6a18b4141fade4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1193197c56ce11bf1e9721c7a28ffa8586ffe0f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f1193197c56ce11bf1e9721c7a28ffa8586ffe0f", "committedDate": "2020-09-17T20:31:16Z", "message": "Add comments to RecordingManager\n\nChange-Id: Ia3b411010a1669d3bafce4c74e26a31db1f03a9b"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ebd2c2b984e01bc39e71db8354aeff188a8709a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0ebd2c2b984e01bc39e71db8354aeff188a8709a", "committedDate": "2020-09-16T22:43:39Z", "message": "Add comments to RecordingManager\n\nChange-Id: Ia3b411010a1669d3bafce4c74e26a31db1f03a9b"}, "afterCommit": {"oid": "f1193197c56ce11bf1e9721c7a28ffa8586ffe0f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f1193197c56ce11bf1e9721c7a28ffa8586ffe0f", "committedDate": "2020-09-17T20:31:16Z", "message": "Add comments to RecordingManager\n\nChange-Id: Ia3b411010a1669d3bafce4c74e26a31db1f03a9b"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4706, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}