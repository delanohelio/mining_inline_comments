{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTEzNjAy", "number": 11529, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMzowOFrOD99YOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMzowOFrOD99YOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjk1MzUzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMzowOFrOGXxOmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOTowODo1MFrOGYaHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3Njk4NQ==", "bodyText": "This doesn't seem to be used. It seems we should either:\n\nPass fakeServiceFactory to withServiceFactory and the verify calls below, or\nJust remove fakeServiceFactory and use serviceFactory here instead. It seems to be capable of verifying that the schema isn't read, so I'm not sure there's value in building another fake that doesn't have a schema.\n\nI'd prefer the latter, but I'd be fine with the former if you think that's better.", "url": "https://github.com/apache/beam/pull/11529#discussion_r427576985", "createdAt": "2020-05-19T20:23:08Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java", "diffHunk": "@@ -263,6 +263,17 @@ private void verifyBatches(Iterable<Mutation>... batches) {\n \n   @Test\n   public void noBatching() throws Exception {\n+\n+    // This test uses a different mock/fake because it explicitly does not want to populate the\n+    // Spanner schema.\n+    FakeServiceFactory fakeServiceFactory = new FakeServiceFactory();\n+    ReadOnlyTransaction tx = mock(ReadOnlyTransaction.class);\n+    when(fakeServiceFactory.mockDatabaseClient().readOnlyTransaction()).thenReturn(tx);\n+\n+    // Capture batches sent to writeAtLeastOnce.\n+    when(fakeServiceFactory.mockDatabaseClient().writeAtLeastOnce(mutationBatchesCaptor.capture()))\n+        .thenReturn(null);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ade11d9035e76d145457e7125809ea5f5206be54"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4MDc5NQ==", "bodyText": "Actually on second thought I wonder if we should just leave this test completely unchanged (i.e. call verifyBatches, don't check that the DB schema is never read). The fact the schema isn't read seems like an implementation detail that we don't need to explicitly verify. What do you think?", "url": "https://github.com/apache/beam/pull/11529#discussion_r427580795", "createdAt": "2020-05-19T20:30:19Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java", "diffHunk": "@@ -263,6 +263,17 @@ private void verifyBatches(Iterable<Mutation>... batches) {\n \n   @Test\n   public void noBatching() throws Exception {\n+\n+    // This test uses a different mock/fake because it explicitly does not want to populate the\n+    // Spanner schema.\n+    FakeServiceFactory fakeServiceFactory = new FakeServiceFactory();\n+    ReadOnlyTransaction tx = mock(ReadOnlyTransaction.class);\n+    when(fakeServiceFactory.mockDatabaseClient().readOnlyTransaction()).thenReturn(tx);\n+\n+    // Capture batches sent to writeAtLeastOnce.\n+    when(fakeServiceFactory.mockDatabaseClient().writeAtLeastOnce(mutationBatchesCaptor.capture()))\n+        .thenReturn(null);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3Njk4NQ=="}, "originalCommit": {"oid": "ade11d9035e76d145457e7125809ea5f5206be54"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNTU2Mw==", "bodyText": "This test specifically tests that the pipeline stage for reading the schema (required for grouping/batching) are not being used, verifying that the batching is being bypassed. Yes, this is an implementation detail, but I added this part of the test so that future changes do not break this behaviour.\nI cannot use the already-created serviceFactory here because that does not give me access to the mock ReadOnlyTransaction that I need to verify that executeQuery() is never called.", "url": "https://github.com/apache/beam/pull/11529#discussion_r428235563", "createdAt": "2020-05-20T18:49:00Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java", "diffHunk": "@@ -263,6 +263,17 @@ private void verifyBatches(Iterable<Mutation>... batches) {\n \n   @Test\n   public void noBatching() throws Exception {\n+\n+    // This test uses a different mock/fake because it explicitly does not want to populate the\n+    // Spanner schema.\n+    FakeServiceFactory fakeServiceFactory = new FakeServiceFactory();\n+    ReadOnlyTransaction tx = mock(ReadOnlyTransaction.class);\n+    when(fakeServiceFactory.mockDatabaseClient().readOnlyTransaction()).thenReturn(tx);\n+\n+    // Capture batches sent to writeAtLeastOnce.\n+    when(fakeServiceFactory.mockDatabaseClient().writeAtLeastOnce(mutationBatchesCaptor.capture()))\n+        .thenReturn(null);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3Njk4NQ=="}, "originalCommit": {"oid": "ade11d9035e76d145457e7125809ea5f5206be54"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNzkwNA==", "bodyText": "Ah I see. But should you be using fakeServiceFactory throughout this test then? There are still references to serviceFactory", "url": "https://github.com/apache/beam/pull/11529#discussion_r428237904", "createdAt": "2020-05-20T18:53:20Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java", "diffHunk": "@@ -263,6 +263,17 @@ private void verifyBatches(Iterable<Mutation>... batches) {\n \n   @Test\n   public void noBatching() throws Exception {\n+\n+    // This test uses a different mock/fake because it explicitly does not want to populate the\n+    // Spanner schema.\n+    FakeServiceFactory fakeServiceFactory = new FakeServiceFactory();\n+    ReadOnlyTransaction tx = mock(ReadOnlyTransaction.class);\n+    when(fakeServiceFactory.mockDatabaseClient().readOnlyTransaction()).thenReturn(tx);\n+\n+    // Capture batches sent to writeAtLeastOnce.\n+    when(fakeServiceFactory.mockDatabaseClient().writeAtLeastOnce(mutationBatchesCaptor.capture()))\n+        .thenReturn(null);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3Njk4NQ=="}, "originalCommit": {"oid": "ade11d9035e76d145457e7125809ea5f5206be54"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0NjgyMA==", "bodyText": "Oops, yes, correct. Fixed now.\n\nAh I see. But should you be using fakeServiceFactory throughout this test then? There are still references to serviceFactory\n\nOops, yes, correct! Fixed now.", "url": "https://github.com/apache/beam/pull/11529#discussion_r428246820", "createdAt": "2020-05-20T19:08:50Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIOWriteTest.java", "diffHunk": "@@ -263,6 +263,17 @@ private void verifyBatches(Iterable<Mutation>... batches) {\n \n   @Test\n   public void noBatching() throws Exception {\n+\n+    // This test uses a different mock/fake because it explicitly does not want to populate the\n+    // Spanner schema.\n+    FakeServiceFactory fakeServiceFactory = new FakeServiceFactory();\n+    ReadOnlyTransaction tx = mock(ReadOnlyTransaction.class);\n+    when(fakeServiceFactory.mockDatabaseClient().readOnlyTransaction()).thenReturn(tx);\n+\n+    // Capture batches sent to writeAtLeastOnce.\n+    when(fakeServiceFactory.mockDatabaseClient().writeAtLeastOnce(mutationBatchesCaptor.capture()))\n+        .thenReturn(null);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3Njk4NQ=="}, "originalCommit": {"oid": "ade11d9035e76d145457e7125809ea5f5206be54"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1144, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}