{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTQ3ODE5", "number": 10765, "title": "[BEAM-8758] Google-cloud-spanner upgrade to 1.49.1", "bodyText": "Fixes https://issues.apache.org/jira/browse/BEAM-8758\nCC: @udim\nLinkage Check result\ngoogle-cloud-spanner is used by beam-sdks-java-io-google-cloud-platform.\nUsing https://gist.github.com/suztomo/ec4834151a81f8e1d26aa0afb278818b, I confirmed there's no new linkage errors for beam-sdks-java-io-google-cloud-platform, beam-runners-google-cloud-dataflow-java, and beam-sdks-java-io-hadoop-format.\nsuztomo@suxtomo24:~/beam6$ sh sdks/java/build-tools/beam-linkage-check.sh \n...\nLinkage Check difference on beam-sdks-java-core between master(49863a46) and google-cloud-spanner(62e12c34):\n(no difference)\n\n\nLinkage Check difference on beam-sdks-java-io-google-cloud-platform between master(49863a46) and google-cloud-spanner(62e12c34):\n(no difference)\n\n\nLinkage Check difference on beam-runners-google-cloud-dataflow-java between master(49863a46) and google-cloud-spanner(62e12c34):\n(no difference)\n\n\nLinkage Check difference on beam-sdks-java-io-hadoop-format between master(49863a46) and google-cloud-spanner(62e12c34):\n(no difference)\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-04T16:59:45Z", "url": "https://github.com/apache/beam/pull/10765", "merged": true, "mergeCommit": {"oid": "e5710bab2ceed6b8f2a19fb0cd4098f1d1d58ae7"}, "closed": true, "closedAt": "2020-02-13T21:48:38Z", "author": {"login": "suztomo"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBEFi4gH2gAyMzcwOTQ3ODE5OmRjYWZiYmQ1YjE1OTAzMzY3OGU0ZjAzMGNiOTQyYjdjOGI4OWNmOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEATYegH2gAyMzcwOTQ3ODE5OmNkYjUwMmNmNzZhYzRhM2ZhYjEwYWQzODJmZTNkYTU2MmFjMThkZDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dcafbbd5b159033678e4f030cb942b7c8b89cf8a", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/dcafbbd5b159033678e4f030cb942b7c8b89cf8a", "committedDate": "2020-02-04T16:25:41Z", "message": "Spanner 1.49.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df9bdb35dc5e7747ba712c992b1fa1873619f73", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/7df9bdb35dc5e7747ba712c992b1fa1873619f73", "committedDate": "2020-02-04T16:47:50Z", "message": "Fixed GcpApiSurfaceTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4428eb4a978913b11f47a84c5e2ee0673b874aa3", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/4428eb4a978913b11f47a84c5e2ee0673b874aa3", "committedDate": "2020-02-05T17:48:32Z", "message": "Merge remote-tracking branch 'origin/master' into google-cloud-spanner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NjQ5Mjgw", "url": "https://github.com/apache/beam/pull/10765#pullrequestreview-354649280", "createdAt": "2020-02-06T17:48:49Z", "commit": {"oid": "7df9bdb35dc5e7747ba712c992b1fa1873619f73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0ODo1MFrOFmkbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0ODo1MFrOFmkbMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4Njk5Mw==", "bodyText": "I had to add these classes in whitelist. Details in BEAM-8758.\nI hope they are acceptable.", "url": "https://github.com/apache/beam/pull/10765#discussion_r375986993", "createdAt": "2020-02-06T17:48:50Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/GcpApiSurfaceTest.java", "diffHunk": "@@ -91,6 +91,20 @@ public void testGcpApiSurface() throws Exception {\n             Matchers.<Class<?>>equalTo(com.google.cloud.ByteArray.class),\n             Matchers.<Class<?>>equalTo(com.google.cloud.Date.class),\n             Matchers.<Class<?>>equalTo(com.google.cloud.Timestamp.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Identity.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Identity.Type.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.Builder.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.Marshaller.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Policy.DefaultMarshaller.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.Role.class),\n+            Matchers.<Class<?>>equalTo(com.google.cloud.StringEnumValue.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Binding.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Binding.Builder.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Policy.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.Policy.Builder.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.BindingOrBuilder.class),\n+            Matchers.<Class<?>>equalTo(com.google.iam.v1.PolicyOrBuilder.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df9bdb35dc5e7747ba712c992b1fa1873619f73"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe9ef036230250d88c6caf1909d1717d21b75860", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/fe9ef036230250d88c6caf1909d1717d21b75860", "committedDate": "2020-02-13T18:09:12Z", "message": "Merge remote-tracking branch 'origin/master' into google-cloud-spanner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59ff3cddea01a4f948b6dba28362c467e5b82fe8", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/59ff3cddea01a4f948b6dba28362c467e5b82fe8", "committedDate": "2020-02-13T18:43:00Z", "message": "SpannerAccessor.create\n\nThis change still fails GcpApiSurfaceTest:\n\njava.lang.AssertionError:\nExpected: API surface to include only:\n\tClasses in package \"com.google.api.core\"\n\tClasses in package \"com.google.api.client.googleapis\"\n\tClasses in package \"com.google.api.client.http\"\n\tClasses in package \"com.google.api.client.json\"\n\tClasses in package \"com.google.api.client.util\"\n\tClasses in package \"com.google.api.services.bigquery.model\"\n\tClasses in package \"com.google.auth\"\n\tClasses in package \"com.google.bigtable.v2\"\n\tClasses in package \"com.google.cloud.bigquery.storage.v1beta1\"\n\tClasses in package \"com.google.cloud.bigtable.config\"\n\tClasses in package \"com.google.spanner.v1\"\n\tClasses in package \"com.google.pubsub.v1\"\n\t<class com.google.api.gax.rpc.ApiException>\n\t<interface com.google.api.gax.longrunning.OperationFuture>\n\t<interface com.google.api.gax.longrunning.OperationSnapshot>\n\t<interface com.google.api.gax.paging.Page>\n\t<interface com.google.api.gax.retrying.RetryingFuture>\n\t<class com.google.api.gax.retrying.RetrySettings>\n\t<class com.google.api.gax.retrying.RetrySettings$Builder>\n\t<class com.google.api.gax.retrying.TimedAttemptSettings>\n\t<class com.google.api.gax.retrying.TimedAttemptSettings$Builder>\n\t<interface com.google.api.gax.rpc.StatusCode>\n\t<class com.google.api.gax.rpc.StatusCode$Code>\n\t<class com.google.cloud.bigtable.grpc.BigtableClusterName>\n\t<class com.google.cloud.bigtable.grpc.BigtableInstanceName>\n\t<class com.google.cloud.bigtable.grpc.BigtableTableName>\n\t<class com.google.cloud.BaseServiceException>\n\t<class com.google.cloud.BaseServiceException$Error>\n\t<class com.google.cloud.BaseServiceException$ExceptionData>\n\t<class com.google.cloud.BaseServiceException$ExceptionData$Builder>\n\t<class com.google.cloud.RetryHelper$RetryHelperException>\n\t<class com.google.cloud.grpc.BaseGrpcServiceException>\n\t<class com.google.cloud.ByteArray>\n\t<class com.google.cloud.Date>\n\t<class com.google.cloud.Timestamp>\n\tClasses in package \"com.google.cloud.spanner\"\n\tClasses in package \"com.google.spanner.admin.database.v1\"\n\tClasses in package \"com.google.datastore.v1\"\n\tClasses in package \"com.google.protobuf\"\n\tClasses in package \"com.google.type\"\n\tClasses in package \"com.fasterxml.jackson.annotation\"\n\tClasses in package \"com.fasterxml.jackson.core\"\n\tClasses in package \"com.fasterxml.jackson.databind\"\n\tClasses in package \"io.grpc\"\n\tClasses in package \"java\"\n\tClasses in package \"javax\"\n\tClasses in package \"org.apache.avro\"\n\tClasses in package \"org.apache.beam\"\n\tClasses in package \"org.apache.commons.logging\"\n\tClasses in package \"org.codehaus.jackson\"\n\tClasses in package \"org.joda.time\"\n\tClasses in package \"org.threeten.bp\"\n\n     but: The following disallowed classes appeared on the API surface:\n\tclass com.google.cloud.Identity exposed via:\n\t\tclass com.google.cloud.Identity\n\t\tclass com.google.cloud.Policy$Builder\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.cloud.Identity$Type exposed via:\n\t\tclass com.google.cloud.Identity$Type\n\t\tclass com.google.cloud.Identity\n\t\tclass com.google.cloud.Policy$Builder\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.cloud.Policy exposed via:\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.cloud.Policy$Builder exposed via:\n\t\tclass com.google.cloud.Policy$Builder\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.cloud.Policy$DefaultMarshaller exposed via:\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.cloud.Policy$Marshaller exposed via:\n\t\tclass com.google.cloud.Policy$Marshaller\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.cloud.Role exposed via:\n\t\tclass com.google.cloud.Role\n\t\tclass com.google.cloud.Policy$Builder\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.cloud.StringEnumValue exposed via:\n\t\tclass com.google.cloud.StringEnumValue\n\t\tclass com.google.cloud.Identity$Type\n\t\tclass com.google.cloud.Identity\n\t\tclass com.google.cloud.Policy$Builder\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.iam.v1.Binding exposed via:\n\t\tclass com.google.iam.v1.Binding\n\t\tclass com.google.iam.v1.Binding$Builder\n\t\tclass com.google.iam.v1.Policy$Builder\n\t\tclass com.google.iam.v1.Policy\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.iam.v1.Binding$Builder exposed via:\n\t\tclass com.google.iam.v1.Binding$Builder\n\t\tclass com.google.iam.v1.Binding\n\t\tclass com.google.iam.v1.Policy$Builder\n\t\tclass com.google.iam.v1.Policy\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.iam.v1.Policy exposed via:\n\t\tclass com.google.iam.v1.Policy\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tclass com.google.iam.v1.Policy$Builder exposed via:\n\t\tclass com.google.iam.v1.Policy$Builder\n\t\tclass com.google.iam.v1.Policy\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tinterface com.google.iam.v1.BindingOrBuilder exposed via:\n\t\tinterface com.google.iam.v1.BindingOrBuilder\n\t\tclass com.google.iam.v1.Binding\n\t\tclass com.google.iam.v1.Binding$Builder\n\t\tclass com.google.iam.v1.Policy$Builder\n\t\tclass com.google.iam.v1.Policy\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\tinterface com.google.iam.v1.PolicyOrBuilder exposed via:\n\t\tinterface com.google.iam.v1.PolicyOrBuilder\n\t\tclass com.google.iam.v1.Policy$Builder\n\t\tclass com.google.iam.v1.Policy\n\t\tclass com.google.cloud.Policy$DefaultMarshaller\n\t\tclass com.google.cloud.Policy\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDY4NjI0", "url": "https://github.com/apache/beam/pull/10765#pullrequestreview-358468624", "createdAt": "2020-02-13T18:54:36Z", "commit": {"oid": "59ff3cddea01a4f948b6dba28362c467e5b82fe8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1NDozNlrOFpfpKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1NToyNVrOFpfqww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NDM3Ng==", "bodyText": "I think this line is the cause of the API surface leak, because all the test failure error messages have\n...\n\t\tinterface com.google.cloud.spanner.DatabaseAdminClient\n\t\tclass org.apache.beam.sdk.io.gcp.spanner.SpannerAccessor\n\nIs it ok to make this package private? My IntelliJ says this method is unused. But Beam users might touch the method.", "url": "https://github.com/apache/beam/pull/10765#discussion_r379054376", "createdAt": "2020-02-13T18:54:36Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -40,6 +57,59 @@\n     this.batchClient = batchClient;\n   }\n \n+  static SpannerAccessor create(SpannerConfig spannerConfig) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    ValueProvider<Duration> commitDeadline = spannerConfig.getCommitDeadline();\n+    if (commitDeadline != null && commitDeadline.get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =\n+      // builder.getSpannerStubSettingsBuilder().commitSettings();\n+      // RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder()\n+      // commitSettings.setRetrySettings(\n+      //     commitRetrySettings.setTotalTimeout(\n+      //         Duration.ofMillis(getCommitDeadlineMillis().get()))\n+      //     .build());\n+      //\n+      // However, at time of this commit, the Spanner API is at only at v1.6.0, where the only\n+      // method to set a deadline is with GRPC Interceptors, so we have to use that...\n+      SpannerInterceptorProvider interceptorProvider =\n+          SpannerInterceptorProvider.createDefault()\n+              .with(new CommitDeadlineSettingInterceptor(commitDeadline.get()));\n+      builder.setInterceptorProvider(interceptorProvider);\n+    }\n+\n+    ValueProvider<String> projectId = spannerConfig.getProjectId();\n+    if (projectId != null) {\n+      builder.setProjectId(projectId.get());\n+    }\n+    ServiceFactory<Spanner, SpannerOptions> serviceFactory = spannerConfig.getServiceFactory();\n+    if (serviceFactory != null) {\n+      builder.setServiceFactory(serviceFactory);\n+    }\n+    ValueProvider<String> host = spannerConfig.getHost();\n+    if (host != null) {\n+      builder.setHost(host.get());\n+    }\n+    String userAgentString = USER_AGENT_PREFIX + \"/\" + ReleaseInfo.getReleaseInfo().getVersion();\n+    builder.setHeaderProvider(FixedHeaderProvider.create(\"user-agent\", userAgentString));\n+    SpannerOptions options = builder.build();\n+\n+    Spanner spanner = options.getService();\n+    String instanceId = spannerConfig.getInstanceId().get();\n+    String databaseId = spannerConfig.getDatabaseId().get();\n+    DatabaseClient databaseClient =\n+        spanner.getDatabaseClient(DatabaseId.of(options.getProjectId(), instanceId, databaseId));\n+    BatchClient batchClient =\n+        spanner.getBatchClient(DatabaseId.of(options.getProjectId(), instanceId, databaseId));\n+    DatabaseAdminClient databaseAdminClient = spanner.getDatabaseAdminClient();\n+\n+    return new SpannerAccessor(spanner, databaseClient, databaseAdminClient, batchClient);\n+  }\n+\n   public DatabaseClient getDatabaseClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ff3cddea01a4f948b6dba28362c467e5b82fe8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NDc4Nw==", "bodyText": "SpannerAccessor is public. Therefore any public methods' return values may become the source of the API surface leak.", "url": "https://github.com/apache/beam/pull/10765#discussion_r379054787", "createdAt": "2020-02-13T18:55:25Z", "author": {"login": "suztomo"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -17,19 +17,36 @@\n  */\n package org.apache.beam.sdk.io.gcp.spanner;\n \n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.cloud.ServiceFactory;\n import com.google.cloud.spanner.BatchClient;\n import com.google.cloud.spanner.DatabaseAdminClient;\n import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.spi.v1.SpannerInterceptorProvider;\n+import io.grpc.CallOptions;\n+import io.grpc.Channel;\n+import io.grpc.ClientCall;\n+import io.grpc.ClientInterceptor;\n+import io.grpc.MethodDescriptor;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.beam.sdk.options.ValueProvider;\n+import org.apache.beam.sdk.util.ReleaseInfo;\n+import org.joda.time.Duration;\n \n /** Manages lifecycle of {@link DatabaseClient} and {@link Spanner} instances. */\n public class SpannerAccessor implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ff3cddea01a4f948b6dba28362c467e5b82fe8"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc0ac6a4b86b6d3082cf06edd9e9649e9e801381", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/fc0ac6a4b86b6d3082cf06edd9e9649e9e801381", "committedDate": "2020-02-13T19:16:41Z", "message": "SpannerAccessor is package-private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e12c341655f29fb028370a7ffa69bfc9f36abe", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/62e12c341655f29fb028370a7ffa69bfc9f36abe", "committedDate": "2020-02-13T19:26:18Z", "message": "Changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDkxMjIx", "url": "https://github.com/apache/beam/pull/10765#pullrequestreview-358491221", "createdAt": "2020-02-13T19:29:11Z", "commit": {"oid": "62e12c341655f29fb028370a7ffa69bfc9f36abe"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToyOToxMVrOFpgvQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToyOToxMVrOFpgvQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MjMyMA==", "bodyText": "Please file a JIRA and add a TODO for this comment linking the JIRA now that the upgrade has been done.\nYour free to pick up doing this TODO in a follow-up PR.", "url": "https://github.com/apache/beam/pull/10765#discussion_r379072320", "createdAt": "2020-02-13T19:29:11Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -40,21 +57,91 @@\n     this.batchClient = batchClient;\n   }\n \n-  public DatabaseClient getDatabaseClient() {\n+  static SpannerAccessor create(SpannerConfig spannerConfig) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    ValueProvider<Duration> commitDeadline = spannerConfig.getCommitDeadline();\n+    if (commitDeadline != null && commitDeadline.get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e12c341655f29fb028370a7ffa69bfc9f36abe"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb502cf76ac4a3fab10ad382fe3da562ac18dd4", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/apache/beam/commit/cdb502cf76ac4a3fab10ad382fe3da562ac18dd4", "committedDate": "2020-02-13T19:42:57Z", "message": "Added JIRA ticket"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3400, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}