{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODA4MDc0", "number": 13558, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQyMTo1OTowM1rOFbGfWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QwNjozMzozMVrOFbOMBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzOTYyMjAwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQyMTo1OTowM1rOImbhxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQyMzozOTo1MVrOImedYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2NzgxNQ==", "bodyText": "only populate matchDestResults if skipExistingDest is ste.", "url": "https://github.com/apache/beam/pull/13558#discussion_r577167815", "createdAt": "2021-02-16T21:59:03Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,12 +412,23 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = matchResources(destResourceIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ab14031aedb03fa6c98bdcebce5a351e15fa04"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIxNTg0MQ==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/13558#discussion_r577215841", "createdAt": "2021-02-16T23:39:51Z", "author": {"login": "pabloem"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,12 +412,23 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = matchResources(destResourceIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2NzgxNQ=="}, "originalCommit": {"oid": "85ab14031aedb03fa6c98bdcebce5a351e15fa04"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzOTYyMzk3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQyMTo1OTozN1rOImbi_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQyMzo0MDoyNVrOImeeSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2ODEyNw==", "bodyText": "put skipExistingDest first in the conditional.", "url": "https://github.com/apache/beam/pull/13558#discussion_r577168127", "createdAt": "2021-02-16T21:59:37Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,12 +412,23 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = matchResources(destResourceIds);\n+\n+    for (int i = 0; i < matchSrcResults.size(); ++i) {\n+      if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n+        // If the source is not found, and we are ignoring found source files, then we skip it.\n+        continue;\n+      }\n+      if (matchDestResults.get(i).status().equals(Status.OK)\n+          && matchDestResults.get(i).metadata().get(0).sizeBytes()\n+              == matchSrcResults.get(i).metadata().get(0).sizeBytes()\n+          && skipExistingDest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ab14031aedb03fa6c98bdcebce5a351e15fa04"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2OTEyNA==", "bodyText": "Wish there was something better than byte size we could use here (e.g. file hash).", "url": "https://github.com/apache/beam/pull/13558#discussion_r577169124", "createdAt": "2021-02-16T22:01:22Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,12 +412,23 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = matchResources(destResourceIds);\n+\n+    for (int i = 0; i < matchSrcResults.size(); ++i) {\n+      if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n+        // If the source is not found, and we are ignoring found source files, then we skip it.\n+        continue;\n+      }\n+      if (matchDestResults.get(i).status().equals(Status.OK)\n+          && matchDestResults.get(i).metadata().get(0).sizeBytes()\n+              == matchSrcResults.get(i).metadata().get(0).sizeBytes()\n+          && skipExistingDest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2ODEyNw=="}, "originalCommit": {"oid": "85ab14031aedb03fa6c98bdcebce5a351e15fa04"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIxNjA3NQ==", "bodyText": "I have added this for GCS in the latest commit, but defaulting to size for other filesystems. LMK what you think.", "url": "https://github.com/apache/beam/pull/13558#discussion_r577216075", "createdAt": "2021-02-16T23:40:25Z", "author": {"login": "pabloem"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,12 +412,23 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = matchResources(destResourceIds);\n+\n+    for (int i = 0; i < matchSrcResults.size(); ++i) {\n+      if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n+        // If the source is not found, and we are ignoring found source files, then we skip it.\n+        continue;\n+      }\n+      if (matchDestResults.get(i).status().equals(Status.OK)\n+          && matchDestResults.get(i).metadata().get(0).sizeBytes()\n+              == matchSrcResults.get(i).metadata().get(0).sizeBytes()\n+          && skipExistingDest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2ODEyNw=="}, "originalCommit": {"oid": "85ab14031aedb03fa6c98bdcebce5a351e15fa04"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0MDg4MTYwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileBasedSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QwNjozMjo0NFrOImnE6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxNzozNzo0N1rOInCvfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzAzMg==", "bodyText": "We've verified that this is the correct behavior for GCS. What about other file systems?", "url": "https://github.com/apache/beam/pull/13558#discussion_r577357032", "createdAt": "2021-02-17T06:32:44Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileBasedSink.java", "diffHunk": "@@ -764,7 +764,11 @@ final void moveToOutputFiles(\n       }\n       // During a failure case, files may have been deleted in an earlier step. Thus\n       // we ignore missing files here.\n-      FileSystems.rename(srcFiles, dstFiles, StandardMoveOptions.IGNORE_MISSING_FILES);\n+      FileSystems.rename(\n+          srcFiles,\n+          dstFiles,\n+          StandardMoveOptions.IGNORE_MISSING_FILES,\n+          StandardMoveOptions.SKIP_IF_DESTINATION_EXISTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzgxMDMwMg==", "bodyText": "the behavior that we checked in GCS is that we will not encounter 'incomplete' files. But in fact, we only consider a file 'incomplete' if it has a different checksum (or size in absence of checksum). For other file systems, the same rationale applies: Encountering a file with equal checksum means we have the exact same file, and we don't need to rewrite it.\nOnly filesystem where this is a tough assumption is HadoopFileSystem, where we don't have a hash function, and instead we rely solely on the size.\nThoughts?", "url": "https://github.com/apache/beam/pull/13558#discussion_r577810302", "createdAt": "2021-02-17T17:37:47Z", "author": {"login": "pabloem"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileBasedSink.java", "diffHunk": "@@ -764,7 +764,11 @@ final void moveToOutputFiles(\n       }\n       // During a failure case, files may have been deleted in an earlier step. Thus\n       // we ignore missing files here.\n-      FileSystems.rename(srcFiles, dstFiles, StandardMoveOptions.IGNORE_MISSING_FILES);\n+      FileSystems.rename(\n+          srcFiles,\n+          dstFiles,\n+          StandardMoveOptions.IGNORE_MISSING_FILES,\n+          StandardMoveOptions.SKIP_IF_DESTINATION_EXISTS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzAzMg=="}, "originalCommit": {"oid": "06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0MDg4MzI2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QwNjozMzozMVrOImnF6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QwNzowMTo0OVrOImnwZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzI5MQ==", "bodyText": "Should this be ||?", "url": "https://github.com/apache/beam/pull/13558#discussion_r577357291", "createdAt": "2021-02-17T06:33:31Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,16 +412,40 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = new ArrayList<>();\n+    if (skipExistingDest) {\n+      matchDestResults = matchResources(destResourceIds);\n+    }\n+\n+    for (int i = 0; i < matchSrcResults.size(); ++i) {\n+      if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n+        // If the source is not found, and we are ignoring found source files, then we skip it.\n+        continue;\n       }\n+      if (skipExistingDest\n+          && matchDestResults.get(i).status().equals(Status.OK)\n+          && filesMatch(\n+              matchDestResults.get(i).metadata().get(0),\n+              matchSrcResults.get(i).metadata().get(0))) {\n+        // If the destination exists, and we are skipping when destinations exist, then we skip.\n+        continue;\n+      }\n+      srcToHandle.add(srcResourceIds.get(i));\n+      destToHandle.add(destResourceIds.get(i));\n     }\n     return KV.of(srcToHandle, destToHandle);\n   }\n \n+  private static boolean filesMatch(MatchResult.Metadata first, MatchResult.Metadata second) {\n+    if (!first.checksum().isPresent() && !second.checksum().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM2ODE2NA==", "bodyText": "changed this to null. If both checksums are nullable, only then should we rely on the file size - otherwise we should always rely on the checksum (if only one file reports a checksum and the other doesnt, then they are not equal, which is what happens in the next section)", "url": "https://github.com/apache/beam/pull/13558#discussion_r577368164", "createdAt": "2021-02-17T07:01:49Z", "author": {"login": "pabloem"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,16 +412,40 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = new ArrayList<>();\n+    if (skipExistingDest) {\n+      matchDestResults = matchResources(destResourceIds);\n+    }\n+\n+    for (int i = 0; i < matchSrcResults.size(); ++i) {\n+      if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n+        // If the source is not found, and we are ignoring found source files, then we skip it.\n+        continue;\n       }\n+      if (skipExistingDest\n+          && matchDestResults.get(i).status().equals(Status.OK)\n+          && filesMatch(\n+              matchDestResults.get(i).metadata().get(0),\n+              matchSrcResults.get(i).metadata().get(0))) {\n+        // If the destination exists, and we are skipping when destinations exist, then we skip.\n+        continue;\n+      }\n+      srcToHandle.add(srcResourceIds.get(i));\n+      destToHandle.add(destResourceIds.get(i));\n     }\n     return KV.of(srcToHandle, destToHandle);\n   }\n \n+  private static boolean filesMatch(MatchResult.Metadata first, MatchResult.Metadata second) {\n+    if (!first.checksum().isPresent() && !second.checksum().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzI5MQ=="}, "originalCommit": {"oid": "06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2577, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}