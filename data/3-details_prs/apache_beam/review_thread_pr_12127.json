{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjk4Mjkz", "number": 12127, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzoyNTozNFrOEJ6lOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzo1NjoxNFrOEJ65zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODMyNDQzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/graph/coder/bytes_test.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzoyNTozNFrOGqqQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxMDoxNlrOGrRfcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4NTc4Mw==", "bodyText": "I can't figure out why the size part of the encoded buffer is []byte{128, 2} here. It should represent 256 right?", "url": "https://github.com/apache/beam/pull/12127#discussion_r447385783", "createdAt": "2020-06-30T03:25:34Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/graph/coder/bytes_test.go", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+)\n+\n+func TestEncodeDecodeBytes(t *testing.T) {\n+\tlongString := strings.Repeat(\" this sentence is 32 characters.\", 8) // 256 characters to ensure LP works.\n+\ttests := []struct {\n+\t\tv       []byte\n+\t\tencoded []byte\n+\t}{\n+\t\t{v: []byte{}, encoded: []byte{0}},\n+\t\t{v: []byte{42}, encoded: []byte{1, 42}},\n+\t\t{v: []byte{42, 23}, encoded: []byte{2, 42, 23}},\n+\t\t{v: []byte(longString), encoded: append([]byte{128, 2}, []byte(longString)...)},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NDU4OA==", "bodyText": "In order for the VarInt encoding to work, it sacrifices 1 bit out of 8 to signal \"I'm not done yet\". So the first one is set to 128 to signal I have more dat, and the last byte in the sequence has the leading bit 0 to say I'm done. You can read a bit about how the Protocol Buffer Varint encoding works (which is the same as what Beam uses) here: https://carlmastrangelo.com/blog/lets-make-a-varint\nTo be more specific. 256 in binary is 0b1 0000 0000  (9 bits). Since we only have 7 bits per byte available, due to the continuation bit, it needs to be spread over 2 bytes: so it gets encoded as 0b1000 0000 (just the continue bit) + 0b0000 0010 (2)", "url": "https://github.com/apache/beam/pull/12127#discussion_r447844588", "createdAt": "2020-06-30T17:07:22Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/coder/bytes_test.go", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+)\n+\n+func TestEncodeDecodeBytes(t *testing.T) {\n+\tlongString := strings.Repeat(\" this sentence is 32 characters.\", 8) // 256 characters to ensure LP works.\n+\ttests := []struct {\n+\t\tv       []byte\n+\t\tencoded []byte\n+\t}{\n+\t\t{v: []byte{}, encoded: []byte{0}},\n+\t\t{v: []byte{42}, encoded: []byte{1, 42}},\n+\t\t{v: []byte{42, 23}, encoded: []byte{2, 42, 23}},\n+\t\t{v: []byte(longString), encoded: append([]byte{128, 2}, []byte(longString)...)},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4NTc4Mw=="}, "originalCommit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODUzMQ==", "bodyText": "Ah gotcha. Makes sense now.", "url": "https://github.com/apache/beam/pull/12127#discussion_r448028531", "createdAt": "2020-06-30T23:10:16Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/graph/coder/bytes_test.go", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+)\n+\n+func TestEncodeDecodeBytes(t *testing.T) {\n+\tlongString := strings.Repeat(\" this sentence is 32 characters.\", 8) // 256 characters to ensure LP works.\n+\ttests := []struct {\n+\t\tv       []byte\n+\t\tencoded []byte\n+\t}{\n+\t\t{v: []byte{}, encoded: []byte{0}},\n+\t\t{v: []byte{42}, encoded: []byte{1, 42}},\n+\t\t{v: []byte{42, 23}, encoded: []byte{2, 42, 23}},\n+\t\t{v: []byte(longString), encoded: append([]byte{128, 2}, []byte(longString)...)},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4NTc4Mw=="}, "originalCommit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODM3NzExOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/graph/coder/iterable.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzo1NjoxNFrOGqqvQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODoyMFrOGrGTnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM5MzYwMw==", "bodyText": "Is this Printf intentional? I would imagine this line would use logging normally, so a Printf looks like a leftover line after debugging.", "url": "https://github.com/apache/beam/pull/12127#discussion_r447393603", "createdAt": "2020-06-30T03:56:14Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/graph/coder/iterable.go", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+)\n+\n+// TODO(lostluck): 2020.06.29 export these for use for others?\n+\n+// iterableEncoder reflectively encodes a slice or array type using\n+// the beam fixed length iterable encoding.\n+func iterableEncoder(rt reflect.Type, encode func(reflect.Value, io.Writer) error) func(reflect.Value, io.Writer) error {\n+\treturn func(rv reflect.Value, w io.Writer) error {\n+\t\tsize := rv.Len()\n+\t\tif err := EncodeInt32((int32)(size), w); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tfor i := 0; i < size; i++ {\n+\t\t\tif err := encode(rv.Index(i), w); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n+\t\treturn nil\n+\t}\n+}\n+\n+// iterableDecoderForSlice can decode from both the fixed sized and\n+// multi-chunk variants of the beam iterable protocol.\n+// Returns an error for other protocols (such as state backed).\n+func iterableDecoderForSlice(rt reflect.Type, decodeToElem func(reflect.Value, io.Reader) error) func(reflect.Value, io.Reader) error {\n+\treturn func(ret reflect.Value, r io.Reader) error {\n+\t\t// (1) Read count prefixed encoded data\n+\t\tsize, err := DecodeInt32(r)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tn := int(size)\n+\t\tswitch {\n+\t\tcase n >= 0:\n+\t\t\trv := reflect.MakeSlice(rt, n, n)\n+\t\t\tif err := decodeToIterable(rv, r, decodeToElem); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\tret.Set(rv)\n+\t\t\treturn nil\n+\t\tcase n == -1:\n+\t\t\tchunk, err := DecodeVarInt(r)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\trv := reflect.MakeSlice(rt, 0, int(chunk))\n+\t\t\tfor chunk != 0 {\n+\t\t\t\tfmt.Printf(\"chunk: %d\\n\", chunk)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTI3OQ==", "bodyText": "That's exactly what that is: debugging printout. Thanks!", "url": "https://github.com/apache/beam/pull/12127#discussion_r447845279", "createdAt": "2020-06-30T17:08:20Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/coder/iterable.go", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+)\n+\n+// TODO(lostluck): 2020.06.29 export these for use for others?\n+\n+// iterableEncoder reflectively encodes a slice or array type using\n+// the beam fixed length iterable encoding.\n+func iterableEncoder(rt reflect.Type, encode func(reflect.Value, io.Writer) error) func(reflect.Value, io.Writer) error {\n+\treturn func(rv reflect.Value, w io.Writer) error {\n+\t\tsize := rv.Len()\n+\t\tif err := EncodeInt32((int32)(size), w); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tfor i := 0; i < size; i++ {\n+\t\t\tif err := encode(rv.Index(i), w); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n+\t\treturn nil\n+\t}\n+}\n+\n+// iterableDecoderForSlice can decode from both the fixed sized and\n+// multi-chunk variants of the beam iterable protocol.\n+// Returns an error for other protocols (such as state backed).\n+func iterableDecoderForSlice(rt reflect.Type, decodeToElem func(reflect.Value, io.Reader) error) func(reflect.Value, io.Reader) error {\n+\treturn func(ret reflect.Value, r io.Reader) error {\n+\t\t// (1) Read count prefixed encoded data\n+\t\tsize, err := DecodeInt32(r)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tn := int(size)\n+\t\tswitch {\n+\t\tcase n >= 0:\n+\t\t\trv := reflect.MakeSlice(rt, n, n)\n+\t\t\tif err := decodeToIterable(rv, r, decodeToElem); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\tret.Set(rv)\n+\t\t\treturn nil\n+\t\tcase n == -1:\n+\t\t\tchunk, err := DecodeVarInt(r)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\trv := reflect.MakeSlice(rt, 0, int(chunk))\n+\t\t\tfor chunk != 0 {\n+\t\t\t\tfmt.Printf(\"chunk: %d\\n\", chunk)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM5MzYwMw=="}, "originalCommit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3386, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}