{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMzM4Mjc1", "number": 12888, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowOTozM1rOEmOkDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowOTozM1rOEmOkDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTE5OTUwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/iobase.py", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowOTozM1rOHWImqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo0MzowOVrOHW-RaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ==", "bodyText": "If with_attributes is always True, should we also remove with_attributes from _PubSubSink and  _PubSubSource? This change requires _PubSubSource only outputs PubSubMessage and _PubSubSink only accepts PubSubMessage.", "url": "https://github.com/apache/beam/pull/12888#discussion_r492971691", "createdAt": "2020-09-22T19:09:33Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NjUwNg==", "bodyText": "So, I thought that's the simplification you are working on, right ? I'm fine with these properties being removed form source/sink if they are always true.\nThis change simply updates protos (and corresponding encoding in Read/Write transforms) to match your updates to PubSub native source/sink.", "url": "https://github.com/apache/beam/pull/12888#discussion_r492976506", "createdAt": "2020-09-22T19:18:44Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ=="}, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMDU0Mw==", "bodyText": "I only did partial cleanup to Write. We can have a followup PR to add more cleanup.\ncc: @lukecwik", "url": "https://github.com/apache/beam/pull/12888#discussion_r493000543", "createdAt": "2020-09-22T20:04:07Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ=="}, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1MDQ4Mg==", "bodyText": "Hmm, actually \"with_attributes=True\" is not really correct for current users since we do a runner API to and from round trip here: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/runners/dataflow/dataflow_runner.py#L511\nI think the next best course of action is to revert #12760 from the release and get this in once Boyuan's source/sink simplifications are in.", "url": "https://github.com/apache/beam/pull/12888#discussion_r493650482", "createdAt": "2020-09-23T14:42:40Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ=="}, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyODY2NA==", "bodyText": "I added 'with_attributes' property back. That should fix the failure here. We can later deprecate/remove it from the proto if we truly remove all it's usage including DirectRunner.", "url": "https://github.com/apache/beam/pull/12888#discussion_r493728664", "createdAt": "2020-09-23T16:28:10Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ=="}, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MjcwOQ==", "bodyText": "Could you explain more about why it also affects DirecrRunner? I would prefer checking in cleanup for Sink/Source first then checking in clean version of proto. What do you think?", "url": "https://github.com/apache/beam/pull/12888#discussion_r493782709", "createdAt": "2020-09-23T17:56:29Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ=="}, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwMDMxOA==", "bodyText": "I think the crux of the matter is that runners (both Dataflow and Direct) depend on pipeline->proto->pipleline transformation to preserve state.\nAll runners depend on it here: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/pipeline.py#L514\nAdditional Dataflow performs a second round trip here: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/runners/dataflow/dataflow_runner.py#L511\nAdditionally DirectRunner refers to 'with_attributes' property here which is expected to be preserved in such a transformation: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/runners/direct/direct_runner.py#L406\nMy proposal it to remove other Dataflow specific state from the proto and keep with_attributes which is needed to preserve state of the transforms today.", "url": "https://github.com/apache/beam/pull/12888#discussion_r493800318", "createdAt": "2020-09-23T18:26:26Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ=="}, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MDk4NA==", "bodyText": "After an offline discussion, we'll get the revert (#12914) in the unblock the 2.25.0 release and get this PR in after Boyuan's upcoming refactoring efforts.", "url": "https://github.com/apache/beam/pull/12888#discussion_r493850984", "createdAt": "2020-09-23T19:43:09Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -992,6 +1012,43 @@ def expand(self, pcoll):\n           'A sink must inherit iobase.Sink, iobase.NativeSink, '\n           'or be a PTransform. Received : %r' % self.sink)\n \n+  def _pubsub_write_payload(self):\n+    return beam_runner_api_pb2.PubSubWritePayload(\n+        topic=self.sink.full_topic,\n+        id_attribute=self.sink.id_label,\n+        timestamp_attribute=self.sink.timestamp_attribute)\n+\n+  def to_runner_api_parameter(self, context):\n+    # type: (PipelineContext) -> Tuple[str, Any]\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    if isinstance(self.sink, _PubSubSink):\n+      payload = self._pubsub_write_payload()\n+      return (common_urns.composites.PUBSUB_WRITE.urn, payload)\n+    else:\n+      return super(Write, self).to_runner_api_parameter(context)\n+\n+  @staticmethod\n+  @ptransform.PTransform.register_urn(\n+      common_urns.composites.PUBSUB_WRITE.urn,\n+      beam_runner_api_pb2.PubSubWritePayload)\n+  def from_runner_api_parameter(ptransform, payload, unused_context):\n+    # type: (Any, Any, PipelineContext) -> Write\n+    if ptransform.spec.urn != common_urns.composites.PUBSUB_WRITE.urn:\n+      raise ValueError(\n+          'Write transform cannot be constructed for the given proto %r',\n+          ptransform)\n+\n+    # Importing locally to prevent circular dependencies.\n+    from apache_beam.io.gcp.pubsub import _PubSubSink\n+    sink = _PubSubSink(\n+        topic=payload.topic,\n+        id_label=payload.id_attribute,\n+        with_attributes=True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTY5MQ=="}, "originalCommit": {"oid": "98defc31035bffbd1ded39505f85ab4b1af59fdf"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3180, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}