{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODkwODEw", "number": 13082, "title": "[BEAM-9547] Flesh out dataframe groupby (and related) implementation.", "bodyText": "When running on https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html\nBefore:\n250 total test cases:\n  0 skipped (0.0%)\n  4 won't implement (1.6%)\n    3 order-sensitive (75.0%)\n    1 Conversion to a non-deferred a numpy array. (25.0%)\n  26 not implemented (yet) (10.4%)\n    9 NameError following NotImplementedError (34.6%)\n    5 'index' is not yet supported (BEAM-9547) (19.2%)\n    5 GroupBy.agg currently only supports callable arguments (19.2%)\n    1 [Grouper(level=1, axis=0, sort=False), 'A'] (3.8%)\n    1 [Grouper(level='second', axis=0, sort=False), 'A'] (3.8%)\n    1 ['second', 'A'] (3.8%)\n    1 Traceback (most recent call last):\\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/doctest.py\", line 1329, in __run\\n    compileflags, 1), test.globs)\\n  File \"<doctest /Users/robertwb/.apache_beam/cache/pandas-1.1.1/doc/source/user_guide/groupby.rst[127]>\", line 1, in <module>\\n    grouped = data_df.groupby(key)\\n  File \"/Users/robertwb/Work/beam/incubator-beam/sdks/python/apache_beam/dataframe/frames.py\", line 441, in groupby\\n    [self.set_index(by)._expr],\\n  File \"/Users/robertwb/Work/beam/incubator-beam/sdks/python/apache_beam/dataframe/frame_base.py\", line 303, in wrapper\\n    return func(**kwargs)\\n  File \"/Users/robertwb/Work/beam/incubator-beam/sdks/python/apache_beam/dataframe/frame_base.py\", line 334, in wrapper\\n    return func(**kwargs)\\n  File \"/Users/robertwb/Work/beam/incubator-beam/sdks/python/apache_beam/dataframe/frame_base.py\", line 282, in wrapper\\n    result = func(self, **kwargs)\\n  File \"/Users/robertwb/Work/beam/incubator-beam/sdks/python/apache_beam/dataframe/frames.py\", line 490, in set_index\\n    raise NotImplementedError(keys)\\nNotImplementedError: ['US' ,,, 'UK']\\n (3.8%)\n    1 [TimeGrouper(key='Date', freq=<MonthEnd>, axis=0, sort=True, closed='right', label='right', how='mean', convention='e', origin='start_day'), 'Buyer'] (3.8%)\n    1 [TimeGrouper(key='Date', freq=<6 * MonthEnds>, axis=0, sort=True, closed='right', label='right', how='mean', convention='e', origin='start_day'), 'Buyer'] (3.8%)\n    1 [TimeGrouper(level='Date', freq=<6 * MonthEnds>, axis=0, sort=True, closed='right', label='right', how='mean', convention='e', origin='start_day'), 'Buyer'] (3.8%)\n  104 failed (41.6%)\n  116 passed (46.4%)\n\nAfter\n250 total test cases:\n  0 skipped (0.0%)\n  15 won't implement (6.0%)\n    9 NameError following apache_beam.dataframe.frame_base.WontImplementError (60.0%)\n    3 non-deferred (20.0%)\n    1 order sensitive (6.7%)\n    1 Conversion to a non-deferred a numpy array. (6.7%)\n    1 order-sensitive (6.7%)\n  51 not implemented (yet) (20.4%)\n    16 NameError following NotImplementedError (31.4%)\n    14 'get_group' is not yet supported (BEAM-9547) (27.5%)\n    6 'order sensitive' is not yet supported (BEAM-9547) (11.8%)\n    5 GroupBy.agg currently only supports callable arguments (9.8%)\n    3 groupby(as_index=False) (5.9%)\n    1 [Grouper(level=1, axis=0, sort=False), 'A'] (2.0%)\n    1 [Grouper(level='second', axis=0, sort=False), 'A'] (2.0%)\n    1 'rolling' is not yet supported (BEAM-9547) (2.0%)\n    1 [TimeGrouper(key='Date', freq=<MonthEnd>, axis=0, sort=True, closed='right', label='right', how='mean', convention='e', origin='start_day'), 'Buyer'] (2.0%)\n    1 [TimeGrouper(key='Date', freq=<6 * MonthEnds>, axis=0, sort=True, closed='right', label='right', how='mean', convention='e', origin='start_day'), 'Buyer'] (2.0%)\n    1 [TimeGrouper(level='Date', freq=<6 * MonthEnds>, axis=0, sort=True, closed='right', label='right', how='mean', convention='e', origin='start_day'), 'Buyer'] (2.0%)\n    1 index.year (2.0%)\n  49 failed (19.6%)\n  135 passed (54.0%)\n\nMost of what remains is agg for multiple aggregations, which will be a future PR.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-10-13T00:09:49Z", "url": "https://github.com/apache/beam/pull/13082", "merged": true, "mergeCommit": {"oid": "254574b56054f7d31f6409dfb09dedc018a0b775"}, "closed": true, "closedAt": "2020-10-15T20:48:04Z", "author": {"login": "robertwb"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR8IYCAH2gAyNTAxODkwODEwOmEwZGYzNTM5YWFmZWE4ZjEyZGVjZTk5NTJkOWRlZDA4MzE1ZDVlMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdS0wmOgH2gAyNTAxODkwODEwOjAyZDhjMGE0NGIwMjNmOGNmNTJhOTQwZGIwOWFjOWI0NGQ5OGMyYTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a0df3539aafea8f12dece9952d9ded08315d5e08", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/a0df3539aafea8f12dece9952d9ded08315d5e08", "committedDate": "2020-10-12T22:57:24Z", "message": "Introduce intermediate superclass for both Dataframe and Series."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "164c13f53b977960e9bc4a717145cdca651161ce", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/164c13f53b977960e9bc4a717145cdca651161ce", "committedDate": "2020-10-13T00:08:05Z", "message": "[BEAM-9547] Flesh out dataframe groupby (and related) implementation.\n\nWhen running https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html\nthis brings up the passed level to over 50% and reduces the number\nof failed to under 20%."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e17e174b4e9b2446b90f96eb29859cbf48132f", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/96e17e174b4e9b2446b90f96eb29859cbf48132f", "committedDate": "2020-10-13T00:25:53Z", "message": "lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Nzg3ODA3", "url": "https://github.com/apache/beam/pull/13082#pullrequestreview-508787807", "createdAt": "2020-10-14T21:42:43Z", "commit": {"oid": "96e17e174b4e9b2446b90f96eb29859cbf48132f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo0Mjo0NFrOHhmFWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0MDozMFrOHhovoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4OTAxOA==", "bodyText": "Could you update pandas_doctests_test?  It looks like the skipped DataFrame.groupby tests should pass now, and hopefully the Series.groupby ones as well.", "url": "https://github.com/apache/beam/pull/13082#discussion_r504989018", "createdAt": "2020-10-14T21:42:44Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -27,12 +28,118 @@\n from apache_beam.dataframe import partitionings\n \n \n-@frame_base.DeferredFrame._register_for(pd.Series)\n-class DeferredSeries(frame_base.DeferredFrame):\n+class DeferredDataFrameOrSeries(frame_base.DeferredFrame):\n   def __array__(self, dtype=None):\n     raise frame_base.WontImplementError(\n         'Conversion to a non-deferred a numpy array.')\n \n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def droplevel(self, level, axis):\n+    return frame_base.DeferredFrame.wrap(\n+        expressions.ComputedExpression(\n+            'droplevel',\n+            lambda df: df.droplevel(level, axis=axis), [self._expr],\n+            requires_partition_by=partitionings.Nothing(),\n+            preserves_partition_by=partitionings.Index()\n+            if axis in (1, 'column') else partitionings.Nothing()))\n+\n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def groupby(self, by, level, axis, as_index, group_keys, **kwargs):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e17e174b4e9b2446b90f96eb29859cbf48132f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAyMTYyMw==", "bodyText": "I was going to suggest you allow tuple here, but after looking into it I realized the pandas groupby intentionally does the same thing, since a tuple could be a field name. TIL\nhttps://github.com/pandas-dev/pandas/blob/d7a5b838d8d6234f6bec5a30bfa33b24bd4afbd9/pandas/core/groupby/grouper.py#L713-L718", "url": "https://github.com/apache/beam/pull/13082#discussion_r505021623", "createdAt": "2020-10-14T22:25:46Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -27,12 +28,118 @@\n from apache_beam.dataframe import partitionings\n \n \n-@frame_base.DeferredFrame._register_for(pd.Series)\n-class DeferredSeries(frame_base.DeferredFrame):\n+class DeferredDataFrameOrSeries(frame_base.DeferredFrame):\n   def __array__(self, dtype=None):\n     raise frame_base.WontImplementError(\n         'Conversion to a non-deferred a numpy array.')\n \n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def droplevel(self, level, axis):\n+    return frame_base.DeferredFrame.wrap(\n+        expressions.ComputedExpression(\n+            'droplevel',\n+            lambda df: df.droplevel(level, axis=axis), [self._expr],\n+            requires_partition_by=partitionings.Nothing(),\n+            preserves_partition_by=partitionings.Index()\n+            if axis in (1, 'column') else partitionings.Nothing()))\n+\n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def groupby(self, by, level, axis, as_index, group_keys, **kwargs):\n+    if not as_index:\n+      raise NotImplementedError('groupby(as_index=False)')\n+    if not group_keys:\n+      raise NotImplementedError('groupby(group_keys=False)')\n+\n+    if axis in (1, 'columns'):\n+      return _DeferredGroupByCols(\n+          expressions.ComputedExpression(\n+              'groupbycols',\n+              lambda df: df.groupby(by, axis=axis, **kwargs), [self._expr],\n+              requires_partition_by=partitionings.Nothing(),\n+              preserves_partition_by=partitionings.Index()))\n+\n+    if level is None and by is None:\n+      raise TypeError(\"You have to supply one of 'by' and 'level'\")\n+\n+    elif level is not None:\n+      if isinstance(level, (list, tuple)):\n+        levels = level\n+      else:\n+        levels = [level]\n+      all_levels = self._expr.proxy().index.names\n+      levels = [all_levels[i] if isinstance(i, int) else i for i in levels]\n+      levels_to_drop = self._expr.proxy().index.names.difference(levels)\n+      if levels_to_drop:\n+        to_group = self.droplevel(levels_to_drop)._expr\n+      else:\n+        to_group = self._expr\n+\n+    elif callable(by):\n+\n+      def map_index(df):\n+        df = df.copy()\n+        df.index = df.index.map(by)\n+        return df\n+\n+      to_group = expressions.ComputedExpression(\n+          'map_index',\n+          map_index, [self._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Singleton())\n+\n+    elif isinstance(by, DeferredSeries):\n+\n+      if isinstance(self, DeferredSeries):\n+\n+        def set_index(s, by):\n+          df = pd.DataFrame(s)\n+          df, by = df.align(by, axis=0)\n+          return df.set_index(by).iloc[:, 0]\n+      else:\n+\n+        def set_index(df, by):\n+          df, by = df.align(by, axis=0)\n+          return df.set_index(by)\n+\n+      to_group = expressions.ComputedExpression(\n+          'set_index',\n+          set_index,  #\n+          [self._expr, by._expr],\n+          requires_partition_by=partitionings.Index(),\n+          preserves_partition_by=partitionings.Singleton())\n+\n+    elif isinstance(by, np.ndarray):\n+      raise frame_base.WontImplementError('order sensitive')\n+\n+    else:\n+      if not isinstance(by, list):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e17e174b4e9b2446b90f96eb29859cbf48132f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMjYwOQ==", "bodyText": "Should we consider implementing this and groups for categorical grouping keys?", "url": "https://github.com/apache/beam/pull/13082#discussion_r505032609", "createdAt": "2020-10-14T22:40:30Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1120,6 +1222,15 @@ def agg(self, fn):\n             requires_partition_by=partitionings.Index(),\n             preserves_partition_by=partitionings.Singleton()))\n \n+  aggregate = agg\n+\n+  first = last = head = tail = frame_base.not_implemented_method(\n+      'order sensitive')\n+\n+  __len__ = frame_base.wont_implement_method('non-deferred')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e17e174b4e9b2446b90f96eb29859cbf48132f"}, "originalPosition": 207}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84c9d7a402d4be6ef7a80fb8fac1aec0a965b639", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/84c9d7a402d4be6ef7a80fb8fac1aec0a965b639", "committedDate": "2020-10-15T00:56:59Z", "message": "lint, enable tests, todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02d8c0a44b023f8cf52a940db09ac9b44d98c2a1", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/02d8c0a44b023f8cf52a940db09ac9b44d98c2a1", "committedDate": "2020-10-15T16:56:01Z", "message": "mypy, pickling fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1987, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}