{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzYwMjcz", "number": 11956, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODowNFrOEGPBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoxMDo1OVrOEIwNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTczMDA4OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzo0ODowNFrOGk5ysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyMTo0NVrOGk7BTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng==", "bodyText": "I'm wondering if it would make sense to extract the appends of keys and values to a method, but I can't find a nice and clean way of doing it. @kamilwu do you have any thoughts about it?", "url": "https://github.com/apache/beam/pull/11956#discussion_r441348786", "createdAt": "2020-06-17T07:48:04Z", "author": {"login": "mwalenia"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -40,34 +43,72 @@\n \n   private InfluxDBPublisher() {}\n \n+  public static void publishNexmarkResults(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishNexmark(results, settings));\n+  }\n+\n   public static void publishWithSettings(\n       final Collection<NamedTestResult> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishCommon(results, settings));\n+  }\n+\n+  private static void publishWithCheck(\n+      final InfluxDBSettings settings, final PublishFunction publishFunction) {\n     requireNonNull(settings, \"InfluxDB settings must not be null\");\n     if (isNoneBlank(settings.measurement, settings.database)) {\n       try {\n-        publish(results, settings);\n-      } catch (final Exception exception) {\n+        publishFunction.publish();\n+      } catch (Exception exception) {\n         LOG.warn(\"Unable to publish metrics due to error: {}\", exception.getMessage(), exception);\n       }\n     } else {\n       LOG.warn(\"Missing property -- measurement/database. Metrics won't be published.\");\n     }\n   }\n \n-  private static void publish(\n-      final Collection<NamedTestResult> results, final InfluxDBSettings settings) throws Exception {\n+  private static void publishNexmark(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings)\n+      throws Exception {\n \n-    final HttpClientBuilder builder = HttpClientBuilder.create();\n+    final HttpClientBuilder builder = provideHttpBuilder(settings);\n+    final HttpPost postRequest = providePOSTRequest(settings);\n+    final StringBuilder metricBuilder = new StringBuilder();\n+    results.forEach(\n+        map ->\n+            metricBuilder\n+                .append(map.get(\"measurement\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1586c7522cefe122ab47df1be28635673e45ca11"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NDc5Ng==", "bodyText": "How about adding a method getKV that would return a String in this format: \"key=value\", e.g. \"runner=DataflowRunner\"? This would reduce the number of appends.", "url": "https://github.com/apache/beam/pull/11956#discussion_r441364796", "createdAt": "2020-06-17T08:14:57Z", "author": {"login": "kamilwu"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -40,34 +43,72 @@\n \n   private InfluxDBPublisher() {}\n \n+  public static void publishNexmarkResults(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishNexmark(results, settings));\n+  }\n+\n   public static void publishWithSettings(\n       final Collection<NamedTestResult> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishCommon(results, settings));\n+  }\n+\n+  private static void publishWithCheck(\n+      final InfluxDBSettings settings, final PublishFunction publishFunction) {\n     requireNonNull(settings, \"InfluxDB settings must not be null\");\n     if (isNoneBlank(settings.measurement, settings.database)) {\n       try {\n-        publish(results, settings);\n-      } catch (final Exception exception) {\n+        publishFunction.publish();\n+      } catch (Exception exception) {\n         LOG.warn(\"Unable to publish metrics due to error: {}\", exception.getMessage(), exception);\n       }\n     } else {\n       LOG.warn(\"Missing property -- measurement/database. Metrics won't be published.\");\n     }\n   }\n \n-  private static void publish(\n-      final Collection<NamedTestResult> results, final InfluxDBSettings settings) throws Exception {\n+  private static void publishNexmark(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings)\n+      throws Exception {\n \n-    final HttpClientBuilder builder = HttpClientBuilder.create();\n+    final HttpClientBuilder builder = provideHttpBuilder(settings);\n+    final HttpPost postRequest = providePOSTRequest(settings);\n+    final StringBuilder metricBuilder = new StringBuilder();\n+    results.forEach(\n+        map ->\n+            metricBuilder\n+                .append(map.get(\"measurement\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng=="}, "originalCommit": {"oid": "1586c7522cefe122ab47df1be28635673e45ca11"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NTAxNg==", "bodyText": "@pawelpasterz", "url": "https://github.com/apache/beam/pull/11956#discussion_r441365016", "createdAt": "2020-06-17T08:15:17Z", "author": {"login": "kamilwu"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -40,34 +43,72 @@\n \n   private InfluxDBPublisher() {}\n \n+  public static void publishNexmarkResults(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishNexmark(results, settings));\n+  }\n+\n   public static void publishWithSettings(\n       final Collection<NamedTestResult> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishCommon(results, settings));\n+  }\n+\n+  private static void publishWithCheck(\n+      final InfluxDBSettings settings, final PublishFunction publishFunction) {\n     requireNonNull(settings, \"InfluxDB settings must not be null\");\n     if (isNoneBlank(settings.measurement, settings.database)) {\n       try {\n-        publish(results, settings);\n-      } catch (final Exception exception) {\n+        publishFunction.publish();\n+      } catch (Exception exception) {\n         LOG.warn(\"Unable to publish metrics due to error: {}\", exception.getMessage(), exception);\n       }\n     } else {\n       LOG.warn(\"Missing property -- measurement/database. Metrics won't be published.\");\n     }\n   }\n \n-  private static void publish(\n-      final Collection<NamedTestResult> results, final InfluxDBSettings settings) throws Exception {\n+  private static void publishNexmark(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings)\n+      throws Exception {\n \n-    final HttpClientBuilder builder = HttpClientBuilder.create();\n+    final HttpClientBuilder builder = provideHttpBuilder(settings);\n+    final HttpPost postRequest = providePOSTRequest(settings);\n+    final StringBuilder metricBuilder = new StringBuilder();\n+    results.forEach(\n+        map ->\n+            metricBuilder\n+                .append(map.get(\"measurement\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng=="}, "originalCommit": {"oid": "1586c7522cefe122ab47df1be28635673e45ca11"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2ODkwOA==", "bodyText": "Yeah, makes sense, thanks!", "url": "https://github.com/apache/beam/pull/11956#discussion_r441368908", "createdAt": "2020-06-17T08:21:45Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -40,34 +43,72 @@\n \n   private InfluxDBPublisher() {}\n \n+  public static void publishNexmarkResults(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishNexmark(results, settings));\n+  }\n+\n   public static void publishWithSettings(\n       final Collection<NamedTestResult> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishCommon(results, settings));\n+  }\n+\n+  private static void publishWithCheck(\n+      final InfluxDBSettings settings, final PublishFunction publishFunction) {\n     requireNonNull(settings, \"InfluxDB settings must not be null\");\n     if (isNoneBlank(settings.measurement, settings.database)) {\n       try {\n-        publish(results, settings);\n-      } catch (final Exception exception) {\n+        publishFunction.publish();\n+      } catch (Exception exception) {\n         LOG.warn(\"Unable to publish metrics due to error: {}\", exception.getMessage(), exception);\n       }\n     } else {\n       LOG.warn(\"Missing property -- measurement/database. Metrics won't be published.\");\n     }\n   }\n \n-  private static void publish(\n-      final Collection<NamedTestResult> results, final InfluxDBSettings settings) throws Exception {\n+  private static void publishNexmark(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings)\n+      throws Exception {\n \n-    final HttpClientBuilder builder = HttpClientBuilder.create();\n+    final HttpClientBuilder builder = provideHttpBuilder(settings);\n+    final HttpPost postRequest = providePOSTRequest(settings);\n+    final StringBuilder metricBuilder = new StringBuilder();\n+    results.forEach(\n+        map ->\n+            metricBuilder\n+                .append(map.get(\"measurement\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng=="}, "originalCommit": {"oid": "1586c7522cefe122ab47df1be28635673e45ca11"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTIwOTc3OnYy", "diffSide": "RIGHT", "path": ".test-infra/metrics/kubernetes/beam-influxdb.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTowODo0MlrOGoJoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTowODo0MlrOGoJoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NDAwOA==", "bodyText": "<3", "url": "https://github.com/apache/beam/pull/11956#discussion_r444754008", "createdAt": "2020-06-24T09:08:42Z", "author": {"login": "iemejia"}, "path": ".test-infra/metrics/kubernetes/beam-influxdb.yaml", "diffHunk": "@@ -24,6 +24,7 @@ metadata:\n data:\n   init-script.iql: |\n     CREATE RETENTION POLICY \"a_year\" ON \"beam_test_metrics\" DURATION 52w REPLICATION 1 DEFAULT\n+    CREATE RETENTION POLICY \"forever\" ON \"beam_test_metrics\" DURATION INF REPLICATION 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTI0MTQ3OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxNzoyMlrOGoJ8Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzowNTozMlrOGo5wWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTA5NA==", "bodyText": "Since the goal is to improve the existing use case can we make this an integer and use ms instead to make it more precise?", "url": "https://github.com/apache/beam/pull/11956#discussion_r444759094", "createdAt": "2020-06-24T09:17:22Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1MTcyMA==", "bodyText": "Sure, but I think we need to change wording to runtimeMs as well, WDYT?", "url": "https://github.com/apache/beam/pull/11956#discussion_r445451720", "createdAt": "2020-06-25T10:09:48Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTA5NA=="}, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0MjQ4OA==", "bodyText": "Yes good idea", "url": "https://github.com/apache/beam/pull/11956#discussion_r445542488", "createdAt": "2020-06-25T13:05:32Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTA5NA=="}, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTI0NTE5OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToxODoxMFrOGoJ-Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODozMTozNlrOGowwmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTYzMQ==", "bodyText": "Do we use this one? it looks with runtimeMs + numResults this is not needed anymore or we can deduce it if someone cares.", "url": "https://github.com/apache/beam/pull/11956#discussion_r444759631", "createdAt": "2020-06-24T09:18:10Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NTA5OA==", "bodyText": "Sure, I'll remove it from implementation but not here (we want to preserve compatibility with BQ), I'll change it in influx publisher, thanks for the info!", "url": "https://github.com/apache/beam/pull/11956#discussion_r445395098", "createdAt": "2020-06-25T08:31:36Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTYzMQ=="}, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTI1NzA4OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMTozNlrOGoKF5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzowNjozNlrOGo5zLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg==", "bodyText": "Oh I thought timestamps in Influxe were in ms well probably we don't need that level of precision for the start timestamp.", "url": "https://github.com/apache/beam/pull/11956#discussion_r444761572", "createdAt": "2020-06-24T09:21:36Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")\n+              .put(\"numResults\", \"integer\")\n+              .build();\n \n+      if (options.getExportSummaryToBigQuery()) {\n         savePerfsToBigQuery(\n             BigQueryResultsPublisher.create(options.getBigQueryDataset(), schema),\n             options,\n             actual,\n             start);\n       }\n+\n+      if (options.getExportSummaryToInfluxDB()) {\n+        final long timestamp = start.getMillis() / 1000; // seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNjU2Nw==", "bodyText": "The default precision is nanoseconds. In case of nexmark results we changed it and use seconds instead\nreturn new HttpPost(\n        settings.host + \"/write?db=\" + settings.database + \"&\" + retentionPolicy + \"&precision=s\");", "url": "https://github.com/apache/beam/pull/11956#discussion_r445336567", "createdAt": "2020-06-25T06:35:56Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")\n+              .put(\"numResults\", \"integer\")\n+              .build();\n \n+      if (options.getExportSummaryToBigQuery()) {\n         savePerfsToBigQuery(\n             BigQueryResultsPublisher.create(options.getBigQueryDataset(), schema),\n             options,\n             actual,\n             start);\n       }\n+\n+      if (options.getExportSummaryToInfluxDB()) {\n+        final long timestamp = start.getMillis() / 1000; // seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg=="}, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMTEzNQ==", "bodyText": "We've thought that we don't really need milliseconds. Even seconds are probably more than enough", "url": "https://github.com/apache/beam/pull/11956#discussion_r445401135", "createdAt": "2020-06-25T08:42:18Z", "author": {"login": "kamilwu"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")\n+              .put(\"numResults\", \"integer\")\n+              .build();\n \n+      if (options.getExportSummaryToBigQuery()) {\n         savePerfsToBigQuery(\n             BigQueryResultsPublisher.create(options.getBigQueryDataset(), schema),\n             options,\n             actual,\n             start);\n       }\n+\n+      if (options.getExportSummaryToInfluxDB()) {\n+        final long timestamp = start.getMillis() / 1000; // seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg=="}, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0MzIxNQ==", "bodyText": "Yes you guys are right seconds is ok for the execution timestamp and ms is good for the benchmark run time", "url": "https://github.com/apache/beam/pull/11956#discussion_r445543215", "createdAt": "2020-06-25T13:06:36Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")\n+              .put(\"numResults\", \"integer\")\n+              .build();\n \n+      if (options.getExportSummaryToBigQuery()) {\n         savePerfsToBigQuery(\n             BigQueryResultsPublisher.create(options.getBigQueryDataset(), schema),\n             options,\n             actual,\n             start);\n       }\n+\n+      if (options.getExportSummaryToInfluxDB()) {\n+        final long timestamp = start.getMillis() / 1000; // seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg=="}, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTI2Mzg2OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkQueryName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMzozM1rOGoKKSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMzozM1rOGoKKSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjY5Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/beam/pull/11956#discussion_r444762697", "createdAt": "2020-06-24T09:23:33Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkQueryName.java", "diffHunk": "@@ -42,8 +42,8 @@\n   PROCESSING_TIME_WINDOWS(12), // Query \"12\"\n \n   // Other non-numbered queries\n-  BOUNDED_SIDE_INPUT_JOIN,\n-  SESSION_SIDE_INPUT_JOIN;\n+  BOUNDED_SIDE_INPUT_JOIN(13),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTI2OTQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyNTowNlrOGoKN0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyNTowNlrOGoKN0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MzYwMQ==", "bodyText": "Do not depend on repackaged commons-lang3 this will probably be removed in the future so better add the explicit commons-lang3 import and corresponding classes.", "url": "https://github.com/apache/beam/pull/11956#discussion_r444763601", "createdAt": "2020-06-24T09:25:06Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -19,14 +19,19 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils.isBlank;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTkyMTU4OnYy", "diffSide": "LEFT", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo0Nzo1NVrOGoQkjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjoyMjozOFrOGos4aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzcyNg==", "bodyText": "nit: The original code with the strings looks uglier but somehow is easier to understand in a single read (so easier to maintain), the new one requires a lot of methods and jumping back and forth in code for not much. Can we go back to the older approach", "url": "https://github.com/apache/beam/pull/11956#discussion_r444867726", "createdAt": "2020-06-24T12:47:55Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -66,30 +125,43 @@ private static void publish(\n       builder.setDefaultCredentialsProvider(provider);\n     }\n \n-    final HttpPost postRequest = new HttpPost(settings.host + \"/write?db=\" + settings.database);\n+    return builder;\n+  }\n \n-    final StringBuilder metricBuilder = new StringBuilder();\n-    results.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzMTU2MA==", "bodyText": "Hm...sure we can.", "url": "https://github.com/apache/beam/pull/11956#discussion_r445331560", "createdAt": "2020-06-25T06:22:38Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -66,30 +125,43 @@ private static void publish(\n       builder.setDefaultCredentialsProvider(provider);\n     }\n \n-    final HttpPost postRequest = new HttpPost(settings.host + \"/write?db=\" + settings.database);\n+    return builder;\n+  }\n \n-    final StringBuilder metricBuilder = new StringBuilder();\n-    results.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzcyNg=="}, "originalCommit": {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjEzOTY4OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoxMDo1OVrOGo5-Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoyNDoxMFrOGo6gAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NjAzOA==", "bodyText": "argh this commons import escaped here too. Can you use the non repackaged version please.", "url": "https://github.com/apache/beam/pull/11956#discussion_r445546038", "createdAt": "2020-06-25T13:10:59Z", "author": {"login": "iemejia"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -19,14 +19,16 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n-import static org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils.isNoneBlank;\n \n import java.io.IOException;\n import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f2cbe9d9a22783d683c8414598ded57adea2d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDY4OA==", "bodyText": "ah..I would swear I changed it...thanks!", "url": "https://github.com/apache/beam/pull/11956#discussion_r445554688", "createdAt": "2020-06-25T13:24:10Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -19,14 +19,16 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n-import static org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils.isNoneBlank;\n \n import java.io.IOException;\n import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NjAzOA=="}, "originalCommit": {"oid": "12f2cbe9d9a22783d683c8414598ded57adea2d6"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3649, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}