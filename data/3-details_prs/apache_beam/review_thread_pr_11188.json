{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzgyNjc3", "number": 11188, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMDo0MFrODqlBOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo1MjoxMVrODqlV7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTczMzA0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMDo0MFrOF6afeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTozODo1MFrOF6hmSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTc2OQ==", "bodyText": "Consider commenting that this \"RTracker\" isn't implementing the RTracker interface.", "url": "https://github.com/apache/beam/pull/11188#discussion_r396795769", "createdAt": "2020-03-23T22:30:40Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "diffHunk": "@@ -676,39 +737,77 @@ func (fn *BadSdfElementTRestSize) RestrictionSize(float32, RestT) float64 {\n type BadRestT struct{}\n \n type BadSdfRestTSplitRestParam struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestTSplitRestParam) SplitRestriction(int, BadRestT) []RestT {\n \treturn []RestT{}\n }\n \n type BadSdfRestTSplitRestReturn struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestTSplitRestReturn) SplitRestriction(int, RestT) []BadRestT {\n \treturn []BadRestT{}\n }\n \n type BadSdfRestTRestSize struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestTRestSize) RestrictionSize(int, BadRestT) float64 {\n \treturn 0\n }\n \n+type BadSdfRestTCreateTracker struct {\n+\t*GoodSdf\n+}\n+\n+func (fn *BadSdfRestTCreateTracker) CreateTracker(BadRestT) *RTrackerT {\n+\treturn &RTrackerT{}\n+}\n+\n // Examples of other type validation that needs to be done.\n \n type BadSdfRestSizeReturn struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestSizeReturn) BadSdfRestSizeReturn(int, RestT) int {\n \treturn 0\n }\n \n+type BadRTrackerT struct{}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c82695b6174457ef98897d8a4b238ea3fe87541"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjIwMg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11188#discussion_r396912202", "createdAt": "2020-03-24T05:38:50Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "diffHunk": "@@ -676,39 +737,77 @@ func (fn *BadSdfElementTRestSize) RestrictionSize(float32, RestT) float64 {\n type BadRestT struct{}\n \n type BadSdfRestTSplitRestParam struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestTSplitRestParam) SplitRestriction(int, BadRestT) []RestT {\n \treturn []RestT{}\n }\n \n type BadSdfRestTSplitRestReturn struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestTSplitRestReturn) SplitRestriction(int, RestT) []BadRestT {\n \treturn []BadRestT{}\n }\n \n type BadSdfRestTRestSize struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestTRestSize) RestrictionSize(int, BadRestT) float64 {\n \treturn 0\n }\n \n+type BadSdfRestTCreateTracker struct {\n+\t*GoodSdf\n+}\n+\n+func (fn *BadSdfRestTCreateTracker) CreateTracker(BadRestT) *RTrackerT {\n+\treturn &RTrackerT{}\n+}\n+\n // Examples of other type validation that needs to be done.\n \n type BadSdfRestSizeReturn struct {\n-\t*GoodDoFn\n+\t*GoodSdf\n }\n \n func (fn *BadSdfRestSizeReturn) BadSdfRestSizeReturn(int, RestT) int {\n \treturn 0\n }\n \n+type BadRTrackerT struct{}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTc2OQ=="}, "originalCommit": {"oid": "9c82695b6174457ef98897d8a4b238ea3fe87541"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTc4MDQxOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo0OTo1N1rOF6a8sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1ODoyMlrOF6h6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMzI0OQ==", "bodyText": "What do you think of having ProcessElement actually just have an sdf.RTracker value?\nHaving it as the interface simplifies our wrapping approach for dynamic splitting, and means the framework can do it all the time, for safety etc.\nCreateTracker would still need the actual implementation type, and check that it implements sdf.RTracker of course.\nWe can always extend things to allow a user to \"unwrap\" the interface if they need direct access to their RTracker implementation for whatever reason.", "url": "https://github.com/apache/beam/pull/11188#discussion_r396803249", "createdAt": "2020-03-23T22:49:57Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "diffHunk": "@@ -562,7 +595,13 @@ func (fn *GoodSdf) RestrictionSize(int, RestT) float64 {\n \treturn 0\n }\n \n-// TODO(BEAM-3301): Add ProcessElement impl. when restriction trackers are in.\n+func (fn *GoodSdf) CreateTracker(RestT) *RTrackerT {\n+\treturn &RTrackerT{}\n+}\n+\n+func (fn *GoodSdf) ProcessElement(*RTrackerT, int) int {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c82695b6174457ef98897d8a4b238ea3fe87541"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzI5MA==", "bodyText": "That was one of the approaches I considered. I got some feedback on it both ways, but ultimately I didn't really like that approach because it's a bit unintuitive for users to get a different RTracker type than what they created. Documentation would have to do some extra legwork. Plus, it goes against the trend in Go to have users understand what's happening with concurrency.\nBut anyway, I'm open to that approach and may pivot to it if it makes sense, but for now the plan is, when we add dynamic splitting, to provide a concurrency wrapper and have users wrap their RTrackers themselves, or just write their own concurrency. (This is apparently also the way python does it, so it's not completely unprecedented.)", "url": "https://github.com/apache/beam/pull/11188#discussion_r396917290", "createdAt": "2020-03-24T05:58:22Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "diffHunk": "@@ -562,7 +595,13 @@ func (fn *GoodSdf) RestrictionSize(int, RestT) float64 {\n \treturn 0\n }\n \n-// TODO(BEAM-3301): Add ProcessElement impl. when restriction trackers are in.\n+func (fn *GoodSdf) CreateTracker(RestT) *RTrackerT {\n+\treturn &RTrackerT{}\n+}\n+\n+func (fn *GoodSdf) ProcessElement(*RTrackerT, int) int {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMzI0OQ=="}, "originalCommit": {"oid": "9c82695b6174457ef98897d8a4b238ea3fe87541"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTc4NjA1OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/sdf/sdf.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo1MjoxMlrOF6bALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0MjowMFrOF6hpUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNDE0Mw==", "bodyText": "returns nil*", "url": "https://github.com/apache/beam/pull/11188#discussion_r396804143", "createdAt": "2020-03-23T22:52:12Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/sdf/sdf.go", "diffHunk": "@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package sdf is experimental, incomplete, and not yet meant for general usage.\n+package sdf\n+\n+// RTracker is an interface used to interact with restrictions while processing elements in\n+// SplittableDoFns. Each implementation of RTracker is expected to be used for tracking a single\n+// restriction type, which is the type that should be used to create the RTracker, and output by\n+// TrySplit.\n+type RTracker interface {\n+\t// TryClaim attempts to claim the block of work in the current restriction located at a given\n+\t// position. This method must be used in the ProcessElement method of Splittable DoFns to claim\n+\t// work before performing it. If no work is claimed, the ProcessElement is not allowed to perform\n+\t// work or emit outputs. If the claim is successful, the DoFn must process the entire block. If\n+\t// the claim is unsuccessful the ProcessElement method of the DoFn must return without performing\n+\t// any additional work or emitting any outputs.\n+\t//\n+\t// TryClaim accepts an arbitrary value that can be interpreted as the position of a block, and\n+\t// returns a boolean indicating whether the claim succeeded.\n+\t//\n+\t// If the claim fails due to an error, that error can be retrieved with GetError.\n+\t//\n+\t// For SDFs to work properly, claims must always be monotonically increasing in reference to the\n+\t// restriction's start and end points, and every block of work in a restriction must be claimed.\n+\t//\n+\t// This pseudocode example illustrates the typical usage of TryClaim:\n+\t//\n+\t// \tpos = position of first block after restriction.start\n+\t// \tfor TryClaim(pos) == true {\n+\t// \t\t// Do all work in the claimed block and emit outputs.\n+\t// \t\tpos = position of next block\n+\t// \t}\n+\t// \treturn\n+\tTryClaim(pos interface{}) (ok bool)\n+\n+\t// GetError returns the error that made this RTracker stop executing, and it returns null if no", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c82695b6174457ef98897d8a4b238ea3fe87541"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjk3OQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11188#discussion_r396912979", "createdAt": "2020-03-24T05:42:00Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/sdf/sdf.go", "diffHunk": "@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package sdf is experimental, incomplete, and not yet meant for general usage.\n+package sdf\n+\n+// RTracker is an interface used to interact with restrictions while processing elements in\n+// SplittableDoFns. Each implementation of RTracker is expected to be used for tracking a single\n+// restriction type, which is the type that should be used to create the RTracker, and output by\n+// TrySplit.\n+type RTracker interface {\n+\t// TryClaim attempts to claim the block of work in the current restriction located at a given\n+\t// position. This method must be used in the ProcessElement method of Splittable DoFns to claim\n+\t// work before performing it. If no work is claimed, the ProcessElement is not allowed to perform\n+\t// work or emit outputs. If the claim is successful, the DoFn must process the entire block. If\n+\t// the claim is unsuccessful the ProcessElement method of the DoFn must return without performing\n+\t// any additional work or emitting any outputs.\n+\t//\n+\t// TryClaim accepts an arbitrary value that can be interpreted as the position of a block, and\n+\t// returns a boolean indicating whether the claim succeeded.\n+\t//\n+\t// If the claim fails due to an error, that error can be retrieved with GetError.\n+\t//\n+\t// For SDFs to work properly, claims must always be monotonically increasing in reference to the\n+\t// restriction's start and end points, and every block of work in a restriction must be claimed.\n+\t//\n+\t// This pseudocode example illustrates the typical usage of TryClaim:\n+\t//\n+\t// \tpos = position of first block after restriction.start\n+\t// \tfor TryClaim(pos) == true {\n+\t// \t\t// Do all work in the claimed block and emit outputs.\n+\t// \t\tpos = position of next block\n+\t// \t}\n+\t// \treturn\n+\tTryClaim(pos interface{}) (ok bool)\n+\n+\t// GetError returns the error that made this RTracker stop executing, and it returns null if no", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNDE0Mw=="}, "originalCommit": {"oid": "9c82695b6174457ef98897d8a4b238ea3fe87541"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1725, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}