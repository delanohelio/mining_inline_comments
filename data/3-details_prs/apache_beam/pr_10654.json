{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjIzMDM1", "number": 10654, "title": "[BEAM-9167] Reduce Go SDK metric overhead", "bodyText": "This PR dramatically reduces the overhead of metrics in the Go SDK.\nA contemporary side by side comparison of the benchmark in the metrics package on my current machine:\nbenchmark                                        old ns/op     new ns/op     delta\nBenchmarkMetrics/counter_inplace-12              585           249           -57.44%\nBenchmarkMetrics/distribution_inplace-12         622           270           -56.59%\nBenchmarkMetrics/gauge_inplace-12                812           311           -61.70%\nBenchmarkMetrics/counter_predeclared-12          227           15.8          -93.04%\nBenchmarkMetrics/distribution_predeclared-12     282           24.0          -91.49%\nBenchmarkMetrics/gauge_predeclared-12            389           63.7          -83.62%\n\nbenchmark                                        old allocs     new allocs     delta\nBenchmarkMetrics/counter_inplace-12              4              1              -75.00%\nBenchmarkMetrics/distribution_inplace-12         4              1              -75.00%\nBenchmarkMetrics/gauge_inplace-12                4              1              -75.00%\nBenchmarkMetrics/counter_predeclared-12          3              0              -100.00%\nBenchmarkMetrics/distribution_predeclared-12     3              0              -100.00%\nBenchmarkMetrics/gauge_predeclared-12            3              0              -100.00%\n\nbenchmark                                        old bytes     new bytes     delta\nBenchmarkMetrics/counter_inplace-12              160           48            -70.00%\nBenchmarkMetrics/distribution_inplace-12         192           48            -75.00%\nBenchmarkMetrics/gauge_inplace-12                192           48            -75.00%\nBenchmarkMetrics/counter_predeclared-12          48            0             -100.00%\nBenchmarkMetrics/distribution_predeclared-12     80            0             -100.00%\nBenchmarkMetrics/gauge_predeclared-12            80            0             -100.00%\n\nIn particular this PR moves away from a global datastore for all metrics towards a perBundle based countersets. This allows for the removal of the per layer locks and the global lock that needed to be checked since all bundles had to check the same datastore. Now they only store a metric cell in the global store on first creation (still stored per bundle and per ptransform).\nA subsequent change will remove the global store altogether in favour of better exposing the metrics per bundle, and allowing a callback visitor to thread-safely access the data inside each metric. This will also permit removing the dependency on the protos from the package, which was a mistake I made when I first wrote the package.\nFurther, Counters now use atomic operations rather than locks, which additional speeds them up vs the previous mutex approach.\nCounter \"names\" are hashed ahead of time and the hash value cached in the proxy to increase the speed of subsequent lookups using the same proxy object.\nThis does make the proxies unsafe to use concurrently within the same bundle prior to first use, but this matches the general rule of Beam runners managing the concurrency for efficient processing, and that framework constructs are not safe for concurrent use by user code, without user managed locks.\nAs an exploration, I did try using sync.Map to avoid the above restriction, but the overhead for the additional interface wraping and unwraping was significant enough that this approach was worthwhile.\nThis may be worth revisiting if Go gains Generics, as that would probably avoid this cost.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-22T01:44:18Z", "url": "https://github.com/apache/beam/pull/10654", "merged": true, "mergeCommit": {"oid": "5017e58a5d602d4202930f59aa02bbabde741acf"}, "closed": true, "closedAt": "2020-01-23T00:36:30Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8rXhsAH2gAyMzY1NjIzMDM1OjVhNWM0Y2YxMmMxM2IzNzczMTExODIzZGU4OTQ5NDVhNGE5MDllOTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8_EPPAFqTM0Njg1ODgyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/5a5c4cf12c13b3773111823de894945a4a909e95", "committedDate": "2020-01-22T01:22:00Z", "message": "[BEAM-9167] Reduce Go SDK metric overhead"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODU4ODI1", "url": "https://github.com/apache/beam/pull/10654#pullrequestreview-346858825", "createdAt": "2020-01-22T19:51:44Z", "commit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo1MTo0NVrOFgo8CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTozNjowNlrOFgr0IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTQ4MQ==", "bodyText": "Nit: Is part of the comment missing, or was this just a typo of a comma instead of a period?", "url": "https://github.com/apache/beam/pull/10654#discussion_r369769481", "createdAt": "2020-01-22T19:51:45Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNjYwOA==", "bodyText": "and lifts the values for metrics keys for value for faster lookups.\n\nThis is hard for me to parse. Is there a typo in there?", "url": "https://github.com/apache/beam/pull/10654#discussion_r369816608", "createdAt": "2020-01-22T21:36:06Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,\n+\tcounters      map[nameHash]*counter\n+\tdistributions map[nameHash]*distribution\n+\tgauges        map[nameHash]*gauge\n+}\n+\n type ctxKey string\n \n-const bundleKey ctxKey = \"beam:bundle\"\n-const ptransformKey ctxKey = \"beam:ptransform\"\n+const (\n+\tbundleKey     ctxKey = \"beam:bundle\"\n+\tptransformKey ctxKey = \"beam:ptransform\"\n+\tcounterSetKey ctxKey = \"beam:counterset\"\n+)\n \n // beamCtx is a caching context for IDs necessary to place metric updates.\n-//  Allocating contexts and searching for PTransformIDs for every element\n+// Allocating contexts and searching for PTransformIDs for every element\n // is expensive, so we avoid it if possible.\n type beamCtx struct {\n \tcontext.Context\n \tbundleID, ptransformID string\n+\tbs                     *perBundle\n+\tcs                     *ptCounterSet\n }\n \n-// Value lifts the beam contLift the keys value for faster lookups when not available.\n+// Value implements context.Value for beamCtx, and lifts the\n+// values for metrics keys for value for faster lookups.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3564, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}