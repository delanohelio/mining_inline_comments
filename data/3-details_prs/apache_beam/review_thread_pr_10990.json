{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDA1Nzc0", "number": 10990, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MDozOVrODjkigQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MzoxNlrODjkl7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjI1NDA5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSetOperatorRelBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MDozOVrOFvdD1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MDozOVrOFvdD1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMzUwOQ==", "bodyText": "This is the base class, so shouldn't be calling it \"intersect\". Incidentally I don't think having a base class adds much value here, so inlining or inverting would be a-ok.", "url": "https://github.com/apache/beam/pull/10990#discussion_r385303509", "createdAt": "2020-02-27T18:50:39Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamSetOperatorRelBase.java", "diffHunk": "@@ -65,6 +66,16 @@ public BeamSetOperatorRelBase(BeamRelNode beamRelNode, OpType opType, boolean al\n         inputs);\n     PCollection<Row> leftRows = inputs.get(0);\n     PCollection<Row> rightRows = inputs.get(1);\n+    Schema leftSchema = leftRows.getSchema();\n+    Schema rightSchema = rightRows.getSchema();\n+    if (!leftSchema.typesEqual(rightSchema)) {\n+      throw new IllegalArgumentException(\n+          \"Can't intersect two tables with different schemas.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0761a9a61e761b8b7a3389d231bb2608ca3cf0ff"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjI2Mjg0OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamSetOperatorsTransforms.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MzoxNlrOFvdJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MzoxNlrOFvdJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDk0NA==", "bodyText": "This optimization seems to have nothing to do with disabling coder inference. Please split into separate commit so git history shows it.", "url": "https://github.com/apache/beam/pull/10990#discussion_r385304944", "createdAt": "2020-02-27T18:53:16Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamSetOperatorsTransforms.java", "diffHunk": "@@ -38,61 +35,62 @@\n   }\n \n   /** Filter function used for Set operators. */\n-  public static class SetOperatorFilteringDoFn extends DoFn<KV<Row, CoGbkResult>, Row> {\n-    private TupleTag<Row> leftTag;\n-    private TupleTag<Row> rightTag;\n-    private BeamSetOperatorRelBase.OpType opType;\n+  public static class SetOperatorFilteringDoFn extends DoFn<Row, Row> {\n+    private final String leftTag;\n+    private final String rightTag;\n+    private final String numRowsField;\n+    private final BeamSetOperatorRelBase.OpType opType;\n     // ALL?\n-    private boolean all;\n+    private final boolean all;\n \n     public SetOperatorFilteringDoFn(\n-        TupleTag<Row> leftTag,\n-        TupleTag<Row> rightTag,\n+        String leftTag,\n+        String rightTag,\n+        String numRowsField,\n         BeamSetOperatorRelBase.OpType opType,\n         boolean all) {\n       this.leftTag = leftTag;\n       this.rightTag = rightTag;\n+      this.numRowsField = numRowsField;\n       this.opType = opType;\n       this.all = all;\n     }\n \n     @ProcessElement\n-    public void processElement(ProcessContext ctx) {\n-      CoGbkResult coGbkResult = ctx.element().getValue();\n-      Iterable<Row> leftRows = coGbkResult.getAll(leftTag);\n-      Iterable<Row> rightRows = coGbkResult.getAll(rightTag);\n+    public void processElement(@Element Row element, OutputReceiver<Row> o) {\n+      Row key = element.getRow(\"key\");\n+      long numLeftRows = 0;\n+      long numRightRows = 0;\n+      if (!Iterables.isEmpty(element.<Row>getIterable(leftTag))) {\n+        numLeftRows =\n+            Iterables.getOnlyElement(element.<Row>getIterable(leftTag)).getInt64(numRowsField);\n+      }\n+      if (!Iterables.isEmpty(element.<Row>getIterable(rightTag))) {\n+        numRightRows =\n+            Iterables.getOnlyElement(element.<Row>getIterable(rightTag)).getInt64(numRowsField);\n+      }\n+\n       switch (opType) {\n         case UNION:\n           if (all) {\n-            // output both left & right\n-            Iterator<Row> iter = leftRows.iterator();\n-            while (iter.hasNext()) {\n-              ctx.output(iter.next());\n-            }\n-            iter = rightRows.iterator();\n-            while (iter.hasNext()) {\n-              ctx.output(iter.next());\n+            for (int i = 0; i < numLeftRows + numRightRows; i++) {\n+              o.output(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0761a9a61e761b8b7a3389d231bb2608ca3cf0ff"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1934, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}