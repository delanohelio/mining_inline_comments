{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTkzNjU2", "number": 10777, "title": "[BEAM-3545] Return metrics as MonitoringInfos", "bodyText": "Have the Go SDK return metrics as MonitoringInfos rather than the deprecated metrics proto.\nFor now, both are being returned, but a later change will remove the legacy metrics.\nThis moves FnAPI awareness further into the harness to avoid tight coupling of the SDK to the portability protos, even though the base structures are largely inspired by the same.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-05T21:27:32Z", "url": "https://github.com/apache/beam/pull/10777", "merged": true, "mergeCommit": {"oid": "b7a75f1a2180a5db20026d9e67cfb4df012859e2"}, "closed": true, "closedAt": "2020-02-13T22:08:48Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBc9V4gH2gAyMzcxNTkzNjU2OjJiZWJiNWU3YmU4MDBlMGVkMmJkYTcyMTNkODNmZWU1YmRiZWM0M2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDwhQCgFqTM1Nzg5OTYzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2bebb5e7be800e0ed2bda7213d83fee5bdbec43b", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/2bebb5e7be800e0ed2bda7213d83fee5bdbec43b", "committedDate": "2020-02-05T21:24:21Z", "message": "[BEAM-3545] Return metrics as MonitoringInfos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NjIyMDgy", "url": "https://github.com/apache/beam/pull/10777#pullrequestreview-354622082", "createdAt": "2020-02-06T17:08:02Z", "commit": {"oid": "2bebb5e7be800e0ed2bda7213d83fee5bdbec43b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzowODowM1rOFmjG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoyMzoyOVrOFmjnwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2NTQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tUrn:    \"beam:metric:user\",\n          \n          \n            \n            \t\t\t\t\tUrn:    \"beam:metric:user_distribution\",", "url": "https://github.com/apache/beam/pull/10777#discussion_r375965416", "createdAt": "2020-02-06T17:08:03Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -0,0 +1,195 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package harness\n+\n+import (\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n+\tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n+\tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"github.com/golang/protobuf/ptypes\"\n+)\n+\n+func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+\t// Get the legacy style metrics.\n+\ttransforms := make(map[string]*fnpb.Metrics_PTransform)\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_CounterData_{\n+\t\t\t\t\tCounterData: &fnpb.Metrics_User_CounterData{\n+\t\t\t\t\t\tValue: v,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_DistributionData_{\n+\t\t\t\t\tDistributionData: &fnpb.Metrics_User_DistributionData{\n+\t\t\t\t\t\tCount: count,\n+\t\t\t\t\t\tSum:   sum,\n+\t\t\t\t\t\tMin:   min,\n+\t\t\t\t\t\tMax:   max,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tGaugeInt64: func(l metrics.Labels, v int64, t time.Time) {\n+\t\t\tts, err := ptypes.TimestampProto(t)\n+\t\t\tif err != nil {\n+\t\t\t\tpanic(err)\n+\t\t\t}\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_GaugeData_{\n+\t\t\t\t\tGaugeData: &fnpb.Metrics_User_GaugeData{\n+\t\t\t\t\t\tValue:     v,\n+\t\t\t\t\t\tTimestamp: ts,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t}.ExtractFrom(p.Store)\n+\n+\t// Get the MonitoringInfo versions.\n+\tvar monitoringInfo []*ppb.MonitoringInfo\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",\n+\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n+\t\t\t\t\tLabels: userLabels(l),\n+\t\t\t\t\tData:   int64Counter(v),\n+\t\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebb5e7be800e0ed2bda7213d83fee5bdbec43b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2NTUxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n          \n          \n            \n            \t\t\t\t\tType:   \"beam:metrics:distribution_int_64\",", "url": "https://github.com/apache/beam/pull/10777#discussion_r375965516", "createdAt": "2020-02-06T17:08:13Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -0,0 +1,195 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package harness\n+\n+import (\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n+\tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n+\tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"github.com/golang/protobuf/ptypes\"\n+)\n+\n+func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+\t// Get the legacy style metrics.\n+\ttransforms := make(map[string]*fnpb.Metrics_PTransform)\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_CounterData_{\n+\t\t\t\t\tCounterData: &fnpb.Metrics_User_CounterData{\n+\t\t\t\t\t\tValue: v,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_DistributionData_{\n+\t\t\t\t\tDistributionData: &fnpb.Metrics_User_DistributionData{\n+\t\t\t\t\t\tCount: count,\n+\t\t\t\t\t\tSum:   sum,\n+\t\t\t\t\t\tMin:   min,\n+\t\t\t\t\t\tMax:   max,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tGaugeInt64: func(l metrics.Labels, v int64, t time.Time) {\n+\t\t\tts, err := ptypes.TimestampProto(t)\n+\t\t\tif err != nil {\n+\t\t\t\tpanic(err)\n+\t\t\t}\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_GaugeData_{\n+\t\t\t\t\tGaugeData: &fnpb.Metrics_User_GaugeData{\n+\t\t\t\t\t\tValue:     v,\n+\t\t\t\t\t\tTimestamp: ts,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t}.ExtractFrom(p.Store)\n+\n+\t// Get the MonitoringInfo versions.\n+\tvar monitoringInfo []*ppb.MonitoringInfo\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",\n+\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n+\t\t\t\t\tLabels: userLabels(l),\n+\t\t\t\t\tData:   int64Counter(v),\n+\t\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",\n+\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebb5e7be800e0ed2bda7213d83fee5bdbec43b"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3MjEwMQ==", "bodyText": "this needs a URN, its likely that it should be beam:metric:user", "url": "https://github.com/apache/beam/pull/10777#discussion_r375972101", "createdAt": "2020-02-06T17:20:21Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -0,0 +1,195 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package harness\n+\n+import (\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n+\tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n+\tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"github.com/golang/protobuf/ptypes\"\n+)\n+\n+func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+\t// Get the legacy style metrics.\n+\ttransforms := make(map[string]*fnpb.Metrics_PTransform)\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_CounterData_{\n+\t\t\t\t\tCounterData: &fnpb.Metrics_User_CounterData{\n+\t\t\t\t\t\tValue: v,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_DistributionData_{\n+\t\t\t\t\tDistributionData: &fnpb.Metrics_User_DistributionData{\n+\t\t\t\t\t\tCount: count,\n+\t\t\t\t\t\tSum:   sum,\n+\t\t\t\t\t\tMin:   min,\n+\t\t\t\t\t\tMax:   max,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tGaugeInt64: func(l metrics.Labels, v int64, t time.Time) {\n+\t\t\tts, err := ptypes.TimestampProto(t)\n+\t\t\tif err != nil {\n+\t\t\t\tpanic(err)\n+\t\t\t}\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_GaugeData_{\n+\t\t\t\t\tGaugeData: &fnpb.Metrics_User_GaugeData{\n+\t\t\t\t\t\tValue:     v,\n+\t\t\t\t\t\tTimestamp: ts,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t}.ExtractFrom(p.Store)\n+\n+\t// Get the MonitoringInfo versions.\n+\tvar monitoringInfo []*ppb.MonitoringInfo\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",\n+\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n+\t\t\t\t\tLabels: userLabels(l),\n+\t\t\t\t\tData:   int64Counter(v),\n+\t\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",\n+\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n+\t\t\t\t\tLabels: userLabels(l),\n+\t\t\t\t\tData:   int64Distribution(count, sum, min, max),\n+\t\t\t\t})\n+\t\t},\n+\t\tGaugeInt64: func(l metrics.Labels, v int64, t time.Time) {\n+\t\t\tts, err := ptypes.TimestampProto(t)\n+\t\t\tif err != nil {\n+\t\t\t\tpanic(err)\n+\t\t\t}\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tType:      \"beam:metrics:latest_int_64\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebb5e7be800e0ed2bda7213d83fee5bdbec43b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3MzgyNA==", "bodyText": "This should be the PCollection id", "url": "https://github.com/apache/beam/pull/10777#discussion_r375973824", "createdAt": "2020-02-06T17:23:29Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -0,0 +1,195 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package harness\n+\n+import (\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n+\tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n+\tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"github.com/golang/protobuf/ptypes\"\n+)\n+\n+func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+\t// Get the legacy style metrics.\n+\ttransforms := make(map[string]*fnpb.Metrics_PTransform)\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_CounterData_{\n+\t\t\t\t\tCounterData: &fnpb.Metrics_User_CounterData{\n+\t\t\t\t\t\tValue: v,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_DistributionData_{\n+\t\t\t\t\tDistributionData: &fnpb.Metrics_User_DistributionData{\n+\t\t\t\t\t\tCount: count,\n+\t\t\t\t\t\tSum:   sum,\n+\t\t\t\t\t\tMin:   min,\n+\t\t\t\t\t\tMax:   max,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t\tGaugeInt64: func(l metrics.Labels, v int64, t time.Time) {\n+\t\t\tts, err := ptypes.TimestampProto(t)\n+\t\t\tif err != nil {\n+\t\t\t\tpanic(err)\n+\t\t\t}\n+\t\t\tpb := getTransform(transforms, l)\n+\t\t\tpb.User = append(pb.User, &fnpb.Metrics_User{\n+\t\t\t\tMetricName: toName(l),\n+\t\t\t\tData: &fnpb.Metrics_User_GaugeData_{\n+\t\t\t\t\tGaugeData: &fnpb.Metrics_User_GaugeData{\n+\t\t\t\t\t\tValue:     v,\n+\t\t\t\t\t\tTimestamp: ts,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t})\n+\t\t},\n+\t}.ExtractFrom(p.Store)\n+\n+\t// Get the MonitoringInfo versions.\n+\tvar monitoringInfo []*ppb.MonitoringInfo\n+\tmetrics.Extractor{\n+\t\tSumInt64: func(l metrics.Labels, v int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",\n+\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n+\t\t\t\t\tLabels: userLabels(l),\n+\t\t\t\t\tData:   int64Counter(v),\n+\t\t\t\t})\n+\t\t},\n+\t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tUrn:    \"beam:metric:user\",\n+\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n+\t\t\t\t\tLabels: userLabels(l),\n+\t\t\t\t\tData:   int64Distribution(count, sum, min, max),\n+\t\t\t\t})\n+\t\t},\n+\t\tGaugeInt64: func(l metrics.Labels, v int64, t time.Time) {\n+\t\t\tts, err := ptypes.TimestampProto(t)\n+\t\t\tif err != nil {\n+\t\t\t\tpanic(err)\n+\t\t\t}\n+\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\tType:      \"beam:metrics:latest_int_64\",\n+\t\t\t\t\tLabels:    userLabels(l),\n+\t\t\t\t\tData:      int64Counter(v),\n+\t\t\t\t\tTimestamp: ts,\n+\t\t\t\t})\n+\t\t},\n+\t}.ExtractFrom(p.Store)\n+\n+\t// Get the execution monitoring information from the bundle plan.\n+\tif snapshot, ok := p.Progress(); ok {\n+\t\t// Legacy version.\n+\t\ttransforms[snapshot.ID] = &fnpb.Metrics_PTransform{\n+\t\t\tProcessedElements: &fnpb.Metrics_PTransform_ProcessedElements{\n+\t\t\t\tMeasured: &fnpb.Metrics_PTransform_Measured{\n+\t\t\t\t\tOutputElementCounts: map[string]int64{\n+\t\t\t\t\t\tsnapshot.Name: snapshot.Count,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}\n+\t\t// Monitoring info version.\n+\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\tUrn:  \"beam:metric:element_count:v1\",\n+\t\t\t\tType: \"beam:metrics:sum_int_64\",\n+\t\t\t\tLabels: map[string]string{\n+\t\t\t\t\t\"PCOLLECTION\": snapshot.Name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bebb5e7be800e0ed2bda7213d83fee5bdbec43b"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ae147ee1e09e47589ddc6a68cd73e9c716321d", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/19ae147ee1e09e47589ddc6a68cd73e9c716321d", "committedDate": "2020-02-06T18:57:17Z", "message": "!fixup mixedup urns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c7b6cfa5f28b48a25c1b555623bc35971360c1e", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/4c7b6cfa5f28b48a25c1b555623bc35971360c1e", "committedDate": "2020-02-06T19:31:11Z", "message": "!fixup use the PCollectionID for progress"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODk5NjM5", "url": "https://github.com/apache/beam/pull/10777#pullrequestreview-357899639", "createdAt": "2020-02-13T01:19:16Z", "commit": {"oid": "4c7b6cfa5f28b48a25c1b555623bc35971360c1e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToxOToxNlrOFpEKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMToxOToxNlrOFpEKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwNDE1MQ==", "bodyText": "outputPID/PID isn't a great name for PCOllection ids since PID is used as PTrasnformId elsewhere.\nConsider fixing here and elsewhere. Also, this comment should really say that this is the output pcollection id and not an implementation detail like this is the \"index\" since thats an implementation detail elsewhere about the mapping which this code shouldn't care about.", "url": "https://github.com/apache/beam/pull/10777#discussion_r378604151", "createdAt": "2020-02-13T01:19:16Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/exec/datasource.go", "diffHunk": "@@ -37,11 +37,13 @@ type DataSource struct {\n \tCoder *coder.Coder\n \tOut   Node\n \n-\tsource   DataManager\n-\tstate    StateReader\n-\tindex    int64\n-\tsplitIdx int64\n-\tstart    time.Time\n+\tsource DataManager\n+\tstate  StateReader\n+\t// TODO(lostluck) 2020/02/06: refactor to support more general PCollection metrics on nodes.\n+\toutputPID string // The index is the output count for the PCollection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c7b6cfa5f28b48a25c1b555623bc35971360c1e"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3430, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}