{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjcwNzYx", "number": 10883, "title": "[BEAM-9331] Add better Row builders", "bodyText": "This PR adds two builders to the Row object. The first allows building a Row by specifying fields by name:\nRow row = Row.withSchema(schema)\n.withFieldValue(\"userId\", \"user1)\n.withFieldValue(\"location.city\", \"seattle\")\n.withFieldValue(\"location.state\", \"wa\")\n.build();\nThe second allows building. a Row based on a previous row by specifying only the fields to change:\nRow modifiedRow =\nRow.fromRow(row)\n.withFieldValue(\"location.city\", \"tacoma\")\n.build();\nR: @rezarokni", "createdAt": "2020-02-17T18:35:47Z", "url": "https://github.com/apache/beam/pull/10883", "merged": true, "mergeCommit": {"oid": "267f76f3c2036c27dcbc94c563ecd1a2d4481f65"}, "closed": true, "closedAt": "2020-03-27T23:09:42Z", "author": {"login": "reuvenlax"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFYHbGAFqTM2MDAzMjMwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcR1R_kgH2gAyMzc2MjcwNzYxOmQ1MGYzNTg2MTlmYzY3YzYwM2Y3OGM4N2JhMDQyMDZhZWVhMTQ1NDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDMyMzAy", "url": "https://github.com/apache/beam/pull/10883#pullrequestreview-360032302", "createdAt": "2020-02-18T02:01:31Z", "commit": {"oid": "29174544625f5aee2c5a3852a6046e7d41bf90b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjowMTozMlrOFqzJOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjowMTozMlrOFqzJOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMjQ1OQ==", "bodyText": "Would this be more readable if it was withAddedFieldValue?", "url": "https://github.com/apache/beam/pull/10883#discussion_r380422459", "createdAt": "2020-02-18T02:01:32Z", "author": {"login": "rezarokni"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java", "diffHunk": "@@ -55,8 +59,31 @@\n  * {@link Row} is an immutable tuple-like schema to represent one element in a {@link PCollection}.\n  * The fields are described with a {@link Schema}.\n  *\n- * <p>{@link Schema} contains the names for each field and the coder for the whole record,\n- * {see @link Schema#getRowCoder()}.\n+ * <p>{@link Schema} contains the names and types for each field.\n+ *\n+ * <p>There are several ways to build a new Row object. To build a row from scratch using a schema\n+ * object, {@link Row#withSchema} can be used. Schema fields can be specified by name, and nested\n+ * fields can be specified using the field selection syntax. For example:\n+ *\n+ * <pre>{@code\n+ * Row row = Row.withSchema(schema)\n+ *              .withFieldValue(\"userId\", \"user1)\n+ *              .withFieldValue(\"location.city\", \"seattle\")\n+ *              .withFieldValue(\"location.state\", \"wa\")\n+ *              .build();\n+ * }</pre>\n+ *\n+ * <p>The {@link Row#fromRow} builder can be used to base a row off of another row. The builder can\n+ * be used to specify values for specific fields, and all the remaining values will be taken from\n+ * the original row. For example, the following produces a row identical to the above row except for\n+ * the location.city field.\n+ *\n+ * <pre>{@code\n+ * Row modifiedRow =\n+ *     Row.fromRow(row)\n+ *        .withFieldValue(\"location.city\", \"tacoma\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29174544625f5aee2c5a3852a6046e7d41bf90b4"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDM0NDI5", "url": "https://github.com/apache/beam/pull/10883#pullrequestreview-360034429", "createdAt": "2020-02-18T02:11:19Z", "commit": {"oid": "29174544625f5aee2c5a3852a6046e7d41bf90b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjoxMToxOVrOFqzPyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjoxMToxOVrOFqzPyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDEzOA==", "bodyText": "Is it worth having a logical type to test as well?", "url": "https://github.com/apache/beam/pull/10883#discussion_r380424138", "createdAt": "2020-02-18T02:11:19Z", "author": {"login": "rezarokni"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/values/RowTest.java", "diffHunk": "@@ -477,6 +477,172 @@ public void testCreateMapWithRowValue() {\n     assertEquals(data, row.getMap(\"map\"));\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29174544625f5aee2c5a3852a6046e7d41bf90b4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDM0NDg1", "url": "https://github.com/apache/beam/pull/10883#pullrequestreview-360034485", "createdAt": "2020-02-18T02:11:35Z", "commit": {"oid": "29174544625f5aee2c5a3852a6046e7d41bf90b4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTI4MDg2", "url": "https://github.com/apache/beam/pull/10883#pullrequestreview-360928086", "createdAt": "2020-02-19T08:47:18Z", "commit": {"oid": "2022ae61687844b30512d55fd8ae0a54a2864e91"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0NzoxOFrOFrfa2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTowNzoxMVrOFrgCQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Nzg2Nw==", "bodyText": "Maybe this is an opportunity to change the attachValues. No values should be set before or after the attach. I see 2 options to improve this:\n\nIn the attach first see if values are already set. Let the attachValues return the new Row directly. This is maybe a bit strange as it violates a builder pattern.\nHave 4 build in builders. The starting one (that includes an attachValues, add and withFieldValue), all of them return a specific builder: the new ModifyingBuilder and a new AddValuesBuilder that only has the add methods and an AttachBuilder that only has build. This also eliminates some elaborate if/then/else's in the builder().", "url": "https://github.com/apache/beam/pull/10883#discussion_r381147867", "createdAt": "2020-02-19T08:47:18Z", "author": {"login": "alexvanboxel"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java", "diffHunk": "@@ -599,272 +709,555 @@ public Builder addArray(Object... values) {\n       return this;\n     }\n \n-    // Values are attached. No verification is done, and no conversions are done. LogicalType\n-    // values must be specified as the base type.\n+    // Values are attached. No verification is done, and no conversions are done. LogicalType values\n+    // must be specified\n+    // as the base type. This method should be used with great care, as no validation is done. If\n+    // incorrect values are\n+    // passed in, it could result in strange errors later in the pipeline. This method is largely\n+    // used internal\n+    // to Beam.\n+    @Internal\n     public Builder attachValues(List<Object> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2022ae61687844b30512d55fd8ae0a54a2864e91"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1MTk1MQ==", "bodyText": "Can't this be tweaked a bit, that this is the builder specifically for use with withFieldValue. Meaning that if when nit doesn't have a source row it just assumes null values for the fields not set. See remark on withFieldValue on initial builder as well.", "url": "https://github.com/apache/beam/pull/10883#discussion_r381151951", "createdAt": "2020-02-19T08:55:32Z", "author": {"login": "alexvanboxel"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java", "diffHunk": "@@ -539,37 +568,118 @@ public String toString() {\n   }\n \n   /**\n-   * Creates a record builder with specified {@link #getSchema()}. {@link Builder#build()} will\n-   * throw an {@link IllegalArgumentException} if number of fields in {@link #getSchema()} does not\n-   * match the number of fields specified.\n+   * Creates a row builder with specified {@link #getSchema()}. {@link Builder#build()} will throw\n+   * an {@link IllegalArgumentException} if number of fields in {@link #getSchema()} does not match\n+   * the number of fields specified. If any of the arguments don't match the expected types for the\n+   * schema fields, {@link Builder#build()} will throw a {@link ClassCastException}.\n    */\n   public static Builder withSchema(Schema schema) {\n     return new Builder(schema);\n   }\n \n+  /**\n+   * Creates a row builder based on the specified row. Field values in the new row can be explicitly\n+   * set using {@link ModifyingBuilder#withFieldValue}. Any values not so overridden will be the\n+   * same as the values in the original row.\n+   */\n+  public static ModifyingBuilder fromRow(Row row) {\n+    return new ModifyingBuilder(row);\n+  }\n+\n+  /** Builder for {@link Row} that bases a row on another row. */\n+  public static class ModifyingBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2022ae61687844b30512d55fd8ae0a54a2864e91"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1Mjk0OA==", "bodyText": "Maybe this one can return the ModifyingBuilder so that no other methods can used (no attachValues, no add's).", "url": "https://github.com/apache/beam/pull/10883#discussion_r381152948", "createdAt": "2020-02-19T08:57:26Z", "author": {"login": "alexvanboxel"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java", "diffHunk": "@@ -539,37 +568,118 @@ public String toString() {\n   }\n \n   /**\n-   * Creates a record builder with specified {@link #getSchema()}. {@link Builder#build()} will\n-   * throw an {@link IllegalArgumentException} if number of fields in {@link #getSchema()} does not\n-   * match the number of fields specified.\n+   * Creates a row builder with specified {@link #getSchema()}. {@link Builder#build()} will throw\n+   * an {@link IllegalArgumentException} if number of fields in {@link #getSchema()} does not match\n+   * the number of fields specified. If any of the arguments don't match the expected types for the\n+   * schema fields, {@link Builder#build()} will throw a {@link ClassCastException}.\n    */\n   public static Builder withSchema(Schema schema) {\n     return new Builder(schema);\n   }\n \n+  /**\n+   * Creates a row builder based on the specified row. Field values in the new row can be explicitly\n+   * set using {@link ModifyingBuilder#withFieldValue}. Any values not so overridden will be the\n+   * same as the values in the original row.\n+   */\n+  public static ModifyingBuilder fromRow(Row row) {\n+    return new ModifyingBuilder(row);\n+  }\n+\n+  /** Builder for {@link Row} that bases a row on another row. */\n+  public static class ModifyingBuilder {\n+    private final Row sourceRow;\n+    private final Map<FieldAccessDescriptor, FieldOverride> fieldValues = Maps.newHashMap();\n+\n+    private ModifyingBuilder(Row sourceRow) {\n+      this.sourceRow = sourceRow;\n+    }\n+\n+    public Schema getSchema() {\n+      return sourceRow.getSchema();\n+    }\n+\n+    public ModifyingBuilder withFieldValue(String fieldName, Object value) {\n+      FieldAccessDescriptor fieldAccessDescriptor =\n+          FieldAccessDescriptor.withFieldNames(fieldName).resolve(getSchema());\n+      checkArgument(fieldAccessDescriptor.referencesSingleField(), \"\");\n+      fieldValues.put(fieldAccessDescriptor, new FieldOverride(value));\n+      return this;\n+    }\n+\n+    public ModifyingBuilder withFieldValues(Map<String, Object> values) {\n+      fieldValues.putAll(\n+          values.entrySet().stream()\n+              .collect(\n+                  Collectors.toMap(\n+                      e -> FieldAccessDescriptor.withFieldNames(e.getKey()),\n+                      e -> new FieldOverride(e.getValue()))));\n+      return this;\n+    }\n+\n+    public Row build() {\n+      Row row =\n+          (Row)\n+              new RowFieldMatcher()\n+                  .match(\n+                      new CapturingRowCases(getSchema(), this.fieldValues, false),\n+                      FieldType.row(getSchema()),\n+                      FieldAccessDescriptor.create(),\n+                      sourceRow);\n+      return row;\n+    }\n+  }\n+\n   /** Builder for {@link Row}. */\n   public static class Builder {\n+    private final Map<FieldAccessDescriptor, FieldOverride> fieldValues = Maps.newHashMap();\n     private List<Object> values = Lists.newArrayList();\n     private boolean attached = false;\n     @Nullable private Factory<List<FieldValueGetter>> fieldValueGetterFactory;\n     @Nullable private Object getterTarget;\n-    private Schema schema;\n+    private final Schema schema;\n \n     Builder(Schema schema) {\n       this.schema = schema;\n     }\n \n-    public int nextFieldId() {\n-      if (fieldValueGetterFactory != null) {\n-        throw new RuntimeException(\"Not supported\");\n-      }\n-      return values.size();\n-    }\n-\n+    /** Return the schema for the row being built. */\n     public Schema getSchema() {\n       return schema;\n     }\n \n+    /**\n+     * Set a field value using the field name. Nested values can be set using the field selection\n+     * syntax.\n+     */\n+    public Builder withFieldValue(String fieldName, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2022ae61687844b30512d55fd8ae0a54a2864e91"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1Nzk1Mw==", "bodyText": "Wouldn't it be useful to have a withFieldValue with an index?", "url": "https://github.com/apache/beam/pull/10883#discussion_r381157953", "createdAt": "2020-02-19T09:07:11Z", "author": {"login": "alexvanboxel"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java", "diffHunk": "@@ -539,37 +568,118 @@ public String toString() {\n   }\n \n   /**\n-   * Creates a record builder with specified {@link #getSchema()}. {@link Builder#build()} will\n-   * throw an {@link IllegalArgumentException} if number of fields in {@link #getSchema()} does not\n-   * match the number of fields specified.\n+   * Creates a row builder with specified {@link #getSchema()}. {@link Builder#build()} will throw\n+   * an {@link IllegalArgumentException} if number of fields in {@link #getSchema()} does not match\n+   * the number of fields specified. If any of the arguments don't match the expected types for the\n+   * schema fields, {@link Builder#build()} will throw a {@link ClassCastException}.\n    */\n   public static Builder withSchema(Schema schema) {\n     return new Builder(schema);\n   }\n \n+  /**\n+   * Creates a row builder based on the specified row. Field values in the new row can be explicitly\n+   * set using {@link ModifyingBuilder#withFieldValue}. Any values not so overridden will be the\n+   * same as the values in the original row.\n+   */\n+  public static ModifyingBuilder fromRow(Row row) {\n+    return new ModifyingBuilder(row);\n+  }\n+\n+  /** Builder for {@link Row} that bases a row on another row. */\n+  public static class ModifyingBuilder {\n+    private final Row sourceRow;\n+    private final Map<FieldAccessDescriptor, FieldOverride> fieldValues = Maps.newHashMap();\n+\n+    private ModifyingBuilder(Row sourceRow) {\n+      this.sourceRow = sourceRow;\n+    }\n+\n+    public Schema getSchema() {\n+      return sourceRow.getSchema();\n+    }\n+\n+    public ModifyingBuilder withFieldValue(String fieldName, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2022ae61687844b30512d55fd8ae0a54a2864e91"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTA4NjA4", "url": "https://github.com/apache/beam/pull/10883#pullrequestreview-365508608", "createdAt": "2020-02-27T09:02:01Z", "commit": {"oid": "778bf70e3305699b58cfed90ba3c8237d9cdddeb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d3e1bc3e5f5144b3b09debc57cb893cbf438b17", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2d3e1bc3e5f5144b3b09debc57cb893cbf438b17", "committedDate": "2020-03-24T06:15:08Z", "message": "add better row builders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f478de782b26afeaac066b269b90442cd213f1fb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f478de782b26afeaac066b269b90442cd213f1fb", "committedDate": "2020-03-25T17:27:17Z", "message": "foo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52695aa68322b8bbd5fd90a9e99cd6ad72168bee", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/52695aa68322b8bbd5fd90a9e99cd6ad72168bee", "committedDate": "2020-03-26T22:38:16Z", "message": "fix failing tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "778bf70e3305699b58cfed90ba3c8237d9cdddeb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/778bf70e3305699b58cfed90ba3c8237d9cdddeb", "committedDate": "2020-02-21T05:49:07Z", "message": "fix attachValues"}, "afterCommit": {"oid": "52695aa68322b8bbd5fd90a9e99cd6ad72168bee", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/52695aa68322b8bbd5fd90a9e99cd6ad72168bee", "committedDate": "2020-03-26T22:38:16Z", "message": "fix failing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzAzNDIy", "url": "https://github.com/apache/beam/pull/10883#pullrequestreview-382703422", "createdAt": "2020-03-27T09:37:53Z", "commit": {"oid": "52695aa68322b8bbd5fd90a9e99cd6ad72168bee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d50f358619fc67c603f78c87ba04206aeea14540", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d50f358619fc67c603f78c87ba04206aeea14540", "committedDate": "2020-03-27T18:47:25Z", "message": "fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3182, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}