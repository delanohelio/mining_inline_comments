{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NjUyMTkx", "number": 12617, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1MDowOVrOEZoP_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1OToyOFrOEjrz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzA5MzExOnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/translation/GroupByKeyTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1MDowOVrOHCjgdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjowMjo1N1rOHDOOXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MDk1MQ==", "bodyText": "is \"doTra\" a typo here?", "url": "https://github.com/apache/beam/pull/12617#discussion_r472440951", "createdAt": "2020-08-18T19:50:09Z", "author": {"login": "kw2542"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/translation/GroupByKeyTranslator.java", "diffHunk": "@@ -65,6 +65,12 @@ public void translate(\n     doTranslate(transform, node, ctx);\n   }\n \n+  static class KeyedWorkItems<K, InputT>\n+  implements TransformTranslator<PTransform<\n+      PCollection<KV<K, InputT>>, PCollection<KeyedWorkItem<K, InputT>>>> {\n+    doTra", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "921eb707c259e8ff08d01b7c7782ea3e3107cfd8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0MDgyOA==", "bodyText": "This was not supposed to be part of the commit at all and was in my scratch space.", "url": "https://github.com/apache/beam/pull/12617#discussion_r473140828", "createdAt": "2020-08-19T16:02:57Z", "author": {"login": "lukecwik"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/translation/GroupByKeyTranslator.java", "diffHunk": "@@ -65,6 +65,12 @@ public void translate(\n     doTranslate(transform, node, ctx);\n   }\n \n+  static class KeyedWorkItems<K, InputT>\n+  implements TransformTranslator<PTransform<\n+      PCollection<KV<K, InputT>>, PCollection<KeyedWorkItem<K, InputT>>>> {\n+    doTra", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MDk1MQ=="}, "originalCommit": {"oid": "921eb707c259e8ff08d01b7c7782ea3e3107cfd8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE0ODQzOnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SplittableParDoProcessKeyedElementsOp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoyMjozMFrOHQHwgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMToyMzowOFrOHQxeIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjM3MQ==", "bodyText": "Just so I'm clear, this is the inter-op class to map a GroupByKey transform to Samza's representation, and allow it to split the results of the GroupByKey when the runner is communicating with the SDK harness?", "url": "https://github.com/apache/beam/pull/12617#discussion_r486666371", "createdAt": "2020-09-10T22:22:30Z", "author": {"login": "lostluck"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SplittableParDoProcessKeyedElementsOp.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.samza.runtime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.Executors;\n+import org.apache.beam.runners.core.DoFnRunner;\n+import org.apache.beam.runners.core.DoFnRunners;\n+import org.apache.beam.runners.core.KeyedWorkItem;\n+import org.apache.beam.runners.core.KeyedWorkItems;\n+import org.apache.beam.runners.core.NullSideInputReader;\n+import org.apache.beam.runners.core.OutputAndTimeBoundedSplittableProcessElementInvoker;\n+import org.apache.beam.runners.core.OutputWindowedValue;\n+import org.apache.beam.runners.core.SplittableParDoViaKeyedWorkItems;\n+import org.apache.beam.runners.core.SplittableParDoViaKeyedWorkItems.ProcessElements;\n+import org.apache.beam.runners.core.StateInternals;\n+import org.apache.beam.runners.core.StateInternalsFactory;\n+import org.apache.beam.runners.core.StepContext;\n+import org.apache.beam.runners.core.TimerInternals;\n+import org.apache.beam.runners.core.TimerInternals.TimerData;\n+import org.apache.beam.runners.core.construction.SerializablePipelineOptions;\n+import org.apache.beam.runners.core.construction.SplittableParDo;\n+import org.apache.beam.runners.core.serialization.Base64Serializer;\n+import org.apache.beam.runners.samza.SamzaPipelineOptions;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.transforms.DoFnSchemaInformation;\n+import org.apache.beam.sdk.transforms.join.RawUnionValue;\n+import org.apache.beam.sdk.transforms.reflect.DoFnInvokers;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.transforms.windowing.PaneInfo;\n+import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection.IsBounded;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.WindowingStrategy;\n+import org.apache.samza.config.Config;\n+import org.apache.samza.context.Context;\n+import org.apache.samza.operators.Scheduler;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** Samza operator for {@link org.apache.beam.sdk.transforms.GroupByKey}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e210c60961bf702c7a97c8037757230c59cdf7c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0OTc5Mw==", "bodyText": "There is no SDK harness, this is a non-portable execution and the splittable DoFn is being invoked directly.\nYou are correct in that this is an inter-op class to map a specific splittable DoFn expansion to Samza's representation.", "url": "https://github.com/apache/beam/pull/12617#discussion_r487349793", "createdAt": "2020-09-12T01:23:08Z", "author": {"login": "lukecwik"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SplittableParDoProcessKeyedElementsOp.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.samza.runtime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.Executors;\n+import org.apache.beam.runners.core.DoFnRunner;\n+import org.apache.beam.runners.core.DoFnRunners;\n+import org.apache.beam.runners.core.KeyedWorkItem;\n+import org.apache.beam.runners.core.KeyedWorkItems;\n+import org.apache.beam.runners.core.NullSideInputReader;\n+import org.apache.beam.runners.core.OutputAndTimeBoundedSplittableProcessElementInvoker;\n+import org.apache.beam.runners.core.OutputWindowedValue;\n+import org.apache.beam.runners.core.SplittableParDoViaKeyedWorkItems;\n+import org.apache.beam.runners.core.SplittableParDoViaKeyedWorkItems.ProcessElements;\n+import org.apache.beam.runners.core.StateInternals;\n+import org.apache.beam.runners.core.StateInternalsFactory;\n+import org.apache.beam.runners.core.StepContext;\n+import org.apache.beam.runners.core.TimerInternals;\n+import org.apache.beam.runners.core.TimerInternals.TimerData;\n+import org.apache.beam.runners.core.construction.SerializablePipelineOptions;\n+import org.apache.beam.runners.core.construction.SplittableParDo;\n+import org.apache.beam.runners.core.serialization.Base64Serializer;\n+import org.apache.beam.runners.samza.SamzaPipelineOptions;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.transforms.DoFnSchemaInformation;\n+import org.apache.beam.sdk.transforms.join.RawUnionValue;\n+import org.apache.beam.sdk.transforms.reflect.DoFnInvokers;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.transforms.windowing.PaneInfo;\n+import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection.IsBounded;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.WindowingStrategy;\n+import org.apache.samza.config.Config;\n+import org.apache.samza.context.Context;\n+import org.apache.samza.operators.Scheduler;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** Samza operator for {@link org.apache.beam.sdk.transforms.GroupByKey}. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjM3MQ=="}, "originalCommit": {"oid": "5e210c60961bf702c7a97c8037757230c59cdf7c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODUzNDMzOnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1OToyOVrOHSLQiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowNjozN1rOHSLg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMDg3Mg==", "bodyText": "is it expected that we only validate in non-portable mode? i.e. this validation does not exist in runPortablePipeline()", "url": "https://github.com/apache/beam/pull/12617#discussion_r488820872", "createdAt": "2020-09-15T16:59:29Z", "author": {"login": "kw2542"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaRunner.java", "diffHunk": "@@ -106,6 +107,7 @@ public PortablePipelineResult runPortablePipeline(RunnerApi.Pipeline pipeline) {\n \n   @Override\n   public SamzaPipelineResult run(Pipeline pipeline) {\n+    SplittableParDo.validateNoPrimitiveReads(pipeline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b981b30c9f56ec204921f4429e9c04ccda66cf99"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTA0Mw==", "bodyText": "Yes since portable pipelines only support SDF. This is about migrating non-portable pipeline runner implementations to use SDF.", "url": "https://github.com/apache/beam/pull/12617#discussion_r488825043", "createdAt": "2020-09-15T17:06:37Z", "author": {"login": "lukecwik"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaRunner.java", "diffHunk": "@@ -106,6 +107,7 @@ public PortablePipelineResult runPortablePipeline(RunnerApi.Pipeline pipeline) {\n \n   @Override\n   public SamzaPipelineResult run(Pipeline pipeline) {\n+    SplittableParDo.validateNoPrimitiveReads(pipeline);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMDg3Mg=="}, "originalCommit": {"oid": "b981b30c9f56ec204921f4429e9c04ccda66cf99"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 516, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}