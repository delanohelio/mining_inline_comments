{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Njg1Mzg4", "number": 12726, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo0NDoxMVrOEeZ2Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyNjoyN1rOEitWtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzE2MjAzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo0NDoxMVrOHKCWhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTowODo0OFrOHMH0kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjM0MQ==", "bodyText": "It seems like we want to clear the timer when the flush is triggered by batch size/end of window. I think we can just clear the timer when flushBatch is called by window timer expiration and num >= batchSize.", "url": "https://github.com/apache/beam/pull/12726#discussion_r480286341", "createdAt": "2020-08-31T17:44:11Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +184,95 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n+    }\n+\n     @OnTimer(END_OF_WINDOW_ID)\n-    public void onTimerCallback(\n+    public void onWindowTimer(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         @Timestamp Instant timestamp,\n         @StateId(KEY_ID) ValueState<K> key,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         BoundedWindow window) {\n       LOG.debug(\n           \"*** END OF WINDOW *** for timer timestamp {} in windows {}\",\n           timestamp,\n           window.toString());\n-      flushBatch(receiver, key, batch, numElementsInBatch);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n     }\n \n     private void flushBatch(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         ValueState<K> key,\n         BagState<InputT> batch,\n-        CombiningState<Long, long[], Long> numElementsInBatch) {\n+        CombiningState<Long, long[], Long> numElementsInBatch,\n+        Timer bufferingTimer) {\n       Iterable<InputT> values = batch.read();\n-      // when the timer fires, batch state might be empty\n+      // When the timer fires, batch state might be empty\n       if (!Iterables.isEmpty(values)) {\n         receiver.output(KV.of(key.read(), values));\n       }\n       batch.clear();\n       LOG.debug(\"*** BATCH *** clear\");\n       numElementsInBatch.clear();\n+      // We might reach here due to batch size being reached, window expiration or buffering time\n+      // limit being reached. Reset the buffering timer anyway since the state is empty now. It'll\n+      // be reset again if a new element arrives before the expiration time set here.\n+      if (maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d977fa115a50df77c4e29300f15197321b9540"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMDk0OQ==", "bodyText": "By clearing the timer, do you mean to extend the deadline like what I am doing now or set it to something else?\nI feel it's a little bit cleaner to put it in FlushBatch since we always want to reset the buffering time when a batch is flushed, whatever the reason is. wdyt?", "url": "https://github.com/apache/beam/pull/12726#discussion_r481510949", "createdAt": "2020-09-02T00:46:27Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +184,95 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n+    }\n+\n     @OnTimer(END_OF_WINDOW_ID)\n-    public void onTimerCallback(\n+    public void onWindowTimer(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         @Timestamp Instant timestamp,\n         @StateId(KEY_ID) ValueState<K> key,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         BoundedWindow window) {\n       LOG.debug(\n           \"*** END OF WINDOW *** for timer timestamp {} in windows {}\",\n           timestamp,\n           window.toString());\n-      flushBatch(receiver, key, batch, numElementsInBatch);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n     }\n \n     private void flushBatch(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         ValueState<K> key,\n         BagState<InputT> batch,\n-        CombiningState<Long, long[], Long> numElementsInBatch) {\n+        CombiningState<Long, long[], Long> numElementsInBatch,\n+        Timer bufferingTimer) {\n       Iterable<InputT> values = batch.read();\n-      // when the timer fires, batch state might be empty\n+      // When the timer fires, batch state might be empty\n       if (!Iterables.isEmpty(values)) {\n         receiver.output(KV.of(key.read(), values));\n       }\n       batch.clear();\n       LOG.debug(\"*** BATCH *** clear\");\n       numElementsInBatch.clear();\n+      // We might reach here due to batch size being reached, window expiration or buffering time\n+      // limit being reached. Reset the buffering timer anyway since the state is empty now. It'll\n+      // be reset again if a new element arrives before the expiration time set here.\n+      if (maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjM0MQ=="}, "originalCommit": {"oid": "a0d977fa115a50df77c4e29300f15197321b9540"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1OTk3OA==", "bodyText": "I thought we have exposed clear API to java timer but it turns out we haven't. Extending timer sounds good to me before we have clear API.\nAnother problem is when the bufferTimer is fired, we still reset the bufferTimer in the flushBatch, which is not necessary. It seems like we can pass /*bufferingTimer=*/=null when onBufferingTimer  invokes fluchBatch,", "url": "https://github.com/apache/beam/pull/12726#discussion_r482259978", "createdAt": "2020-09-02T17:56:28Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +184,95 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n+    }\n+\n     @OnTimer(END_OF_WINDOW_ID)\n-    public void onTimerCallback(\n+    public void onWindowTimer(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         @Timestamp Instant timestamp,\n         @StateId(KEY_ID) ValueState<K> key,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         BoundedWindow window) {\n       LOG.debug(\n           \"*** END OF WINDOW *** for timer timestamp {} in windows {}\",\n           timestamp,\n           window.toString());\n-      flushBatch(receiver, key, batch, numElementsInBatch);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n     }\n \n     private void flushBatch(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         ValueState<K> key,\n         BagState<InputT> batch,\n-        CombiningState<Long, long[], Long> numElementsInBatch) {\n+        CombiningState<Long, long[], Long> numElementsInBatch,\n+        Timer bufferingTimer) {\n       Iterable<InputT> values = batch.read();\n-      // when the timer fires, batch state might be empty\n+      // When the timer fires, batch state might be empty\n       if (!Iterables.isEmpty(values)) {\n         receiver.output(KV.of(key.read(), values));\n       }\n       batch.clear();\n       LOG.debug(\"*** BATCH *** clear\");\n       numElementsInBatch.clear();\n+      // We might reach here due to batch size being reached, window expiration or buffering time\n+      // limit being reached. Reset the buffering timer anyway since the state is empty now. It'll\n+      // be reset again if a new element arrives before the expiration time set here.\n+      if (maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjM0MQ=="}, "originalCommit": {"oid": "a0d977fa115a50df77c4e29300f15197321b9540"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3MzEwNg==", "bodyText": "Sounds good. Uploaded a commit to address this.", "url": "https://github.com/apache/beam/pull/12726#discussion_r482473106", "createdAt": "2020-09-02T21:08:48Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +184,95 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n+    }\n+\n     @OnTimer(END_OF_WINDOW_ID)\n-    public void onTimerCallback(\n+    public void onWindowTimer(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         @Timestamp Instant timestamp,\n         @StateId(KEY_ID) ValueState<K> key,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         BoundedWindow window) {\n       LOG.debug(\n           \"*** END OF WINDOW *** for timer timestamp {} in windows {}\",\n           timestamp,\n           window.toString());\n-      flushBatch(receiver, key, batch, numElementsInBatch);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n     }\n \n     private void flushBatch(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         ValueState<K> key,\n         BagState<InputT> batch,\n-        CombiningState<Long, long[], Long> numElementsInBatch) {\n+        CombiningState<Long, long[], Long> numElementsInBatch,\n+        Timer bufferingTimer) {\n       Iterable<InputT> values = batch.read();\n-      // when the timer fires, batch state might be empty\n+      // When the timer fires, batch state might be empty\n       if (!Iterables.isEmpty(values)) {\n         receiver.output(KV.of(key.read(), values));\n       }\n       batch.clear();\n       LOG.debug(\"*** BATCH *** clear\");\n       numElementsInBatch.clear();\n+      // We might reach here due to batch size being reached, window expiration or buffering time\n+      // limit being reached. Reset the buffering timer anyway since the state is empty now. It'll\n+      // be reset again if a new element arrives before the expiration time set here.\n+      if (maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjM0MQ=="}, "originalCommit": {"oid": "a0d977fa115a50df77c4e29300f15197321b9540"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODI3ODgxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoxNDoxNFrOHQvRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxOTo1ODowOFrOHQ3KyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMzgxOQ==", "bodyText": "Can we use null here?", "url": "https://github.com/apache/beam/pull/12726#discussion_r487313819", "createdAt": "2020-09-11T22:14:14Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -66,25 +68,49 @@\n  *         }\n  *     }}));\n  * </pre>\n+ *\n+ * <p>Example 2 (batch unbounded input in a global window):\n+ *\n+ * <pre>{@code\n+ * PCollection<KV<String, String>> unboundedInput = ...;\n+ * long batchSize = 100L;\n+ * Duration maxBufferingDuration = Duration.standardSeconds(10);\n+ * PCollection<KV<String, Iterable<String>>> batched = unboundedInput\n+ *     .apply(Window.<KV<String, String>>into(new GlobalWindows())\n+ *         .triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1)))\n+ *         .discardingFiredPanes())\n+ *     .apply(GroupIntoBatches.<String, String>ofSize(batchSize)\n+ *         .withMaxBufferingDuration(maxBufferingDuration));\n+ * }</pre>\n  */\n public class GroupIntoBatches<K, InputT>\n     extends PTransform<PCollection<KV<K, InputT>>, PCollection<KV<K, Iterable<InputT>>>> {\n \n   private final long batchSize;\n+  private final Duration maxBufferingDuration;\n \n-  private GroupIntoBatches(long batchSize) {\n+  private GroupIntoBatches(long batchSize, Duration maxBufferingDuration) {\n     this.batchSize = batchSize;\n+    this.maxBufferingDuration = maxBufferingDuration;\n   }\n \n   public static <K, InputT> GroupIntoBatches<K, InputT> ofSize(long batchSize) {\n-    return new GroupIntoBatches<>(batchSize);\n+    return new GroupIntoBatches<>(batchSize, Duration.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0MzE0NA==", "bodyText": "Changed it to null.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487443144", "createdAt": "2020-09-12T19:58:08Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -66,25 +68,49 @@\n  *         }\n  *     }}));\n  * </pre>\n+ *\n+ * <p>Example 2 (batch unbounded input in a global window):\n+ *\n+ * <pre>{@code\n+ * PCollection<KV<String, String>> unboundedInput = ...;\n+ * long batchSize = 100L;\n+ * Duration maxBufferingDuration = Duration.standardSeconds(10);\n+ * PCollection<KV<String, Iterable<String>>> batched = unboundedInput\n+ *     .apply(Window.<KV<String, String>>into(new GlobalWindows())\n+ *         .triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1)))\n+ *         .discardingFiredPanes())\n+ *     .apply(GroupIntoBatches.<String, String>ofSize(batchSize)\n+ *         .withMaxBufferingDuration(maxBufferingDuration));\n+ * }</pre>\n  */\n public class GroupIntoBatches<K, InputT>\n     extends PTransform<PCollection<KV<K, InputT>>, PCollection<KV<K, Iterable<InputT>>>> {\n \n   private final long batchSize;\n+  private final Duration maxBufferingDuration;\n \n-  private GroupIntoBatches(long batchSize) {\n+  private GroupIntoBatches(long batchSize, Duration maxBufferingDuration) {\n     this.batchSize = batchSize;\n+    this.maxBufferingDuration = maxBufferingDuration;\n   }\n \n   public static <K, InputT> GroupIntoBatches<K, InputT> ofSize(long batchSize) {\n-    return new GroupIntoBatches<>(batchSize);\n+    return new GroupIntoBatches<>(batchSize, Duration.ZERO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMzgxOQ=="}, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODI4NTQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoxODowMlrOHQvVjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxOTo1ODowNFrOHQ3Kug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNDgyOQ==", "bodyText": "If Duration.ZERO is not preferred, we can have a check here.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487314829", "createdAt": "2020-09-11T22:18:02Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -66,25 +68,49 @@\n  *         }\n  *     }}));\n  * </pre>\n+ *\n+ * <p>Example 2 (batch unbounded input in a global window):\n+ *\n+ * <pre>{@code\n+ * PCollection<KV<String, String>> unboundedInput = ...;\n+ * long batchSize = 100L;\n+ * Duration maxBufferingDuration = Duration.standardSeconds(10);\n+ * PCollection<KV<String, Iterable<String>>> batched = unboundedInput\n+ *     .apply(Window.<KV<String, String>>into(new GlobalWindows())\n+ *         .triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1)))\n+ *         .discardingFiredPanes())\n+ *     .apply(GroupIntoBatches.<String, String>ofSize(batchSize)\n+ *         .withMaxBufferingDuration(maxBufferingDuration));\n+ * }</pre>\n  */\n public class GroupIntoBatches<K, InputT>\n     extends PTransform<PCollection<KV<K, InputT>>, PCollection<KV<K, Iterable<InputT>>>> {\n \n   private final long batchSize;\n+  private final Duration maxBufferingDuration;\n \n-  private GroupIntoBatches(long batchSize) {\n+  private GroupIntoBatches(long batchSize, Duration maxBufferingDuration) {\n     this.batchSize = batchSize;\n+    this.maxBufferingDuration = maxBufferingDuration;\n   }\n \n   public static <K, InputT> GroupIntoBatches<K, InputT> ofSize(long batchSize) {\n-    return new GroupIntoBatches<>(batchSize);\n+    return new GroupIntoBatches<>(batchSize, Duration.ZERO);\n   }\n \n   /** Returns the size of the batch. */\n   public long getBatchSize() {\n     return batchSize;\n   }\n \n+  /**\n+   * Set a time limit (in processing time) on how long an incomplete batch of elements is allowed to\n+   * be buffered. Once a batch is flushed to output, the timer is reset.\n+   */\n+  public GroupIntoBatches<K, InputT> withMaxBufferingDuration(Duration duration) {\n+    return new GroupIntoBatches<>(batchSize, duration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0MzEzMA==", "bodyText": "Added a check. But we still need additional checks on null value. See my reply below.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487443130", "createdAt": "2020-09-12T19:58:04Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -66,25 +68,49 @@\n  *         }\n  *     }}));\n  * </pre>\n+ *\n+ * <p>Example 2 (batch unbounded input in a global window):\n+ *\n+ * <pre>{@code\n+ * PCollection<KV<String, String>> unboundedInput = ...;\n+ * long batchSize = 100L;\n+ * Duration maxBufferingDuration = Duration.standardSeconds(10);\n+ * PCollection<KV<String, Iterable<String>>> batched = unboundedInput\n+ *     .apply(Window.<KV<String, String>>into(new GlobalWindows())\n+ *         .triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1)))\n+ *         .discardingFiredPanes())\n+ *     .apply(GroupIntoBatches.<String, String>ofSize(batchSize)\n+ *         .withMaxBufferingDuration(maxBufferingDuration));\n+ * }</pre>\n  */\n public class GroupIntoBatches<K, InputT>\n     extends PTransform<PCollection<KV<K, InputT>>, PCollection<KV<K, Iterable<InputT>>>> {\n \n   private final long batchSize;\n+  private final Duration maxBufferingDuration;\n \n-  private GroupIntoBatches(long batchSize) {\n+  private GroupIntoBatches(long batchSize, Duration maxBufferingDuration) {\n     this.batchSize = batchSize;\n+    this.maxBufferingDuration = maxBufferingDuration;\n   }\n \n   public static <K, InputT> GroupIntoBatches<K, InputT> ofSize(long batchSize) {\n-    return new GroupIntoBatches<>(batchSize);\n+    return new GroupIntoBatches<>(batchSize, Duration.ZERO);\n   }\n \n   /** Returns the size of the batch. */\n   public long getBatchSize() {\n     return batchSize;\n   }\n \n+  /**\n+   * Set a time limit (in processing time) on how long an incomplete batch of elements is allowed to\n+   * be buffered. Once a batch is flushed to output, the timer is reset.\n+   */\n+  public GroupIntoBatches<K, InputT> withMaxBufferingDuration(Duration duration) {\n+    return new GroupIntoBatches<>(batchSize, duration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNDgyOQ=="}, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODI5MjMyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyMTo0OFrOHQvZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxOTo1Nzo1OVrOHQ3KuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNTg1Mg==", "bodyText": "We want to pass bufferingTimer to null when flushBatchis called here since there is no need to clear the bufferTimer when it's fired.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487315852", "createdAt": "2020-09-11T22:21:48Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +185,96 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0MzEyOA==", "bodyText": "Good catch! Corrected.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487443128", "createdAt": "2020-09-12T19:57:59Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +185,96 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNTg1Mg=="}, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODI5NTY5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyMzozN1rOHQvbgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyMzozN1rOHQvbgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNjM1Mw==", "bodyText": "Instead, we want to pass actual bufferingTimer here since we want to clear it.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487316353", "createdAt": "2020-09-11T22:23:37Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +185,96 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n+    }\n+\n     @OnTimer(END_OF_WINDOW_ID)\n-    public void onTimerCallback(\n+    public void onWindowTimer(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         @Timestamp Instant timestamp,\n         @StateId(KEY_ID) ValueState<K> key,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         BoundedWindow window) {\n       LOG.debug(\n           \"*** END OF WINDOW *** for timer timestamp {} in windows {}\",\n           timestamp,\n           window.toString());\n-      flushBatch(receiver, key, batch, numElementsInBatch);\n+      flushBatch(receiver, key, batch, numElementsInBatch, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODMwMDA3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyNTo0NVrOHQveCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxOTo1Nzo0NlrOHQ3KpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNzAwMw==", "bodyText": "If we checkArgument(duration != Duration.ZERO) when withMaxBufferingDuration (), then we can drop the check here.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487317003", "createdAt": "2020-09-11T22:25:45Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +185,96 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0MzEwOQ==", "bodyText": "We still need the check on non-null value here, if not non-zero, since we should not set the timer in the case where the buffering duration is not set (i.e., when only ofSize() is called).", "url": "https://github.com/apache/beam/pull/12726#discussion_r487443109", "createdAt": "2020-09-12T19:57:46Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +185,96 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNzAwMw=="}, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODMwMTMyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyNjoyN1rOHQvevA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyNjoyN1rOHQvevA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNzE4MA==", "bodyText": "Same above.", "url": "https://github.com/apache/beam/pull/12726#discussion_r487317180", "createdAt": "2020-09-11T22:26:27Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java", "diffHunk": "@@ -150,70 +185,96 @@ public long apply(long left, long right) {\n               });\n \n       this.keySpec = StateSpecs.value(inputKeyCoder);\n-      // prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n+      // Prefetch every 20% of batchSize elements. Do not prefetch if batchSize is too little\n       this.prefetchFrequency = ((batchSize / 5) <= 1) ? Long.MAX_VALUE : (batchSize / 5);\n     }\n \n     @ProcessElement\n     public void processElement(\n-        @TimerId(END_OF_WINDOW_ID) Timer timer,\n+        @TimerId(END_OF_WINDOW_ID) Timer windowTimer,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n         @StateId(KEY_ID) ValueState<K> key,\n         @Element KV<K, InputT> element,\n         BoundedWindow window,\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver) {\n-      Instant windowExpires = window.maxTimestamp().plus(allowedLateness);\n-\n-      LOG.debug(\n-          \"*** SET TIMER *** to point in time {} for window {}\",\n-          windowExpires.toString(),\n-          window.toString());\n-      timer.set(windowExpires);\n+      Instant windowEnds = window.maxTimestamp().plus(allowedLateness);\n+      LOG.debug(\"*** SET TIMER *** to point in time {} for window {}\", windowEnds, window);\n+      windowTimer.set(windowEnds);\n       key.write(element.getKey());\n+      LOG.debug(\"*** BATCH *** Add element for window {} \", window);\n       batch.add(element.getValue());\n-      LOG.debug(\"*** BATCH *** Add element for window {} \", window.toString());\n-      // blind add is supported with combiningState\n+      // Blind add is supported with combiningState\n       numElementsInBatch.add(1L);\n+\n       Long num = numElementsInBatch.read();\n+      if (num == 1 && maxBufferingDuration.isLongerThan(Duration.ZERO)) {\n+        // This is the first element in batch. Start counting buffering time if a limit was set.\n+        bufferingTimer.offset(maxBufferingDuration).setRelative();\n+      }\n       if (num % prefetchFrequency == 0) {\n-        // prefetch data and modify batch state (readLater() modifies this)\n+        // Prefetch data and modify batch state (readLater() modifies this)\n         batch.readLater();\n       }\n       if (num >= batchSize) {\n         LOG.debug(\"*** END OF BATCH *** for window {}\", window.toString());\n-        flushBatch(receiver, key, batch, numElementsInBatch);\n+        flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n       }\n     }\n \n+    @OnTimer(END_OF_BUFFERING_ID)\n+    public void onBufferingTimer(\n+        OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n+        @Timestamp Instant timestamp,\n+        @StateId(KEY_ID) ValueState<K> key,\n+        @StateId(BATCH_ID) BagState<InputT> batch,\n+        @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer) {\n+      LOG.debug(\n+          \"*** END OF BUFFERING *** for timer timestamp {} with buffering duration {}\",\n+          timestamp,\n+          maxBufferingDuration);\n+      flushBatch(receiver, key, batch, numElementsInBatch, bufferingTimer);\n+    }\n+\n     @OnTimer(END_OF_WINDOW_ID)\n-    public void onTimerCallback(\n+    public void onWindowTimer(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         @Timestamp Instant timestamp,\n         @StateId(KEY_ID) ValueState<K> key,\n         @StateId(BATCH_ID) BagState<InputT> batch,\n         @StateId(NUM_ELEMENTS_IN_BATCH_ID) CombiningState<Long, long[], Long> numElementsInBatch,\n+        @TimerId(END_OF_BUFFERING_ID) Timer bufferingTimer,\n         BoundedWindow window) {\n       LOG.debug(\n           \"*** END OF WINDOW *** for timer timestamp {} in windows {}\",\n           timestamp,\n           window.toString());\n-      flushBatch(receiver, key, batch, numElementsInBatch);\n+      flushBatch(receiver, key, batch, numElementsInBatch, null);\n     }\n \n     private void flushBatch(\n         OutputReceiver<KV<K, Iterable<InputT>>> receiver,\n         ValueState<K> key,\n         BagState<InputT> batch,\n-        CombiningState<Long, long[], Long> numElementsInBatch) {\n+        CombiningState<Long, long[], Long> numElementsInBatch,\n+        @Nullable Timer bufferingTimer) {\n       Iterable<InputT> values = batch.read();\n-      // when the timer fires, batch state might be empty\n+      // When the timer fires, batch state might be empty\n       if (!Iterables.isEmpty(values)) {\n         receiver.output(KV.of(key.read(), values));\n       }\n       batch.clear();\n       LOG.debug(\"*** BATCH *** clear\");\n       numElementsInBatch.clear();\n+      // We might reach here due to batch size being reached or window expiration. Reset the\n+      // buffering timer (if not null) since the state is empty now. It'll be extended again if a\n+      // new element arrives prior to the expiration time set here.\n+      // TODO(BEAM-10887): Use clear() when it's available.\n+      if (bufferingTimer != null && maxBufferingDuration.isLongerThan(Duration.ZERO)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c30decd9b9b375c0ce2b4d1efe46c770d811d49"}, "originalPosition": 231}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 401, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}