{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MTM4MTEy", "number": 11708, "title": "[BEAM-9577] Artifact v2 support for uber jars.", "bodyText": "Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-14T17:15:10Z", "url": "https://github.com/apache/beam/pull/11708", "merged": true, "mergeCommit": {"oid": "76fbe45189ef0fa4b770d607c2f86e8870974523"}, "closed": true, "closedAt": "2020-05-18T22:39:14Z", "author": {"login": "robertwb"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchQtx2AH2gAyNDE4MTM4MTEyOmU3MzcxZDU2ZTcxNjNhMDgzMmUxZDQ0YmE4ZGVkZGQwMTM1Yjk4MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcimW09AH2gAyNDE4MTM4MTEyOjhhNDEzMmYzNWY5MmYxNjVmMjcyNjA5Nzc2YTU4ZDJiZjBlMWM0NjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e7371d56e7163a0832e1d44ba8deddd0135b9819", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/e7371d56e7163a0832e1d44ba8deddd0135b9819", "committedDate": "2020-05-14T17:14:04Z", "message": "[BEAM-9577] Artifact v2 support for uber jars."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3c14022b3dc4c1cd06a84e89eec6cd0afe0bba", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/8a3c14022b3dc4c1cd06a84e89eec6cd0afe0bba", "committedDate": "2020-05-14T20:00:38Z", "message": "lint, refactor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/3a75ae86e70defaa01609f12822254ce300a79c4", "committedDate": "2020-05-14T20:02:41Z", "message": "fix spark like flink"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edfdaa14ef89aa7774067b85786f7a4cf11fb77", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/4edfdaa14ef89aa7774067b85786f7a4cf11fb77", "committedDate": "2020-05-14T21:27:26Z", "message": "lint, attempt to use system class loader to make jenkins happy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTkwMTA3", "url": "https://github.com/apache/beam/pull/11708#pullrequestreview-412190107", "createdAt": "2020-05-14T21:15:11Z", "commit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToxNToxMVrOGVufIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToyNToyNlrOGVuyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNDkxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n          \n          \n            \n                throw new UnsupportedOperationException(\"Un-globbable filesystem.\");", "url": "https://github.com/apache/beam/pull/11708#discussion_r425434913", "createdAt": "2020-05-14T21:15:11Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNTIyOA==", "bodyText": "Nice! But I don't see this actually used anywhere?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425435228", "createdAt": "2020-05-14T21:15:51Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzODM1OA==", "bodyText": "How did I never know this? \ud83d\ude06", "url": "https://github.com/apache/beam/pull/11708#discussion_r425438358", "createdAt": "2020-05-14T21:22:18Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static java.nio.channels.Channels.newInputStream;\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.ReadableByteChannel;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class ClassLoaderFileSystemTest {\n+\n+  private static final String SOME_CLASS =\n+      \"classpath://org/apache/beam/sdk/io/ClassLoaderFilesystem.class\";\n+\n+  @Test\n+  public void testOpen() throws IOException {\n+    ClassLoaderFileSystem filesystem = new ClassLoaderFileSystem();\n+    ReadableByteChannel channel = filesystem.open(filesystem.matchNewResource(SOME_CLASS, false));\n+    checkIsClass(channel);\n+  }\n+\n+  @Test\n+  public void testRegistrar() throws IOException {\n+    ReadableByteChannel channel = FileSystems.open(FileSystems.matchNewResource(SOME_CLASS, false));\n+    checkIsClass(channel);\n+  }\n+\n+  public void checkIsClass(ReadableByteChannel channel) throws IOException {\n+    FileSystems.setDefaultPipelineOptions(PipelineOptionsFactory.create());\n+    InputStream inputStream = newInputStream(channel);\n+    byte[] magic = new byte[4];\n+    inputStream.read(magic);\n+    assertArrayEquals(magic, new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTg3OA==", "bodyText": "Can we add a couple trivial unit tests as sanity checks / documentation for resolve and getCurrentDirectory?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425439878", "createdAt": "2020-05-14T21:25:26Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n+  }\n+\n+  @Override\n+  protected WritableByteChannel create(\n+      ClassLoaderResourceId resourceId, CreateOptions createOptions) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    InputStream inputStream =\n+        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+    if (inputStream == null) {\n+      throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n+    }\n+    return Channels.newChannel(inputStream);\n+  }\n+\n+  @Override\n+  protected void copy(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void rename(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void delete(Collection<ClassLoaderResourceId> resourceIds) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ClassLoaderResourceId matchNewResource(String path, boolean isDirectory) {\n+    return new ClassLoaderResourceId(path);\n+  }\n+\n+  @Override\n+  protected String getScheme() {\n+    return SCHEMA;\n+  }\n+\n+  public static class ClassLoaderResourceId implements ResourceId {\n+\n+    private final String path;\n+\n+    private ClassLoaderResourceId(String path) {\n+      checkArgument(path.startsWith(PREFIX), path);\n+      this.path = path;\n+    }\n+\n+    @Override\n+    public ResourceId resolve(String other, ResolveOptions resolveOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ecfeb6829defaef5231bfe0068b99ed4f07ff5", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/00ecfeb6829defaef5231bfe0068b99ed4f07ff5", "committedDate": "2020-05-14T22:18:59Z", "message": "fix build break, more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/c428a1aedeaec049e56e0b958c97e64ea29735c2", "committedDate": "2020-05-14T23:26:00Z", "message": "more debugging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODgxNzQz", "url": "https://github.com/apache/beam/pull/11708#pullrequestreview-412881743", "createdAt": "2020-05-15T18:39:50Z", "commit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODozOTo1MFrOGWP3fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1MDoyNFrOGWQLoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTgyMA==", "bodyText": "Can't we remove this now?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425981820", "createdAt": "2020-05-15T18:39:50Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)\n     return port\n \n   def _stop_artifact_service(self):\n     self._artifact_staging_server.stop(1)\n-    self._artifact_staging_service.close()\n-    self._artifact_manifest_location = (\n-        self._artifact_staging_service.retrieval_token(self._job_id))\n+    self._artifact_manifest_location = None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTk3NQ==", "bodyText": "Why error?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425981975", "createdAt": "2020-05-15T18:40:08Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Mzg0Mg==", "bodyText": "Can we get a type annotation and/or comment on the return value here?", "url": "https://github.com/apache/beam/pull/11708#discussion_r425983842", "createdAt": "2020-05-15T18:44:00Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -278,6 +279,23 @@ def to_runner_api(self):\n         state=self.state)\n \n \n+class JarArtifactManager(object):\n+  def __init__(self, jar_path, root):\n+    self._root = root\n+    self._zipfile_handle = zipfile.ZipFile(jar_path, 'a')\n+\n+  def close(self):\n+    self._zipfile_handle.close()\n+\n+  def file_writer(self, path):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Njk3Nw==", "bodyText": "Should we change PortablePipelineJarUtils to use ClassLoaderFileSystem? (Maybe in a follow-up PR) https://github.com/apache/beam/blob/master/runners/java-job-service/src/main/java/org/apache/beam/runners/jobsubmission/PortablePipelineJarUtils.java", "url": "https://github.com/apache/beam/pull/11708#discussion_r425986977", "createdAt": "2020-05-15T18:50:24Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "582caf271cd7cddbed1cecce1b898c295d07fcf2", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/582caf271cd7cddbed1cecce1b898c295d07fcf2", "committedDate": "2020-05-15T21:36:04Z", "message": "case insensitive filesystems hide bugs!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "122b1598593d417b79d61457991fe6fce7f31744", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/122b1598593d417b79d61457991fe6fce7f31744", "committedDate": "2020-05-15T21:48:10Z", "message": "fixup: reviewer comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTgzNTQ0", "url": "https://github.com/apache/beam/pull/11708#pullrequestreview-412983544", "createdAt": "2020-05-15T21:39:46Z", "commit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTozOTo0NlrOGWUl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTo0NzoxM1rOGWUu9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1OTIzMQ==", "bodyText": "Yes, we'll want to do that too (and use the new artifact api).", "url": "https://github.com/apache/beam/pull/11708#discussion_r426059231", "createdAt": "2020-05-15T21:39:46Z", "author": {"login": "robertwb"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Njk3Nw=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MTI1NA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11708#discussion_r426061254", "createdAt": "2020-05-15T21:46:07Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -278,6 +279,23 @@ def to_runner_api(self):\n         state=self.state)\n \n \n+class JarArtifactManager(object):\n+  def __init__(self, jar_path, root):\n+    self._root = root\n+    self._zipfile_handle = zipfile.ZipFile(jar_path, 'a')\n+\n+  def close(self):\n+    self._zipfile_handle.close()\n+\n+  def file_writer(self, path):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Mzg0Mg=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MTM5Mw==", "bodyText": "Leftover debugging. Removed.", "url": "https://github.com/apache/beam/pull/11708#discussion_r426061393", "createdAt": "2020-05-15T21:46:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTk3NQ=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MTU1OA==", "bodyText": "Yep. Done.", "url": "https://github.com/apache/beam/pull/11708#discussion_r426061558", "createdAt": "2020-05-15T21:47:13Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -313,39 +329,62 @@ def prepare(self):\n     with tempfile.NamedTemporaryFile(suffix='.jar') as tout:\n       self._jar = tout.name\n     shutil.copy(self._executable_jar, self._jar)\n-    with zipfile.ZipFile(self._jar, 'a', compression=zipfile.ZIP_DEFLATED) as z:\n-      with z.open(self.PIPELINE_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_proto).encode('utf-8'))\n-      with z.open(self.PIPELINE_OPTIONS_PATH, 'w') as fout:\n-        fout.write(\n-            json_format.MessageToJson(self._pipeline_options).encode('utf-8'))\n-      with z.open(self.PIPELINE_MANIFEST, 'w') as fout:\n-        fout.write(\n-            json.dumps({\n-                'defaultJobName': self.PIPELINE_NAME\n-            }).encode('utf-8'))\n     self._start_artifact_service(self._jar, self._artifact_port)\n \n   def _start_artifact_service(self, jar, requested_port):\n-    self._artifact_staging_service = artifact_service.ZipFileArtifactService(\n-        jar, self.ARTIFACT_FOLDER)\n+    self._artifact_manager = JarArtifactManager(self._jar, self.ARTIFACT_FOLDER)\n+    self._artifact_staging_service = artifact_service.ArtifactStagingService(\n+        self._artifact_manager.file_writer)\n+    self._artifact_staging_service.register_job(\n+        self._job_id,\n+        {\n+            env_id: env.dependencies\n+            for (env_id,\n+                 env) in self._pipeline_proto.components.environments.items()\n+        })\n     self._artifact_staging_server = grpc.server(futures.ThreadPoolExecutor())\n     port = self._artifact_staging_server.add_insecure_port(\n         '[::]:%s' % requested_port)\n-    beam_artifact_api_pb2_grpc.add_LegacyArtifactStagingServiceServicer_to_server(\n+    beam_artifact_api_pb2_grpc.add_ArtifactStagingServiceServicer_to_server(\n         self._artifact_staging_service, self._artifact_staging_server)\n     self._artifact_staging_endpoint = endpoints_pb2.ApiServiceDescriptor(\n         url='localhost:%d' % port)\n     self._artifact_staging_server.start()\n     _LOGGER.info('Artifact server started on port %s', port)\n+    _LOGGER.error('Artifact server started on port %s', port)\n     return port\n \n   def _stop_artifact_service(self):\n     self._artifact_staging_server.stop(1)\n-    self._artifact_staging_service.close()\n-    self._artifact_manifest_location = (\n-        self._artifact_staging_service.retrieval_token(self._job_id))\n+    self._artifact_manifest_location = None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTgyMA=="}, "originalCommit": {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDAzNjg3", "url": "https://github.com/apache/beam/pull/11708#pullrequestreview-413003687", "createdAt": "2020-05-15T22:36:42Z", "commit": {"oid": "122b1598593d417b79d61457991fe6fce7f31744"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjozNjo0MlrOGWVlhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjozNjo0MlrOGWVlhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NTUyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                and an reference that can later be used to read this file.\"\"\"\n          \n          \n            \n                and a reference that can later be used to read this file.\"\"\"", "url": "https://github.com/apache/beam/pull/11708#discussion_r426075525", "createdAt": "2020-05-15T22:36:42Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/abstract_job_service.py", "diffHunk": "@@ -288,6 +289,9 @@ def close(self):\n     self._zipfile_handle.close()\n \n   def file_writer(self, path):\n+    # type: (str) -> Tuple[BinaryIO, str]\n+    \"\"\"Given a relative path, returns an open handle that can be written to\n+    and an reference that can later be used to read this file.\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122b1598593d417b79d61457991fe6fce7f31744"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2839770cb4e7590fb935b22b1706ff039a59520f", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/2839770cb4e7590fb935b22b1706ff039a59520f", "committedDate": "2020-05-18T20:20:19Z", "message": "Fix lint, formatting, test mocks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4132f35f92f165f272609776a58d2bf0e1c466", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/8a4132f35f92f165f272609776a58d2bf0e1c466", "committedDate": "2020-05-18T21:00:50Z", "message": "lint import fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4565, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}