{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTI4OTk1", "number": 11338, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzozNjo1OVrODvx6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0NToyNVrODwe7MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDI3Mzk0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/testing/integration/notebook_executor.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzozNjo1OVrOGCZ6qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoyNjoxNFrOGDgJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3NDk1NQ==", "bodyText": "Could we delegate to nbcovert to produce the html output? We can reduce most of this function that way.", "url": "https://github.com/apache/beam/pull/11338#discussion_r405174955", "createdAt": "2020-04-07T23:36:59Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/notebook_executor.py", "diffHunk": "@@ -0,0 +1,131 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to execute jupyter notebooks and gather the output into renderable\n+HTML files.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import os\n+import shutil\n+\n+from apache_beam.runners.interactive.utils import obfuscate\n+\n+try:\n+  import nbformat\n+  from nbconvert.preprocessors import ExecutePreprocessor\n+  _interactive_integration_ready = True\n+except ImportError:\n+  _interactive_integration_ready = False\n+\n+\n+class NotebookExecutor(object):\n+  \"\"\"Executor that reads notebooks, executes it and gathers outputs into static\n+  HTML pages that can be served.\"\"\"\n+  def __init__(self, path):\n+    # type: (str) -> None\n+\n+    assert _interactive_integration_ready, (\n+        '[interactive_test] dependency is not installed.')\n+    assert os.path.exists(path), '{} does not exist.'.format(path)\n+    self._paths = []\n+    if os.path.isdir(path):\n+      for root, _, files in os.walk(path):\n+        for filename in files:\n+          if filename.endswith('.ipynb'):\n+            self._paths.append(os.path.join(root, filename))\n+    elif path.endswith('.ipynb'):\n+      self._paths.append(path)\n+    assert len(\n+        self._paths) > 0, ('No notebooks to be executed under{}'.format(path))\n+    self._dir = os.path.dirname(self._paths[0])\n+    self._output_html_dir = os.path.join(self._dir, 'output')\n+    self.cleanup()\n+    self._output_html_paths = {}\n+    self._notebook_path_to_execution_id = {}\n+\n+  def cleanup(self):\n+    \"\"\"Cleans up the output folder.\"\"\"\n+    _cleanup(self._output_html_dir)\n+\n+  def execute(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyOTcwNA==", "bodyText": "It's tempting to switch to nbconvert's HTMLExporter, however, it has several drawbacks.\n\nThe HTMLExporter uses Jinja2 templates. Some of the templates such as basic generates broken JavaScripts while some of the templates such as full includes too many web elements ;\nThere is no guarantee that template provided by nbconvert will be stable in future nbconvert releases;\nWe have to rule out all code blocks that generates non-stable outputs in test notebooks even if they are not related to Interactive Beam and should not be included in the screenshot.\nThe more complicated the HTML is, the more flaky the screen diff test will be.", "url": "https://github.com/apache/beam/pull/11338#discussion_r405729704", "createdAt": "2020-04-08T18:31:20Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/notebook_executor.py", "diffHunk": "@@ -0,0 +1,131 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to execute jupyter notebooks and gather the output into renderable\n+HTML files.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import os\n+import shutil\n+\n+from apache_beam.runners.interactive.utils import obfuscate\n+\n+try:\n+  import nbformat\n+  from nbconvert.preprocessors import ExecutePreprocessor\n+  _interactive_integration_ready = True\n+except ImportError:\n+  _interactive_integration_ready = False\n+\n+\n+class NotebookExecutor(object):\n+  \"\"\"Executor that reads notebooks, executes it and gathers outputs into static\n+  HTML pages that can be served.\"\"\"\n+  def __init__(self, path):\n+    # type: (str) -> None\n+\n+    assert _interactive_integration_ready, (\n+        '[interactive_test] dependency is not installed.')\n+    assert os.path.exists(path), '{} does not exist.'.format(path)\n+    self._paths = []\n+    if os.path.isdir(path):\n+      for root, _, files in os.walk(path):\n+        for filename in files:\n+          if filename.endswith('.ipynb'):\n+            self._paths.append(os.path.join(root, filename))\n+    elif path.endswith('.ipynb'):\n+      self._paths.append(path)\n+    assert len(\n+        self._paths) > 0, ('No notebooks to be executed under{}'.format(path))\n+    self._dir = os.path.dirname(self._paths[0])\n+    self._output_html_dir = os.path.join(self._dir, 'output')\n+    self.cleanup()\n+    self._output_html_paths = {}\n+    self._notebook_path_to_execution_id = {}\n+\n+  def cleanup(self):\n+    \"\"\"Cleans up the output folder.\"\"\"\n+    _cleanup(self._output_html_dir)\n+\n+  def execute(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3NDk1NQ=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNTYzMQ==", "bodyText": "OK this is fair.", "url": "https://github.com/apache/beam/pull/11338#discussion_r406325631", "createdAt": "2020-04-09T16:26:14Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/notebook_executor.py", "diffHunk": "@@ -0,0 +1,131 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to execute jupyter notebooks and gather the output into renderable\n+HTML files.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import os\n+import shutil\n+\n+from apache_beam.runners.interactive.utils import obfuscate\n+\n+try:\n+  import nbformat\n+  from nbconvert.preprocessors import ExecutePreprocessor\n+  _interactive_integration_ready = True\n+except ImportError:\n+  _interactive_integration_ready = False\n+\n+\n+class NotebookExecutor(object):\n+  \"\"\"Executor that reads notebooks, executes it and gathers outputs into static\n+  HTML pages that can be served.\"\"\"\n+  def __init__(self, path):\n+    # type: (str) -> None\n+\n+    assert _interactive_integration_ready, (\n+        '[interactive_test] dependency is not installed.')\n+    assert os.path.exists(path), '{} does not exist.'.format(path)\n+    self._paths = []\n+    if os.path.isdir(path):\n+      for root, _, files in os.walk(path):\n+        for filename in files:\n+          if filename.endswith('.ipynb'):\n+            self._paths.append(os.path.join(root, filename))\n+    elif path.endswith('.ipynb'):\n+      self._paths.append(path)\n+    assert len(\n+        self._paths) > 0, ('No notebooks to be executed under{}'.format(path))\n+    self._dir = os.path.dirname(self._paths[0])\n+    self._output_html_dir = os.path.join(self._dir, 'output')\n+    self.cleanup()\n+    self._output_html_paths = {}\n+    self._notebook_path_to_execution_id = {}\n+\n+  def cleanup(self):\n+    \"\"\"Cleans up the output folder.\"\"\"\n+    _cleanup(self._output_html_dir)\n+\n+  def execute(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3NDk1NQ=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMyMDEwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/testing/integration/screen_diff.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo1OTozNVrOGCaWUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozMzo1NVrOGC73pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAzNA==", "bodyText": "How does this interact with our regular unittest framework? Could one skip, or run specific tests as needed?", "url": "https://github.com/apache/beam/pull/11338#discussion_r405182034", "createdAt": "2020-04-07T23:59:35Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/screen_diff.py", "diffHunk": "@@ -0,0 +1,203 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to conduct screen diff based notebook integration tests.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import os\n+import threading\n+import unittest\n+from http.server import SimpleHTTPRequestHandler\n+from http.server import ThreadingHTTPServer\n+from multiprocessing import Process\n+\n+from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.testing.integration import notebook_executor\n+\n+try:\n+  import chromedriver_binary  # pylint: disable=unused-import\n+  from needle.cases import NeedleTestCase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMTIzOA==", "bodyText": "It is a normal unit test.\nThis will be picked up and skipped (since I don't intend to put it in Beam pre-commit yet) with existing test suites.", "url": "https://github.com/apache/beam/pull/11338#discussion_r405731238", "createdAt": "2020-04-08T18:33:55Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/screen_diff.py", "diffHunk": "@@ -0,0 +1,203 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to conduct screen diff based notebook integration tests.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import os\n+import threading\n+import unittest\n+from http.server import SimpleHTTPRequestHandler\n+from http.server import ThreadingHTTPServer\n+from multiprocessing import Process\n+\n+from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.testing.integration import notebook_executor\n+\n+try:\n+  import chromedriver_binary  # pylint: disable=unused-import\n+  from needle.cases import NeedleTestCase", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MjAzNA=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMyNDk4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/testing/integration/screen_diff.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowMjowMFrOGCaZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo1MDowN1rOGC8dQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4Mjc3Mw==", "bodyText": "Could we compare produced html outputs? Do we need to compare that pixels are equivalent, if instead we can compare the html outputs?", "url": "https://github.com/apache/beam/pull/11338#discussion_r405182773", "createdAt": "2020-04-08T00:02:00Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/screen_diff.py", "diffHunk": "@@ -0,0 +1,203 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to conduct screen diff based notebook integration tests.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import os\n+import threading\n+import unittest\n+from http.server import SimpleHTTPRequestHandler\n+from http.server import ThreadingHTTPServer\n+from multiprocessing import Process\n+\n+from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.testing.integration import notebook_executor\n+\n+try:\n+  import chromedriver_binary  # pylint: disable=unused-import\n+  from needle.cases import NeedleTestCase\n+  from needle.driver import NeedleChrome\n+  from selenium.webdriver.chrome.options import Options\n+  _interactive_integration_ready = (\n+      notebook_executor._interactive_integration_ready)\n+except ImportError:\n+  _interactive_integration_ready = False\n+\n+\n+class ScreenDiffIntegrationTestEnvironment(object):\n+  \"\"\"A test environment to conduct screen diff integration tests for notebooks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MDg2Ng==", "bodyText": "I've listed several problems with that approach in https://docs.google.com/document/d/1tk2P0Cu9hMjbtDWfIuQEFj07q20iqasqLPVtYVpxw3w/edit?usp=sharing.\nTL;DR: We can and we have such tests in place that compares the produced html outputs, but the screen diff test covers a different test scenario and should not be mutual excluded.\n\nMany web elements are not stable across multiple runs. So we cannot simply compare the HTML as plain text between runs.\nWe have regex assertions in hosted notebook image release integration tests. However, regex is tedious to write, error-prone,  not readable and could not cover all outputs.\nThere are changes we/users do not care but could cause unexpected test failure. For example, refactoring a piece of Javascript/HTML template that does not affect the final web page rendered should not cause integration test to fail.\nThere are changes we do care but will not cause test failure when expected. For example, when modern browser drops support to some old technology that breaks the rendering of web page even when the output HTML has not changed at all, such integration test should catch that.\nFurthermore, asserting generated HTML/JavaScript/CSS is like asserting source code without executing them, thus missing runtime errors. There are situations when a malformed CSS selector could break JavaScripts, asserting notebook outputs as text will not catch it until you run the actual JavaScripts and capture the screenshot.", "url": "https://github.com/apache/beam/pull/11338#discussion_r405740866", "createdAt": "2020-04-08T18:50:07Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/screen_diff.py", "diffHunk": "@@ -0,0 +1,203 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to conduct screen diff based notebook integration tests.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import os\n+import threading\n+import unittest\n+from http.server import SimpleHTTPRequestHandler\n+from http.server import ThreadingHTTPServer\n+from multiprocessing import Process\n+\n+from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.testing.integration import notebook_executor\n+\n+try:\n+  import chromedriver_binary  # pylint: disable=unused-import\n+  from needle.cases import NeedleTestCase\n+  from needle.driver import NeedleChrome\n+  from selenium.webdriver.chrome.options import Options\n+  _interactive_integration_ready = (\n+      notebook_executor._interactive_integration_ready)\n+except ImportError:\n+  _interactive_integration_ready = False\n+\n+\n+class ScreenDiffIntegrationTestEnvironment(object):\n+  \"\"\"A test environment to conduct screen diff integration tests for notebooks.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4Mjc3Mw=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMyNjQ2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/testing/integration/tests/init_square_cube_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowMjo0NlrOGCaaDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo1NzoyN1rOGC8tXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4Mjk5MQ==", "bodyText": "High level question, do we need to compare that pixels did not change with chnages? What benefit do we get from it?", "url": "https://github.com/apache/beam/pull/11338#discussion_r405182991", "createdAt": "2020-04-08T00:02:46Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/tests/init_square_cube_test.py", "diffHunk": "@@ -0,0 +1,37 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Integration tests for interactive beam.\"\"\"\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+from apache_beam.runners.interactive.testing.integration.screen_diff import BaseTestCase\n+\n+\n+@unittest.skipIf(\n+    BaseTestCase.should_skip(),\n+    '[interactive] and [interactive_test] dependency are both required.')\n+class InitSquareCubeTest(BaseTestCase):\n+  def test_init_square_cube_notebook(self):\n+    self.assert_notebook('init_square_cube')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0NDk5MA==", "bodyText": "As explained in the\n\nCould we compare produced html outputs? Do we need to compare that pixels are equivalent, if instead we can compare the html outputs?\n\nThe advantages/benefits is that:\n\nThis is real integration test that executes/renders the notebook outputs;\nThis can find errors and problems that regex/plain-text comparison could not catch;\nThis rules out false test failures (flakiness) in regex/plain-text comparison tests.\nThe test result is screenshot that is highly readable.\nYou don't even need to write any test. Just give the infrastructure a notebook and you are done.\n\nIt does have its own disadvantage/flakiness:\n\nAnything that causes unstable rendering will potentially fail the test.", "url": "https://github.com/apache/beam/pull/11338#discussion_r405744990", "createdAt": "2020-04-08T18:57:27Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/testing/integration/tests/init_square_cube_test.py", "diffHunk": "@@ -0,0 +1,37 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Integration tests for interactive beam.\"\"\"\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+from apache_beam.runners.interactive.testing.integration.screen_diff import BaseTestCase\n+\n+\n+@unittest.skipIf(\n+    BaseTestCase.should_skip(),\n+    '[interactive] and [interactive_test] dependency are both required.')\n+class InitSquareCubeTest(BaseTestCase):\n+  def test_init_square_cube_notebook(self):\n+    self.assert_notebook('init_square_cube')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4Mjk5MQ=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMyNzM3OnYy", "diffSide": "RIGHT", "path": "sdks/python/setup.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowMzoyMVrOGCaarw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1MDo1OVrOGDhDLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzE1MQ==", "bodyText": "This is a quite a large addition for the value we are getting.\nAnd,\n\nshould this be integrated with tox?\njenkins?\nwhich platforms does this test work in?", "url": "https://github.com/apache/beam/pull/11338#discussion_r405183151", "createdAt": "2020-04-08T00:03:21Z", "author": {"login": "aaltay"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -222,6 +222,17 @@ def get_version():\n     'ipython>=5.8.0,<8',\n     'timeloop>=1.0.2,<2',\n ]\n+\n+INTERACTIVE_BEAM_TEST = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NDMzNw==", "bodyText": "TL;DR: It is a normal unit test that works with every platform.\nFor the time being, I'll not integrate this into Beam pre-commit.\nI've marked such tests skip conditionally for both pytest and unittest.\nI'll first integrate this into the hosted notebook release process on cloud build.\nWhen the test is stable, we can discuss whether including a chrome executable on Jenkins is worth it.\n-- Below assumes we don't want to skip these tests and removed the skip marks --\nTox integration:\nAs a normal unit test, it automatically gets included by our existing tox setup.\nHowever, to allow the test being executed successfully by tox:\n\nadd [interactive] and [interactive_test] as extras in tox testenvs, e.g., py37\nadd an ipython kernel to the runtime environment (programmatically done in notebook_executor.py)\n\nThen you can run\n# --recreate is needed the first time you make a change to tox.ini.\ntox --recreate -e py37 apache_beam/runners/interactive/testing/integration/tests/init_square_cube_test.py\n\nYou can already run it with pytest, unittest, nosetests:\nFor example, under .../beam/sdks/python,\n# pytest\npytest -v apache_beam/runners/interactive/testing/integration/tests/init_square_cube_test.py\n# unittest\npython -m unittest apache_beam/runners/interactive/testing/integration/tests/init_square_cube_test.py\n# nosetests\nnosetests apache_beam/runners/interactive/testing/integration/tests/init_square_cube_test.py\n\nJenkins integration:\nThe only dependency that is \"hard\" to set up is pre-installing a chrome executable on Jenkins.\nWe'll visit https://github.com/apache/beam/tree/master/.test-infra/dockerized-jenkins in the future.", "url": "https://github.com/apache/beam/pull/11338#discussion_r405754337", "createdAt": "2020-04-08T19:14:08Z", "author": {"login": "KevinGG"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -222,6 +222,17 @@ def get_version():\n     'ipython>=5.8.0,<8',\n     'timeloop>=1.0.2,<2',\n ]\n+\n+INTERACTIVE_BEAM_TEST = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzE1MQ=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNTYzNw==", "bodyText": "Fair. Please add this information to the wiki. (https://cwiki.apache.org/confluence/display/BEAM/Python+Tips or a new notebook tips page)", "url": "https://github.com/apache/beam/pull/11338#discussion_r406335637", "createdAt": "2020-04-09T16:42:38Z", "author": {"login": "aaltay"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -222,6 +222,17 @@ def get_version():\n     'ipython>=5.8.0,<8',\n     'timeloop>=1.0.2,<2',\n ]\n+\n+INTERACTIVE_BEAM_TEST = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzE1MQ=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MDM5OA==", "bodyText": "Will update the readme in another PR once this is submitted", "url": "https://github.com/apache/beam/pull/11338#discussion_r406340398", "createdAt": "2020-04-09T16:50:59Z", "author": {"login": "KevinGG"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -222,6 +222,17 @@ def get_version():\n     'ipython>=5.8.0,<8',\n     'timeloop>=1.0.2,<2',\n ]\n+\n+INTERACTIVE_BEAM_TEST = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzE1MQ=="}, "originalCommit": {"oid": "5a5cbb4785800f1cc5ff7982055d22eb51b6065e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTY0OTEyOnYy", "diffSide": "RIGHT", "path": "sdks/python/setup.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0NToyNVrOGDg27w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowOTozOFrOGDhtUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzI2Mw==", "bodyText": "Why is this added here and not to the test list?", "url": "https://github.com/apache/beam/pull/11338#discussion_r406337263", "createdAt": "2020-04-09T16:45:25Z", "author": {"login": "aaltay"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -220,8 +220,21 @@ def get_version():\n INTERACTIVE_BEAM = [\n     'facets-overview>=1.0.0,<2',\n     'ipython>=5.8.0,<8',\n+    'ipykernel>=5.2.0,<6',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934c45b44329a5706b8b66e145efdb733f7b266a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0NTMyMA==", "bodyText": "It's also part of the Jupyter notebook setup dependency, see the readme.\nWe didn't put jupyterlab nor ipykernel in [interactive] because we wanted to keep the dependency minimal sized. Since now we may need ipykernel in the virtual env setup,  add it to [interactive] because it's where it should go.", "url": "https://github.com/apache/beam/pull/11338#discussion_r406345320", "createdAt": "2020-04-09T16:59:07Z", "author": {"login": "KevinGG"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -220,8 +220,21 @@ def get_version():\n INTERACTIVE_BEAM = [\n     'facets-overview>=1.0.0,<2',\n     'ipython>=5.8.0,<8',\n+    'ipykernel>=5.2.0,<6',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzI2Mw=="}, "originalCommit": {"oid": "934c45b44329a5706b8b66e145efdb733f7b266a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0NjMyMA==", "bodyText": "Got it. This is fine. I got confused because I could not tell its relation to this PR. Please break different changes to different PRs.", "url": "https://github.com/apache/beam/pull/11338#discussion_r406346320", "createdAt": "2020-04-09T17:00:51Z", "author": {"login": "aaltay"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -220,8 +220,21 @@ def get_version():\n INTERACTIVE_BEAM = [\n     'facets-overview>=1.0.0,<2',\n     'ipython>=5.8.0,<8',\n+    'ipykernel>=5.2.0,<6',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzI2Mw=="}, "originalCommit": {"oid": "934c45b44329a5706b8b66e145efdb733f7b266a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MTE4NQ==", "bodyText": "It's actually related, because the nbconvert module requires an ipykernel to work.\nSo this dependency is needed by both [interactive] and [interactive_test].\nIt looks weird to put it in [interactive] rather than [interactive_test] though :), but that's where it should have been.", "url": "https://github.com/apache/beam/pull/11338#discussion_r406351185", "createdAt": "2020-04-09T17:09:38Z", "author": {"login": "KevinGG"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -220,8 +220,21 @@ def get_version():\n INTERACTIVE_BEAM = [\n     'facets-overview>=1.0.0,<2',\n     'ipython>=5.8.0,<8',\n+    'ipykernel>=5.2.0,<6',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzI2Mw=="}, "originalCommit": {"oid": "934c45b44329a5706b8b66e145efdb733f7b266a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1412, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}