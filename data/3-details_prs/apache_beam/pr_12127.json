{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjk4Mjkz", "number": 12127, "title": "[BEAM-9615] Add bytes, bool, and iterable coders", "bodyText": "Add bytes, bool, and iterable coders to the graph/coders package.\nThis is in preparation of the next PR which has the first pass at the row encoder, so these building blocks can be reviewed separately.\nThe bool and bytes coders are code migrated from the exec package, but it was striking me as odd to have so much encoding implementation living in exec/coder.go when much of it was in this graph/coder package. Those implementations will be replaced with the ones in this PR as appropriate (eg. iterables will necessarily be implemented in the Datasource package as well to support Large CoGBKs via the state channel for example.)\nIterables demonstrate how to handle reflective encoding with nested types, in this case, with a nested coder. As much as possible, it's best to avoid swapping back and forth through reflect.Values as that adds extensive overhead, which is why these are implemented in terms of reflect.Value. This doesn't matter for the primitive types which have efficient extraction methods from the reflect.Value containers.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-29T23:23:51Z", "url": "https://github.com/apache/beam/pull/12127", "merged": true, "mergeCommit": {"oid": "e7a3392595e14cdb377fe95fb679305ea9a32249"}, "closed": true, "closedAt": "2020-06-30T17:55:32Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwJdl_gH2gAyNDQxNjk4MjkzOjYzMDdlZWI0YmNlZDVkZWIzZTI1MTA0YmQxZDZkMzczODM0MzdjN2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwY1llAH2gAyNDQxNjk4MjkzOjgwZjRiMWRmOGVkYmZhMDA5MzY0YTJmM2IyYWIxMjVmMjc1MGMyZDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/6307eeb4bced5deb3e25104bd1d6d37383437c7f", "committedDate": "2020-06-29T23:15:55Z", "message": "[BEAM-9615] Add bytes, bool, and iterable coders"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjQzMjU3", "url": "https://github.com/apache/beam/pull/12127#pullrequestreview-439643257", "createdAt": "2020-06-30T03:25:34Z", "commit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzoyNTozNFrOGqqQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzo1NjoxNFrOGqqvQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4NTc4Mw==", "bodyText": "I can't figure out why the size part of the encoded buffer is []byte{128, 2} here. It should represent 256 right?", "url": "https://github.com/apache/beam/pull/12127#discussion_r447385783", "createdAt": "2020-06-30T03:25:34Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/graph/coder/bytes_test.go", "diffHunk": "@@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+)\n+\n+func TestEncodeDecodeBytes(t *testing.T) {\n+\tlongString := strings.Repeat(\" this sentence is 32 characters.\", 8) // 256 characters to ensure LP works.\n+\ttests := []struct {\n+\t\tv       []byte\n+\t\tencoded []byte\n+\t}{\n+\t\t{v: []byte{}, encoded: []byte{0}},\n+\t\t{v: []byte{42}, encoded: []byte{1, 42}},\n+\t\t{v: []byte{42, 23}, encoded: []byte{2, 42, 23}},\n+\t\t{v: []byte(longString), encoded: append([]byte{128, 2}, []byte(longString)...)},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM5MzYwMw==", "bodyText": "Is this Printf intentional? I would imagine this line would use logging normally, so a Printf looks like a leftover line after debugging.", "url": "https://github.com/apache/beam/pull/12127#discussion_r447393603", "createdAt": "2020-06-30T03:56:14Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/graph/coder/iterable.go", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"fmt\"\n+\t\"io\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+)\n+\n+// TODO(lostluck): 2020.06.29 export these for use for others?\n+\n+// iterableEncoder reflectively encodes a slice or array type using\n+// the beam fixed length iterable encoding.\n+func iterableEncoder(rt reflect.Type, encode func(reflect.Value, io.Writer) error) func(reflect.Value, io.Writer) error {\n+\treturn func(rv reflect.Value, w io.Writer) error {\n+\t\tsize := rv.Len()\n+\t\tif err := EncodeInt32((int32)(size), w); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tfor i := 0; i < size; i++ {\n+\t\t\tif err := encode(rv.Index(i), w); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n+\t\treturn nil\n+\t}\n+}\n+\n+// iterableDecoderForSlice can decode from both the fixed sized and\n+// multi-chunk variants of the beam iterable protocol.\n+// Returns an error for other protocols (such as state backed).\n+func iterableDecoderForSlice(rt reflect.Type, decodeToElem func(reflect.Value, io.Reader) error) func(reflect.Value, io.Reader) error {\n+\treturn func(ret reflect.Value, r io.Reader) error {\n+\t\t// (1) Read count prefixed encoded data\n+\t\tsize, err := DecodeInt32(r)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tn := int(size)\n+\t\tswitch {\n+\t\tcase n >= 0:\n+\t\t\trv := reflect.MakeSlice(rt, n, n)\n+\t\t\tif err := decodeToIterable(rv, r, decodeToElem); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\tret.Set(rv)\n+\t\t\treturn nil\n+\t\tcase n == -1:\n+\t\t\tchunk, err := DecodeVarInt(r)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\trv := reflect.MakeSlice(rt, 0, int(chunk))\n+\t\t\tfor chunk != 0 {\n+\t\t\t\tfmt.Printf(\"chunk: %d\\n\", chunk)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6307eeb4bced5deb3e25104bd1d6d37383437c7f"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80f4b1df8edbfa009364a2f3b2ab125f2750c2d2", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/80f4b1df8edbfa009364a2f3b2ab125f2750c2d2", "committedDate": "2020-06-30T17:10:42Z", "message": "!fixup remove debug print"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3221, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}