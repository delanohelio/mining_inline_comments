{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDQ0Mjgy", "number": 11756, "title": "[BEAM-9603] Add timer family support to FnApiDoFnRunner", "bodyText": "Please add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-20T00:54:47Z", "url": "https://github.com/apache/beam/pull/11756", "merged": true, "mergeCommit": {"oid": "b1791a2b4f44cfb6df47c2c6be7478048aaf2f2d"}, "closed": true, "closedAt": "2020-05-26T22:18:53Z", "author": {"login": "y1chi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci-dXnAH2gAyNDIwNDQ0MjgyOmMyZDZjMzZlMDNkZmZjYmZkMjM4N2FjMTk4NjJhNGQ5Y2I0MDE0OTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjf7baAH2gAyNDIwNDQ0MjgyOmQzZGZhMzBmN2I2ZDFhYzFhZDY5M2U5OGIyOWQwOWNjMDU4NmQ2ZGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494", "author": {"user": {"login": "y1chi", "name": "Yichi Zhang"}}, "url": "https://github.com/apache/beam/commit/c2d6c36e03dffcbfd2387ac19862a4d9cb401494", "committedDate": "2020-05-20T01:05:42Z", "message": "[BEAM-9603] Add timer family support to FnApiDoFnRunner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd381f013830f73cc8727917498c05d305164a97", "author": {"user": {"login": "y1chi", "name": "Yichi Zhang"}}, "url": "https://github.com/apache/beam/commit/cd381f013830f73cc8727917498c05d305164a97", "committedDate": "2020-05-20T00:53:16Z", "message": "[BEAM-9603] Add timer family support to FnApiDoFnRunner"}, "afterCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494", "author": {"user": {"login": "y1chi", "name": "Yichi Zhang"}}, "url": "https://github.com/apache/beam/commit/c2d6c36e03dffcbfd2387ac19862a4d9cb401494", "committedDate": "2020-05-20T01:05:42Z", "message": "[BEAM-9603] Add timer family support to FnApiDoFnRunner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTY0NTU2", "url": "https://github.com/apache/beam/pull/11756#pullrequestreview-414964556", "createdAt": "2020-05-20T03:17:44Z", "commit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoxNzo0NFrOGX532A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzozODoyM1rOGX6KBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODYxNg==", "bodyText": "The TTimerFamilySpec should have time_domain  field. Maybe we could  do something similar to \n  \n    \n      beam/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ParDoTranslation.java\n    \n    \n        Lines 657 to 668\n      in\n      1de50c3\n    \n    \n    \n    \n\n        \n          \n           private static RunnerApi.TimeDomain.Enum translateTimeDomain(TimeDomain timeDomain) { \n        \n\n        \n          \n             switch (timeDomain) { \n        \n\n        \n          \n               case EVENT_TIME: \n        \n\n        \n          \n                 return RunnerApi.TimeDomain.Enum.EVENT_TIME; \n        \n\n        \n          \n               case PROCESSING_TIME: \n        \n\n        \n          \n                 return RunnerApi.TimeDomain.Enum.PROCESSING_TIME; \n        \n\n        \n          \n               case SYNCHRONIZED_PROCESSING_TIME: \n        \n\n        \n          \n                 return RunnerApi.TimeDomain.Enum.SYNCHRONIZED_PROCESSING_TIME; \n        \n\n        \n          \n               default: \n        \n\n        \n          \n                 throw new IllegalArgumentException(\"Unknown time domain\"); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           }", "url": "https://github.com/apache/beam/pull/11756#discussion_r427718616", "createdAt": "2020-05-20T03:17:44Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -460,14 +461,22 @@ public void accept(WindowedValue input) throws Exception {\n       // Extract out relevant TimerFamilySpec information in preparation for execution.\n       for (Map.Entry<String, TimerFamilySpec> entry :\n           parDoPayload.getTimerFamilySpecsMap().entrySet()) {\n-        String timerFamilyId = entry.getKey();\n-        TimeDomain timeDomain =\n-            DoFnSignatures.getTimerSpecOrThrow(\n-                    doFnSignature.timerDeclarations().get(timerFamilyId), doFn)\n-                .getTimeDomain();\n+        String timerIdOrTimerFamilyId = entry.getKey();\n+        TimeDomain timeDomain;\n+        if (timerIdOrTimerFamilyId.startsWith(TimerFamilyDeclaration.PREFIX)) {\n+          timeDomain =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxOTAwMA==", "bodyText": "Could you please add more javadoc/comments about why it's timerId or timerFamilyId?", "url": "https://github.com/apache/beam/pull/11756#discussion_r427719000", "createdAt": "2020-05-20T03:19:33Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -460,14 +461,22 @@ public void accept(WindowedValue input) throws Exception {\n       // Extract out relevant TimerFamilySpec information in preparation for execution.\n       for (Map.Entry<String, TimerFamilySpec> entry :\n           parDoPayload.getTimerFamilySpecsMap().entrySet()) {\n-        String timerFamilyId = entry.getKey();\n-        TimeDomain timeDomain =\n-            DoFnSignatures.getTimerSpecOrThrow(\n-                    doFnSignature.timerDeclarations().get(timerFamilyId), doFn)\n-                .getTimeDomain();\n+        String timerIdOrTimerFamilyId = entry.getKey();\n+        TimeDomain timeDomain;\n+        if (timerIdOrTimerFamilyId.startsWith(TimerFamilyDeclaration.PREFIX)) {\n+          timeDomain =\n+              DoFnSignatures.getTimerFamilySpecOrThrow(\n+                      doFnSignature.timerFamilyDeclarations().get(timerIdOrTimerFamilyId), doFn)\n+                  .getTimeDomain();\n+        } else {\n+          timeDomain =\n+              DoFnSignatures.getTimerSpecOrThrow(\n+                      doFnSignature.timerDeclarations().get(timerIdOrTimerFamilyId), doFn)\n+                  .getTimeDomain();\n+        }\n         Coder<Timer<Object>> timerCoder =\n             (Coder) rehydratedComponents.getCoder(entry.getValue().getTimerFamilyCoderId());\n-        timerFamilyInfosBuilder.put(timerFamilyId, KV.of(timeDomain, timerCoder));\n+        timerFamilyInfosBuilder.put(timerIdOrTimerFamilyId, KV.of(timeDomain, timerCoder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQ1MQ==", "bodyText": "If the timerIdOrTimerFamilyId  is for a timer family, should the timerId be the timer.dynamicTimerTag?", "url": "https://github.com/apache/beam/pull/11756#discussion_r427720451", "createdAt": "2020-05-20T03:25:46Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -962,16 +971,25 @@ private Progress getProgress() {\n             .build());\n   }\n \n-  private <K> void processTimer(String timerId, TimeDomain timeDomain, Timer<K> timer) {\n+  private <K> void processTimer(\n+      String timerIdOrTimerFamilyId, TimeDomain timeDomain, Timer<K> timer) {\n     currentTimer = timer;\n     currentTimeDomain = timeDomain;\n     onTimerContext = new OnTimerContext<>(timer.getUserKey());\n+    String timerId =\n+        timerIdOrTimerFamilyId.startsWith(TimerFamilyDeclaration.PREFIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTEwMQ==", "bodyText": "Similar to FnApiTimer above, we should have timeDomain from proto, right?", "url": "https://github.com/apache/beam/pull/11756#discussion_r427721101", "createdAt": "2020-05-20T03:28:37Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1207,15 +1224,51 @@ private void output(Instant scheduledTime) {\n     }\n   }\n \n-  private static class FnApiTimerMap implements TimerMap {\n-    FnApiTimerMap() {}\n+  private class FnApiTimerMap<K> implements TimerMap {\n+    private final String timerFamilyId;\n+    private final K userKey;\n+    private final TimeDomain timeDomain;\n+    private final Instant elementTimestampOrTimerHoldTimestamp;\n+    private final Instant elementTimestampOrTimerFireTimestamp;\n+    private final BoundedWindow boundedWindow;\n+    private final PaneInfo paneInfo;\n+\n+    FnApiTimerMap(\n+        String timerFamilyId,\n+        K userKey,\n+        BoundedWindow boundedWindow,\n+        Instant elementTimestampOrTimerHoldTimestamp,\n+        Instant elementTimestampOrTimerFireTimestamp,\n+        PaneInfo paneInfo) {\n+      this.timerFamilyId = timerFamilyId;\n+      this.userKey = userKey;\n+      this.elementTimestampOrTimerHoldTimestamp = elementTimestampOrTimerHoldTimestamp;\n+      this.elementTimestampOrTimerFireTimestamp = elementTimestampOrTimerFireTimestamp;\n+      this.boundedWindow = boundedWindow;\n+      this.paneInfo = paneInfo;\n+\n+      TimerFamilyDeclaration timerFamilyDeclaration =\n+          doFnSignature.timerFamilyDeclarations().get(timerFamilyId);\n+      this.timeDomain =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMzI2OQ==", "bodyText": "We should consider exposing more APIs here like FnApiTimer. Maybe a TODO here?", "url": "https://github.com/apache/beam/pull/11756#discussion_r427723269", "createdAt": "2020-05-20T03:38:23Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1207,15 +1224,51 @@ private void output(Instant scheduledTime) {\n     }\n   }\n \n-  private static class FnApiTimerMap implements TimerMap {\n-    FnApiTimerMap() {}\n+  private class FnApiTimerMap<K> implements TimerMap {\n+    private final String timerFamilyId;\n+    private final K userKey;\n+    private final TimeDomain timeDomain;\n+    private final Instant elementTimestampOrTimerHoldTimestamp;\n+    private final Instant elementTimestampOrTimerFireTimestamp;\n+    private final BoundedWindow boundedWindow;\n+    private final PaneInfo paneInfo;\n+\n+    FnApiTimerMap(\n+        String timerFamilyId,\n+        K userKey,\n+        BoundedWindow boundedWindow,\n+        Instant elementTimestampOrTimerHoldTimestamp,\n+        Instant elementTimestampOrTimerFireTimestamp,\n+        PaneInfo paneInfo) {\n+      this.timerFamilyId = timerFamilyId;\n+      this.userKey = userKey;\n+      this.elementTimestampOrTimerHoldTimestamp = elementTimestampOrTimerHoldTimestamp;\n+      this.elementTimestampOrTimerFireTimestamp = elementTimestampOrTimerFireTimestamp;\n+      this.boundedWindow = boundedWindow;\n+      this.paneInfo = paneInfo;\n+\n+      TimerFamilyDeclaration timerFamilyDeclaration =\n+          doFnSignature.timerFamilyDeclarations().get(timerFamilyId);\n+      this.timeDomain =\n+          DoFnSignatures.getTimerFamilySpecOrThrow(timerFamilyDeclaration, doFn).getTimeDomain();\n+    }\n \n     @Override\n-    public void set(String timerId, Instant absoluteTime) {}\n+    public void set(String dynamicTimerTag, Instant absoluteTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583991565db7b684957c9a97a0ed6bb09593c01f", "author": {"user": {"login": "y1chi", "name": "Yichi Zhang"}}, "url": "https://github.com/apache/beam/commit/583991565db7b684957c9a97a0ed6bb09593c01f", "committedDate": "2020-05-20T18:58:19Z", "message": "Address comments and add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25558bb447507ee9ab3befeb185292b57e146c6b", "author": {"user": {"login": "y1chi", "name": "Yichi Zhang"}}, "url": "https://github.com/apache/beam/commit/25558bb447507ee9ab3befeb185292b57e146c6b", "committedDate": "2020-05-20T18:56:36Z", "message": "Address comments and add tests"}, "afterCommit": {"oid": "583991565db7b684957c9a97a0ed6bb09593c01f", "author": {"user": {"login": "y1chi", "name": "Yichi Zhang"}}, "url": "https://github.com/apache/beam/commit/583991565db7b684957c9a97a0ed6bb09593c01f", "committedDate": "2020-05-20T18:58:19Z", "message": "Address comments and add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODcxMzU2", "url": "https://github.com/apache/beam/pull/11756#pullrequestreview-415871356", "createdAt": "2020-05-21T04:31:29Z", "commit": {"oid": "583991565db7b684957c9a97a0ed6bb09593c01f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDozMToyOVrOGYl1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTowMzowN1rOGYmQ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzODk3MQ==", "bodyText": "Ack. Thanks!", "url": "https://github.com/apache/beam/pull/11756#discussion_r428438971", "createdAt": "2020-05-21T04:31:29Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -962,16 +971,25 @@ private Progress getProgress() {\n             .build());\n   }\n \n-  private <K> void processTimer(String timerId, TimeDomain timeDomain, Timer<K> timer) {\n+  private <K> void processTimer(\n+      String timerIdOrTimerFamilyId, TimeDomain timeDomain, Timer<K> timer) {\n     currentTimer = timer;\n     currentTimeDomain = timeDomain;\n     onTimerContext = new OnTimerContext<>(timer.getUserKey());\n+    String timerId =\n+        timerIdOrTimerFamilyId.startsWith(TimerFamilyDeclaration.PREFIX)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQ1MQ=="}, "originalCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0MDM2MQ==", "bodyText": "I thought it would be good time to revisit the dynamic timer API design but it's not in the scope of this PR. Let's leave it as now. Thanks!", "url": "https://github.com/apache/beam/pull/11756#discussion_r428440361", "createdAt": "2020-05-21T04:37:48Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1207,15 +1224,51 @@ private void output(Instant scheduledTime) {\n     }\n   }\n \n-  private static class FnApiTimerMap implements TimerMap {\n-    FnApiTimerMap() {}\n+  private class FnApiTimerMap<K> implements TimerMap {\n+    private final String timerFamilyId;\n+    private final K userKey;\n+    private final TimeDomain timeDomain;\n+    private final Instant elementTimestampOrTimerHoldTimestamp;\n+    private final Instant elementTimestampOrTimerFireTimestamp;\n+    private final BoundedWindow boundedWindow;\n+    private final PaneInfo paneInfo;\n+\n+    FnApiTimerMap(\n+        String timerFamilyId,\n+        K userKey,\n+        BoundedWindow boundedWindow,\n+        Instant elementTimestampOrTimerHoldTimestamp,\n+        Instant elementTimestampOrTimerFireTimestamp,\n+        PaneInfo paneInfo) {\n+      this.timerFamilyId = timerFamilyId;\n+      this.userKey = userKey;\n+      this.elementTimestampOrTimerHoldTimestamp = elementTimestampOrTimerHoldTimestamp;\n+      this.elementTimestampOrTimerFireTimestamp = elementTimestampOrTimerFireTimestamp;\n+      this.boundedWindow = boundedWindow;\n+      this.paneInfo = paneInfo;\n+\n+      TimerFamilyDeclaration timerFamilyDeclaration =\n+          doFnSignature.timerFamilyDeclarations().get(timerFamilyId);\n+      this.timeDomain =\n+          DoFnSignatures.getTimerFamilySpecOrThrow(timerFamilyDeclaration, doFn).getTimeDomain();\n+    }\n \n     @Override\n-    public void set(String timerId, Instant absoluteTime) {}\n+    public void set(String dynamicTimerTag, Instant absoluteTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMzI2OQ=="}, "originalCommit": {"oid": "c2d6c36e03dffcbfd2387ac19862a4d9cb401494"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NTk0NQ==", "bodyText": "dynamicTimerInGlobalWindow?", "url": "https://github.com/apache/beam/pull/11756#discussion_r428445945", "createdAt": "2020-05-21T05:03:07Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java", "diffHunk": "@@ -947,49 +910,213 @@ public void testTimers() throws Exception {\n             timerInGlobalWindow(\"A\", new Instant(1600L), new Instant(10012L)),\n             timerInGlobalWindow(\"X\", new Instant(1700L), new Instant(10022L)),\n             timerInGlobalWindow(\"C\", new Instant(1800L), new Instant(10022L)),\n-            timerInGlobalWindow(\"B\", new Instant(1900L), new Instant(10022L))));\n+            timerInGlobalWindow(\"B\", new Instant(1900L), new Instant(10022L)),\n+            timerInGlobalWindow(\"B\", new Instant(2000L), new Instant(10032L)),\n+            timerInGlobalWindow(\"Y\", new Instant(2100L), new Instant(10042L))));\n+    assertThat(\n+        fakeTimerClient.getTimers(eventFamilyTimer),\n+        contains(\n+            timerInGlobalWindow(\"X\", \"event-timer1\", new Instant(1000L), new Instant(1003L)),\n+            timerInGlobalWindow(\"Y\", \"event-timer1\", new Instant(1100L), new Instant(1103L)),\n+            timerInGlobalWindow(\"X\", \"event-timer1\", new Instant(1200L), new Instant(1203L)),\n+            timerInGlobalWindow(\"Y\", \"event-timer1\", new Instant(1300L), new Instant(1303L)),\n+            timerInGlobalWindow(\"A\", \"event-timer1\", new Instant(1400L), new Instant(2413L)),\n+            timerInGlobalWindow(\"B\", \"event-timer1\", new Instant(1500L), new Instant(2513L)),\n+            timerInGlobalWindow(\"A\", \"event-timer1\", new Instant(1600L), new Instant(2613L)),\n+            timerInGlobalWindow(\"X\", \"event-timer1\", new Instant(1700L), new Instant(1723L)),\n+            timerInGlobalWindow(\"C\", \"event-timer1\", new Instant(1800L), new Instant(1823L)),\n+            timerInGlobalWindow(\"B\", \"event-timer1\", new Instant(1900L), new Instant(1923L)),\n+            timerInGlobalWindow(\"B\", \"event-timer1\", new Instant(2000L), new Instant(2033L)),\n+            timerInGlobalWindow(\"Y\", \"event-timer1\", new Instant(2100L), new Instant(2143L))));\n+    assertThat(\n+        fakeTimerClient.getTimers(processingFamilyTimer),\n+        contains(\n+            timerInGlobalWindow(\"X\", \"processing-timer1\", new Instant(1000L), new Instant(10004L)),\n+            timerInGlobalWindow(\"Y\", \"processing-timer1\", new Instant(1100L), new Instant(10004L)),\n+            timerInGlobalWindow(\"X\", \"processing-timer1\", new Instant(1200L), new Instant(10004L)),\n+            timerInGlobalWindow(\"Y\", \"processing-timer1\", new Instant(1300L), new Instant(10004L)),\n+            timerInGlobalWindow(\"A\", \"processing-timer1\", new Instant(1400L), new Instant(10014L)),\n+            timerInGlobalWindow(\"B\", \"processing-timer1\", new Instant(1500L), new Instant(10014L)),\n+            timerInGlobalWindow(\"A\", \"processing-timer1\", new Instant(1600L), new Instant(10014L)),\n+            timerInGlobalWindow(\"X\", \"processing-timer1\", new Instant(1700L), new Instant(10024L)),\n+            timerInGlobalWindow(\"C\", \"processing-timer1\", new Instant(1800L), new Instant(10024L)),\n+            timerInGlobalWindow(\"B\", \"processing-timer1\", new Instant(1900L), new Instant(10024L)),\n+            timerInGlobalWindow(\"B\", \"processing-timer1\", new Instant(2000L), new Instant(10034L)),\n+            timerInGlobalWindow(\n+                \"Y\", \"processing-timer1\", new Instant(2100L), new Instant(10044L))));\n     mainOutputValues.clear();\n \n     assertFalse(fakeTimerClient.isOutboundClosed(eventTimer));\n     assertFalse(fakeTimerClient.isOutboundClosed(processingTimer));\n+    assertFalse(fakeTimerClient.isOutboundClosed(eventFamilyTimer));\n+    assertFalse(fakeTimerClient.isOutboundClosed(processingFamilyTimer));\n     fakeTimerClient.closeInbound(eventTimer);\n     fakeTimerClient.closeInbound(processingTimer);\n+    fakeTimerClient.closeInbound(eventFamilyTimer);\n+    fakeTimerClient.closeInbound(processingFamilyTimer);\n \n     Iterables.getOnlyElement(finishFunctionRegistry.getFunctions()).run();\n     assertThat(mainOutputValues, empty());\n \n     assertTrue(fakeTimerClient.isOutboundClosed(eventTimer));\n     assertTrue(fakeTimerClient.isOutboundClosed(processingTimer));\n+    assertTrue(fakeTimerClient.isOutboundClosed(eventFamilyTimer));\n+    assertTrue(fakeTimerClient.isOutboundClosed(processingFamilyTimer));\n \n     Iterables.getOnlyElement(teardownFunctions).run();\n     assertThat(mainOutputValues, empty());\n \n     assertEquals(\n         ImmutableMap.<StateKey, ByteString>builder()\n             .put(bagUserStateKey(\"bag\", \"X\"), encode(\"X0\", \"X1\", \"X2\", \"processing\"))\n-            .put(bagUserStateKey(\"bag\", \"Y\"), encode(\"Y1\", \"Y2\"))\n+            .put(bagUserStateKey(\"bag\", \"Y\"), encode(\"Y1\", \"Y2\", \"processing-family\"))\n             .put(bagUserStateKey(\"bag\", \"A\"), encode(\"A0\", \"event\", \"event\"))\n-            .put(bagUserStateKey(\"bag\", \"B\"), encode(\"event\", \"processing\"))\n+            .put(bagUserStateKey(\"bag\", \"B\"), encode(\"event\", \"processing\", \"event-family\"))\n             .put(bagUserStateKey(\"bag\", \"C\"), encode(\"C0\", \"processing\"))\n             .build(),\n         fakeStateClient.getData());\n   }\n \n+  private <K> org.apache.beam.runners.core.construction.Timer<K> timerInGlobalWindow(\n+      K userKey, Instant holdTimestamp, Instant fireTimestamp) {\n+    return timerInGlobalWindow(userKey, \"\", holdTimestamp, fireTimestamp);\n+  }\n+\n   private <T> WindowedValue<T> valueInWindow(T value, BoundedWindow window) {\n     return WindowedValue.of(value, window.maxTimestamp(), window, PaneInfo.NO_FIRING);\n   }\n \n   private <K> org.apache.beam.runners.core.construction.Timer<K> timerInGlobalWindow(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583991565db7b684957c9a97a0ed6bb09593c01f"}, "originalPosition": 196}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3dfa30f7b6d1ac1ad693e98b29d09cc0586d6de", "author": {"user": {"login": "y1chi", "name": "Yichi Zhang"}}, "url": "https://github.com/apache/beam/commit/d3dfa30f7b6d1ac1ad693e98b29d09cc0586d6de", "committedDate": "2020-05-21T16:05:24Z", "message": "comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4719, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}