{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTY3NDA2", "number": 11350, "title": "[BEAM-1589] Added @OnWindowExpiration annotation.", "bodyText": "Added @onWindowExpiration annotation for annotating a user defined method (similar to a method annotated with @ontimer), which allows user to do some work before garbage collection. For example, users can use this annotation to write a method that extracts a value saved in a state before garbage collection.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-08T16:57:25Z", "url": "https://github.com/apache/beam/pull/11350", "merged": true, "mergeCommit": {"oid": "03d99dfa359f44a29a772fcc8ec8b0a237cab113"}, "closed": true, "closedAt": "2020-05-19T17:51:09Z", "author": {"login": "rehmanmuradali"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTnHWRAH2gAyNDAwOTY3NDA2OjNlMTNiMzhlZjgzYjBhOWRhNGUxOTBjYmNjNzk1NjA1YzhmNGYxOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcift7mAH2gAyNDAwOTY3NDA2OmQ2MmE4Y2RiN2NiYmRlOTBhMTE0MmY2ZmU1MGUxMWRmOTYzMDMyMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3e13b38ef83b0a9da4e190cbcc795605c8f4f18a", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/3e13b38ef83b0a9da4e190cbcc795605c8f4f18a", "committedDate": "2020-04-02T07:24:58Z", "message": "OnWindowExpiration in progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8ae1c4a05b0bc9d80f636e0e62b44e07465674b", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/f8ae1c4a05b0bc9d80f636e0e62b44e07465674b", "committedDate": "2020-04-07T14:02:00Z", "message": "Adding ONWindowExpiration in DoFnRunner, Adding a test case in ParDoTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b87cd52d5d67a0911190007bb8c70ba500bb3487", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/b87cd52d5d67a0911190007bb8c70ba500bb3487", "committedDate": "2020-04-08T14:07:21Z", "message": "Updating Test case with OutputReceiver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c8c37b0b8367bf252fd0d6145bd00c52bea0b4a", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/4c8c37b0b8367bf252fd0d6145bd00c52bea0b4a", "committedDate": "2020-04-08T14:46:35Z", "message": "Merge branch 'master' into feature/BEAM-1589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e0fe0b169c333fd28a7f1574699064f930b192", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/74e0fe0b169c333fd28a7f1574699064f930b192", "committedDate": "2020-04-09T11:11:09Z", "message": "OnWindowExpiration late data drop fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd3711a4480b493c897eb72cfeb896b1e29f23dc", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/cd3711a4480b493c897eb72cfeb896b1e29f23dc", "committedDate": "2020-04-09T17:02:08Z", "message": "Support in DataFlow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTY4Njc2", "url": "https://github.com/apache/beam/pull/11350#pullrequestreview-391168676", "createdAt": "2020-04-09T22:17:57Z", "commit": {"oid": "cd3711a4480b493c897eb72cfeb896b1e29f23dc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoxNzo1OFrOGDrTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoyMzo1NlrOGDrb-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwODQ3OQ==", "bodyText": "What do timestamp and timeDomain mean in this context?\nAlso presumably you do want to be able to access the key in onWindowExpiration", "url": "https://github.com/apache/beam/pull/11350#discussion_r406508479", "createdAt": "2020-04-09T22:17:58Z", "author": {"login": "reuvenlax"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java", "diffHunk": "@@ -52,6 +52,12 @@ void onTimer(\n    */\n   void finishBundle();\n \n+  /**\n+   * Calls a {@link DoFn DoFn's} {@link DoFn.OnWindowExpiration @OnWindowExpiration} method and\n+   * performs additional task, such as extracts a value saved in a state before garbage collection.\n+   */\n+  void onWindowExpiration(BoundedWindow window, Instant timestamp, TimeDomain timeDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd3711a4480b493c897eb72cfeb896b1e29f23dc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwODU4NQ==", "bodyText": "Why is this based on OnTimerContext?", "url": "https://github.com/apache/beam/pull/11350#discussion_r406508585", "createdAt": "2020-04-09T22:18:21Z", "author": {"login": "reuvenlax"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java", "diffHunk": "@@ -841,6 +847,238 @@ public BundleFinalizer bundleFinalizer() {\n     }\n   }\n \n+  /**\n+   * A concrete implementation of {@link DoFnInvoker.ArgumentProvider} used for running a {@link\n+   * DoFn} on window expiration.\n+   */\n+  private class OnWindowExpirationArgumentProvider extends DoFn<InputT, OutputT>.OnTimerContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd3711a4480b493c897eb72cfeb896b1e29f23dc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMDU4NQ==", "bodyText": "We also seem to set GC timers in ReduceFnRunner.java. @kennknowles do you know why we have both?", "url": "https://github.com/apache/beam/pull/11350#discussion_r406510585", "createdAt": "2020-04-09T22:23:56Z", "author": {"login": "reuvenlax"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -591,7 +591,7 @@ public void flushState() {\n               timerId,\n               \"\",\n               cleanupTime,\n-              cleanupTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd3711a4480b493c897eb72cfeb896b1e29f23dc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de6440c1123d31f479ecfb5db0776253d45780d8", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/de6440c1123d31f479ecfb5db0776253d45780d8", "committedDate": "2020-04-10T11:36:34Z", "message": "Merge remote-tracking branch 'origin/master' into feature/BEAM-1589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377cd514c1e8393dc09a9dbf43a1f391f269793f", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/377cd514c1e8393dc09a9dbf43a1f391f269793f", "committedDate": "2020-04-10T16:19:27Z", "message": "OnWindowExpirationContextParameter added"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTQ0ODc5", "url": "https://github.com/apache/beam/pull/11350#pullrequestreview-392144879", "createdAt": "2020-04-13T13:31:36Z", "commit": {"oid": "377cd514c1e8393dc09a9dbf43a1f391f269793f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozMTozNlrOGEmjog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozMTozNlrOGEmjog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3OTIwMg==", "bodyText": "this should be window.maxTimestamp() + allowedLateness I think?  cleanupTime here is passed in as maxTimestamp + allowedLateness + 1ms", "url": "https://github.com/apache/beam/pull/11350#discussion_r407479202", "createdAt": "2020-04-13T13:31:36Z", "author": {"login": "steveniemitz"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -591,7 +591,7 @@ public void flushState() {\n               timerId,\n               \"\",\n               cleanupTime,\n-              cleanupTime,\n+              window.maxTimestamp(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "377cd514c1e8393dc09a9dbf43a1f391f269793f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fa7031e175de5b90fda69797deb17a833852215", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/5fa7031e175de5b90fda69797deb17a833852215", "committedDate": "2020-04-16T09:08:36Z", "message": "Merge branch 'master' into feature/BEAM-1589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fe8a4b4b4b940e344d6b7f6e553f354b90dafb2", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/1fe8a4b4b4b940e344d6b7f6e553f354b90dafb2", "committedDate": "2020-04-16T12:20:00Z", "message": "Update Test Case, Dataflow Support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b9f2f20a41010580318293d985499626a830ab8", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/0b9f2f20a41010580318293d985499626a830ab8", "committedDate": "2020-04-16T14:28:31Z", "message": "Added UsesOnWindowExpiration Category"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "740fafbbd6935633ea5c550ed58dd0c1a73f6ec9", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/740fafbbd6935633ea5c550ed58dd0c1a73f6ec9", "committedDate": "2020-04-20T09:02:10Z", "message": "Merge branch 'master' into feature/BEAM-1589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eb5d2e9ec4ab8a91049acfb36be683ed6a03144", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/5eb5d2e9ec4ab8a91049acfb36be683ed6a03144", "committedDate": "2020-04-20T13:54:13Z", "message": "Excluding OnWindow Category, Reverting WatermarkHold"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0380fb41fc493d2f343cd6bfb39a6388851de317", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/0380fb41fc493d2f343cd6bfb39a6388851de317", "committedDate": "2020-04-28T09:26:51Z", "message": "Merge branch 'master' into feature/BEAM-1589\n\n# Conflicts:\n#\tsdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "352d02d80796d80adec100079a377583ddcc6f06", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/352d02d80796d80adec100079a377583ddcc6f06", "committedDate": "2020-04-28T15:20:14Z", "message": "Adding Key in OnWindowExpiration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6342bbeca0920c2849b5747b7c746b0bb2380f2f", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/6342bbeca0920c2849b5747b7c746b0bb2380f2f", "committedDate": "2020-05-04T14:30:36Z", "message": "Data flow support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaca948d28dc5cfee506db999b5377adc5789333", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/eaca948d28dc5cfee506db999b5377adc5789333", "committedDate": "2020-05-05T10:00:24Z", "message": "UserParDoFnFactoryTest testCleanupWorks fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTc1NDY0", "url": "https://github.com/apache/beam/pull/11350#pullrequestreview-406175464", "createdAt": "2020-05-05T21:40:25Z", "commit": {"oid": "6342bbeca0920c2849b5747b7c746b0bb2380f2f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo0MDoyNVrOGQ8mlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo0NDowOFrOGQ8tNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyMzMxNg==", "bodyText": "Wondering if we need to expose timers here, as I don't see how it makes sense to create a new timer in an expired window.", "url": "https://github.com/apache/beam/pull/11350#discussion_r420423316", "createdAt": "2020-05-05T21:40:25Z", "author": {"login": "reuvenlax"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java", "diffHunk": "@@ -857,6 +863,223 @@ public BundleFinalizer bundleFinalizer() {\n     }\n   }\n \n+  /**\n+   * A concrete implementation of {@link DoFnInvoker.ArgumentProvider} used for running a {@link\n+   * DoFn} on window expiration.\n+   */\n+  private class OnWindowExpirationArgumentProvider<KeyT>\n+      extends DoFn<InputT, OutputT>.OnWindowExpirationContext\n+      implements DoFnInvoker.ArgumentProvider<InputT, OutputT> {\n+    private final BoundedWindow window;\n+    private final Instant timestamp;\n+    private final KeyT key;\n+    /** Lazily initialized; should only be accessed via {@link #getNamespace()}. */\n+    private @Nullable StateNamespace namespace;\n+\n+    /**\n+     * The state namespace for this context.\n+     *\n+     * <p>Any call to this method when more than one window is present will crash; this represents a\n+     * bug in the runner or the {@link DoFnSignature}, since values must be in exactly one window\n+     * when state or timers are relevant.\n+     */\n+    private StateNamespace getNamespace() {\n+      if (namespace == null) {\n+        namespace = StateNamespaces.window(windowCoder, window);\n+      }\n+      return namespace;\n+    }\n+\n+    private OnWindowExpirationArgumentProvider(BoundedWindow window, Instant timestamp, KeyT key) {\n+      fn.super();\n+      this.window = window;\n+      this.timestamp = timestamp;\n+      this.key = key;\n+    }\n+\n+    @Override\n+    public BoundedWindow window() {\n+      return window;\n+    }\n+\n+    @Override\n+    public PaneInfo paneInfo(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\n+          \"Cannot access paneInfo outside of @ProcessElement methods.\");\n+    }\n+\n+    @Override\n+    public PipelineOptions pipelineOptions() {\n+      return getPipelineOptions();\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.StartBundleContext startBundleContext(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"StartBundleContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.FinishBundleContext finishBundleContext(\n+        DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"FinishBundleContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.ProcessContext processContext(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"ProcessContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public InputT element(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"Element parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Object sideInput(String tagId) {\n+      throw new UnsupportedOperationException(\"SideInput parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Object schemaElement(int index) {\n+      throw new UnsupportedOperationException(\"Element parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n+      return timestamp;\n+    }\n+\n+    @Override\n+    public String timerId(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"Timer parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public TimeDomain timeDomain(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\n+          \"Cannot access time domain outside of @ProcessTimer method.\");\n+    }\n+\n+    @Override\n+    public KeyT key() {\n+      return key;\n+    }\n+\n+    @Override\n+    public OutputReceiver<OutputT> outputReceiver(DoFn<InputT, OutputT> doFn) {\n+      return DoFnOutputReceivers.windowedReceiver(this, mainOutputTag);\n+    }\n+\n+    @Override\n+    public OutputReceiver<Row> outputRowReceiver(DoFn<InputT, OutputT> doFn) {\n+      return DoFnOutputReceivers.rowReceiver(this, mainOutputTag, mainOutputSchemaCoder);\n+    }\n+\n+    @Override\n+    public MultiOutputReceiver taggedOutputReceiver(DoFn<InputT, OutputT> doFn) {\n+      return DoFnOutputReceivers.windowedMultiReceiver(this, outputCoders);\n+    }\n+\n+    @Override\n+    public Object restriction() {\n+      throw new UnsupportedOperationException(\"@Restriction parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.OnTimerContext onTimerContext(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"OnTimerContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public RestrictionTracker<?, ?> restrictionTracker() {\n+      throw new UnsupportedOperationException(\"RestrictionTracker parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Object watermarkEstimatorState() {\n+      throw new UnsupportedOperationException(\n+          \"@WatermarkEstimatorState parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public WatermarkEstimator<?> watermarkEstimator() {\n+      throw new UnsupportedOperationException(\"WatermarkEstimator parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public State state(String stateId, boolean alwaysFetched) {\n+      try {\n+        StateSpec<?> spec =\n+            (StateSpec<?>) signature.stateDeclarations().get(stateId).field().get(fn);\n+        State state =\n+            stepContext\n+                .stateInternals()\n+                .state(getNamespace(), StateTags.tagForSpec(stateId, (StateSpec) spec));\n+        if (alwaysFetched) {\n+          return (State) ((ReadableState) state).readLater();\n+        } else {\n+          return state;\n+        }\n+      } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    @Override\n+    public Timer timer(String timerId) {\n+      try {\n+        TimerSpec spec = (TimerSpec) signature.timerDeclarations().get(timerId).field().get(fn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6342bbeca0920c2849b5747b7c746b0bb2380f2f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNDEzMQ==", "bodyText": "why did you subtract 1 here?", "url": "https://github.com/apache/beam/pull/11350#discussion_r420424131", "createdAt": "2020-05-05T21:42:06Z", "author": {"login": "reuvenlax"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -387,7 +387,8 @@ private void processSystemTimer(TimerData timer) throws Exception {\n           timer);\n \n       BoundedWindow window = ((WindowNamespace) timer.getNamespace()).getWindow();\n-      Instant targetTime = earliestAllowableCleanupTime(window, fnInfo.getWindowingStrategy());\n+      Instant targetTime =\n+          earliestAllowableCleanupTime(window, fnInfo.getWindowingStrategy()).minus(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6342bbeca0920c2849b5747b7c746b0bb2380f2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNTAxMg==", "bodyText": "I think this change is incorrect. Why was it necessary?", "url": "https://github.com/apache/beam/pull/11350#discussion_r420425012", "createdAt": "2020-05-05T21:44:08Z", "author": {"login": "reuvenlax"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillTimerInternals.java", "diffHunk": "@@ -246,8 +246,8 @@ public static boolean isUserTimer(Windmill.Timer timer) {\n       builder.setStateFamily(stateFamily);\n     }\n \n-    builder.setTimestamp(WindmillTimeUtils.harnessToWindmillTimestamp(timerData.getTimestamp()));\n-\n+    builder.setTimestamp(\n+        WindmillTimeUtils.harnessToWindmillTimestamp(timerData.getOutputTimestamp()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaca948d28dc5cfee506db999b5377adc5789333"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3f3222b2d077e6253fd11b18e989431435569ee", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/f3f3222b2d077e6253fd11b18e989431435569ee", "committedDate": "2020-05-06T16:47:38Z", "message": "Removing timer functionality in OnWindowExpiration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda33fa7cc37ed80acc0ae6e722b873d52646853", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/cda33fa7cc37ed80acc0ae6e722b873d52646853", "committedDate": "2020-05-11T17:23:00Z", "message": "Updating hold criteria"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzgyODQw", "url": "https://github.com/apache/beam/pull/11350#pullrequestreview-409382840", "createdAt": "2020-05-11T17:32:49Z", "commit": {"oid": "cda33fa7cc37ed80acc0ae6e722b873d52646853"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozMjo0OVrOGTmVCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozMjo0OVrOGTmVCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDEwNQ==", "bodyText": "@reuvenlax, Can you guide why we are not considering outputTimestamp in WindmillTimerInternals.windmillTimerToTimerData. TimerData is created as follows:\nTimerData.of(id, familyId, namespace, timestamp, timerTypeToTimeDomain(timer.getType()));\nI think this is where we lost outputTimestamp.", "url": "https://github.com/apache/beam/pull/11350#discussion_r423204105", "createdAt": "2020-05-11T17:32:49Z", "author": {"login": "rehmanmuradali"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -397,6 +397,9 @@ private void processSystemTimer(TimerData timer) throws Exception {\n           window,\n           targetTime);\n \n+      fnRunner.onWindowExpiration(\n+          window, timer.getOutputTimestamp(), this.stepContext.stateInternals().getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda33fa7cc37ed80acc0ae6e722b873d52646853"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32e5a3dc5f9f40f5d510ebd384fe43d382ca9297", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/32e5a3dc5f9f40f5d510ebd384fe43d382ca9297", "committedDate": "2020-05-13T14:18:24Z", "message": "Add support in Batch Mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4721f62975fcd9ab57517be1f79cd60e07299bd1", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/4721f62975fcd9ab57517be1f79cd60e07299bd1", "committedDate": "2020-05-13T14:25:21Z", "message": "Merge branch 'master' into feature/BEAM-1589\n\n# Conflicts:\n#\trunners/spark/build.gradle\n#\trunners/spark/job-server/build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50fee3af6b576f92f99fae0309670ff3cf14bbe8", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/50fee3af6b576f92f99fae0309670ff3cf14bbe8", "committedDate": "2020-05-13T14:58:14Z", "message": "Reverting gc holds in ReduceFnRunner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e70d2cf3c3fb254b9bc40c5ae31faa639dec4b", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/e4e70d2cf3c3fb254b9bc40c5ae31faa639dec4b", "committedDate": "2020-05-16T10:05:23Z", "message": "Merge branch 'master' into feature/BEAM-1589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d", "committedDate": "2020-05-17T10:41:23Z", "message": "Deletion of System Timer + Test updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzI1OTQ3", "url": "https://github.com/apache/beam/pull/11350#pullrequestreview-413325947", "createdAt": "2020-05-18T07:15:53Z", "commit": {"oid": "bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzoxNTo1M1rOGWqNGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzoyMjowM1rOGWqYMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzMzOA==", "bodyText": "I want to avoid the performance regression of setting a watermark hold if not needed.  Make the outputTimestamp be a parameter to this function, and pass it in only if the DoFn has an onWindowExpiration (SimpleParDoFn has the DoFnSignature so you should be able to tell there).", "url": "https://github.com/apache/beam/pull/11350#discussion_r426413338", "createdAt": "2020-05-18T07:15:53Z", "author": {"login": "reuvenlax"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -591,7 +595,7 @@ public void flushState() {\n               timerId,\n               \"\",\n               cleanupTime,\n-              cleanupTime,\n+              cleanupTime.minus(1L),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjE3Nw==", "bodyText": "I think we should only do this if there is a hold to delete.", "url": "https://github.com/apache/beam/pull/11350#discussion_r426416177", "createdAt": "2020-05-18T07:22:03Z", "author": {"login": "reuvenlax"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -552,7 +552,11 @@ public void flushState() {\n       if (!cachedFiredTimers.hasNext()) {\n         return null;\n       }\n-      return cachedFiredTimers.next();\n+      TimerData nextTimer = cachedFiredTimers.next();\n+      // system timers ( GC timer) must be explicitly deleted when delivered, to release the implied\n+      // hold.\n+      systemTimerInternals.deleteTimer(nextTimer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d62a8cdb7cbbde90a1142f6fe50e11df96303239", "author": {"user": {"login": "rehmanmuradali", "name": "Rehman Murad Ali"}}, "url": "https://github.com/apache/beam/commit/d62a8cdb7cbbde90a1142f6fe50e11df96303239", "committedDate": "2020-05-18T13:16:44Z", "message": "Setting and deleting hold if OnWindowExpiration is present"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}