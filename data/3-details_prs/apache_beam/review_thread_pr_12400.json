{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTAyOTI5", "number": 12400, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo1NTowMFrOETCvZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0MDowNFrOEVJGGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDAzMzAwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo1NTowMFrOG4jv4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoyOTozMFrOG5CvXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTEzOQ==", "bodyText": "Nit: spelling/grammar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add\n          \n          \n            \n                      // to Calc nodes before merging with other Project/Filter/Calc nodes. Thus we should not add", "url": "https://github.com/apache/beam/pull/12400#discussion_r461959139", "createdAt": "2020-07-28T23:55:00Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,13 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NjkwOA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12400#discussion_r462466908", "createdAt": "2020-07-29T17:29:30Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,13 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTEzOQ=="}, "originalCommit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzIyODc5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxMToyM1rOG5CETA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoyOToyMFrOG5CvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NTg4NA==", "bodyText": "It'd be helpful to specifically mention CalcMergeRule here.", "url": "https://github.com/apache/beam/pull/12400#discussion_r462455884", "createdAt": "2020-07-29T17:11:23Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,13 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NjgxOA==", "bodyText": "Tried to add something about CalcMergeRule", "url": "https://github.com/apache/beam/pull/12400#discussion_r462466818", "createdAt": "2020-07-29T17:29:20Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,13 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NTg4NA=="}, "originalCommit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA0NTY5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0MDowNFrOG7u2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0MDowNFrOG7u2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Njc0MQ==", "bodyText": "Shouldn't we just disable these rules all together (in BeamRuleSets.java) if they are redundant instead of special casing them for ZetaSQL?", "url": "https://github.com/apache/beam/pull/12400#discussion_r465286741", "createdAt": "2020-08-04T19:40:04Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,14 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to Calc nodes before merging with other Project/Filter/Calc nodes. Thus we should not\n+          // add FilterCalcMergeRule and ProjectCalcMergeRule. CalcMergeRule will achieve equivalent\n+          // planning result eventually.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebcf25bd0d6dd9698353656528e176ae7029f3ae"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 984, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}