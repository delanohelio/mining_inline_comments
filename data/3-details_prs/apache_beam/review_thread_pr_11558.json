{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjY2NTE2", "number": 11558, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDozNTozOVrOD5kaEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoyMToyNVrOD6Ps1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjkxOTIxOnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_LoadTests_ParDo_Flink_Python.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDozNTozOVrOGQ6i_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowODo1NVrOGRafNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4OTYyOA==", "bodyText": "Why multiple trigger phrases?", "url": "https://github.com/apache/beam/pull/11558#discussion_r420389628", "createdAt": "2020-05-05T20:35:39Z", "author": {"login": "tweise"}, "path": ".test-infra/jenkins/job_LoadTests_ParDo_Flink_Python.groovy", "diffHunk": "@@ -142,9 +249,22 @@ PhraseTriggeringPostCommitBuilder.postCommitJob(\n   'Load Tests Python ParDo Flink Batch suite',\n   this\n ) {\n-  loadTest(delegate, CommonTestProperties.TriggeringContext.PR)\n+  loadBatchTests(delegate, CommonTestProperties.TriggeringContext.PR)\n+}\n+\n+PhraseTriggeringPostCommitBuilder.postCommitJob(\n+    'beam_LoadTests_Python_ParDo_Flink_Streaming',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1MzE2Ng==", "bodyText": "There is one for batch and one for streaming. I think that makes sense, a lot of times we want to see the impact on either of those.\nIf you are referring to the args, this is the signature of the postCommitjob:\n  static void postCommitJob(nameBase,\n                            triggerPhrase,\n                            githubUiHint,\n                            scope,\n                            jobDefinition = {}) {", "url": "https://github.com/apache/beam/pull/11558#discussion_r420653166", "createdAt": "2020-05-06T09:20:00Z", "author": {"login": "mxm"}, "path": ".test-infra/jenkins/job_LoadTests_ParDo_Flink_Python.groovy", "diffHunk": "@@ -142,9 +249,22 @@ PhraseTriggeringPostCommitBuilder.postCommitJob(\n   'Load Tests Python ParDo Flink Batch suite',\n   this\n ) {\n-  loadTest(delegate, CommonTestProperties.TriggeringContext.PR)\n+  loadBatchTests(delegate, CommonTestProperties.TriggeringContext.PR)\n+}\n+\n+PhraseTriggeringPostCommitBuilder.postCommitJob(\n+    'beam_LoadTests_Python_ParDo_Flink_Streaming',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4OTYyOA=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMjk1MQ==", "bodyText": "Makes sense; misunderstanding on my part.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420912951", "createdAt": "2020-05-06T16:08:55Z", "author": {"login": "tweise"}, "path": ".test-infra/jenkins/job_LoadTests_ParDo_Flink_Python.groovy", "diffHunk": "@@ -142,9 +249,22 @@ PhraseTriggeringPostCommitBuilder.postCommitJob(\n   'Load Tests Python ParDo Flink Batch suite',\n   this\n ) {\n-  loadTest(delegate, CommonTestProperties.TriggeringContext.PR)\n+  loadBatchTests(delegate, CommonTestProperties.TriggeringContext.PR)\n+}\n+\n+PhraseTriggeringPostCommitBuilder.postCommitJob(\n+    'beam_LoadTests_Python_ParDo_Flink_Streaming',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4OTYyOA=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjkyNDk5OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDozNzozNlrOGQ6mxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDozNzozNlrOGQ6mxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MDU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      + \"shut down, chekpointing is not possible anymore. Shutting down the sources eventually leads to pipeline \"\n          \n          \n            \n                      + \"shut down, checkpointing is not possible anymore. Shutting down the sources eventually leads to pipeline \"", "url": "https://github.com/apache/beam/pull/11558#discussion_r420390597", "createdAt": "2020-05-05T20:37:36Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {\n+\n+  @Description(\n+      \"If not null, reports the checkpoint duration of each ParDo stage in the provided metric namespace.\")\n+  String getReportCheckpointDuration();\n+\n+  void setReportCheckpointDuration(String metricNamespace);\n+\n+  @Description(\n+      \"Shuts down sources which have been idle for the configured time of milliseconds. Once a source has been \"\n+          + \"shut down, chekpointing is not possible anymore. Shutting down the sources eventually leads to pipeline \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjk3MjY0OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo1MTowNFrOGQ7D8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo0ODoxNVrOGRZkNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5ODA2Nw==", "bodyText": "Unless I misread, this parameter is directly tied to !shutdownSourcesOnFinalWatermark? How about consolidating the two? Just a single parameter shutdownSourcesAfterIdleMs should suffice:\n0 - immediate shutdown, which should be default, unless checkpointing is enabled\nvalue > 0 - wait, potentially forever\nThere was a question on the ML recently about shutdownSourcesOnFinalWatermark and if that should not be default. I think it should be (unless checkpointing was enabled), in which case we can never shutdown. So there should be almost no situation where this parameter needs to be set, except in a special case like this.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420398067", "createdAt": "2020-05-05T20:51:04Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {\n+\n+  @Description(\n+      \"If not null, reports the checkpoint duration of each ParDo stage in the provided metric namespace.\")\n+  String getReportCheckpointDuration();\n+\n+  void setReportCheckpointDuration(String metricNamespace);\n+\n+  @Description(\n+      \"Shuts down sources which have been idle for the configured time of milliseconds. Once a source has been \"\n+          + \"shut down, chekpointing is not possible anymore. Shutting down the sources eventually leads to pipeline \"\n+          + \"shutdown once all input has been processed.\")\n+  @Default.Long(0)\n+  Long getShutdownSourcesAfterIdleMs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1MzI2OA==", "bodyText": "That's a good suggestion. I think we can consolidate the two. The drawback is that we would break the existing parameter but if we also change the default that wouldn't be a problem.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420653268", "createdAt": "2020-05-06T09:20:13Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {\n+\n+  @Description(\n+      \"If not null, reports the checkpoint duration of each ParDo stage in the provided metric namespace.\")\n+  String getReportCheckpointDuration();\n+\n+  void setReportCheckpointDuration(String metricNamespace);\n+\n+  @Description(\n+      \"Shuts down sources which have been idle for the configured time of milliseconds. Once a source has been \"\n+          + \"shut down, chekpointing is not possible anymore. Shutting down the sources eventually leads to pipeline \"\n+          + \"shutdown once all input has been processed.\")\n+  @Default.Long(0)\n+  Long getShutdownSourcesAfterIdleMs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5ODA2Nw=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5Nzg0NQ==", "bodyText": "PTAL @tweise I've unified the flags and made it auto-set the flag when checkpointing is enabled.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420897845", "createdAt": "2020-05-06T15:48:15Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {\n+\n+  @Description(\n+      \"If not null, reports the checkpoint duration of each ParDo stage in the provided metric namespace.\")\n+  String getReportCheckpointDuration();\n+\n+  void setReportCheckpointDuration(String metricNamespace);\n+\n+  @Description(\n+      \"Shuts down sources which have been idle for the configured time of milliseconds. Once a source has been \"\n+          + \"shut down, chekpointing is not possible anymore. Shutting down the sources eventually leads to pipeline \"\n+          + \"shutdown once all input has been processed.\")\n+  @Default.Long(0)\n+  Long getShutdownSourcesAfterIdleMs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5ODA2Nw=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjk3ODc3OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo1Mjo1N1rOGQ7H5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0MDozOVrOGRbymA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5OTA3OQ==", "bodyText": "Not sure I like the idea of having these as a separate interface that FlinkPipelineOptions extends (!).", "url": "https://github.com/apache/beam/pull/11558#discussion_r420399079", "createdAt": "2020-05-05T20:52:57Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1MzQyNQ==", "bodyText": "That's how pipeline options work in Beam. Take a look at what else FlinkPipelineOptions extends.\nAt first, I used a separate interface but having multiple interfaces and casting between them (via .as(...)) is not nice either and we need to be careful not to pass the wrong interface.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420653425", "createdAt": "2020-05-06T09:20:30Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5OTA3OQ=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNDA4Mw==", "bodyText": "Agreed. I would prefer we keep all the Flink options in a single interface though. The lone option here strictly isn't a \"debug option\" anyways.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420914083", "createdAt": "2020-05-06T16:10:35Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5OTA3OQ=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNDI5Ng==", "bodyText": "Ok, I suppose we can move the option to FlinkPipelineOptions.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420934296", "createdAt": "2020-05-06T16:40:39Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkDebugPipelineOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+\n+/** Debug options which shouldn't normally be used. */\n+public interface FlinkDebugPipelineOptions extends PipelineOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5OTA3OQ=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjk5NjM0OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo1Nzo0OVrOGQ7Svw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjozODozNVrOGRbs9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMTg1NQ==", "bodyText": "Wouldn't it be sufficient to rely on Flink 's task-level checkpoint metrics for this?", "url": "https://github.com/apache/beam/pull/11558#discussion_r420401855", "createdAt": "2020-05-05T20:57:49Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -455,6 +461,18 @@ public void open() throws Exception {\n     if (!options.getDisableMetrics()) {\n       flinkMetricContainer = new FlinkMetricContainer(getRuntimeContext());\n       doFnRunner = new DoFnRunnerWithMetricsUpdate<>(stepName, doFnRunner, flinkMetricContainer);\n+      String checkpointMetricNamespace =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NTMyNA==", "bodyText": "I thought about that. The checkpointing metrics are kept at the JobManager. They are not accessible by the operator. So in order not to change the logic of the load tests which relies on the metrics accumulated during the job, returned in the PipelineResult, I opted to go this route.\nI think we may have to change the Beam service to allow querying job metrics during job runtime. At the moment, we can only retrieve them at the end of the job.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420655324", "createdAt": "2020-05-06T09:23:58Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -455,6 +461,18 @@ public void open() throws Exception {\n     if (!options.getDisableMetrics()) {\n       flinkMetricContainer = new FlinkMetricContainer(getRuntimeContext());\n       doFnRunner = new DoFnRunnerWithMetricsUpdate<>(stepName, doFnRunner, flinkMetricContainer);\n+      String checkpointMetricNamespace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMTg1NQ=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNzAwOA==", "bodyText": "It would be good to expose/utilize the Flink metrics as part of the load test suite. This could, for example, be accomplished with a custom Flink metric reporter. It can be addressed as follow-up though.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420917008", "createdAt": "2020-05-06T16:15:01Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -455,6 +461,18 @@ public void open() throws Exception {\n     if (!options.getDisableMetrics()) {\n       flinkMetricContainer = new FlinkMetricContainer(getRuntimeContext());\n       doFnRunner = new DoFnRunnerWithMetricsUpdate<>(stepName, doFnRunner, flinkMetricContainer);\n+      String checkpointMetricNamespace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMTg1NQ=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMjg1NQ==", "bodyText": "Yes, I agree that we want this to be more generic. I didn't want to mention the Flink metric reporter but I think that would introduce another level of complexity. Not sure if that is the right tool for the job. I'd rather query metrics through the job server and the rest api.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420932855", "createdAt": "2020-05-06T16:38:35Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -455,6 +461,18 @@ public void open() throws Exception {\n     if (!options.getDisableMetrics()) {\n       flinkMetricContainer = new FlinkMetricContainer(getRuntimeContext());\n       doFnRunner = new DoFnRunnerWithMetricsUpdate<>(stepName, doFnRunner, flinkMetricContainer);\n+      String checkpointMetricNamespace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwMTg1NQ=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA2MDMwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/load_tests/pardo_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToxNzowOFrOGQ75sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToyNzowMVrOGRK3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTgyNw==", "bodyText": "Nice to see that it is finally possible to achieve this with timers! Should GenerateLoad be reusable?", "url": "https://github.com/apache/beam/pull/11558#discussion_r420411827", "createdAt": "2020-05-05T21:17:08Z", "author": {"login": "tweise"}, "path": "sdks/python/apache_beam/testing/load_tests/pardo_test.py", "diffHunk": "@@ -125,6 +155,70 @@ def process(self, element):\n         'Measure time: End' >> beam.ParDo(MeasureTime(self.metrics_namespace)))\n \n \n+class StatefulLoadGenerator(beam.PTransform):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NzA5Mg==", "bodyText": "Potentially, yes. The implementation should be changed to use SDF eventually but that is not properly supported yet for Python.", "url": "https://github.com/apache/beam/pull/11558#discussion_r420657092", "createdAt": "2020-05-06T09:27:01Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/testing/load_tests/pardo_test.py", "diffHunk": "@@ -125,6 +155,70 @@ def process(self, element):\n         'Measure time: End' >> beam.ParDo(MeasureTime(self.metrics_namespace)))\n \n \n+class StatefulLoadGenerator(beam.PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTgyNw=="}, "originalCommit": {"oid": "e9ddfd0aa3fbe4ec355b89f5e052f4c40fc88fed"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDI4ODQ4OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkPipelineOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoxMjowM1rOGRanYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoxMjowM1rOGRanYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxNTA0MQ==", "bodyText": "Add link to the Flink checkpointing issue here?", "url": "https://github.com/apache/beam/pull/11558#discussion_r420915041", "createdAt": "2020-05-06T16:12:03Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkPipelineOptions.java", "diffHunk": "@@ -126,6 +126,16 @@\n \n   void setFailOnCheckpointingErrors(Boolean failOnCheckpointingErrors);\n \n+  @Description(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef2934c373de2c094d288a569bea72579f0a603c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDAxMjM4OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/io/UnboundedSourceWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoyMToyNVrOGR-NWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoyMToyNVrOGR-NWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5ODIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** The idle time before we the source shuts down. */\n          \n          \n            \n              /** The idle time before the source shuts down. */", "url": "https://github.com/apache/beam/pull/11558#discussion_r421498202", "createdAt": "2020-05-07T13:21:25Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/io/UnboundedSourceWrapper.java", "diffHunk": "@@ -91,11 +91,8 @@\n    */\n   private final List<? extends UnboundedSource<OutputT, CheckpointMarkT>> splitSources;\n \n-  /**\n-   * Shuts down the source if the final watermark is read. Note: This prevents further checkpoints\n-   * of the streaming application.\n-   */\n-  private final boolean shutdownOnFinalWatermark;\n+  /** The idle time before we the source shuts down. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a35436df4180a54caed69ea459304b34c3d4884"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1188, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}