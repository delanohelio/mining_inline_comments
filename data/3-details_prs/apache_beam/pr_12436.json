{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMzc4NTI3", "number": 12436, "title": "[BEAM-9891] TPC-DS module initialization, tables and queries stored", "bodyText": "R: @amaliujia\nCC: @kennknowles\nInitialized tpcds module in sdks/java/testing.\nTable schemas and netezza queries are retrieved or generated from official tpc-ds tool and are stored in this module's resource directory. 1G and 10G data are stored in \"apache-beam-testing\" GCP project, at \"beamsql_tpcds_1/data\" bucket.\nCurrently, this module uses dataflow runner to run queries and write the result into \"apache-beam-testing\" project, result files can be found at \"beamsql_tpcds_1/tpcds_result/{%dataSize}/{%jobName}\". JobName is automatically set by combining query name and time stamp.\nTo test execution, set up \"apache-beam-testing\" project authentication and authorization, then run the following command from the command line:\n./gradlew :sdks:java:testing:tpcds:run -Ptpcds.args=\"--dataSize=1G \\\n--queries=3,26,55 \\\n--tpcParallel=2 \\\n--project=apache-beam-testing \\\n--stagingLocation=gs://beamsql_tpcds_1/staging \\\n--tempLocation=gs://beamsql_tpcds_2/temp \\\n--runner=DataflowRunner \\\n--region=us-west1 \\\n--maxNumWorkers=10\"\nThis means running query2, query26, query55 on 1G tpcds data set, at most 2 jobs can run in parallel.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-31T18:15:40Z", "url": "https://github.com/apache/beam/pull/12436", "merged": true, "mergeCommit": {"oid": "c2369bd815943241b37feab528c912d58c1bbc80"}, "closed": true, "closedAt": "2020-08-03T20:08:53Z", "author": {"login": "Imfuyuwei"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2Xn1RgH2gAyNDYwMzc4NTI3OjQ1MGRiZDI2Mjk4OWVlZDFmNTY5Y2Q5ZWQwYWM4N2JmY2Y3OTBiM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeMhJW1AFqTYzNDAyNjg2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "450dbd262989eed1f569cd9ed0ac87bfcf790b3d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/450dbd262989eed1f569cd9ed0ac87bfcf790b3d", "committedDate": "2020-07-19T07:09:19Z", "message": "Added initial tests for TPC-DS on both direct runner and dataflow runner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36bbc5b6adde7e48b32898490ea6c9acff64aa4", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f36bbc5b6adde7e48b32898490ea6c9acff64aa4", "committedDate": "2020-07-31T06:47:46Z", "message": "[BEAM-9891] TPC-DS module init, table schemas and queries stored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf", "author": {"user": {"login": "Imfuyuwei", "name": "Yuwei Fu"}}, "url": "https://github.com/apache/beam/commit/3d845264db21c422fff56dd4974aca2503952fbf", "committedDate": "2020-07-31T18:25:12Z", "message": "Merge branch 'master' into tpcds-dev"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzgxMTI3", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-459381127", "createdAt": "2020-07-31T18:35:59Z", "commit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODozNTo1OVrOG6SN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODozNTo1OVrOG6SN_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2OTA4Nw==", "bodyText": "let's avoid using the wildcard imports, you might run ./gradlew -p sdks/java/testing/tpcds/ check to have a checkstyle check : )", "url": "https://github.com/apache/beam/pull/12436#discussion_r463769087", "createdAt": "2020-07-31T18:35:59Z", "author": {"login": "vectorijk"}, "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/BeamTpcds.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.tpcds;\n+\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.extensions.sql.meta.provider.text.TextTableProvider;\n+import org.apache.beam.sdk.io.TextIO;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.beam.sdk.extensions.sql.meta.store.InMemoryMetaStore;\n+import org.apache.beam.sdk.extensions.sql.impl.BeamSqlEnv;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils;\n+import org.apache.beam.runners.dataflow.options.DataflowPipelineOptions;\n+import java.util.List;\n+import java.util.concurrent.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzgxNTYw", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-459381560", "createdAt": "2020-07-31T18:36:45Z", "commit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODozNjo0NVrOG6SPVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODozNjo0NVrOG6SPVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2OTQzMQ==", "bodyText": "ditto", "url": "https://github.com/apache/beam/pull/12436#discussion_r463769431", "createdAt": "2020-07-31T18:36:45Z", "author": {"login": "vectorijk"}, "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/QueryReader.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.tpcds;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzgzNTIz", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-459383523", "createdAt": "2020-07-31T18:40:11Z", "commit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0MDoxMVrOG6SVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0MDoxMVrOG6SVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MDkzOA==", "bodyText": "I guess we still want to keep this module?", "url": "https://github.com/apache/beam/pull/12436#discussion_r463770938", "createdAt": "2020-07-31T18:40:11Z", "author": {"login": "vectorijk"}, "path": "settings.gradle", "diffHunk": "@@ -177,5 +177,4 @@ include \"beam-test-infra-metrics\"\n project(\":beam-test-infra-metrics\").dir = file(\".test-infra/metrics\")\n include \"beam-test-tools\"\n project(\":beam-test-tools\").dir = file(\".test-infra/tools\")\n-include \"beam-test-jenkins\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Mzg0OTM0", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-459384934", "createdAt": "2020-07-31T18:42:45Z", "commit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0Mjo0NVrOG6SZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0Mjo0NVrOG6SZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MjAzMg==", "bodyText": "I think this version number is unused? correct me if i was wrong", "url": "https://github.com/apache/beam/pull/12436#discussion_r463772032", "createdAt": "2020-07-31T18:42:45Z", "author": {"login": "vectorijk"}, "path": "sdks/java/testing/tpcds/build.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+plugins {\n+    id 'java'\n+}\n+\n+description = \"Apache Beam :: SDKs :: Java :: TPC-DS Benchark\"\n+\n+version '2.24.0-SNAPSHOT'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d845264db21c422fff56dd4974aca2503952fbf"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebcaa29220f80d3a5c309b14ea90c80bb1705ddd", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ebcaa29220f80d3a5c309b14ea90c80bb1705ddd", "committedDate": "2020-07-31T19:19:11Z", "message": "Removed wildcard imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ba3acdcef9ad5b6898b18fd4ca8d9cba7a18231", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/3ba3acdcef9ad5b6898b18fd4ca8d9cba7a18231", "committedDate": "2020-07-31T19:25:24Z", "message": "Merge branch 'master' into tpcds-dev"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b395ab593a821f2af1777e96c899be83211afcc", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/8b395ab593a821f2af1777e96c899be83211afcc", "committedDate": "2020-07-31T19:36:56Z", "message": "Fixed settings.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjcxNDY4", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-459671468", "createdAt": "2020-08-02T19:07:34Z", "commit": {"oid": "8b395ab593a821f2af1777e96c899be83211afcc"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxOTowNzozNVrOG6nK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxOToxMDoxN1rOG6nMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMjM3Nw==", "bodyText": "Do you need to change sql module's gradle file? The benchmarking tool is built on top of SQL, so SQL is just a library, right?", "url": "https://github.com/apache/beam/pull/12436#discussion_r464112377", "createdAt": "2020-08-02T19:07:35Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/build.gradle", "diffHunk": "@@ -56,6 +56,7 @@ dependencies {\n   compile \"com.alibaba:fastjson:1.2.68\"\n   compile \"org.codehaus.janino:janino:3.0.11\"\n   compile \"org.codehaus.janino:commons-compiler:3.0.11\"\n+  compile project(path: \":runners:google-cloud-dataflow-java\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b395ab593a821f2af1777e96c899be83211afcc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMjQ1NQ==", "bodyText": "seems to me that this is not the place where you should handle \"\" to null conversion.", "url": "https://github.com/apache/beam/pull/12436#discussion_r464112455", "createdAt": "2020-08-02T19:08:28Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/schema/BeamTableUtils.java", "diffHunk": "@@ -149,13 +149,35 @@ public static Object autoCastField(Schema.Field field, Object rawObj) {\n         case INT16:\n           return Short.valueOf(raw);\n         case INT32:\n+          if (raw.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b395ab593a821f2af1777e96c899be83211afcc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMjQ5OA==", "bodyText": "remove useless comment.", "url": "https://github.com/apache/beam/pull/12436#discussion_r464112498", "createdAt": "2020-08-02T19:08:54Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/schema/BeamTableUtils.java", "diffHunk": "@@ -149,13 +149,35 @@ public static Object autoCastField(Schema.Field field, Object rawObj) {\n         case INT16:\n           return Short.valueOf(raw);\n         case INT32:\n+          if (raw.equals(\"\")) {\n+            return null;\n+          }\n           return Integer.valueOf(raw);\n         case INT64:\n+          if (raw.equals(\"\")) {\n+            return null;\n+          }\n           return Long.valueOf(raw);\n         case FLOAT:\n+          if (raw.equals(\"\")) {\n+            return null;\n+          }\n           return Float.valueOf(raw);\n         case DOUBLE:\n+          if (raw.equals(\"\")) {\n+            return null;\n+          }\n           return Double.valueOf(raw);\n+          //          BigDecimal bdvalue = new BigDecimal(raw);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b395ab593a821f2af1777e96c899be83211afcc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMjcxMw==", "bodyText": "Can you remove such gs://beamsql_tpcds_1/tpcds_results/ to some static pulic final String?", "url": "https://github.com/apache/beam/pull/12436#discussion_r464112713", "createdAt": "2020-08-02T19:10:17Z", "author": {"login": "amaliujia"}, "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/BeamTpcds.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.tpcds;\n+\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.extensions.sql.meta.provider.text.TextTableProvider;\n+import org.apache.beam.sdk.io.TextIO;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.beam.sdk.extensions.sql.meta.store.InMemoryMetaStore;\n+import org.apache.beam.sdk.extensions.sql.impl.BeamSqlEnv;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils;\n+import org.apache.beam.runners.dataflow.options.DataflowPipelineOptions;\n+import java.util.List;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorCompletionService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+\n+/**\n+ * To execute this main() method, run the following example command from the command line.\n+ *\n+ * ./gradlew :sdks:java:testing:tpcds:run -Ptpcds.args=\"--dataSize=1G \\\n+ *         --queries=3,26,55 \\\n+ *         --tpcParallel=2 \\\n+ *         --project=apache-beam-testing \\\n+ *         --stagingLocation=gs://beamsql_tpcds_1/staging \\\n+ *         --tempLocation=gs://beamsql_tpcds_2/temp \\\n+ *         --runner=DataflowRunner \\\n+ *         --region=us-west1 \\\n+ *         --maxNumWorkers=10\"\n+ */\n+public class BeamTpcds {\n+    public static void main(String[] args) throws Exception {\n+        InMemoryMetaStore inMemoryMetaStore = new InMemoryMetaStore();\n+        inMemoryMetaStore.registerProvider(new TextTableProvider());\n+\n+        TpcdsOptions tpcdsOptions = PipelineOptionsFactory.fromArgs(args).withValidation().as(TpcdsOptions.class);\n+\n+        String dataSize = TpcdsParametersReader.getAndCheckDataSize(tpcdsOptions);\n+        String[] queryNameArr = TpcdsParametersReader.getAndCheckQueryNameArray(tpcdsOptions);\n+        int nThreads = TpcdsParametersReader.getAndCheckTpcParallel(tpcdsOptions);\n+\n+        // Using ExecutorService and CompletionService to fulfill multi-threading functionality\n+        ExecutorService executor = Executors.newFixedThreadPool(nThreads);\n+        CompletionService<PipelineResult> completion = new ExecutorCompletionService<>(executor);\n+\n+        // After getting necessary parameters from tpcdsOptions, cast tpcdsOptions as a DataflowPipelineOptions object to read and set required parameters for pipeline execution.\n+        DataflowPipelineOptions dataflowPipelineOptions = tpcdsOptions.as(DataflowPipelineOptions.class);\n+\n+        BeamSqlEnv env =\n+                BeamSqlEnv\n+                        .builder(inMemoryMetaStore)\n+                        .setPipelineOptions(dataflowPipelineOptions)\n+                        .build();\n+\n+        // Register all tables, set their schemas, and set the locations where their corresponding data are stored.\n+        List<String> tableNames = TableSchemaJSONLoader.getAllTableNames();\n+        for (String tableName : tableNames) {\n+            String createStatement = \"CREATE EXTERNAL TABLE \" + tableName + \" (%s) TYPE text LOCATION '%s' TBLPROPERTIES '{\\\"format\\\":\\\"csv\\\", \\\"csvformat\\\": \\\"InformixUnload\\\"}'\";\n+            String tableSchema = TableSchemaJSONLoader.parseTableSchema(tableName);\n+            String dataLocation = \"gs://beamsql_tpcds_1/data/\" + dataSize +\"/\" + tableName + \".dat\";\n+            env.executeDdl(String.format(createStatement, tableSchema, dataLocation));\n+        }\n+\n+        // Make an array of pipelines, each pipeline is responsible for running a corresponding query.\n+        Pipeline[] pipelines = new Pipeline[queryNameArr.length];\n+\n+        // Execute all queries, transform the each result into a PCollection<String>, write them into the txt file and store in a GCP directory.\n+        for (int i = 0; i < queryNameArr.length; i++) {\n+            // For each query, get a copy of pipelineOptions from command line arguments, set a unique job name using the time stamp so that multiple different pipelines can run together.\n+            TpcdsOptions tpcdsOptionsCopy = PipelineOptionsFactory.fromArgs(args).withValidation().as(TpcdsOptions.class);\n+            DataflowPipelineOptions dataflowPipelineOptionsCopy = tpcdsOptionsCopy.as(DataflowPipelineOptions.class);\n+            dataflowPipelineOptionsCopy.setJobName(queryNameArr[i] + \"result\" + System.currentTimeMillis());\n+\n+            pipelines[i] = Pipeline.create(dataflowPipelineOptionsCopy);\n+            String queryString = QueryReader.readQuery(queryNameArr[i]);\n+\n+            // Query execution\n+            PCollection<Row> rows = BeamSqlRelUtils.toPCollection(pipelines[i], env.parseQuery(queryString));\n+\n+            // Transform the result from PCollection<Row> into PCollection<String>, and write it to the location where results are stored.\n+            PCollection<String> rowStrings = rows.apply(MapElements\n+                    .into(TypeDescriptors.strings())\n+                    .via((Row row) -> row.toString()));\n+            rowStrings.apply(TextIO.write().to(\"gs://beamsql_tpcds_1/tpcds_results/\" + dataSize + \"/\" + pipelines[i].getOptions().getJobName()).withSuffix(\".txt\").withNumShards(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b395ab593a821f2af1777e96c899be83211afcc"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b57b27dcfca1a73e8658020f07e5b49c6c4645f0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b57b27dcfca1a73e8658020f07e5b49c6c4645f0", "committedDate": "2020-08-02T21:45:24Z", "message": "Removed unnecessary modifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f3be088949d013ea1ca373087b815154a61f03", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/14f3be088949d013ea1ca373087b815154a61f03", "committedDate": "2020-08-03T04:53:09Z", "message": "Added license headers to all query files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjIyNTMz", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-460222533", "createdAt": "2020-08-03T17:45:03Z", "commit": {"oid": "14f3be088949d013ea1ca373087b815154a61f03"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo0NTowM1rOG7C7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo0NToyOVrOG7C8GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NzA3MA==", "bodyText": "add a newline", "url": "https://github.com/apache/beam/pull/12436#discussion_r464567070", "createdAt": "2020-08-03T17:45:03Z", "author": {"login": "amaliujia"}, "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/TableSchemaJSONLoader.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.tpcds;\n+\n+import org.apache.beam.repackaged.core.org.apache.commons.compress.utils.FileNameUtils;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * TableSchemaJSONLoader can get all table's names from resource/schemas directory and parse a table's schema into a string.\n+ */\n+public class TableSchemaJSONLoader {\n+    /**\n+     * Read a table schema json file from resource/schemas directory, parse the file into a string which can be utilized by BeamSqlEnv.executeDdl method.\n+     * @param tableName The name of the json file to be read (fo example: item, store_sales).\n+     * @return A string that matches the format in BeamSqlEnv.executeDdl method, such as \"d_date_sk bigint, d_date_id varchar\"\n+     * @throws Exception\n+     */\n+    public static String parseTableSchema(String tableName) throws Exception {\n+        String tableFilePath = Objects.requireNonNull(TableSchemaJSONLoader.class.getClassLoader().getResource(\"schemas/\" + tableName +\".json\")).getPath();\n+\n+        JSONObject jsonObject = (JSONObject) new JSONParser().parse(new FileReader(new File(tableFilePath)));\n+        JSONArray jsonArray = (JSONArray) jsonObject.get(\"schema\");\n+\n+        // Iterate each element in jsonArray to construct the schema string\n+        StringBuilder schemaStringBuilder = new StringBuilder();\n+\n+        Iterator jsonArrIterator = jsonArray.iterator();\n+        Iterator<Map.Entry> recordIterator;\n+        while (jsonArrIterator.hasNext()) {\n+            recordIterator = ((Map) jsonArrIterator.next()).entrySet().iterator();\n+            while (recordIterator.hasNext()) {\n+                Map.Entry pair = recordIterator.next();\n+\n+                if (pair.getKey().equals(\"type\")) {\n+                    // If the key of the pair is \"type\", make some modification before appending it to the schemaStringBuilder, then append a comma.\n+                    String typeName = (String) pair.getValue();\n+                    if (typeName.toLowerCase().equals(\"identifier\") || typeName.toLowerCase().equals(\"integer\")) {\n+                        // Use long type to represent int, prevent overflow\n+                        schemaStringBuilder.append(\"bigint\");\n+                    } else if (typeName.contains(\"decimal\")) {\n+                        // Currently Beam SQL doesn't handle \"decimal\" type properly, use \"double\" to replace it for now.\n+                        schemaStringBuilder.append(\"double\");\n+                    } else {\n+                        // Currently Beam SQL doesn't handle \"date\" type properly, use \"varchar\" replace it for now.\n+                        schemaStringBuilder.append(\"varchar\");\n+                    }\n+                    schemaStringBuilder.append(',');\n+                } else {\n+                    // If the key of the pair is \"name\", directly append it to the StringBuilder, then append a space.\n+                    schemaStringBuilder.append((pair.getValue()));\n+                    schemaStringBuilder.append(' ');\n+                }\n+            }\n+        }\n+\n+        // Delete the last ',' in schema string\n+        if (schemaStringBuilder.length() > 0) {\n+            schemaStringBuilder.deleteCharAt(schemaStringBuilder.length() - 1);\n+        }\n+\n+        String schemaString = schemaStringBuilder.toString();\n+\n+        return schemaString;\n+    }\n+\n+    /**\n+     * Get all tables' names. Tables are stored in resource/schemas directory in the form of json files, such as \"item.json\", \"store_sales.json\", they'll be converted to \"item\", \"store_sales\".\n+     * @return The list of names of all tables.\n+     */\n+    public static List<String> getAllTableNames() {\n+        String tableDirPath = Objects.requireNonNull(TableSchemaJSONLoader.class.getClassLoader().getResource(\"schemas\")).getPath();\n+        File tableDir = new File(tableDirPath);\n+        File[] tableDirListing = tableDir.listFiles();\n+\n+        List<String> tableNames = new ArrayList<>();\n+\n+        if (tableDirListing != null) {\n+            for (File file : tableDirListing) {\n+                // Remove the .json extension in file name\n+                tableNames.add(FileNameUtils.getBaseName((file.getName())));\n+            }\n+        }\n+\n+        return tableNames;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14f3be088949d013ea1ca373087b815154a61f03"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NzMyMA==", "bodyText": "Move this module up", "url": "https://github.com/apache/beam/pull/12436#discussion_r464567320", "createdAt": "2020-08-03T17:45:29Z", "author": {"login": "amaliujia"}, "path": "settings.gradle", "diffHunk": "@@ -179,3 +179,4 @@ include \"beam-test-tools\"\n project(\":beam-test-tools\").dir = file(\".test-infra/tools\")\n include \"beam-test-jenkins\"\n project(\":beam-test-jenkins\").dir = file(\".test-infra/jenkins\")\n+include \":sdks:java:testing:tpcds\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14f3be088949d013ea1ca373087b815154a61f03"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6972fa486ff6ef9db957dbe9140912064a33c0d2", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6972fa486ff6ef9db957dbe9140912064a33c0d2", "committedDate": "2020-08-03T18:38:05Z", "message": "Adjusted settings.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98230634616d5b6e6ebb14aa503a6ce2acc71046", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/98230634616d5b6e6ebb14aa503a6ce2acc71046", "committedDate": "2020-08-03T18:41:26Z", "message": "Added a newline in TableSchemaJSONLoader.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODM1Nzgz", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-475835783", "createdAt": "2020-08-26T20:30:32Z", "commit": {"oid": "98230634616d5b6e6ebb14aa503a6ce2acc71046"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDozMDozMlrOHHcmwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDozMDozMlrOHHcmwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3MDc1NA==", "bodyText": "Just curious about this. Is this because autoCastField is how CSV is converted to INT64? I happen to be looking at other things and found this.", "url": "https://github.com/apache/beam/pull/12436#discussion_r477570754", "createdAt": "2020-08-26T20:30:32Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/schema/BeamTableUtils.java", "diffHunk": "@@ -151,10 +151,16 @@ public static Object autoCastField(Schema.Field field, Object rawObj) {\n         case INT32:\n           return Integer.valueOf(raw);\n         case INT64:\n+          if (raw.equals(\"\")) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98230634616d5b6e6ebb14aa503a6ce2acc71046"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM0MDI2ODY1", "url": "https://github.com/apache/beam/pull/12436#pullrequestreview-634026865", "createdAt": "2021-04-12T22:52:34Z", "commit": {"oid": "98230634616d5b6e6ebb14aa503a6ce2acc71046"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQyMjo1MjozNFrOJHpxtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQyMjo1MjozNFrOJHpxtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjAwNDI3Ng==", "bodyText": "Just curious that any reason that this module doesn't use applyJavaNature? And do we want to publish this module into maven central when releasing beam?", "url": "https://github.com/apache/beam/pull/12436#discussion_r612004276", "createdAt": "2021-04-12T22:52:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/testing/tpcds/build.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+plugins {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98230634616d5b6e6ebb14aa503a6ce2acc71046"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3655, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}