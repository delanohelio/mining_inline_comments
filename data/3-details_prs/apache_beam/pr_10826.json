{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDA4MzQ2", "number": 10826, "title": "[BEAM-8335] Modify the TestStreamPayload to accept an argument of output_tags and\u2026", "bodyText": "\u2026 modify the TestStreamFileRecord to use TestStreamPayload events.\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a\nAdds the output_tags in the TestStreamPayload for allowing converting a TestStream to/from proto without reading from its events.\nAlso adds a file format version for the TestStreamFileHeader to document which version for backwards compatibility when decoding.\nAlso adds a list of \"keys\" to request which PCollection to read from in the TestStreamService.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-10T23:39:10Z", "url": "https://github.com/apache/beam/pull/10826", "merged": true, "mergeCommit": {"oid": "9fd3a6220575a30ace081c75d8bf5a89ef62b105"}, "closed": true, "closedAt": "2020-02-13T22:15:40Z", "author": {"login": "rohdesamuel"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDF_BYgBqjMwMjQ3OTU1ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcECQ6qAFqTM1ODU4Mjc4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c578c30071bc066bb2ab15ce3e18720b82b5ccdf", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/c578c30071bc066bb2ab15ce3e18720b82b5ccdf", "committedDate": "2020-02-10T23:37:25Z", "message": "Modify the TestStreamPayload to accept an argument of output_tags and modify the TestStreamFileRecord to use TestStreamPayload events.\n\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a"}, "afterCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/571c49e734ce5a4ed686a8795ebce1e9c5a89947", "committedDate": "2020-02-10T23:45:38Z", "message": "Modify the TestStreamPayload to accept an argument of output_tags and modify the TestStreamFileRecord to use TestStreamPayload events.\n\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzU0MTMw", "url": "https://github.com/apache/beam/pull/10826#pullrequestreview-356354130", "createdAt": "2020-02-11T00:09:35Z", "commit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzY4Mjk4", "url": "https://github.com/apache/beam/pull/10826#pullrequestreview-356368298", "createdAt": "2020-02-11T00:54:21Z", "commit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1NDoyMlrOFn62Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1ODoxNlrOFn66qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjk1NA==", "bodyText": "Don't think this is worth duplicating information already present on existing test stream events.", "url": "https://github.com/apache/beam/pull/10826#discussion_r377402954", "createdAt": "2020-02-11T00:54:22Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -525,6 +525,11 @@ message TestStreamPayload {\n   // used to retrieve events.\n   ApiServiceDescriptor endpoint = 3;\n \n+  // (Optional) The PCollection tags this TestStream will be outputting to. If\n+  // empty, this will assume it will be outputting to the single main\n+  // output PCollection.\n+  repeated string output_tags = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzQ2Mw==", "bodyText": "Can you provide more context as to why this is needed?\nIs this the pcollection id, or the output name or the ptransform id representing the test stream?", "url": "https://github.com/apache/beam/pull/10826#discussion_r377403463", "createdAt": "2020-02-11T00:56:18Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -576,7 +581,12 @@ service TestStreamService {\n   // A TestStream will request for events using this RPC.\n   rpc Events(EventsRequest) returns (stream TestStreamPayload.Event) {}\n }\n-message EventsRequest {}\n+\n+message EventsRequest {\n+  // The set of keys to read from. The keys are the specific PCollections to\n+  // read.\n+  repeated string keys = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzkyNQ==", "bodyText": "Why do the recorded events not have AdvanceProcessingTime events?", "url": "https://github.com/apache/beam/pull/10826#discussion_r377403925", "createdAt": "2020-02-11T00:57:47Z", "author": {"login": "lukecwik"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;\n }\n \n // A record is a recorded element that a source produced. Its function is to\n // give enough information to create a faithful recreation of the original\n // stream of data.\n message TestStreamFileRecord {\n   oneof recorded_event {\n-    // The recorded element with its event timestamp (when it was produced).\n-    org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;\n+    // The recorded bundle with its event timestamp (when it was produced).\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements element_event = 1;\n \n     // Indicating the output watermark of the source changed.\n-    google.protobuf.Timestamp watermark = 2;\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark watermark_event = 2;\n   }\n \n   // The wall-time timestamp of either the new element or watermark change.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNDA3Mg==", "bodyText": "Shouldn't proto versioning handle this?", "url": "https://github.com/apache/beam/pull/10826#discussion_r377404072", "createdAt": "2020-02-11T00:58:16Z", "author": {"login": "lukecwik"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/571c49e734ce5a4ed686a8795ebce1e9c5a89947", "committedDate": "2020-02-10T23:45:38Z", "message": "Modify the TestStreamPayload to accept an argument of output_tags and modify the TestStreamFileRecord to use TestStreamPayload events.\n\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a"}, "afterCommit": {"oid": "2b6c043477459a9fa267e02881feb42db4230d60", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/2b6c043477459a9fa267e02881feb42db4230d60", "committedDate": "2020-02-11T18:14:26Z", "message": "Modify the TestStreamPayload to accept an argument of output_tags and modify the TestStreamFileRecord to use TestStreamPayload events.\n\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzE3MDAy", "url": "https://github.com/apache/beam/pull/10826#pullrequestreview-357717002", "createdAt": "2020-02-12T19:14:42Z", "commit": {"oid": "2b6c043477459a9fa267e02881feb42db4230d60"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxNDo0MlrOFo7N5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToyMDo1NVrOFo7a-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NzU3Mw==", "bodyText": "This information duplicates the \"output\" map keys on the PTransform that contains the TestStreamPayload.", "url": "https://github.com/apache/beam/pull/10826#discussion_r378457573", "createdAt": "2020-02-12T19:14:42Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -525,6 +525,11 @@ message TestStreamPayload {\n   // used to retrieve events.\n   ApiServiceDescriptor endpoint = 3;\n \n+  // (Optional) The PCollection tags this TestStream will be outputting to. If\n+  // empty, this will assume it will be outputting to the single main\n+  // output PCollection.\n+  repeated string output_tags = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjk1NA=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1OTQ0MA==", "bodyText": "You would still be able to do that \"compression\" yourself and only add a single AdvanceProcessingTime yet still have the flexibility to record multiple AdvanceProcessingTime events if they were ever necessary.", "url": "https://github.com/apache/beam/pull/10826#discussion_r378459440", "createdAt": "2020-02-12T19:18:03Z", "author": {"login": "lukecwik"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;\n }\n \n // A record is a recorded element that a source produced. Its function is to\n // give enough information to create a faithful recreation of the original\n // stream of data.\n message TestStreamFileRecord {\n   oneof recorded_event {\n-    // The recorded element with its event timestamp (when it was produced).\n-    org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;\n+    // The recorded bundle with its event timestamp (when it was produced).\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements element_event = 1;\n \n     // Indicating the output watermark of the source changed.\n-    google.protobuf.Timestamp watermark = 2;\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark watermark_event = 2;\n   }\n \n   // The wall-time timestamp of either the new element or watermark change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzkyNQ=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2MDkyMw==", "bodyText": "The usage of tag and tags is a poor name choice. I would suggest replacing them with output_id and output_ids and please update the comments to refer to the PTransform outputs local names.", "url": "https://github.com/apache/beam/pull/10826#discussion_r378460923", "createdAt": "2020-02-12T19:20:55Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -576,7 +581,13 @@ service TestStreamService {\n   // A TestStream will request for events using this RPC.\n   rpc Events(EventsRequest) returns (stream TestStreamPayload.Event) {}\n }\n-message EventsRequest {}\n+\n+message EventsRequest {\n+  // The set of tags to read from. These tags are a subset of the\n+  // TestStreamPayload's output_tags. This allows Interactive Beam to cache\n+  // many PCollections from a pipeline then replay a subset of them.\n+  repeated string tags = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6c043477459a9fa267e02881feb42db4230d60"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fee530e092b861544dc3c2bffd189b4e68983ef", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/6fee530e092b861544dc3c2bffd189b4e68983ef", "committedDate": "2020-02-13T21:15:59Z", "message": "Modify the TestStreamFileRecord to use TestStreamPayload events.\n\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b6c043477459a9fa267e02881feb42db4230d60", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/2b6c043477459a9fa267e02881feb42db4230d60", "committedDate": "2020-02-11T18:14:26Z", "message": "Modify the TestStreamPayload to accept an argument of output_tags and modify the TestStreamFileRecord to use TestStreamPayload events.\n\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a"}, "afterCommit": {"oid": "6fee530e092b861544dc3c2bffd189b4e68983ef", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/6fee530e092b861544dc3c2bffd189b4e68983ef", "committedDate": "2020-02-13T21:15:59Z", "message": "Modify the TestStreamFileRecord to use TestStreamPayload events.\n\nChange-Id: I84ec1dd4698534c26c3a5219669da5f1a127250a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTgyNzgx", "url": "https://github.com/apache/beam/pull/10826#pullrequestreview-358582781", "createdAt": "2020-02-13T22:00:04Z", "commit": {"oid": "6fee530e092b861544dc3c2bffd189b4e68983ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3060, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}