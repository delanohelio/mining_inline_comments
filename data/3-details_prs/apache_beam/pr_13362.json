{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDIyNTAx", "number": 13362, "title": "[BEAM-11075] Pardo tests for Go SDK", "bodyText": "This PR adds ParDo load tests for Go SDK. The PR also contains some helper functions for measuring and sending test run times to InfluxDB. The results will become visible on Grafana dashboard as soon as the related Jenkins job starts running periodically.\nLastly, the PR introduces a new option: parallelism, which can be used to set the degree of Flink's parallelism.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-11-17T13:45:44Z", "url": "https://github.com/apache/beam/pull/13362", "merged": true, "mergeCommit": {"oid": "37deb55687dfbd41a3fc53acb4f0b1154d63120b"}, "closed": true, "closedAt": "2020-11-19T18:42:02Z", "author": {"login": "kamilwu"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddaD30ABqjQwMDU2MTIzODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeHIFqAFqTUzNDczNDE1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6bcafa6370f8978b34c11a0812f14620da8c6914", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/6bcafa6370f8978b34c11a0812f14620da8c6914", "committedDate": "2020-11-17T13:44:32Z", "message": "[BEAM-11075] Add parallelism option"}, "afterCommit": {"oid": "c8f1b312436216caa39c83474432eee54923cb3f", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/c8f1b312436216caa39c83474432eee54923cb3f", "committedDate": "2020-11-17T14:02:36Z", "message": "[BEAM-11075] Add parallelism option"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8f1b312436216caa39c83474432eee54923cb3f", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/c8f1b312436216caa39c83474432eee54923cb3f", "committedDate": "2020-11-17T14:02:36Z", "message": "[BEAM-11075] Add parallelism option"}, "afterCommit": {"oid": "27943d530482bfc9a20dde2d72d00ba93240f206", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/27943d530482bfc9a20dde2d72d00ba93240f206", "committedDate": "2020-11-17T15:06:55Z", "message": "fixup! fixup! [BEAM-11075] Add parallelism option"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27943d530482bfc9a20dde2d72d00ba93240f206", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/27943d530482bfc9a20dde2d72d00ba93240f206", "committedDate": "2020-11-17T15:06:55Z", "message": "fixup! fixup! [BEAM-11075] Add parallelism option"}, "afterCommit": {"oid": "ced69f52b27ff3f53fb6e0850f172f84e8db8d88", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/ced69f52b27ff3f53fb6e0850f172f84e8db8d88", "committedDate": "2020-11-17T15:12:07Z", "message": "[BEAM-11075] Add parallelism option"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ced69f52b27ff3f53fb6e0850f172f84e8db8d88", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/ced69f52b27ff3f53fb6e0850f172f84e8db8d88", "committedDate": "2020-11-17T15:12:07Z", "message": "[BEAM-11075] Add parallelism option"}, "afterCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/f565b6d533525af79484a8f405b47168561d6e82", "committedDate": "2020-11-17T16:45:36Z", "message": "[BEAM-11075] Add parallelism option"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzUyMzQ4", "url": "https://github.com/apache/beam/pull/13362#pullrequestreview-533752348", "createdAt": "2020-11-18T18:24:13Z", "commit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNDoxM1rOH18Lzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyMzo0MVrOH1-bnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMjYzOQ==", "bodyText": "No need to do it now, but for compatibility and infrastructure convenience there's no reason we can't re-register the various execution functions with additional aliases that match Java and Python which appear to require full class names.\nThat is, there's no reason why we can't have a package that imports all the runners and adds the aliases for these load tests (or for the runner files to do it themselves for common use).\n// if done in a separate package\nfunc init() {\n  beam.RegisterRunner(\"SparkRunner\", spark.Execute)\n}\n\n// if done in the spark runner package\nfunc init() {\n  beam.RegisterRunner(\"spark\", Execute)\n  beam.RegisterRunner(\"SparkRunner\", Execute)\n}", "url": "https://github.com/apache/beam/pull/13362#discussion_r526322639", "createdAt": "2020-11-18T18:24:13Z", "author": {"login": "lostluck"}, "path": ".test-infra/jenkins/CommonTestProperties.groovy", "diffHunk": "@@ -21,17 +21,36 @@\n class CommonTestProperties {\n   enum SDK {\n     PYTHON,\n-    JAVA\n+    JAVA,\n+    GO,\n   }\n \n   enum Runner {\n-    DATAFLOW(\"DataflowRunner\"),\n-    TEST_DATAFLOW(\"TestDataflowRunner\"),\n-    SPARK(\"SparkRunner\"),\n-    SPARK_STRUCTURED_STREAMING(\"SparkStructuredStreamingRunner\"),\n-    FLINK(\"FlinkRunner\"),\n-    DIRECT(\"DirectRunner\"),\n-    PORTABLE(\"PortableRunner\")\n+    DATAFLOW,\n+    TEST_DATAFLOW,\n+    SPARK,\n+    SPARK_STRUCTURED_STREAMING,\n+    FLINK,\n+    DIRECT,\n+    PORTABLE,\n+\n+    def runnerNames = [\n+      DATAFLOW: \"DataflowRunner\",\n+      TEST_DATAFLOW: \"TestDataflowRunner\",\n+      SPARK: \"SparkRunner\",\n+      SPARK_STRUCTURED_STREAMING: \"SparkStructuredStreamingRunner\",\n+      FLINK: \"FlinkRunner\",\n+      DIRECT: \"DirectRunner\",\n+      PORTABLE: \"PortableRunner\",\n+    ]\n+\n+    def goRunnerNames = [\n+      DATAFLOW: \"dataflow\",\n+      SPARK: \"spark\",\n+      FLINK: \"flink\",\n+      DIRECT: \"direct\",\n+      PORTABLE: \"universal\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTMxOQ==", "bodyText": "Note, Unix only provides second granularity. If seconds is too coarse (or doesn't match Java and Python), consider using UnixNano() and converting to the correct granularity (millis or micros).\nhttps://golang.org/pkg/time/#Time.Unix", "url": "https://github.com/apache/beam/pull/13362#discussion_r526359319", "createdAt": "2020-11-18T19:23:28Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().Unix())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTQ1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // It uses a distribution metric which is updated every time new bundle\n          \n          \n            \n            // It uses a distribution metric which is updated every time a new bundle", "url": "https://github.com/apache/beam/pull/13362#discussion_r526359453", "createdAt": "2020-11-18T19:23:41Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time new bundle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a205607c17c3aae8b704132034f5d9179391ef0e", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/a205607c17c3aae8b704132034f5d9179391ef0e", "committedDate": "2020-11-19T11:12:21Z", "message": "[BEAM-11075] ParDo tests for Go SDK"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962bf62808685ec008e42cd78203529334cdc10a", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/962bf62808685ec008e42cd78203529334cdc10a", "committedDate": "2020-11-19T11:12:28Z", "message": "[BEAM-11075] Add parallelism option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ca3222ff75b95c870b6a65916769516fcfb6e5", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/a2ca3222ff75b95c870b6a65916769516fcfb6e5", "committedDate": "2020-11-19T11:12:28Z", "message": "[BEAM-11075] Register additional runner aliases that match Java and Python"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9eb2f4329f0840f46d6898a4debfe711dba4340a", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/9eb2f4329f0840f46d6898a4debfe711dba4340a", "committedDate": "2020-11-19T00:20:03Z", "message": "fix small gramatical typo"}, "afterCommit": {"oid": "a2ca3222ff75b95c870b6a65916769516fcfb6e5", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/a2ca3222ff75b95c870b6a65916769516fcfb6e5", "committedDate": "2020-11-19T11:12:28Z", "message": "[BEAM-11075] Register additional runner aliases that match Java and Python"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc114551534612756e7ead0450e5378d8cf57db8", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/bc114551534612756e7ead0450e5378d8cf57db8", "committedDate": "2020-11-19T12:04:43Z", "message": "fix: use UnixNano instead of Unix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf83e7b489b5a06279255338003e0d780bd52398", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/cf83e7b489b5a06279255338003e0d780bd52398", "committedDate": "2020-11-19T12:42:22Z", "message": " fix: small gramatical typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzM0MTU5", "url": "https://github.com/apache/beam/pull/13362#pullrequestreview-534734159", "createdAt": "2020-11-19T18:29:31Z", "commit": {"oid": "cf83e7b489b5a06279255338003e0d780bd52398"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoyOTozMVrOH2sGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoyOTozMVrOH2sGBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNzU4OA==", "bodyText": "Should this be UnixNano as well? Or do the published loadTestResults require second granularity?", "url": "https://github.com/apache/beam/pull/13362#discussion_r527107588", "createdAt": "2020-11-19T18:29:31Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time a new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// FinishBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) FinishBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// ProcessElement emits unmodified input elements.\n+func (fn *RuntimeMonitor) ProcessElement(key, value []byte, emit func([]byte, []byte)) {\n+\temit(key, value)\n+}\n+\n+type influxDBOptions struct {\n+\tmeasurement string\n+\tdbName      string\n+\thostname    string\n+\tuser        string\n+\tpassword    string\n+}\n+\n+func newInfluxDBOptions() *influxDBOptions {\n+\treturn &influxDBOptions{\n+\t\tmeasurement: *influxMeasurement,\n+\t\tdbName:      *influxDatabase,\n+\t\thostname:    *influxHost,\n+\t\tuser:        os.Getenv(\"INFLUXDB_USER\"),\n+\t\tpassword:    os.Getenv(\"INFLUXDB_USER_PASSWORD\")}\n+}\n+\n+func (options influxDBOptions) validate() bool {\n+\treturn options.measurement != \"\" && options.dbName != \"\"\n+}\n+\n+func (options influxDBOptions) httpAuthEnabled() bool {\n+\treturn options.user != \"\" && options.password != \"\"\n+}\n+\n+// loadTestResult represents a single data record that has: a timestamp,\n+// a type of a metric, and a value.\n+type loadTestResult struct {\n+\ttimestamp int64\n+\tmetric    string\n+\tvalue     float64\n+}\n+\n+func newLoadTestResult(value float64) loadTestResult {\n+\tmetric := \"\"\n+\tif *influxNamespace == \"\" {\n+\t\tmetric = runtimeMetricName\n+\t} else {\n+\t\tmetric = fmt.Sprintf(\"%v_%v\", *influxNamespace, runtimeMetricName)\n+\t}\n+\treturn loadTestResult{timestamp: time.Now().Unix(), metric: metric, value: value}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf83e7b489b5a06279255338003e0d780bd52398"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4910, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}