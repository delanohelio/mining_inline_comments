{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTUwOTc1", "number": 10986, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo1MDo1N1rODlGUAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo1MDo1N1rODlGUAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjI3MzI4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/ml/gcp/videointelligenceml_test_it.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo1MDo1N1rOFxy1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozOTo1MVrOFx03_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NzM1OA==", "bodyText": "Short pondering: Is it over-protective to have a separate bucket in e.g. Beam infra project in case Google would pull / update this file?\nPR looks great btw. Just wanted to put that thought out there.", "url": "https://github.com/apache/beam/pull/10986#discussion_r387757358", "createdAt": "2020-03-04T15:50:57Z", "author": {"login": "EDjur"}, "path": "sdks/python/apache_beam/ml/gcp/videointelligenceml_test_it.py", "diffHunk": "@@ -0,0 +1,75 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# pytype: skip-file\n+\n+\"\"\"An integration test that labels entities appearing in a video and checks\n+if some expected entities were properly recognized.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import unicode_literals\n+\n+import unittest\n+\n+import hamcrest as hc\n+from nose.plugins.attrib import attr\n+\n+import apache_beam as beam\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import matches_all\n+\n+# Protect against environments where Google Cloud VideoIntelligence client is\n+# not available.\n+try:\n+  from apache_beam.ml.gcp.videointelligenceml import AnnotateVideoWithContext\n+  from google.cloud.videointelligence import enums\n+  from google.cloud.videointelligence import types\n+except ImportError:\n+  AnnotateVideoWithContext = None\n+\n+\n+def extract_entities_descriptions(response):\n+  for result in response.annotation_results:\n+    for segment in result.segment_label_annotations:\n+      yield segment.entity.description\n+\n+\n+@attr('IT')\n+@unittest.skipIf(\n+    AnnotateVideoWithContext is None, 'GCP dependencies are not installed')\n+class VideoIntelligenceMlTestIT(unittest.TestCase):\n+  VIDEO_PATH = 'gs://cloudmleap/video/next/gbikes_dinosaur.mp4'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be85486e4b21c344ae6c393527ea73b09cecaebc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3NDU3Ng==", "bodyText": "Good point. I don't have enough permissions to create new files in Beam infra project, but I'll ask someone.\nUntil then I'll refrain from merging the PR.\nThanks!", "url": "https://github.com/apache/beam/pull/10986#discussion_r387774576", "createdAt": "2020-03-04T16:16:01Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/ml/gcp/videointelligenceml_test_it.py", "diffHunk": "@@ -0,0 +1,75 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# pytype: skip-file\n+\n+\"\"\"An integration test that labels entities appearing in a video and checks\n+if some expected entities were properly recognized.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import unicode_literals\n+\n+import unittest\n+\n+import hamcrest as hc\n+from nose.plugins.attrib import attr\n+\n+import apache_beam as beam\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import matches_all\n+\n+# Protect against environments where Google Cloud VideoIntelligence client is\n+# not available.\n+try:\n+  from apache_beam.ml.gcp.videointelligenceml import AnnotateVideoWithContext\n+  from google.cloud.videointelligence import enums\n+  from google.cloud.videointelligence import types\n+except ImportError:\n+  AnnotateVideoWithContext = None\n+\n+\n+def extract_entities_descriptions(response):\n+  for result in response.annotation_results:\n+    for segment in result.segment_label_annotations:\n+      yield segment.entity.description\n+\n+\n+@attr('IT')\n+@unittest.skipIf(\n+    AnnotateVideoWithContext is None, 'GCP dependencies are not installed')\n+class VideoIntelligenceMlTestIT(unittest.TestCase):\n+  VIDEO_PATH = 'gs://cloudmleap/video/next/gbikes_dinosaur.mp4'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NzM1OA=="}, "originalCommit": {"oid": "be85486e4b21c344ae6c393527ea73b09cecaebc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MDg0Nw==", "bodyText": "Thank you!\nThe same line of thinking would apply for the vision API sample too then.", "url": "https://github.com/apache/beam/pull/10986#discussion_r387790847", "createdAt": "2020-03-04T16:39:51Z", "author": {"login": "EDjur"}, "path": "sdks/python/apache_beam/ml/gcp/videointelligenceml_test_it.py", "diffHunk": "@@ -0,0 +1,75 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# pytype: skip-file\n+\n+\"\"\"An integration test that labels entities appearing in a video and checks\n+if some expected entities were properly recognized.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import unicode_literals\n+\n+import unittest\n+\n+import hamcrest as hc\n+from nose.plugins.attrib import attr\n+\n+import apache_beam as beam\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import matches_all\n+\n+# Protect against environments where Google Cloud VideoIntelligence client is\n+# not available.\n+try:\n+  from apache_beam.ml.gcp.videointelligenceml import AnnotateVideoWithContext\n+  from google.cloud.videointelligence import enums\n+  from google.cloud.videointelligence import types\n+except ImportError:\n+  AnnotateVideoWithContext = None\n+\n+\n+def extract_entities_descriptions(response):\n+  for result in response.annotation_results:\n+    for segment in result.segment_label_annotations:\n+      yield segment.entity.description\n+\n+\n+@attr('IT')\n+@unittest.skipIf(\n+    AnnotateVideoWithContext is None, 'GCP dependencies are not installed')\n+class VideoIntelligenceMlTestIT(unittest.TestCase):\n+  VIDEO_PATH = 'gs://cloudmleap/video/next/gbikes_dinosaur.mp4'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NzM1OA=="}, "originalCommit": {"oid": "be85486e4b21c344ae6c393527ea73b09cecaebc"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}