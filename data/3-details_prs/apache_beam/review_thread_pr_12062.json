{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDEzMjcy", "number": 12062, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0Njo0M1rOEIB1Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxOTowOVrOEIg8FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODU0MDgyOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0Njo0M1rOGnvfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0NToxMlrOGoK5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNTcwMg==", "bodyText": "You should update the comment related to error handling to make sure that users discard the factory every time they want a new cache token.", "url": "https://github.com/apache/beam/pull/12062#discussion_r444325702", "createdAt": "2020-06-23T15:46:43Z", "author": {"login": "lukecwik"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "diffHunk": "@@ -41,9 +41,12 @@\n public class InMemoryBagUserStateFactory<K, V, W extends BoundedWindow>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18e5df392987e073ff9a2158f3791d6e0e718ee3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDkwOA==", "bodyText": "Sure, good idea to clarify that.", "url": "https://github.com/apache/beam/pull/12062#discussion_r444774908", "createdAt": "2020-06-24T09:45:12Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "diffHunk": "@@ -41,9 +41,12 @@\n public class InMemoryBagUserStateFactory<K, V, W extends BoundedWindow>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNTcwMg=="}, "originalCommit": {"oid": "18e5df392987e073ff9a2158f3791d6e0e718ee3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzE4NjE4OnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowMTozMlrOGodM9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo0ODozMFrOGogsgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDY3OQ==", "bodyText": "I think we'll want to move the cache token generation up higher to the ByteStringStateRequestHandlerToBagUserStateHandlerFactoryAdapter or the factory has to own the cache token or we add a method which is a supplier to the StateRequestHandlers#forBagUserState. The comment added for this class should be moved appropriately.", "url": "https://github.com/apache/beam/pull/12062#discussion_r445074679", "createdAt": "2020-06-24T18:01:32Z", "author": {"login": "lukecwik"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "diffHunk": "@@ -37,13 +37,19 @@\n /**\n  * Holds user state in memory. Only one key is active at a time due to the GroupReduceFunction being\n  * called once per key. Needs to be reset via {@code resetForNewKey()} before processing a new key.\n+ *\n+ * <p>In case of any failures, this factory must be discarded. Otherwise, the contained state cache\n+ * token would be reused which would corrupt the state cache.\n  */\n public class InMemoryBagUserStateFactory<K, V, W extends BoundedWindow>\n     implements StateRequestHandlers.BagUserStateHandlerFactory<K, V, W> {\n \n+  private final ByteString cacheToken;\n+\n   private List<InMemorySingleKeyBagState> handlers;\n \n   public InMemoryBagUserStateFactory() {\n+    cacheToken = ByteString.copyFrom(UUID.randomUUID().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9847976462b8540d398a8296a6b6e8a347e3d8fa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDUzMQ==", "bodyText": "Could you add a reason for moving this up the stack? State handlers should implement their own cache token handling.", "url": "https://github.com/apache/beam/pull/12062#discussion_r445080531", "createdAt": "2020-06-24T18:12:19Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "diffHunk": "@@ -37,13 +37,19 @@\n /**\n  * Holds user state in memory. Only one key is active at a time due to the GroupReduceFunction being\n  * called once per key. Needs to be reset via {@code resetForNewKey()} before processing a new key.\n+ *\n+ * <p>In case of any failures, this factory must be discarded. Otherwise, the contained state cache\n+ * token would be reused which would corrupt the state cache.\n  */\n public class InMemoryBagUserStateFactory<K, V, W extends BoundedWindow>\n     implements StateRequestHandlers.BagUserStateHandlerFactory<K, V, W> {\n \n+  private final ByteString cacheToken;\n+\n   private List<InMemorySingleKeyBagState> handlers;\n \n   public InMemoryBagUserStateFactory() {\n+    cacheToken = ByteString.copyFrom(UUID.randomUUID().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDY3OQ=="}, "originalCommit": {"oid": "9847976462b8540d398a8296a6b6e8a347e3d8fa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MzI2NA==", "bodyText": "I'll have another look later.", "url": "https://github.com/apache/beam/pull/12062#discussion_r445083264", "createdAt": "2020-06-24T18:17:14Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "diffHunk": "@@ -37,13 +37,19 @@\n /**\n  * Holds user state in memory. Only one key is active at a time due to the GroupReduceFunction being\n  * called once per key. Needs to be reset via {@code resetForNewKey()} before processing a new key.\n+ *\n+ * <p>In case of any failures, this factory must be discarded. Otherwise, the contained state cache\n+ * token would be reused which would corrupt the state cache.\n  */\n public class InMemoryBagUserStateFactory<K, V, W extends BoundedWindow>\n     implements StateRequestHandlers.BagUserStateHandlerFactory<K, V, W> {\n \n+  private final ByteString cacheToken;\n+\n   private List<InMemorySingleKeyBagState> handlers;\n \n   public InMemoryBagUserStateFactory() {\n+    cacheToken = ByteString.copyFrom(UUID.randomUUID().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDY3OQ=="}, "originalCommit": {"oid": "9847976462b8540d398a8296a6b6e8a347e3d8fa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MzMzMw==", "bodyText": "ByteStringStateRequestHandlerToBagUserStateHandlerFactoryAdapter#getCacheTokens is going to add N copies of the cache token to the ProcessBundleRequest\nFor user state, it makes sense to have a caching handler that does the delegation to other handlers. This caching handler is the one that should be responsible for supplying the single cache token.", "url": "https://github.com/apache/beam/pull/12062#discussion_r445083333", "createdAt": "2020-06-24T18:17:20Z", "author": {"login": "lukecwik"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "diffHunk": "@@ -37,13 +37,19 @@\n /**\n  * Holds user state in memory. Only one key is active at a time due to the GroupReduceFunction being\n  * called once per key. Needs to be reset via {@code resetForNewKey()} before processing a new key.\n+ *\n+ * <p>In case of any failures, this factory must be discarded. Otherwise, the contained state cache\n+ * token would be reused which would corrupt the state cache.\n  */\n public class InMemoryBagUserStateFactory<K, V, W extends BoundedWindow>\n     implements StateRequestHandlers.BagUserStateHandlerFactory<K, V, W> {\n \n+  private final ByteString cacheToken;\n+\n   private List<InMemorySingleKeyBagState> handlers;\n \n   public InMemoryBagUserStateFactory() {\n+    cacheToken = ByteString.copyFrom(UUID.randomUUID().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDY3OQ=="}, "originalCommit": {"oid": "9847976462b8540d398a8296a6b6e8a347e3d8fa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTkwNA==", "bodyText": "I see, makes sense. Let me update the PR.", "url": "https://github.com/apache/beam/pull/12062#discussion_r445131904", "createdAt": "2020-06-24T19:48:30Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/state/InMemoryBagUserStateFactory.java", "diffHunk": "@@ -37,13 +37,19 @@\n /**\n  * Holds user state in memory. Only one key is active at a time due to the GroupReduceFunction being\n  * called once per key. Needs to be reset via {@code resetForNewKey()} before processing a new key.\n+ *\n+ * <p>In case of any failures, this factory must be discarded. Otherwise, the contained state cache\n+ * token would be reused which would corrupt the state cache.\n  */\n public class InMemoryBagUserStateFactory<K, V, W extends BoundedWindow>\n     implements StateRequestHandlers.BagUserStateHandlerFactory<K, V, W> {\n \n+  private final ByteString cacheToken;\n+\n   private List<InMemorySingleKeyBagState> handlers;\n \n   public InMemoryBagUserStateFactory() {\n+    cacheToken = ByteString.copyFrom(UUID.randomUUID().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3NDY3OQ=="}, "originalCommit": {"oid": "9847976462b8540d398a8296a6b6e8a347e3d8fa"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzYzNzMzOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/state/StateRequestHandlersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxOTowOVrOGohqBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxOTowOVrOGohqBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NzY1Mg==", "bodyText": "Looks like this should be using the StateRequestHandler instead, will update.", "url": "https://github.com/apache/beam/pull/12062#discussion_r445147652", "createdAt": "2020-06-24T20:19:09Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/state/StateRequestHandlersTest.java", "diffHunk": "@@ -59,4 +68,46 @@ public void testDelegatingStateHandlerThrowsWhenNotFound() throws Exception {\n     StateRequestHandlers.delegateBasedUponType(new EnumMap<>(StateKey.TypeCase.class))\n         .handle(StateRequest.getDefaultInstance());\n   }\n+\n+  @Test\n+  public void testUserStateCacheTokenGeneration() {\n+    ProcessBundleDescriptors.ExecutableProcessBundleDescriptor processBundleDescriptor =\n+        Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n+    InMemoryBagUserStateFactory inMemoryBagUserStateFactory = new InMemoryBagUserStateFactory<>();\n+    StateRequestHandler stateRequestHandler =\n+        StateRequestHandlers.forBagUserStateHandlerFactory(\n+            processBundleDescriptor, inMemoryBagUserStateFactory);\n+\n+    Iterable<BeamFnApi.ProcessBundleRequest.CacheToken> cacheTokens =\n+        stateRequestHandler.getCacheTokens();\n+    assertThat(Iterables.size(cacheTokens), is(1));\n+\n+    BeamFnApi.ProcessBundleRequest.CacheToken cacheToken = Iterables.getOnlyElement(cacheTokens);\n+    assertThat(\n+        cacheToken.getUserState(),\n+        is(BeamFnApi.ProcessBundleRequest.CacheToken.UserState.getDefaultInstance()));\n+    assertThat(cacheToken.getToken(), is(notNullValue()));\n+\n+    inMemoryBagUserStateFactory.forUserState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be7b5f2221e003adc99ab911b2413e9b75764141"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3564, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}