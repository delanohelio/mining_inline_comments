{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzc0MzAy", "number": 12143, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowMDo0NlrOEMNE-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowNzozNVrOEMNNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjMyNjMyOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowOperationContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowMDo0NlrOGuLrVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowMDo0NlrOGuLrVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3ODk5OA==", "bodyText": "Instead, add Clock to the constructor above (lines 188-200), make the clock member final, and pass Clock.SYSTEM in the constructor without it?", "url": "https://github.com/apache/beam/pull/12143#discussion_r451078998", "createdAt": "2020-07-07T19:00:46Z", "author": {"login": "pabloem"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowOperationContext.java", "diffHunk": "@@ -194,6 +200,18 @@ public DataflowExecutionState(\n       this.metricsContainer = metricsContainer;\n     }\n \n+    public DataflowExecutionState(\n+        NameContext nameContext,\n+        String stateName,\n+        @Nullable String requestingStepName,\n+        @Nullable Integer inputIndex,\n+        @Nullable MetricsContainer metricsContainer,\n+        ProfileScope profileScope,\n+        Clock clock) {\n+      this(nameContext, stateName, requestingStepName, inputIndex, metricsContainer, profileScope);\n+      this.clock = clock;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f1eb236a27d4c76feb59078240b99547b65e3e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjM0ODAzOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowOperationContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowNzozNVrOGuL45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo0NTozNlrOGuuOBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4MjQ2OA==", "bodyText": "This means that a full thread dump will happen the very first time a lull is logged. Lulls are not that unusual, right? We want full thread dumps for pipelines that are truly stuck, not for pipelines that are experiencing a slow stage.\nPerhaps we should use the millis argument from reportLull, and only report when millis passes 20 minutes?", "url": "https://github.com/apache/beam/pull/12143#discussion_r451082468", "createdAt": "2020-07-07T19:07:35Z", "author": {"login": "pabloem"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowOperationContext.java", "diffHunk": "@@ -264,7 +276,49 @@ public void reportLull(Thread trackedThread, long millis) {\n       logRecord.setLoggerName(DataflowOperationContext.LOG.getName());\n \n       // Publish directly in the context of this specific ExecutionState.\n-      DataflowWorkerLoggingInitializer.getLoggingHandler().publish(this, logRecord);\n+      DataflowWorkerLoggingHandler dataflowLoggingHandler =\n+          DataflowWorkerLoggingInitializer.getLoggingHandler();\n+      dataflowLoggingHandler.publish(this, logRecord);\n+\n+      if (shouldLogFullThreadDump()) {\n+        Map<Thread, StackTraceElement[]> threadSet = Thread.getAllStackTraces();\n+        for (Map.Entry<Thread, StackTraceElement[]> entry : threadSet.entrySet()) {\n+          Thread thread = entry.getKey();\n+          StackTraceElement[] stackTrace = entry.getValue();\n+          StringBuilder message = new StringBuilder();\n+          message.append(thread.toString()).append(\":\\n\");\n+          message.append(getStackTraceForLullMessage(stackTrace));\n+          logRecord = new LogRecord(Level.INFO, message.toString());\n+          logRecord.setLoggerName(DataflowOperationContext.LOG.getName());\n+          dataflowLoggingHandler.publish(this, logRecord);\n+        }\n+      }\n+    }\n+\n+    // A full thread dump is performed at most once every 20 minutes.\n+    private static final long LOG_LULL_FULL_THREAD_DUMP_MS = 20 * 60 * 1000;\n+\n+    // Last time when a full thread dump was performed.\n+    private long lastFullThreadDumpMillis = 0;\n+\n+    private boolean shouldLogFullThreadDump() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f1eb236a27d4c76feb59078240b99547b65e3e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDkzMg==", "bodyText": "Thanks! Makes sense. Done. PTAL.", "url": "https://github.com/apache/beam/pull/12143#discussion_r451644932", "createdAt": "2020-07-08T15:45:36Z", "author": {"login": "davidyan74"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowOperationContext.java", "diffHunk": "@@ -264,7 +276,49 @@ public void reportLull(Thread trackedThread, long millis) {\n       logRecord.setLoggerName(DataflowOperationContext.LOG.getName());\n \n       // Publish directly in the context of this specific ExecutionState.\n-      DataflowWorkerLoggingInitializer.getLoggingHandler().publish(this, logRecord);\n+      DataflowWorkerLoggingHandler dataflowLoggingHandler =\n+          DataflowWorkerLoggingInitializer.getLoggingHandler();\n+      dataflowLoggingHandler.publish(this, logRecord);\n+\n+      if (shouldLogFullThreadDump()) {\n+        Map<Thread, StackTraceElement[]> threadSet = Thread.getAllStackTraces();\n+        for (Map.Entry<Thread, StackTraceElement[]> entry : threadSet.entrySet()) {\n+          Thread thread = entry.getKey();\n+          StackTraceElement[] stackTrace = entry.getValue();\n+          StringBuilder message = new StringBuilder();\n+          message.append(thread.toString()).append(\":\\n\");\n+          message.append(getStackTraceForLullMessage(stackTrace));\n+          logRecord = new LogRecord(Level.INFO, message.toString());\n+          logRecord.setLoggerName(DataflowOperationContext.LOG.getName());\n+          dataflowLoggingHandler.publish(this, logRecord);\n+        }\n+      }\n+    }\n+\n+    // A full thread dump is performed at most once every 20 minutes.\n+    private static final long LOG_LULL_FULL_THREAD_DUMP_MS = 20 * 60 * 1000;\n+\n+    // Last time when a full thread dump was performed.\n+    private long lastFullThreadDumpMillis = 0;\n+\n+    private boolean shouldLogFullThreadDump() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4MjQ2OA=="}, "originalCommit": {"oid": "f5f1eb236a27d4c76feb59078240b99547b65e3e"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3413, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}