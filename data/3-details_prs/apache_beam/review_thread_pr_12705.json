{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTUyMTg2", "number": 12705, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMToxMDowMVrOEdY5Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDoyNTozOFrOEpqm2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjUyMDI3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMToxMDowMVrOHIhXgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjozNTowMlrOHgPTjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5NzM0Nw==", "bodyText": "I've marked this PR WIP because this test does not pass. It yields the following error, that I'm not sure how to diagnose. @robertwb can you provide any insight here?\napache_beam/runners/common.py:806: in _invoke_process_per_window                                                                                                                                                                        \n    [si[global_window] for si in self.side_inputs]))                                                                                                                                                                                    \napache_beam/runners/common.py:806: in <listcomp>                                                                                                                                                                                        \n    [si[global_window] for si in self.side_inputs]))                                                                                                                                                                                    \napache_beam/runners/worker/bundle_processor.py:422: in __getitem__                                                                                                                                                                      \n    self._cache[target_window] = self._side_input_data.view_fn(raw_view)                                                                                                                                                                \napache_beam/pvalue.py:395: in <lambda>                                                                                                                                                                                                  \n    lambda iterable: from_runtime_iterable(iterable, view_options))                                                                                                                                                                     \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _                                                                                                             \n                                                                                                                                                                                                                                        \nit = <apache_beam.runners.worker.bundle_processor._StateBackedIterable object at 0x7f3b0e5cf310>                                                                                                                                        \noptions = {'coder': WindowedValueCoder[FastPrimitivesCoder], 'window_mapping_fn': <function _global_window_mapping_fn at 0x7f3b1b31b710>}\n                                                                                                                                                                                                                                        \n    @staticmethod                                                                                                   \n    def _from_runtime_iterable(it, options):                                                                                                                                                                                            \n      head = list(itertools.islice(it, 2))                                                                                                                                                                                              \n      if not head:                                                                                                  \n        return options.get('default', EmptySideInput())                                                             \n      elif len(head) == 1:                                                                                          \n        return head[0]                                                                                                                                                                                                                  \n      raise ValueError(                                                                                                                                                                                                                 \n          'PCollection of size %d with more than one element accessed as a '                                                                                                                                                            \n          'singleton view. First two elements encountered are \"%s\", \"%s\".' %                                                                                                                                                            \n>         (len(head), str(head[0]), str(head[1])))                                                                                                                                                                                      \nE     ValueError: PCollection of size 2 with more than one element accessed as a singleton view. First two elements encountered are \"<pandas.core.strings.StringMethods object at 0x7f3b0e32ec90>\", \"<pandas.core.strings.StringMethods \nobject at 0x7f3b0e3d7510>\". [while running 'DataframeTransform/Eval/[ComputedExpression[cat_Series_139891620772240]]:139891619912080/FlatMap(evaluate)/FlatMap(evaluate)']", "url": "https://github.com/apache/beam/pull/12705#discussion_r478697347", "createdAt": "2020-08-27T21:10:01Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "diffHunk": "@@ -266,6 +266,17 @@ def check(actual):\n           lambda x: {'res': 3 * x}, proxy)\n       assert_that(res['res'], equal_to_series(three_series), 'CheckDictOut')\n \n+  def test_cat(self):\n+    # verify that cat works with a List[Series] sicne this is missing from doctests\n+    df = pd.DataFrame({\n+        'one': ['A', 'B', 'C'],\n+        'two': ['BB', 'CC', 'A'],\n+        'three': ['CCC', 'AA', 'B'],\n+    })\n+    self.run_scenario(df, lambda df: df.two.str.cat([df.three], join='outer'))\n+    self.run_scenario(\n+        df, lambda df: df.one.str.cat([df.two, df.three], join='outer'))\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59320c9974a18001aee2ce054604585ed3da308"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NzM2OQ==", "bodyText": "I think this is because we're trying to partition the StringMethods object itself and send it across the stage/shuffle boundary, and that code only expects dataframes and series to be partition-able (expecting everything else to be a single-object scalar.\nOne route would be to add StringMethods to the list of things that are partitionable, but that feels a bit odd and won't work well with a columnar backend representation (e.g. how would we represent s.str[:] as an Arrow batch?) Better would be for these expressions to take the underlying series as an argument, and invoke str on it themselves as part of the function to be applied. This may take some refactoring of the elementwise operations. (It may be OK, as all the others get \"fused away\", similarly for DateTime, but we should probably add a check that we don't try to partition anything but frames).", "url": "https://github.com/apache/beam/pull/12705#discussion_r498577369", "createdAt": "2020-10-02T00:51:24Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "diffHunk": "@@ -266,6 +266,17 @@ def check(actual):\n           lambda x: {'res': 3 * x}, proxy)\n       assert_that(res['res'], equal_to_series(three_series), 'CheckDictOut')\n \n+  def test_cat(self):\n+    # verify that cat works with a List[Series] sicne this is missing from doctests\n+    df = pd.DataFrame({\n+        'one': ['A', 'B', 'C'],\n+        'two': ['BB', 'CC', 'A'],\n+        'three': ['CCC', 'AA', 'B'],\n+    })\n+    self.run_scenario(df, lambda df: df.two.str.cat([df.three], join='outer'))\n+    self.run_scenario(\n+        df, lambda df: df.one.str.cat([df.two, df.three], join='outer'))\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5NzM0Nw=="}, "originalCommit": {"oid": "d59320c9974a18001aee2ce054604585ed3da308"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNjQzNA==", "bodyText": "Thank you!\nIn order to avoid refactoring the elementwise methods I made DeferredStringMethods store two expressions, one that accesses Series.str, and one for the underlying Series. This seems to get things passing, but I'm not 100% sure this is safe. I'll look at extending elementwise_method for this use-case instead.", "url": "https://github.com/apache/beam/pull/12705#discussion_r501926434", "createdAt": "2020-10-08T18:25:35Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "diffHunk": "@@ -266,6 +266,17 @@ def check(actual):\n           lambda x: {'res': 3 * x}, proxy)\n       assert_that(res['res'], equal_to_series(three_series), 'CheckDictOut')\n \n+  def test_cat(self):\n+    # verify that cat works with a List[Series] sicne this is missing from doctests\n+    df = pd.DataFrame({\n+        'one': ['A', 'B', 'C'],\n+        'two': ['BB', 'CC', 'A'],\n+        'three': ['CCC', 'AA', 'B'],\n+    })\n+    self.run_scenario(df, lambda df: df.two.str.cat([df.three], join='outer'))\n+    self.run_scenario(\n+        df, lambda df: df.one.str.cat([df.two, df.three], join='outer'))\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5NzM0Nw=="}, "originalCommit": {"oid": "d59320c9974a18001aee2ce054604585ed3da308"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2NzI0NA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12705#discussion_r503567244", "createdAt": "2020-10-12T22:35:02Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "diffHunk": "@@ -266,6 +266,17 @@ def check(actual):\n           lambda x: {'res': 3 * x}, proxy)\n       assert_that(res['res'], equal_to_series(three_series), 'CheckDictOut')\n \n+  def test_cat(self):\n+    # verify that cat works with a List[Series] sicne this is missing from doctests\n+    df = pd.DataFrame({\n+        'one': ['A', 'B', 'C'],\n+        'two': ['BB', 'CC', 'A'],\n+        'three': ['CCC', 'AA', 'B'],\n+    })\n+    self.run_scenario(df, lambda df: df.two.str.cat([df.three], join='outer'))\n+    self.run_scenario(\n+        df, lambda df: df.one.str.cat([df.two, df.three], join='outer'))\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5NzM0Nw=="}, "originalCommit": {"oid": "d59320c9974a18001aee2ce054604585ed3da308"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTI0MzM0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDoxOToxNlrOHbeXoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyMzo1MlrOHerGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3MTE2OQ==", "bodyText": "Use ()'s rather than backslashes for continuations.", "url": "https://github.com/apache/beam/pull/12705#discussion_r498571169", "createdAt": "2020-10-02T00:19:16Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -905,7 +905,48 @@ def checked_callable_index(df):\n             preserves_partition_by=partitionings.Singleton()))\n \n class _DeferredStringMethods(frame_base.DeferredBase):\n-  pass\n+  @frame_base.args_to_kwargs(pd.core.strings.StringMethods)\n+  @frame_base.populate_defaults(pd.core.strings.StringMethods)\n+  def cat(self, others, join, **kwargs):\n+    if others is None:\n+      # Concatenate series into a single String\n+      requires = partitionings.Singleton()\n+      func = lambda df: df.cat(join=join, **kwargs)\n+      args = [self._expr]\n+\n+    elif isinstance(others, frame_base.DeferredBase) or \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "550af5eb290ca8350105725bd97aa58760fe24c1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNTQxMA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12705#discussion_r501925410", "createdAt": "2020-10-08T18:23:52Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -905,7 +905,48 @@ def checked_callable_index(df):\n             preserves_partition_by=partitionings.Singleton()))\n \n class _DeferredStringMethods(frame_base.DeferredBase):\n-  pass\n+  @frame_base.args_to_kwargs(pd.core.strings.StringMethods)\n+  @frame_base.populate_defaults(pd.core.strings.StringMethods)\n+  def cat(self, others, join, **kwargs):\n+    if others is None:\n+      # Concatenate series into a single String\n+      requires = partitionings.Singleton()\n+      func = lambda df: df.cat(join=join, **kwargs)\n+      args = [self._expr]\n+\n+    elif isinstance(others, frame_base.DeferredBase) or \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3MTE2OQ=="}, "originalCommit": {"oid": "550af5eb290ca8350105725bd97aa58760fe24c1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTI1MTQ0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDoyNTozOFrOHbecrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyMzo0NlrOHerF4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3MjQ2Mw==", "bodyText": "since", "url": "https://github.com/apache/beam/pull/12705#discussion_r498572463", "createdAt": "2020-10-02T00:25:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "diffHunk": "@@ -266,6 +266,18 @@ def check(actual):\n           lambda x: {'res': 3 * x}, proxy)\n       assert_that(res['res'], equal_to_series(three_series), 'CheckDictOut')\n \n+  def test_cat(self):\n+    # verify that cat works with a List[Series] sicne this is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "550af5eb290ca8350105725bd97aa58760fe24c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNTM0NQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12705#discussion_r501925345", "createdAt": "2020-10-08T18:23:46Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/transforms_test.py", "diffHunk": "@@ -266,6 +266,18 @@ def check(actual):\n           lambda x: {'res': 3 * x}, proxy)\n       assert_that(res['res'], equal_to_series(three_series), 'CheckDictOut')\n \n+  def test_cat(self):\n+    # verify that cat works with a List[Series] sicne this is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3MjQ2Mw=="}, "originalCommit": {"oid": "550af5eb290ca8350105725bd97aa58760fe24c1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 370, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}