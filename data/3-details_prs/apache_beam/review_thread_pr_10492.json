{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODM1ODMy", "number": 10492, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOToxMToyOFrODWD2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTozOTo0OFrODWWTuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDU4MzMyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOToxMToyOFrOFamghA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo0NDoxN1rOFaqIEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzODIxMg==", "bodyText": "Couldn't you just implement equals here instead of changing to comparing byte equality of the serialized function in SchemaCoder?", "url": "https://github.com/apache/beam/pull/10492#discussion_r363438212", "createdAt": "2020-01-06T19:11:28Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -431,7 +431,20 @@ public static GenericRecord toGenericRecord(\n    */\n   public static SerializableFunction<Row, GenericRecord> getRowToGenericRecordFunction(\n       @Nullable org.apache.avro.Schema avroSchema) {\n-    return g -> toGenericRecord(g, avroSchema);\n+    return new RowToGenericRecordFn(avroSchema);\n+  }\n+\n+  private static class RowToGenericRecordFn implements SerializableFunction<Row, GenericRecord> {\n+    private final transient org.apache.avro.Schema avroSchema;\n+\n+    RowToGenericRecordFn(@Nullable org.apache.avro.Schema avroSchema) {\n+      this.avroSchema = avroSchema;\n+    }\n+\n+    @Override\n+    public GenericRecord apply(Row input) {\n+      return toGenericRecord(input, avroSchema);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5b015ba09cc967256dddbc6f6624b25606cd7e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NzQ5MQ==", "bodyText": "This is a second different issue about capture of Avro schema on serialization (the key change is the transient part) so not really related to equals. As explained above I put both together because I use equality to validate the roundtrip of serialization/deserialization.", "url": "https://github.com/apache/beam/pull/10492#discussion_r363497491", "createdAt": "2020-01-06T21:44:17Z", "author": {"login": "iemejia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -431,7 +431,20 @@ public static GenericRecord toGenericRecord(\n    */\n   public static SerializableFunction<Row, GenericRecord> getRowToGenericRecordFunction(\n       @Nullable org.apache.avro.Schema avroSchema) {\n-    return g -> toGenericRecord(g, avroSchema);\n+    return new RowToGenericRecordFn(avroSchema);\n+  }\n+\n+  private static class RowToGenericRecordFn implements SerializableFunction<Row, GenericRecord> {\n+    private final transient org.apache.avro.Schema avroSchema;\n+\n+    RowToGenericRecordFn(@Nullable org.apache.avro.Schema avroSchema) {\n+      this.avroSchema = avroSchema;\n+    }\n+\n+    @Override\n+    public GenericRecord apply(Row input) {\n+      return toGenericRecord(input, avroSchema);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzODIxMg=="}, "originalCommit": {"oid": "5d5b015ba09cc967256dddbc6f6624b25606cd7e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzU3ODg2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/SchemaCoder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyODo0NlrOFbDbEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyODo0NlrOFbDbEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMTk1NQ==", "bodyText": "\ud83d\udc4d thanks!", "url": "https://github.com/apache/beam/pull/10492#discussion_r363911955", "createdAt": "2020-01-07T19:28:46Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/SchemaCoder.java", "diffHunk": "@@ -102,7 +102,8 @@ protected SchemaCoder(\n \n   /**\n    * Returns a {@link SchemaCoder} for the specified class. If no schema is registered for this\n-   * class, then throws {@link NoSuchSchemaException}.\n+   * class, then throws {@link NoSuchSchemaException}. The parameter functions to convert from and\n+   * to Rows <b>must</b> implement the equals contract.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf76be77f225d68df623813cd440621cdb197cb8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzYwNzYxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTozOTo0OFrOFbDtRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMTo1NTowNlrOFbG-WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxNjYxMg==", "bodyText": "I'm not 100% sure but it looks like the failures are occurring when avroSchema is null. Either way I think you need to check if avroSchemaAsString is null here.", "url": "https://github.com/apache/beam/pull/10492#discussion_r363916612", "createdAt": "2020-01-07T19:39:48Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -431,7 +465,47 @@ public static GenericRecord toGenericRecord(\n    */\n   public static SerializableFunction<Row, GenericRecord> getRowToGenericRecordFunction(\n       @Nullable org.apache.avro.Schema avroSchema) {\n-    return g -> toGenericRecord(g, avroSchema);\n+    return new RowToGenericRecordFn(avroSchema);\n+  }\n+\n+  private static class RowToGenericRecordFn implements SerializableFunction<Row, GenericRecord> {\n+    private transient org.apache.avro.Schema avroSchema;\n+\n+    RowToGenericRecordFn(@Nullable org.apache.avro.Schema avroSchema) {\n+      this.avroSchema = avroSchema;\n+    }\n+\n+    @Override\n+    public GenericRecord apply(Row input) {\n+      return toGenericRecord(input, avroSchema);\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+      if (this == other) {\n+        return true;\n+      }\n+      if (other == null || getClass() != other.getClass()) {\n+        return false;\n+      }\n+      RowToGenericRecordFn that = (RowToGenericRecordFn) other;\n+      return avroSchema.equals(that.avroSchema);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(avroSchema);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+      final String avroSchemaAsString = (avroSchema == null) ? null : avroSchema.toString();\n+      out.writeObject(avroSchemaAsString);\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+      final String avroSchemaAsString = (String) in.readObject();\n+      avroSchema = new org.apache.avro.Schema.Parser().parse(avroSchemaAsString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf76be77f225d68df623813cd440621cdb197cb8"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk3MDEzNg==", "bodyText": "Yes you are right I forgot to check the nullability of the string before the parse, I will fix that and add a method for this. Hopefully everything will be green at that moment. Thanks for the hint.", "url": "https://github.com/apache/beam/pull/10492#discussion_r363970136", "createdAt": "2020-01-07T21:55:06Z", "author": {"login": "iemejia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -431,7 +465,47 @@ public static GenericRecord toGenericRecord(\n    */\n   public static SerializableFunction<Row, GenericRecord> getRowToGenericRecordFunction(\n       @Nullable org.apache.avro.Schema avroSchema) {\n-    return g -> toGenericRecord(g, avroSchema);\n+    return new RowToGenericRecordFn(avroSchema);\n+  }\n+\n+  private static class RowToGenericRecordFn implements SerializableFunction<Row, GenericRecord> {\n+    private transient org.apache.avro.Schema avroSchema;\n+\n+    RowToGenericRecordFn(@Nullable org.apache.avro.Schema avroSchema) {\n+      this.avroSchema = avroSchema;\n+    }\n+\n+    @Override\n+    public GenericRecord apply(Row input) {\n+      return toGenericRecord(input, avroSchema);\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+      if (this == other) {\n+        return true;\n+      }\n+      if (other == null || getClass() != other.getClass()) {\n+        return false;\n+      }\n+      RowToGenericRecordFn that = (RowToGenericRecordFn) other;\n+      return avroSchema.equals(that.avroSchema);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(avroSchema);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+      final String avroSchemaAsString = (avroSchema == null) ? null : avroSchema.toString();\n+      out.writeObject(avroSchemaAsString);\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+      final String avroSchemaAsString = (String) in.readObject();\n+      avroSchema = new org.apache.avro.Schema.Parser().parse(avroSchemaAsString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxNjYxMg=="}, "originalCommit": {"oid": "cf76be77f225d68df623813cd440621cdb197cb8"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2382, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}