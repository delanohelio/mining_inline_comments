{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDc0NDY0", "number": 10701, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMjoyNVrODbZJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo1OToyNFrODbZs5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDUwMTYxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMjoyNVrOFi2tAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo1ODoxMlrOFjEX9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MjE2Mg==", "bodyText": "Can we also cache the size here in case getEstimateSizeBytes is called more than once?", "url": "https://github.com/apache/beam/pull/10701#discussion_r372092162", "createdAt": "2020-01-28T22:22:25Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "diffHunk": "@@ -508,26 +518,30 @@ private static long getNumSplits(\n \n     @Override\n     public long getEstimatedSizeBytes(PipelineOptions pipelineOptions) {\n-      try (Cluster cluster =\n-          getCluster(\n-              spec.hosts(),\n-              spec.port(),\n-              spec.username(),\n-              spec.password(),\n-              spec.localDc(),\n-              spec.consistencyLevel())) {\n-        if (isMurmur3Partitioner(cluster)) {\n-          try {\n-            List<TokenRange> tokenRanges =\n-                getTokenRanges(cluster, spec.keyspace().get(), spec.table().get());\n-            return getEstimatedSizeBytesFromTokenRanges(tokenRanges);\n-          } catch (Exception e) {\n-            LOG.warn(\"Can't estimate the size\", e);\n+      if (estimatedSize != null) {\n+        return estimatedSize;\n+      } else {\n+        try (Cluster cluster =\n+            getCluster(\n+                spec.hosts(),\n+                spec.port(),\n+                spec.username(),\n+                spec.password(),\n+                spec.localDc(),\n+                spec.consistencyLevel())) {\n+          if (isMurmur3Partitioner(cluster)) {\n+            try {\n+              List<TokenRange> tokenRanges =\n+                  getTokenRanges(cluster, spec.keyspace().get(), spec.table().get());\n+              return getEstimatedSizeBytesFromTokenRanges(tokenRanges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf347cd6e2ff0e1f0e870fb95f6323405f12e49"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxNjE0OQ==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/10701#discussion_r372316149", "createdAt": "2020-01-29T10:58:12Z", "author": {"login": "stankiewicz"}, "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "diffHunk": "@@ -508,26 +518,30 @@ private static long getNumSplits(\n \n     @Override\n     public long getEstimatedSizeBytes(PipelineOptions pipelineOptions) {\n-      try (Cluster cluster =\n-          getCluster(\n-              spec.hosts(),\n-              spec.port(),\n-              spec.username(),\n-              spec.password(),\n-              spec.localDc(),\n-              spec.consistencyLevel())) {\n-        if (isMurmur3Partitioner(cluster)) {\n-          try {\n-            List<TokenRange> tokenRanges =\n-                getTokenRanges(cluster, spec.keyspace().get(), spec.table().get());\n-            return getEstimatedSizeBytesFromTokenRanges(tokenRanges);\n-          } catch (Exception e) {\n-            LOG.warn(\"Can't estimate the size\", e);\n+      if (estimatedSize != null) {\n+        return estimatedSize;\n+      } else {\n+        try (Cluster cluster =\n+            getCluster(\n+                spec.hosts(),\n+                spec.port(),\n+                spec.username(),\n+                spec.password(),\n+                spec.localDc(),\n+                spec.consistencyLevel())) {\n+          if (isMurmur3Partitioner(cluster)) {\n+            try {\n+              List<TokenRange> tokenRanges =\n+                  getTokenRanges(cluster, spec.keyspace().get(), spec.table().get());\n+              return getEstimatedSizeBytesFromTokenRanges(tokenRanges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MjE2Mg=="}, "originalCommit": {"oid": "eaf347cd6e2ff0e1f0e870fb95f6323405f12e49"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDUxMDM4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyNjowMlrOFi2ymA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo1NzozMlrOFjEWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MzU5Mg==", "bodyText": "Could you please add some comments about this field? Like, why and when the size is cached.", "url": "https://github.com/apache/beam/pull/10701#discussion_r372093592", "createdAt": "2020-01-28T22:26:02Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "diffHunk": "@@ -375,9 +375,15 @@ private CassandraIO() {}\n   static class CassandraSource<T> extends BoundedSource<T> {\n     final Read<T> spec;\n     final List<String> splitQueries;\n+    final Long estimatedSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf347cd6e2ff0e1f0e870fb95f6323405f12e49"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxNTg0MQ==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/10701#discussion_r372315841", "createdAt": "2020-01-29T10:57:32Z", "author": {"login": "stankiewicz"}, "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "diffHunk": "@@ -375,9 +375,15 @@ private CassandraIO() {}\n   static class CassandraSource<T> extends BoundedSource<T> {\n     final Read<T> spec;\n     final List<String> splitQueries;\n+    final Long estimatedSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MzU5Mg=="}, "originalCommit": {"oid": "eaf347cd6e2ff0e1f0e870fb95f6323405f12e49"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDU5MjM2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo1OToyNFrOFi3k7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo1Nzo1MVrOFjEXSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNjQ3OQ==", "bodyText": "Just want to make sure that I understand how Cassandra does initial split. Lets say that we are going to split A into A_1 and A_2, so we expect that : size of (A) == size of (A_1) == size of(A_2) because they share the same spec. Is that correct?", "url": "https://github.com/apache/beam/pull/10701#discussion_r372106479", "createdAt": "2020-01-28T22:59:24Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "diffHunk": "@@ -450,6 +456,10 @@ private static String buildQuery(Read spec) {\n               .map(ColumnMetadata::getName)\n               .collect(Collectors.joining(\",\"));\n \n+      List<TokenRange> tokenRanges =\n+          getTokenRanges(cluster, spec.keyspace().get(), spec.table().get());\n+      final long estimatedSize = getEstimatedSizeBytesFromTokenRanges(tokenRanges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf347cd6e2ff0e1f0e870fb95f6323405f12e49"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxNTM0NA==", "bodyText": "That's good point. Based on past implementation I assumed very bad estimation but I didn't want to change this logic.\nWhat I could try to do is based on root estimates (SA) and n splits calculate SA_1 = SA/n etc. Generally this size estimates is also broken from beginning as CassandraIO can query 1 column instead of all or have filters and this estimation doesn't take it into account. It supports only size(t) where query is select * from table t. In A_1,A_2.. it's difficult to calculate size as ranges are concatenated to underlying queries.", "url": "https://github.com/apache/beam/pull/10701#discussion_r372215344", "createdAt": "2020-01-29T06:59:00Z", "author": {"login": "stankiewicz"}, "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "diffHunk": "@@ -450,6 +456,10 @@ private static String buildQuery(Read spec) {\n               .map(ColumnMetadata::getName)\n               .collect(Collectors.joining(\",\"));\n \n+      List<TokenRange> tokenRanges =\n+          getTokenRanges(cluster, spec.keyspace().get(), spec.table().get());\n+      final long estimatedSize = getEstimatedSizeBytesFromTokenRanges(tokenRanges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNjQ3OQ=="}, "originalCommit": {"oid": "eaf347cd6e2ff0e1f0e870fb95f6323405f12e49"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxNTk3Nw==", "bodyText": "fixed this logic.", "url": "https://github.com/apache/beam/pull/10701#discussion_r372315977", "createdAt": "2020-01-29T10:57:51Z", "author": {"login": "stankiewicz"}, "path": "sdks/java/io/cassandra/src/main/java/org/apache/beam/sdk/io/cassandra/CassandraIO.java", "diffHunk": "@@ -450,6 +456,10 @@ private static String buildQuery(Read spec) {\n               .map(ColumnMetadata::getName)\n               .collect(Collectors.joining(\",\"));\n \n+      List<TokenRange> tokenRanges =\n+          getTokenRanges(cluster, spec.keyspace().get(), spec.table().get());\n+      final long estimatedSize = getEstimatedSizeBytesFromTokenRanges(tokenRanges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNjQ3OQ=="}, "originalCommit": {"oid": "eaf347cd6e2ff0e1f0e870fb95f6323405f12e49"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2269, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}