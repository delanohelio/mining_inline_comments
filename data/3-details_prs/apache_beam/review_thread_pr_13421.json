{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2ODc0MDU3", "number": 13421, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzowOTozNFrOE_YILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyMzoxMVrOFDwAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODkxMDU0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzowOTozNFrOH9Dkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyMzo0NFrOH-q6sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4MzY4Nw==", "bodyText": "Unnecessary comma?", "url": "https://github.com/apache/beam/pull/13421#discussion_r533783687", "createdAt": "2020-12-01T23:09:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -643,15 +643,16 @@ def commit(self):\n \n class OutputTimer(userstate.BaseTimer):\n   def __init__(self,\n+               dynamic_timer_tag,  # type: str\n                key,\n-               window,  # type: windowed_value.BoundedWindow\n+               window,  # type: BoundedWindow\n                timestamp,  # type: timestamp.Timestamp\n                paneinfo,  # type: windowed_value.PaneInfo\n                time_domain, # type: str\n                timer_family_id,  # type: str\n                timer_coder_impl,  # type: coder_impl.TimerCoderImpl\n-               output_stream  # type: data_plane.ClosableOutputStream\n-              ):\n+               output_stream,  # type: data_plane.ClosableOutputStream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b40401b47c9f265f73eab6549912905c2026b3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NjkxNQ==", "bodyText": "removed.", "url": "https://github.com/apache/beam/pull/13421#discussion_r535476915", "createdAt": "2020-12-03T18:23:44Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -643,15 +643,16 @@ def commit(self):\n \n class OutputTimer(userstate.BaseTimer):\n   def __init__(self,\n+               dynamic_timer_tag,  # type: str\n                key,\n-               window,  # type: windowed_value.BoundedWindow\n+               window,  # type: BoundedWindow\n                timestamp,  # type: timestamp.Timestamp\n                paneinfo,  # type: windowed_value.PaneInfo\n                time_domain, # type: str\n                timer_family_id,  # type: str\n                timer_coder_impl,  # type: coder_impl.TimerCoderImpl\n-               output_stream  # type: data_plane.ClosableOutputStream\n-              ):\n+               output_stream,  # type: data_plane.ClosableOutputStream", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4MzY4Nw=="}, "originalCommit": {"oid": "f2b40401b47c9f265f73eab6549912905c2026b3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk5Mjc2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/userstate.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MToxN1rOH9EV1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyMzo1MlrOH-q7IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjMxMQ==", "bodyText": "You may want to remove the TODO there.", "url": "https://github.com/apache/beam/pull/13421#discussion_r533796311", "createdAt": "2020-12-01T23:41:17Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -188,15 +190,14 @@ def to_runner_api(self, context, key_coder, window_coder):\n class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b40401b47c9f265f73eab6549912905c2026b3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NzAyNQ==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/13421#discussion_r535477025", "createdAt": "2020-12-03T18:23:52Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -188,15 +190,14 @@ def to_runner_api(self, context, key_coder, window_coder):\n class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjMxMQ=="}, "originalCommit": {"oid": "f2b40401b47c9f265f73eab6549912905c2026b3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzAzOTc1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/direct/direct_userstate.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDozNjozMFrOIBBXKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTozODozMlrOIB3XAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0MTgwMA==", "bodyText": "Would it be better to have separated functions like get_timer(), get_timer_family instead of using a boolean", "url": "https://github.com/apache/beam/pull/13421#discussion_r537941800", "createdAt": "2020-12-08T00:36:30Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/direct/direct_userstate.py", "diffHunk": "@@ -225,14 +225,28 @@ def __init__(self, step_context, dofn, key_coder):\n \n     self.cached_states = {}\n     self.cached_timers = {}\n-\n-  def get_timer(self, timer_spec, key, window, timestamp, pane):\n+    self.cached_timer_families = {}\n+\n+  def get_timer(\n+      self,\n+      timer_spec: userstate.TimerSpec,\n+      key,\n+      window,\n+      timestamp,\n+      pane,\n+      is_timer_family=False", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597da5d0a3c070755340c0179118b140635f0be6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyMTE0Mg==", "bodyText": "I thought about that but it seemed too much code duplication.", "url": "https://github.com/apache/beam/pull/13421#discussion_r538821142", "createdAt": "2020-12-08T21:29:41Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/direct/direct_userstate.py", "diffHunk": "@@ -225,14 +225,28 @@ def __init__(self, step_context, dofn, key_coder):\n \n     self.cached_states = {}\n     self.cached_timers = {}\n-\n-  def get_timer(self, timer_spec, key, window, timestamp, pane):\n+    self.cached_timer_families = {}\n+\n+  def get_timer(\n+      self,\n+      timer_spec: userstate.TimerSpec,\n+      key,\n+      window,\n+      timestamp,\n+      pane,\n+      is_timer_family=False", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0MTgwMA=="}, "originalCommit": {"oid": "597da5d0a3c070755340c0179118b140635f0be6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyNjQ5OQ==", "bodyText": "I don't think it will result in too much code duplication: basically splitting your if branch into 2 functions and create one util function for creating cached_key.\nI'm leaning to better readability over saving code duplication.", "url": "https://github.com/apache/beam/pull/13421#discussion_r538826499", "createdAt": "2020-12-08T21:38:32Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/direct/direct_userstate.py", "diffHunk": "@@ -225,14 +225,28 @@ def __init__(self, step_context, dofn, key_coder):\n \n     self.cached_states = {}\n     self.cached_timers = {}\n-\n-  def get_timer(self, timer_spec, key, window, timestamp, pane):\n+    self.cached_timer_families = {}\n+\n+  def get_timer(\n+      self,\n+      timer_spec: userstate.TimerSpec,\n+      key,\n+      window,\n+      timestamp,\n+      pane,\n+      is_timer_family=False", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0MTgwMA=="}, "originalCommit": {"oid": "597da5d0a3c070755340c0179118b140635f0be6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjcyNTQ0OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/transforms/userstate.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMToyMTo1M1rOIB2wFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxMTozMFrOICk_Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNjUzMw==", "bodyText": "If one DoFn defines one TimerSpec and uses it in both TimerParam and TimerFamilyParam, we will have collisions on this spec, right?  And in this case, there is no way to register one callback for timer TimerSpec and one callback for timer family TimerSpec` since we are using maps in in implemetation.\nI'm leaning to keep TimerFamilySpec and use TimerParam for both TimerSpec and TimerFamilySpec, where the prefix field will help us reduce the collision.", "url": "https://github.com/apache/beam/pull/13421#discussion_r538816533", "createdAt": "2020-12-08T21:21:53Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -184,29 +186,6 @@ def to_runner_api(self, context, key_coder, window_coder):\n             coders._TimerCoder(key_coder, window_coder)))\n \n \n-# TODO(BEAM-9602): Provide support for dynamic timer.\n-class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb071bd3c6b362843e094b81310ba08534864ba"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyMjk1NQ==", "bodyText": "Theoretically it should not supported to use same TimerSpec for different DoFnParam so I'm less worried about collision, if it is not apparent to user we can also add validation checks.", "url": "https://github.com/apache/beam/pull/13421#discussion_r538822955", "createdAt": "2020-12-08T21:32:18Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -184,29 +186,6 @@ def to_runner_api(self, context, key_coder, window_coder):\n             coders._TimerCoder(key_coder, window_coder)))\n \n \n-# TODO(BEAM-9602): Provide support for dynamic timer.\n-class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNjUzMw=="}, "originalCommit": {"oid": "efb071bd3c6b362843e094b81310ba08534864ba"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyOTIzMg==", "bodyText": "I'm curious why do you choose TimerSpec -> TimerParam/TimerFamilyParam approach over TimerSpec/TimerFamilySpec -> TimerParam? Overall the API user is using TimerSpec to register on_timer callback, right?", "url": "https://github.com/apache/beam/pull/13421#discussion_r538829232", "createdAt": "2020-12-08T21:43:10Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -184,29 +186,6 @@ def to_runner_api(self, context, key_coder, window_coder):\n             coders._TimerCoder(key_coder, window_coder)))\n \n \n-# TODO(BEAM-9602): Provide support for dynamic timer.\n-class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNjUzMw=="}, "originalCommit": {"oid": "efb071bd3c6b362843e094b81310ba08534864ba"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0NDk3NQ==", "bodyText": "My main consideration is that the DoFnParam here implies the API, e.g. if using a_timer=DoFn.TimerParam(timer_spec) it translate to the old timer, if using a_timer=DoFn.TimerFamilyParam(timer_spec) it translates to a dynamic timer with which user can call .get('tag').set(), as for the timer spec it's main purpose is just to specify the name and time domain, eventually they are all mapped to https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/beam_runner_api.proto#L542, since we only have one model for the timer spec in beam runner api, I think there's also some advantages to just using one kind of timer spec in sdk.", "url": "https://github.com/apache/beam/pull/13421#discussion_r538844975", "createdAt": "2020-12-08T22:09:49Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -184,29 +186,6 @@ def to_runner_api(self, context, key_coder, window_coder):\n             coders._TimerCoder(key_coder, window_coder)))\n \n \n-# TODO(BEAM-9602): Provide support for dynamic timer.\n-class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNjUzMw=="}, "originalCommit": {"oid": "efb071bd3c6b362843e094b81310ba08534864ba"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MzAxMg==", "bodyText": "Thanks for the explanation! It sounds more like an API decision since implementation details are mostly the same.\nMy preference is:\n    class TimerDoFn(beam.DoFn):\n      timer_spec = userstate.TimerSpec('timer', userstate.TimeDomain.WATERMARK)\n      timer_family_spec = userstate.TimerFamilySpec('timer', userstate.TimeDomain.WATERMARK)\n      def process(self,\n                  element,\n                  timer=beam.DoFn.TimerParam(timer_spec),\n                  timer_map=beam.DoFn.TimerParam(timer_family_spec)):\n\n      @userstate.on_timer(timer_spec)\n      def process_timer(\n          self,\n          ts=beam.DoFn.TimestampParam,\n          timer=beam.DoFn.TimerParam(timer_spec)):\n\n      @userstate.on_timer(timer_family_spec)\n      def process_timer_map(\n          self,\n          ts=beam.DoFn.TimestampParam,\n          dynamic_tag=DoFn.DynamicTagParam,\n          timer_map=beam.DoFn.TimerParam(timer_family_spec)):\nAnd you are proposing the API like:\n    class TimerDoFn(beam.DoFn):\n      timer_spec = userstate.TimerSpec('timer', userstate.TimeDomain.WATERMARK)\n      timer_family_spec = userstate.TimerSpec('timer', userstate.TimeDomain.WATERMARK)\n      def process(self,\n                  element,\n                  timer=beam.DoFn.TimerParam(timer_spec),\n                  timer_map=beam.DoFn.TimerFamilyParam(timer_family_spec)):\n\n      @userstate.on_timer(timer_spec)\n      def process_timer(\n          self,\n          ts=beam.DoFn.TimestampParam,\n          timer=beam.DoFn.TimerParam(timer_spec)):\n\n      @userstate.on_timer(timer_family_spec)\n      def process_timer(\n          self,\n          ts=beam.DoFn.TimestampParam,\n          timer=beam.DoFn.TimerFamilyParam(timer_family_spec)):\nAnd within your preferred API, the suer is not allowed to use the same name for both specs unless you want to additional logic around timer param to add prefix or just throw validation errors.\nDo you think it's a good idea to ask options on dev list?", "url": "https://github.com/apache/beam/pull/13421#discussion_r538893012", "createdAt": "2020-12-08T23:41:03Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -184,29 +186,6 @@ def to_runner_api(self, context, key_coder, window_coder):\n             coders._TimerCoder(key_coder, window_coder)))\n \n \n-# TODO(BEAM-9602): Provide support for dynamic timer.\n-class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNjUzMw=="}, "originalCommit": {"oid": "efb071bd3c6b362843e094b81310ba08534864ba"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NDA3MQ==", "bodyText": "Sounds good, I'll start a thread on dev list.", "url": "https://github.com/apache/beam/pull/13421#discussion_r539574071", "createdAt": "2020-12-09T19:11:30Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -184,29 +186,6 @@ def to_runner_api(self, context, key_coder, window_coder):\n             coders._TimerCoder(key_coder, window_coder)))\n \n \n-# TODO(BEAM-9602): Provide support for dynamic timer.\n-class TimerFamilySpec(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNjUzMw=="}, "originalCommit": {"oid": "efb071bd3c6b362843e094b81310ba08534864ba"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDY4NDg1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1NDozM1rOIDi2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo0OTo1OVrOIEDcng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NzU5Mw==", "bodyText": "Can we also test:\ndynamic_timer.set(timestamp)\ndynamic_timer.set(timestamp, dynamic_timer_tag='')\nhere, where the later one should override the first one?", "url": "https://github.com/apache/beam/pull/13421#discussion_r540587593", "createdAt": "2020-12-10T23:54:33Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "diffHunk": "@@ -493,6 +493,30 @@ def is_buffered_correctly(actual):\n \n       assert_that(actual, is_buffered_correctly)\n \n+  def test_pardo_dynamic_timer(self):\n+    class DynamicTimerDoFn(beam.DoFn):\n+      dynamic_timer_spec = userstate.TimerSpec(\n+          'dynamic_timer', userstate.TimeDomain.WATERMARK)\n+\n+      def process(\n+          self, element,\n+          dynamic_timer=beam.DoFn.TimerParam(dynamic_timer_spec)):\n+        dynamic_timer.set(element[1], dynamic_timer_tag=element[0])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c6368a4ceb0192a291a5c4173b1464403a49c8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMTY5NA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13421#discussion_r541121694", "createdAt": "2020-12-11T17:49:59Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "diffHunk": "@@ -493,6 +493,30 @@ def is_buffered_correctly(actual):\n \n       assert_that(actual, is_buffered_correctly)\n \n+  def test_pardo_dynamic_timer(self):\n+    class DynamicTimerDoFn(beam.DoFn):\n+      dynamic_timer_spec = userstate.TimerSpec(\n+          'dynamic_timer', userstate.TimeDomain.WATERMARK)\n+\n+      def process(\n+          self, element,\n+          dynamic_timer=beam.DoFn.TimerParam(dynamic_timer_spec)):\n+        dynamic_timer.set(element[1], dynamic_timer_tag=element[0])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NzU5Mw=="}, "originalCommit": {"oid": "f4c6368a4ceb0192a291a5c4173b1464403a49c8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDc2Njg3OnYy", "diffSide": "RIGHT", "path": "sdks/python/scripts/generate_pydoc.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyMzoxMVrOIDjiMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MDowMVrOIEDcwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODgzNQ==", "bodyText": "Remove this?", "url": "https://github.com/apache/beam/pull/13421#discussion_r540598835", "createdAt": "2020-12-11T00:23:11Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/scripts/generate_pydoc.sh", "diffHunk": "@@ -188,6 +188,7 @@ ignore_identifiers = [\n   # DoFn param inner classes, due to a Sphinx misparsing of inner classes\n   '_StateDoFnParam',\n   '_TimerDoFnParam',\n+  '_TimerFamilyDoFnParam',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c6368a4ceb0192a291a5c4173b1464403a49c8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMTczMA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13421#discussion_r541121730", "createdAt": "2020-12-11T17:50:01Z", "author": {"login": "y1chi"}, "path": "sdks/python/scripts/generate_pydoc.sh", "diffHunk": "@@ -188,6 +188,7 @@ ignore_identifiers = [\n   # DoFn param inner classes, due to a Sphinx misparsing of inner classes\n   '_StateDoFnParam',\n   '_TimerDoFnParam',\n+  '_TimerFamilyDoFnParam',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODgzNQ=="}, "originalCommit": {"oid": "f4c6368a4ceb0192a291a5c4173b1464403a49c8"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2654, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}