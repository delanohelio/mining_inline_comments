{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzkyMTQw", "number": 11474, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0Mzo0OVrOD0U3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0Nzo0OVrOD0YeNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTk0NDA0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0Mzo0OVrOGJN0qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDo1MzozOVrOGJeizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNjg0Mw==", "bodyText": "The idiomatic form for this would be to do the following:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvar mainIn = &MainInput{\n          \n          \n            \n             mainIn := &MainInput{\n          \n      \n    \n    \n  \n\nvar declarations are usually for uninitialized variables.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412316843", "createdAt": "2020-04-21T16:43:49Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -263,20 +266,33 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(ctx context.Context\n \t\treturn errors.Errorf(\"invalid status for ParDo %v: %v, want Active\", n.PDo.UID, n.PDo.status)\n \t}\n \n-\tuserElm := elm.Elm.(*FullValue).Elm.(*FullValue)\n \trest := elm.Elm.(*FullValue).Elm2\n \trt := n.inv.Invoke(rest)\n+\tvar mainIn = &MainInput{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5MDc5OA==", "bodyText": "Whoops, that was left behind in editing. Fixed", "url": "https://github.com/apache/beam/pull/11474#discussion_r412590798", "createdAt": "2020-04-22T00:53:39Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -263,20 +266,33 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(ctx context.Context\n \t\treturn errors.Errorf(\"invalid status for ParDo %v: %v, want Active\", n.PDo.UID, n.PDo.status)\n \t}\n \n-\tuserElm := elm.Elm.(*FullValue).Elm.(*FullValue)\n \trest := elm.Elm.(*FullValue).Elm2\n \trt := n.inv.Invoke(rest)\n+\tvar mainIn = &MainInput{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNjg0Mw=="}, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTk0NzM1OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0NDozOFrOGJN2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTowMzoxMVrOGJeu3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNzM1OA==", "bodyText": "Note for the performance pass: We can know KV vs not KV from the input PCollection coderat exec/translate.go time, so we can avoid doing this if branch per element.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412317358", "createdAt": "2020-04-21T16:44:38Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -263,20 +266,33 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(ctx context.Context\n \t\treturn errors.Errorf(\"invalid status for ParDo %v: %v, want Active\", n.PDo.UID, n.PDo.status)\n \t}\n \n-\tuserElm := elm.Elm.(*FullValue).Elm.(*FullValue)\n \trest := elm.Elm.(*FullValue).Elm2\n \trt := n.inv.Invoke(rest)\n+\tvar mainIn = &MainInput{\n+\t\tValues:   values,\n+\t\tRTracker: rt,\n+\t}\n \n-\treturn n.PDo.processMainInput(&MainInput{\n-\t\tKey: FullValue{ // User userElm's values but the top-level windows and timestamp.\n+\t// For the key, the way we fill it out depends on whether the input element\n+\t// is a KV or single-element. Single-elements might have been lifted out of\n+\t// their FullValue if they were decoded, so we need to have a case for that.\n+\t// Also, we use the the top-level windows and timestamp.\n+\tif userElm, ok := elm.Elm.(*FullValue).Elm.(*FullValue); ok {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5Mzg4NA==", "bodyText": "Ack. Added a TODO to remind me.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412593884", "createdAt": "2020-04-22T01:03:11Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -263,20 +266,33 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(ctx context.Context\n \t\treturn errors.Errorf(\"invalid status for ParDo %v: %v, want Active\", n.PDo.UID, n.PDo.status)\n \t}\n \n-\tuserElm := elm.Elm.(*FullValue).Elm.(*FullValue)\n \trest := elm.Elm.(*FullValue).Elm2\n \trt := n.inv.Invoke(rest)\n+\tvar mainIn = &MainInput{\n+\t\tValues:   values,\n+\t\tRTracker: rt,\n+\t}\n \n-\treturn n.PDo.processMainInput(&MainInput{\n-\t\tKey: FullValue{ // User userElm's values but the top-level windows and timestamp.\n+\t// For the key, the way we fill it out depends on whether the input element\n+\t// is a KV or single-element. Single-elements might have been lifted out of\n+\t// their FullValue if they were decoded, so we need to have a case for that.\n+\t// Also, we use the the top-level windows and timestamp.\n+\tif userElm, ok := elm.Elm.(*FullValue).Elm.(*FullValue); ok {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNzM1OA=="}, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjUxNjU2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0MzozNlrOGJTEtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoyNToyMFrOGJgbQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwMjg2OA==", "bodyText": "NoActionRequiredNit: I don't like that this gets to 6 indentations deep, which is a bit of a readability concern, but I'm not certain that moving this to a helper function would be that helpful. We'd probably need to break it into two helpers, one from handling the graphx.URNDoFn, and then this graph.ParDo block.\nThese are a changes for another PR though.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412402868", "createdAt": "2020-04-21T18:43:36Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "diffHunk": "@@ -372,32 +386,43 @@ func (b *builder) makeLink(from string, id linkID) (Node, error) {\n \n \t\t\tswitch op {\n \t\t\tcase graph.ParDo:\n-\t\t\t\tn := &ParDo{UID: b.idgen.New(), Inbound: in, Out: out}\n-\t\t\t\tn.Fn, err = graph.AsDoFn(fn, graph.MainUnknown)\n+\t\t\t\tdofn, err := graph.AsDoFn(fn, graph.MainUnknown)\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n-\t\t\t\tn.PID = transform.GetUniqueName()\n-\n-\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n-\t\t\t\tfor i := 1; i < len(input); i++ {\n-\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n-\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n-\n-\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\treturn nil, err\n+\t\t\t\tswitch urn {\n+\t\t\t\tcase urnPairWithRestriction:\n+\t\t\t\t\tu = &PairWithRestriction{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tcase urnSplitAndSizeRestrictions:\n+\t\t\t\t\tu = &SplitAndSizeRestrictions{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tdefault:\n+\t\t\t\t\tn := &ParDo{UID: b.idgen.New(), Fn: dofn, Inbound: in, Out: out}\n+\t\t\t\t\tn.PID = transform.GetUniqueName()\n+\n+\t\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n+\t\t\t\t\tfor i := 1; i < len(input); i++ {\n+\t\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMTYzMw==", "bodyText": "Agreed. I was iffy on it myself since even 5 indentations deep was already getting difficult to follow.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412621633", "createdAt": "2020-04-22T02:25:20Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "diffHunk": "@@ -372,32 +386,43 @@ func (b *builder) makeLink(from string, id linkID) (Node, error) {\n \n \t\t\tswitch op {\n \t\t\tcase graph.ParDo:\n-\t\t\t\tn := &ParDo{UID: b.idgen.New(), Inbound: in, Out: out}\n-\t\t\t\tn.Fn, err = graph.AsDoFn(fn, graph.MainUnknown)\n+\t\t\t\tdofn, err := graph.AsDoFn(fn, graph.MainUnknown)\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n-\t\t\t\tn.PID = transform.GetUniqueName()\n-\n-\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n-\t\t\t\tfor i := 1; i < len(input); i++ {\n-\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n-\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n-\n-\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\treturn nil, err\n+\t\t\t\tswitch urn {\n+\t\t\t\tcase urnPairWithRestriction:\n+\t\t\t\t\tu = &PairWithRestriction{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tcase urnSplitAndSizeRestrictions:\n+\t\t\t\t\tu = &SplitAndSizeRestrictions{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tdefault:\n+\t\t\t\t\tn := &ParDo{UID: b.idgen.New(), Fn: dofn, Inbound: in, Out: out}\n+\t\t\t\t\tn.PID = transform.GetUniqueName()\n+\n+\t\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n+\t\t\t\t\tfor i := 1; i < len(input); i++ {\n+\t\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwMjg2OA=="}, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjUzNDk1OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0Nzo0OVrOGJTPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjozNjowNlrOGJgpIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNTYwMw==", "bodyText": "Consider moving the common case to always be used, and then corrected afterwards.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tif urn == urnProcessSizedElementsAndRestrictions {\n          \n          \n            \n            \t\t\t\t\t\tu = &ProcessSizedElementsAndRestrictions{PDo: n}\n          \n          \n            \n            \t\t\t\t\t} else {\n          \n          \n            \n            \t\t\t\t\t\tu = n\n          \n          \n            \n            \t\t\t\t\t}\n          \n          \n            \n            \t\t\t\t\tu = n\n          \n          \n            \n            \t\t\t\t\tif urn == urnProcessSizedElementsAndRestrictions {\n          \n          \n            \n            \t\t\t\t\t\tu = &ProcessSizedElementsAndRestrictions{PDo: n}\n          \n          \n            \n            \t\t\t\t\t}\n          \n      \n    \n    \n  \n\nThis idiom avoids the else block, and indicates that if there were a ?: operator in Go, that's what would happen. The compiler will optimize this appropriately.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412405603", "createdAt": "2020-04-21T18:47:49Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "diffHunk": "@@ -372,32 +386,43 @@ func (b *builder) makeLink(from string, id linkID) (Node, error) {\n \n \t\t\tswitch op {\n \t\t\tcase graph.ParDo:\n-\t\t\t\tn := &ParDo{UID: b.idgen.New(), Inbound: in, Out: out}\n-\t\t\t\tn.Fn, err = graph.AsDoFn(fn, graph.MainUnknown)\n+\t\t\t\tdofn, err := graph.AsDoFn(fn, graph.MainUnknown)\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n-\t\t\t\tn.PID = transform.GetUniqueName()\n-\n-\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n-\t\t\t\tfor i := 1; i < len(input); i++ {\n-\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n-\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n-\n-\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\treturn nil, err\n+\t\t\t\tswitch urn {\n+\t\t\t\tcase urnPairWithRestriction:\n+\t\t\t\t\tu = &PairWithRestriction{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tcase urnSplitAndSizeRestrictions:\n+\t\t\t\t\tu = &SplitAndSizeRestrictions{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tdefault:\n+\t\t\t\t\tn := &ParDo{UID: b.idgen.New(), Fn: dofn, Inbound: in, Out: out}\n+\t\t\t\t\tn.PID = transform.GetUniqueName()\n+\n+\t\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n+\t\t\t\t\tfor i := 1; i < len(input); i++ {\n+\t\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n+\t\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n+\n+\t\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n+\t\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\t\treturn nil, err\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tsid := StreamID{\n+\t\t\t\t\t\t\tPort:         Port{URL: b.desc.GetStateApiServiceDescriptor().GetUrl()},\n+\t\t\t\t\t\t\tPtransformID: id.to,\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tsideInputID := fmt.Sprintf(\"i%v\", i) // SideInputID (= local id, \"iN\")\n+\t\t\t\t\t\tside := NewSideInputAdapter(sid, sideInputID, coder.NewW(ec, wc))\n+\t\t\t\t\t\tn.Side = append(n.Side, side)\n \t\t\t\t\t}\n-\n-\t\t\t\t\tsid := StreamID{\n-\t\t\t\t\t\tPort:         Port{URL: b.desc.GetStateApiServiceDescriptor().GetUrl()},\n-\t\t\t\t\t\tPtransformID: id.to,\n+\t\t\t\t\tif urn == urnProcessSizedElementsAndRestrictions {\n+\t\t\t\t\t\tu = &ProcessSizedElementsAndRestrictions{PDo: n}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tu = n\n \t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyNTE4Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412625187", "createdAt": "2020-04-22T02:36:06Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "diffHunk": "@@ -372,32 +386,43 @@ func (b *builder) makeLink(from string, id linkID) (Node, error) {\n \n \t\t\tswitch op {\n \t\t\tcase graph.ParDo:\n-\t\t\t\tn := &ParDo{UID: b.idgen.New(), Inbound: in, Out: out}\n-\t\t\t\tn.Fn, err = graph.AsDoFn(fn, graph.MainUnknown)\n+\t\t\t\tdofn, err := graph.AsDoFn(fn, graph.MainUnknown)\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n-\t\t\t\tn.PID = transform.GetUniqueName()\n-\n-\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n-\t\t\t\tfor i := 1; i < len(input); i++ {\n-\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n-\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n-\n-\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\treturn nil, err\n+\t\t\t\tswitch urn {\n+\t\t\t\tcase urnPairWithRestriction:\n+\t\t\t\t\tu = &PairWithRestriction{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tcase urnSplitAndSizeRestrictions:\n+\t\t\t\t\tu = &SplitAndSizeRestrictions{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tdefault:\n+\t\t\t\t\tn := &ParDo{UID: b.idgen.New(), Fn: dofn, Inbound: in, Out: out}\n+\t\t\t\t\tn.PID = transform.GetUniqueName()\n+\n+\t\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n+\t\t\t\t\tfor i := 1; i < len(input); i++ {\n+\t\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n+\t\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n+\n+\t\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n+\t\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\t\treturn nil, err\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tsid := StreamID{\n+\t\t\t\t\t\t\tPort:         Port{URL: b.desc.GetStateApiServiceDescriptor().GetUrl()},\n+\t\t\t\t\t\t\tPtransformID: id.to,\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tsideInputID := fmt.Sprintf(\"i%v\", i) // SideInputID (= local id, \"iN\")\n+\t\t\t\t\t\tside := NewSideInputAdapter(sid, sideInputID, coder.NewW(ec, wc))\n+\t\t\t\t\t\tn.Side = append(n.Side, side)\n \t\t\t\t\t}\n-\n-\t\t\t\t\tsid := StreamID{\n-\t\t\t\t\t\tPort:         Port{URL: b.desc.GetStateApiServiceDescriptor().GetUrl()},\n-\t\t\t\t\t\tPtransformID: id.to,\n+\t\t\t\t\tif urn == urnProcessSizedElementsAndRestrictions {\n+\t\t\t\t\t\tu = &ProcessSizedElementsAndRestrictions{PDo: n}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tu = n\n \t\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNTYwMw=="}, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1338, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}