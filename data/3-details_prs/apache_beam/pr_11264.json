{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODY2Mjc1", "number": 11264, "title": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.", "bodyText": "This may be a more natural interface for mixing pandas-style code with Beam.\nIt does have the downside of being inefficient if dataframes are converted back to PCollections one at a time.\nBuilds on #10760\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-30T19:58:45Z", "url": "https://github.com/apache/beam/pull/11264", "merged": true, "mergeCommit": {"oid": "6060d9944f9cffb34abc056e14e3ae8ba4a69cdd"}, "closed": true, "closedAt": "2020-04-20T21:27:20Z", "author": {"login": "robertwb"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS4r4cABqjMxODExMTcxNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZh4iygFqTM5NjYyODkzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e1ae700e420ac988fdf1216ce1b06cd013ac5f2", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/2e1ae700e420ac988fdf1216ce1b06cd013ac5f2", "committedDate": "2020-03-30T19:54:37Z", "message": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.\n\nThis may be a more natural interface for mixing pandas-style code with Beam.\n\nIt does have the downside of being inefficient if dataframes are converted\nback to PCollections one at a time."}, "afterCommit": {"oid": "272aa65113cb359a45a35b82a096976d11ae9e94", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/272aa65113cb359a45a35b82a096976d11ae9e94", "committedDate": "2020-03-31T01:19:10Z", "message": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.\n\nThis may be a more natural interface for mixing pandas-style code with Beam.\n\nIt does have the downside of being inefficient if dataframes are converted\nback to PCollections one at a time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "272aa65113cb359a45a35b82a096976d11ae9e94", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/272aa65113cb359a45a35b82a096976d11ae9e94", "committedDate": "2020-03-31T01:19:10Z", "message": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.\n\nThis may be a more natural interface for mixing pandas-style code with Beam.\n\nIt does have the downside of being inefficient if dataframes are converted\nback to PCollections one at a time."}, "afterCommit": {"oid": "02c525bb5cfdf5cabed727f514e354a01ed11ae2", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/02c525bb5cfdf5cabed727f514e354a01ed11ae2", "committedDate": "2020-03-31T05:55:49Z", "message": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.\n\nThis may be a more natural interface for mixing pandas-style code with Beam.\n\nIt does have the downside of being inefficient if dataframes are converted\nback to PCollections one at a time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02c525bb5cfdf5cabed727f514e354a01ed11ae2", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/02c525bb5cfdf5cabed727f514e354a01ed11ae2", "committedDate": "2020-03-31T05:55:49Z", "message": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.\n\nThis may be a more natural interface for mixing pandas-style code with Beam.\n\nIt does have the downside of being inefficient if dataframes are converted\nback to PCollections one at a time."}, "afterCommit": {"oid": "1bbac0f5d700718fb98ea3b8496ac87857867d87", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/1bbac0f5d700718fb98ea3b8496ac87857867d87", "committedDate": "2020-03-31T06:02:32Z", "message": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.\n\nThis may be a more natural interface for mixing pandas-style code with Beam.\n\nIt does have the downside of being inefficient if dataframes are converted\nback to PCollections one at a time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzgxNTIz", "url": "https://github.com/apache/beam/pull/11264#pullrequestreview-388381523", "createdAt": "2020-04-06T15:46:21Z", "commit": {"oid": "3f96077e14233b23390e64ce15fcaabf1d2efeb5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo0NjoyMVrOGBeJvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowODo1OVrOGBfKng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5NTc3NA==", "bodyText": "Could you add something like \".. by retrieving the name of these variables in the calling context\"", "url": "https://github.com/apache/beam/pull/11264#discussion_r404195774", "createdAt": "2020-04-06T15:46:21Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -0,0 +1,71 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+import inspect\n+\n+from apache_beam import pvalue\n+from apache_beam.dataframe import expressions\n+from apache_beam.dataframe import frame_base\n+from apache_beam.dataframe import transforms\n+\n+\n+def to_dataframe(pc):\n+  pass\n+\n+\n+# TODO: Or should this be called as_dataframe?\n+def to_dataframe(pcoll, proxy):\n+  return frame_base.DeferredFrame.wrap(\n+      expressions.PlaceholderExpression(proxy, pcoll))\n+\n+\n+# TODO: Or should this be called from_dataframe?\n+def to_pcollection(*dataframes, **kwargs):\n+  label = kwargs.pop('label', None)\n+  assert not kwargs  # TODO(Py3): Use PEP 3102\n+  if label is None:\n+    # Attempt to come up with a reasonable, stable label.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f96077e14233b23390e64ce15fcaabf1d2efeb5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwMDQzOQ==", "bodyText": "This looks like something that should be \"package-private\". Should it get an underscore prefix?", "url": "https://github.com/apache/beam/pull/11264#discussion_r404200439", "createdAt": "2020-04-06T15:52:39Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -0,0 +1,255 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam import transforms\n+from apache_beam.dataframe import expressions\n+from apache_beam.dataframe import frame_base\n+from apache_beam.dataframe import frames  # pylint: disable=unused-import\n+\n+\n+class DataframeTransform(transforms.PTransform):\n+  \"\"\"A PTransform for applying function that takes and returns dataframes\n+  to one or more PCollections.\n+\n+  For example, if pcoll is a PCollection of dataframes, one could write::\n+\n+      pcoll | DataframeTransform(lambda df: df.group_by('key').sum(), proxy=...)\n+\n+  To pass multiple PCollections, pass a tuple of PCollections wich will be\n+  passed to the callable as positional arguments, or a dictionary of\n+  PCollections, in which case they will be passed as keyword arguments.\n+  \"\"\"\n+  def __init__(self, func, proxy):\n+    self._func = func\n+    self._proxy = proxy\n+\n+  def expand(self, input_pcolls):\n+    def wrap_as_dict(values):\n+      if isinstance(values, dict):\n+        return values\n+      elif isinstance(values, tuple):\n+        return dict(enumerate(values))\n+      else:\n+        return {None: values}\n+\n+    # TODO: Infer the proxy from the input schema.\n+    def proxy(key):\n+      if key is None:\n+        return self._proxy\n+      else:\n+        return self._proxy[key]\n+\n+    # The input can be a dictionary, tuple, or plain PCollection.\n+    # Wrap as a dict for homogeneity.\n+    # TODO: Possibly inject batching here.\n+    input_dict = wrap_as_dict(input_pcolls)\n+    placeholders = {\n+        key: frame_base.DeferredFrame.wrap(\n+            expressions.PlaceholderExpression(proxy(key)))\n+        for key in input_dict.keys()\n+    }\n+\n+    # The calling convention of the user-supplied func varies according to the\n+    # type of the input.\n+    if isinstance(input_pcolls, dict):\n+      result_frames = self._func(**placeholders)\n+    elif isinstance(input_pcolls, tuple):\n+      result_frames = self._func(\n+          *(value for _, value in sorted(placeholders.items())))\n+    else:\n+      result_frames = self._func(placeholders[None])\n+\n+    # Likewise the output may be a dict, tuple, or raw (deferred) Dataframe.\n+    result_dict = wrap_as_dict(result_frames)\n+\n+    result_pcolls = {\n+        placeholders[key]._expr: pcoll\n+        for key, pcoll in input_dict.items()\n+    } | 'Eval' >> DataframeExpressionsTransform(\n+        {key: df._expr\n+         for key, df in result_dict.items()})\n+\n+    # Convert the result back into a set of PCollections.\n+    if isinstance(result_frames, dict):\n+      return result_pcolls\n+    elif isinstance(result_frames, tuple):\n+      return tuple((value for _, value in sorted(result_pcolls.items())))\n+    else:\n+      return result_pcolls[None]\n+\n+\n+class DataframeExpressionsTransform(transforms.PTransform):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f96077e14233b23390e64ce15fcaabf1d2efeb5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMDE0OQ==", "bodyText": "I like as_dataframe if it were a method on PCollection since it's fluent - df = pcol.as_dataframe()\nSimilarly, below from_dataframe would be fluent as a static method on PCollection, but PCollection.from_dataframe feels too verbose.\nWould you agree we want something like the following to be as easy and intuitive as possible?\npcol = p | \"Read from Source\" >> beam.io.SomeSchemaSource(foo)\n\ndf = pcol.as_dataframe()\ndf_agg = df[df[\"measurement\" > threshold]].groupby(\"id\").count()\n\nPCollection.from_dataframe(df_agg) | \"Write to Sink\" >> beam.io.SomeSink(bar)", "url": "https://github.com/apache/beam/pull/11264#discussion_r404210149", "createdAt": "2020-04-06T16:05:58Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -0,0 +1,71 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+import inspect\n+\n+from apache_beam import pvalue\n+from apache_beam.dataframe import expressions\n+from apache_beam.dataframe import frame_base\n+from apache_beam.dataframe import transforms\n+\n+\n+def to_dataframe(pc):\n+  pass\n+\n+\n+# TODO: Or should this be called as_dataframe?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f96077e14233b23390e64ce15fcaabf1d2efeb5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMDU5MA==", "bodyText": "Could you add typehints and docstrings here and on to_dataframe?", "url": "https://github.com/apache/beam/pull/11264#discussion_r404210590", "createdAt": "2020-04-06T16:06:38Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -0,0 +1,71 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+import inspect\n+\n+from apache_beam import pvalue\n+from apache_beam.dataframe import expressions\n+from apache_beam.dataframe import frame_base\n+from apache_beam.dataframe import transforms\n+\n+\n+def to_dataframe(pc):\n+  pass\n+\n+\n+# TODO: Or should this be called as_dataframe?\n+def to_dataframe(pcoll, proxy):\n+  return frame_base.DeferredFrame.wrap(\n+      expressions.PlaceholderExpression(proxy, pcoll))\n+\n+\n+# TODO: Or should this be called from_dataframe?\n+def to_pcollection(*dataframes, **kwargs):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f96077e14233b23390e64ce15fcaabf1d2efeb5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMjM4Mg==", "bodyText": "Could this be streamlined with calls to to_dataframe and to_pcollection?", "url": "https://github.com/apache/beam/pull/11264#discussion_r404212382", "createdAt": "2020-04-06T16:08:59Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -0,0 +1,255 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam import transforms\n+from apache_beam.dataframe import expressions\n+from apache_beam.dataframe import frame_base\n+from apache_beam.dataframe import frames  # pylint: disable=unused-import\n+\n+\n+class DataframeTransform(transforms.PTransform):\n+  \"\"\"A PTransform for applying function that takes and returns dataframes\n+  to one or more PCollections.\n+\n+  For example, if pcoll is a PCollection of dataframes, one could write::\n+\n+      pcoll | DataframeTransform(lambda df: df.group_by('key').sum(), proxy=...)\n+\n+  To pass multiple PCollections, pass a tuple of PCollections wich will be\n+  passed to the callable as positional arguments, or a dictionary of\n+  PCollections, in which case they will be passed as keyword arguments.\n+  \"\"\"\n+  def __init__(self, func, proxy):\n+    self._func = func\n+    self._proxy = proxy\n+\n+  def expand(self, input_pcolls):\n+    def wrap_as_dict(values):\n+      if isinstance(values, dict):\n+        return values\n+      elif isinstance(values, tuple):\n+        return dict(enumerate(values))\n+      else:\n+        return {None: values}\n+\n+    # TODO: Infer the proxy from the input schema.\n+    def proxy(key):\n+      if key is None:\n+        return self._proxy\n+      else:\n+        return self._proxy[key]\n+\n+    # The input can be a dictionary, tuple, or plain PCollection.\n+    # Wrap as a dict for homogeneity.\n+    # TODO: Possibly inject batching here.\n+    input_dict = wrap_as_dict(input_pcolls)\n+    placeholders = {\n+        key: frame_base.DeferredFrame.wrap(\n+            expressions.PlaceholderExpression(proxy(key)))\n+        for key in input_dict.keys()\n+    }\n+\n+    # The calling convention of the user-supplied func varies according to the\n+    # type of the input.\n+    if isinstance(input_pcolls, dict):\n+      result_frames = self._func(**placeholders)\n+    elif isinstance(input_pcolls, tuple):\n+      result_frames = self._func(\n+          *(value for _, value in sorted(placeholders.items())))\n+    else:\n+      result_frames = self._func(placeholders[None])\n+\n+    # Likewise the output may be a dict, tuple, or raw (deferred) Dataframe.\n+    result_dict = wrap_as_dict(result_frames)\n+\n+    result_pcolls = {\n+        placeholders[key]._expr: pcoll\n+        for key, pcoll in input_dict.items()\n+    } | 'Eval' >> DataframeExpressionsTransform(\n+        {key: df._expr\n+         for key, df in result_dict.items()})\n+\n+    # Convert the result back into a set of PCollections.\n+    if isinstance(result_frames, dict):\n+      return result_pcolls\n+    elif isinstance(result_frames, tuple):\n+      return tuple((value for _, value in sorted(result_pcolls.items())))\n+    else:\n+      return result_pcolls[None]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f96077e14233b23390e64ce15fcaabf1d2efeb5"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c402a454b52c7646638b0259026a82fc745a2be", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/9c402a454b52c7646638b0259026a82fc745a2be", "committedDate": "2020-04-13T19:59:07Z", "message": "[BEAM-9496] Add to_dataframe and to_pcollection APIs.\n\nThis may be a more natural interface for mixing pandas-style code with Beam.\n\nIt does have the downside of being inefficient if dataframes are converted\nback to PCollections one at a time."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9363e924f24e8136870b3cea64c0aba4c6064685", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/9363e924f24e8136870b3cea64c0aba4c6064685", "committedDate": "2020-04-13T19:59:07Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80f44114644aee64ab28240dcae945f7b09174cd", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/80f44114644aee64ab28240dcae945f7b09174cd", "committedDate": "2020-04-13T21:53:00Z", "message": "Rewrite DataframeTransform in terms of to/from_pcollection."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f96077e14233b23390e64ce15fcaabf1d2efeb5", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/3f96077e14233b23390e64ce15fcaabf1d2efeb5", "committedDate": "2020-03-31T21:58:18Z", "message": "lint"}, "afterCommit": {"oid": "80f44114644aee64ab28240dcae945f7b09174cd", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/80f44114644aee64ab28240dcae945f7b09174cd", "committedDate": "2020-04-13T21:53:00Z", "message": "Rewrite DataframeTransform in terms of to/from_pcollection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758678c742c97722cbac161db72ade740118b6af", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/758678c742c97722cbac161db72ade740118b6af", "committedDate": "2020-04-13T22:27:46Z", "message": "typing, docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "202745e8c715ebcb18a17f4af760409f3b9a2294", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/202745e8c715ebcb18a17f4af760409f3b9a2294", "committedDate": "2020-04-13T22:14:07Z", "message": "typing"}, "afterCommit": {"oid": "758678c742c97722cbac161db72ade740118b6af", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/758678c742c97722cbac161db72ade740118b6af", "committedDate": "2020-04-13T22:27:46Z", "message": "typing, docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "582b64ce4cbacc4972720a406c22c5d7344e6331", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/582b64ce4cbacc4972720a406c22c5d7344e6331", "committedDate": "2020-04-14T16:35:33Z", "message": "lint, yapf, py2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NjI4OTMz", "url": "https://github.com/apache/beam/pull/11264#pullrequestreview-396628933", "createdAt": "2020-04-20T16:42:49Z", "commit": {"oid": "582b64ce4cbacc4972720a406c22c5d7344e6331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4780, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}