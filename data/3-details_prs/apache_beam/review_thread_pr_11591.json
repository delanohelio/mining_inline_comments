{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzEzNDg2", "number": 11591, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMjowMTozNlrOD4fw_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMjowMTozNlrOD4fw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTY3Mjk0OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunction.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMjowMTozNlrOGPW30Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDo1ODoyM1rOGPiUZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NjU2MQ==", "bodyText": "Doesn't it make sense to make this change in batch as well for spark/flink in FlinkExecutableStageFunction and SparkExecutableStageFunction?\nAny watermark based timers should continue to be eligible and continue to fire while in batch while the processing time timers should be dropped.", "url": "https://github.com/apache/beam/pull/11591#discussion_r418756561", "createdAt": "2020-05-01T22:01:36Z", "author": {"login": "lukecwik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunction.java", "diffHunk": "@@ -247,25 +247,27 @@ public void reduce(Iterable<WindowedValue<InputT>> iterable, Collector<RawUnionV\n     timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n \n     // Now we fire the timers and process elements generated by timers (which may be timers itself)\n-    try (RemoteBundle bundle =\n-        stageBundleFactory.getBundle(\n-            receiverFactory, timerReceiverFactory, stateRequestHandler, progressHandler)) {\n-\n-      PipelineTranslatorUtils.fireEligibleTimers(\n-          timerInternals,\n-          (KV<String, String> transformAndTimerId, Timer<?> timerValue) -> {\n-            FnDataReceiver<Timer> fnTimerReceiver =\n-                bundle.getTimerReceivers().get(transformAndTimerId);\n-            Preconditions.checkNotNull(\n-                fnTimerReceiver, \"No FnDataReceiver found for %s\", transformAndTimerId);\n-            try {\n-              fnTimerReceiver.accept(timerValue);\n-            } catch (Exception e) {\n-              throw new RuntimeException(\n-                  String.format(Locale.ENGLISH, \"Failed to process timer: %s\", timerValue));\n-            }\n-          },\n-          currentTimerKey);\n+    while (timerInternals.hasPendingTimers()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990b4eeb887287a91a4cbc8c490acdf595730aef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc2MTI3NQ==", "bodyText": "Good question. Spark basically does the same thing here (ideally this code should be shared..) @mxm", "url": "https://github.com/apache/beam/pull/11591#discussion_r418761275", "createdAt": "2020-05-01T22:18:37Z", "author": {"login": "ibzib"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunction.java", "diffHunk": "@@ -247,25 +247,27 @@ public void reduce(Iterable<WindowedValue<InputT>> iterable, Collector<RawUnionV\n     timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n \n     // Now we fire the timers and process elements generated by timers (which may be timers itself)\n-    try (RemoteBundle bundle =\n-        stageBundleFactory.getBundle(\n-            receiverFactory, timerReceiverFactory, stateRequestHandler, progressHandler)) {\n-\n-      PipelineTranslatorUtils.fireEligibleTimers(\n-          timerInternals,\n-          (KV<String, String> transformAndTimerId, Timer<?> timerValue) -> {\n-            FnDataReceiver<Timer> fnTimerReceiver =\n-                bundle.getTimerReceivers().get(transformAndTimerId);\n-            Preconditions.checkNotNull(\n-                fnTimerReceiver, \"No FnDataReceiver found for %s\", transformAndTimerId);\n-            try {\n-              fnTimerReceiver.accept(timerValue);\n-            } catch (Exception e) {\n-              throw new RuntimeException(\n-                  String.format(Locale.ENGLISH, \"Failed to process timer: %s\", timerValue));\n-            }\n-          },\n-          currentTimerKey);\n+    while (timerInternals.hasPendingTimers()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NjU2MQ=="}, "originalCommit": {"oid": "990b4eeb887287a91a4cbc8c490acdf595730aef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc2MjU2Mw==", "bodyText": "As expected, Spark is failing test_pardo_timers", "url": "https://github.com/apache/beam/pull/11591#discussion_r418762563", "createdAt": "2020-05-01T22:23:25Z", "author": {"login": "ibzib"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunction.java", "diffHunk": "@@ -247,25 +247,27 @@ public void reduce(Iterable<WindowedValue<InputT>> iterable, Collector<RawUnionV\n     timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n \n     // Now we fire the timers and process elements generated by timers (which may be timers itself)\n-    try (RemoteBundle bundle =\n-        stageBundleFactory.getBundle(\n-            receiverFactory, timerReceiverFactory, stateRequestHandler, progressHandler)) {\n-\n-      PipelineTranslatorUtils.fireEligibleTimers(\n-          timerInternals,\n-          (KV<String, String> transformAndTimerId, Timer<?> timerValue) -> {\n-            FnDataReceiver<Timer> fnTimerReceiver =\n-                bundle.getTimerReceivers().get(transformAndTimerId);\n-            Preconditions.checkNotNull(\n-                fnTimerReceiver, \"No FnDataReceiver found for %s\", transformAndTimerId);\n-            try {\n-              fnTimerReceiver.accept(timerValue);\n-            } catch (Exception e) {\n-              throw new RuntimeException(\n-                  String.format(Locale.ENGLISH, \"Failed to process timer: %s\", timerValue));\n-            }\n-          },\n-          currentTimerKey);\n+    while (timerInternals.hasPendingTimers()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NjU2MQ=="}, "originalCommit": {"oid": "990b4eeb887287a91a4cbc8c490acdf595730aef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NDAxMA==", "bodyText": "This is a batch-only change. Streaming already flushes timers on close. I don't now whether dropping processing timers is correct. I think we should continue to fire them as well.", "url": "https://github.com/apache/beam/pull/11591#discussion_r418944010", "createdAt": "2020-05-02T10:57:06Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunction.java", "diffHunk": "@@ -247,25 +247,27 @@ public void reduce(Iterable<WindowedValue<InputT>> iterable, Collector<RawUnionV\n     timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n \n     // Now we fire the timers and process elements generated by timers (which may be timers itself)\n-    try (RemoteBundle bundle =\n-        stageBundleFactory.getBundle(\n-            receiverFactory, timerReceiverFactory, stateRequestHandler, progressHandler)) {\n-\n-      PipelineTranslatorUtils.fireEligibleTimers(\n-          timerInternals,\n-          (KV<String, String> transformAndTimerId, Timer<?> timerValue) -> {\n-            FnDataReceiver<Timer> fnTimerReceiver =\n-                bundle.getTimerReceivers().get(transformAndTimerId);\n-            Preconditions.checkNotNull(\n-                fnTimerReceiver, \"No FnDataReceiver found for %s\", transformAndTimerId);\n-            try {\n-              fnTimerReceiver.accept(timerValue);\n-            } catch (Exception e) {\n-              throw new RuntimeException(\n-                  String.format(Locale.ENGLISH, \"Failed to process timer: %s\", timerValue));\n-            }\n-          },\n-          currentTimerKey);\n+    while (timerInternals.hasPendingTimers()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NjU2MQ=="}, "originalCommit": {"oid": "990b4eeb887287a91a4cbc8c490acdf595730aef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NDEwMg==", "bodyText": "I agree that the code could be shared with Spark. I initially thought about that when I pushed the fix in the other PR but got sidetracked..", "url": "https://github.com/apache/beam/pull/11591#discussion_r418944102", "createdAt": "2020-05-02T10:58:23Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunction.java", "diffHunk": "@@ -247,25 +247,27 @@ public void reduce(Iterable<WindowedValue<InputT>> iterable, Collector<RawUnionV\n     timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n \n     // Now we fire the timers and process elements generated by timers (which may be timers itself)\n-    try (RemoteBundle bundle =\n-        stageBundleFactory.getBundle(\n-            receiverFactory, timerReceiverFactory, stateRequestHandler, progressHandler)) {\n-\n-      PipelineTranslatorUtils.fireEligibleTimers(\n-          timerInternals,\n-          (KV<String, String> transformAndTimerId, Timer<?> timerValue) -> {\n-            FnDataReceiver<Timer> fnTimerReceiver =\n-                bundle.getTimerReceivers().get(transformAndTimerId);\n-            Preconditions.checkNotNull(\n-                fnTimerReceiver, \"No FnDataReceiver found for %s\", transformAndTimerId);\n-            try {\n-              fnTimerReceiver.accept(timerValue);\n-            } catch (Exception e) {\n-              throw new RuntimeException(\n-                  String.format(Locale.ENGLISH, \"Failed to process timer: %s\", timerValue));\n-            }\n-          },\n-          currentTimerKey);\n+    while (timerInternals.hasPendingTimers()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NjU2MQ=="}, "originalCommit": {"oid": "990b4eeb887287a91a4cbc8c490acdf595730aef"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1231, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}