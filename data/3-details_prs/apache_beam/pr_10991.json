{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDY2Nzgw", "number": 10991, "title": "[BEAM-3301] Refactor DoFn validation & allow specifying main inputs.", "bodyText": "The current version of this validation is a bit permissive because it\ndoesn't require the number of main inputs to be specified. This change\nallows specifying the number of main inputs, while also preserving\nthe existing code path of not specifying it. Along with that change,\nI made some refactors to existing validation code to try to improve\nreadability and make it more organized.\nThis is filed under BEAM-3301 (SDF) because it is intended to enable\nvalidation for SDFs which is difficult without a known number of\nmain inputs.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-27T20:50:38Z", "url": "https://github.com/apache/beam/pull/10991", "merged": true, "mergeCommit": {"oid": "c27abd49651eebc345a87964272199f46287747d"}, "closed": true, "closedAt": "2020-03-17T01:09:46Z", "author": {"login": "youngoli"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIhn_9AH2gAyMzgxMDY2NzgwOjc0ZWRjM2E2YmYwZTM4ZjNkMTY2Mjg3ZDQ1MTEwMjczMzBlZmU3NzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOXp0dgFqTM3NTY2NzY5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "74edc3a6bf0e38f3d166287d4511027330efe772", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/74edc3a6bf0e38f3d166287d4511027330efe772", "committedDate": "2020-02-27T20:48:02Z", "message": "[BEAM-3301] Refactor DoFn validation & allow specifying main inputs.\n\nThe current version of this validation is a bit permissive because it\ndoesn't require the number of main inputs to be specified. This change\nallows specifying the number of main inputs, while also preserving\nthe existing code path of not specifying it. Along with that change,\nI made some refactors to existing validation code to try to improve\nreadability and make it more organized.\n\nThis is filed under BEAM-3301 (SDF) because it is intended to enable\nvalidation for SDFs which is difficult without a known number of\nmain inputs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTE1ODAz", "url": "https://github.com/apache/beam/pull/10991#pullrequestreview-366115803", "createdAt": "2020-02-28T01:45:15Z", "commit": {"oid": "74edc3a6bf0e38f3d166287d4511027330efe772"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo0NToxNVrOFvnHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOTo1NToyMlrOFwBE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODI1Nw==", "bodyText": "With the name NewDoFnKv, it sounds like it's already assuming that a DoFn KV is being passed in. It's OK for there to be special purpose methods that only do one thing.\nAnother option to consider instead of having two (or N) methods, consider extending the current NewDoFn with a variadic an Option type.  (eg. opts ...Option), this lets existing callers keep things the same, but allow for expanding things in the future. Option should probably be either a function type, or an interface type with private methods, and the options are provided by other methods in the package. eg. graph.NewDoFn(fn, graph.HasKVInput(), graph.HasRestriction()). This is valuable if we think being able to expand things in the future, but also lets us mix and match more easily later on. This way we can keep the existing behavior when there are no options, but keep the documentation of all the various uses in one place on the NewDoFn method referring to the option returning methods.", "url": "https://github.com/apache/beam/pull/10991#discussion_r385468257", "createdAt": "2020-02-28T01:45:15Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -209,21 +209,58 @@ func (f *DoFn) RestrictionT() *reflect.Type {\n // a KV or not based on the other signatures (unless we're more loose about which\n // sideinputs are present). Bind should respect that.\n \n+// Constants so we can avoid magic numbers in validation. Represent number of\n+// DoFn main inputs based on what kind of input the DoFn has.\n+const (\n+\tunknownInNum = -1 // Used when we don't know the number of main inputs.\n+\tsingleInNum  = 1\n+\tkvInNum      = 2\n+)\n+\n // NewDoFn constructs a DoFn from the given value, if possible.\n func NewDoFn(fn interface{}) (*DoFn, error) {\n \tret, err := NewFn(fn)\n \tif err != nil {\n \t\treturn nil, errors.WithContext(errors.Wrapf(err, \"invalid DoFn\"), \"constructing DoFn\")\n \t}\n-\treturn AsDoFn(ret)\n+\treturn AsDoFn(ret, unknownInNum)\n }\n \n-// AsDoFn converts a Fn to a DoFn, if possible.\n-func AsDoFn(fn *Fn) (*DoFn, error) {\n+// NewDoFnKv constructs a DoFn from the given value, if possible, with\n+// improved validation from knowing whether the DoFn's main input is a KV or\n+// single element.\n+func NewDoFnKv(fn interface{}, mainKv bool) (*DoFn, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74edc3a6bf0e38f3d166287d4511027330efe772"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5MzYyMA==", "bodyText": "Consider a switch instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif numMainIn != unknownInNum &&\n          \n          \n            \n            \t\tnumMainIn != singleInNum &&\n          \n          \n            \n            \t\tnumMainIn != kvInNum {\n          \n          \n            \n            \t\terr := errors.Errorf(\"invalid number of main inputs given. \"+\n          \n          \n            \n            \t\t\t\"Got: %v, Want: One of the following: %v\",\n          \n          \n            \n            \t\t\tprocessElementName, []int{unknownInNum, singleInNum, kvInNum})\n          \n          \n            \n            \t\treturn nil, addContext(err, fn)\n          \n          \n            \n            \t}\n          \n          \n            \n            \tswitch numMainIn {\n          \n          \n            \n            \tcase unknownInNum, singleInNum, kvInNum: \t// Valid \n          \n          \n            \n            \tdefault: // Invalid\n          \n          \n            \n            \t\terr := errors.Errorf(\"invalid number of main inputs given. \"+\n          \n          \n            \n            \t\t\t\"Got: %v, Want: One of the following: %v\",\n          \n          \n            \n            \t\t\tprocessElementName, []int{unknownInNum, singleInNum, kvInNum})\n          \n          \n            \n            \t\treturn nil, addContext(err, fn)\n          \n          \n            \n            \t}", "url": "https://github.com/apache/beam/pull/10991#discussion_r385893620", "createdAt": "2020-02-28T19:55:22Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -209,21 +209,58 @@ func (f *DoFn) RestrictionT() *reflect.Type {\n // a KV or not based on the other signatures (unless we're more loose about which\n // sideinputs are present). Bind should respect that.\n \n+// Constants so we can avoid magic numbers in validation. Represent number of\n+// DoFn main inputs based on what kind of input the DoFn has.\n+const (\n+\tunknownInNum = -1 // Used when we don't know the number of main inputs.\n+\tsingleInNum  = 1\n+\tkvInNum      = 2\n+)\n+\n // NewDoFn constructs a DoFn from the given value, if possible.\n func NewDoFn(fn interface{}) (*DoFn, error) {\n \tret, err := NewFn(fn)\n \tif err != nil {\n \t\treturn nil, errors.WithContext(errors.Wrapf(err, \"invalid DoFn\"), \"constructing DoFn\")\n \t}\n-\treturn AsDoFn(ret)\n+\treturn AsDoFn(ret, unknownInNum)\n }\n \n-// AsDoFn converts a Fn to a DoFn, if possible.\n-func AsDoFn(fn *Fn) (*DoFn, error) {\n+// NewDoFnKv constructs a DoFn from the given value, if possible, with\n+// improved validation from knowing whether the DoFn's main input is a KV or\n+// single element.\n+func NewDoFnKv(fn interface{}, mainKv bool) (*DoFn, error) {\n+\tret, err := NewFn(fn)\n+\tif err != nil {\n+\t\treturn nil, errors.WithContext(errors.Wrapf(err, \"invalid DoFn\"), \"constructing DoFn\")\n+\t}\n+\n+\tif mainKv {\n+\t\treturn AsDoFn(ret, kvInNum)\n+\t} else {\n+\t\treturn AsDoFn(ret, singleInNum)\n+\t}\n+}\n+\n+// AsDoFn converts a Fn to a DoFn, if possible. numMainIn specifies how many\n+// main inputs are expected in the DoFn's method signatures. Valid values are\n+// -1 (unknown), 1 (single elements), or 2 (KVs). If the value is unknown then\n+// validation is done by best effort and may miss some edge cases.\n+func AsDoFn(fn *Fn, numMainIn int) (*DoFn, error) {\n \taddContext := func(err error, fn *Fn) error {\n \t\treturn errors.WithContextf(err, \"graph.AsDoFn: for Fn named %v\", fn.Name())\n \t}\n \n+\t// Validate numMainIn. This check should match this method's comment.\n+\tif numMainIn != unknownInNum &&\n+\t\tnumMainIn != singleInNum &&\n+\t\tnumMainIn != kvInNum {\n+\t\terr := errors.Errorf(\"invalid number of main inputs given. \"+\n+\t\t\t\"Got: %v, Want: One of the following: %v\",\n+\t\t\tprocessElementName, []int{unknownInNum, singleInNum, kvInNum})\n+\t\treturn nil, addContext(err, fn)\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74edc3a6bf0e38f3d166287d4511027330efe772"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc131c2f2486fb8a5b31a12cd140f048c3e374d8", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/fc131c2f2486fb8a5b31a12cd140f048c3e374d8", "committedDate": "2020-03-05T05:46:20Z", "message": "[BEAM-3301] Adjust NewDoFn interface to take variadic options.\n\nA bit of fixup to make NewDoFn a cleaner interface. Gets rid of\nNewDoFnKv and replaces that functionality with variadic options."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Njg5OTI4", "url": "https://github.com/apache/beam/pull/10991#pullrequestreview-369689928", "createdAt": "2020-03-05T15:54:39Z", "commit": {"oid": "fc131c2f2486fb8a5b31a12cd140f048c3e374d8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NDozOVrOFyZM_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo1MTowN1rOFybiiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NjA0NQ==", "bodyText": "I'm wary about exporting these constants.\nFor one, they're untyped constants, so they're functionally the numbers themselves.\nOtherwise the \"right\" go way to expose them so they have meaning would be to have an unexported type so users can't define their own, and then define the constants.\ntype mainInputs int32\n\nconst (\n  MainUnknown mainInputs = -1\n  MainSingle mainInputs = 1\n  MainKV mainInputs = 2\n)\n\nThen any functional option configuration method can accept them to have type safe, pre-validated input numbers.\nfunc NumInputs(mi mainInputs) Option {\n  return func(c *config) {\n     c.numMainIn = mi\n  }\n}\n\nThis then saves needing to have a validation error, since package users can't define their own mainInputs.\nAnother alternative is to do away with the exported constants altogether, keep the validation, but simply document that valid inputs are 1 and 2 for singletons and KVs respectively. Either is preferable to the current approach.\nLets not lose sight that the purpose here is to pass a hint down to make the DoFn parameters easier to analyse. Windows and EventTimes are propagated with the main input, but don't \"count\" since they are easily detectable by type.", "url": "https://github.com/apache/beam/pull/10991#discussion_r388386045", "createdAt": "2020-03-05T15:54:39Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -209,21 +209,74 @@ func (f *DoFn) RestrictionT() *reflect.Type {\n // a KV or not based on the other signatures (unless we're more loose about which\n // sideinputs are present). Bind should respect that.\n \n+// The following constants prefixed with \"Main\" represent possible numbers of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc131c2f2486fb8a5b31a12cd140f048c3e374d8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNDMyOQ==", "bodyText": "Consider if it is necessary to have an unknown constant exported at all? Even in the unexported type version of this code, Unknown a side effect of not passing the NumMainInput hint, rather than something a user should explicitly set.", "url": "https://github.com/apache/beam/pull/10991#discussion_r388424329", "createdAt": "2020-03-05T16:51:07Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -209,21 +209,74 @@ func (f *DoFn) RestrictionT() *reflect.Type {\n // a KV or not based on the other signatures (unless we're more loose about which\n // sideinputs are present). Bind should respect that.\n \n+// The following constants prefixed with \"Main\" represent possible numbers of\n+// DoFn main inputs for DoFn construction and validation. Any value not defined\n+// here is an invalid number of main inputs.\n+const (\n+\tMainUnknown = -1 // The number of main inputs is unknown for DoFn validation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc131c2f2486fb8a5b31a12cd140f048c3e374d8"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8e5284228b007ee22009f411567e5297e490710", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/a8e5284228b007ee22009f411567e5297e490710", "committedDate": "2020-03-05T22:38:23Z", "message": "[BEAM-3301] Fixup main inputs constants.\n\nAdding a type representing the constants, to prevent them from being\nmisused. This also makes the validation check on them obsolete."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzQzODEy", "url": "https://github.com/apache/beam/pull/10991#pullrequestreview-373743812", "createdAt": "2020-03-12T17:07:53Z", "commit": {"oid": "a8e5284228b007ee22009f411567e5297e490710"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzowNzo1M1rOF1nhSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoxNjo0M1rOF1n2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2NjM0NA==", "bodyText": "Not related to this PR but why?", "url": "https://github.com/apache/beam/pull/10991#discussion_r391766344", "createdAt": "2020-03-12T17:07:53Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -239,52 +279,50 @@ func AsDoFn(fn *Fn) (*DoFn, error) {\n \t\treturn nil, addContext(err, fn)\n \t}\n \n-\t// Start validating DoFn. First, check that ProcessElement has a main input.\n+\t// Validate ProcessElement has correct number of main inputs (as indicated by\n+\t// numMainIn), and that main inputs are before side inputs.\n \tprocessFn := fn.methods[processElementName]\n-\tpos, num, ok := processFn.Inputs()\n-\tif ok {\n-\t\tfirst := processFn.Param[pos].Kind\n-\t\tif first != funcx.FnValue {\n-\t\t\terr := errors.New(\"side input parameters must follow main input parameter\")\n-\t\t\terr = errors.SetTopLevelMsgf(err,\n-\t\t\t\t\"Method %v of DoFns should always have a main input before side inputs, \"+\n-\t\t\t\t\t\"but it has side inputs (as Iters or ReIters) first in DoFn %v.\",\n-\t\t\t\tprocessElementName, fn.Name())\n-\t\t\terr = errors.WithContextf(err, \"method %v\", processElementName)\n-\t\t\treturn nil, addContext(err, fn)\n-\t\t}\n+\tif err := validateMainInputs(fn, processFn, processElementName, numMainIn); err != nil {\n+\t\treturn nil, addContext(err, fn)\n+\t}\n+\n+\t// If numMainIn is unknown, we can try inferring it from the second input in ProcessElement.\n+\t// If there is none, or it's not a FnValue type, then we can safely infer that there's only\n+\t// one main input.\n+\tpos, num, _ := processFn.Inputs()\n+\tif numMainIn == MainUnknown && (num == 1 || processFn.Param[pos+1].Kind != funcx.FnValue) {\n+\t\tnumMainIn = MainSingle\n \t}\n \n \t// If the ProcessElement function includes side inputs or emit functions those must also be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e5284228b007ee22009f411567e5297e490710"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MTcxOQ==", "bodyText": "Wouldn't it make sense to infer the number of inputs before validateMainInputs?", "url": "https://github.com/apache/beam/pull/10991#discussion_r391771719", "createdAt": "2020-03-12T17:16:43Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -239,52 +279,50 @@ func AsDoFn(fn *Fn) (*DoFn, error) {\n \t\treturn nil, addContext(err, fn)\n \t}\n \n-\t// Start validating DoFn. First, check that ProcessElement has a main input.\n+\t// Validate ProcessElement has correct number of main inputs (as indicated by\n+\t// numMainIn), and that main inputs are before side inputs.\n \tprocessFn := fn.methods[processElementName]\n-\tpos, num, ok := processFn.Inputs()\n-\tif ok {\n-\t\tfirst := processFn.Param[pos].Kind\n-\t\tif first != funcx.FnValue {\n-\t\t\terr := errors.New(\"side input parameters must follow main input parameter\")\n-\t\t\terr = errors.SetTopLevelMsgf(err,\n-\t\t\t\t\"Method %v of DoFns should always have a main input before side inputs, \"+\n-\t\t\t\t\t\"but it has side inputs (as Iters or ReIters) first in DoFn %v.\",\n-\t\t\t\tprocessElementName, fn.Name())\n-\t\t\terr = errors.WithContextf(err, \"method %v\", processElementName)\n-\t\t\treturn nil, addContext(err, fn)\n-\t\t}\n+\tif err := validateMainInputs(fn, processFn, processElementName, numMainIn); err != nil {\n+\t\treturn nil, addContext(err, fn)\n+\t}\n+\n+\t// If numMainIn is unknown, we can try inferring it from the second input in ProcessElement.\n+\t// If there is none, or it's not a FnValue type, then we can safely infer that there's only\n+\t// one main input.\n+\tpos, num, _ := processFn.Inputs()\n+\tif numMainIn == MainUnknown && (num == 1 || processFn.Param[pos+1].Kind != funcx.FnValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e5284228b007ee22009f411567e5297e490710"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjY3Njkz", "url": "https://github.com/apache/beam/pull/10991#pullrequestreview-375667693", "createdAt": "2020-03-17T00:34:31Z", "commit": {"oid": "a8e5284228b007ee22009f411567e5297e490710"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2975, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}