{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NjY0NjAw", "number": 13633, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNjo0M1rOFK1bhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyOTo1OFrOFK1ucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA1NDc4OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNjo0M1rOINsKxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDo0ODo0OVrOIOmvJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjA1NQ==", "bodyText": "Just for pure curiosity, why is this needed?", "url": "https://github.com/apache/beam/pull/13633#discussion_r551226055", "createdAt": "2021-01-04T10:16:43Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -375,4 +377,10 @@ private static void setManagedMemoryByFraction(final Configuration config) {\n       config.setString(\"taskmanager.memory.managed.size\", String.valueOf(managedMemorySize));\n     }\n   }\n+\n+  private static void disableClassLoaderLeakCheck(final Configuration config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08706dfd17cc25733042f1ad2aa6bde3b818dfa1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMjIzNg==", "bodyText": "I believe this is because of GRPC which may attempt to load classes after the Flink job has been removed. Loading new classes on closed classloaders will error without this setting.", "url": "https://github.com/apache/beam/pull/13633#discussion_r551232236", "createdAt": "2021-01-04T10:28:16Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -375,4 +377,10 @@ private static void setManagedMemoryByFraction(final Configuration config) {\n       config.setString(\"taskmanager.memory.managed.size\", String.valueOf(managedMemorySize));\n     }\n   }\n+\n+  private static void disableClassLoaderLeakCheck(final Configuration config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjA1NQ=="}, "originalCommit": {"oid": "08706dfd17cc25733042f1ad2aa6bde3b818dfa1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMzQwNA==", "bodyText": "In any case, we should add a note or JIRA ticket to why this is necessary.", "url": "https://github.com/apache/beam/pull/13633#discussion_r551233404", "createdAt": "2021-01-04T10:30:26Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -375,4 +377,10 @@ private static void setManagedMemoryByFraction(final Configuration config) {\n       config.setString(\"taskmanager.memory.managed.size\", String.valueOf(managedMemorySize));\n     }\n   }\n+\n+  private static void disableClassLoaderLeakCheck(final Configuration config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjA1NQ=="}, "originalCommit": {"oid": "08706dfd17cc25733042f1ad2aa6bde3b818dfa1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4NTYzOQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13633#discussion_r552185639", "createdAt": "2021-01-05T20:48:49Z", "author": {"login": "ibzib"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -375,4 +377,10 @@ private static void setManagedMemoryByFraction(final Configuration config) {\n       config.setString(\"taskmanager.memory.managed.size\", String.valueOf(managedMemorySize));\n     }\n   }\n+\n+  private static void disableClassLoaderLeakCheck(final Configuration config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjA1NQ=="}, "originalCommit": {"oid": "08706dfd17cc25733042f1ad2aa6bde3b818dfa1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTEwMzIzOnYy", "diffSide": "RIGHT", "path": "runners/flink/flink_runner.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyOTo1OFrOINsmYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwOToyNzoxN1rOIPlE6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMzEyMw==", "bodyText": "Personal preference but I find this easier to read:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (version == flink_minor_version) {\n          \n          \n            \n                  break\n          \n          \n            \n                }\n          \n          \n            \n                mustRunAfter(\":runners:flink:${version}:test\")\n          \n          \n            \n                if (version != flink_minor_version) {\n          \n          \n            \n                  mustRunAfter(\":runners:flink:${version}:test\")\n          \n          \n            \n                }", "url": "https://github.com/apache/beam/pull/13633#discussion_r551233123", "createdAt": "2021-01-04T10:29:58Z", "author": {"login": "mxm"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -108,17 +108,14 @@ test {\n   if (System.getProperty(\"beamSurefireArgline\")) {\n     jvmArgs System.getProperty(\"beamSurefireArgline\")\n   }\n-  // TODO Running tests of all Flink versions in parallel can be too harsh on Jenkins memory\n-  // Run them serially for now, to avoid \"Exit code 137\", i.e. Jenkins host killing the Gradle test process\n-  if (project.path == \":runners:flink:1.9\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-  } else if (project.path == \":runners:flink:1.10\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-    mustRunAfter(\":runners:flink:1.9:test\")\n-  } else if (project.path == \":runners:flink:1.11\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-    mustRunAfter(\":runners:flink:1.9:test\")\n-    mustRunAfter(\":runners:flink:1.10:test\")\n+  // TODO(BEAM-6418) Running tests of all Flink versions in parallel can be too harsh on Jenkins memory.\n+  // Run them serially for now, to avoid \"Exit code 137\", i.e. Jenkins host killing the Gradle test process.\n+  def flink_minor_version = project.path.split(':').last()\n+  for (version in project.ext.allFlinkVersions) {\n+    if (version == flink_minor_version) {\n+      break\n+    }\n+    mustRunAfter(\":runners:flink:${version}:test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08706dfd17cc25733042f1ad2aa6bde3b818dfa1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4Mzc3OA==", "bodyText": "Wouldn't we end up with circular dependencies, like (1.12 mustRunAfter 1.11) && (1.11 mustRunAfter 1.12)?", "url": "https://github.com/apache/beam/pull/13633#discussion_r552183778", "createdAt": "2021-01-05T20:45:04Z", "author": {"login": "ibzib"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -108,17 +108,14 @@ test {\n   if (System.getProperty(\"beamSurefireArgline\")) {\n     jvmArgs System.getProperty(\"beamSurefireArgline\")\n   }\n-  // TODO Running tests of all Flink versions in parallel can be too harsh on Jenkins memory\n-  // Run them serially for now, to avoid \"Exit code 137\", i.e. Jenkins host killing the Gradle test process\n-  if (project.path == \":runners:flink:1.9\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-  } else if (project.path == \":runners:flink:1.10\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-    mustRunAfter(\":runners:flink:1.9:test\")\n-  } else if (project.path == \":runners:flink:1.11\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-    mustRunAfter(\":runners:flink:1.9:test\")\n-    mustRunAfter(\":runners:flink:1.10:test\")\n+  // TODO(BEAM-6418) Running tests of all Flink versions in parallel can be too harsh on Jenkins memory.\n+  // Run them serially for now, to avoid \"Exit code 137\", i.e. Jenkins host killing the Gradle test process.\n+  def flink_minor_version = project.path.split(':').last()\n+  for (version in project.ext.allFlinkVersions) {\n+    if (version == flink_minor_version) {\n+      break\n+    }\n+    mustRunAfter(\":runners:flink:${version}:test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMzEyMw=="}, "originalCommit": {"oid": "08706dfd17cc25733042f1ad2aa6bde3b818dfa1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIwNzAxOA==", "bodyText": "That is right. I've somehow read break as continue.", "url": "https://github.com/apache/beam/pull/13633#discussion_r553207018", "createdAt": "2021-01-07T09:27:17Z", "author": {"login": "mxm"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -108,17 +108,14 @@ test {\n   if (System.getProperty(\"beamSurefireArgline\")) {\n     jvmArgs System.getProperty(\"beamSurefireArgline\")\n   }\n-  // TODO Running tests of all Flink versions in parallel can be too harsh on Jenkins memory\n-  // Run them serially for now, to avoid \"Exit code 137\", i.e. Jenkins host killing the Gradle test process\n-  if (project.path == \":runners:flink:1.9\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-  } else if (project.path == \":runners:flink:1.10\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-    mustRunAfter(\":runners:flink:1.9:test\")\n-  } else if (project.path == \":runners:flink:1.11\") {\n-    mustRunAfter(\":runners:flink:1.8:test\")\n-    mustRunAfter(\":runners:flink:1.9:test\")\n-    mustRunAfter(\":runners:flink:1.10:test\")\n+  // TODO(BEAM-6418) Running tests of all Flink versions in parallel can be too harsh on Jenkins memory.\n+  // Run them serially for now, to avoid \"Exit code 137\", i.e. Jenkins host killing the Gradle test process.\n+  def flink_minor_version = project.path.split(':').last()\n+  for (version in project.ext.allFlinkVersions) {\n+    if (version == flink_minor_version) {\n+      break\n+    }\n+    mustRunAfter(\":runners:flink:${version}:test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMzEyMw=="}, "originalCommit": {"oid": "08706dfd17cc25733042f1ad2aa6bde3b818dfa1"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2473, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}