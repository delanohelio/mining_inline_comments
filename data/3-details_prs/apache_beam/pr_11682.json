{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzY4OTc1", "number": 11682, "title": "[BEAM-9946] | added new api in Partition Transform", "bodyText": "Introduce new API with Partition transform with additional sideInputs provided to partition function. User will be able to write logic to use both element value and sideInputs to decide on which partition a particular element belongs to.\npublic static <T> Partition<T> of(\n      int numPartitions,\n      PartitionWithSideInputsFn<? super T> partitionFn,\n      Requirements requirements)\n\npublic interface PartitionWithSideInputsFn<T> extends Serializable {\n    int partitionFor(T elem, int numPartitions, Contextful.Fn.Context c);\n  }\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-12T14:37:41Z", "url": "https://github.com/apache/beam/pull/11682", "merged": true, "mergeCommit": {"oid": "2d9e03cc376a92707dc8011773417748ed0cd7d7"}, "closed": true, "closedAt": "2020-06-03T01:33:32Z", "author": {"login": "darshanj"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcglJfpgH2gAyNDE2NzY4OTc1OjRjYjcyNWU5NDU4MDcwM2FkZmJlY2ZhZGI5NjRkYzFkMDQ4ZGFjZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjo-qsgH2gAyNDE2NzY4OTc1OjI2MzExYmI4NDlmMzdkMmRjNzYzOWVhMGU3YjVkYzcwOTcwZGQ2ZjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/4cb725e94580703adfbecfadb964dc1d048dacfa", "committedDate": "2020-05-12T14:28:31Z", "message": "[BEAM-9946] | added new api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzkxMTA0", "url": "https://github.com/apache/beam/pull/11682#pullrequestreview-415791104", "createdAt": "2020-05-20T23:52:50Z", "commit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1Mjo1MVrOGYht2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxNDoyMFrOGYiFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MTQxOA==", "bodyText": "nit: this can be final", "url": "https://github.com/apache/beam/pull/11682#discussion_r428371418", "createdAt": "2020-05-20T23:52:51Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTI3OQ==", "bodyText": "This is a no-op, please remove.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428375279", "createdAt": "2020-05-21T00:06:16Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -76,6 +93,45 @@\n     int partitionFor(T elem, int numPartitions);\n   }\n \n+  /**\n+   * A function object that chooses an output partition for an element.\n+   *\n+   * @param <T> the type of the elements being partitioned\n+   */\n+  public interface PartitionWithSideInputsFn<T> extends Serializable {\n+    /**\n+     * Chooses the partition into which to put the given element.\n+     *\n+     * @param elem the element to be partitioned\n+     * @param numPartitions the total number of partitions ({@code >= 1})\n+     * @param c the {@link Contextful.Fn.Context} needed to access sideInputs.\n+     * @return index of the selected partition (in the range {@code [0..numPartitions-1]})\n+     */\n+    int partitionFor(T elem, int numPartitions, Contextful.Fn.Context c);\n+  }\n+\n+  /**\n+   * Returns a new {@code Partition} {@code PTransform} that divides its input {@code PCollection}\n+   * into the given number of partitions, using the given partitioning function.\n+   *\n+   * @param numPartitions the number of partitions to divide the input {@code PCollection} into\n+   * @param partitionFn the function to invoke on each element to choose its output partition\n+   * @param requirements the {@link Requirements} needed to run it.\n+   * @throws IllegalArgumentException if {@code numPartitions <= 0}\n+   */\n+  public static <T> Partition<T> of(\n+      int numPartitions,\n+      PartitionWithSideInputsFn<? super T> partitionFn,\n+      Requirements requirements) {\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions, c),\n+            requirements);\n+    Object aClass = partitionFn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOQ==", "bodyText": "This is a no-op, please remove.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428375309", "createdAt": "2020-05-21T00:06:26Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -85,7 +141,14 @@\n    * @throws IllegalArgumentException if {@code numPartitions <= 0}\n    */\n   public static <T> Partition<T> of(int numPartitions, PartitionFn<? super T> partitionFn) {\n-    return new Partition<>(new PartitionDoFn<T>(numPartitions, partitionFn));\n+\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions),\n+            Requirements.empty());\n+    Object aClass = partitionFn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzM3Mg==", "bodyText": "nit: drop the public.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377372", "createdAt": "2020-05-21T00:13:51Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ1Mw==", "bodyText": "nit: this can be final", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377453", "createdAt": "2020-05-21T00:14:09Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ5NA==", "bodyText": "How about just passing the class here?", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377494", "createdAt": "2020-05-21T00:14:20Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(\n+        int numPartitions,\n+        Contextful<Contextful.Fn<X, Integer>> ctxFn,\n+        Object originalFnForDisplayData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "committedDate": "2020-05-21T01:50:36Z", "message": "[BEAM-9946] | some fixes for review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzE4Mjkx", "url": "https://github.com/apache/beam/pull/11682#pullrequestreview-416318291", "createdAt": "2020-05-21T16:49:56Z", "commit": {"oid": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26311bb849f37d2dc7639ea0e7b5dc70970dd6f1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/26311bb849f37d2dc7639ea0e7b5dc70970dd6f1", "committedDate": "2020-05-22T02:38:05Z", "message": "[BEAM-9946] | revert to pass object instead of class"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4956, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}