{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODY4OTIz", "number": 12986, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0ODowM1rOEtJ9AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0MDo0NVrOEvg8dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg0NDQ4OnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0ODowM1rOHgyjKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODoyNjozNlrOHhftwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NDY4Mw==", "bodyText": "See my earlier comment on #12984  about assuming that key == null is the same thing as not present.", "url": "https://github.com/apache/beam/pull/12986#discussion_r504144683", "createdAt": "2020-10-13T17:48:03Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1384,6 +1374,17 @@ private void process(\n       Object executionKey =\n           keyCoder == null ? null : keyCoder.decode(key.newInput(), Coder.Context.OUTER);\n \n+      if (workItem.hasHotKeyInfo()) {\n+        Windmill.HotKeyInfo hotKeyInfo = workItem.getHotKeyInfo();\n+        Duration hotKeyAge = Duration.millis(hotKeyInfo.getHotKeyAgeUsec() / 1000);\n+\n+        // The MapTask instruction is ordered by dependencies, such that the first element is\n+        // always going to be the shuffle task.\n+        String stepName = computationState.getMapTask().getInstructions().get(0).getName();\n+        Object hotkey = options.isHotKeyLoggingEnabled() ? executionKey : null;\n+        hotKeyLogger.logHotKeyDetection(stepName, hotKeyAge, hotkey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efc864a463ca24caaceba488997b33f4e51fd503"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4NDY3NA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12986#discussion_r504884674", "createdAt": "2020-10-14T18:26:36Z", "author": {"login": "rohdesamuel"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1384,6 +1374,17 @@ private void process(\n       Object executionKey =\n           keyCoder == null ? null : keyCoder.decode(key.newInput(), Coder.Context.OUTER);\n \n+      if (workItem.hasHotKeyInfo()) {\n+        Windmill.HotKeyInfo hotKeyInfo = workItem.getHotKeyInfo();\n+        Duration hotKeyAge = Duration.millis(hotKeyInfo.getHotKeyAgeUsec() / 1000);\n+\n+        // The MapTask instruction is ordered by dependencies, such that the first element is\n+        // always going to be the shuffle task.\n+        String stepName = computationState.getMapTask().getInstructions().get(0).getName();\n+        Object hotkey = options.isHotKeyLoggingEnabled() ? executionKey : null;\n+        hotKeyLogger.logHotKeyDetection(stepName, hotKeyAge, hotkey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NDY4Mw=="}, "originalCommit": {"oid": "efc864a463ca24caaceba488997b33f4e51fd503"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU4MjkzOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0MDo0NVrOHkiriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0MDo0NVrOHkiriw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3ODk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (options.isHotKeyLoggingEnabled()) {\n          \n          \n            \n                    if (options.isHotKeyLoggingEnabled() && keyCoder != null) {", "url": "https://github.com/apache/beam/pull/12986#discussion_r508078987", "createdAt": "2020-10-19T21:40:45Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1384,6 +1374,20 @@ private void process(\n       Object executionKey =\n           keyCoder == null ? null : keyCoder.decode(key.newInput(), Coder.Context.OUTER);\n \n+      if (workItem.hasHotKeyInfo()) {\n+        Windmill.HotKeyInfo hotKeyInfo = workItem.getHotKeyInfo();\n+        Duration hotKeyAge = Duration.millis(hotKeyInfo.getHotKeyAgeUsec() / 1000);\n+\n+        // The MapTask instruction is ordered by dependencies, such that the first element is\n+        // always going to be the shuffle task.\n+        String stepName = computationState.getMapTask().getInstructions().get(0).getName();\n+        if (options.isHotKeyLoggingEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821c55892f4b19f4fd5ca02b2b9747a51755a646"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3086, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}