{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTE5MzI0", "number": 11916, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzozMDo0NlrOEEZPmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzozNTowOFrOEEZV-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQzMzU1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/direct/direct_userstate.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzozMDo0NlrOGh_UgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxMjowMVrOGim3ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MzYzMg==", "bodyText": "Should this be renamed as well?", "url": "https://github.com/apache/beam/pull/11916#discussion_r438293632", "createdAt": "2020-06-10T17:30:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/direct/direct_userstate.py", "diffHunk": "@@ -25,6 +25,7 @@\n from apache_beam.transforms import userstate\n from apache_beam.transforms.trigger import _ListStateTag\n from apache_beam.transforms.trigger import _SetStateTag\n+from apache_beam.transforms.trigger import _ValueStateTag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "357ee1c666b76c669db63abbd017b0f552f124d1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MTYwMw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11916#discussion_r438941603", "createdAt": "2020-06-11T17:12:01Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/direct/direct_userstate.py", "diffHunk": "@@ -25,6 +25,7 @@\n from apache_beam.transforms import userstate\n from apache_beam.transforms.trigger import _ListStateTag\n from apache_beam.transforms.trigger import _SetStateTag\n+from apache_beam.transforms.trigger import _ValueStateTag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MzYzMg=="}, "originalCommit": {"oid": "357ee1c666b76c669db63abbd017b0f552f124d1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQ0OTg3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/userstate_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzozNTowOFrOGh_e2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxMjowOFrOGim37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5NjI4Mw==", "bodyText": "Maybe to make this a stronger test, also write something at the end of process, and try reading it at the very beginning.", "url": "https://github.com/apache/beam/pull/11916#discussion_r438296283", "createdAt": "2020-06-10T17:35:08Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/userstate_test.py", "diffHunk": "@@ -452,6 +459,40 @@ def clear_values(self, bag_state=beam.DoFn.StateParam(BAG_STATE)):\n \n     self.assertEqual(['extra'], StatefulDoFnOnDirectRunnerTest.all_records)\n \n+  def test_simple_read_modify_write_stateful_dofn(self):\n+    class SimpleTestReadModifyWriteStatefulDoFn(DoFn):\n+      VALUE_STATE = ReadModifyWriteStateSpec('value', StrUtf8Coder())\n+\n+      def process(self, element, last_element=DoFn.StateParam(VALUE_STATE)):\n+        last_element.write('%s:%s' % element)\n+        yield last_element.read()\n+\n+    with TestPipeline() as p:\n+      (\n+          p | beam.Create([('a', 1), ('b', 3), ('c', 5)])\n+          | beam.ParDo(SimpleTestReadModifyWriteStatefulDoFn())\n+          | beam.ParDo(self.record_dofn()))\n+    self.assertEqual(['a:1', 'b:3', 'c:5'],\n+                     StatefulDoFnOnDirectRunnerTest.all_records)\n+\n+  def test_clearing_read_modify_write_state(self):\n+    class SimpleClearingReadModifyWriteStatefulDoFn(DoFn):\n+      VALUE_STATE = ReadModifyWriteStateSpec('value', VarIntCoder())\n+\n+      def process(self, element, last_element=DoFn.StateParam(VALUE_STATE)):\n+        last_element.write(element[1])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "357ee1c666b76c669db63abbd017b0f552f124d1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MTY3Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11916#discussion_r438941677", "createdAt": "2020-06-11T17:12:08Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/transforms/userstate_test.py", "diffHunk": "@@ -452,6 +459,40 @@ def clear_values(self, bag_state=beam.DoFn.StateParam(BAG_STATE)):\n \n     self.assertEqual(['extra'], StatefulDoFnOnDirectRunnerTest.all_records)\n \n+  def test_simple_read_modify_write_stateful_dofn(self):\n+    class SimpleTestReadModifyWriteStatefulDoFn(DoFn):\n+      VALUE_STATE = ReadModifyWriteStateSpec('value', StrUtf8Coder())\n+\n+      def process(self, element, last_element=DoFn.StateParam(VALUE_STATE)):\n+        last_element.write('%s:%s' % element)\n+        yield last_element.read()\n+\n+    with TestPipeline() as p:\n+      (\n+          p | beam.Create([('a', 1), ('b', 3), ('c', 5)])\n+          | beam.ParDo(SimpleTestReadModifyWriteStatefulDoFn())\n+          | beam.ParDo(self.record_dofn()))\n+    self.assertEqual(['a:1', 'b:3', 'c:5'],\n+                     StatefulDoFnOnDirectRunnerTest.all_records)\n+\n+  def test_clearing_read_modify_write_state(self):\n+    class SimpleClearingReadModifyWriteStatefulDoFn(DoFn):\n+      VALUE_STATE = ReadModifyWriteStateSpec('value', VarIntCoder())\n+\n+      def process(self, element, last_element=DoFn.StateParam(VALUE_STATE)):\n+        last_element.write(element[1])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5NjI4Mw=="}, "originalCommit": {"oid": "357ee1c666b76c669db63abbd017b0f552f124d1"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3605, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}