{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDA3NTA4", "number": 11419, "title": "[BEAM-9561] Add a framework for running pandas doctests with beam dataframes.", "bodyText": "R: @TheNeuralBit\nDepends on #11264\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-14T20:50:43Z", "url": "https://github.com/apache/beam/pull/11419", "merged": true, "mergeCommit": {"oid": "430b36b2c9b33853e1746ff67e47eebbd70d95da"}, "closed": true, "closedAt": "2020-04-30T01:01:20Z", "author": {"login": "robertwb"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZl-ajgH2gAyNDAzNDA3NTA4OmRjMTFkZDgyMGNmNDJlMGNhY2M1YTA5MWY0ZDUwYTc3ODlmMDM3OWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccSJZZgH2gAyNDAzNDA3NTA4OmIwZDlmYWFiZDMwYTIwYWFkYTkwYjhjYTgyNjNiYTY3ODQ5MzJlY2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc11dd820cf42e0cacc5a091f4d50a7789f0379f", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/dc11dd820cf42e0cacc5a091f4d50a7789f0379f", "committedDate": "2020-04-20T21:28:51Z", "message": "[BEAM-9561] Add a framework for running pandas doctests with beam dataframes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d47203544589ae560282f20df67cd00871a2291", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/3d47203544589ae560282f20df67cd00871a2291", "committedDate": "2020-04-14T21:17:41Z", "message": "more docs"}, "afterCommit": {"oid": "dc11dd820cf42e0cacc5a091f4d50a7789f0379f", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/dc11dd820cf42e0cacc5a091f4d50a7789f0379f", "committedDate": "2020-04-20T21:28:51Z", "message": "[BEAM-9561] Add a framework for running pandas doctests with beam dataframes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTAxMTEz", "url": "https://github.com/apache/beam/pull/11419#pullrequestreview-396901113", "createdAt": "2020-04-21T00:05:31Z", "commit": {"oid": "dc11dd820cf42e0cacc5a091f4d50a7789f0379f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDowNTozMVrOGIstoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoyOTozMlrOGItNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3NDM2OA==", "bodyText": "... framework by customizing providing a custom runner and, in particular, an OutputChecker ...", "url": "https://github.com/apache/beam/pull/11419#discussion_r411774368", "createdAt": "2020-04-21T00:05:31Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -0,0 +1,280 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"A module that allows running existing pandas doctests with Beam dataframes.\n+\n+This module hooks into the doctesting framework by customizing providing\n+a custom runner and, in particular, an OutputChecker, as well as providing\n+a fake object for mocking out the pandas module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc11dd820cf42e0cacc5a091f4d50a7789f0379f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3OTc0MA==", "bodyText": "Maybe call this monkey_patched_context so it's clearer what it's doing and/or add a docstring like \"Creates a context within which DeferredFrame types are monkey patched to record ids\".", "url": "https://github.com/apache/beam/pull/11419#discussion_r411779740", "createdAt": "2020-04-21T00:20:59Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -0,0 +1,280 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"A module that allows running existing pandas doctests with Beam dataframes.\n+\n+This module hooks into the doctesting framework by customizing providing\n+a custom runner and, in particular, an OutputChecker, as well as providing\n+a fake object for mocking out the pandas module.\n+\n+The (novel) sequence of events when running a doctest is as follows.\n+\n+  1. The test invokes `pd.DataFrame(...)` (or similar) and an actual dataframe\n+     is computed and stashed but a Beam deferred dataframe is returned\n+     in its place.\n+  2. Computations are done on these \"dataframes,\" resulting in new objects,\n+     but as these are actually deferred, only expression trees are built.\n+     In the background, a mapping of id -> deferred dataframe is stored for\n+     each newly created dataframe.\n+  3. When any dataframe is printed out, the repr has been overwritten to\n+     print `Dataframe[id]`. The aforementened mapping is used to map this back\n+     to the actual dataframe object, which is then computed via Beam, and its\n+     the (stringified) result plugged into the actual output for comparison.\n+  4. The comparison is then done on the sorted lines of the expected and actual\n+     values.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import doctest\n+import collections\n+import contextlib\n+import re\n+\n+import numpy as np\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import expressions\n+from apache_beam.dataframe.frame_base import DeferredFrame\n+from apache_beam.dataframe import frames  # pylint: disable=unused-import\n+from apache_beam.dataframe import transforms\n+\n+\n+class TestEnvironment(object):\n+  \"\"\"A class managing the patching (of methods, inputs, and outputs) needed\n+  to run and validate tests.\n+  \"\"\"\n+  def __init__(self):\n+    self._inputs = {}\n+    self._all_frames = {}\n+\n+  def fake_pandas_module(self):\n+    class FakePandas(object):\n+      \"\"\"A stand-in for the pandas top-level module.\n+      \"\"\"\n+      # For now, only populated with the frame types (below).\n+      # TODO(BEAM-9561): We may want to put more here.\n+      pass\n+\n+    fake_pd = FakePandas()\n+    for pandas_type, deferred_type in DeferredFrame._pandas_type_map.items():\n+      setattr(\n+          fake_pd,\n+          pandas_type.__name__,\n+          self._deferred_frame(pandas_type, deferred_type))\n+\n+    return fake_pd\n+\n+  def _deferred_frame(self, pandas_type, deferred_type):\n+    \"\"\"Creates a \"constructor\" that record the actual value as an input and\n+    returns a placeholder frame in its place.\"\"\"\n+    def wrapper(*args, **kwargs):\n+      df = pandas_type(*args, **kwargs)\n+      placeholder = expressions.PlaceholderExpression(df[0:0])\n+      self._inputs[placeholder] = df\n+      return deferred_type(placeholder)\n+\n+    return wrapper\n+\n+  @contextlib.contextmanager\n+  def _monkey_patch_type(self, deferred_type):\n+    \"\"\"Monkey-patch __init__ to record a pointer to all created frames, and\n+    __repr__ to be able to recognize them in the doctest output.\n+    \"\"\"\n+    try:\n+      old_init, old_repr = deferred_type.__init__, deferred_type.__repr__\n+\n+      def new_init(df, *args, **kwargs):\n+        old_init(df, *args, **kwargs)\n+        self._all_frames[id(df)] = df\n+\n+      deferred_type.__init__ = new_init\n+      deferred_type.__repr__ = lambda self: 'DeferredFrame[%s]' % id(self)\n+      self._recorded_results = collections.defaultdict(list)\n+      yield\n+    finally:\n+      deferred_type.__init__, deferred_type.__repr__ = old_init, old_repr\n+\n+  @contextlib.contextmanager\n+  def context(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc11dd820cf42e0cacc5a091f4d50a7789f0379f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4MjQ3NA==", "bodyText": "It would be helpful to note here that the purpose of these patches is to collect data about created frames (in _inputs and _all_frames)", "url": "https://github.com/apache/beam/pull/11419#discussion_r411782474", "createdAt": "2020-04-21T00:29:32Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -0,0 +1,280 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"A module that allows running existing pandas doctests with Beam dataframes.\n+\n+This module hooks into the doctesting framework by customizing providing\n+a custom runner and, in particular, an OutputChecker, as well as providing\n+a fake object for mocking out the pandas module.\n+\n+The (novel) sequence of events when running a doctest is as follows.\n+\n+  1. The test invokes `pd.DataFrame(...)` (or similar) and an actual dataframe\n+     is computed and stashed but a Beam deferred dataframe is returned\n+     in its place.\n+  2. Computations are done on these \"dataframes,\" resulting in new objects,\n+     but as these are actually deferred, only expression trees are built.\n+     In the background, a mapping of id -> deferred dataframe is stored for\n+     each newly created dataframe.\n+  3. When any dataframe is printed out, the repr has been overwritten to\n+     print `Dataframe[id]`. The aforementened mapping is used to map this back\n+     to the actual dataframe object, which is then computed via Beam, and its\n+     the (stringified) result plugged into the actual output for comparison.\n+  4. The comparison is then done on the sorted lines of the expected and actual\n+     values.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import doctest\n+import collections\n+import contextlib\n+import re\n+\n+import numpy as np\n+import pandas as pd\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import expressions\n+from apache_beam.dataframe.frame_base import DeferredFrame\n+from apache_beam.dataframe import frames  # pylint: disable=unused-import\n+from apache_beam.dataframe import transforms\n+\n+\n+class TestEnvironment(object):\n+  \"\"\"A class managing the patching (of methods, inputs, and outputs) needed\n+  to run and validate tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc11dd820cf42e0cacc5a091f4d50a7789f0379f"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ecb892eb419053d173a01c88c6e93de554b37bb", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/7ecb892eb419053d173a01c88c6e93de554b37bb", "committedDate": "2020-04-28T18:13:11Z", "message": "lint, comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "593828de889189d20f55416c881214e69f189be3", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/593828de889189d20f55416c881214e69f189be3", "committedDate": "2020-04-28T20:39:48Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f444545e61db6b8b667675f8a36ac68d42cc7dc", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/2f444545e61db6b8b667675f8a36ac68d42cc7dc", "committedDate": "2020-04-28T23:39:54Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e52d2bb64f16a0ac83e7069caf9d110ef042546", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/2e52d2bb64f16a0ac83e7069caf9d110ef042546", "committedDate": "2020-04-28T23:53:59Z", "message": "import order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a55cf8dd1d455786ad915222e9c72d73026fc8", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/36a55cf8dd1d455786ad915222e9c72d73026fc8", "committedDate": "2020-04-29T01:05:17Z", "message": "py37-lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d9faabd30a20aada90b8ca8263ba6784932ecf", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/b0d9faabd30a20aada90b8ca8263ba6784932ecf", "committedDate": "2020-04-29T06:04:31Z", "message": "try to make isort and yapf both happy"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4237, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}