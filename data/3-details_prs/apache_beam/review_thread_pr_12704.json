{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODkxODc3", "number": 12704, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyODozNFrOEiOE0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzoyMjo1NFrOEkpe8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzE3NjQ4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyODozNFrOHP-a0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo1NDo1M1rOHQBpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMzM2Mg==", "bodyText": "Nit: how about merging these configurations in the docstrings.\nSomething like:\nThere are 4 configurations: \n  #. include_window_info=<True/False>. If True, windowing information of the\n       data will be visualized too. Default is false.\n  #. visualize_data=<True/False>. By default, the visualization contains data\n       tables rendering data from given pcolls separately as if they are\n       converted into dataframes. If visualize_data is True, there will be a\n       more dive-in widget and statistically overview widget of the data.\n       Otherwise, those 2 data visualization widgets will not be displayed.\n  #. n=<int>. Max number of elements to visualize. Default 'inf'.\n  #. duration=<int>. Max duration of elements to read. Default 'inf'.", "url": "https://github.com/apache/beam/pull/12704#discussion_r486513362", "createdAt": "2020-09-10T17:28:34Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -273,6 +270,10 @@ def show(*pcolls, **configs):\n   The given pcolls can be dictionary of PCollections (as values), or iterable\n   of PCollections or plain PCollection values.\n \n+  The user can specify either the max number of elements with `n` to read\n+  or the maximum duration of elements to read with `duration`. When a limiter is\n+  not supplied, it is assumed to be infinite.\n+\n   There are 2 boolean configurations:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NjM0OQ==", "bodyText": "Done, added some arg doc strings.", "url": "https://github.com/apache/beam/pull/12704#discussion_r486566349", "createdAt": "2020-09-10T18:54:53Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -273,6 +270,10 @@ def show(*pcolls, **configs):\n   The given pcolls can be dictionary of PCollections (as values), or iterable\n   of PCollections or plain PCollection values.\n \n+  The user can specify either the max number of elements with `n` to read\n+  or the maximum duration of elements to read with `duration`. When a limiter is\n+  not supplied, it is assumed to be infinite.\n+\n   There are 2 boolean configurations:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMzM2Mg=="}, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzE4MTMxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyOTo0OFrOHP-duQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo1NDo1OVrOHQBqGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNDEwNQ==", "bodyText": "Include the new configs n and duration.", "url": "https://github.com/apache/beam/pull/12704#discussion_r486514105", "createdAt": "2020-09-10T17:29:48Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -342,121 +343,79 @@ def show(*pcolls, **configs):\n     assert isinstance(pcoll, beam.pvalue.PCollection), (\n         '{} is not an apache_beam.pvalue.PCollection.'.format(pcoll))\n   user_pipeline = pcolls[0].pipeline\n-  for pcoll in pcolls:\n-    assert pcoll.pipeline is user_pipeline, (\n-        '{} belongs to a different user-defined pipeline ({}) than that of'\n-        ' other PCollections ({}).'.format(\n-            pcoll, pcoll.pipeline, user_pipeline))\n+\n   # TODO(BEAM-8288): Remove below pops and assertion once Python 2 is\n   # deprecated from Beam.\n   include_window_info = configs.pop('include_window_info', False)\n   visualize_data = configs.pop('visualize_data', False)\n+  n = configs.pop('n', 'inf')\n+  duration = configs.pop('duration', 'inf')\n+\n+  if n == 'inf':\n+    n = float('inf')\n+\n+  if duration == 'inf':\n+    duration = float('inf')\n+\n   # This assertion is to protect the backward compatibility for function\n   # signature change after Python 2 deprecation.\n   assert not configs, (\n       'The only configs supported are include_window_info and '\n       'visualize_data.')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NjQyNw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12704#discussion_r486566427", "createdAt": "2020-09-10T18:54:59Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -342,121 +343,79 @@ def show(*pcolls, **configs):\n     assert isinstance(pcoll, beam.pvalue.PCollection), (\n         '{} is not an apache_beam.pvalue.PCollection.'.format(pcoll))\n   user_pipeline = pcolls[0].pipeline\n-  for pcoll in pcolls:\n-    assert pcoll.pipeline is user_pipeline, (\n-        '{} belongs to a different user-defined pipeline ({}) than that of'\n-        ' other PCollections ({}).'.format(\n-            pcoll, pcoll.pipeline, user_pipeline))\n+\n   # TODO(BEAM-8288): Remove below pops and assertion once Python 2 is\n   # deprecated from Beam.\n   include_window_info = configs.pop('include_window_info', False)\n   visualize_data = configs.pop('visualize_data', False)\n+  n = configs.pop('n', 'inf')\n+  duration = configs.pop('duration', 'inf')\n+\n+  if n == 'inf':\n+    n = float('inf')\n+\n+  if duration == 'inf':\n+    duration = float('inf')\n+\n   # This assertion is to protect the backward compatibility for function\n   # signature change after Python 2 deprecation.\n   assert not configs, (\n       'The only configs supported are include_window_info and '\n       'visualize_data.')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNDEwNQ=="}, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzE5NzcwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozNDozNlrOHP-oLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo1NToyOVrOHQBrMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNjc4Mg==", "bodyText": "Do we need any assertion in the future? Like n needs to be a positive integer. And duration will be a string such as 1h2m3s.", "url": "https://github.com/apache/beam/pull/12704#discussion_r486516782", "createdAt": "2020-09-10T17:34:36Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -342,121 +343,79 @@ def show(*pcolls, **configs):\n     assert isinstance(pcoll, beam.pvalue.PCollection), (\n         '{} is not an apache_beam.pvalue.PCollection.'.format(pcoll))\n   user_pipeline = pcolls[0].pipeline\n-  for pcoll in pcolls:\n-    assert pcoll.pipeline is user_pipeline, (\n-        '{} belongs to a different user-defined pipeline ({}) than that of'\n-        ' other PCollections ({}).'.format(\n-            pcoll, pcoll.pipeline, user_pipeline))\n+\n   # TODO(BEAM-8288): Remove below pops and assertion once Python 2 is\n   # deprecated from Beam.\n   include_window_info = configs.pop('include_window_info', False)\n   visualize_data = configs.pop('visualize_data', False)\n+  n = configs.pop('n', 'inf')\n+  duration = configs.pop('duration', 'inf')\n+\n+  if n == 'inf':\n+    n = float('inf')\n+\n+  if duration == 'inf':\n+    duration = float('inf')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NjcwNw==", "bodyText": "Added assertions", "url": "https://github.com/apache/beam/pull/12704#discussion_r486566707", "createdAt": "2020-09-10T18:55:29Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -342,121 +343,79 @@ def show(*pcolls, **configs):\n     assert isinstance(pcoll, beam.pvalue.PCollection), (\n         '{} is not an apache_beam.pvalue.PCollection.'.format(pcoll))\n   user_pipeline = pcolls[0].pipeline\n-  for pcoll in pcolls:\n-    assert pcoll.pipeline is user_pipeline, (\n-        '{} belongs to a different user-defined pipeline ({}) than that of'\n-        ' other PCollections ({}).'.format(\n-            pcoll, pcoll.pipeline, user_pipeline))\n+\n   # TODO(BEAM-8288): Remove below pops and assertion once Python 2 is\n   # deprecated from Beam.\n   include_window_info = configs.pop('include_window_info', False)\n   visualize_data = configs.pop('visualize_data', False)\n+  n = configs.pop('n', 'inf')\n+  duration = configs.pop('duration', 'inf')\n+\n+  if n == 'inf':\n+    n = float('inf')\n+\n+  if duration == 'inf':\n+    duration = float('inf')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNjc4Mg=="}, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzIyMDk2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo0MDozNFrOHP-2aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNjoyNVrOHP_xDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMDQyNw==", "bodyText": "I assume you've verified that, when the recording is not computed, this (static) and below (with dynamic_plotting_interval) visualize statements will update the same visualization. Is it because you are generating a consistent display_id from the recording manager?", "url": "https://github.com/apache/beam/pull/12704#discussion_r486520427", "createdAt": "2020-09-10T17:40:34Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -342,121 +343,79 @@ def show(*pcolls, **configs):\n     assert isinstance(pcoll, beam.pvalue.PCollection), (\n         '{} is not an apache_beam.pvalue.PCollection.'.format(pcoll))\n   user_pipeline = pcolls[0].pipeline\n-  for pcoll in pcolls:\n-    assert pcoll.pipeline is user_pipeline, (\n-        '{} belongs to a different user-defined pipeline ({}) than that of'\n-        ' other PCollections ({}).'.format(\n-            pcoll, pcoll.pipeline, user_pipeline))\n+\n   # TODO(BEAM-8288): Remove below pops and assertion once Python 2 is\n   # deprecated from Beam.\n   include_window_info = configs.pop('include_window_info', False)\n   visualize_data = configs.pop('visualize_data', False)\n+  n = configs.pop('n', 'inf')\n+  duration = configs.pop('duration', 'inf')\n+\n+  if n == 'inf':\n+    n = float('inf')\n+\n+  if duration == 'inf':\n+    duration = float('inf')\n+\n   # This assertion is to protect the backward compatibility for function\n   # signature change after Python 2 deprecation.\n   assert not configs, (\n       'The only configs supported are include_window_info and '\n       'visualize_data.')\n-  runner = user_pipeline.runner\n-  if isinstance(runner, ir.InteractiveRunner):\n-    runner = runner._underlying_runner\n-\n-  # Make sure that sources without a user reference are still cached.\n-  pi.watch_sources(user_pipeline)\n-\n-  # Make sure that all PCollections to be shown are watched. If a PCollection\n-  # has not been watched, make up a variable name for that PCollection and watch\n-  # it. No validation is needed here because the watch logic can handle\n-  # arbitrary variables.\n-  watched_pcollections = set()\n-  for watching in ie.current_env().watching():\n-    for _, val in watching:\n-      if hasattr(val, '__class__') and isinstance(val, beam.pvalue.PCollection):\n-        watched_pcollections.add(val)\n-  for pcoll in pcolls:\n-    if pcoll not in watched_pcollections:\n-      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n-\n-  if ie.current_env().is_in_ipython:\n-    warnings.filterwarnings(\n-        'ignore',\n-        'options is deprecated since First stable release. References to '\n-        '<pipeline>.options will not be supported',\n-        category=DeprecationWarning)\n-  # Attempt to run background caching job since we have the reference to the\n-  # user-defined pipeline.\n-  bcj.attempt_to_run_background_caching_job(\n-      runner, user_pipeline, user_pipeline.options)\n-\n-  pcolls = set(pcolls)\n-  computed_pcolls = set()\n-  for pcoll in pcolls:\n-    if pcoll in ie.current_env().computed_pcollections:\n-      computed_pcolls.add(pcoll)\n-  pcolls = pcolls.difference(computed_pcolls)\n-  # If in notebook, static plotting computed pcolls as computation is done.\n-  if ie.current_env().is_in_notebook:\n-    for pcoll in computed_pcolls:\n-      visualize(\n-          pcoll,\n-          include_window_info=include_window_info,\n-          display_facets=visualize_data)\n-  elif ie.current_env().is_in_ipython:\n-    for pcoll in computed_pcolls:\n-      visualize(pcoll, include_window_info=include_window_info)\n-\n-  if not pcolls:\n-    return\n-\n-  # Build a pipeline fragment for the PCollections and run it.\n-  result = pf.PipelineFragment(list(pcolls), user_pipeline.options).run()\n-  ie.current_env().set_pipeline_result(user_pipeline, result)\n-\n-  # If in notebook, dynamic plotting as computation goes.\n-  if ie.current_env().is_in_notebook:\n-    for pcoll in pcolls:\n-      visualize(\n-          pcoll,\n-          dynamic_plotting_interval=1,\n-          include_window_info=include_window_info,\n-          display_facets=visualize_data)\n-\n-  # Invoke wait_until_finish to ensure the blocking nature of this API without\n-  # relying on the run to be blocking.\n-  result.wait_until_finish()\n-\n-  # If just in ipython shell, plotting once when the computation is completed.\n-  if ie.current_env().is_in_ipython and not ie.current_env().is_in_notebook:\n-    for pcoll in pcolls:\n-      visualize(pcoll, include_window_info=include_window_info)\n-\n-  # If the pipeline execution is successful at this stage, mark the computation\n-  # completeness for the given PCollections so that when further `show`\n-  # invocation occurs, Interactive Beam wouldn't need to re-compute them.\n-  if result.state is beam.runners.runner.PipelineState.DONE:\n-    ie.current_env().mark_pcollection_computed(pcolls)\n-\n-\n-def collect(pcoll, include_window_info=False):\n-  \"\"\"Materializes all of the elements from a PCollection into a Dataframe.\n \n-  For example::\n+  recording_manager = RecordingManager(user_pipeline)\n+  recording = recording_manager.record(\n+      pcolls, max_n=n, max_duration_secs=duration)\n+\n+  # Catch a KeyboardInterrupt to gracefully cancel the recording and\n+  # visualizations.\n+  try:\n+    # If in notebook, static plotting computed pcolls as computation is done.\n+    if ie.current_env().is_in_notebook:\n+      for stream in recording.computed().values():\n+        visualize(\n+            stream,\n+            include_window_info=include_window_info,\n+            display_facets=visualize_data)\n+    elif ie.current_env().is_in_ipython:\n+      for stream in recording.computed().values():\n+        visualize(stream, include_window_info=include_window_info)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNTQzNw==", "bodyText": "Yep, I have verified it. It uses the same as the code that it was replacing by using the cache key.", "url": "https://github.com/apache/beam/pull/12704#discussion_r486535437", "createdAt": "2020-09-10T18:06:25Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -342,121 +343,79 @@ def show(*pcolls, **configs):\n     assert isinstance(pcoll, beam.pvalue.PCollection), (\n         '{} is not an apache_beam.pvalue.PCollection.'.format(pcoll))\n   user_pipeline = pcolls[0].pipeline\n-  for pcoll in pcolls:\n-    assert pcoll.pipeline is user_pipeline, (\n-        '{} belongs to a different user-defined pipeline ({}) than that of'\n-        ' other PCollections ({}).'.format(\n-            pcoll, pcoll.pipeline, user_pipeline))\n+\n   # TODO(BEAM-8288): Remove below pops and assertion once Python 2 is\n   # deprecated from Beam.\n   include_window_info = configs.pop('include_window_info', False)\n   visualize_data = configs.pop('visualize_data', False)\n+  n = configs.pop('n', 'inf')\n+  duration = configs.pop('duration', 'inf')\n+\n+  if n == 'inf':\n+    n = float('inf')\n+\n+  if duration == 'inf':\n+    duration = float('inf')\n+\n   # This assertion is to protect the backward compatibility for function\n   # signature change after Python 2 deprecation.\n   assert not configs, (\n       'The only configs supported are include_window_info and '\n       'visualize_data.')\n-  runner = user_pipeline.runner\n-  if isinstance(runner, ir.InteractiveRunner):\n-    runner = runner._underlying_runner\n-\n-  # Make sure that sources without a user reference are still cached.\n-  pi.watch_sources(user_pipeline)\n-\n-  # Make sure that all PCollections to be shown are watched. If a PCollection\n-  # has not been watched, make up a variable name for that PCollection and watch\n-  # it. No validation is needed here because the watch logic can handle\n-  # arbitrary variables.\n-  watched_pcollections = set()\n-  for watching in ie.current_env().watching():\n-    for _, val in watching:\n-      if hasattr(val, '__class__') and isinstance(val, beam.pvalue.PCollection):\n-        watched_pcollections.add(val)\n-  for pcoll in pcolls:\n-    if pcoll not in watched_pcollections:\n-      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n-\n-  if ie.current_env().is_in_ipython:\n-    warnings.filterwarnings(\n-        'ignore',\n-        'options is deprecated since First stable release. References to '\n-        '<pipeline>.options will not be supported',\n-        category=DeprecationWarning)\n-  # Attempt to run background caching job since we have the reference to the\n-  # user-defined pipeline.\n-  bcj.attempt_to_run_background_caching_job(\n-      runner, user_pipeline, user_pipeline.options)\n-\n-  pcolls = set(pcolls)\n-  computed_pcolls = set()\n-  for pcoll in pcolls:\n-    if pcoll in ie.current_env().computed_pcollections:\n-      computed_pcolls.add(pcoll)\n-  pcolls = pcolls.difference(computed_pcolls)\n-  # If in notebook, static plotting computed pcolls as computation is done.\n-  if ie.current_env().is_in_notebook:\n-    for pcoll in computed_pcolls:\n-      visualize(\n-          pcoll,\n-          include_window_info=include_window_info,\n-          display_facets=visualize_data)\n-  elif ie.current_env().is_in_ipython:\n-    for pcoll in computed_pcolls:\n-      visualize(pcoll, include_window_info=include_window_info)\n-\n-  if not pcolls:\n-    return\n-\n-  # Build a pipeline fragment for the PCollections and run it.\n-  result = pf.PipelineFragment(list(pcolls), user_pipeline.options).run()\n-  ie.current_env().set_pipeline_result(user_pipeline, result)\n-\n-  # If in notebook, dynamic plotting as computation goes.\n-  if ie.current_env().is_in_notebook:\n-    for pcoll in pcolls:\n-      visualize(\n-          pcoll,\n-          dynamic_plotting_interval=1,\n-          include_window_info=include_window_info,\n-          display_facets=visualize_data)\n-\n-  # Invoke wait_until_finish to ensure the blocking nature of this API without\n-  # relying on the run to be blocking.\n-  result.wait_until_finish()\n-\n-  # If just in ipython shell, plotting once when the computation is completed.\n-  if ie.current_env().is_in_ipython and not ie.current_env().is_in_notebook:\n-    for pcoll in pcolls:\n-      visualize(pcoll, include_window_info=include_window_info)\n-\n-  # If the pipeline execution is successful at this stage, mark the computation\n-  # completeness for the given PCollections so that when further `show`\n-  # invocation occurs, Interactive Beam wouldn't need to re-compute them.\n-  if result.state is beam.runners.runner.PipelineState.DONE:\n-    ie.current_env().mark_pcollection_computed(pcolls)\n-\n-\n-def collect(pcoll, include_window_info=False):\n-  \"\"\"Materializes all of the elements from a PCollection into a Dataframe.\n \n-  For example::\n+  recording_manager = RecordingManager(user_pipeline)\n+  recording = recording_manager.record(\n+      pcolls, max_n=n, max_duration_secs=duration)\n+\n+  # Catch a KeyboardInterrupt to gracefully cancel the recording and\n+  # visualizations.\n+  try:\n+    # If in notebook, static plotting computed pcolls as computation is done.\n+    if ie.current_env().is_in_notebook:\n+      for stream in recording.computed().values():\n+        visualize(\n+            stream,\n+            include_window_info=include_window_info,\n+            display_facets=visualize_data)\n+    elif ie.current_env().is_in_ipython:\n+      for stream in recording.computed().values():\n+        visualize(stream, include_window_info=include_window_info)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMDQyNw=="}, "originalCommit": {"oid": "d78dee09b4907485c52011263186b6c446e3dded"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODYzODU5OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzoyMjo1NFrOHTtjjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjoxOTowMVrOHT3cHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzMTM3Mw==", "bodyText": "This looks like a likely culprit, the error message in the flakes references a full directory in the cache:\nE                   PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'D:\\\\a\\\\beam\\\\beam\\\\sdks\\\\python\\\\target\\\\.tox\\\\py35-win\\\\tmp\\\\it-8vh2z7pi2021914046928\\\\full\\\\ac8879590f-2021876280456-2021876278608-2021914046928'", "url": "https://github.com/apache/beam/pull/12704#discussion_r490431373", "createdAt": "2020-09-17T17:22:54Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -407,13 +392,7 @@ def _display_dataframe(self, data, update=None):\n           self._is_datatable_empty = False\n \n   def _to_dataframe(self):\n-    results = []\n-    cache_manager = ie.current_env().get_cache_manager(self._pcoll.pipeline)\n-    if cache_manager.exists('full', self._cache_key):\n-      coder = cache_manager.load_pcoder('full', self._cache_key)\n-      reader, _ = cache_manager.read('full', self._cache_key)\n-      results = list(to_element_list(reader, coder, include_window_info=True))\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d4a90a40f281b7fe7fe91d820c157b6f7f7273"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5MzMwOQ==", "bodyText": "Probably known issue https://issues.apache.org/jira/browse/BEAM-10627, an AI is https://issues.apache.org/jira/browse/BEAM-10514. It's possible the cache path exceeded the windows default path length limit.", "url": "https://github.com/apache/beam/pull/12704#discussion_r490593309", "createdAt": "2020-09-17T22:19:01Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -407,13 +392,7 @@ def _display_dataframe(self, data, update=None):\n           self._is_datatable_empty = False\n \n   def _to_dataframe(self):\n-    results = []\n-    cache_manager = ie.current_env().get_cache_manager(self._pcoll.pipeline)\n-    if cache_manager.exists('full', self._cache_key):\n-      coder = cache_manager.load_pcoder('full', self._cache_key)\n-      reader, _ = cache_manager.read('full', self._cache_key)\n-      results = list(to_element_list(reader, coder, include_window_info=True))\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzMTM3Mw=="}, "originalCommit": {"oid": "71d4a90a40f281b7fe7fe91d820c157b6f7f7273"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 367, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}