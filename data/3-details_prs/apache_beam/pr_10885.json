{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Njk5NTk5", "number": 10885, "title": "[BEAM-9085] Fix performance regression in SyntheticSource", "bodyText": "Beam was using numpy.random.RandomState during generation of Synthetic input, which, starting from NumPy 1.17, is considered as a legacy generator. This caused the slowdown on Python 3.\nThis PR fixes the regression.\nDetails\nThe following snippet was used for measuring performance:\nfrom timeit import Timer\n\nt = Timer(\"pardo_test.ParDoTest().run()\",\n'''\nfrom apache_beam.testing.load_tests import pardo_test\nimport sys\nsys.argv.append('--test-pipeline-options=--input_options=\\\\'{\"num_records\": 200000, \"value_size\": 9, \"key_size\": 1}\\\\'')\n''')\nprint(min(t.repeat(number=1)))\n\nResults\nBefore:\nPython 2.7\n4.52470111847\nPython 3.7\n46.89912317299999\nAfter:\nPython 2.7\n6.37386107445\nPython 3.7\n5.6981477510000005\nWhy not numpy?\nIt turns out that numpy.random.bytes() is a bit slower on Python 3:\nPython 2.7\npython -m timeit -s 'import numpy as np' 'for i in xrange(20000): np.random.seed(i); np.random.bytes(90)'\n10 loops, best of 3: 57.5 msec per loop\nPython 3.7\npython -m timeit -s 'import numpy as np' 'for i in range(20000): np.random.seed(i); np.random.bytes(90)'\n1 loop, best of 5: 414 msec per loop\nI've achieved better results after switching to random standard module.\u00a0Unfortunately, the performance on Python 2 got a bit worse.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-18T16:00:08Z", "url": "https://github.com/apache/beam/pull/10885", "merged": true, "mergeCommit": {"oid": "b4668a1a1e234c071c3a7b182a76f8f4cf6bfe64"}, "closed": true, "closedAt": "2020-02-20T15:42:41Z", "author": {"login": "kamilwu"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFjK-TAH2gAyMzc2Njk5NTk5OjZmMzY0OTdjZTg0NjljZGNiMjNlMmU2MmZlOTAwNmNjYWNmN2IxOGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGNCS3AFqTM2MjAwNzU5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f36497ce8469cdcb23e2e62fe9006ccacf7b18b", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/6f36497ce8469cdcb23e2e62fe9006ccacf7b18b", "committedDate": "2020-02-18T14:54:22Z", "message": "[BEAM-9085] Fix performance regression in SyntheticSource\n\nBeam was using `numpy.random.RandomState` during generation of Synthetic input, which, starting from NumPy 1.17, is considered as a legacy generator. This caused the slowdown on Python 3. The solution was using `random` module instead of Numpy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTU5OTEy", "url": "https://github.com/apache/beam/pull/10885#pullrequestreview-360559912", "createdAt": "2020-02-18T18:10:45Z", "commit": {"oid": "6f36497ce8469cdcb23e2e62fe9006ccacf7b18b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxMDo0NVrOFrM_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODozMzowOFrOFrNsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTk1NQ==", "bodyText": "Let's use range instead of xrange, and adjust the import accordingly. We try to use idiomatic py3 whenever possible in Beam.", "url": "https://github.com/apache/beam/pull/10885#discussion_r380845955", "createdAt": "2020-02-18T18:10:45Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -415,19 +418,24 @@ def get_range_tracker(self, start_position, stop_position):\n       tracker = range_trackers.UnsplittableRangeTracker(tracker)\n     return tracker\n \n+  @staticmethod\n+  def random_bytes(length):\n+    \"\"\"Return random bytes.\"\"\"\n+    return b''.join(\n+        (struct.pack('B', random.getrandbits(8)) for _ in xrange(length)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f36497ce8469cdcb23e2e62fe9006ccacf7b18b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NzM3MA==", "bodyText": "How about we instantiate random.Random() instead of modifying the global state? This is important if we execute this generator concurrently. Not sure if we do.", "url": "https://github.com/apache/beam/pull/10885#discussion_r380857370", "createdAt": "2020-02-18T18:33:08Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -415,19 +418,24 @@ def get_range_tracker(self, start_position, stop_position):\n       tracker = range_trackers.UnsplittableRangeTracker(tracker)\n     return tracker\n \n+  @staticmethod\n+  def random_bytes(length):\n+    \"\"\"Return random bytes.\"\"\"\n+    return b''.join(\n+        (struct.pack('B', random.getrandbits(8)) for _ in xrange(length)))\n+\n   def _gen_kv_pair(self, index):\n-    r = np.random.RandomState(index)\n-    rand = r.random_sample()\n+    random.seed(index)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f36497ce8469cdcb23e2e62fe9006ccacf7b18b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ab835cf6edcb77bf5f40101d261d78f098af4c9", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/1ab835cf6edcb77bf5f40101d261d78f098af4c9", "committedDate": "2020-02-19T09:11:46Z", "message": "FIX: use range instead of xrange"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce7e623360b3a8834d319a02b5f27e6a7df324a", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/6ce7e623360b3a8834d319a02b5f27e6a7df324a", "committedDate": "2020-02-19T13:28:27Z", "message": "FIX: Instantiate unique random number generator for each range tracker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzQxMTIx", "url": "https://github.com/apache/beam/pull/10885#pullrequestreview-361341121", "createdAt": "2020-02-19T18:41:38Z", "commit": {"oid": "6ce7e623360b3a8834d319a02b5f27e6a7df324a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo0MTozOFrOFrzDZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODo0MTozOFrOFrzDZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ2OTU0Mg==", "bodyText": "I don't see a difference in performance if we instantiate the generator in read, but don't use the cache. Do we need the cache?", "url": "https://github.com/apache/beam/pull/10885#discussion_r381469542", "createdAt": "2020-02-19T18:41:38Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -418,29 +420,32 @@ def get_range_tracker(self, start_position, stop_position):\n     return tracker\n \n   @staticmethod\n-  def random_bytes(length):\n+  def random_bytes(length, generator):\n     \"\"\"Return random bytes.\"\"\"\n     return b''.join(\n-        (struct.pack('B', random.getrandbits(8)) for _ in range(length)))\n+        (struct.pack('B', generator.getrandbits(8)) for _ in range(length)))\n \n-  def _gen_kv_pair(self, index):\n-    random.seed(index)\n-    rand = random.random()\n+  def _gen_kv_pair(self, generator, index):\n+    generator.seed(index)\n+    rand = generator.random()\n \n     # Determines whether to generate hot key or not.\n     if rand < self._hot_key_fraction:\n       # Generate hot key.\n       # An integer is randomly selected from the range [0, numHotKeys-1]\n       # with equal probability.\n-      random.seed(index % self._num_hot_keys)\n-    return self.random_bytes(self._key_size), self.random_bytes(\n-      self._value_size)\n+      generator.seed(index % self._num_hot_keys)\n+    return self.random_bytes(self._key_size, generator), self.random_bytes(\n+      self._value_size, generator)\n \n   def read(self, range_tracker):\n     index = range_tracker.start_position()\n+    # Get an instance of pseudo-random number generator\n+    generator = self._generators[(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ce7e623360b3a8834d319a02b5f27e6a7df324a"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9723ffb67ea64cbf01751ff9b8a15b899a151787", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/9723ffb67ea64cbf01751ff9b8a15b899a151787", "committedDate": "2020-02-20T09:38:17Z", "message": "FIX: Use py3 implementation of range on py2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc1c286c30ad4df77042f1eb4b98697e8435e50", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/fcc1c286c30ad4df77042f1eb4b98697e8435e50", "committedDate": "2020-02-20T12:23:31Z", "message": "FIX: Instantiate the generator inside `read` without caching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDA3NTk1", "url": "https://github.com/apache/beam/pull/10885#pullrequestreview-362007595", "createdAt": "2020-02-20T15:40:54Z", "commit": {"oid": "fcc1c286c30ad4df77042f1eb4b98697e8435e50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3192, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}