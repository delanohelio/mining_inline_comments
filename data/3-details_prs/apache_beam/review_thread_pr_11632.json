{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODY4OTk2", "number": 11632, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo1NzozM1rOD6auLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMTo0MlrOEALEvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTgxODA1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/convert.py", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo1NzozM1rOGSP-zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo1NDowMFrOGbRhAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA==", "bodyText": "Scoping these imports is not a bad idea since it keeps the module namespace cleaner, but there are a couple of issues with this:\n\nonce we get to python 3.x, and move from type comments to annotations, this will fail, as we'll be referencing non-existent objects in our annotations.\nit's not consistent with how we've done this throughout the rest of the code", "url": "https://github.com/apache/beam/pull/11632#discussion_r421789390", "createdAt": "2020-05-07T20:57:33Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MDExNg==", "bodyText": "I should mention that a solution to the first issue is that we can refer to these types as strings, such as 'Any', but that's certainly a lot more awkward, and developers are likely to forget to do so and get confused/frustrated.", "url": "https://github.com/apache/beam/pull/11632#discussion_r421790116", "createdAt": "2020-05-07T20:58:55Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MTc3Mg==", "bodyText": "I actually prefer unconditionally importing them, but was just trying to avoid lint issues (and did see this pattern elsewhere). Changed.", "url": "https://github.com/apache/beam/pull/11632#discussion_r421871772", "createdAt": "2020-05-08T00:38:29Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzMzI3OA==", "bodyText": "So lint complains about unguarded imports, so I put them back. We'll just to a massive sweep to fix these when we change to use type annotations.", "url": "https://github.com/apache/beam/pull/11632#discussion_r422233278", "createdAt": "2020-05-08T16:14:20Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3Mzg0NQ==", "bodyText": "What's the lint error?   Is it because of the unused typing import?\nI'm confused because unguarded typing imports are used all over the beam codebase without any lint errors.  Check pipeline, pipeline_context, pipeline_options, for starters.", "url": "https://github.com/apache/beam/pull/11632#discussion_r422273845", "createdAt": "2020-05-08T17:34:38Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2MzAzNw==", "bodyText": "I had a look at the lint errors, and they are legitimate, but scoping the imports is not the right solution.\nFor example, these:\n\u00a0 | apache_beam/dataframe/frame_base.py:21:0: W0611: Unused Any imported from typing (unused-import)\n\u00a0 | apache_beam/dataframe/frame_base.py:23:0: W0611: Unused Tuple imported from typing (unused-import)\u00a0\n\u00a0 | apache_beam/dataframe/frame_base.py:24:0: W0611: Unused Union imported from typing (unused-import)\n\nAny, Tuple, and Union aren't used in this module. Dict is the only typing import that is used.", "url": "https://github.com/apache/beam/pull/11632#discussion_r423863037", "createdAt": "2020-05-12T16:18:06Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjY5Ng==", "bodyText": "Note that pylint is pretty good about detecting the use of typing imports, even in comments.  I have encountered a few edge cases but I reported them and they were fixed pretty quickly.\nThe only issue I know of in the version of pylint that we're using is with typing.BinaryIO.  You'll notice a few lines like these in the code:\nfrom typing import BinaryIO  # pylint: disable=unused-import\nI reported this bug and it's been fixed, so we can actually get rid of these exceptions if we upgrade to the latest pylint.", "url": "https://github.com/apache/beam/pull/11632#discussion_r423906696", "createdAt": "2020-05-12T17:25:13Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Ng==", "bodyText": "This note hasn't been addressed:\n\nI had a look at the lint errors, and they are legitimate, but scoping the imports is not the right solution.\n\nsee above.", "url": "https://github.com/apache/beam/pull/11632#discussion_r429361766", "createdAt": "2020-05-22T17:09:51Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNTA0NA==", "bodyText": "Oh, yes. Thanks for catching this. Fixed.", "url": "https://github.com/apache/beam/pull/11632#discussion_r430715044", "createdAt": "2020-05-26T21:21:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxOTk3NA==", "bodyText": "I think it still needs to be fixed for dataframe.convert.", "url": "https://github.com/apache/beam/pull/11632#discussion_r430719974", "createdAt": "2020-05-26T21:32:26Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0ODA5Mg==", "bodyText": "[sigh] It still didn't like PCollection. apache_beam/dataframe/transforms.py:30:0: W0611: Unused PCollection imported from apache_beam.pvalue (unused-import). But the rest are OK.", "url": "https://github.com/apache/beam/pull/11632#discussion_r430848092", "createdAt": "2020-05-27T04:19:01Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MTcxMg==", "bodyText": "And pandas needs to be guarded. Hopefully that should be it. PTAL.", "url": "https://github.com/apache/beam/pull/11632#discussion_r431251712", "createdAt": "2020-05-27T15:54:00Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTg2NTk0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/transforms.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxMTowMlrOGSQbKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTowMzowNVrOGSVa2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjY0OA==", "bodyText": "do we want to cover the List[T] case for valueish?\nAlternately, do we wan to make this more generic:\ndef _flatten(\n    valueish,  # type: Union[T, Iterable[T], Mapping[Any, T]]\n    root=(),  # type: Tuple[Any, ...]\n    ):\n  # type: (...) -> Dict[Tuple[Any, ...], T]\n  \"\"\"Given a nested structure of dicts, tuples, and lists, return a flat\n  dictionary where the values are the leafs and the keys are the \"paths\" to\n  these leaves.\n\n  For example `{a: x, b: (y, z)}` becomes `{(a,): x, (b, 0): y, (b, 1): c}`.\n  \"\"\"\n  if isinstance(valueish, typing.Mapping):\n    return _dict_union(_flatten(v, root + (k, )) for k, v in valueish.items())\n  elif isinstance(valueish, typing.Iterable):\n    return _dict_union(\n        _flatten(v, root + (ix, )) for ix, v in enumerate(valueish))\n  else:\n    return {root: valueish}\nAnother thought, is it valid / worthwhile to create a relationship between valueish, root, and the result key?:\ndef _flatten(\n    valueish,  # type: Union[T, Iterable[T], Mapping[U, T]]\n    root=(),  # type: Tuple[U, ...]\n    ):\n  # type: (...) -> Dict[Tuple[U, ...], T]", "url": "https://github.com/apache/beam/pull/11632#discussion_r421796648", "createdAt": "2020-05-07T21:11:02Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -248,7 +261,12 @@ def _dict_union(dicts):\n   return result\n \n \n-def _flatten(valueish, root=()):\n+def _flatten(\n+    valueish,  # type: Union[T, Tuple[T, ...], Dict[Any, T]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5OTEwMw==", "bodyText": "I should mention that typing provides a lot of opportunity to go down rabbit-holes, so the right answer is often \"it would be more accurate, but it's not that valuable\".   A common motivator behind investing in accurately typing utility functions is when it allows you to avoid adding manual / explicit types or casts elsewhere in the code.   Imagine a scenario where mypy knows key of the valueish map, but after it passes through _flatten, you need to re-type the result because it becomes Any.", "url": "https://github.com/apache/beam/pull/11632#discussion_r421799103", "createdAt": "2020-05-07T21:15:59Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -248,7 +261,12 @@ def _dict_union(dicts):\n   return result\n \n \n-def _flatten(valueish, root=()):\n+def _flatten(\n+    valueish,  # type: Union[T, Tuple[T, ...], Dict[Any, T]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjY0OA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODQ5MQ==", "bodyText": "Generally I'd agree that Iterable/Mapping would be preferable, but here I want to be restrictive about the kinds of values I decompose.\nThe keys types of the mapping would be Union[None, int, U], so you'd have to cast anyway, so I think it's simpler to leave as is.\nStill, good food for thought.", "url": "https://github.com/apache/beam/pull/11632#discussion_r421878491", "createdAt": "2020-05-08T01:03:05Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -248,7 +261,12 @@ def _dict_union(dicts):\n   return result\n \n \n-def _flatten(valueish, root=()):\n+def _flatten(\n+    valueish,  # type: Union[T, Tuple[T, ...], Dict[Any, T]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjY0OA=="}, "originalCommit": {"oid": "610e28988cd6caa66ab47f50d057d028988e39cf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjE1MjI1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/convert.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjowNzo0MlrOGbSRmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjowNzo0MlrOGbSRmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NDE1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            from typing import Any\n          \n          \n            \n            from typing import TYPE_CHECKING\n          \n          \n            \n            from typing import Any", "url": "https://github.com/apache/beam/pull/11632#discussion_r431264152", "createdAt": "2020-05-27T16:07:42Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -17,12 +17,20 @@\n from __future__ import absolute_import\n \n import inspect\n+from typing import Any", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289cd34628c6e1b3ddbe164335ff52485b27e8d7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjE1NDc5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/convert.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjowODoxM1rOGbSTOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjowODoxM1rOGbSTOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NDU2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            if typing.TYPE_CHECKING:\n          \n          \n            \n            if TYPE_CHECKING:", "url": "https://github.com/apache/beam/pull/11632#discussion_r431264568", "createdAt": "2020-05-27T16:08:13Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -17,12 +17,20 @@\n from __future__ import absolute_import\n \n import inspect\n+from typing import Any\n+from typing import Dict\n+from typing import Tuple\n+from typing import Union\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289cd34628c6e1b3ddbe164335ff52485b27e8d7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjE2ODk1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/transforms.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMTo0MlrOGbScjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowMzo1MVrOGcJnLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njk1OQ==", "bodyText": "The prevailing style for TYPE_CHECKING is to import it as from typing import TYPE_CHECKING.  I think we should stay consistent.  If we want to change that, it's fine by me, but we can do that in another PR.", "url": "https://github.com/apache/beam/pull/11632#discussion_r431266959", "createdAt": "2020-05-27T16:11:42Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -16,13 +16,28 @@\n \n from __future__ import absolute_import\n \n+import typing\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import Mapping\n+from typing import Tuple\n+from typing import TypeVar\n+from typing import Union\n+\n import pandas as pd\n \n import apache_beam as beam\n from apache_beam import transforms\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frames  # pylint: disable=unused-import\n \n+if typing.TYPE_CHECKING:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289cd34628c6e1b3ddbe164335ff52485b27e8d7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDc5Ng==", "bodyText": "+1 for consistency. Changed.", "url": "https://github.com/apache/beam/pull/11632#discussion_r432170796", "createdAt": "2020-05-28T23:03:51Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -16,13 +16,28 @@\n \n from __future__ import absolute_import\n \n+import typing\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import Mapping\n+from typing import Tuple\n+from typing import TypeVar\n+from typing import Union\n+\n import pandas as pd\n \n import apache_beam as beam\n from apache_beam import transforms\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frames  # pylint: disable=unused-import\n \n+if typing.TYPE_CHECKING:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njk1OQ=="}, "originalCommit": {"oid": "289cd34628c6e1b3ddbe164335ff52485b27e8d7"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3879, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}