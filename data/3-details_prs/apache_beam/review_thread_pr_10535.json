{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNjc0MDI5", "number": 10535, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMDozMTozNVrODXBeAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMDozMTozNVrODXBeAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDY3OTA1OnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMDozMTozNVrOFcHYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzozODo0OVrOFcbNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyNTMyNg==", "bodyText": "Shouldn't this method also produce sizes, like the output method above?", "url": "https://github.com/apache/beam/pull/10535#discussion_r365025326", "createdAt": "2020-01-10T00:31:35Z", "author": {"login": "youngoli"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -162,9 +475,127 @@ public void output(OutputT output, Instant timestamp, BoundedWindow window) {\n             outputTo(consumers, WindowedValue.of(output, timestamp, window, PaneInfo.NO_FIRING));\n           }\n         };\n+    switch (context.pTransform.getSpec().getUrn()) {\n+      case PTransformTranslation.SPLITTABLE_SPLIT_RESTRICTION_URN:\n+        this.outputSplitRestrictionReceiver =\n+            new OutputReceiver<RestrictionT>() {\n+\n+              @Override\n+              public void output(RestrictionT output) {\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        currentElement.withValue(KV.of(currentElement.getValue(), output)));\n+              }\n+\n+              @Override\n+              public void outputWithTimestamp(RestrictionT output, Instant timestamp) {\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        WindowedValue.of(\n+                            KV.of(currentElement.getValue(), output),\n+                            timestamp,\n+                            currentWindow,\n+                            currentElement.getPane()));\n+              }\n+            };\n+        break;\n+      case PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN:\n+        this.outputSplitRestrictionReceiver =\n+            new OutputReceiver<RestrictionT>() {\n+\n+              @Override\n+              public void output(RestrictionT output) {\n+                RestrictionTracker<RestrictionT, PositionT> outputTracker =\n+                    doFnInvoker.invokeNewTracker(output);\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        currentElement.withValue(\n+                            KV.of(\n+                                KV.of(currentElement.getValue(), output),\n+                                outputTracker instanceof HasSize\n+                                    ? ((HasSize) outputTracker).getSize()\n+                                    : 1.0)));\n+              }\n+\n+              @Override\n+              public void outputWithTimestamp(RestrictionT output, Instant timestamp) {\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        WindowedValue.of(\n+                            KV.of(currentElement.getValue(), output),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7738a87ff0297ab051f7d4acc13ceb4d907b77f8"}, "originalPosition": 486}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1MDI1Mw==", "bodyText": "Yes, fixed in the version below.\nI'm relying on the migration to using SDF everywhere will catch the edge cases via the validates runner tests since unit testing the execution of a single instance is quite verbose.", "url": "https://github.com/apache/beam/pull/10535#discussion_r365350253", "createdAt": "2020-01-10T17:38:49Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -162,9 +475,127 @@ public void output(OutputT output, Instant timestamp, BoundedWindow window) {\n             outputTo(consumers, WindowedValue.of(output, timestamp, window, PaneInfo.NO_FIRING));\n           }\n         };\n+    switch (context.pTransform.getSpec().getUrn()) {\n+      case PTransformTranslation.SPLITTABLE_SPLIT_RESTRICTION_URN:\n+        this.outputSplitRestrictionReceiver =\n+            new OutputReceiver<RestrictionT>() {\n+\n+              @Override\n+              public void output(RestrictionT output) {\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        currentElement.withValue(KV.of(currentElement.getValue(), output)));\n+              }\n+\n+              @Override\n+              public void outputWithTimestamp(RestrictionT output, Instant timestamp) {\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        WindowedValue.of(\n+                            KV.of(currentElement.getValue(), output),\n+                            timestamp,\n+                            currentWindow,\n+                            currentElement.getPane()));\n+              }\n+            };\n+        break;\n+      case PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN:\n+        this.outputSplitRestrictionReceiver =\n+            new OutputReceiver<RestrictionT>() {\n+\n+              @Override\n+              public void output(RestrictionT output) {\n+                RestrictionTracker<RestrictionT, PositionT> outputTracker =\n+                    doFnInvoker.invokeNewTracker(output);\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        currentElement.withValue(\n+                            KV.of(\n+                                KV.of(currentElement.getValue(), output),\n+                                outputTracker instanceof HasSize\n+                                    ? ((HasSize) outputTracker).getSize()\n+                                    : 1.0)));\n+              }\n+\n+              @Override\n+              public void outputWithTimestamp(RestrictionT output, Instant timestamp) {\n+                outputTo(\n+                    mainOutputConsumers,\n+                    (WindowedValue<OutputT>)\n+                        WindowedValue.of(\n+                            KV.of(currentElement.getValue(), output),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyNTMyNg=="}, "originalCommit": {"oid": "7738a87ff0297ab051f7d4acc13ceb4d907b77f8"}, "originalPosition": 486}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2299, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}