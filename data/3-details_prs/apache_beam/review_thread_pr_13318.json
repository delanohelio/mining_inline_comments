{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTEyNDg0", "number": 13318, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1Mzo1NFrOE6JSTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozODoyOVrOE_x4ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDA1MDA2OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1Mzo1NFrOH1B6yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTozNDoxOVrOH1pkMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2ODAwOQ==", "bodyText": "Simpler to do\n.apply(\"EventByAuctionSeller\", WithKeys.of(Auction::seller).withKeyType(TypeDescriptors.longs()))", "url": "https://github.com/apache/beam/pull/13318#discussion_r525368009", "createdAt": "2020-11-17T17:53:54Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -83,27 +75,29 @@ public Query3(NexmarkConfiguration configuration) {\n \n   @Override\n   public PCollection<NameCityStateId> expand(PCollection<Event> events) {\n-    int numEventsInPane = 30;\n-\n-    PCollection<Event> eventsWindowed =\n-        events.apply(\n-            Window.<Event>into(new GlobalWindows())\n-                .triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(numEventsInPane)))\n-                .discardingFiredPanes()\n-                .withAllowedLateness(Duration.ZERO));\n-    PCollection<KV<Long, Auction>> auctionsBySellerId =\n-        eventsWindowed\n+    PCollection<KV<Long, Event>> auctionsBySellerId =\n+        events\n             // Only want the new auction events.\n             .apply(NexmarkQueryUtil.JUST_NEW_AUCTIONS)\n \n             // We only want auctions in category 10.\n             .apply(name + \".InCategory\", Filter.by(auction -> auction.category == 10))\n \n             // Key auctions by their seller id.\n-            .apply(\"AuctionBySeller\", NexmarkQueryUtil.AUCTION_BY_SELLER);\n-\n-    PCollection<KV<Long, Person>> personsById =\n-        eventsWindowed\n+            .apply(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNzU4NQ==", "bodyText": "this doesn't work because we also need to change to the union Event type.\nAlso Auction::seller has the error \"Objects is not a functional interface\".\nSo I kept as is, let me know if you'd rather WithKeys and then some auction->event with auction pardo. If you do, do you have suggestions on fixing the error?  My java is out of date so I'm not sure how to fix that off the top of my head.", "url": "https://github.com/apache/beam/pull/13318#discussion_r526017585", "createdAt": "2020-11-18T11:34:19Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -83,27 +75,29 @@ public Query3(NexmarkConfiguration configuration) {\n \n   @Override\n   public PCollection<NameCityStateId> expand(PCollection<Event> events) {\n-    int numEventsInPane = 30;\n-\n-    PCollection<Event> eventsWindowed =\n-        events.apply(\n-            Window.<Event>into(new GlobalWindows())\n-                .triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(numEventsInPane)))\n-                .discardingFiredPanes()\n-                .withAllowedLateness(Duration.ZERO));\n-    PCollection<KV<Long, Auction>> auctionsBySellerId =\n-        eventsWindowed\n+    PCollection<KV<Long, Event>> auctionsBySellerId =\n+        events\n             // Only want the new auction events.\n             .apply(NexmarkQueryUtil.JUST_NEW_AUCTIONS)\n \n             // We only want auctions in category 10.\n             .apply(name + \".InCategory\", Filter.by(auction -> auction.category == 10))\n \n             // Key auctions by their seller id.\n-            .apply(\"AuctionBySeller\", NexmarkQueryUtil.AUCTION_BY_SELLER);\n-\n-    PCollection<KV<Long, Person>> personsById =\n-        eventsWindowed\n+            .apply(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2ODAwOQ=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDA1MTI1OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1NDowOVrOH1B7ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTozNDoyNlrOH1pkbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2ODIwMg==", "bodyText": "Ditto - simpler to use WithKeys", "url": "https://github.com/apache/beam/pull/13318#discussion_r525368202", "createdAt": "2020-11-17T17:54:09Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -115,19 +109,23 @@ public Query3(NexmarkConfiguration configuration) {\n                         \"OR\".equals(person.state)\n                             || \"ID\".equals(person.state)\n                             || \"CA\".equals(person.state)))\n+            .apply(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNzY0Ng==", "bodyText": "ditto", "url": "https://github.com/apache/beam/pull/13318#discussion_r526017646", "createdAt": "2020-11-18T11:34:26Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -115,19 +109,23 @@ public Query3(NexmarkConfiguration configuration) {\n                         \"OR\".equals(person.state)\n                             || \"ID\".equals(person.state)\n                             || \"CA\".equals(person.state)))\n+            .apply(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2ODIwMg=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDA1OTEyOnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1NTo1MFrOH1CAPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMToyODozOVrOH1pXRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2OTQwNw==", "bodyText": "Instead of ProcessContext just inject @element and OutputReceiver parameters", "url": "https://github.com/apache/beam/pull/13318#discussion_r525369407", "createdAt": "2020-11-17T17:55:50Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNDI3Nw==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/13318#discussion_r526014277", "createdAt": "2020-11-18T11:28:39Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2OTQwNw=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDA2NjQxOnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1NzoyOVrOH1CEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTozMDozM1rOH1pb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MDU1OA==", "bodyText": "Comment - this is because Event is a union object, etc.", "url": "https://github.com/apache/beam/pull/13318#discussion_r525370558", "createdAt": "2020-11-17T17:57:29Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,\n-        @TimerId(PERSON_STATE_EXPIRING) Timer timer,\n-        @StateId(PERSON) ValueState<Person> personState,\n-        @StateId(AUCTIONS) ValueState<List<Auction>> auctionsState) {\n+        @TimerId(STATE_EXPIRING) Timer timer,\n+        @StateId(PERSON) @AlwaysFetched ValueState<Person> personState,\n+        @StateId(AUCTIONS) BagState<Auction> auctionsState) {\n       // We would *almost* implement this by  rewindowing into the global window and\n       // running a combiner over the result. The combiner's accumulator would be the\n       // state we use below. However, combiners cannot emit intermediate results, thus\n-      // we need to wait for the pending ReduceFn API.\n+      // we need to wait for the pending ReduceFn API\n \n       Person existingPerson = personState.read();\n-      if (existingPerson != null) {\n-        // We've already seen the new person event for this person id.\n-        // We can join with any new auctions on-the-fly without needing any\n-        // additional persistent state.\n-        for (Auction newAuction : c.element().getValue().getAll(NexmarkQueryUtil.AUCTION_TAG)) {\n-          newAuctionCounter.inc();\n-          newOldOutputCounter.inc();\n-          c.output(KV.of(newAuction, existingPerson));\n-        }\n-        return;\n-      }\n-\n-      Person theNewPerson = null;\n-      for (Person newPerson : c.element().getValue().getAll(NexmarkQueryUtil.PERSON_TAG)) {\n-        if (theNewPerson == null) {\n-          theNewPerson = newPerson;\n+      if (c.element().getValue().newPerson != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNTQ3MQ==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/13318#discussion_r526015471", "createdAt": "2020-11-18T11:30:33Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,\n-        @TimerId(PERSON_STATE_EXPIRING) Timer timer,\n-        @StateId(PERSON) ValueState<Person> personState,\n-        @StateId(AUCTIONS) ValueState<List<Auction>> auctionsState) {\n+        @TimerId(STATE_EXPIRING) Timer timer,\n+        @StateId(PERSON) @AlwaysFetched ValueState<Person> personState,\n+        @StateId(AUCTIONS) BagState<Auction> auctionsState) {\n       // We would *almost* implement this by  rewindowing into the global window and\n       // running a combiner over the result. The combiner's accumulator would be the\n       // state we use below. However, combiners cannot emit intermediate results, thus\n-      // we need to wait for the pending ReduceFn API.\n+      // we need to wait for the pending ReduceFn API\n \n       Person existingPerson = personState.read();\n-      if (existingPerson != null) {\n-        // We've already seen the new person event for this person id.\n-        // We can join with any new auctions on-the-fly without needing any\n-        // additional persistent state.\n-        for (Auction newAuction : c.element().getValue().getAll(NexmarkQueryUtil.AUCTION_TAG)) {\n-          newAuctionCounter.inc();\n-          newOldOutputCounter.inc();\n-          c.output(KV.of(newAuction, existingPerson));\n-        }\n-        return;\n-      }\n-\n-      Person theNewPerson = null;\n-      for (Person newPerson : c.element().getValue().getAll(NexmarkQueryUtil.PERSON_TAG)) {\n-        if (theNewPerson == null) {\n-          theNewPerson = newPerson;\n+      if (c.element().getValue().newPerson != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MDU1OA=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDA3MTQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1ODo0M1rOH1CHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTozMDozOFrOH1pcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MTMzMg==", "bodyText": "If this is not the first time this person has been seen, there's no point in even fetching auctionsState, right?", "url": "https://github.com/apache/beam/pull/13318#discussion_r525371332", "createdAt": "2020-11-17T17:58:43Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,\n-        @TimerId(PERSON_STATE_EXPIRING) Timer timer,\n-        @StateId(PERSON) ValueState<Person> personState,\n-        @StateId(AUCTIONS) ValueState<List<Auction>> auctionsState) {\n+        @TimerId(STATE_EXPIRING) Timer timer,\n+        @StateId(PERSON) @AlwaysFetched ValueState<Person> personState,\n+        @StateId(AUCTIONS) BagState<Auction> auctionsState) {\n       // We would *almost* implement this by  rewindowing into the global window and\n       // running a combiner over the result. The combiner's accumulator would be the\n       // state we use below. However, combiners cannot emit intermediate results, thus\n-      // we need to wait for the pending ReduceFn API.\n+      // we need to wait for the pending ReduceFn API\n \n       Person existingPerson = personState.read();\n-      if (existingPerson != null) {\n-        // We've already seen the new person event for this person id.\n-        // We can join with any new auctions on-the-fly without needing any\n-        // additional persistent state.\n-        for (Auction newAuction : c.element().getValue().getAll(NexmarkQueryUtil.AUCTION_TAG)) {\n-          newAuctionCounter.inc();\n-          newOldOutputCounter.inc();\n-          c.output(KV.of(newAuction, existingPerson));\n-        }\n-        return;\n-      }\n-\n-      Person theNewPerson = null;\n-      for (Person newPerson : c.element().getValue().getAll(NexmarkQueryUtil.PERSON_TAG)) {\n-        if (theNewPerson == null) {\n-          theNewPerson = newPerson;\n+      if (c.element().getValue().newPerson != null) {\n+        Person person = c.element().getValue().newPerson;\n+        if (existingPerson == null) {\n+          newPersonCounter.inc();\n+          personState.write(person);\n         } else {\n-          if (theNewPerson.equals(newPerson)) {\n-            LOG.error(\"Duplicate person {}\", theNewPerson);\n+          if (person.equals(existingPerson)) {\n+            LOG.error(\"Duplicate person {}\", person);\n           } else {\n-            LOG.error(\"Conflicting persons {} and {}\", theNewPerson, newPerson);\n+            LOG.error(\"Conflicting persons {} and {}\", existingPerson, person);\n           }\n           fatalCounter.inc();\n-          continue;\n         }\n-        newPersonCounter.inc();\n         // We've now seen the person for this person id so can flush any\n         // pending auctions for the same seller id (an auction is done by only one seller).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNTUyMQ==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/13318#discussion_r526015521", "createdAt": "2020-11-18T11:30:38Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,\n-        @TimerId(PERSON_STATE_EXPIRING) Timer timer,\n-        @StateId(PERSON) ValueState<Person> personState,\n-        @StateId(AUCTIONS) ValueState<List<Auction>> auctionsState) {\n+        @TimerId(STATE_EXPIRING) Timer timer,\n+        @StateId(PERSON) @AlwaysFetched ValueState<Person> personState,\n+        @StateId(AUCTIONS) BagState<Auction> auctionsState) {\n       // We would *almost* implement this by  rewindowing into the global window and\n       // running a combiner over the result. The combiner's accumulator would be the\n       // state we use below. However, combiners cannot emit intermediate results, thus\n-      // we need to wait for the pending ReduceFn API.\n+      // we need to wait for the pending ReduceFn API\n \n       Person existingPerson = personState.read();\n-      if (existingPerson != null) {\n-        // We've already seen the new person event for this person id.\n-        // We can join with any new auctions on-the-fly without needing any\n-        // additional persistent state.\n-        for (Auction newAuction : c.element().getValue().getAll(NexmarkQueryUtil.AUCTION_TAG)) {\n-          newAuctionCounter.inc();\n-          newOldOutputCounter.inc();\n-          c.output(KV.of(newAuction, existingPerson));\n-        }\n-        return;\n-      }\n-\n-      Person theNewPerson = null;\n-      for (Person newPerson : c.element().getValue().getAll(NexmarkQueryUtil.PERSON_TAG)) {\n-        if (theNewPerson == null) {\n-          theNewPerson = newPerson;\n+      if (c.element().getValue().newPerson != null) {\n+        Person person = c.element().getValue().newPerson;\n+        if (existingPerson == null) {\n+          newPersonCounter.inc();\n+          personState.write(person);\n         } else {\n-          if (theNewPerson.equals(newPerson)) {\n-            LOG.error(\"Duplicate person {}\", theNewPerson);\n+          if (person.equals(existingPerson)) {\n+            LOG.error(\"Duplicate person {}\", person);\n           } else {\n-            LOG.error(\"Conflicting persons {} and {}\", theNewPerson, newPerson);\n+            LOG.error(\"Conflicting persons {} and {}\", existingPerson, person);\n           }\n           fatalCounter.inc();\n-          continue;\n         }\n-        newPersonCounter.inc();\n         // We've now seen the person for this person id so can flush any\n         // pending auctions for the same seller id (an auction is done by only one seller).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MTMzMg=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDA4MTU2OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowMTowOFrOH1COFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjowNDo0NFrOH9X12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Mjk0OQ==", "bodyText": "Why are you making the expiration timer a processing-time timer? Isn't event time more correct here?", "url": "https://github.com/apache/beam/pull/13318#discussion_r525372949", "createdAt": "2020-11-17T18:01:08Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -164,21 +165,19 @@ public void processElement(ProcessContext c) {\n     @StateId(PERSON)\n     private static final StateSpec<ValueState<Person>> personSpec = StateSpecs.value(Person.CODER);\n \n-    private static final String PERSON_STATE_EXPIRING = \"personStateExpiring\";\n+    private static final String STATE_EXPIRING = \"stateExpiring\";\n \n     @StateId(AUCTIONS)\n-    private final StateSpec<ValueState<List<Auction>>> auctionsSpec =\n-        StateSpecs.value(ListCoder.of(Auction.CODER));\n+    private final StateSpec<BagState<Auction>> auctionsSpec = StateSpecs.bag(Auction.CODER);\n \n-    @TimerId(PERSON_STATE_EXPIRING)\n-    private final TimerSpec timerSpec = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+    @TimerId(STATE_EXPIRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxOTA5MA==", "bodyText": "Processing time is more equivalent to flink background GC, which is why I changed.  The previous code was never gc'ing auctions without persons, which seemed incorrect.  If we want to use an event time timer, it seems that we would need to keep some additional state to keep track of the highest event time of buffered auctions or people, otherwise we could reset timer inappropriately for late events. What do you think?", "url": "https://github.com/apache/beam/pull/13318#discussion_r526019090", "createdAt": "2020-11-18T11:36:54Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -164,21 +165,19 @@ public void processElement(ProcessContext c) {\n     @StateId(PERSON)\n     private static final StateSpec<ValueState<Person>> personSpec = StateSpecs.value(Person.CODER);\n \n-    private static final String PERSON_STATE_EXPIRING = \"personStateExpiring\";\n+    private static final String STATE_EXPIRING = \"stateExpiring\";\n \n     @StateId(AUCTIONS)\n-    private final StateSpec<ValueState<List<Auction>>> auctionsSpec =\n-        StateSpecs.value(ListCoder.of(Auction.CODER));\n+    private final StateSpec<BagState<Auction>> auctionsSpec = StateSpecs.bag(Auction.CODER);\n \n-    @TimerId(PERSON_STATE_EXPIRING)\n-    private final TimerSpec timerSpec = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+    @TimerId(STATE_EXPIRING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Mjk0OQ=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDExNTgwMA==", "bodyText": "Changed back to event time timer.", "url": "https://github.com/apache/beam/pull/13318#discussion_r534115800", "createdAt": "2020-12-02T12:04:44Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -164,21 +165,19 @@ public void processElement(ProcessContext c) {\n     @StateId(PERSON)\n     private static final StateSpec<ValueState<Person>> personSpec = StateSpecs.value(Person.CODER);\n \n-    private static final String PERSON_STATE_EXPIRING = \"personStateExpiring\";\n+    private static final String STATE_EXPIRING = \"stateExpiring\";\n \n     @StateId(AUCTIONS)\n-    private final StateSpec<ValueState<List<Auction>>> auctionsSpec =\n-        StateSpecs.value(ListCoder.of(Auction.CODER));\n+    private final StateSpec<BagState<Auction>> auctionsSpec = StateSpecs.bag(Auction.CODER);\n \n-    @TimerId(PERSON_STATE_EXPIRING)\n-    private final TimerSpec timerSpec = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+    @TimerId(STATE_EXPIRING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Mjk0OQ=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDE1MDMwOnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query5.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoxNzo1NFrOH1C4nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowNToyN1rOH1syEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MzgzNg==", "bodyText": "AvroCoder tends to be very inefficient. Either write a custom coder or use SchemaCoder. To use SchemaCoder return the following from getAccumulatorCoder (unfortunately it appears that combiners have not been integrated yet with the SchemaRegistry, as otherwise it would be much simpler - just annotating with @DefaultSchema)\nJavaFieldSchema provider = new JavaFieldSchema();\nTypeDescriptor typeDescriptor = new TypeDescriptor{}();\nreturn SchemaCoder.of(provider.schemaFor(typeDescriptor), provider.toRowFunction(typeDescriptor), provider.fromRowFunction(typeDescriptor));", "url": "https://github.com/apache/beam/pull/13318#discussion_r525383836", "createdAt": "2020-11-17T18:17:54Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query5.java", "diffHunk": "@@ -53,6 +56,48 @@\n public class Query5 extends NexmarkQueryTransform<AuctionCount> {\n   private final NexmarkConfiguration configuration;\n \n+  public static class TopCombineFn\n+      extends AccumulatingCombineFn<KV<Long, Long>, Accum, KV<Long, List<Long>>> {\n+    @Override\n+    public Accum createAccumulator() {\n+      return new Accum();\n+    }\n+\n+    @DefaultCoder(AvroCoder.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3MDI4OQ==", "bodyText": "done with tweaks", "url": "https://github.com/apache/beam/pull/13318#discussion_r526070289", "createdAt": "2020-11-18T13:05:27Z", "author": {"login": "scwhittle"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query5.java", "diffHunk": "@@ -53,6 +56,48 @@\n public class Query5 extends NexmarkQueryTransform<AuctionCount> {\n   private final NexmarkConfiguration configuration;\n \n+  public static class TopCombineFn\n+      extends AccumulatingCombineFn<KV<Long, Long>, Accum, KV<Long, List<Long>>> {\n+    @Override\n+    public Accum createAccumulator() {\n+      return new Accum();\n+    }\n+\n+    @DefaultCoder(AvroCoder.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MzgzNg=="}, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzEzMDU5OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query5.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozODoyOVrOH9rJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozODoyOVrOH9rJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjA1Mg==", "bodyText": "why do you call schemaFor twice?", "url": "https://github.com/apache/beam/pull/13318#discussion_r534432052", "createdAt": "2020-12-02T19:38:29Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query5.java", "diffHunk": "@@ -53,6 +63,79 @@\n public class Query5 extends NexmarkQueryTransform<AuctionCount> {\n   private final NexmarkConfiguration configuration;\n \n+  public static class TopCombineFn\n+      extends AccumulatingCombineFn<KV<Long, Long>, Accum, KV<Long, List<Long>>> {\n+    @Override\n+    public Accum createAccumulator() {\n+      return new Accum();\n+    }\n+\n+    @Override\n+    public Coder<Accum> getAccumulatorCoder(\n+        @NonNull CoderRegistry registry, @NonNull Coder<KV<Long, Long>> inputCoder) {\n+      JavaFieldSchema provider = new JavaFieldSchema();\n+      TypeDescriptor<Accum> typeDescriptor = new TypeDescriptor<Accum>() {};\n+      provider.schemaFor(typeDescriptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d9d45ab2243c47059408e0252d5f9e8cb389c9"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2778, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}