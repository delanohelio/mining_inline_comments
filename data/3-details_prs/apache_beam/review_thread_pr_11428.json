{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTcxMDM5", "number": 11428, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNzoyM1rODy_y-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODo1NDo1MFrODzAsZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODAwNjM1OnYy", "diffSide": "RIGHT", "path": "sdks/java/container/license_scripts/license_script.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNzoyM1rOGHYD3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODowNzoyM1rOGHYD3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NzQyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              # create an empty file to aviod no file/dir existing error\n          \n          \n            \n              # create an empty file to avoid no file/dir existing error", "url": "https://github.com/apache/beam/pull/11428#discussion_r410387421", "createdAt": "2020-04-17T18:07:23Z", "author": {"login": "udim"}, "path": "sdks/java/container/license_scripts/license_script.sh", "diffHunk": "@@ -25,15 +25,23 @@ pip install PyYAML==5.3\n pip install tenacity==5.0.4\n \n # pull licenses, notices and source code\n-python sdks/java/container/license_scripts/pull_licenses_java.py\n+if [ \"$1\" = 'true' ]; then\n+  python sdks/java/container/license_scripts/pull_licenses_java.py --pull_licenses\n+else\n+  python sdks/java/container/license_scripts/pull_licenses_java.py\n+fi\n \n pip uninstall -y beautifulsoup4\n pip uninstall -y future\n pip uninstall -y PyYAML\n pip uninstall -y tenacity\n \n mkdir sdks/java/container/third_party_licenses\n-gzip -r java_third_party_licenses/*\n-cp -r java_third_party_licenses/*.jar sdks/java/container/third_party_licenses/\n-cp -r java_third_party_licenses/*.csv.gz sdks/java/container/third_party_licenses/\n+if [ \"$1\" = 'true' ]; then\n+  cp -r java_third_party_licenses/*.jar sdks/java/container/third_party_licenses/\n+  cp -r java_third_party_licenses/*.csv sdks/java/container/third_party_licenses/\n+else\n+  # create an empty file to aviod no file/dir existing error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODAyMzM5OnYy", "diffSide": "RIGHT", "path": "sdks/java/container/license_scripts/license_script.sh", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODoxMjo0OFrOGHYOlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0MjozNVrOGJTCKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA==", "bodyText": "BTW, I wanted to mention that doing a pip install/uninstall like this messes with the user's environment.\nThe standard way to run this would be via tox (see sdks/python/tox.ini), which will take care of creating a virtualenv to run this under (and you can specify a certain python version if you wish).", "url": "https://github.com/apache/beam/pull/11428#discussion_r410390164", "createdAt": "2020-04-17T18:12:48Z", "author": {"login": "udim"}, "path": "sdks/java/container/license_scripts/license_script.sh", "diffHunk": "@@ -25,15 +25,23 @@ pip install PyYAML==5.3\n pip install tenacity==5.0.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NTg1NQ==", "bodyText": "I reviewed to use tox here, but it is a little complicated. We want to keep it simple within a script, so it's easy to use and maintain. Current scripts run at local machine, (not within a docker), so docker will still have clear environment.", "url": "https://github.com/apache/beam/pull/11428#discussion_r411765855", "createdAt": "2020-04-20T23:42:22Z", "author": {"login": "Hannah-Jiang"}, "path": "sdks/java/container/license_scripts/license_script.sh", "diffHunk": "@@ -25,15 +25,23 @@ pip install PyYAML==5.3\n pip install tenacity==5.0.4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA=="}, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MTQ1NQ==", "bodyText": "I don't agree that it's acceptable to modify the user environment. Also, on Jenkins this might cause failure if this script runs concurrently with itself.\nI've opened a bug for this: https://issues.apache.org/jira/browse/BEAM-9797", "url": "https://github.com/apache/beam/pull/11428#discussion_r412391455", "createdAt": "2020-04-21T18:26:21Z", "author": {"login": "udim"}, "path": "sdks/java/container/license_scripts/license_script.sh", "diffHunk": "@@ -25,15 +25,23 @@ pip install PyYAML==5.3\n pip install tenacity==5.0.4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA=="}, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwMjIxOQ==", "bodyText": "Thank you Udi for bringing up this issue. Yes, we should fix it. I will merge this PR and work on a different PR to fix it.", "url": "https://github.com/apache/beam/pull/11428#discussion_r412402219", "createdAt": "2020-04-21T18:42:35Z", "author": {"login": "Hannah-Jiang"}, "path": "sdks/java/container/license_scripts/license_script.sh", "diffHunk": "@@ -25,15 +25,23 @@ pip install PyYAML==5.3\n pip install tenacity==5.0.4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA=="}, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODEwNjUxOnYy", "diffSide": "RIGHT", "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODozOToyMVrOGHZDLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMzowNDoyN1rOGIwWog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA==", "bodyText": "This looks good, except you're not waiting for all threads to finish so the csv_list might be incomplete.\nA ThreadPoolExecutor would be useful here and do what you want:\nRough example:\nwith concurrent.futures.ThreadPoolExecutor(max_workers=THREADS) as executor:\n  futures = [executor.submit(execute, dep) for dep in dependencies['dependencies']]\n  ... # get the future results as they become available, see example link below\nhttps://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example\nCurrently the code in execute does csv_list.append(csv_dict) at the end, which needs synchronization to work right (I assume that csv_list is shared among threads). Returning csv_dict instead will make it available as a future.result().", "url": "https://github.com/apache/beam/pull/11428#discussion_r410403628", "createdAt": "2020-04-17T18:39:21Z", "author": {"login": "udim"}, "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []\n+    no_licenses = []\n+    no_license_type = []\n+    incorrect_source_url = []\n \n-        # pull source code if license_type is one of SOURCE_CODE_REQUIRED_LICENSES.\n-        if any(x in license_type.lower()\n-               for x in SOURCE_CODE_REQUIRED_LICENSES):\n-            try:\n-                base_url = dep_config[name][version]['source']\n-            except:\n-                module = dep['moduleName'].split(':')[0].replace('.', '/')\n-                base_url = maven_url_temp.format(module=module + '/' + name,\n-                                                 version=version)\n-            pull_source_code(base_url, dir_name, name_version,\n-                             incorrect_source_url)\n-            source_included = True\n-        else:\n-            source_included = False\n-\n-        csv_dict[name_version] = {\n-            'url_to_license': license_url,\n-            'license_type': license_type,\n-            'source_included': source_included\n-        }\n+    queue = Queue()\n+    for x in range(THREADS):\n+        worker = Worker(queue)\n+        worker.daemon = True\n+        worker.start()\n+    for dep in dependencies['dependencies']:\n+        queue.put(dep)\n+    queue.join()\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxODkwMQ==", "bodyText": "According to this, queue.join() is unblocked when all items in the queue are processed, so I think it works as intended. (csv_list has all records it should have.)", "url": "https://github.com/apache/beam/pull/11428#discussion_r411718901", "createdAt": "2020-04-20T21:55:42Z", "author": {"login": "Hannah-Jiang"}, "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []\n+    no_licenses = []\n+    no_license_type = []\n+    incorrect_source_url = []\n \n-        # pull source code if license_type is one of SOURCE_CODE_REQUIRED_LICENSES.\n-        if any(x in license_type.lower()\n-               for x in SOURCE_CODE_REQUIRED_LICENSES):\n-            try:\n-                base_url = dep_config[name][version]['source']\n-            except:\n-                module = dep['moduleName'].split(':')[0].replace('.', '/')\n-                base_url = maven_url_temp.format(module=module + '/' + name,\n-                                                 version=version)\n-            pull_source_code(base_url, dir_name, name_version,\n-                             incorrect_source_url)\n-            source_included = True\n-        else:\n-            source_included = False\n-\n-        csv_dict[name_version] = {\n-            'url_to_license': license_url,\n-            'license_type': license_type,\n-            'source_included': source_included\n-        }\n+    queue = Queue()\n+    for x in range(THREADS):\n+        worker = Worker(queue)\n+        worker.daemon = True\n+        worker.start()\n+    for dep in dependencies['dependencies']:\n+        queue.put(dep)\n+    queue.join()\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA=="}, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MTg5NQ==", "bodyText": "Sorry, you're right. I wasn't aware of task_done.\nI still believe that a ThreadPoolExecutor is useful, but feel free to resolve this without any changes.", "url": "https://github.com/apache/beam/pull/11428#discussion_r411751895", "createdAt": "2020-04-20T23:10:22Z", "author": {"login": "udim"}, "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []\n+    no_licenses = []\n+    no_license_type = []\n+    incorrect_source_url = []\n \n-        # pull source code if license_type is one of SOURCE_CODE_REQUIRED_LICENSES.\n-        if any(x in license_type.lower()\n-               for x in SOURCE_CODE_REQUIRED_LICENSES):\n-            try:\n-                base_url = dep_config[name][version]['source']\n-            except:\n-                module = dep['moduleName'].split(':')[0].replace('.', '/')\n-                base_url = maven_url_temp.format(module=module + '/' + name,\n-                                                 version=version)\n-            pull_source_code(base_url, dir_name, name_version,\n-                             incorrect_source_url)\n-            source_included = True\n-        else:\n-            source_included = False\n-\n-        csv_dict[name_version] = {\n-            'url_to_license': license_url,\n-            'license_type': license_type,\n-            'source_included': source_included\n-        }\n+    queue = Queue()\n+    for x in range(THREADS):\n+        worker = Worker(queue)\n+        worker.daemon = True\n+        worker.start()\n+    for dep in dependencies['dependencies']:\n+        queue.put(dep)\n+    queue.join()\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA=="}, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzNDAxOA==", "bodyText": "Thanks Udi. Yes, I agree ThreadPoolExecutor is better here, but it (concurrent.future) only works with Py3. In order to use virtual env, we need to use tox and it brings unnecessary complexity. I think it's good enough for now and we can change to ThreadPoolExecutor when we sunset down Py2.", "url": "https://github.com/apache/beam/pull/11428#discussion_r411834018", "createdAt": "2020-04-21T03:04:27Z", "author": {"login": "Hannah-Jiang"}, "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []\n+    no_licenses = []\n+    no_license_type = []\n+    incorrect_source_url = []\n \n-        # pull source code if license_type is one of SOURCE_CODE_REQUIRED_LICENSES.\n-        if any(x in license_type.lower()\n-               for x in SOURCE_CODE_REQUIRED_LICENSES):\n-            try:\n-                base_url = dep_config[name][version]['source']\n-            except:\n-                module = dep['moduleName'].split(':')[0].replace('.', '/')\n-                base_url = maven_url_temp.format(module=module + '/' + name,\n-                                                 version=version)\n-            pull_source_code(base_url, dir_name, name_version,\n-                             incorrect_source_url)\n-            source_included = True\n-        else:\n-            source_included = False\n-\n-        csv_dict[name_version] = {\n-            'url_to_license': license_url,\n-            'license_type': license_type,\n-            'source_included': source_included\n-        }\n+    queue = Queue()\n+    for x in range(THREADS):\n+        worker = Worker(queue)\n+        worker.daemon = True\n+        worker.start()\n+    for dep in dependencies['dependencies']:\n+        queue.put(dep)\n+    queue.join()\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA=="}, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODE1MzMzOnYy", "diffSide": "RIGHT", "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODo1NDo1MFrOGHZhTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMzowNjoyMVrOGIwY2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTM0MQ==", "bodyText": "These lists need to have synchronized access if they are to be modified by different threads.\nhttps://stackoverflow.com/questions/2227169/are-python-built-in-containers-thread-safe", "url": "https://github.com/apache/beam/pull/11428#discussion_r410411341", "createdAt": "2020-04-17T18:54:50Z", "author": {"login": "udim"}, "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzNDU4Nw==", "bodyText": "According to this (post)[https://stackoverflow.com/questions/6319207/are-lists-thread-safe], append operation is thread safe. But I added lock to make sure all records are added and the operation is not expensive.", "url": "https://github.com/apache/beam/pull/11428#discussion_r411834587", "createdAt": "2020-04-21T03:06:21Z", "author": {"login": "Hannah-Jiang"}, "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTM0MQ=="}, "originalCommit": {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219"}, "originalPosition": 300}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1277, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}