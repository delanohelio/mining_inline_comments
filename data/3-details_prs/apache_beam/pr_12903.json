{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDY0NjQz", "number": 12903, "title": "[BEAM-9616] Add RegisterDoFn", "bodyText": "Adds a beam.RegisterDoFn call for users to call on their DoFns instead of individually calling RegisterFunction and RegisterType for all parameter types, using reflection.\nThese registrations are important to ensure workers can process and lookup types and functions correctly.\nThis PR also lets starcgen key off of RegisterDoFn in addition to the identifiers list.\nOnly transforms/top has been adjusted to demonstrate, and a full go generate ./... pass run on the SDK to demonstrate that the code generator works in both modes simultaneously. In time, we'll remove the identifiers approach and require RegisterDoFn as the only way to hint to the code generator.\nThe extra changes are go fmt changes missed from other PRs and are benign.\nTODO in later PRs:\n\nMake use of RegisterDoFn everywhere in the GoSDK and examples and document it as a best practice.\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n](https://ci-beam.apache.org/job/beam_PostCommit_Python36/lastCompletedBuild/)\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-22T16:38:43Z", "url": "https://github.com/apache/beam/pull/12903", "merged": true, "mergeCommit": {"oid": "806e67d77b7e5d59b00d5ad0872923fae29cce9a"}, "closed": true, "closedAt": "2020-09-25T17:07:59Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLao4LgH2gAyNDkxMDY0NjQzOmI4NzRhZmMwZDBmYzJhZTY1N2ZlNDI5MzI4NTliZjhlNDI3N2EyYjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMY3IcAH2gAyNDkxMDY0NjQzOmMxOTA1MjJhN2M5NGRjOGIwN2JhYzBkZTZkZWMzZTA0ODQ1YmUwOWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b874afc0d0fc2ae657fe42932859bf8e4277a2b2", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/b874afc0d0fc2ae657fe42932859bf8e4277a2b2", "committedDate": "2020-09-22T16:32:35Z", "message": "[BEAM-9616] Add RegisterDoFn."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "642948589c3c30dba4d02fc0f72c7b5f5cfd0d91", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/642948589c3c30dba4d02fc0f72c7b5f5cfd0d91", "committedDate": "2020-09-24T16:16:39Z", "message": "[BEAM-9616] Make starcgen understand RegisterDoFn"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDUzNzg2", "url": "https://github.com/apache/beam/pull/12903#pullrequestreview-496053786", "createdAt": "2020-09-25T01:33:35Z", "commit": {"oid": "642948589c3c30dba4d02fc0f72c7b5f5cfd0d91"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTozMzozNlrOHXx8Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNTozOTozNVrOHX1pjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5NzUzNQ==", "bodyText": "Could this just use the rt from near the top of the function? It's a bit confusing right now with it named the same as a different scoped variable in the same function.", "url": "https://github.com/apache/beam/pull/12903#discussion_r494697535", "createdAt": "2020-09-25T01:33:36Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/genx/genx.go", "diffHunk": "@@ -0,0 +1,172 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package genx is a convenience package to better support the code\n+// generator. It can be depended on by the user facing beam package\n+// and be refered to by generated code.\n+//\n+// Similarly, it can depend on beam internals and access the canonical\n+// method list in the graph package, or other packages to filter out\n+// types that aren't necessary for registration (like context.Context).\n+package genx\n+\n+import (\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/funcx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime\"\n+)\n+\n+// RegisterDoFn is a convenience function for registering DoFns.\n+// Differs from RegisterFunction and RegisterType by introspecting\n+// all parameters and returns of Lifecycle methods on the dofn,\n+// and registers those types for you.\n+//\n+// Panics if not passed a dofn.\n+func RegisterDoFn(dofn interface{}) {\n+\tf, ts, err := registerDoFn(dofn)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif f != nil {\n+\t\truntime.RegisterFunction(f)\n+\t}\n+\tfor _, t := range ts {\n+\t\truntime.RegisterType(t)\n+\t}\n+}\n+\n+// registerDoFn returns all types associated with the provided DoFn.\n+// If passed a functional DoFn, the first return is a Function to\n+// register with runtime.RegisterFunction.\n+// The second return is all types to register with runtime.RegisterType.\n+// Returns an error if the passed in values are not DoFns.\n+func registerDoFn(dofn interface{}) (interface{}, []reflect.Type, error) {\n+\tif rt, ok := dofn.(reflect.Type); ok {\n+\t\tif rt.Kind() == reflect.Ptr {\n+\t\t\trt = rt.Elem()\n+\t\t}\n+\t\tdofn = reflect.New(rt).Interface()\n+\t}\n+\tfn, err := graph.NewFn(dofn)\n+\tif err != nil {\n+\t\treturn nil, nil, err\n+\t}\n+\tc := cache{}\n+\tvar valid bool\n+\t// Validates that this is a DoFn or combineFn.\n+\tdo, err := graph.AsDoFn(fn, graph.MainUnknown)\n+\tif err == nil {\n+\t\tvalid = true\n+\t\thandleDoFn(do, c)\n+\t} else if cmb, err2 := graph.AsCombineFn(fn); err2 == nil {\n+\t\tvalid = true\n+\t\thandleCombineFn(cmb, c)\n+\t}\n+\tif !valid {\n+\t\t// Return the DoFn specific error as that's more common.\n+\t\treturn nil, nil, err\n+\t}\n+\n+\tvar retFunc interface{}\n+\trt := reflect.TypeOf(dofn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642948589c3c30dba4d02fc0f72c7b5f5cfd0d91"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5ODYwNA==", "bodyText": "What's the reason for creating a new interface from a reflect type for dofn here? Is it a way to reset the dofn to it's default values by creating a new instance?", "url": "https://github.com/apache/beam/pull/12903#discussion_r494698604", "createdAt": "2020-09-25T01:37:18Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/genx/genx.go", "diffHunk": "@@ -0,0 +1,172 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package genx is a convenience package to better support the code\n+// generator. It can be depended on by the user facing beam package\n+// and be refered to by generated code.\n+//\n+// Similarly, it can depend on beam internals and access the canonical\n+// method list in the graph package, or other packages to filter out\n+// types that aren't necessary for registration (like context.Context).\n+package genx\n+\n+import (\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/funcx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime\"\n+)\n+\n+// RegisterDoFn is a convenience function for registering DoFns.\n+// Differs from RegisterFunction and RegisterType by introspecting\n+// all parameters and returns of Lifecycle methods on the dofn,\n+// and registers those types for you.\n+//\n+// Panics if not passed a dofn.\n+func RegisterDoFn(dofn interface{}) {\n+\tf, ts, err := registerDoFn(dofn)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif f != nil {\n+\t\truntime.RegisterFunction(f)\n+\t}\n+\tfor _, t := range ts {\n+\t\truntime.RegisterType(t)\n+\t}\n+}\n+\n+// registerDoFn returns all types associated with the provided DoFn.\n+// If passed a functional DoFn, the first return is a Function to\n+// register with runtime.RegisterFunction.\n+// The second return is all types to register with runtime.RegisterType.\n+// Returns an error if the passed in values are not DoFns.\n+func registerDoFn(dofn interface{}) (interface{}, []reflect.Type, error) {\n+\tif rt, ok := dofn.(reflect.Type); ok {\n+\t\tif rt.Kind() == reflect.Ptr {\n+\t\t\trt = rt.Elem()\n+\t\t}\n+\t\tdofn = reflect.New(rt).Interface()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642948589c3c30dba4d02fc0f72c7b5f5cfd0d91"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MzQ2MA==", "bodyText": "Note that while restrictions need to be serializable, restriction trackers don't (and probably can't). Registering RTrackers is probably not a problem as long as nothing actually tries to use the registered type, but otherwise you can probably avoid registering RTrackers by removing this line pulling CreateTrackerFn.", "url": "https://github.com/apache/beam/pull/12903#discussion_r494753460", "createdAt": "2020-09-25T05:21:33Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/genx/genx.go", "diffHunk": "@@ -0,0 +1,172 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package genx is a convenience package to better support the code\n+// generator. It can be depended on by the user facing beam package\n+// and be refered to by generated code.\n+//\n+// Similarly, it can depend on beam internals and access the canonical\n+// method list in the graph package, or other packages to filter out\n+// types that aren't necessary for registration (like context.Context).\n+package genx\n+\n+import (\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/funcx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime\"\n+)\n+\n+// RegisterDoFn is a convenience function for registering DoFns.\n+// Differs from RegisterFunction and RegisterType by introspecting\n+// all parameters and returns of Lifecycle methods on the dofn,\n+// and registers those types for you.\n+//\n+// Panics if not passed a dofn.\n+func RegisterDoFn(dofn interface{}) {\n+\tf, ts, err := registerDoFn(dofn)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif f != nil {\n+\t\truntime.RegisterFunction(f)\n+\t}\n+\tfor _, t := range ts {\n+\t\truntime.RegisterType(t)\n+\t}\n+}\n+\n+// registerDoFn returns all types associated with the provided DoFn.\n+// If passed a functional DoFn, the first return is a Function to\n+// register with runtime.RegisterFunction.\n+// The second return is all types to register with runtime.RegisterType.\n+// Returns an error if the passed in values are not DoFns.\n+func registerDoFn(dofn interface{}) (interface{}, []reflect.Type, error) {\n+\tif rt, ok := dofn.(reflect.Type); ok {\n+\t\tif rt.Kind() == reflect.Ptr {\n+\t\t\trt = rt.Elem()\n+\t\t}\n+\t\tdofn = reflect.New(rt).Interface()\n+\t}\n+\tfn, err := graph.NewFn(dofn)\n+\tif err != nil {\n+\t\treturn nil, nil, err\n+\t}\n+\tc := cache{}\n+\tvar valid bool\n+\t// Validates that this is a DoFn or combineFn.\n+\tdo, err := graph.AsDoFn(fn, graph.MainUnknown)\n+\tif err == nil {\n+\t\tvalid = true\n+\t\thandleDoFn(do, c)\n+\t} else if cmb, err2 := graph.AsCombineFn(fn); err2 == nil {\n+\t\tvalid = true\n+\t\thandleCombineFn(cmb, c)\n+\t}\n+\tif !valid {\n+\t\t// Return the DoFn specific error as that's more common.\n+\t\treturn nil, nil, err\n+\t}\n+\n+\tvar retFunc interface{}\n+\trt := reflect.TypeOf(dofn)\n+\tswitch rt.Kind() {\n+\tcase reflect.Func:\n+\t\tretFunc = dofn\n+\t\tc.regFuncTypes(rt)\n+\tdefault:\n+\t\tc.regType(rt)\n+\t}\n+\tvar retTypes []reflect.Type\n+\tfor _, t := range c {\n+\t\tretTypes = append(retTypes, t)\n+\t}\n+\treturn retFunc, retTypes, nil\n+}\n+\n+func handleDoFn(fn *graph.DoFn, c cache) {\n+\tc.pullMethod(fn.SetupFn())\n+\tc.pullMethod(fn.StartBundleFn())\n+\tc.pullMethod(fn.ProcessElementFn())\n+\tc.pullMethod(fn.FinishBundleFn())\n+\tc.pullMethod(fn.TeardownFn())\n+\tif !fn.IsSplittable() {\n+\t\treturn\n+\t}\n+\tsdf := (*graph.SplittableDoFn)(fn)\n+\tc.pullMethod(sdf.CreateInitialRestrictionFn())\n+\tc.pullMethod(sdf.CreateTrackerFn())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642948589c3c30dba4d02fc0f72c7b5f5cfd0d91"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1ODI4NA==", "bodyText": "Nitpick: Is removing the last sentence intentional? If so, should it also be removed in forward.go?", "url": "https://github.com/apache/beam/pull/12903#discussion_r494758284", "createdAt": "2020-09-25T05:39:35Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/symbols.go", "diffHunk": "@@ -72,7 +72,7 @@ type SymbolResolver interface {\n // RegisterFunction allows function registration. It is beneficial for performance\n // and is needed for functions -- such as custom coders -- serialized during unit\n // tests, where the underlying symbol table is not available. It should be called\n-// in init() only. Returns the external key for the function.\n+// in `init()` only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642948589c3c30dba4d02fc0f72c7b5f5cfd0d91"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f4b41eb6596056f9c5e51b692de801aee8c8d96", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/0f4b41eb6596056f9c5e51b692de801aee8c8d96", "committedDate": "2020-09-25T16:50:00Z", "message": "!fixup add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c190522a7c94dc8b07bac0de6dec3e04845be09d", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/c190522a7c94dc8b07bac0de6dec3e04845be09d", "committedDate": "2020-09-25T17:02:16Z", "message": "!fixup usage documentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2460, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}