{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NjY4Nzcz", "number": 11538, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0NDoxNlrOD21zlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNTo1M1rOD3Yk5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODMxMjUzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0NDoxNlrOGMyT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozODoxNVrOGOxakA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2MDM5Mw==", "bodyText": "requestTime?", "url": "https://github.com/apache/beam/pull/11538#discussion_r416060393", "createdAt": "2020-04-27T18:44:16Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -475,7 +497,14 @@ public void initClient() throws IOException {\n     public void listMessages(ProcessContext context) throws IOException {\n       String hl7v2Store = context.element();\n       // Output all elements of all pages.\n-      this.client.getHL7v2MessageStream(hl7v2Store, this.filter).forEach(context::output);\n+      HttpHealthcareApiClient.HL7v2MessagePages pages =\n+          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+      long reqestTime = Instant.now().getMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2f85e012134be5c1733c170e7b11aea5c952a7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0Mjg2NA==", "bodyText": "This is to track latency of list pagination requests in a metric", "url": "https://github.com/apache/beam/pull/11538#discussion_r418142864", "createdAt": "2020-04-30T16:38:15Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -475,7 +497,14 @@ public void initClient() throws IOException {\n     public void listMessages(ProcessContext context) throws IOException {\n       String hl7v2Store = context.element();\n       // Output all elements of all pages.\n-      this.client.getHL7v2MessageStream(hl7v2Store, this.filter).forEach(context::output);\n+      HttpHealthcareApiClient.HL7v2MessagePages pages =\n+          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+      long reqestTime = Instant.now().getMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2MDM5Mw=="}, "originalCommit": {"oid": "ea2f85e012134be5c1733c170e7b11aea5c952a7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAwOTM1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNTo1M1rOGNnP_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOTowMjowMVrOGOM1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzc0MA==", "bodyText": "Unfortunately, this is not possible. If you are paginating from inside the single DoFn processelement call, the data coming out of it will only go downstream after the element is done being processed, so this windowing is not changing that in the execution.\nThis is because bundle execution is committed atomically, so the whole bundle executes before data can go downstream. You do touch on an interesting example, which is one of the reasons that we came up with SplittableDoFn.\nSomething you could try to do is:\nPColll<HL7v2Message> pages = hl7v2Stores.apply(ParDo.of(new RetrieveAndOutputPagesFn()))\n\npages.apply(Reshuffle.viaRandomKey()).apply(ParDo.of(new FetchEachPageFn())\n\nThough I don't know if you can actually do that : )", "url": "https://github.com/apache/beam/pull/11538#discussion_r416927740", "createdAt": "2020-04-28T21:15:53Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -437,6 +444,20 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n           .apply(Create.of(this.hl7v2Stores))\n           .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n           .setCoder(new HL7v2MessageCoder())\n+          // Listing takes a long time for each input element (HL7v2 store) because it has to\n+          // paginate through results in a single thread / ProcessElement call in order to keep\n+          // track of page token.\n+          // Eagerly emit data on 1 second intervals so downstream processing can get started before\n+          // all of the list results have been paginated through.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454f1ef7d920a799db10e034d0fb430399fa5f5c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NzI3Ng==", "bodyText": "Each \"page\" of responses is a collection of messages. It don't think it make sense to page through all the pages (dropping the real data) to then re-fetch it in the downstream parallelized step.\nIn testing w/ customer when pointing at an HL7v2 store with many, many messages (and therefore pages) they reported\nbefore this change:\nthere was a long time before any elements were output. so long that they gave up and killed the pipeline.\nafter this change:\nthere was data coming out more regularly.\nThis could have been a misunderstanding or a bad test scenario.\nI will try to come up with a test that reproduces this behavior.", "url": "https://github.com/apache/beam/pull/11538#discussion_r416957276", "createdAt": "2020-04-28T22:16:44Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -437,6 +444,20 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n           .apply(Create.of(this.hl7v2Stores))\n           .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n           .setCoder(new HL7v2MessageCoder())\n+          // Listing takes a long time for each input element (HL7v2 store) because it has to\n+          // paginate through results in a single thread / ProcessElement call in order to keep\n+          // track of page token.\n+          // Eagerly emit data on 1 second intervals so downstream processing can get started before\n+          // all of the list results have been paginated through.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzc0MA=="}, "originalCommit": {"oid": "454f1ef7d920a799db10e034d0fb430399fa5f5c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMDY5Ng==", "bodyText": "@pabloem does this mean that all of a single element's output must be buffered in memory? or will runner be smart enough to spill to disk?\nBased on my initial investigation I was not able to reproduce the behavior reported by customer in a unit test.\nsummarized in this gist", "url": "https://github.com/apache/beam/pull/11538#discussion_r417000696", "createdAt": "2020-04-29T00:18:32Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -437,6 +444,20 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n           .apply(Create.of(this.hl7v2Stores))\n           .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n           .setCoder(new HL7v2MessageCoder())\n+          // Listing takes a long time for each input element (HL7v2 store) because it has to\n+          // paginate through results in a single thread / ProcessElement call in order to keep\n+          // track of page token.\n+          // Eagerly emit data on 1 second intervals so downstream processing can get started before\n+          // all of the list results have been paginated through.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzc0MA=="}, "originalCommit": {"oid": "454f1ef7d920a799db10e034d0fb430399fa5f5c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU0MzQ4Mw==", "bodyText": "I've opened https://issues.apache.org/jira/browse/BEAM-9856 to explore how this could be done with splittable dofn.", "url": "https://github.com/apache/beam/pull/11538#discussion_r417543483", "createdAt": "2020-04-29T19:02:01Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -437,6 +444,20 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n           .apply(Create.of(this.hl7v2Stores))\n           .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n           .setCoder(new HL7v2MessageCoder())\n+          // Listing takes a long time for each input element (HL7v2 store) because it has to\n+          // paginate through results in a single thread / ProcessElement call in order to keep\n+          // track of page token.\n+          // Eagerly emit data on 1 second intervals so downstream processing can get started before\n+          // all of the list results have been paginated through.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzc0MA=="}, "originalCommit": {"oid": "454f1ef7d920a799db10e034d0fb430399fa5f5c"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1159, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}