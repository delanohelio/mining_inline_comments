{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDY1MTM0", "number": 12460, "title": "[BEAM-10545] HtmlView module", "bodyText": "Added a HtmlView module to render given HTML and execute given\nscripts from the provider model.\nIntegrated react framework to the jest testing framework and eslint.\nAdded line length limit (80) to eslint and prettier. Note prettier's\nprintWidth is not a hard limit as max-len rule. Sometimes, the code\nneeds to be written in a specific way to meet both eslint and\nprettier. An example, long strings (if not url) should be broken into\nsuitable pieces.\nThe jlpm(yarn/npm) installations are:\njlpm add --dev react-dom @types/react-dom eslint-plugin-react\n@types/react is resoluted to the version bundled with jupyter\napputils.\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-04T00:46:12Z", "url": "https://github.com/apache/beam/pull/12460", "merged": true, "mergeCommit": {"oid": "bf85a7ab920bdb3c7daa585c360ae5083f1eb070"}, "closed": true, "closedAt": "2020-08-14T01:11:43Z", "author": {"login": "KevinGG"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7rA6sAH2gAyNDYyNDY1MTM0OjVhZTcxZjkwNTEyODY2ZmVlNzM2MjE3MWE4NjE4NGZjNzhmYzIwMWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-Qtn3AFqTQ2NjIxNTU3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5ae71f90512866fee7362171a86184fc78fc201b", "committedDate": "2020-08-04T18:34:32Z", "message": "[BEAM-10545] HtmlView module\n\n1. Added a HtmlView module to render given HTML and execute given\n   scripts from the provider model.\n2. Integrated react framework to the jest testing framework and eslint.\n3. Added line length limit (80) to eslint and prettier. Note prettier's\n   printWidth is not a hard limit as max-len rule. Sometimes, the code\n   needs to be written in a specific way to meet both eslint and\n   prettier. An example, long strings (if not url) should be broken into\n   suitable pieces.\n4. The jlpm(yarn/npm) installations are:\n   jlpm add --dev react-dom @types/react-dom eslint-plugin-react\n5. @types/react is resoluted to the version bundled with jupyter\n   apputils."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d470032be01495442df9970cb4cda8f046b22830", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d470032be01495442df9970cb4cda8f046b22830", "committedDate": "2020-08-04T00:38:06Z", "message": "[BEAM-10545] HtmlView module\n\n1. Added a HtmlView module to render given HTML and execute given\n   scripts from the provider model.\n2. Integrated react framework to the jest testing framework and eslint.\n3. Added line length limit (80) to eslint and prettier. Note prettier's\n   printWidth is not a hard limit as max-len rule. Sometimes, the code\n   needs to be written in a specific way to meet both eslint and\n   prettier. An example, long strings (if not url) should be broken into\n   suitable pieces.\n4. The jlpm(yarn/npm) installations are:\n   jlpm add --dev react-dom @types/react-dom eslint-plugin-react\n5. @types/react is resoluted to the version bundled with jupyter\n   apputils."}, "afterCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5ae71f90512866fee7362171a86184fc78fc201b", "committedDate": "2020-08-04T18:34:32Z", "message": "[BEAM-10545] HtmlView module\n\n1. Added a HtmlView module to render given HTML and execute given\n   scripts from the provider model.\n2. Integrated react framework to the jest testing framework and eslint.\n3. Added line length limit (80) to eslint and prettier. Note prettier's\n   printWidth is not a hard limit as max-len rule. Sometimes, the code\n   needs to be written in a specific way to meet both eslint and\n   prettier. An example, long strings (if not url) should be broken into\n   suitable pieces.\n4. The jlpm(yarn/npm) installations are:\n   jlpm add --dev react-dom @types/react-dom eslint-plugin-react\n5. @types/react is resoluted to the version bundled with jupyter\n   apputils."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzE0MjM3", "url": "https://github.com/apache/beam/pull/12460#pullrequestreview-461714237", "createdAt": "2020-08-05T14:22:33Z", "commit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyMjozM1rOG8L_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyOToyNVrOG8MTWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NDE4Ng==", "bodyText": "nit I think it's generally preferred to use string[] for primitive array types.", "url": "https://github.com/apache/beam/pull/12460#discussion_r465764186", "createdAt": "2020-08-05T14:22:33Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2Njc2OQ==", "bodyText": "Is this only included for test purposes? Or is there somewhere else that it's expected to be used.", "url": "https://github.com/apache/beam/pull/12460#discussion_r465766769", "createdAt": "2020-08-05T14:25:56Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;\n+}\n+\n+interface IHtmlViewProps {\n+  htmlProvider: IHtmlProvider;\n+}\n+\n+interface IHtmlViewState {\n+  innerHtml: string;\n+  script: Array<string>;\n+}\n+\n+/**\n+ * A common HTML viewing component that renders given HTML and executes scripts\n+ * from the given provider.\n+ */\n+export class HtmlView extends React.Component<IHtmlViewProps, IHtmlViewState> {\n+  constructor(props: IHtmlViewProps) {\n+    super(props);\n+    this.state = {\n+      innerHtml: props.htmlProvider.html,\n+      script: []\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1000);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    const currentHtml = this.state.innerHtml;\n+    const htmlToUpdate = this.props.htmlProvider.html;\n+    const currentScript = this.state.script;\n+    const scriptToUpdate = [...this.props.htmlProvider.script];\n+    if (htmlToUpdate !== currentHtml) {\n+      this.setState({\n+        innerHtml: htmlToUpdate,\n+        // As long as the html is updated, clear the script state.\n+        script: []\n+      });\n+    }\n+    /* Depending on whether this iteration updates the html, the scripts\n+     * are executed differently.\n+     * Html updated: all scripts are new, start execution from index 0;\n+     * Html not updated: only newly added scripts need to be executed.\n+     */\n+    const currentScriptLength =\n+      htmlToUpdate === currentHtml ? currentScript.length : 0;\n+    if (scriptToUpdate.length > currentScriptLength) {\n+      this.setState(\n+        {\n+          script: scriptToUpdate\n+        },\n+        // Executes scripts once the state is updated.\n+        () => {\n+          for (let i = currentScriptLength; i < scriptToUpdate.length; ++i) {\n+            new Function(scriptToUpdate[i])();\n+          }\n+        }\n+      );\n+    }\n+  }\n+\n+  render(): React.ReactNode {\n+    return (\n+      // This injects raw HTML fetched from kernel into JSX.\n+      <div dangerouslySetInnerHTML={{ __html: this.state.innerHtml }} />\n+    );\n+  }\n+\n+  private _updateRenderTimerId: number;\n+}\n+\n+/**\n+ * Makes the browser support HTML import and import HTML from given hrefs if\n+ * any is given.\n+ *\n+ * Native HTML import has been deprecated by modern browsers. To support\n+ * importing reusable HTML templates, webcomponentsjs library is needed.\n+ * The given hrefs will be imported once the library is loaded.\n+ *\n+ * Note everything is appended to head and if there are duplicated HTML\n+ * imports, only the first one will take effect.\n+ */\n+export function importHtml(hrefs: Array<string>): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2OTMwNw==", "bodyText": "Haha as the property name suggests, this is definitely a risky operation from a security perspective since the markup being injected has the ability to run scripts in the user's context with access to whatever resources their credentials provide.\nIs there any alternative that could be considered? Could you create an <iframe> element and render the HTML there so that it's sandboxed? I don't have any fundamental objections to this as I don't know the full context, bu  I know this type of thing has been looked upon with significant concern by our internal security reviewers and has implications for us being able to include certain types of extensions in our enterprise product.", "url": "https://github.com/apache/beam/pull/12460#discussion_r465769307", "createdAt": "2020-08-05T14:29:25Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;\n+}\n+\n+interface IHtmlViewProps {\n+  htmlProvider: IHtmlProvider;\n+}\n+\n+interface IHtmlViewState {\n+  innerHtml: string;\n+  script: Array<string>;\n+}\n+\n+/**\n+ * A common HTML viewing component that renders given HTML and executes scripts\n+ * from the given provider.\n+ */\n+export class HtmlView extends React.Component<IHtmlViewProps, IHtmlViewState> {\n+  constructor(props: IHtmlViewProps) {\n+    super(props);\n+    this.state = {\n+      innerHtml: props.htmlProvider.html,\n+      script: []\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1000);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    const currentHtml = this.state.innerHtml;\n+    const htmlToUpdate = this.props.htmlProvider.html;\n+    const currentScript = this.state.script;\n+    const scriptToUpdate = [...this.props.htmlProvider.script];\n+    if (htmlToUpdate !== currentHtml) {\n+      this.setState({\n+        innerHtml: htmlToUpdate,\n+        // As long as the html is updated, clear the script state.\n+        script: []\n+      });\n+    }\n+    /* Depending on whether this iteration updates the html, the scripts\n+     * are executed differently.\n+     * Html updated: all scripts are new, start execution from index 0;\n+     * Html not updated: only newly added scripts need to be executed.\n+     */\n+    const currentScriptLength =\n+      htmlToUpdate === currentHtml ? currentScript.length : 0;\n+    if (scriptToUpdate.length > currentScriptLength) {\n+      this.setState(\n+        {\n+          script: scriptToUpdate\n+        },\n+        // Executes scripts once the state is updated.\n+        () => {\n+          for (let i = currentScriptLength; i < scriptToUpdate.length; ++i) {\n+            new Function(scriptToUpdate[i])();\n+          }\n+        }\n+      );\n+    }\n+  }\n+\n+  render(): React.ReactNode {\n+    return (\n+      // This injects raw HTML fetched from kernel into JSX.\n+      <div dangerouslySetInnerHTML={{ __html: this.state.innerHtml }} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "213c2c72a0e1a0fd15460add10df81e6b6c9c542", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/213c2c72a0e1a0fd15460add10df81e6b6c9c542", "committedDate": "2020-08-11T20:41:42Z", "message": "Use primitive string[] to replace Array<string> type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjE1NTc0", "url": "https://github.com/apache/beam/pull/12460#pullrequestreview-466215574", "createdAt": "2020-08-12T19:37:42Z", "commit": {"oid": "213c2c72a0e1a0fd15460add10df81e6b6c9c542"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3711, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}