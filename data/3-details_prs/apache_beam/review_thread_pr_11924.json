{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDU2NTk2", "number": 11924, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoyNDoyNVrOEDFogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxOTozN1rOERnp3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjczNDc0OnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoyNDoyNVrOGf8UQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo1MzoxNFrOGiAImQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NzI2NQ==", "bodyText": "@kennknowles for comment. This doesn't look right to me, as I don't think we should be modifying the WindmillTimerInternals here. I think we just want to merge the timer modifications from processing the workitem into this priority queue; note that if timers are deleted, we need to detect that as well and remove from the priority queue.", "url": "https://github.com/apache/beam/pull/11924#discussion_r436147265", "createdAt": "2020-06-05T20:24:25Z", "author": {"login": "reuvenlax"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -577,12 +583,21 @@ public void flushState() {\n                         WindmillTimerInternals.windmillTimerToTimerData(\n                             WindmillNamespacePrefix.USER_NAMESPACE_PREFIX, timer, windowCoder))\n                 .iterator();\n+\n+        cachedFiredUserTimers.forEachRemaining(toBeFiredTimersOrdered::add);\n+      }\n+\n+      Instant currentInputWatermark = userTimerInternals.currentInputWatermarkTime();\n+      if (userTimerInternals.hasTimerBefore(currentInputWatermark)) {\n+        while (!toBeFiredTimersOrdered.isEmpty()) {\n+          userTimerInternals.setTimer(toBeFiredTimersOrdered.poll());\n+        }\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzIyMA==", "bodyText": "Yea I don't actually understand what this block is for.\nFWIW to do timer deletion/reset cheaply without building a bespoke data structure just keep a map from id to firing time or tombstone. This way, whenever a timer comes up in the prio queue you pull out the actual time for it from the map. If it is actually set for another time, don't fire it. If it is obsolete, don't fire it.", "url": "https://github.com/apache/beam/pull/11924#discussion_r436173220", "createdAt": "2020-06-05T21:31:27Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -577,12 +583,21 @@ public void flushState() {\n                         WindmillTimerInternals.windmillTimerToTimerData(\n                             WindmillNamespacePrefix.USER_NAMESPACE_PREFIX, timer, windowCoder))\n                 .iterator();\n+\n+        cachedFiredUserTimers.forEachRemaining(toBeFiredTimersOrdered::add);\n+      }\n+\n+      Instant currentInputWatermark = userTimerInternals.currentInputWatermarkTime();\n+      if (userTimerInternals.hasTimerBefore(currentInputWatermark)) {\n+        while (!toBeFiredTimersOrdered.isEmpty()) {\n+          userTimerInternals.setTimer(toBeFiredTimersOrdered.poll());\n+        }\n       }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NzI2NQ=="}, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNjk2OQ==", "bodyText": "@reuvenlax  done", "url": "https://github.com/apache/beam/pull/11924#discussion_r438306969", "createdAt": "2020-06-10T17:53:14Z", "author": {"login": "rehmanmuradali"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -577,12 +583,21 @@ public void flushState() {\n                         WindmillTimerInternals.windmillTimerToTimerData(\n                             WindmillNamespacePrefix.USER_NAMESPACE_PREFIX, timer, windowCoder))\n                 .iterator();\n+\n+        cachedFiredUserTimers.forEachRemaining(toBeFiredTimersOrdered::add);\n+      }\n+\n+      Instant currentInputWatermark = userTimerInternals.currentInputWatermarkTime();\n+      if (userTimerInternals.hasTimerBefore(currentInputWatermark)) {\n+        while (!toBeFiredTimersOrdered.isEmpty()) {\n+          userTimerInternals.setTimer(toBeFiredTimersOrdered.poll());\n+        }\n       }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NzI2NQ=="}, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg4NjEyOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToyNzoxMFrOGf90Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo1NDoxOVrOGiALJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MTc4Nw==", "bodyText": "Do we even need cachedFiredUserTimers? It seems obsolete if we populate the priority queue. The name is also wrong - even before this PR it wasn't a cache. It is a lazily initialized iterator. Instead, we should have a lazily initialized priority queue (like you do) and just a flag to say whether the incoming timers have been loaded yet.", "url": "https://github.com/apache/beam/pull/11924#discussion_r436171787", "createdAt": "2020-06-05T21:27:10Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -577,12 +583,21 @@ public void flushState() {\n                         WindmillTimerInternals.windmillTimerToTimerData(\n                             WindmillNamespacePrefix.USER_NAMESPACE_PREFIX, timer, windowCoder))\n                 .iterator();\n+\n+        cachedFiredUserTimers.forEachRemaining(toBeFiredTimersOrdered::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNzYyMQ==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/11924#discussion_r438307621", "createdAt": "2020-06-10T17:54:19Z", "author": {"login": "rehmanmuradali"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -577,12 +583,21 @@ public void flushState() {\n                         WindmillTimerInternals.windmillTimerToTimerData(\n                             WindmillNamespacePrefix.USER_NAMESPACE_PREFIX, timer, windowCoder))\n                 .iterator();\n+\n+        cachedFiredUserTimers.forEachRemaining(toBeFiredTimersOrdered::add);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MTc4Nw=="}, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg5ODA2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTozMzowM1rOGf970w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo1Mzo0NlrOGiAJ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Mzc3OQ==", "bodyText": "Why shrink it? Does the test get really slow? Is this going to be a perf problem overall?", "url": "https://github.com/apache/beam/pull/11924#discussion_r436173779", "createdAt": "2020-06-05T21:33:03Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -3938,10 +3939,11 @@ public void testEventTimeTimerOrdering() throws Exception {\n       ValidatesRunner.class,\n       UsesTimersInParDo.class,\n       UsesStatefulParDo.class,\n+      UsesUnboundedPCollections.class,\n       UsesStrictTimerOrdering.class\n     })\n     public void testEventTimeTimerOrderingWithCreate() throws Exception {\n-      final int numTestElements = 100;\n+      final int numTestElements = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNzI4MQ==", "bodyText": "reverted.", "url": "https://github.com/apache/beam/pull/11924#discussion_r438307281", "createdAt": "2020-06-10T17:53:46Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -3938,10 +3939,11 @@ public void testEventTimeTimerOrdering() throws Exception {\n       ValidatesRunner.class,\n       UsesTimersInParDo.class,\n       UsesStatefulParDo.class,\n+      UsesUnboundedPCollections.class,\n       UsesStrictTimerOrdering.class\n     })\n     public void testEventTimeTimerOrderingWithCreate() throws Exception {\n-      final int numTestElements = 100;\n+      final int numTestElements = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Mzc3OQ=="}, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjkwMTI3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTozNDo0MFrOGf991w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo1Mzo1N1rOGiAKbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDI5NQ==", "bodyText": "Should not be calling setIsBoundedInternal here. Is this just to force streaming mode? We need to just create a separate run of ValidatesRunner that forces streaming mode.", "url": "https://github.com/apache/beam/pull/11924#discussion_r436174295", "createdAt": "2020-06-05T21:34:40Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4040,7 +4043,8 @@ public void onTimer(\n             }\n           };\n \n-      PCollection<String> output = pipeline.apply(transform).apply(ParDo.of(fn));\n+      PCollection<String> output =\n+          pipeline.apply(transform).setIsBoundedInternal(IsBounded.UNBOUNDED).apply(ParDo.of(fn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNzQzNw==", "bodyText": "Added a new test case", "url": "https://github.com/apache/beam/pull/11924#discussion_r438307437", "createdAt": "2020-06-10T17:53:57Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4040,7 +4043,8 @@ public void onTimer(\n             }\n           };\n \n-      PCollection<String> output = pipeline.apply(transform).apply(ParDo.of(fn));\n+      PCollection<String> output =\n+          pipeline.apply(transform).setIsBoundedInternal(IsBounded.UNBOUNDED).apply(ParDo.of(fn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDI5NQ=="}, "originalCommit": {"oid": "b73c77003945073d69485692dc6df05ac570b063"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA4MTgwOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOTo1MFrOG2brZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowOTo1MFrOG2brZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyOTc2Nw==", "bodyText": "Please keep the imports all explicit.", "url": "https://github.com/apache/beam/pull/11924#discussion_r459729767", "createdAt": "2020-07-23T21:09:50Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -24,18 +24,11 @@\n import com.google.api.services.dataflow.model.SideInputInfo;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA4NTM2OnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxMTowNlrOG2btrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDowODo0OVrOG46N7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMDM0OQ==", "bodyText": "Can you add a comment about what are the keys and values of this map?", "url": "https://github.com/apache/beam/pull/11924#discussion_r459730349", "createdAt": "2020-07-23T21:11:06Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -561,28 +554,64 @@ public void flushState() {\n       return nextTimer;\n     }\n \n-    // Lazily initialized\n-    private Iterator<TimerData> cachedFiredUserTimers = null;\n+    private PriorityQueue<TimerData> toBeFiredTimersOrdered = null;\n+\n+    // to track if timer is reset earlier mid-bundle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzI3Ng==", "bodyText": "Added", "url": "https://github.com/apache/beam/pull/11924#discussion_r462327276", "createdAt": "2020-07-29T14:08:49Z", "author": {"login": "rehmanmuradali"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -561,28 +554,64 @@ public void flushState() {\n       return nextTimer;\n     }\n \n-    // Lazily initialized\n-    private Iterator<TimerData> cachedFiredUserTimers = null;\n+    private PriorityQueue<TimerData> toBeFiredTimersOrdered = null;\n+\n+    // to track if timer is reset earlier mid-bundle.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMDM0OQ=="}, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEwMzQyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxNzozM1rOG2b5Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDowOTowNFrOG46OtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzI1NQ==", "bodyText": "This doesn't depend on streaming or not, but just controls whether the pcollection should be bounded or unbounded. For clarity, you can just make this parameter IsBounded isBounded", "url": "https://github.com/apache/beam/pull/11924#discussion_r459733255", "createdAt": "2020-07-23T21:17:33Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -3950,13 +3950,39 @@ public void testEventTimeTimerOrderingWithCreate() throws Exception {\n       }\n \n       testEventTimeTimerOrderingWithInputPTransform(\n-          now, numTestElements, Create.timestamped(elements));\n+          now, numTestElements, Create.timestamped(elements), false);\n+    }\n+\n+    /**\n+     * A test makes sure that an event time timers are correctly ordered using Create transform\n+     * unbounded.\n+     */\n+    @Test\n+    @Category({\n+      ValidatesRunner.class,\n+      UsesTimersInParDo.class,\n+      UsesStatefulParDo.class,\n+      UsesUnboundedPCollections.class,\n+      UsesStrictTimerOrdering.class\n+    })\n+    public void testEventTimeTimerOrderingWithCreateUnbounded() throws Exception {\n+      final int numTestElements = 100;\n+      final Instant now = new Instant(1500000000000L);\n+\n+      List<TimestampedValue<KV<String, String>>> elements = new ArrayList<>();\n+      for (int i = 0; i < numTestElements; i++) {\n+        elements.add(TimestampedValue.of(KV.of(\"dummy\", \"\" + i), now.plus(i)));\n+      }\n+\n+      testEventTimeTimerOrderingWithInputPTransform(\n+          now, numTestElements, Create.timestamped(elements), true);\n     }\n \n     private void testEventTimeTimerOrderingWithInputPTransform(\n         Instant now,\n         int numTestElements,\n-        PTransform<PBegin, PCollection<KV<String, String>>> transform)\n+        PTransform<PBegin, PCollection<KV<String, String>>> transform,\n+        boolean isStreaming)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzQ3Ng==", "bodyText": "Changed to IsBounded", "url": "https://github.com/apache/beam/pull/11924#discussion_r462327476", "createdAt": "2020-07-29T14:09:04Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -3950,13 +3950,39 @@ public void testEventTimeTimerOrderingWithCreate() throws Exception {\n       }\n \n       testEventTimeTimerOrderingWithInputPTransform(\n-          now, numTestElements, Create.timestamped(elements));\n+          now, numTestElements, Create.timestamped(elements), false);\n+    }\n+\n+    /**\n+     * A test makes sure that an event time timers are correctly ordered using Create transform\n+     * unbounded.\n+     */\n+    @Test\n+    @Category({\n+      ValidatesRunner.class,\n+      UsesTimersInParDo.class,\n+      UsesStatefulParDo.class,\n+      UsesUnboundedPCollections.class,\n+      UsesStrictTimerOrdering.class\n+    })\n+    public void testEventTimeTimerOrderingWithCreateUnbounded() throws Exception {\n+      final int numTestElements = 100;\n+      final Instant now = new Instant(1500000000000L);\n+\n+      List<TimestampedValue<KV<String, String>>> elements = new ArrayList<>();\n+      for (int i = 0; i < numTestElements; i++) {\n+        elements.add(TimestampedValue.of(KV.of(\"dummy\", \"\" + i), now.plus(i)));\n+      }\n+\n+      testEventTimeTimerOrderingWithInputPTransform(\n+          now, numTestElements, Create.timestamped(elements), true);\n     }\n \n     private void testEventTimeTimerOrderingWithInputPTransform(\n         Instant now,\n         int numTestElements,\n-        PTransform<PBegin, PCollection<KV<String, String>>> transform)\n+        PTransform<PBegin, PCollection<KV<String, String>>> transform,\n+        boolean isStreaming)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzI1NQ=="}, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEwNDE5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxNzo0OVrOG2b5hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxNzo0OVrOG2b5hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzM4MA==", "bodyText": "same here", "url": "https://github.com/apache/beam/pull/11924#discussion_r459733380", "createdAt": "2020-07-23T21:17:49Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4307,18 +4346,26 @@ public void onTimer(\n     private static class TwoTimerTest extends PTransform<PBegin, PDone> {\n \n       private static PTransform<PBegin, PDone> of(\n-          Instant start, Instant end, PTransform<PBegin, PCollection<KV<Void, Void>>> input) {\n-        return new TwoTimerTest(start, end, input);\n+          Instant start,\n+          Instant end,\n+          PTransform<PBegin, PCollection<KV<Void, Void>>> input,\n+          boolean isStreaming) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEwNTAzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxODowNFrOG2b6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDowOToyN1rOG46P7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzUwOA==", "bodyText": "same here", "url": "https://github.com/apache/beam/pull/11924#discussion_r459733508", "createdAt": "2020-07-23T21:18:04Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4307,18 +4346,26 @@ public void onTimer(\n     private static class TwoTimerTest extends PTransform<PBegin, PDone> {\n \n       private static PTransform<PBegin, PDone> of(\n-          Instant start, Instant end, PTransform<PBegin, PCollection<KV<Void, Void>>> input) {\n-        return new TwoTimerTest(start, end, input);\n+          Instant start,\n+          Instant end,\n+          PTransform<PBegin, PCollection<KV<Void, Void>>> input,\n+          boolean isStreaming) {\n+        return new TwoTimerTest(start, end, input, isStreaming);\n       }\n \n       private final Instant start;\n       private final Instant end;\n+      private final boolean isStreaming;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzc4OQ==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/11924#discussion_r462327789", "createdAt": "2020-07-29T14:09:27Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4307,18 +4346,26 @@ public void onTimer(\n     private static class TwoTimerTest extends PTransform<PBegin, PDone> {\n \n       private static PTransform<PBegin, PDone> of(\n-          Instant start, Instant end, PTransform<PBegin, PCollection<KV<Void, Void>>> input) {\n-        return new TwoTimerTest(start, end, input);\n+          Instant start,\n+          Instant end,\n+          PTransform<PBegin, PCollection<KV<Void, Void>>> input,\n+          boolean isStreaming) {\n+        return new TwoTimerTest(start, end, input, isStreaming);\n       }\n \n       private final Instant start;\n       private final Instant end;\n+      private final boolean isStreaming;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzUwOA=="}, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEwNTM0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxODoxMVrOG2b6NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDowOToyMVrOG46Png==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzU1Ng==", "bodyText": "same here", "url": "https://github.com/apache/beam/pull/11924#discussion_r459733556", "createdAt": "2020-07-23T21:18:11Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4307,18 +4346,26 @@ public void onTimer(\n     private static class TwoTimerTest extends PTransform<PBegin, PDone> {\n \n       private static PTransform<PBegin, PDone> of(\n-          Instant start, Instant end, PTransform<PBegin, PCollection<KV<Void, Void>>> input) {\n-        return new TwoTimerTest(start, end, input);\n+          Instant start,\n+          Instant end,\n+          PTransform<PBegin, PCollection<KV<Void, Void>>> input,\n+          boolean isStreaming) {\n+        return new TwoTimerTest(start, end, input, isStreaming);\n       }\n \n       private final Instant start;\n       private final Instant end;\n+      private final boolean isStreaming;\n       private final transient PTransform<PBegin, PCollection<KV<Void, Void>>> inputPTransform;\n \n       public TwoTimerTest(\n-          Instant start, Instant end, PTransform<PBegin, PCollection<KV<Void, Void>>> input) {\n+          Instant start,\n+          Instant end,\n+          PTransform<PBegin, PCollection<KV<Void, Void>>> input,\n+          boolean isStreaming) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzcxMA==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/11924#discussion_r462327710", "createdAt": "2020-07-29T14:09:21Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4307,18 +4346,26 @@ public void onTimer(\n     private static class TwoTimerTest extends PTransform<PBegin, PDone> {\n \n       private static PTransform<PBegin, PDone> of(\n-          Instant start, Instant end, PTransform<PBegin, PCollection<KV<Void, Void>>> input) {\n-        return new TwoTimerTest(start, end, input);\n+          Instant start,\n+          Instant end,\n+          PTransform<PBegin, PCollection<KV<Void, Void>>> input,\n+          boolean isStreaming) {\n+        return new TwoTimerTest(start, end, input, isStreaming);\n       }\n \n       private final Instant start;\n       private final Instant end;\n+      private final boolean isStreaming;\n       private final transient PTransform<PBegin, PCollection<KV<Void, Void>>> inputPTransform;\n \n       public TwoTimerTest(\n-          Instant start, Instant end, PTransform<PBegin, PCollection<KV<Void, Void>>> input) {\n+          Instant start,\n+          Instant end,\n+          PTransform<PBegin, PCollection<KV<Void, Void>>> input,\n+          boolean isStreaming) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzU1Ng=="}, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEwOTQxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxOTozN1rOG2b8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxOTozN1rOG2b8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNDE5Ng==", "bodyText": "Another way to do this that might be better is to use TestStream in the unbounded case. This will probably give best coverage. Even for an unbounded PCollection the watermark might instantly move to infinity.", "url": "https://github.com/apache/beam/pull/11924#discussion_r459734196", "createdAt": "2020-07-23T21:19:37Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -4331,6 +4378,7 @@ public PDone expand(PBegin input) {\n         PCollection<String> result =\n             input\n                 .apply(inputPTransform)\n+                .setIsBoundedInternal(isStreaming ? IsBounded.UNBOUNDED : IsBounded.BOUNDED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd93ecde23701e0d0c63bfaaf10785ca0be332a"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3613, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}