{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTc3MDUx", "number": 12054, "title": "[BEAM-10219] Support ZetaSQL TIME functions in BeamSQL", "bodyText": "This PR adds support of all ZetaSQL TIME functions to BeamSQL:\n\nCURRENT_TIME\nEXTRACT\nTIME\nTIME_ADD\nTIME_SUB\nTIME_DIFF\nTIME_TRUNC\nFORMAT_TIME\nPARSE_TIME\n\nr: @apilloud @robinyqiu\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\n\n\n\n\nGo\n\n---\n\n---\n\n\n\nJava\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-22T21:05:30Z", "url": "https://github.com/apache/beam/pull/12054", "merged": true, "mergeCommit": {"oid": "203ea73a68089087f3adaba5034f77a46fa2cb4f"}, "closed": true, "closedAt": "2020-06-26T23:24:10Z", "author": {"login": "ZijieSong946"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct3X_-AH2gAyNDM4MTc3MDUxOmZmODljY2U1N2RkYzUxZmM0NjE4YTc1ZDAxZGYwNTgwZTllMjU4NmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvKiNEAFqTQzODYxNzcyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ff89cce57ddc51fc4618a75d01df0580e9e2586a", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/ff89cce57ddc51fc4618a75d01df0580e9e2586a", "committedDate": "2020-06-22T21:03:40Z", "message": "[Work in progress] TIME type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzcxNDY2", "url": "https://github.com/apache/beam/pull/12054#pullrequestreview-435371466", "createdAt": "2020-06-23T01:05:35Z", "commit": {"oid": "ff89cce57ddc51fc4618a75d01df0580e9e2586a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMTowNTozNVrOGnVz4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMTowNTozNVrOGnVz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNDk5NA==", "bodyText": "All the current failing tests are due to the code below (TIME case). Note the comment says \"convert to millis\", which indicates the values are in milliseconds. Previously it will hit this code path: Expressions.new_(Instant.class, valueDateTime);, which corresponds to calling new Instant(long), which takes milliseconds as a long as the input parameter. Now you have updated the code so it will hit calling LocalTime.ofNanoOfDay() which takes nanosecond. The fix will be adding 1 LOC: valueDateTime = Expressions.multiply(valueDateTime, Expressions.constant(1000000L)).", "url": "https://github.com/apache/beam/pull/12054#discussion_r443904994", "createdAt": "2020-06-23T01:05:35Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCalcRel.java", "diffHunk": "@@ -315,7 +315,7 @@ private static Expression castOutput(Expression value, FieldType toType) {\n   private static Expression castOutputTime(Expression value, FieldType toType) {\n     Expression valueDateTime = value;\n \n-    // First, convert to millis (except for DATE type)\n+    // First, convert to millis (except for DATE/TIME type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff89cce57ddc51fc4618a75d01df0580e9e2586a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf", "committedDate": "2020-06-23T21:57:32Z", "message": "Still one test case failed. CheckStyle and SpotlessCheck done."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/0ea3e53ea452178398c5b62b497f1d73df7b4809", "committedDate": "2020-06-24T21:51:15Z", "message": "Bug related to Beam/Calcite time value translation fixed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjA5OTkx", "url": "https://github.com/apache/beam/pull/12054#pullrequestreview-436209991", "createdAt": "2020-06-23T22:44:07Z", "commit": {"oid": "e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjo0NDowN1rOGn9FbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoxNzo1OFrOGolA1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0ODQ2MA==", "bodyText": "Please add class-level javadoc for this (see DATE for example.)", "url": "https://github.com/apache/beam/pull/12054#discussion_r444548460", "createdAt": "2020-06-23T22:44:07Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/logicaltypes/Time.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.schemas.logicaltypes;\n+\n+import java.time.LocalTime;\n+import org.apache.beam.sdk.schemas.Schema;\n+\n+public class Time implements Schema.LogicalType<LocalTime, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4MTMwNw==", "bodyText": "Please update ZetaSqlUtilsTest.java for the new TIME type. Also we should rename that file as well. We forgot to do that in the last PR.", "url": "https://github.com/apache/beam/pull/12054#discussion_r444581307", "createdAt": "2020-06-24T00:37:22Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlBeamTranslationUtils.java", "diffHunk": "@@ -19,18 +19,19 @@\n \n import com.google.protobuf.ByteString;\n import com.google.zetasql.ArrayType;\n+import com.google.zetasql.CivilTimeEncoder;\n import com.google.zetasql.StructType;\n import com.google.zetasql.StructType.StructField;\n import com.google.zetasql.Type;\n import com.google.zetasql.TypeFactory;\n import com.google.zetasql.Value;\n import com.google.zetasql.ZetaSQLType.TypeKind;\n import java.time.LocalDate;\n+import java.time.LocalTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MTEyNw==", "bodyText": "Please clean up the test a bit more. Unused local variables can be removed. I would also like to add an additional field for like, dateTypeFileld + INTERVAL 1 day.", "url": "https://github.com/apache/beam/pull/12054#discussion_r445161127", "createdAt": "2020-06-24T20:45:04Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamComplexTypeTest.java", "diffHunk": "@@ -375,38 +376,6 @@ public void testNullInnerRow() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(2));\n   }\n \n-  private static class DummySqlTimeType implements Schema.LogicalType<Long, Instant> {\n-    @Override\n-    public String getIdentifier() {\n-      return \"SqlTimeType\";\n-    }\n-\n-    @Override\n-    public FieldType getArgumentType() {\n-      return FieldType.STRING;\n-    }\n-\n-    @Override\n-    public String getArgument() {\n-      return \"\";\n-    }\n-\n-    @Override\n-    public Schema.FieldType getBaseType() {\n-      return Schema.FieldType.DATETIME;\n-    }\n-\n-    @Override\n-    public Instant toBaseType(Long input) {\n-      return (input == null ? null : new Instant((long) input));\n-    }\n-\n-    @Override\n-    public Long toInputType(Instant base) {\n-      return (base == null ? null : base.getMillis());\n-    }\n-  }\n-\n   @Test\n   public void testNullDatetimeFields() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2Mzk3Nw==", "bodyText": "Could you add a field for DATE as well? Thanks.", "url": "https://github.com/apache/beam/pull/12054#discussion_r445163977", "createdAt": "2020-06-24T20:50:39Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/impl/schema/BeamSqlRowCoderTest.java", "diffHunk": "@@ -65,7 +66,7 @@ public void encodeAndDecode() throws Exception {\n                 1.1,\n                 BigDecimal.ZERO,\n                 \"hello\",\n-                DateTime.now().toInstant(),\n+                LocalTime.now(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE4MjEzMw==", "bodyText": "For TIME it should be nullOr(value, Expressions.divide(value, 1000000L));", "url": "https://github.com/apache/beam/pull/12054#discussion_r445182133", "createdAt": "2020-06-24T21:28:40Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCalcRel.java", "diffHunk": "@@ -431,11 +443,9 @@ private static Expression value(\n     private static Expression value(Expression value, Schema.FieldType type) {\n       if (type.getTypeName().isLogicalType()) {\n         String logicalId = type.getLogicalType().getIdentifier();\n-        if (TimeType.IDENTIFIER.equals(logicalId)) {\n-          return nullOr(\n-              value, Expressions.convert_(Expressions.call(value, \"getMillis\"), int.class));\n-        } else if (SqlTypes.DATE.getIdentifier().equals(logicalId)) {\n-          value = nullOr(value, value);\n+        if (SqlTypes.TIME.getIdentifier().equals(logicalId)\n+            || SqlTypes.DATE.getIdentifier().equals(logicalId)) {\n+          return value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad9d95c2775df8ffcc6ccfff7ffb1f93506fbf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5ODQzOQ==", "bodyText": "Seems we can combine the first and second step now (and update the comments). The code will look much simpler that way.", "url": "https://github.com/apache/beam/pull/12054#discussion_r445198439", "createdAt": "2020-06-24T22:06:18Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCalcRel.java", "diffHunk": "@@ -315,7 +317,7 @@ private static Expression castOutput(Expression value, FieldType toType) {\n   private static Expression castOutputTime(Expression value, FieldType toType) {\n     Expression valueDateTime = value;\n \n-    // First, convert to millis (except for DATE type)\n+    // First, convert to millis (except for DATE/TIME type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMTQ3Ng==", "bodyText": "Could we test extracting from a time that actually have a microsecond sub component, like '15;30:35.123456789'?", "url": "https://github.com/apache/beam/pull/12054#discussion_r445201476", "createdAt": "2020-06-24T22:14:49Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2457,6 +2458,256 @@ public void testDateFromUnixInt64() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  /////////////////////////////////////////////////////////////////////////////\n+  // TIME type tests\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  @Test\n+  public void testTimeLiteral() {\n+    String sql = \"SELECT TIME '15:30:00'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addLogicalTypeField(\"f_time\", SqlTypes.TIME).build())\n+                .addValues(LocalTime.of(15, 30, 0, 0))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testTimeColumn() {\n+    String sql = \"SELECT FORMAT_TIME('%T', time_field) FROM table_with_time\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addStringField(\"f_time_str\").build())\n+                .addValues(\"15:30:00\")\n+                .build(),\n+            Row.withSchema(Schema.builder().addStringField(\"f_time_str\").build())\n+                .addValues(\"23:35:59\")\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  // TODO[BEAM-9166]: Add a test for CURRENT_TIME function (\"SELECT CURRENT_TIME()\")\n+\n+  @Test\n+  public void testExtractTime() {\n+    String sql =\n+        \"SELECT \"\n+            + \"EXTRACT(HOUR FROM TIME '15:30:35') as hour, \"\n+            + \"EXTRACT(MINUTE FROM TIME '15:30:35') as minute, \"\n+            + \"EXTRACT(SECOND FROM TIME '15:30:35') as second, \"\n+            + \"EXTRACT(MILLISECOND FROM TIME '15:30:35') as millisecond, \"\n+            + \"EXTRACT(MICROSECOND FROM TIME '15:30:35') as microsecond \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMjAzMA==", "bodyText": "Also, does EXTRACT(NANOSECOND ...) work?", "url": "https://github.com/apache/beam/pull/12054#discussion_r445202030", "createdAt": "2020-06-24T22:16:17Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2457,6 +2458,256 @@ public void testDateFromUnixInt64() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  /////////////////////////////////////////////////////////////////////////////\n+  // TIME type tests\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  @Test\n+  public void testTimeLiteral() {\n+    String sql = \"SELECT TIME '15:30:00'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addLogicalTypeField(\"f_time\", SqlTypes.TIME).build())\n+                .addValues(LocalTime.of(15, 30, 0, 0))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testTimeColumn() {\n+    String sql = \"SELECT FORMAT_TIME('%T', time_field) FROM table_with_time\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addStringField(\"f_time_str\").build())\n+                .addValues(\"15:30:00\")\n+                .build(),\n+            Row.withSchema(Schema.builder().addStringField(\"f_time_str\").build())\n+                .addValues(\"23:35:59\")\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  // TODO[BEAM-9166]: Add a test for CURRENT_TIME function (\"SELECT CURRENT_TIME()\")\n+\n+  @Test\n+  public void testExtractTime() {\n+    String sql =\n+        \"SELECT \"\n+            + \"EXTRACT(HOUR FROM TIME '15:30:35') as hour, \"\n+            + \"EXTRACT(MINUTE FROM TIME '15:30:35') as minute, \"\n+            + \"EXTRACT(SECOND FROM TIME '15:30:35') as second, \"\n+            + \"EXTRACT(MILLISECOND FROM TIME '15:30:35') as millisecond, \"\n+            + \"EXTRACT(MICROSECOND FROM TIME '15:30:35') as microsecond \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMTQ3Ng=="}, "originalCommit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMjQyMw==", "bodyText": "Can we test on a time having sub-second components? I wonder if TIME literal with microsecond precision works, because it needs to go through the \"ZetaSQL -> Calcite -> Beam\" code path.", "url": "https://github.com/apache/beam/pull/12054#discussion_r445202423", "createdAt": "2020-06-24T22:17:24Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2457,6 +2458,256 @@ public void testDateFromUnixInt64() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  /////////////////////////////////////////////////////////////////////////////\n+  // TIME type tests\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  @Test\n+  public void testTimeLiteral() {\n+    String sql = \"SELECT TIME '15:30:00'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMjY0NA==", "bodyText": "Nit: you can omit the last 0 parameter (same below)", "url": "https://github.com/apache/beam/pull/12054#discussion_r445202644", "createdAt": "2020-06-24T22:17:58Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2457,6 +2458,256 @@ public void testDateFromUnixInt64() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  /////////////////////////////////////////////////////////////////////////////\n+  // TIME type tests\n+  /////////////////////////////////////////////////////////////////////////////\n+\n+  @Test\n+  public void testTimeLiteral() {\n+    String sql = \"SELECT TIME '15:30:00'\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addLogicalTypeField(\"f_time\", SqlTypes.TIME).build())\n+                .addValues(LocalTime.of(15, 30, 0, 0))\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testTimeColumn() {\n+    String sql = \"SELECT FORMAT_TIME('%T', time_field) FROM table_with_time\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addStringField(\"f_time_str\").build())\n+                .addValues(\"15:30:00\")\n+                .build(),\n+            Row.withSchema(Schema.builder().addStringField(\"f_time_str\").build())\n+                .addValues(\"23:35:59\")\n+                .build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  // TODO[BEAM-9166]: Add a test for CURRENT_TIME function (\"SELECT CURRENT_TIME()\")\n+\n+  @Test\n+  public void testExtractTime() {\n+    String sql =\n+        \"SELECT \"\n+            + \"EXTRACT(HOUR FROM TIME '15:30:35') as hour, \"\n+            + \"EXTRACT(MINUTE FROM TIME '15:30:35') as minute, \"\n+            + \"EXTRACT(SECOND FROM TIME '15:30:35') as second, \"\n+            + \"EXTRACT(MILLISECOND FROM TIME '15:30:35') as millisecond, \"\n+            + \"EXTRACT(MICROSECOND FROM TIME '15:30:35') as microsecond \";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    final Schema schema =\n+        Schema.builder()\n+            .addField(\"hour\", FieldType.INT64)\n+            .addField(\"minute\", FieldType.INT64)\n+            .addField(\"second\", FieldType.INT64)\n+            .addField(\"millisecond\", FieldType.INT64)\n+            .addField(\"microsecond\", FieldType.INT64)\n+            .build();\n+    PAssert.that(stream)\n+        .containsInAnyOrder(Row.withSchema(schema).addValues(15L, 30L, 35L, 0L, 0L).build());\n+\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testTimeFromHourMinuteSecond() {\n+    String sql = \"SELECT TIME(15, 30, 0)\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addLogicalTypeField(\"f_time\", SqlTypes.TIME).build())\n+                .addValues(LocalTime.of(15, 30, 0, 0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDk0NTIx", "url": "https://github.com/apache/beam/pull/12054#pullrequestreview-437094521", "createdAt": "2020-06-25T00:34:01Z", "commit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDozNDowMVrOGonkug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDozNDowMVrOGonkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NDYwMg==", "bodyText": "This is the most important line of this CL for correctness, wanted to get attention on it early.\nZetaSQL uses a very specific format for this, which roughly matches the struct in LocalTime: https://github.com/google/zetasql/blob/79adcd0fe227173e68ed7aa88f580a691ebe82c2/zetasql/public/civil_time.h#L85\nIt appears the Long base type is an offset in Nanoseconds. Is that conversion lossless? Is it expensive?", "url": "https://github.com/apache/beam/pull/12054#discussion_r445244602", "createdAt": "2020-06-25T00:34:01Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/logicaltypes/SqlTypes.java", "diffHunk": "@@ -27,4 +28,7 @@ private SqlTypes() {}\n \n   /** Beam LogicalType corresponding to ZetaSQL/CalciteSQL DATE type. */\n   public static final LogicalType<LocalDate, Long> DATE = new Date();\n+\n+  /** Beam LogicalType corresponding to ZetaSQL/CalciteSQL TIME type. */\n+  public static final LogicalType<LocalTime, Long> TIME = new Time();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea3e53ea452178398c5b62b497f1d73df7b4809"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47caac91fd2e1041815487e5c5d40f503260188a", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/47caac91fd2e1041815487e5c5d40f503260188a", "committedDate": "2020-06-25T15:56:52Z", "message": "All improvements done. Two testcases fail because of TIME literal precision."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b53eaa3d359ebb59a2a775008e0d7db13a6a036", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/1b53eaa3d359ebb59a2a775008e0d7db13a6a036", "committedDate": "2020-06-25T16:02:28Z", "message": "checkstyle fixed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c998549fe901ce40e55059df519a4160198680ed", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/c998549fe901ce40e55059df519a4160198680ed", "committedDate": "2020-06-25T16:06:13Z", "message": "spotlessCheck fixed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f4a2565e5c9fb7443376bd710cea5b949c5592", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/e8f4a2565e5c9fb7443376bd710cea5b949c5592", "committedDate": "2020-06-25T16:26:18Z", "message": "checkstyle fixed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Nzg2NTgz", "url": "https://github.com/apache/beam/pull/12054#pullrequestreview-437786583", "createdAt": "2020-06-25T19:15:30Z", "commit": {"oid": "e8f4a2565e5c9fb7443376bd710cea5b949c5592"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToxNTozMFrOGpIbYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTowODozOFrOGpL3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4Mjg4Mg==", "bodyText": "nit: Can you move each of these comments into the appropriate if block?", "url": "https://github.com/apache/beam/pull/12054#discussion_r445782882", "createdAt": "2020-06-25T19:15:30Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCalcRel.java", "diffHunk": "@@ -315,34 +317,38 @@ private static Expression castOutput(Expression value, FieldType toType) {\n   private static Expression castOutputTime(Expression value, FieldType toType) {\n     Expression valueDateTime = value;\n \n-    // First, convert to millis (except for DATE type)\n+    // Convert TIMESTAMP to joda Instant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f4a2565e5c9fb7443376bd710cea5b949c5592"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMjg1Ng==", "bodyText": "If I remember right, FieldType.DATETIME is the SQL type of TIMESTAMP. Looks like all the test cases for TIMESTAMP have been dropped?", "url": "https://github.com/apache/beam/pull/12054#discussion_r445832856", "createdAt": "2020-06-25T20:55:27Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamComplexTypeTest.java", "diffHunk": "@@ -452,21 +412,32 @@ public void testNullDatetimeFields() {\n             .addNullableField(\"year_with_null\", FieldType.INT64)\n             .addField(\"mm\", FieldType.INT64)\n             .addNullableField(\"month_with_null\", FieldType.INT64)\n-            .addField(\"time_with_hour_added\", FieldType.DATETIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f4a2565e5c9fb7443376bd710cea5b949c5592"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzNTY3Mg==", "bodyText": "nit: There is no test case for this.", "url": "https://github.com/apache/beam/pull/12054#discussion_r445835672", "createdAt": "2020-06-25T21:01:09Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCalcRel.java", "diffHunk": "@@ -315,34 +317,38 @@ private static Expression castOutput(Expression value, FieldType toType) {\n   private static Expression castOutputTime(Expression value, FieldType toType) {\n     Expression valueDateTime = value;\n \n-    // First, convert to millis (except for DATE type)\n+    // Convert TIMESTAMP to joda Instant\n+    // Convert DATE to LocalDate\n+    // Convert TIME to LocalTime\n     if (CalciteUtils.TIMESTAMP.typesEqual(toType)\n         || CalciteUtils.NULLABLE_TIMESTAMP.typesEqual(toType)) {\n       if (value.getType() == java.sql.Timestamp.class) {\n         valueDateTime = Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG.method, valueDateTime);\n       }\n+      valueDateTime = Expressions.new_(Instant.class, valueDateTime);\n     } else if (CalciteUtils.TIME.typesEqual(toType)\n         || CalciteUtils.NULLABLE_TIME.typesEqual(toType)) {\n       if (value.getType() == java.sql.Time.class) {\n         valueDateTime = Expressions.call(BuiltInMethod.TIME_TO_INT.method, valueDateTime);\n+      } else if (value.getType() == Long.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f4a2565e5c9fb7443376bd710cea5b949c5592"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzOTI1Ng==", "bodyText": "This is going to generate the code value == null ? null : value, which does nothing. drop it all together?", "url": "https://github.com/apache/beam/pull/12054#discussion_r445839256", "createdAt": "2020-06-25T21:08:38Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCalcRel.java", "diffHunk": "@@ -431,11 +437,11 @@ private static Expression value(\n     private static Expression value(Expression value, Schema.FieldType type) {\n       if (type.getTypeName().isLogicalType()) {\n         String logicalId = type.getLogicalType().getIdentifier();\n-        if (TimeType.IDENTIFIER.equals(logicalId)) {\n+        if (SqlTypes.TIME.getIdentifier().equals(logicalId)) {\n           return nullOr(\n-              value, Expressions.convert_(Expressions.call(value, \"getMillis\"), int.class));\n+              value, Expressions.divide(value, Expressions.constant(NANOS_PER_MILLISECOND)));\n         } else if (SqlTypes.DATE.getIdentifier().equals(logicalId)) {\n-          value = nullOr(value, value);\n+          return nullOr(value, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f4a2565e5c9fb7443376bd710cea5b949c5592"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c7a304538e545606c67eec8a8f230f09c603a4", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/c6c7a304538e545606c67eec8a8f230f09c603a4", "committedDate": "2020-06-26T06:12:45Z", "message": "Failed test cases fixed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e182e7c6ba5c13f2279ea8ee377899fb21fd1813", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/e182e7c6ba5c13f2279ea8ee377899fb21fd1813", "committedDate": "2020-06-26T21:50:15Z", "message": "new test added for time casting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjE3NzI3", "url": "https://github.com/apache/beam/pull/12054#pullrequestreview-438617727", "createdAt": "2020-06-26T21:56:56Z", "commit": {"oid": "e182e7c6ba5c13f2279ea8ee377899fb21fd1813"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3676, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}