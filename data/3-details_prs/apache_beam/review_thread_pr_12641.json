{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTEzMDQ5", "number": 12641, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0ODoyM1rOEat8qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0ODoyM1rOEat8qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDUxMjQyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/interactive_utils.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0ODoyM1rOHEUdQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzo0Mzo0MlrOHEW0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTUyMQ==", "bodyText": "Optional: This is a case where an explicit return False (here and for the ImportError) might make things more clear.", "url": "https://github.com/apache/beam/pull/12641#discussion_r474291521", "createdAt": "2020-08-20T21:48:23Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/utils/interactive_utils.py", "diffHunk": "@@ -34,6 +38,11 @@ def is_in_ipython():\n       is_in_ipython = True\n   except ImportError:\n     pass  # If dependencies are not available, then not interactive for sure.\n+  except (KeyboardInterrupt, SystemExit):\n+    raise\n+  except:  # pylint: disable=bare-except\n+    _LOGGER.info(\n+        'Unexpected error occurred, treated as not in IPython.', exc_info=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add5e1b1afc5743d1a97e81489b6ebac2cda560e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMDExNw==", "bodyText": "Added explicit return statement at each return point.", "url": "https://github.com/apache/beam/pull/12641#discussion_r474330117", "createdAt": "2020-08-20T23:43:42Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/utils/interactive_utils.py", "diffHunk": "@@ -34,6 +38,11 @@ def is_in_ipython():\n       is_in_ipython = True\n   except ImportError:\n     pass  # If dependencies are not available, then not interactive for sure.\n+  except (KeyboardInterrupt, SystemExit):\n+    raise\n+  except:  # pylint: disable=bare-except\n+    _LOGGER.info(\n+        'Unexpected error occurred, treated as not in IPython.', exc_info=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MTUyMQ=="}, "originalCommit": {"oid": "add5e1b1afc5743d1a97e81489b6ebac2cda560e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 551, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}