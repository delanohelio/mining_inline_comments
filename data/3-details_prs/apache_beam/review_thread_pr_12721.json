{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjEyNTg5", "number": 12721, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNzo0MVrOEfFWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1MDo0MVrOEfoR1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI4OTE1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNzo0MVrOHLIlqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToyMzoxOFrOHLIwRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNzA5Nw==", "bodyText": "IIUC, the data is being sent from Source FhirStore to Destination FhirStore by the Fhir service itself, right? And we're just managing the Operation on the Dataflow side. Is that correct?", "url": "https://github.com/apache/beam/pull/12721#discussion_r481437097", "createdAt": "2020-09-01T21:17:41Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());\n+      }\n+\n+      @Setup\n+      public void initClient() throws IOException {\n+        this.client = new HttpHealthcareApiClient();\n+      }\n+\n+      @ProcessElement\n+      public void deidentify(ProcessContext context)\n+          throws IOException, InterruptedException, HealthcareHttpException {\n+        String sourceFhirStore = context.element();\n+        String destinationFhirStore = this.destinationFhirStore.get();\n+        Gson g = new Gson();\n+        DeidentifyConfig deidConfig = g.fromJson(this.deidConfigJson, DeidentifyConfig.class);\n+        Operation operation =\n+            client.deidentifyFhirStore(sourceFhirStore, destinationFhirStore, deidConfig);\n+        operation = client.pollOperation(operation, 1000L);\n+        if (operation.getError() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzOTgxNQ==", "bodyText": "Yep, exactly \ud83d\udc4d . We're just sending operation and wait for it to complete.", "url": "https://github.com/apache/beam/pull/12721#discussion_r481439815", "createdAt": "2020-09-01T21:23:18Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());\n+      }\n+\n+      @Setup\n+      public void initClient() throws IOException {\n+        this.client = new HttpHealthcareApiClient();\n+      }\n+\n+      @ProcessElement\n+      public void deidentify(ProcessContext context)\n+          throws IOException, InterruptedException, HealthcareHttpException {\n+        String sourceFhirStore = context.element();\n+        String destinationFhirStore = this.destinationFhirStore.get();\n+        Gson g = new Gson();\n+        DeidentifyConfig deidConfig = g.fromJson(this.deidConfigJson, DeidentifyConfig.class);\n+        Operation operation =\n+            client.deidentifyFhirStore(sourceFhirStore, destinationFhirStore, deidConfig);\n+        operation = client.pollOperation(operation, 1000L);\n+        if (operation.getError() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNzA5Nw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTk1Mjk2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo0Mjo0M1rOHMAyJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNjozOFrOHPVzgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1Nzc5Nw==", "bodyText": "I think we should rename this to Export since GCS is an implementation detail here. Feel free to leave it to a follow-up PR.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482357797", "createdAt": "2020-09-02T19:42:43Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -122,12 +124,24 @@\n  * store) This requires each resource to contain a client provided ID. It is important that when\n  * using import you give the appropriate permissions to the Google Cloud Healthcare Service Agent.\n  *\n+ * <p>ExportGcs This is to export FHIR resources from a FHIR store to Google Cloud Storage. The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM4NTg1MQ==", "bodyText": "Good point. The reason I want to keep this as ExportGcs is there is also an ExportBQ. I agree that both are implementation details, but depending on usage, users may want a workflow connect to BQ. So I prefer to keep it this way for future extension.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482385851", "createdAt": "2020-09-02T20:03:28Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -122,12 +124,24 @@\n  * store) This requires each resource to contain a client provided ID. It is important that when\n  * using import you give the appropriate permissions to the Google Cloud Healthcare Service Agent.\n  *\n+ * <p>ExportGcs This is to export FHIR resources from a FHIR store to Google Cloud Storage. The", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1Nzc5Nw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3Mzg1Nw==", "bodyText": "I am a bit confused. The purpose of exporting is to load the FHIR resources into Dataflow for further processing, thus how the data is loaded (e.g. via GCS or BQ) is not important. If users would like to apply transformations before sending the data to BQ, they can still export via GCS, and then use BigQueryIO to write the data. Did I miss anything?", "url": "https://github.com/apache/beam/pull/12721#discussion_r482673857", "createdAt": "2020-09-03T02:59:42Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -122,12 +124,24 @@\n  * store) This requires each resource to contain a client provided ID. It is important that when\n  * using import you give the appropriate permissions to the Google Cloud Healthcare Service Agent.\n  *\n+ * <p>ExportGcs This is to export FHIR resources from a FHIR store to Google Cloud Storage. The", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1Nzc5Nw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2ODAzMg==", "bodyText": "I see your point. That makes sense for this implementation because we will read the resources back anyway. However, export FHIR resources to BigQuery allows users to specify different schema, which could be non-trivial for BigqueryIO to reproduce.\nI made the change anyway and if there is a need like above, we can add the ExportBQ later.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482968032", "createdAt": "2020-09-03T13:15:07Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -122,12 +124,24 @@\n  * store) This requires each resource to contain a client provided ID. It is important that when\n  * using import you give the appropriate permissions to the Google Cloud Healthcare Service Agent.\n  *\n+ * <p>ExportGcs This is to export FHIR resources from a FHIR store to Google Cloud Storage. The", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1Nzc5Nw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTE0MA==", "bodyText": "I think I am missing something :) Let's talk offline.", "url": "https://github.com/apache/beam/pull/12721#discussion_r485835140", "createdAt": "2020-09-09T18:42:22Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -122,12 +124,24 @@\n  * store) This requires each resource to contain a client provided ID. It is important that when\n  * using import you give the appropriate permissions to the Google Cloud Healthcare Service Agent.\n  *\n+ * <p>ExportGcs This is to export FHIR resources from a FHIR store to Google Cloud Storage. The", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1Nzc5Nw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NzcyNA==", "bodyText": "Talked offline, one use case Truc was thinking about is that users might want to use the ExportResources API to flatten the FHIR resources first, then load the flatten resources into the pipeline.", "url": "https://github.com/apache/beam/pull/12721#discussion_r485847724", "createdAt": "2020-09-09T19:06:13Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -122,12 +124,24 @@\n  * store) This requires each resource to contain a client provided ID. It is important that when\n  * using import you give the appropriate permissions to the Google Cloud Healthcare Service Agent.\n  *\n+ * <p>ExportGcs This is to export FHIR resources from a FHIR store to Google Cloud Storage. The", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1Nzc5Nw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NzkzNg==", "bodyText": "Resolved offline.", "url": "https://github.com/apache/beam/pull/12721#discussion_r485847936", "createdAt": "2020-09-09T19:06:38Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -122,12 +124,24 @@\n  * store) This requires each resource to contain a client provided ID. It is important that when\n  * using import you give the appropriate permissions to the Google Cloud Healthcare Service Agent.\n  *\n+ * <p>ExportGcs This is to export FHIR resources from a FHIR store to Google Cloud Storage. The", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1Nzc5Nw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTk2MTcxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo0Mzo1OVrOHMA4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzoyMTo1OVrOHMmUVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1OTQxNg==", "bodyText": "Should we return errors with exporting in the Result?", "url": "https://github.com/apache/beam/pull/12721#discussion_r482359416", "createdAt": "2020-09-02T19:43:59Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -170,6 +184,21 @@\n  * // Alternatively you could use import for high throughput to a new store.\n  * FhirIO.Write.Result writeResult =\n  *     output.apply(\"Import FHIR Resources\", FhirIO.executeBundles(options.getNewFhirStore()));\n+ *\n+ * // Export FHIR resources to Google Cloud Storage.\n+ * String fhirStoreName = ...;\n+ * String exportGcsUriPrefix = ...;\n+ * FhirIO.ExportGcs.Result exportResult =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM4ODQ5Nw==", "bodyText": "Export is extremely unlikely to have error with individual resources (and if there is it usually occurs for all resources). The error is usually at the LRO level, which the workflow will fail with IOException.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482388497", "createdAt": "2020-09-02T20:05:34Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -170,6 +184,21 @@\n  * // Alternatively you could use import for high throughput to a new store.\n  * FhirIO.Write.Result writeResult =\n  *     output.apply(\"Import FHIR Resources\", FhirIO.executeBundles(options.getNewFhirStore()));\n+ *\n+ * // Export FHIR resources to Google Cloud Storage.\n+ * String fhirStoreName = ...;\n+ * String exportGcsUriPrefix = ...;\n+ * FhirIO.ExportGcs.Result exportResult =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1OTQxNg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3MzM0OQ==", "bodyText": "In that case, you probably won't need to wrap it in a Result class, since you can return a PCollection directly.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482673349", "createdAt": "2020-09-03T02:57:40Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -170,6 +184,21 @@\n  * // Alternatively you could use import for high throughput to a new store.\n  * FhirIO.Write.Result writeResult =\n  *     output.apply(\"Import FHIR Resources\", FhirIO.executeBundles(options.getNewFhirStore()));\n+ *\n+ * // Export FHIR resources to Google Cloud Storage.\n+ * String fhirStoreName = ...;\n+ * String exportGcsUriPrefix = ...;\n+ * FhirIO.ExportGcs.Result exportResult =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1OTQxNg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3Mjc1Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482972757", "createdAt": "2020-09-03T13:21:59Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -170,6 +184,21 @@\n  * // Alternatively you could use import for high throughput to a new store.\n  * FhirIO.Write.Result writeResult =\n  *     output.apply(\"Import FHIR Resources\", FhirIO.executeBundles(options.getNewFhirStore()));\n+ *\n+ * // Export FHIR resources to Google Cloud Storage.\n+ * String fhirStoreName = ...;\n+ * String exportGcsUriPrefix = ...;\n+ * FhirIO.ExportGcs.Result exportResult =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1OTQxNg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTk3ODUxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo0NjowNlrOHMBEOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDowNjo1NVrOHMCxfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2MjQyNg==", "bodyText": "nit: ndjson -> newline delimited JSON (ndjson)", "url": "https://github.com/apache/beam/pull/12721#discussion_r482362426", "createdAt": "2020-09-02T19:46:06Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1212,10 +1280,7 @@ public void executeBundles(ProcessContext context) {\n   public static class ExportGcs extends PTransform<PBegin, ExportGcs.Result> {\n     public static final TupleTag<String> OUT = new TupleTag<String>() {};\n \n-    /**\n-     * Represents the result of an export, including both the successful parsed messages, and\n-     * invalid ones.\n-     */\n+    /** Represents the result of an export, a collection of FHIR resources in ndjson. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MDM5Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482390397", "createdAt": "2020-09-02T20:06:55Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1212,10 +1280,7 @@ public void executeBundles(ProcessContext context) {\n   public static class ExportGcs extends PTransform<PBegin, ExportGcs.Result> {\n     public static final TupleTag<String> OUT = new TupleTag<String>() {};\n \n-    /**\n-     * Represents the result of an export, including both the successful parsed messages, and\n-     * invalid ones.\n-     */\n+    /** Represents the result of an export, a collection of FHIR resources in ndjson. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2MjQyNg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTk4NzgyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo0NzoyMVrOHMBLDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNjoyNFrOHPVy8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2NDE3Mg==", "bodyText": "Please cache this object, otherwise we will create a Gson object for each element.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482364172", "createdAt": "2020-09-02T19:47:21Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());\n+      }\n+\n+      @Setup\n+      public void initClient() throws IOException {\n+        this.client = new HttpHealthcareApiClient();\n+      }\n+\n+      @ProcessElement\n+      public void deidentify(ProcessContext context)\n+          throws IOException, InterruptedException, HealthcareHttpException {\n+        String sourceFhirStore = context.element();\n+        String destinationFhirStore = this.destinationFhirStore.get();\n+        Gson g = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5NTczNw==", "bodyText": "Nice catch. Done.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482395737", "createdAt": "2020-09-02T20:10:47Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());\n+      }\n+\n+      @Setup\n+      public void initClient() throws IOException {\n+        this.client = new HttpHealthcareApiClient();\n+      }\n+\n+      @ProcessElement\n+      public void deidentify(ProcessContext context)\n+          throws IOException, InterruptedException, HealthcareHttpException {\n+        String sourceFhirStore = context.element();\n+        String destinationFhirStore = this.destinationFhirStore.get();\n+        Gson g = new Gson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2NDE3Mg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2OTYyMA==", "bodyText": "Gson class in also not serializable. So I reverted back to the original version. Do you know what is the good way to do it? For me, I think Gson object is not a big deal though as this transform is expected to operation at FHIR store level, which is usually a few.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482969620", "createdAt": "2020-09-03T13:17:30Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());\n+      }\n+\n+      @Setup\n+      public void initClient() throws IOException {\n+        this.client = new HttpHealthcareApiClient();\n+      }\n+\n+      @ProcessElement\n+      public void deidentify(ProcessContext context)\n+          throws IOException, InterruptedException, HealthcareHttpException {\n+        String sourceFhirStore = context.element();\n+        String destinationFhirStore = this.destinationFhirStore.get();\n+        Gson g = new Gson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2NDE3Mg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNDYyMw==", "bodyText": "Have you tried to make it a static field? Static fields are implicitly transient.", "url": "https://github.com/apache/beam/pull/12721#discussion_r485834623", "createdAt": "2020-09-09T18:41:25Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());\n+      }\n+\n+      @Setup\n+      public void initClient() throws IOException {\n+        this.client = new HttpHealthcareApiClient();\n+      }\n+\n+      @ProcessElement\n+      public void deidentify(ProcessContext context)\n+          throws IOException, InterruptedException, HealthcareHttpException {\n+        String sourceFhirStore = context.element();\n+        String destinationFhirStore = this.destinationFhirStore.get();\n+        Gson g = new Gson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2NDE3Mg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0Nzc5Mw==", "bodyText": "Done. Thanks for tolerating a Java newbie :-)", "url": "https://github.com/apache/beam/pull/12721#discussion_r485847793", "createdAt": "2020-09-09T19:06:24Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());\n+      }\n+\n+      @Setup\n+      public void initClient() throws IOException {\n+        this.client = new HttpHealthcareApiClient();\n+      }\n+\n+      @ProcessElement\n+      public void deidentify(ProcessContext context)\n+          throws IOException, InterruptedException, HealthcareHttpException {\n+        String sourceFhirStore = context.element();\n+        String destinationFhirStore = this.destinationFhirStore.get();\n+        Gson g = new Gson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2NDE3Mg=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjAxMjM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1MDo0MVrOHMBcRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjo1NjoyMlrOHMUBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2ODU4Mw==", "bodyText": "Is DeidentifyConfig not serializable?", "url": "https://github.com/apache/beam/pull/12721#discussion_r482368583", "createdAt": "2020-09-02T19:50:41Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MTIzNw==", "bodyText": "No, DeidentifyConfig is NOT serializable and we don't want to change this auto-generated API.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482391237", "createdAt": "2020-09-02T20:07:35Z", "author": {"login": "trucleduc"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2ODU4Mw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3Mjk5Nw==", "bodyText": "I see, that makes sense.", "url": "https://github.com/apache/beam/pull/12721#discussion_r482672997", "createdAt": "2020-09-03T02:56:22Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1297,4 +1362,67 @@ public void exportResourcesToGcs(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** Deidentify FHIR resources from a FHIR store to a destination FHIR store */\n+  public static class Deidentify extends PTransform<PBegin, PCollection<String>> {\n+    private final ValueProvider<String> sourceFhirStore;\n+    private final ValueProvider<String> destinationFhirStore;\n+    private final ValueProvider<DeidentifyConfig> deidConfig;\n+\n+    public Deidentify(\n+        ValueProvider<String> sourceFhirStore,\n+        ValueProvider<String> destinationFhirStore,\n+        ValueProvider<DeidentifyConfig> deidConfig) {\n+      this.sourceFhirStore = sourceFhirStore;\n+      this.destinationFhirStore = destinationFhirStore;\n+      this.deidConfig = deidConfig;\n+    }\n+\n+    @Override\n+    public PCollection<String> expand(PBegin input) {\n+      return input\n+          .getPipeline()\n+          .apply(Create.ofProvider(sourceFhirStore, StringUtf8Coder.of()))\n+          .apply(\n+              \"ScheduleDeidentifyFhirStoreOperations\",\n+              ParDo.of(new DeidentifyFn(destinationFhirStore, deidConfig)));\n+    }\n+\n+    /** A function that schedules a deidentify operation and monitors the status. */\n+    public static class DeidentifyFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient client;\n+      private final ValueProvider<String> destinationFhirStore;\n+      private final String deidConfigJson;\n+\n+      public DeidentifyFn(\n+          ValueProvider<String> destinationFhirStore, ValueProvider<DeidentifyConfig> deidConfig) {\n+        this.destinationFhirStore = destinationFhirStore;\n+        Gson g = new Gson();\n+        this.deidConfigJson = g.toJson(deidConfig.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2ODU4Mw=="}, "originalCommit": {"oid": "23b503f803d88a5447ad324e08eb1be34e7c2603"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 395, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}