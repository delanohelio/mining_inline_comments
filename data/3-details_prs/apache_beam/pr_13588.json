{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzI1OTMy", "number": 13588, "title": "[BEAM-11533] Add logic to convert Beam schema to DataCatalog schema to SchemaUtils", "bodyText": "This is the first step of supporting the new ZetaSQL types (DATE, TIME, DATETIME, NUMERIC) in PubSub.\nr: @TheNeuralBit\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-21T21:11:11Z", "url": "https://github.com/apache/beam/pull/13588", "merged": true, "mergeCommit": {"oid": "48673e8e2230eef514246686760d8630c24562f9"}, "closed": true, "closedAt": "2020-12-31T01:11:36Z", "author": {"login": "robinyqiu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoeFSaAFqTU1NjcxNDMyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdrVkd4gH2gAyNTQzNzI1OTMyOmQ3YjljNjFmMWM0ZjY5NTkzMzk0NDIxYTUxMTNkMTRmNDdkMGI5NmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzE0MzI1", "url": "https://github.com/apache/beam/pull/13588#pullrequestreview-556714325", "createdAt": "2020-12-21T22:55:14Z", "commit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1NToxNFrOIJoepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1NjoxNFrOIJogsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTMwMQ==", "bodyText": "Rather than making these functions public so our internal code can use them, could we try to move the internal code into Beam? I think it should be possible to move it into DataCatalogTableProvider", "url": "https://github.com/apache/beam/pull/13588#discussion_r546971301", "createdAt": "2020-12-21T22:55:14Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -53,7 +53,7 @@\n           .build();\n \n   /** Convert DataCatalog schema to Beam schema. */\n-  static Schema fromDataCatalog(com.google.cloud.datacatalog.v1beta1.Schema dcSchema) {\n+  public static Schema fromDataCatalog(com.google.cloud.datacatalog.v1beta1.Schema dcSchema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTgyNw==", "bodyText": "Could you add unit tests that convert to/from data catalog types?", "url": "https://github.com/apache/beam/pull/13588#discussion_r546971827", "createdAt": "2020-12-21T22:56:14Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -98,4 +98,91 @@ private static FieldType getBeamFieldType(ColumnSchema column) {\n     throw new UnsupportedOperationException(\n         \"Field type '\" + dcFieldType + \"' is not supported (field '\" + column.getColumn() + \"')\");\n   }\n+\n+  /** Convert Beam schema to DataCatalog schema. */\n+  public static com.google.cloud.datacatalog.v1beta1.Schema toDataCatalog(Schema schema) {\n+    com.google.cloud.datacatalog.v1beta1.Schema.Builder schemaBuilder =\n+        com.google.cloud.datacatalog.v1beta1.Schema.newBuilder();\n+    for (Schema.Field field : schema.getFields()) {\n+      schemaBuilder.addColumns(fromBeamField(field));\n+    }\n+    return schemaBuilder.build();\n+  }\n+\n+  private static ColumnSchema fromBeamField(Schema.Field field) {\n+    Schema.FieldType fieldType = field.getType();\n+    if (fieldType.getTypeName().equals(Schema.TypeName.ARRAY)) {\n+      if (fieldType.getNullable()) {\n+        throw new UnsupportedOperationException(\n+            \"Nullable array type is not supported in DataCatalog schemas: \" + fieldType);\n+      } else if (fieldType.getCollectionElementType().getNullable()) {\n+        throw new UnsupportedOperationException(\n+            \"Nullable array element type is not supported in DataCatalog schemas: \" + fieldType);\n+      } else if (fieldType.getCollectionElementType().getTypeName().equals(Schema.TypeName.ARRAY)) {\n+        throw new UnsupportedOperationException(\n+            \"Array of arrays not supported in DataCatalog schemas: \" + fieldType);\n+      }\n+      ColumnSchema column =\n+          fromBeamField(Field.of(field.getName(), fieldType.getCollectionElementType()));\n+      if (!column.getMode().isEmpty()) {\n+        // We should have bailed out earlier for any cases that would result in mode being set.\n+        throw new AssertionError(\n+            \"ColumnSchema for collection element type has non-empty mode: \" + fieldType);\n+      }\n+      return column.toBuilder().setMode(\"REPEATED\").build();\n+    } else { // struct or primitive type\n+      ColumnSchema.Builder colBuilder =\n+          ColumnSchema.newBuilder().setType(getDataCatalogType(fieldType));\n+\n+      if (fieldType.getNullable()) {\n+        colBuilder.setMode(\"NULLABLE\");\n+      }\n+\n+      // if this is a struct, add the child columns\n+      if (fieldType.getTypeName().equals(Schema.TypeName.ROW)) {\n+        for (Schema.Field subField : fieldType.getRowSchema().getFields()) {\n+          colBuilder.addSubcolumns(fromBeamField(subField));\n+        }\n+      }\n+\n+      return colBuilder.setColumn(field.getName()).build();\n+    }\n+  }\n+\n+  private static String getDataCatalogType(FieldType fieldType) {\n+    switch (fieldType.getTypeName()) {\n+      case INT32:\n+      case INT64:\n+      case BYTES:\n+      case DOUBLE:\n+      case STRING:\n+        return fieldType.getTypeName().name();\n+      case BOOLEAN:\n+        return \"BOOL\";\n+      case DATETIME:\n+        return \"TIMESTAMP\";\n+      case DECIMAL:\n+        return \"NUMERIC\";\n+      case LOGICAL_TYPE:\n+        Schema.LogicalType logical = fieldType.getLogicalType();\n+        if (SqlTypes.TIME.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"TIME\";\n+        } else if (SqlTypes.DATE.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"DATE\";\n+        } else if (SqlTypes.DATETIME.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"DATETIME\";\n+        } else {\n+          throw new UnsupportedOperationException(\"Unsupported logical type: \" + logical);\n+        }\n+      case ROW:\n+        return \"STRUCT\";\n+      case MAP:\n+        return String.format(\n+            \"MAP<%s,%s>\",\n+            getDataCatalogType(fieldType.getMapKeyType()),\n+            getDataCatalogType(fieldType.getMapValueType()));\n+      default:\n+        throw new UnsupportedOperationException(\"Unsupported type: \" + fieldType);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d6d99c0ed8709a8d481304265a7cbcfe9da794", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/a4d6d99c0ed8709a8d481304265a7cbcfe9da794", "committedDate": "2020-12-21T23:25:00Z", "message": "Add logic to convert Beam schema to DataCatalog schema to SchemaUtils.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/d56041e6c43db954810f76d605adb10e96cd3622", "committedDate": "2020-12-21T21:08:35Z", "message": "Add logic to convert Beam schema to DataCatalog schema to SchemaUtils.java"}, "afterCommit": {"oid": "a4d6d99c0ed8709a8d481304265a7cbcfe9da794", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/a4d6d99c0ed8709a8d481304265a7cbcfe9da794", "committedDate": "2020-12-21T23:25:00Z", "message": "Add logic to convert Beam schema to DataCatalog schema to SchemaUtils.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b1cfb13a92f478cc0e71e9d77f704e9323c3991", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/9b1cfb13a92f478cc0e71e9d77f704e9323c3991", "committedDate": "2020-12-28T23:12:07Z", "message": "Move more internal code to DataCatalogTableProvider"}, "afterCommit": {"oid": "50eb4fc7f16a49b742f8ab77e79cd6f0d98bada6", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/50eb4fc7f16a49b742f8ab77e79cd6f0d98bada6", "committedDate": "2020-12-28T23:17:44Z", "message": "Move more internal code to DataCatalogTableProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22abe994db3310ade53cb9131297383d6f66317", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/e22abe994db3310ade53cb9131297383d6f66317", "committedDate": "2020-12-28T23:30:24Z", "message": "Move more internal code to DataCatalogTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50eb4fc7f16a49b742f8ab77e79cd6f0d98bada6", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/50eb4fc7f16a49b742f8ab77e79cd6f0d98bada6", "committedDate": "2020-12-28T23:17:44Z", "message": "Move more internal code to DataCatalogTableProvider"}, "afterCommit": {"oid": "e22abe994db3310ade53cb9131297383d6f66317", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/e22abe994db3310ade53cb9131297383d6f66317", "committedDate": "2020-12-28T23:30:24Z", "message": "Move more internal code to DataCatalogTableProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde1023c1569ce6ecff0e20a65b33dc721d577a5", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/dde1023c1569ce6ecff0e20a65b33dc721d577a5", "committedDate": "2020-12-29T23:07:35Z", "message": "Add unit tests and set REQUIRED mode for non-null field"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzUwMTU1", "url": "https://github.com/apache/beam/pull/13588#pullrequestreview-559750155", "createdAt": "2020-12-30T00:57:24Z", "commit": {"oid": "e22abe994db3310ade53cb9131297383d6f66317"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMDo1NzoyNFrOIMbSTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTowMzowN1rOIMbVIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwMDg3OQ==", "bodyText": "This really shouldn't be public either, it would be best if this functionality was exposed through the existing public API (probably DataCatalogTableProvider.createTable). If you'd rather just keep this as-is for now, lets mark this function @Internal so Beam users don't expect backwards compatibility.", "url": "https://github.com/apache/beam/pull/13588#discussion_r549900879", "createdAt": "2020-12-30T00:57:24Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogTableProvider.java", "diffHunk": "@@ -178,6 +214,23 @@ private Table toCalciteTable(String tableName, Entry entry) {\n     return tableBuilder.get().schema(schema).name(tableName).build();\n   }\n \n+  public boolean setSchemaIfNotPresent(String resource, Schema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22abe994db3310ade53cb9131297383d6f66317"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwMTYwMw==", "bodyText": "This assertion could still be there and change to column.getMode().equals(\"REQUIRED\")", "url": "https://github.com/apache/beam/pull/13588#discussion_r549901603", "createdAt": "2020-12-30T01:03:07Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -128,18 +128,15 @@ private static ColumnSchema fromBeamField(Schema.Field field) {\n       }\n       ColumnSchema column =\n           fromBeamField(Field.of(field.getName(), fieldType.getCollectionElementType()));\n-      if (!column.getMode().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde1023c1569ce6ecff0e20a65b33dc721d577a5"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b9c61f1c4f69593394421a5113d14f47d0b96a", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/d7b9c61f1c4f69593394421a5113d14f47d0b96a", "committedDate": "2020-12-30T20:43:49Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4210, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}