{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1Njc0MTM0", "number": 10655, "title": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness.", "bodyText": "Tear down unused DoFns periodically in Python SDK harness.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-22T05:38:55Z", "url": "https://github.com/apache/beam/pull/10655", "merged": true, "mergeCommit": {"oid": "4a25aa0dcaf19184ac279f566917132f5ae2be9d"}, "closed": true, "closedAt": "2020-02-27T00:28:23Z", "author": {"login": "sunjincheng121"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8yFE5gBqjI5NjkyMjkyNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHumuagH2gAyMzY1Njc0MTM0OjRjMjg4ZDExMWRlOWI2ZmNlYjYyYWVlNjdiM2EwZjA2ZmNlN2NmYjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99d025b80b5047acfd7615fca316ac49e7075dc0", "author": {"user": {"login": "sunjincheng121", "name": "Jincheng Sun"}}, "url": "https://github.com/apache/beam/commit/99d025b80b5047acfd7615fca316ac49e7075dc0", "committedDate": "2020-01-22T05:37:27Z", "message": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness."}, "afterCommit": {"oid": "94d67c719e0a784c0139358992a1c7010b4ad292", "author": {"user": {"login": "sunjincheng121", "name": "Jincheng Sun"}}, "url": "https://github.com/apache/beam/commit/94d67c719e0a784c0139358992a1c7010b4ad292", "committedDate": "2020-01-22T09:10:42Z", "message": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzkzNDc4", "url": "https://github.com/apache/beam/pull/10655#pullrequestreview-349393478", "createdAt": "2020-01-28T14:00:01Z", "commit": {"oid": "94d67c719e0a784c0139358992a1c7010b4ad292"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDowMDowMlrOFil8Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDowNjozMVrOFimJgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw==", "bodyText": "This won't update the access time when we first create the processor in the except block.", "url": "https://github.com/apache/beam/pull/10655#discussion_r371817547", "createdAt": "2020-01-28T14:00:02Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -280,6 +283,7 @@ def get(self, instruction_id, bundle_descriptor_id):\n     try:\n       # pop() is threadsafe\n       processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+      self.last_access_time[bundle_descriptor_id] = time.time()\n     except IndexError:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d67c719e0a784c0139358992a1c7010b4ad292"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzk3OA==", "bodyText": "We may want to make this configurable.", "url": "https://github.com/apache/beam/pull/10655#discussion_r371817978", "createdAt": "2020-01-28T14:00:54Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d67c719e0a784c0139358992a1c7010b4ad292"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxODE2Mg==", "bodyText": "Same here. Should be configurable or at least be extracted to a variable.", "url": "https://github.com/apache/beam/pull/10655#discussion_r371818162", "createdAt": "2020-01-28T14:01:17Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:\n+          BundleProcessorCache._shutdown_cached_bundle_processors(\n+              self.cached_bundle_processors[descriptor_id])\n+\n+    from apache_beam.runners.worker.data_plane import PeriodicThread\n+    self.periodic_shutdown = PeriodicThread(\n+        60, shutdown_inactive_bundle_processors)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d67c719e0a784c0139358992a1c7010b4ad292"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxOTAxOA==", "bodyText": "I think we should move this to the import section.", "url": "https://github.com/apache/beam/pull/10655#discussion_r371819018", "createdAt": "2020-01-28T14:02:59Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:\n+          BundleProcessorCache._shutdown_cached_bundle_processors(\n+              self.cached_bundle_processors[descriptor_id])\n+\n+    from apache_beam.runners.worker.data_plane import PeriodicThread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d67c719e0a784c0139358992a1c7010b4ad292"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMDkzMQ==", "bodyText": "Don't we have to remove the bundle processor list from the dictionary? Otherwise we may access a cached shutdown bundle processor.", "url": "https://github.com/apache/beam/pull/10655#discussion_r371820931", "createdAt": "2020-01-28T14:06:31Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:\n+          BundleProcessorCache._shutdown_cached_bundle_processors(\n+              self.cached_bundle_processors[descriptor_id])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94d67c719e0a784c0139358992a1c7010b4ad292"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTEwMzAw", "url": "https://github.com/apache/beam/pull/10655#pullrequestreview-351510300", "createdAt": "2020-01-31T13:41:12Z", "commit": {"oid": "ddf68a2630f9e77ac41b94955e1fb9b2834cdda6"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0MToxMlrOFkLn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0MjozMVrOFkLqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4MzUwOA==", "bodyText": "nit: you could surround the condition with paranthesis which would make it easier to read, e.g.\n       if (time.time() - last_access_time >\n                DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S):", "url": "https://github.com/apache/beam/pull/10655#discussion_r373483508", "createdAt": "2020-01-31T13:41:12Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +322,49 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.cached_bundle_processors_last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in \\\n+              self.cached_bundle_processors_last_access_time.items():\n+        if time.time() - last_access_time > \\\n+                DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf68a2630f9e77ac41b94955e1fb9b2834cdda6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDA0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S = 60\n          \n          \n            \n            DEFAULT_BUNDLE_PROCESSOR_CACHE_SHUTDOWN_THRESHOLD_S = 60", "url": "https://github.com/apache/beam/pull/10655#discussion_r373484046", "createdAt": "2020-01-31T13:42:16Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -69,6 +71,8 @@\n # 5 minutes * 60 seconds * 1020 millis * 1000 micros * 1000 nanoseconds\n DEFAULT_LOG_LULL_TIMEOUT_NS = 5 * 60 * 1000 * 1000 * 1000\n \n+DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S = 60", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf68a2630f9e77ac41b94955e1fb9b2834cdda6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDE1NA==", "bodyText": "Same here, use parenthesis.", "url": "https://github.com/apache/beam/pull/10655#discussion_r373484154", "createdAt": "2020-01-31T13:42:31Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +322,49 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.cached_bundle_processors_last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in \\\n+              self.cached_bundle_processors_last_access_time.items():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf68a2630f9e77ac41b94955e1fb9b2834cdda6"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d97572204699fb16292c39825bbd1daabe5f782", "author": {"user": {"login": "sunjincheng121", "name": "Jincheng Sun"}}, "url": "https://github.com/apache/beam/commit/8d97572204699fb16292c39825bbd1daabe5f782", "committedDate": "2020-02-07T08:05:44Z", "message": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3e1b4db740f0850aca836de2fc3dc426968e0e1", "author": {"user": {"login": "sunjincheng121", "name": "Jincheng Sun"}}, "url": "https://github.com/apache/beam/commit/d3e1b4db740f0850aca836de2fc3dc426968e0e1", "committedDate": "2020-02-01T02:04:18Z", "message": "fixup! fixup! [BEAM-8618]Rename last_access_time to cached_bundle_processors_last_access_time"}, "afterCommit": {"oid": "8d97572204699fb16292c39825bbd1daabe5f782", "author": {"user": {"login": "sunjincheng121", "name": "Jincheng Sun"}}, "url": "https://github.com/apache/beam/commit/8d97572204699fb16292c39825bbd1daabe5f782", "committedDate": "2020-02-07T08:05:44Z", "message": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTIwMzUx", "url": "https://github.com/apache/beam/pull/10655#pullrequestreview-363520351", "createdAt": "2020-02-24T16:24:03Z", "commit": {"oid": "8d97572204699fb16292c39825bbd1daabe5f782"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c288d111de9b6fceb62aee67b3a0f06fce7cfb4", "author": {"user": {"login": "sunjincheng121", "name": "Jincheng Sun"}}, "url": "https://github.com/apache/beam/commit/4c288d111de9b6fceb62aee67b3a0f06fce7cfb4", "committedDate": "2020-02-25T09:21:29Z", "message": "fixup! [BEAM-8618] Tear down unused DoFns periodically in Python SDK harness."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3569, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}