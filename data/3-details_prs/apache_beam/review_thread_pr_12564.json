{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDk5MjYy", "number": 12564, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo0MjowNVrOEX7yhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozNTozMVrOEYiXCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTMyMjk0OnYy", "diffSide": "RIGHT", "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/FlinkRunnerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo0MjowNVrOG__wsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDozNDowM1rOHAv5Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1ODEyOA==", "bodyText": "Do you think we could avoid duplicating all this code? If the signature changed, we should rather define an Interface to retrieve the pipeline/construct the environment, which different versions can override. Alternatively, using reflection is also a valid option in tests.", "url": "https://github.com/apache/beam/pull/12564#discussion_r469758128", "createdAt": "2020-08-13T07:42:05Z", "author": {"login": "mxm"}, "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/FlinkRunnerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import static org.hamcrest.CoreMatchers.allOf;\n+\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.io.GenerateSequence;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.apache.flink.client.program.OptimizerPlanEnvironment;\n+import org.apache.flink.client.program.PackagedProgram;\n+import org.apache.flink.client.program.PackagedProgramUtils;\n+import org.apache.flink.client.program.ProgramInvocationException;\n+import org.apache.flink.configuration.Configuration;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link FlinkRunner}.\n+ *\n+ * <p>This test is copied to 1.10 is becauses the signature of the method getPipeline in\n+ * OptimizerPlanEnvironment has been changed in Flink 1.10, please refer to\n+ * https://github.com/apache/flink/commit/0ea4dd7e9d56a017743ca6794d28537800faab6f for more details.\n+ */\n+public class FlinkRunnerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28771436d428f66c44483791d04844a7e3e99351"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk5Mjk3Ng==", "bodyText": "Yeah should be doable. I'll add a shim.\nAlso totally missed getTimeServiceManager. My IDEA is still glitchy with the setup, need to get use to the multiple versions code sharing flow \ud83d\ude02", "url": "https://github.com/apache/beam/pull/12564#discussion_r469992976", "createdAt": "2020-08-13T14:26:56Z", "author": {"login": "nevillelyh"}, "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/FlinkRunnerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import static org.hamcrest.CoreMatchers.allOf;\n+\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.io.GenerateSequence;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.apache.flink.client.program.OptimizerPlanEnvironment;\n+import org.apache.flink.client.program.PackagedProgram;\n+import org.apache.flink.client.program.PackagedProgramUtils;\n+import org.apache.flink.client.program.ProgramInvocationException;\n+import org.apache.flink.configuration.Configuration;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link FlinkRunner}.\n+ *\n+ * <p>This test is copied to 1.10 is becauses the signature of the method getPipeline in\n+ * OptimizerPlanEnvironment has been changed in Flink 1.10, please refer to\n+ * https://github.com/apache/flink/commit/0ea4dd7e9d56a017743ca6794d28537800faab6f for more details.\n+ */\n+public class FlinkRunnerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1ODEyOA=="}, "originalCommit": {"oid": "28771436d428f66c44483791d04844a7e3e99351"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NTc1Mw==", "bodyText": "@mxm addressed most code copy issues by adding compat layers. ./gradlew -p runners/flink test passes for all versions but build fails checkstyle due to missing package-info.java, even though it exists in the base src/main dir. Any idea how to fix?\nI'll look at the docs next. Not sure about the CI test scripts though.\n> Task :runners:flink:1.10:checkstyleMain FAILED\n[ant:checkstyle] [ERROR] /home/neville/src/apache/beam/runners/flink/1.10/build/source-overrides/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/AbstractStreamOperatorCompat.java:1: Missing package-info.java file. [JavadocPackage]\n\n> Task :runners:flink:1.8:checkstyleMain FAILED\n[ant:checkstyle] [ERROR] /home/neville/src/apache/beam/runners/flink/1.8/build/source-overrides/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/AbstractStreamOperatorCompat.java:1: Missing package-info.java file. [JavadocPackage]\n\n> Task :runners:flink:1.9:checkstyleMain\n[ant:checkstyle] [ERROR] /home/neville/src/apache/beam/runners/flink/1.9/build/source-overrides/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/AbstractStreamOperatorCompat.java:1: Missing package-info.java file. [JavadocPackage]\n\n> Task :runners:flink:1.9:checkstyleMain FAILED\n\n> Task :runners:flink:1.11:checkstyleMain\n[ant:checkstyle] [ERROR] /home/neville/src/apache/beam/runners/flink/1.11/build/source-overrides/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/AbstractStreamOperatorCompat.java:1: Missing package-info.java file. [JavadocPackage]", "url": "https://github.com/apache/beam/pull/12564#discussion_r470145753", "createdAt": "2020-08-13T18:01:35Z", "author": {"login": "nevillelyh"}, "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/FlinkRunnerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import static org.hamcrest.CoreMatchers.allOf;\n+\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.io.GenerateSequence;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.apache.flink.client.program.OptimizerPlanEnvironment;\n+import org.apache.flink.client.program.PackagedProgram;\n+import org.apache.flink.client.program.PackagedProgramUtils;\n+import org.apache.flink.client.program.ProgramInvocationException;\n+import org.apache.flink.configuration.Configuration;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link FlinkRunner}.\n+ *\n+ * <p>This test is copied to 1.10 is becauses the signature of the method getPipeline in\n+ * OptimizerPlanEnvironment has been changed in Flink 1.10, please refer to\n+ * https://github.com/apache/flink/commit/0ea4dd7e9d56a017743ca6794d28537800faab6f for more details.\n+ */\n+public class FlinkRunnerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1ODEyOA=="}, "originalCommit": {"oid": "28771436d428f66c44483791d04844a7e3e99351"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NjcwNg==", "bodyText": "Thanks!\nIf the problem doesn't go away after running ./gradlew -p runners/flink clean, then you might have to add a suppression here: \n  \n    \n      beam/sdks/java/build-tools/src/main/resources/beam/suppressions.xml\n    \n    \n         Line 111\n      in\n      02bf081\n    \n    \n    \n    \n\n        \n          \n           <suppress checks=\"JavadocPackage\" files=\".*runners.flink.*CoderTypeSerializer\\.java\"/>", "url": "https://github.com/apache/beam/pull/12564#discussion_r470546706", "createdAt": "2020-08-14T10:34:03Z", "author": {"login": "mxm"}, "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/FlinkRunnerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import static org.hamcrest.CoreMatchers.allOf;\n+\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.io.GenerateSequence;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.apache.flink.client.program.OptimizerPlanEnvironment;\n+import org.apache.flink.client.program.PackagedProgram;\n+import org.apache.flink.client.program.PackagedProgramUtils;\n+import org.apache.flink.client.program.ProgramInvocationException;\n+import org.apache.flink.configuration.Configuration;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.StringContains;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link FlinkRunner}.\n+ *\n+ * <p>This test is copied to 1.10 is becauses the signature of the method getPipeline in\n+ * OptimizerPlanEnvironment has been changed in Flink 1.10, please refer to\n+ * https://github.com/apache/flink/commit/0ea4dd7e9d56a017743ca6794d28537800faab6f for more details.\n+ */\n+public class FlinkRunnerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1ODEyOA=="}, "originalCommit": {"oid": "28771436d428f66c44483791d04844a7e3e99351"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDQwOTQwOnYy", "diffSide": "LEFT", "path": "runners/flink/1.8/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoyNToxMVrOHAvqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoyNToxMVrOHAvqGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0Mjg3NQ==", "bodyText": "nit: unrelated change", "url": "https://github.com/apache/beam/pull/12564#discussion_r470542875", "createdAt": "2020-08-14T10:25:11Z", "author": {"login": "mxm"}, "path": "runners/flink/1.8/build.gradle", "diffHunk": "@@ -17,7 +17,6 @@\n  */\n \n def basePath = '..'\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee08b5608ff0c6c428c2f1856404696b37ff681"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDQxMjg1OnYy", "diffSide": "RIGHT", "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/RemoteMiniClusterImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoyNjoxM1rOHAvsCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTozNDo1OFrOHA5SGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MzM3MQ==", "bodyText": "Is it really the blob server port here or do we want the Job server RPC port?", "url": "https://github.com/apache/beam/pull/12564#discussion_r470543371", "createdAt": "2020-08-14T10:26:13Z", "author": {"login": "mxm"}, "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/RemoteMiniClusterImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.runtime.minicluster.MiniClusterConfiguration;\n+\n+/** A {@link MiniCluster} which allows remote connections for the end-to-end test. */\n+public class RemoteMiniClusterImpl extends RemoteMiniCluster {\n+\n+  public RemoteMiniClusterImpl(MiniClusterConfiguration miniClusterConfiguration) {\n+    super(miniClusterConfiguration);\n+  }\n+\n+  @Override\n+  public int getClusterPort() {\n+    return getClusterInformation().getBlobServerPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee08b5608ff0c6c428c2f1856404696b37ff681"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMDU3MQ==", "bodyText": "Yeah I really monkeyed that one \ud83d\ude48\nIf I understood it correctly, it's a workaround for this, to expose port in useSingleRpcService mode:\nhttps://github.com/apache/flink/blob/release-1.10.1/flink-runtime/src/main/java/org/apache/flink/runtime/minicluster/MiniCluster.java#L270\nWhich was changed to createLocalRpcService in 1.11.\nhttps://github.com/apache/flink/blob/release-1.11.1/flink-runtime/src/main/java/org/apache/flink/runtime/minicluster/MiniCluster.java#L271\nPushed a fix for this.", "url": "https://github.com/apache/beam/pull/12564#discussion_r470700571", "createdAt": "2020-08-14T15:34:58Z", "author": {"login": "nevillelyh"}, "path": "runners/flink/1.11/src/test/java/org/apache/beam/runners/flink/RemoteMiniClusterImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink;\n+\n+import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.runtime.minicluster.MiniClusterConfiguration;\n+\n+/** A {@link MiniCluster} which allows remote connections for the end-to-end test. */\n+public class RemoteMiniClusterImpl extends RemoteMiniCluster {\n+\n+  public RemoteMiniClusterImpl(MiniClusterConfiguration miniClusterConfiguration) {\n+    super(miniClusterConfiguration);\n+  }\n+\n+  @Override\n+  public int getClusterPort() {\n+    return getClusterInformation().getBlobServerPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MzM3MQ=="}, "originalCommit": {"oid": "8ee08b5608ff0c6c428c2f1856404696b37ff681"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTY0MjMyOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozNTozMVrOHA7NIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozNTozMVrOHA7NIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczMjA2Nw==", "bodyText": "Maybe add a field for this instead of calling the getter every time?", "url": "https://github.com/apache/beam/pull/12564#discussion_r470732067", "createdAt": "2020-08-14T16:35:31Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -699,7 +699,7 @@ public final void processWatermark1(Watermark mark) throws Exception {\n \n     long inputWatermarkHold = applyInputWatermarkHold(getEffectiveInputWatermark());\n     if (keyCoder != null) {\n-      timeServiceManager.advanceWatermark(new Watermark(inputWatermarkHold));\n+      getTimeServiceManagerCompat().advanceWatermark(new Watermark(inputWatermarkHold));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a090ca5531c56d948eb59c4bd727a289363cd6be"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 676, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}