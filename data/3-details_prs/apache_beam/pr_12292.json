{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNzIyODg5", "number": 12292, "title": "[BEAM-8057] Support ZetaSQL DOUBLE +INF, -INF and NAN", "bodyText": "This PR supports +inf, -inf and NaN for ZetaSQL DOUBLE type.\n\nOriginal ignored test case ZetaSqlDialectSpecTest.testEQ2 passed.\nIS_INF() and IS_NAN() are supported for ZetaSQL now.\nAdditional corresponding test cases added.\n\nr: @apilloud @robinyqiu\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-17T03:23:08Z", "url": "https://github.com/apache/beam/pull/12292", "merged": true, "mergeCommit": {"oid": "1e569fabe843325e4721acb781d5e0d55f19eb5f"}, "closed": true, "closedAt": "2020-07-22T21:47:33Z", "author": {"login": "ZijieSong946"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1r_w5AFqTQ1MDM1OTgzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3hT4bABqjM1Nzc1NDY5MjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzU5ODM5", "url": "https://github.com/apache/beam/pull/12292#pullrequestreview-450359839", "createdAt": "2020-07-17T04:08:42Z", "commit": {"oid": "b4ea922d4a9dff9f945af491048e2d2658bde950"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDowODo0MlrOGzErfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDoxNzo1NVrOGzEzPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNzIzMQ==", "bodyText": "How about just check val == Double.POSITIVE_INFINITY here? (similar below)", "url": "https://github.com/apache/beam/pull/12292#discussion_r456207231", "createdAt": "2020-07-17T04:08:42Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -786,15 +786,39 @@ private RexNode convertSimpleValueToRexNode(TypeKind kind, Value value) {\n                     ZetaSqlCalciteTranslationUtils.toSimpleRelDataType(kind, rexBuilder()));\n         break;\n       case TYPE_DOUBLE:\n+        // Cannot simply call makeApproxLiteral() for ZetaSQL DOUBLE type because positive infinity,\n+        // negative infinity and Nan cannot be directly converted to BigDecimal. So we create three\n+        // wrapper functions here for these three cases such that we can later recognize it and\n+        // customize its unparsing in BeamBigQuerySqlDialect.\n         double val = value.getDoubleValue();\n-        if (Double.isInfinite(val) || Double.isNaN(val)) {\n-          throw new UnsupportedOperationException(\"Does not support Infinite or NaN literals.\");\n+        if (Double.isInfinite(val) && val > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ea922d4a9dff9f945af491048e2d2658bde950"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNzk4Ng==", "bodyText": "I could create 2 local parameters: String wrapperFun (null for the last case) and RelDataType returnType to simplify this big if-else block.", "url": "https://github.com/apache/beam/pull/12292#discussion_r456207986", "createdAt": "2020-07-17T04:12:06Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -786,15 +786,39 @@ private RexNode convertSimpleValueToRexNode(TypeKind kind, Value value) {\n                     ZetaSqlCalciteTranslationUtils.toSimpleRelDataType(kind, rexBuilder()));\n         break;\n       case TYPE_DOUBLE:\n+        // Cannot simply call makeApproxLiteral() for ZetaSQL DOUBLE type because positive infinity,\n+        // negative infinity and Nan cannot be directly converted to BigDecimal. So we create three\n+        // wrapper functions here for these three cases such that we can later recognize it and\n+        // customize its unparsing in BeamBigQuerySqlDialect.\n         double val = value.getDoubleValue();\n-        if (Double.isInfinite(val) || Double.isNaN(val)) {\n-          throw new UnsupportedOperationException(\"Does not support Infinite or NaN literals.\");\n+        if (Double.isInfinite(val) && val > 0) {\n+          ret =\n+              rexBuilder()\n+                  .makeCall(\n+                      SqlOperators.createOtherKindSqlFunction(\n+                          BeamBigQuerySqlDialect.DOUBLE_POSITIVE_INF_FUNCTION,\n+                          ZetaSqlCalciteTranslationUtils.toCalciteTypeName(kind)));\n+        } else if (Double.isInfinite(val) && val < 0) {\n+          ret =\n+              rexBuilder()\n+                  .makeCall(\n+                      SqlOperators.createOtherKindSqlFunction(\n+                          BeamBigQuerySqlDialect.DOUBLE_NEGATIVE_INF_FUNCTION,\n+                          ZetaSqlCalciteTranslationUtils.toCalciteTypeName(kind)));\n+        } else if (Double.isNaN(val)) {\n+          ret =\n+              rexBuilder()\n+                  .makeCall(\n+                      SqlOperators.createOtherKindSqlFunction(\n+                          BeamBigQuerySqlDialect.DOUBLE_NAN_FUNCTION,\n+                          ZetaSqlCalciteTranslationUtils.toCalciteTypeName(kind)));\n+        } else {\n+          ret =\n+              rexBuilder()\n+                  .makeApproxLiteral(\n+                      new BigDecimal(val),\n+                      ZetaSqlCalciteTranslationUtils.toSimpleRelDataType(kind, rexBuilder()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ea922d4a9dff9f945af491048e2d2658bde950"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwODg0NQ==", "bodyText": "If you create a map DOUBLE_LITERAL_FUNCTIONS, you can merge the 3 branches here and the 3 functions below. (Similar to what I did with EXTRACT_FUNCTIONS)", "url": "https://github.com/apache/beam/pull/12292#discussion_r456208845", "createdAt": "2020-07-17T04:16:03Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "diffHunk": "@@ -157,8 +160,20 @@ public void unparseCall(\n         break;\n       case OTHER_FUNCTION:\n         String funName = call.getOperator().getName();\n-        if (NUMERIC_LITERAL_FUNCTION.equals(funName)) {\n-          // self-designed function dealing with the unparsing of ZetaSQL numeric literal\n+        if (DOUBLE_POSITIVE_INF_FUNCTION.equals(funName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ea922d4a9dff9f945af491048e2d2658bde950"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwOTIxNQ==", "bodyText": "Maybe comment here: \"There is no direct ZetaSQL literal representation of NaN or infinity\"?", "url": "https://github.com/apache/beam/pull/12292#discussion_r456209215", "createdAt": "2020-07-17T04:17:55Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "diffHunk": "@@ -239,6 +254,18 @@ private void unparseTrim(SqlWriter writer, SqlCall call, int leftPrec, int right\n     writer.endFunCall(trimFrame);\n   }\n \n+  private void unparseDoublePositiveINFWrapperFunction(SqlWriter writer) {\n+    writer.literal(\"CAST('+inf' AS FLOAT64)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ea922d4a9dff9f945af491048e2d2658bde950"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODY2OTA2", "url": "https://github.com/apache/beam/pull/12292#pullrequestreview-450866906", "createdAt": "2020-07-17T18:19:23Z", "commit": {"oid": "fa169f4b47ab3484bc02e174543ed30598d2ca71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxOToyNFrOGzczKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxOToyNFrOGzczKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMjQxMQ==", "bodyText": "Actually you can just pass funName to it.", "url": "https://github.com/apache/beam/pull/12292#discussion_r456602411", "createdAt": "2020-07-17T18:19:24Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "diffHunk": "@@ -157,8 +166,13 @@ public void unparseCall(\n         break;\n       case OTHER_FUNCTION:\n         String funName = call.getOperator().getName();\n-        if (NUMERIC_LITERAL_FUNCTION.equals(funName)) {\n-          // self-designed function dealing with the unparsing of ZetaSQL numeric literal\n+        if (DOUBLE_FUNCTIONS.containsKey(funName)) {\n+          // self-designed function dealing with the unparsing of ZetaSQL DOUBLE positive\n+          // infinity, negative infinity and NaN\n+          unparseDoubleWrapperFunction(writer, call);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa169f4b47ab3484bc02e174543ed30598d2ca71"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e8f3aca0300f6ae863098d0e5425987c1bc0c8a", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/7e8f3aca0300f6ae863098d0e5425987c1bc0c8a", "committedDate": "2020-07-17T18:34:50Z", "message": "Improvements done."}, "afterCommit": {"oid": "c1b4f8807b57e0cb49f8751845f1412f7c20719a", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/c1b4f8807b57e0cb49f8751845f1412f7c20719a", "committedDate": "2020-07-17T18:49:28Z", "message": "Support ZetaSQL DOUBLE +inf, -inf and Nan."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODkwMjE2", "url": "https://github.com/apache/beam/pull/12292#pullrequestreview-450890216", "createdAt": "2020-07-17T18:59:05Z", "commit": {"oid": "c1b4f8807b57e0cb49f8751845f1412f7c20719a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMDE1Nzc1", "url": "https://github.com/apache/beam/pull/12292#pullrequestreview-453015775", "createdAt": "2020-07-22T05:59:53Z", "commit": {"oid": "585939d4cd2451c5c94b0ac9a7bc138e477d85e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo1OTo1M1rOG1T2GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo1OTo1M1rOG1T2GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1Mjg1Nw==", "bodyText": "Usually I will make a TODO here (such that you can easily find it in the IntelliJ TODO tab), like:\n// TODO[BEAM-10550]: Update the temporary workaround below after vendored Calcite version >= 1.23.0", "url": "https://github.com/apache/beam/pull/12292#discussion_r458552857", "createdAt": "2020-07-22T05:59:53Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -805,6 +805,9 @@ private RexNode convertSimpleValueToRexNode(TypeKind kind, Value value) {\n         if (wrapperFun == null) {\n           ret = rexBuilder().makeApproxLiteral(new BigDecimal(val), returnType);\n         } else if (BeamBigQuerySqlDialect.DOUBLE_NAN_FUNCTION.equals(wrapperFun)) {\n+          // 'https://issues.apache.org/jira/browse/BEAM-10550'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "585939d4cd2451c5c94b0ac9a7bc138e477d85e8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bff5fca7bf533b39bc04a97a48c208bed82c5a9", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/0bff5fca7bf533b39bc04a97a48c208bed82c5a9", "committedDate": "2020-07-22T20:59:45Z", "message": "Support ZetaSQL DOUBLE +inf, -inf and NaN."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "585939d4cd2451c5c94b0ac9a7bc138e477d85e8", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/585939d4cd2451c5c94b0ac9a7bc138e477d85e8", "committedDate": "2020-07-21T21:24:52Z", "message": "Related to new JIRA issue."}, "afterCommit": {"oid": "0bff5fca7bf533b39bc04a97a48c208bed82c5a9", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/0bff5fca7bf533b39bc04a97a48c208bed82c5a9", "committedDate": "2020-07-22T20:59:45Z", "message": "Support ZetaSQL DOUBLE +inf, -inf and NaN."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4152, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}