{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjY5MTI5", "number": 11365, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTozMTozMVrODw3cCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTozMTozMVrODw3cCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTY2NTM3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/trigger.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTozMTozMVrOGEGaDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTozMTozMVrOGEGaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1MjQ2Mg==", "bodyText": "More conventional is to return hash(type(self)), to avoid collisions, but this is OK.", "url": "https://github.com/apache/beam/pull/11365#discussion_r406952462", "createdAt": "2020-04-10T21:31:31Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/trigger.py", "diffHunk": "@@ -367,6 +367,47 @@ def has_ontime_pane(self):\n     return False\n \n \n+class Always(TriggerFn):\n+  \"\"\"Repeatedly invoke the given trigger, never finishing.\"\"\"\n+  def __init__(self):\n+    pass\n+\n+  def __repr__(self):\n+    return 'Always'\n+\n+  def __eq__(self, other):\n+    return type(self) == type(other)\n+\n+  def __hash__(self):\n+    return 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ba6bf0bf61486de95d2f7a4e911d1306c38af0"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1457, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}