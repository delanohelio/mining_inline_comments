{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTczMjk5", "number": 10580, "title": "[BEAM-9116] Limit the number of past invocations stored in JobService", "bodyText": "The InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\nThis limits the number of past job invocations via a flag in the job server with\na sensible default.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-14T11:01:05Z", "url": "https://github.com/apache/beam/pull/10580", "merged": true, "mergeCommit": {"oid": "9191690c071a07c76fcc8e49feda6aa802dd5c68"}, "closed": true, "closedAt": "2020-01-16T17:57:18Z", "author": {"login": "mxm"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6PVKvABqjI5NDY3MDUzNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb68ZfagFqTM0NDAyNzQ5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7555cebc23dfe74dbed68f452b59a3074d158fa8", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/7555cebc23dfe74dbed68f452b59a3074d158fa8", "committedDate": "2020-01-14T10:58:26Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "12e36f1764040dccb0d140b6f9b5331af7c231fe", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/12e36f1764040dccb0d140b6f9b5331af7c231fe", "committedDate": "2020-01-14T11:33:44Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12e36f1764040dccb0d140b6f9b5331af7c231fe", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/12e36f1764040dccb0d140b6f9b5331af7c231fe", "committedDate": "2020-01-14T11:33:44Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "0d2a977743b6a0b8485aa6202bad2b2addf12822", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/0d2a977743b6a0b8485aa6202bad2b2addf12822", "committedDate": "2020-01-14T13:56:49Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d2a977743b6a0b8485aa6202bad2b2addf12822", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/0d2a977743b6a0b8485aa6202bad2b2addf12822", "committedDate": "2020-01-14T13:56:49Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "1f3ceed34568c592a1ff88810bfcb5ba4dfb7837", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/1f3ceed34568c592a1ff88810bfcb5ba4dfb7837", "committedDate": "2020-01-14T16:23:00Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b61218ec4f988c3ab6b397c405e774d3cdb6dcb6", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/b61218ec4f988c3ab6b397c405e774d3cdb6dcb6", "committedDate": "2020-01-14T18:43:42Z", "message": "[BEAM-6008] Make sure to end stream only after sending all messages and state updates\n\nThis must work regardless of whether we subscribe during runtime or after the\npipeline has reached the terminal state.\n\nThe Java SDK queries after the pipeline terminated, the Python SDK already\nsubscribes during runtime."}, "afterCommit": {"oid": "0425f1a92e44038eedea8722869ce85025dc6418", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/0425f1a92e44038eedea8722869ce85025dc6418", "committedDate": "2020-01-15T11:06:31Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0425f1a92e44038eedea8722869ce85025dc6418", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/0425f1a92e44038eedea8722869ce85025dc6418", "committedDate": "2020-01-15T11:06:31Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "32a80af25f5ff31c2351834c861695e1d69be891", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/32a80af25f5ff31c2351834c861695e1d69be891", "committedDate": "2020-01-15T11:08:09Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32a80af25f5ff31c2351834c861695e1d69be891", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/32a80af25f5ff31c2351834c861695e1d69be891", "committedDate": "2020-01-15T11:08:09Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "67b66305f47abed5b0c6993fba12e0c589b3c8b3", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/67b66305f47abed5b0c6993fba12e0c589b3c8b3", "committedDate": "2020-01-15T11:09:05Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67b66305f47abed5b0c6993fba12e0c589b3c8b3", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/67b66305f47abed5b0c6993fba12e0c589b3c8b3", "committedDate": "2020-01-15T11:09:05Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac", "committedDate": "2020-01-15T11:17:19Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDQwMDk3", "url": "https://github.com/apache/beam/pull/10580#pullrequestreview-343440097", "createdAt": "2020-01-15T18:46:55Z", "commit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODo0Njo1NlrOFeCobQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToxMjoxMVrOFeDVyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NDcxNw==", "bodyText": "This variable name should be prefixed with DEFAULT to distinguish it from maxInvocationHistory.", "url": "https://github.com/apache/beam/pull/10580#discussion_r367044717", "createdAt": "2020-01-15T18:46:56Z", "author": {"login": "ibzib"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/InMemoryJobService.java", "diffHunk": "@@ -72,12 +73,16 @@\n public class InMemoryJobService extends JobServiceGrpc.JobServiceImplBase implements FnService {\n   private static final Logger LOG = LoggerFactory.getLogger(InMemoryJobService.class);\n \n+  /** The default maximum number of past invocations to keep. */\n+  public static final int MAX_INVOCATION_HISTORY = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0OTEzMg==", "bodyText": "The option name should match the variable name.", "url": "https://github.com/apache/beam/pull/10580#discussion_r367049132", "createdAt": "2020-01-15T18:56:25Z", "author": {"login": "ibzib"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobServerDriver.java", "diffHunk": "@@ -97,6 +98,9 @@ protected InMemoryJobService createJobService() throws IOException {\n         handler = ExplicitBooleanOptionHandler.class)\n     private boolean cleanArtifactsPerJob = true;\n \n+    @Option(name = \"--history-size\", usage = \"The maximum number of completed invocations to keep.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1Mzc3Mg==", "bodyText": "Why not just i < maxInvocationHistory?", "url": "https://github.com/apache/beam/pull/10580#discussion_r367053772", "createdAt": "2020-01-15T19:06:35Z", "author": {"login": "ibzib"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/jobsubmission/InMemoryJobServiceTest.java", "diffHunk": "@@ -186,7 +193,59 @@ public void testJobSubmissionUsesJobInvokerAndIsSuccess() throws Exception {\n     verify(invocation, times(1)).start();\n   }\n \n+  @Test\n+  public void testInvocationCleanup() {\n+    final JobApi.GetJobsRequest getJobsRequest = JobApi.GetJobsRequest.newBuilder().build();\n+\n+    final int maxRunningJobs = maxInvocationHistory + new Random().nextInt(50);\n+    // Store state listeners to be able to complete the invocations\n+    final List<Consumer<JobApi.JobStateEvent>> stateListeners = new ArrayList<>(maxRunningJobs);\n+\n+    for (int i = 0; i < maxRunningJobs; i++) {\n+      when(invocation.getId()).thenReturn(String.valueOf(i));\n+      prepareAndRunJob();\n+\n+      // Retrieve the state listener for this invocation\n+      ArgumentCaptor<Consumer<JobApi.JobStateEvent>> stateListener =\n+          ArgumentCaptor.forClass(Consumer.class);\n+      verify(invocation, times(i + 1)).addStateListener(stateListener.capture());\n+      stateListeners.add(stateListener.getValue());\n+\n+      // Retrieve current list of jobs\n+      RecordingObserver<JobApi.GetJobsResponse> recorder = new RecordingObserver<>();\n+      service.getJobs(getJobsRequest, recorder);\n+      assertThat(recorder.isSuccessful(), is(true));\n+\n+      // All running invocations must be available and never be discarded\n+      assertThat(recorder.getValue().getJobInfoCount(), is(i + 1));\n+    }\n+\n+    // Complete the invocations one by one and check invocation history\n+    JobApi.JobStateEvent terminalEvent =\n+        JobApi.JobStateEvent.newBuilder().setState(JobApi.JobState.Enum.DONE).build();\n+\n+    for (int i = 0; i < maxRunningJobs; i++) {\n+      // finish invocation\n+      stateListeners.get(i).accept(terminalEvent);\n+\n+      RecordingObserver<JobApi.GetJobsResponse> recorder = new RecordingObserver<>();\n+      service.getJobs(getJobsRequest, recorder);\n+\n+      // All running invocations must never be discarded but we keep a maximum number of completed\n+      // invocations\n+      int jobInfoCount = recorder.getValue().getJobInfoCount();\n+      if (i / maxInvocationHistory == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1NTU1Ng==", "bodyText": "There are really only two cases to test, maxRunningJobs <= maxInvocationHistory and maxRunningJobs > maxInvocationHistory. The randomness is unnecessary IMO.", "url": "https://github.com/apache/beam/pull/10580#discussion_r367055556", "createdAt": "2020-01-15T19:10:35Z", "author": {"login": "ibzib"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/jobsubmission/InMemoryJobServiceTest.java", "diffHunk": "@@ -186,7 +193,59 @@ public void testJobSubmissionUsesJobInvokerAndIsSuccess() throws Exception {\n     verify(invocation, times(1)).start();\n   }\n \n+  @Test\n+  public void testInvocationCleanup() {\n+    final JobApi.GetJobsRequest getJobsRequest = JobApi.GetJobsRequest.newBuilder().build();\n+\n+    final int maxRunningJobs = maxInvocationHistory + new Random().nextInt(50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1NjMzMQ==", "bodyText": "I'd prefer if this whole block was declarative, rather than using iteration and branching.", "url": "https://github.com/apache/beam/pull/10580#discussion_r367056331", "createdAt": "2020-01-15T19:12:11Z", "author": {"login": "ibzib"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/jobsubmission/InMemoryJobServiceTest.java", "diffHunk": "@@ -186,7 +193,59 @@ public void testJobSubmissionUsesJobInvokerAndIsSuccess() throws Exception {\n     verify(invocation, times(1)).start();\n   }\n \n+  @Test\n+  public void testInvocationCleanup() {\n+    final JobApi.GetJobsRequest getJobsRequest = JobApi.GetJobsRequest.newBuilder().build();\n+\n+    final int maxRunningJobs = maxInvocationHistory + new Random().nextInt(50);\n+    // Store state listeners to be able to complete the invocations\n+    final List<Consumer<JobApi.JobStateEvent>> stateListeners = new ArrayList<>(maxRunningJobs);\n+\n+    for (int i = 0; i < maxRunningJobs; i++) {\n+      when(invocation.getId()).thenReturn(String.valueOf(i));\n+      prepareAndRunJob();\n+\n+      // Retrieve the state listener for this invocation\n+      ArgumentCaptor<Consumer<JobApi.JobStateEvent>> stateListener =\n+          ArgumentCaptor.forClass(Consumer.class);\n+      verify(invocation, times(i + 1)).addStateListener(stateListener.capture());\n+      stateListeners.add(stateListener.getValue());\n+\n+      // Retrieve current list of jobs\n+      RecordingObserver<JobApi.GetJobsResponse> recorder = new RecordingObserver<>();\n+      service.getJobs(getJobsRequest, recorder);\n+      assertThat(recorder.isSuccessful(), is(true));\n+\n+      // All running invocations must be available and never be discarded\n+      assertThat(recorder.getValue().getJobInfoCount(), is(i + 1));\n+    }\n+\n+    // Complete the invocations one by one and check invocation history\n+    JobApi.JobStateEvent terminalEvent =\n+        JobApi.JobStateEvent.newBuilder().setState(JobApi.JobState.Enum.DONE).build();\n+\n+    for (int i = 0; i < maxRunningJobs; i++) {\n+      // finish invocation\n+      stateListeners.get(i).accept(terminalEvent);\n+\n+      RecordingObserver<JobApi.GetJobsResponse> recorder = new RecordingObserver<>();\n+      service.getJobs(getJobsRequest, recorder);\n+\n+      // All running invocations must never be discarded but we keep a maximum number of completed\n+      // invocations\n+      int jobInfoCount = recorder.getValue().getJobInfoCount();\n+      if (i / maxInvocationHistory == 0) {\n+        // Less than maxInvocationHistory invocations have finished\n+        assertThat(jobInfoCount, is(maxRunningJobs));\n+      } else {\n+        // We must start to discard completed invocations to not exceed maxInvocationHistory\n+        assertThat(jobInfoCount, is(maxInvocationHistory + maxRunningJobs - i - 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac"}, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/7ada94bea6d1b8ee4c4b0a9f88f4c4e991eaaaac", "committedDate": "2020-01-15T11:17:19Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "63c0b7bac699e83f63625cbed652ec304ab4a357", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/63c0b7bac699e83f63625cbed652ec304ab4a357", "committedDate": "2020-01-16T13:23:39Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072dd4bfcd3074f57a28a0a05f3a6813dd2104a6", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/072dd4bfcd3074f57a28a0a05f3a6813dd2104a6", "committedDate": "2020-01-16T13:26:08Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63c0b7bac699e83f63625cbed652ec304ab4a357", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/63c0b7bac699e83f63625cbed652ec304ab4a357", "committedDate": "2020-01-16T13:23:39Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}, "afterCommit": {"oid": "072dd4bfcd3074f57a28a0a05f3a6813dd2104a6", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/072dd4bfcd3074f57a28a0a05f3a6813dd2104a6", "committedDate": "2020-01-16T13:26:08Z", "message": "[BEAM-9116] Limit the number of past invocations stored in JobService\n\nThe InMemoryJobService stores an unbounded number of past job invocations. When\nthis job server is long-running this can cause memory issues, as seen with our\ntest setup for running Python tests.\n\nThis limits the number of past job invocations via a flag in the job server with\na sensible default."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDI3NDk0", "url": "https://github.com/apache/beam/pull/10580#pullrequestreview-344027494", "createdAt": "2020-01-16T16:04:41Z", "commit": {"oid": "072dd4bfcd3074f57a28a0a05f3a6813dd2104a6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3794, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}