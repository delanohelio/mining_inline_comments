{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTUxNTgx", "number": 11955, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo0MjoyNlrOEEF6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDowNDowNFrOEEGKaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI2NTY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo0MjoyNlrOGhgDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDowODoxNlrOGhghXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTQzOA==", "bodyText": "nit: could you change this to withAllowMissingFields?\nAlso please add a docstring", "url": "https://github.com/apache/beam/pull/11955#discussion_r437781438", "createdAt": "2020-06-09T23:42:26Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4OTAyMw==", "bodyText": "We might want to make this an enum so in the future there could be a third mode where nulls must be encoded with a missing field, and having a null field value would be considered an error. The mode you've added here is a permissive middle ground where we allow either one.", "url": "https://github.com/apache/beam/pull/11955#discussion_r437789023", "createdAt": "2020-06-10T00:08:16Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTQzOA=="}, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI4NTYyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MjoyM1rOGhgPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1ODo1NFrOGhgW1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDQxMg==", "bodyText": "Similar comment here, withIgnoreNullsOnWrite and add a docstring. (I think checkstyle will complain without the docstring anyway).", "url": "https://github.com/apache/beam/pull/11955#discussion_r437784412", "createdAt": "2020-06-09T23:52:23Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -362,6 +382,11 @@ private RowJsonSerializer(Schema schema) {\n       super(Row.class);\n       this.schema = schema;\n     }\n+  \n+    public RowJsonSerializer ignoreNullsOnWrite(Boolean ignoreNullsOnWrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NjMyNw==", "bodyText": "I might call it \"DropNullsOnWrite\" instead of ignore, but I don't feel strongly about it", "url": "https://github.com/apache/beam/pull/11955#discussion_r437786327", "createdAt": "2020-06-09T23:58:54Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -362,6 +382,11 @@ private RowJsonSerializer(Schema schema) {\n       super(Row.class);\n       this.schema = schema;\n     }\n+  \n+    public RowJsonSerializer ignoreNullsOnWrite(Boolean ignoreNullsOnWrite) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDQxMg=="}, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI5Mjg2OnYy", "diffSide": "LEFT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1NTo1N1rOGhgTlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0MDo0NlrOGj-NBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw==", "bodyText": "I think you could just check this.allowMissingFields here rather than passing it into all the FieldValue instances, no?", "url": "https://github.com/apache/beam/pull/11955#discussion_r437785493", "createdAt": "2020-06-09T23:55:57Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n+      this.allowMissingFields = allowMissing;\n+      return this;\n+  }\n+\n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n         throws IOException {\n \n       // Parse and convert the root object to Row as if it's a nested field with name 'root'\n       return (Row)\n           extractJsonNodeValue(\n-              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree()));\n+              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree(), allowMissingFields));\n     }\n \n+  \n+\n     private static Object extractJsonNodeValue(FieldValue fieldValue) {\n-      if (!fieldValue.isJsonValuePresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNDcwMA==", "bodyText": "I initially thought about this, then changed to putting it into the FieldValue because extractJsonNodeValue was static. Now that you mention it, I believe it is probably neater to just check this.allowMissing fields and change the method to non-static.", "url": "https://github.com/apache/beam/pull/11955#discussion_r437814700", "createdAt": "2020-06-10T01:48:58Z", "author": {"login": "reubenvanammers"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n+      this.allowMissingFields = allowMissing;\n+      return this;\n+  }\n+\n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n         throws IOException {\n \n       // Parse and convert the root object to Row as if it's a nested field with name 'root'\n       return (Row)\n           extractJsonNodeValue(\n-              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree()));\n+              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree(), allowMissingFields));\n     }\n \n+  \n+\n     private static Object extractJsonNodeValue(FieldValue fieldValue) {\n-      if (!fieldValue.isJsonValuePresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw=="}, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MjQ4NQ==", "bodyText": "Ah yeah I didn't notice it was static. I think making it non-static is the right call, thanks!", "url": "https://github.com/apache/beam/pull/11955#discussion_r440372485", "createdAt": "2020-06-15T18:40:46Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n+      this.allowMissingFields = allowMissing;\n+      return this;\n+  }\n+\n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n         throws IOException {\n \n       // Parse and convert the root object to Row as if it's a nested field with name 'root'\n       return (Row)\n           extractJsonNodeValue(\n-              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree()));\n+              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree(), allowMissingFields));\n     }\n \n+  \n+\n     private static Object extractJsonNodeValue(FieldValue fieldValue) {\n-      if (!fieldValue.isJsonValuePresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw=="}, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzMwNzI5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDowNDowNFrOGhgcmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDowNDowNFrOGhgcmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NzgwMA==", "bodyText": "This should also check field.getType().getNullable() like the other conditional. If we get a null for a non-nullable field we should fail loudly rather than silently dropping it.", "url": "https://github.com/apache/beam/pull/11955#discussion_r437787800", "createdAt": "2020-06-10T00:04:04Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -375,6 +400,9 @@ private void writeRow(Row row, Schema schema, JsonGenerator gen) throws IOExcept\n       for (int i = 0; i < schema.getFieldCount(); ++i) {\n         Field field = schema.getField(i);\n         Object value = row.getValue(i);\n+        if (ignoreNullsOnWrite && value == null){\n+          continue;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3647, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}