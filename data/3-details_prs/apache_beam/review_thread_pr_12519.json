{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzE3MTU5", "number": 12519, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNDo1N1rOEW9FfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNzoyMlrOEXY0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTA0OTU3OnYy", "diffSide": "LEFT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/AvroIOTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNDo1N1rOG-e2jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNDo1N1rOG-e2jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MDM4Mw==", "bodyText": "This is effectively a duplicate of AvroIOTest$SimpleTests.testReadDisplayData and doesn't need to a be a validates runner test since it doesn't run a pipeline.", "url": "https://github.com/apache/beam/pull/12519#discussion_r468170383", "createdAt": "2020-08-10T20:34:57Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/AvroIOTest.java", "diffHunk": "@@ -1494,26 +1488,5 @@ public void testAvroSinkShardedWrite() throws Exception {\n     }\n     // TODO: for Write only, test withSuffix,\n     // withShardNameTemplate and withoutSharding.\n-\n-    @Test\n-    @Category(ValidatesRunner.class)\n-    public void testPrimitiveReadDisplayData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341c649e8f5b41d35425e4fa91af98a5e82a5f46"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTA1NzA4OnYy", "diffSide": "LEFT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNzoxNlrOG-e7FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNzoxNlrOG-e7FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MTU0MA==", "bodyText": "(here and below) This was previously throwing the top level exception but DirectRunner wraps ParDo exceptions with PipelineExecutionException but BoundedSource/UnboundedSource used a different code path and hence a different exception handling path.", "url": "https://github.com/apache/beam/pull/12519#discussion_r468171540", "createdAt": "2020-08-10T20:37:16Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "diffHunk": "@@ -209,15 +208,13 @@ public void testWriteTwo() throws Exception {\n   @Test\n   @Category(NeedsRunner.class)\n   public void testReadInvalidRecord() throws Exception {\n-    expectedException.expect(IllegalStateException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341c649e8f5b41d35425e4fa91af98a5e82a5f46"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTA1ODAxOnYy", "diffSide": "LEFT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TextIOReadTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNzozN1rOG-e7zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNzozN1rOG-e7zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MTcyNg==", "bodyText": "Effectively a duplicate of testReadDisplayData just above.", "url": "https://github.com/apache/beam/pull/12519#discussion_r468171726", "createdAt": "2020-08-10T20:37:37Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TextIOReadTest.java", "diffHunk": "@@ -495,24 +487,6 @@ public void testReadDisplayData() {\n       assertThat(displayData, hasDisplayItem(\"compressionType\", BZIP2.toString()));\n     }\n \n-    @Test\n-    @Category(ValidatesRunner.class)\n-    public void testPrimitiveReadDisplayData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341c649e8f5b41d35425e4fa91af98a5e82a5f46"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTUyNDk5OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowNDowOVrOG_JLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzowNzowNVrOG_qjqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2Mzg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * contain any primitive reads.\n          \n          \n            \n               * contain any primitive reads when use_deprecated_read is not specified.", "url": "https://github.com/apache/beam/pull/12519#discussion_r468863898", "createdAt": "2020-08-11T21:04:09Z", "author": {"login": "boyuanzz"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java", "diffHunk": "@@ -630,4 +635,38 @@ public void tearDown() {\n       invoker = null;\n     }\n   }\n+\n+  /**\n+   * Throws an {@link IllegalArgumentException} if the pipeline contains any primitive read\n+   * transforms that have not been expanded to be executed as {@link DoFn splittable DoFns}.\n+   */\n+  public static void validateNoPrimitiveReads(Pipeline pipeline) {\n+    pipeline.traverseTopologically(new ValidateNoPrimitiveReads());\n+  }\n+\n+  /**\n+   * A {@link org.apache.beam.sdk.Pipeline.PipelineVisitor} that ensures that the pipeline does not\n+   * contain any primitive reads.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMDczMA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12519#discussion_r469410730", "createdAt": "2020-08-12T17:07:05Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java", "diffHunk": "@@ -630,4 +635,38 @@ public void tearDown() {\n       invoker = null;\n     }\n   }\n+\n+  /**\n+   * Throws an {@link IllegalArgumentException} if the pipeline contains any primitive read\n+   * transforms that have not been expanded to be executed as {@link DoFn splittable DoFns}.\n+   */\n+  public static void validateNoPrimitiveReads(Pipeline pipeline) {\n+    pipeline.traverseTopologically(new ValidateNoPrimitiveReads());\n+  }\n+\n+  /**\n+   * A {@link org.apache.beam.sdk.Pipeline.PipelineVisitor} that ensures that the pipeline does not\n+   * contain any primitive reads.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2Mzg5OA=="}, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU0MDU5OnYy", "diffSide": "RIGHT", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowOTozMVrOG_JVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzowODoyOVrOG_qmug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjM1OA==", "bodyText": "Is it possible to make beam_fn_api_use_deprecated_read and use_deprecated_read into one use_deprecated_read since they seem to the same.", "url": "https://github.com/apache/beam/pull/12519#discussion_r468866358", "createdAt": "2020-08-11T21:09:31Z", "author": {"login": "boyuanzz"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java", "diffHunk": "@@ -179,6 +180,11 @@ public DirectPipelineResult run(Pipeline pipeline) {\n \n       DisplayDataValidator.validatePipeline(pipeline);\n       DisplayDataValidator.validateOptions(options);\n+      // TODO(BEAM-10670): Remove the deprecated Read and make the splittable DoFn the only option.\n+      if (!(ExperimentalOptions.hasExperiment(options, \"beam_fn_api_use_deprecated_read\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMTUxNA==", "bodyText": "I wanted to use one that wasn't coupled to beam_fn_api so that users of non portable pipelines wouldn't be confused. I also don't want to impact existing users until we start removing the experiment so I needed to support both.", "url": "https://github.com/apache/beam/pull/12519#discussion_r469411514", "createdAt": "2020-08-12T17:08:29Z", "author": {"login": "lukecwik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java", "diffHunk": "@@ -179,6 +180,11 @@ public DirectPipelineResult run(Pipeline pipeline) {\n \n       DisplayDataValidator.validatePipeline(pipeline);\n       DisplayDataValidator.validateOptions(options);\n+      // TODO(BEAM-10670): Remove the deprecated Read and make the splittable DoFn the only option.\n+      if (!(ExperimentalOptions.hasExperiment(options, \"beam_fn_api_use_deprecated_read\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjM1OA=="}, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU4NjI5OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNDo1OFrOG_Jxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxNDozNlrOG_q0xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MzY3MA==", "bodyText": "Can we add one block to test using use_deprecated_read  ?", "url": "https://github.com/apache/beam/pull/12519#discussion_r468873670", "createdAt": "2020-08-11T21:24:58Z", "author": {"login": "boyuanzz"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java", "diffHunk": "@@ -167,4 +180,55 @@ public void testBoundednessForUnboundedFn() {\n                 \"unbounded to unbounded\", makeUnboundedCollection(pipeline), unboundedFn)\n             .isBounded());\n   }\n+\n+  private static class FakeBoundedSource extends BoundedSource<String> {\n+    @Override\n+    public List<? extends BoundedSource<String>> split(\n+        long desiredBundleSizeBytes, PipelineOptions options) throws Exception {\n+      return Collections.singletonList(this);\n+    }\n+\n+    @Override\n+    public long getEstimatedSizeBytes(PipelineOptions options) throws Exception {\n+      return 0;\n+    }\n+\n+    @Override\n+    public BoundedReader<String> createReader(PipelineOptions options) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Coder<String> getOutputCoder() {\n+      return StringUtf8Coder.of();\n+    }\n+  }\n+\n+  @Test\n+  public void testValidateThatThereAreNoPrimitiveReads() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNTExMA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12519#discussion_r469415110", "createdAt": "2020-08-12T17:14:36Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java", "diffHunk": "@@ -167,4 +180,55 @@ public void testBoundednessForUnboundedFn() {\n                 \"unbounded to unbounded\", makeUnboundedCollection(pipeline), unboundedFn)\n             .isBounded());\n   }\n+\n+  private static class FakeBoundedSource extends BoundedSource<String> {\n+    @Override\n+    public List<? extends BoundedSource<String>> split(\n+        long desiredBundleSizeBytes, PipelineOptions options) throws Exception {\n+      return Collections.singletonList(this);\n+    }\n+\n+    @Override\n+    public long getEstimatedSizeBytes(PipelineOptions options) throws Exception {\n+      return 0;\n+    }\n+\n+    @Override\n+    public BoundedReader<String> createReader(PipelineOptions options) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Coder<String> getOutputCoder() {\n+      return StringUtf8Coder.of();\n+    }\n+  }\n+\n+  @Test\n+  public void testValidateThatThereAreNoPrimitiveReads() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MzY3MA=="}, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU5MzMyOnYy", "diffSide": "LEFT", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNzoyMlrOG_J2OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo0NTowMlrOG_r6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDgwOQ==", "bodyText": "Is it because we have checkDone now?", "url": "https://github.com/apache/beam/pull/12519#discussion_r468874809", "createdAt": "2020-08-11T21:27:22Z", "author": {"login": "boyuanzz"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -211,10 +211,6 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n     KV<RestrictionT, KV<Instant, WatermarkEstimatorStateT>> residual =\n         processContext.getTakenCheckpoint();\n     if (cont.shouldResume()) {\n-      checkState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMzAzMw==", "bodyText": "I added this check back and altered how we were passing forward the self-checkpoing signal from the UnboundedSource through the SDF wrapper instead.\nThe check is valid.", "url": "https://github.com/apache/beam/pull/12519#discussion_r469433033", "createdAt": "2020-08-12T17:45:02Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -211,10 +211,6 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n     KV<RestrictionT, KV<Instant, WatermarkEstimatorStateT>> residual =\n         processContext.getTakenCheckpoint();\n     if (cont.shouldResume()) {\n-      checkState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDgwOQ=="}, "originalCommit": {"oid": "e62a7365c91d8158af19a6a92a250a60c7b0dc17"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 623, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}