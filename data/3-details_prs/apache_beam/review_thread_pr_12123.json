{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjQ5MDEw", "number": 12123, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODoyNlrOEJ2TNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowMzo0NVrOEKKv2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzYyMjk0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/metrics/metric_test.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODoyNlrOGqj8yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1NTo1MlrOGrDNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjM3OA==", "bodyText": "Should we add a new test for with_metric instead of replacing the with_name test?", "url": "https://github.com/apache/beam/pull/12123#discussion_r447282378", "createdAt": "2020-06-29T22:08:26Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,7 +161,7 @@ def process(self, element):\n     # Verify user counter.\n     metric_results = (\n         res.metrics().query(\n-            MetricsFilter().with_name('metrics_user_counter_element')))\n+            MetricsFilter().with_metric(SomeDoFn.user_counter_elements)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943b1fbcd5ad3da302e17b872b031415a442de0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTcyNA==", "bodyText": "yes, can you add both to the test, please?", "url": "https://github.com/apache/beam/pull/12123#discussion_r447325724", "createdAt": "2020-06-29T23:57:46Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,7 +161,7 @@ def process(self, element):\n     # Verify user counter.\n     metric_results = (\n         res.metrics().query(\n-            MetricsFilter().with_name('metrics_user_counter_element')))\n+            MetricsFilter().with_metric(SomeDoFn.user_counter_elements)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjM3OA=="}, "originalCommit": {"oid": "943b1fbcd5ad3da302e17b872b031415a442de0a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NDU5Nw==", "bodyText": "Sure. I pulled the old test back.", "url": "https://github.com/apache/beam/pull/12123#discussion_r447794597", "createdAt": "2020-06-30T15:55:52Z", "author": {"login": "rainwoodman"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,7 +161,7 @@ def process(self, element):\n     # Verify user counter.\n     metric_results = (\n         res.metrics().query(\n-            MetricsFilter().with_name('metrics_user_counter_element')))\n+            MetricsFilter().with_metric(SomeDoFn.user_counter_elements)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjM3OA=="}, "originalCommit": {"oid": "943b1fbcd5ad3da302e17b872b031415a442de0a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDk3MzA3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/metrics/metric_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowMzo0NVrOGrDi-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0ODowOVrOGrXnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMDA1Nw==", "bodyText": "Is this the canonical way of fetching a metric result?\nDepending on if inc() is ever triggered, or triggered in different Steps, there can be 0 to many entries in the counters list.", "url": "https://github.com/apache/beam/pull/12123#discussion_r447800057", "createdAt": "2020-06-30T16:03:45Z", "author": {"login": "rainwoodman"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -159,15 +163,26 @@ def process(self, element):\n     res = pipeline.run()\n     res.wait_until_finish()\n \n+    # Verify static counter.\n+    metric_results = (\n+        res.metrics().query(\n+            MetricsFilter().with_metric(SomeDoFn.static_counter_elements)))\n+    outputs_static_counter = metric_results['counters'][0]\n+\n+    self.assertEqual(\n+        outputs_static_counter.key.metric.name,\n+        'metrics_static_counter_element')\n+    self.assertEqual(outputs_static_counter.committed, 8)\n+\n     # Verify user counter.\n     metric_results = (\n         res.metrics().query(\n             MetricsFilter().with_name('metrics_user_counter_element')))\n-    outputs_counter = metric_results['counters'][0]\n+    outputs_user_counter = metric_results['counters'][0]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0f4f05d6a0f2975c564c3723b38dac4eb89c89"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODgyMQ==", "bodyText": "you're right. I would not call this the canonical way. Though tbh this API should be improved to be less JAva-like.\nIn this case, we query it this way only for purposes of the unittest, because we know what to expect.", "url": "https://github.com/apache/beam/pull/12123#discussion_r448128821", "createdAt": "2020-07-01T05:48:09Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -159,15 +163,26 @@ def process(self, element):\n     res = pipeline.run()\n     res.wait_until_finish()\n \n+    # Verify static counter.\n+    metric_results = (\n+        res.metrics().query(\n+            MetricsFilter().with_metric(SomeDoFn.static_counter_elements)))\n+    outputs_static_counter = metric_results['counters'][0]\n+\n+    self.assertEqual(\n+        outputs_static_counter.key.metric.name,\n+        'metrics_static_counter_element')\n+    self.assertEqual(outputs_static_counter.committed, 8)\n+\n     # Verify user counter.\n     metric_results = (\n         res.metrics().query(\n             MetricsFilter().with_name('metrics_user_counter_element')))\n-    outputs_counter = metric_results['counters'][0]\n+    outputs_user_counter = metric_results['counters'][0]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMDA1Nw=="}, "originalCommit": {"oid": "ac0f4f05d6a0f2975c564c3723b38dac4eb89c89"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3379, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}