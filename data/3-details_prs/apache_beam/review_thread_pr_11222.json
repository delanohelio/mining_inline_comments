{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzM2Mjk2", "number": 11222, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo1OTowMVrODrbhbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0NTo0OFrODrtTfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODY2Mjg2OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo1OTowMVrOF7xgbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo1OTowMVrOF7xgbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyMTQyMQ==", "bodyText": "This was an extra copy of the method that wasn't used anywhere.", "url": "https://github.com/apache/beam/pull/11222#discussion_r398221421", "createdAt": "2020-03-25T22:59:01Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -882,66 +885,13 @@ def _add_residuals_and_channel_splits_to_deferred_inputs(\n         prev_stops[\n             channel_split.transform_id] = channel_split.last_primary_element\n \n-  @staticmethod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fba0b7ad5a2b7b1b7bc6abd7ac2a07604ad52db8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTU3MjAxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0NDo1M1rOF8NVpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0MzoxMlrOF8VVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA==", "bodyText": "Note this check is already done within length_prefix_coder where it will return the original coder id if its a safe coder so you can always use it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if pcoll.coder_id in self.safe_coders:\n          \n          \n            \n                  channel_coder = self.length_prefixed_coder(channel_coder)\n          \n          \n            \n                channel_coder = self.length_prefixed_coder(channel_coder)", "url": "https://github.com/apache/beam/pull/11222#discussion_r398677414", "createdAt": "2020-03-26T15:44:53Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -347,6 +348,22 @@ def add_or_get_coder_id(self,\n     self.components.coders[new_coder_id].CopyFrom(coder_proto)\n     return new_coder_id\n \n+  def add_data_channel_coder(self, pcoll_id):\n+    pcoll = self.components.pcollections[pcoll_id]\n+    proto = beam_runner_api_pb2.Coder(\n+        spec=beam_runner_api_pb2.FunctionSpec(\n+            urn=common_urns.coders.WINDOWED_VALUE.urn),\n+        component_coder_ids=[\n+            pcoll.coder_id,\n+            self.components.windowing_strategies[\n+                pcoll.windowing_strategy_id].window_coder_id\n+        ])\n+    channel_coder = self.add_or_get_coder_id(\n+        proto, pcoll.coder_id + '_windowed')\n+    if pcoll.coder_id in self.safe_coders:\n+      channel_coder = self.length_prefixed_coder(channel_coder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e29a717edc228fceeec16a36d53635f4baa4c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MDgwNw==", "bodyText": "Here I want to populate the safe_coders mapping for channel_coder iff the value coder has such a mapping.", "url": "https://github.com/apache/beam/pull/11222#discussion_r398790807", "createdAt": "2020-03-26T18:15:59Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -347,6 +348,22 @@ def add_or_get_coder_id(self,\n     self.components.coders[new_coder_id].CopyFrom(coder_proto)\n     return new_coder_id\n \n+  def add_data_channel_coder(self, pcoll_id):\n+    pcoll = self.components.pcollections[pcoll_id]\n+    proto = beam_runner_api_pb2.Coder(\n+        spec=beam_runner_api_pb2.FunctionSpec(\n+            urn=common_urns.coders.WINDOWED_VALUE.urn),\n+        component_coder_ids=[\n+            pcoll.coder_id,\n+            self.components.windowing_strategies[\n+                pcoll.windowing_strategy_id].window_coder_id\n+        ])\n+    channel_coder = self.add_or_get_coder_id(\n+        proto, pcoll.coder_id + '_windowed')\n+    if pcoll.coder_id in self.safe_coders:\n+      channel_coder = self.length_prefixed_coder(channel_coder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}, "originalCommit": {"oid": "50e29a717edc228fceeec16a36d53635f4baa4c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MzYzMQ==", "bodyText": "lines 398-399 already do this check as part of the length_prefixed_coder method.", "url": "https://github.com/apache/beam/pull/11222#discussion_r398793631", "createdAt": "2020-03-26T18:20:36Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -347,6 +348,22 @@ def add_or_get_coder_id(self,\n     self.components.coders[new_coder_id].CopyFrom(coder_proto)\n     return new_coder_id\n \n+  def add_data_channel_coder(self, pcoll_id):\n+    pcoll = self.components.pcollections[pcoll_id]\n+    proto = beam_runner_api_pb2.Coder(\n+        spec=beam_runner_api_pb2.FunctionSpec(\n+            urn=common_urns.coders.WINDOWED_VALUE.urn),\n+        component_coder_ids=[\n+            pcoll.coder_id,\n+            self.components.windowing_strategies[\n+                pcoll.windowing_strategy_id].window_coder_id\n+        ])\n+    channel_coder = self.add_or_get_coder_id(\n+        proto, pcoll.coder_id + '_windowed')\n+    if pcoll.coder_id in self.safe_coders:\n+      channel_coder = self.length_prefixed_coder(channel_coder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}, "originalCommit": {"oid": "50e29a717edc228fceeec16a36d53635f4baa4c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNjg1MA==", "bodyText": "I now understand the nuance of your statement.", "url": "https://github.com/apache/beam/pull/11222#discussion_r398806850", "createdAt": "2020-03-26T18:40:41Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -347,6 +348,22 @@ def add_or_get_coder_id(self,\n     self.components.coders[new_coder_id].CopyFrom(coder_proto)\n     return new_coder_id\n \n+  def add_data_channel_coder(self, pcoll_id):\n+    pcoll = self.components.pcollections[pcoll_id]\n+    proto = beam_runner_api_pb2.Coder(\n+        spec=beam_runner_api_pb2.FunctionSpec(\n+            urn=common_urns.coders.WINDOWED_VALUE.urn),\n+        component_coder_ids=[\n+            pcoll.coder_id,\n+            self.components.windowing_strategies[\n+                pcoll.windowing_strategy_id].window_coder_id\n+        ])\n+    channel_coder = self.add_or_get_coder_id(\n+        proto, pcoll.coder_id + '_windowed')\n+    if pcoll.coder_id in self.safe_coders:\n+      channel_coder = self.length_prefixed_coder(channel_coder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}, "originalCommit": {"oid": "50e29a717edc228fceeec16a36d53635f4baa4c1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODM4OQ==", "bodyText": "Yes, but here pcoll.coder_id != channel_coder.", "url": "https://github.com/apache/beam/pull/11222#discussion_r398808389", "createdAt": "2020-03-26T18:43:12Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -347,6 +348,22 @@ def add_or_get_coder_id(self,\n     self.components.coders[new_coder_id].CopyFrom(coder_proto)\n     return new_coder_id\n \n+  def add_data_channel_coder(self, pcoll_id):\n+    pcoll = self.components.pcollections[pcoll_id]\n+    proto = beam_runner_api_pb2.Coder(\n+        spec=beam_runner_api_pb2.FunctionSpec(\n+            urn=common_urns.coders.WINDOWED_VALUE.urn),\n+        component_coder_ids=[\n+            pcoll.coder_id,\n+            self.components.windowing_strategies[\n+                pcoll.windowing_strategy_id].window_coder_id\n+        ])\n+    channel_coder = self.add_or_get_coder_id(\n+        proto, pcoll.coder_id + '_windowed')\n+    if pcoll.coder_id in self.safe_coders:\n+      channel_coder = self.length_prefixed_coder(channel_coder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}, "originalCommit": {"oid": "50e29a717edc228fceeec16a36d53635f4baa4c1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTU3NjI5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0NTo0OFrOF8NYUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoxNDoxOFrOF8UMtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3ODA5OQ==", "bodyText": "If possible try and keep the typing information on methods.", "url": "https://github.com/apache/beam/pull/11222#discussion_r398678099", "createdAt": "2020-03-26T15:45:48Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -426,7 +423,8 @@ def _collect_written_timers_and_add_to_deferred_inputs(\n       pipeline_components,  # type: beam_runner_api_pb2.Components\n       stage,  # type: translations.Stage\n       bundle_context_manager,  # type: execution.BundleContextManager\n-      deferred_inputs  # type: MutableMapping[str, PartitionableBuffer]\n+      deferred_inputs,  # type: MutableMapping[str, PartitionableBuffer]\n+      data_channel_coders,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e29a717edc228fceeec16a36d53635f4baa4c1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4OTgxMg==", "bodyText": "Thanks for calling me out on this. The types themselves aren't very informative as to their meaning, but I added it here and elsewhere.", "url": "https://github.com/apache/beam/pull/11222#discussion_r398789812", "createdAt": "2020-03-26T18:14:18Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -426,7 +423,8 @@ def _collect_written_timers_and_add_to_deferred_inputs(\n       pipeline_components,  # type: beam_runner_api_pb2.Components\n       stage,  # type: translations.Stage\n       bundle_context_manager,  # type: execution.BundleContextManager\n-      deferred_inputs  # type: MutableMapping[str, PartitionableBuffer]\n+      deferred_inputs,  # type: MutableMapping[str, PartitionableBuffer]\n+      data_channel_coders,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3ODA5OQ=="}, "originalCommit": {"oid": "50e29a717edc228fceeec16a36d53635f4baa4c1"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1525, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}