{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDExNTYx", "number": 11128, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MTo0OFrODpMjRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo0MDo0MVrODpkFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTIzODQ0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MTo0OFrOF4OG3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1OTozNFrOF46NSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NTcwOA==", "bodyText": "what is a pipeline ID? Are you sure it's unique? I see elsewhere you're using the id(..) of the objects?", "url": "https://github.com/apache/beam/pull/11128#discussion_r394495708", "createdAt": "2020-03-18T16:51:48Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -153,7 +153,8 @@ def __init__(\n     self._coder = coder\n     self._labels = labels\n     self._is_cache_complete = (\n-        is_cache_complete if is_cache_complete else lambda: True)\n+        is_cache_complete if is_cache_complete else lambda _: True)\n+    self._pipeline_id = labels[-1].split('_')[-1]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e1d6065d824239802f5635b8e4685be7858fbd4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY0ODkwNQ==", "bodyText": "Will it come in as a label?\nthe ID will be unique for the pipeline object itself. I guess we will not be reusing it anywhere?", "url": "https://github.com/apache/beam/pull/11128#discussion_r394648905", "createdAt": "2020-03-18T21:25:55Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -153,7 +153,8 @@ def __init__(\n     self._coder = coder\n     self._labels = labels\n     self._is_cache_complete = (\n-        is_cache_complete if is_cache_complete else lambda: True)\n+        is_cache_complete if is_cache_complete else lambda _: True)\n+    self._pipeline_id = labels[-1].split('_')[-1]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NTcwOA=="}, "originalCommit": {"oid": "3e1d6065d824239802f5635b8e4685be7858fbd4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTUyNA==", "bodyText": "Yeah the pipeline id is just a pointer to the pipeline, which is guaranteed to be unique and constant.", "url": "https://github.com/apache/beam/pull/11128#discussion_r394655524", "createdAt": "2020-03-18T21:40:42Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -153,7 +153,8 @@ def __init__(\n     self._coder = coder\n     self._labels = labels\n     self._is_cache_complete = (\n-        is_cache_complete if is_cache_complete else lambda: True)\n+        is_cache_complete if is_cache_complete else lambda _: True)\n+    self._pipeline_id = labels[-1].split('_')[-1]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NTcwOA=="}, "originalCommit": {"oid": "3e1d6065d824239802f5635b8e4685be7858fbd4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjgxMg==", "bodyText": "This looks kinda like a hack, and if we change the format of the label, this will break.\nCan we at least put the code that encodes and decodes labels in one place, perhaps in a util module, and have this line call the decode function?", "url": "https://github.com/apache/beam/pull/11128#discussion_r394662812", "createdAt": "2020-03-18T21:57:17Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -153,7 +153,8 @@ def __init__(\n     self._coder = coder\n     self._labels = labels\n     self._is_cache_complete = (\n-        is_cache_complete if is_cache_complete else lambda: True)\n+        is_cache_complete if is_cache_complete else lambda _: True)\n+    self._pipeline_id = labels[-1].split('_')[-1]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NTcwOA=="}, "originalCommit": {"oid": "3e1d6065d824239802f5635b8e4685be7858fbd4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxODI0OQ==", "bodyText": "Done, I added a CacheKey class that can handle the encoding/decoding", "url": "https://github.com/apache/beam/pull/11128#discussion_r395218249", "createdAt": "2020-03-19T17:59:34Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -153,7 +153,8 @@ def __init__(\n     self._coder = coder\n     self._labels = labels\n     self._is_cache_complete = (\n-        is_cache_complete if is_cache_complete else lambda: True)\n+        is_cache_complete if is_cache_complete else lambda _: True)\n+    self._pipeline_id = labels[-1].split('_')[-1]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NTcwOA=="}, "originalCommit": {"oid": "3e1d6065d824239802f5635b8e4685be7858fbd4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTA5NTEzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo0MDo0MVrOF40ZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTowMzo0NFrOF5AUgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMjk3MA==", "bodyText": "Check length of the list?", "url": "https://github.com/apache/beam/pull/11128#discussion_r395122970", "createdAt": "2020-03-19T15:40:41Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -63,6 +63,24 @@ def __hash__(self):\n         self.producer_version))\n \n \n+# TODO: turn this into a dataclass object when we finally get off of Python2.\n+class CacheKey:\n+  def __init__(self, var, version, producer_version, pipeline_id):\n+    self.var = var\n+    self.version = version\n+    self.producer_version = producer_version\n+    self.pipeline_id = pipeline_id\n+\n+  @staticmethod\n+  def from_str(r):\n+    split = r.split('|')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a7e19cf7159841d4388bc9749c2083c0ee5c9b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxODQwMw==", "bodyText": "I think probably a better way is to do the following:\nvar, version, producer_version, pipeline_id = r.split('|')\nreturn CacheKey(var, version, producer_version, pipeline_id)", "url": "https://github.com/apache/beam/pull/11128#discussion_r395318403", "createdAt": "2020-03-19T21:03:44Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -63,6 +63,24 @@ def __hash__(self):\n         self.producer_version))\n \n \n+# TODO: turn this into a dataclass object when we finally get off of Python2.\n+class CacheKey:\n+  def __init__(self, var, version, producer_version, pipeline_id):\n+    self.var = var\n+    self.version = version\n+    self.producer_version = producer_version\n+    self.pipeline_id = pipeline_id\n+\n+  @staticmethod\n+  def from_str(r):\n+    split = r.split('|')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMjk3MA=="}, "originalCommit": {"oid": "54a7e19cf7159841d4388bc9749c2083c0ee5c9b"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1645, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}