{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTYwNTkz", "number": 12102, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzowMDowOFrOEJH7bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDo0Njo1MFrOEJKNSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDAyNTQwOnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzowMDowOFrOGpf-TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzowOToxOVrOGpgQLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2ODY1Mg==", "bodyText": "What about something like this?\nBy default, InfluxDB treats all values as floats. We need to add 'i' suffix to interpret the value as an integer.", "url": "https://github.com/apache/beam/pull/12102#discussion_r446168652", "createdAt": "2020-06-26T13:00:08Z", "author": {"login": "kamilwu"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -255,7 +255,9 @@ private static String produceMeasurement(\n     schemaResults.put(\"timestamp\", timestamp);\n     schemaResults.put(\"runner\", runner);\n     schemaResults.put(\"measurement\", measurement);\n-    schemaResults.put(\"runtimeMs\", runtimeMs);\n+    schemaResults.put(\n+        \"runtimeMs\",\n+        runtimeMs + \"i\"); // we need to add 'i' suffix since influx default type is float", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7075133afa152ff0d1609e77a4dd94784ae799f5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3MzIyOA==", "bodyText": "Fine for me, updated", "url": "https://github.com/apache/beam/pull/12102#discussion_r446173228", "createdAt": "2020-06-26T13:09:19Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -255,7 +255,9 @@ private static String produceMeasurement(\n     schemaResults.put(\"timestamp\", timestamp);\n     schemaResults.put(\"runner\", runner);\n     schemaResults.put(\"measurement\", measurement);\n-    schemaResults.put(\"runtimeMs\", runtimeMs);\n+    schemaResults.put(\n+        \"runtimeMs\",\n+        runtimeMs + \"i\"); // we need to add 'i' suffix since influx default type is float", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2ODY1Mg=="}, "originalCommit": {"oid": "7075133afa152ff0d1609e77a4dd94784ae799f5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDA1ODE1OnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoxMDo0MVrOGpgS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDo0NTo1NlrOGpjp6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3Mzk0MA==", "bodyText": "If you want to make it even more secure and resilient, you can check what's the value of Content-Type header. For JSON, it must be application/json. Some HTTP libraries has convenient methods for doing that.", "url": "https://github.com/apache/beam/pull/12102#discussion_r446173940", "createdAt": "2020-06-26T13:10:41Z", "author": {"login": "kamilwu"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -146,16 +157,29 @@ private static HttpPost providePOSTRequest(final InfluxDBSettings settings) {\n   private static void executeWithVerification(\n       final HttpPost postRequest, final HttpClientBuilder builder) throws IOException {\n     try (final CloseableHttpResponse response = builder.build().execute(postRequest)) {\n-      is2xx(response.getStatusLine().getStatusCode());\n+      is2xx(response);\n     }\n   }\n \n-  private static void is2xx(final int code) throws IOException {\n+  private static void is2xx(final HttpResponse response) throws IOException {\n+    final int code = response.getStatusLine().getStatusCode();\n     if (code < 200 || code >= 300) {\n-      throw new IOException(\"Response code: \" + code);\n+      throw new IOException(\n+          \"Response code: \" + code + \". Reason: \" + getErrorMessage(response.getEntity()));\n     }\n   }\n \n+  private static String getErrorMessage(final HttpEntity entity) throws IOException {\n+    final Header encodingHeader = entity.getContentEncoding();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa50b2efe0ed8fcdce55d54c8a362c8d5b3533d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NjIxOA==", "bodyText": "Yes, that's why I check encoding type to be prepared for case when influx would stop sending us JSON (and start something else)\nfinal Charset encoding =\n        encodingHeader == null\n            ? StandardCharsets.UTF_8\n            : Charsets.toCharset(encodingHeader.getValue());", "url": "https://github.com/apache/beam/pull/12102#discussion_r446176218", "createdAt": "2020-06-26T13:15:03Z", "author": {"login": "pawelpasterz"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -146,16 +157,29 @@ private static HttpPost providePOSTRequest(final InfluxDBSettings settings) {\n   private static void executeWithVerification(\n       final HttpPost postRequest, final HttpClientBuilder builder) throws IOException {\n     try (final CloseableHttpResponse response = builder.build().execute(postRequest)) {\n-      is2xx(response.getStatusLine().getStatusCode());\n+      is2xx(response);\n     }\n   }\n \n-  private static void is2xx(final int code) throws IOException {\n+  private static void is2xx(final HttpResponse response) throws IOException {\n+    final int code = response.getStatusLine().getStatusCode();\n     if (code < 200 || code >= 300) {\n-      throw new IOException(\"Response code: \" + code);\n+      throw new IOException(\n+          \"Response code: \" + code + \". Reason: \" + getErrorMessage(response.getEntity()));\n     }\n   }\n \n+  private static String getErrorMessage(final HttpEntity entity) throws IOException {\n+    final Header encodingHeader = entity.getContentEncoding();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3Mzk0MA=="}, "originalCommit": {"oid": "faa50b2efe0ed8fcdce55d54c8a362c8d5b3533d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyODk2OA==", "bodyText": "Isn't it possible that you get UTF-8-encoded data, but not necessarily JSON?", "url": "https://github.com/apache/beam/pull/12102#discussion_r446228968", "createdAt": "2020-06-26T14:45:56Z", "author": {"login": "kamilwu"}, "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -146,16 +157,29 @@ private static HttpPost providePOSTRequest(final InfluxDBSettings settings) {\n   private static void executeWithVerification(\n       final HttpPost postRequest, final HttpClientBuilder builder) throws IOException {\n     try (final CloseableHttpResponse response = builder.build().execute(postRequest)) {\n-      is2xx(response.getStatusLine().getStatusCode());\n+      is2xx(response);\n     }\n   }\n \n-  private static void is2xx(final int code) throws IOException {\n+  private static void is2xx(final HttpResponse response) throws IOException {\n+    final int code = response.getStatusLine().getStatusCode();\n     if (code < 200 || code >= 300) {\n-      throw new IOException(\"Response code: \" + code);\n+      throw new IOException(\n+          \"Response code: \" + code + \". Reason: \" + getErrorMessage(response.getEntity()));\n     }\n   }\n \n+  private static String getErrorMessage(final HttpEntity entity) throws IOException {\n+    final Header encodingHeader = entity.getContentEncoding();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3Mzk0MA=="}, "originalCommit": {"oid": "faa50b2efe0ed8fcdce55d54c8a362c8d5b3533d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDM5ODgwOnYy", "diffSide": "RIGHT", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDo0Njo1MFrOGpjr1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDo0Njo1MFrOGpjr1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIyOTQ2Mg==", "bodyText": "We should do the same for numResults. Now the schema that is being created is:\nfieldKey   fieldType\n--------   ---------\nnumResults float\nruntimeMs  integer\n\nAnd we need numResults as an integer too. I'm sorry I didn't notice that earlier.", "url": "https://github.com/apache/beam/pull/12102#discussion_r446229462", "createdAt": "2020-06-26T14:46:50Z", "author": {"login": "kamilwu"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -255,7 +255,11 @@ private static String produceMeasurement(\n     schemaResults.put(\"timestamp\", timestamp);\n     schemaResults.put(\"runner\", runner);\n     schemaResults.put(\"measurement\", measurement);\n-    schemaResults.put(\"runtimeMs\", runtimeMs);\n+    schemaResults.put(\n+        \"runtimeMs\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa50b2efe0ed8fcdce55d54c8a362c8d5b3533d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3349, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}