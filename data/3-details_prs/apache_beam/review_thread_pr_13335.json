{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNzk2NTI5", "number": 13335, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOToyNDozOVrOE5pBMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzo0MzowNFrOE8U7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODc2MzM5OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOToyNDozOVrOH0N-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo1NTo1OVrOH1HjFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxNjg3Ng==", "bodyText": "LGTM, only one question:\nDoes the UserPipelineTracker clean up the user pipeline and their derived pipelines when a user pipeline is out of scope (e.g., deleted or garbage collected)? Or are the pipelines tracked never get garbage collected at all?\nIs there any side effect when the user uses an outdated pipeline ref or a new pipeline ref (from re-executions) that results in the same __hash__ or __eq__/in to be True? Will that give back a wrong user_pipeline when the tracker thinks the pipeline is tracked while it's not?", "url": "https://github.com/apache/beam/pull/13335#discussion_r524516876", "createdAt": "2020-11-16T19:24:39Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -163,7 +165,8 @@ def __init__(self):\n     # the gRPC server serves.\n     self._test_stream_service_controllers = {}\n     self._cached_source_signature = {}\n-    self._tracked_user_pipelines = set()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de80057c23304d1b9e4d7be01916d8519d5466c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ2MDI0Nw==", "bodyText": "Ack, added eviction capabilities. The __hash__ value is based on the id of the object. If the user still has a ref to the pipeline then the hash will still be unique. Your latter paragraph probably wouldn't occur in that case.", "url": "https://github.com/apache/beam/pull/13335#discussion_r525460247", "createdAt": "2020-11-17T19:55:59Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -163,7 +165,8 @@ def __init__(self):\n     # the gRPC server serves.\n     self._test_stream_service_controllers = {}\n     self._cached_source_signature = {}\n-    self._tracked_user_pipelines = set()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxNjg3Ng=="}, "originalCommit": {"oid": "4de80057c23304d1b9e4d7be01916d8519d5466c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjkyMDQyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pipeline.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzo0MDozNVrOH4YfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoyMToxN1rOH5TwHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4MzUyOQ==", "bodyText": "nit: relies -> relies on", "url": "https://github.com/apache/beam/pull/13335#discussion_r528883529", "createdAt": "2020-11-23T17:40:35Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -504,10 +504,12 @@ def run(self, test_runner_api='AUTO'):\n       if test_runner_api == 'AUTO':\n         # Don't pay the cost of a round-trip if we're going to be going through\n         # the FnApi anyway...\n+        # The InteractiveRunner relies a constant pipeline reference, skip it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1NDQ5NA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/13335#discussion_r529854494", "createdAt": "2020-11-24T20:21:17Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -504,10 +504,12 @@ def run(self, test_runner_api='AUTO'):\n       if test_runner_api == 'AUTO':\n         # Don't pay the cost of a round-trip if we're going to be going through\n         # the FnApi anyway...\n+        # The InteractiveRunner relies a constant pipeline reference, skip it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4MzUyOQ=="}, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjkyMzY1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pipeline.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzo0MToyOVrOH4YhYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1NzozMVrOH5a9sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NDA2NQ==", "bodyText": "Is there a better way for the runner to indicate it relies on a constant pipeline reference?", "url": "https://github.com/apache/beam/pull/13335#discussion_r528884065", "createdAt": "2020-11-23T17:41:29Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -504,10 +504,12 @@ def run(self, test_runner_api='AUTO'):\n       if test_runner_api == 'AUTO':\n         # Don't pay the cost of a round-trip if we're going to be going through\n         # the FnApi anyway...\n+        # The InteractiveRunner relies a constant pipeline reference, skip it.\n         test_runner_api = (\n             not self.runner.is_fnapi_compatible() and (\n                 self.runner.__class__.__name__ != 'SwitchingDirectRunner' or\n-                self._options.view_as(StandardOptions).streaming))\n+                self._options.view_as(StandardOptions).streaming) and\n+            self.runner.__class__.__name__ != 'InteractiveRunner')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1NTQ1OA==", "bodyText": "@TheNeuralBit what do you think? I was following the precedence of the SwitchingDirectRunner. The InteractiveRunner already does this check in its code in multiple places, so there wouldn't be a safety regression if this line is added.", "url": "https://github.com/apache/beam/pull/13335#discussion_r529855458", "createdAt": "2020-11-24T20:23:06Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -504,10 +504,12 @@ def run(self, test_runner_api='AUTO'):\n       if test_runner_api == 'AUTO':\n         # Don't pay the cost of a round-trip if we're going to be going through\n         # the FnApi anyway...\n+        # The InteractiveRunner relies a constant pipeline reference, skip it.\n         test_runner_api = (\n             not self.runner.is_fnapi_compatible() and (\n                 self.runner.__class__.__name__ != 'SwitchingDirectRunner' or\n-                self._options.view_as(StandardOptions).streaming))\n+                self._options.view_as(StandardOptions).streaming) and\n+            self.runner.__class__.__name__ != 'InteractiveRunner')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NDA2NQ=="}, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4OTIxNw==", "bodyText": "The SwitchingDirectRunner case is a little different since its checking for a specific case where that runner will use the Fn API.\nIf there's no way to avoid the need for a constant pipeline reference I think this is ok (I think we're getting rid of this roundtrip soon anyway), but let's break this into separate booleans for clarity, something like:\nis_fnapi_compatible = self.runner.is_fnapi_compatible() or (\n                # DirectRunner uses the Fn API for batch only\n                self.runner.__class__.__name__ == 'SwitchingDirectRunner' and\n                not self._options.view_as(StandardOptions).streaming)\n\ntest_runner_api = (not is_fn_api_compatible or \n                   self.runner.__class__.__name__ == 'InteractiveRunner')", "url": "https://github.com/apache/beam/pull/13335#discussion_r529889217", "createdAt": "2020-11-24T21:28:16Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -504,10 +504,12 @@ def run(self, test_runner_api='AUTO'):\n       if test_runner_api == 'AUTO':\n         # Don't pay the cost of a round-trip if we're going to be going through\n         # the FnApi anyway...\n+        # The InteractiveRunner relies a constant pipeline reference, skip it.\n         test_runner_api = (\n             not self.runner.is_fnapi_compatible() and (\n                 self.runner.__class__.__name__ != 'SwitchingDirectRunner' or\n-                self._options.view_as(StandardOptions).streaming))\n+                self._options.view_as(StandardOptions).streaming) and\n+            self.runner.__class__.__name__ != 'InteractiveRunner')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NDA2NQ=="}, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MjY1Ng==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13335#discussion_r529972656", "createdAt": "2020-11-24T22:57:31Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -504,10 +504,12 @@ def run(self, test_runner_api='AUTO'):\n       if test_runner_api == 'AUTO':\n         # Don't pay the cost of a round-trip if we're going to be going through\n         # the FnApi anyway...\n+        # The InteractiveRunner relies a constant pipeline reference, skip it.\n         test_runner_api = (\n             not self.runner.is_fnapi_compatible() and (\n                 self.runner.__class__.__name__ != 'SwitchingDirectRunner' or\n-                self._options.view_as(StandardOptions).streaming))\n+                self._options.view_as(StandardOptions).streaming) and\n+            self.runner.__class__.__name__ != 'InteractiveRunner')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NDA2NQ=="}, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjkyOTQ5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzo0MzowNFrOH4YlCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDoyMTozMlrOH5Twqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NTAwMg==", "bodyText": "Should we take this opportunity to update the name according to the new convention? e.g. \"background caching job\" -> \"background source recording job\". It's fine if you plan to do this in a later PR instead.", "url": "https://github.com/apache/beam/pull/13335#discussion_r528885002", "createdAt": "2020-11-23T17:43:04Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -121,7 +121,8 @@ def state(self):\n       return self._pipeline_result.state\n \n \n-def attempt_to_run_background_caching_job(runner, user_pipeline, options=None):\n+def attempt_to_run_background_caching_job(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1NDYzNA==", "bodyText": "I can do a follow-up PR", "url": "https://github.com/apache/beam/pull/13335#discussion_r529854634", "createdAt": "2020-11-24T20:21:32Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -121,7 +121,8 @@ def state(self):\n       return self._pipeline_result.state\n \n \n-def attempt_to_run_background_caching_job(runner, user_pipeline, options=None):\n+def attempt_to_run_background_caching_job(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4NTAwMg=="}, "originalCommit": {"oid": "4821b16ade2fb4411eda0cd81bf20206c4620902"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2798, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}