{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NTQyNzk1", "number": 11119, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowMjoxNFrODojLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowNTozMVrODojNAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ1OTIyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowMjoxNFrOF3KpCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozMToxN1rOF3xmuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MDM0NA==", "bodyText": "nit: drop the variable, it doesn't add value.", "url": "https://github.com/apache/beam/pull/11119#discussion_r393390344", "createdAt": "2020-03-17T01:02:14Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -84,41 +85,76 @@\n   private static final ImmutableSet<TypeName> SUPPORTED_TYPES =\n       ImmutableSet.of(BYTE, INT16, INT32, INT64, FLOAT, DOUBLE, BOOLEAN, STRING, DECIMAL);\n \n+  /**\n+   * Throws {@link UnsupportedRowJsonException} if {@code schema} contains an unsupported field\n+   * type.\n+   */\n   public static void verifySchemaSupported(Schema schema) {\n-    schema.getFields().forEach(RowJson::verifyFieldTypeSupported);\n+    ImmutableList<UnsupportedField> unsupportedFields = findUnsupportedFields(schema);\n+    if (!unsupportedFields.isEmpty()) {\n+      throw new UnsupportedRowJsonException(\n+          String.format(\n+              \"Field type%s %s not supported when converting between JSON and Rows. Supported types are: %s\",\n+              unsupportedFields.size() > 1 ? \"s\" : \"\",\n+              unsupportedFields.toString(),\n+              SUPPORTED_TYPES.toString()));\n+    }\n+  }\n+\n+  private static class UnsupportedField {\n+    final String descriptor;\n+    final TypeName typeName;\n+\n+    UnsupportedField(String descriptor, TypeName typeName) {\n+      this.descriptor = descriptor;\n+      this.typeName = typeName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return this.descriptor + \"=\" + this.typeName;\n+    }\n+  }\n+\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Schema schema) {\n+    return schema.getFields().stream()\n+        .flatMap((field) -> findUnsupportedFields(field).stream())\n+        .collect(toImmutableList());\n   }\n \n-  static void verifyFieldTypeSupported(Field field) {\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Field field) {\n     FieldType fieldType = field.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce43f37d478fb16073924879e6ddae631a050b7c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyODczMQ==", "bodyText": "Done! thanks", "url": "https://github.com/apache/beam/pull/11119#discussion_r394028731", "createdAt": "2020-03-17T23:31:17Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -84,41 +85,76 @@\n   private static final ImmutableSet<TypeName> SUPPORTED_TYPES =\n       ImmutableSet.of(BYTE, INT16, INT32, INT64, FLOAT, DOUBLE, BOOLEAN, STRING, DECIMAL);\n \n+  /**\n+   * Throws {@link UnsupportedRowJsonException} if {@code schema} contains an unsupported field\n+   * type.\n+   */\n   public static void verifySchemaSupported(Schema schema) {\n-    schema.getFields().forEach(RowJson::verifyFieldTypeSupported);\n+    ImmutableList<UnsupportedField> unsupportedFields = findUnsupportedFields(schema);\n+    if (!unsupportedFields.isEmpty()) {\n+      throw new UnsupportedRowJsonException(\n+          String.format(\n+              \"Field type%s %s not supported when converting between JSON and Rows. Supported types are: %s\",\n+              unsupportedFields.size() > 1 ? \"s\" : \"\",\n+              unsupportedFields.toString(),\n+              SUPPORTED_TYPES.toString()));\n+    }\n+  }\n+\n+  private static class UnsupportedField {\n+    final String descriptor;\n+    final TypeName typeName;\n+\n+    UnsupportedField(String descriptor, TypeName typeName) {\n+      this.descriptor = descriptor;\n+      this.typeName = typeName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return this.descriptor + \"=\" + this.typeName;\n+    }\n+  }\n+\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Schema schema) {\n+    return schema.getFields().stream()\n+        .flatMap((field) -> findUnsupportedFields(field).stream())\n+        .collect(toImmutableList());\n   }\n \n-  static void verifyFieldTypeSupported(Field field) {\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Field field) {\n     FieldType fieldType = field.getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MDM0NA=="}, "originalCommit": {"oid": "ce43f37d478fb16073924879e6ddae631a050b7c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ2NDAwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowNTozMVrOF3KsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowNTozMVrOF3KsLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTE0OA==", "bodyText": "nit: drop the variable, it doesn't add value.", "url": "https://github.com/apache/beam/pull/11119#discussion_r393391148", "createdAt": "2020-03-17T01:05:31Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -84,41 +85,76 @@\n   private static final ImmutableSet<TypeName> SUPPORTED_TYPES =\n       ImmutableSet.of(BYTE, INT16, INT32, INT64, FLOAT, DOUBLE, BOOLEAN, STRING, DECIMAL);\n \n+  /**\n+   * Throws {@link UnsupportedRowJsonException} if {@code schema} contains an unsupported field\n+   * type.\n+   */\n   public static void verifySchemaSupported(Schema schema) {\n-    schema.getFields().forEach(RowJson::verifyFieldTypeSupported);\n+    ImmutableList<UnsupportedField> unsupportedFields = findUnsupportedFields(schema);\n+    if (!unsupportedFields.isEmpty()) {\n+      throw new UnsupportedRowJsonException(\n+          String.format(\n+              \"Field type%s %s not supported when converting between JSON and Rows. Supported types are: %s\",\n+              unsupportedFields.size() > 1 ? \"s\" : \"\",\n+              unsupportedFields.toString(),\n+              SUPPORTED_TYPES.toString()));\n+    }\n+  }\n+\n+  private static class UnsupportedField {\n+    final String descriptor;\n+    final TypeName typeName;\n+\n+    UnsupportedField(String descriptor, TypeName typeName) {\n+      this.descriptor = descriptor;\n+      this.typeName = typeName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return this.descriptor + \"=\" + this.typeName;\n+    }\n+  }\n+\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Schema schema) {\n+    return schema.getFields().stream()\n+        .flatMap((field) -> findUnsupportedFields(field).stream())\n+        .collect(toImmutableList());\n   }\n \n-  static void verifyFieldTypeSupported(Field field) {\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Field field) {\n     FieldType fieldType = field.getType();\n-    verifyFieldTypeSupported(fieldType);\n+    return findUnsupportedFields(fieldType, field.getName());\n   }\n \n-  static void verifyFieldTypeSupported(FieldType fieldType) {\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(\n+      FieldType fieldType, String fieldName) {\n     TypeName fieldTypeName = fieldType.getTypeName();\n \n     if (fieldTypeName.isCompositeType()) {\n       Schema rowFieldSchema = fieldType.getRowSchema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce43f37d478fb16073924879e6ddae631a050b7c"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1636, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}