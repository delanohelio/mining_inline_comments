{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTgzNjYz", "number": 10659, "title": "[BEAM-9149] Add SQL query parameters to public API and enable positional", "bodyText": "parameters in ZetaSQL.\n\nFor API design, see https://docs.google.com/document/d/1kPG3S6qAIPlhTYPYK_CYwkzBk-i7U6vON5_95tRGk6c/edit?usp=sharing\nAdded a few simple tests to verify that positional parameters work as intended.\n\ncc: @robinyqiu\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-22T17:47:32Z", "url": "https://github.com/apache/beam/pull/10659", "merged": true, "mergeCommit": {"oid": "cf7e1bb4bc3fdb4ed7ec1f22fb3ef0e783fe5761"}, "closed": true, "closedAt": "2020-01-24T01:37:31Z", "author": {"login": "ibzib"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb86akdAFqTM0NjgyMjU4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9TOEEABqjI5NzU2Nzg5NDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODIyNTgx", "url": "https://github.com/apache/beam/pull/10659#pullrequestreview-346822581", "createdAt": "2020-01-22T18:53:54Z", "commit": {"oid": "fc3e891852606b732fbfa5b5c95e7bba936953f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1Mzo1NFrOFgnM_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1Mzo1NFrOFgnM_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTA1NA==", "bodyText": "Does a query allows having both named and positional parameters?", "url": "https://github.com/apache/beam/pull/10659#discussion_r369741054", "createdAt": "2020-01-22T18:53:54Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/QueryPlanner.java", "diffHunk": "@@ -26,8 +26,29 @@\n  */\n public interface QueryPlanner {\n   /** It parses and validate the input query, then convert into a {@link BeamRelNode} tree. */\n-  BeamRelNode convertToBeamRel(String sqlStatement) throws ParseException, SqlConversionException;\n+  BeamRelNode convertToBeamRel(\n+      String sqlStatement, Object queryParameters, QueryParameterMode queryParameterMode)\n+      throws ParseException, SqlConversionException;\n \n   /** Parse input SQL query, and return a {@link SqlNode} as grammar tree. */\n   SqlNode parse(String sqlStatement) throws ParseException;\n+\n+  /**\n+   * Parameters have different usage semantics depending on the parameter mode specified. Note that\n+   * some parameter modes might not be supported by all backends.\n+   */\n+  enum QueryParameterMode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc3e891852606b732fbfa5b5c95e7bba936953f6"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc3e891852606b732fbfa5b5c95e7bba936953f6", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/fc3e891852606b732fbfa5b5c95e7bba936953f6", "committedDate": "2020-01-22T17:33:50Z", "message": "[BEAM-9149] Add SQL query parameters to public API and enable positional\nparameters in ZetaSQL."}, "afterCommit": {"oid": "0842785404570a3b1f6f8de0d19b3a5d3c289161", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/0842785404570a3b1f6f8de0d19b3a5d3c289161", "committedDate": "2020-01-22T18:59:24Z", "message": "[BEAM-9149] Add SQL query parameters to public API and enable positional\nparameters in ZetaSQL."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODQ2NjE1", "url": "https://github.com/apache/beam/pull/10659#pullrequestreview-346846615", "createdAt": "2020-01-22T19:32:02Z", "commit": {"oid": "0842785404570a3b1f6f8de0d19b3a5d3c289161"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozMjowM1rOFgoXeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozNjozNlrOFgofsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MDEyMA==", "bodyText": "My preference would be to have slightly more typed positionalParameters and namedParameters. If you like, you can do it robustly with @AutoOneOf, which would subsume also queryParameterMode.\nhttps://github.com/google/auto/blob/master/value/userguide/howto.md#-make-a-class-where-only-one-of-its-properties-is-ever-set", "url": "https://github.com/apache/beam/pull/10659#discussion_r369760120", "createdAt": "2020-01-22T19:32:03Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -87,6 +88,10 @@\n \n   abstract String queryString();\n \n+  abstract Object queryParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842785404570a3b1f6f8de0d19b3a5d3c289161"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MTUxNQ==", "bodyText": "This is a bit strange to me. Isn't the point of a builder that you only specify some of the args? I recognize that the oddness was pre-existing in this code.", "url": "https://github.com/apache/beam/pull/10659#discussion_r369761515", "createdAt": "2020-01-22T19:35:01Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -151,6 +158,19 @@ private void registerFunctions(BeamSqlEnvBuilder sqlEnvBuilder) {\n     udafDefinitions().forEach(udaf -> sqlEnvBuilder.addUdaf(udaf.udafName(), udaf.combineFn()));\n   }\n \n+  private static SqlTransform query(\n+      String queryString, Object queryParameters, QueryParameterMode queryParameterMode) {\n+    return builder()\n+        .setQueryString(queryString)\n+        .setQueryParameters(queryParameters)\n+        .setQueryParameterMode(queryParameterMode)\n+        .setUdafDefinitions(Collections.emptyList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842785404570a3b1f6f8de0d19b3a5d3c289161"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MjIyNA==", "bodyText": "Stylistically, SqlTransform would do better to have public builder methods. Is there a technical barrier? In other words, an API like SqlTransform.query(...).withParameters(...) or even .withNamedParameters separate from withPositionalParameters.", "url": "https://github.com/apache/beam/pull/10659#discussion_r369762224", "createdAt": "2020-01-22T19:36:36Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -175,13 +195,32 @@ private void registerFunctions(BeamSqlEnvBuilder sqlEnvBuilder) {\n    * </ul>\n    */\n   public static SqlTransform query(String queryString) {\n-    return builder()\n-        .setQueryString(queryString)\n-        .setUdafDefinitions(Collections.emptyList())\n-        .setUdfDefinitions(Collections.emptyList())\n-        .setTableProviderMap(Collections.emptyMap())\n-        .setAutoUdfUdafLoad(false)\n-        .build();\n+    return query(queryString, Collections.emptyMap(), QueryParameterMode.NONE);\n+  }\n+\n+  /**\n+   * Same as {@link #query(String)} but with named query parameters. Currently only supported by the\n+   * ZetaSQL dialect.\n+   *\n+   * @param queryParameters type depends on the SQL dialect. For ZetaSQL, a {@code Map<String,\n+   *     com.google.zetasql.Value>} keyed by the parameter name.\n+   */\n+  @Experimental\n+  public static SqlTransform queryWithNamedParameters(String queryString, Map queryParameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842785404570a3b1f6f8de0d19b3a5d3c289161"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDcxNjgz", "url": "https://github.com/apache/beam/pull/10659#pullrequestreview-347471683", "createdAt": "2020-01-23T17:18:20Z", "commit": {"oid": "82d34e4680e0657b187d02a2e05abc8549e9946a"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxODoyMVrOFhGQ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoyMTo0OVrOFhGXmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0OTkzNw==", "bodyText": "When we do merge, I think it is helpful to have the dependency upgrade in an isolated commit. I notice you have some spotless commits to squash, but I would keep the dep upgrade separate.", "url": "https://github.com/apache/beam/pull/10659#discussion_r370249937", "createdAt": "2020-01-23T17:18:21Z", "author": {"login": "kennknowles"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -731,7 +731,7 @@ class BeamModulePlugin implements Plugin<Project> {\n       // configurations because they are never required to be shaded or become a\n       // dependency of the output.\n       def compileOnlyAnnotationDeps = [\n-        \"com.google.auto.value:auto-value-annotations:1.6.3\",\n+        \"com.google.auto.value:auto-value-annotations:1.7\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d34e4680e0657b187d02a2e05abc8549e9946a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MDM0MA==", "bodyText": "Perfect", "url": "https://github.com/apache/beam/pull/10659#discussion_r370250340", "createdAt": "2020-01-23T17:19:05Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -194,6 +199,14 @@ public SqlTransform withDefaultTableProvider(String name, TableProvider tablePro\n     return withTableProvider(name, tableProvider).toBuilder().setDefaultTableProvider(name).build();\n   }\n \n+  public SqlTransform withNamedParameters(Map parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d34e4680e0657b187d02a2e05abc8549e9946a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MTY3Mw==", "bodyText": "If I understand correctly, this might be best as a checkState. That way you can attach a good error message and indicate that the internal state has gotten messed up.", "url": "https://github.com/apache/beam/pull/10659#discussion_r370251673", "createdAt": "2020-01-23T17:21:49Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -1000,9 +1002,19 @@ private static boolean isZetaSQLCast(TypeKind fromType, TypeKind toType) {\n   }\n \n   private RexNode convertResolvedParameter(ResolvedParameter parameter) {\n-    assert parameter.getType().equals(queryParams.get(parameter.getName()).getType());\n-    return convertValueToRexNode(\n-        queryParams.get(parameter.getName()).getType(), queryParams.get(parameter.getName()));\n+    if (queryParams.getKind() == Kind.NAMED) {\n+      Map<String, Value> queryParameterMap = (Map<String, Value>) queryParams.named();\n+      Value value = queryParameterMap.get(parameter.getName());\n+      assert parameter.getType().equals(value.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d34e4680e0657b187d02a2e05abc8549e9946a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3313d5e1c7f876558fa99e8054ce6004b8b82366", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/3313d5e1c7f876558fa99e8054ce6004b8b82366", "committedDate": "2020-01-23T23:46:10Z", "message": "upgrade auto-value to version 1.7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23c55e27978fbe6be77de4605bd57d30b2de22b0", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/23c55e27978fbe6be77de4605bd57d30b2de22b0", "committedDate": "2020-01-23T23:46:10Z", "message": "[BEAM-9149] Add SQL query parameters to public API and enable positional\nparameters in ZetaSQL."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d393f624b67872b13f6e9927231bf185fc391d2", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/7d393f624b67872b13f6e9927231bf185fc391d2", "committedDate": "2020-01-23T17:43:06Z", "message": "spotless"}, "afterCommit": {"oid": "23c55e27978fbe6be77de4605bd57d30b2de22b0", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/23c55e27978fbe6be77de4605bd57d30b2de22b0", "committedDate": "2020-01-23T23:46:10Z", "message": "[BEAM-9149] Add SQL query parameters to public API and enable positional\nparameters in ZetaSQL."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3578, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}