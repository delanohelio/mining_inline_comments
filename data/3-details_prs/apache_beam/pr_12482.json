{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTQzNTM2", "number": 12482, "title": "[BEAM-7390] Add top code snippets", "bodyText": "Add Top code snippets.\nR: @aaltay\nR: @rosetn\nStaged: http://apache-beam-website-pull-requests.storage.googleapis.com/12482/documentation/transforms/python/aggregation/top/index.html\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-06T16:50:42Z", "url": "https://github.com/apache/beam/pull/12482", "merged": true, "mergeCommit": {"oid": "078b55dbe983a10763fe913900c408f08b805cc9"}, "closed": true, "closedAt": "2020-08-07T17:26:46Z", "author": {"login": "davidcavazos"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8StqHAH2gAyNDY0MTQzNTM2OjlmMGRhMTI3Y2QxMGI5Y2ZiNDRjM2RjZjVmNTJlMGZiNDBiNDQxZTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8n1mhgFqTQ2MzQ4MTUyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f0da127cd10b9cfb44c3dcf5f52e0fb40b441e5", "author": {"user": {"login": "davidcavazos", "name": "David Cavazos"}}, "url": "https://github.com/apache/beam/commit/9f0da127cd10b9cfb44c3dcf5f52e0fb40b441e5", "committedDate": "2020-08-06T16:49:42Z", "message": "[BEAM-7390] Add top code snippets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzQwMjU5", "url": "https://github.com/apache/beam/pull/12482#pullrequestreview-462740259", "createdAt": "2020-08-06T17:41:04Z", "commit": {"oid": "9f0da127cd10b9cfb44c3dcf5f52e0fb40b441e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo0MTowNFrOG89wzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo0MTowNFrOG89wzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTY2MQ==", "bodyText": "Probably outside of your diff--but can you capitalize the \"T\" in take? Thank you!", "url": "https://github.com/apache/beam/pull/12482#discussion_r466579661", "createdAt": "2020-08-06T17:41:04Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/top.md", "diffHunk": "@@ -14,24 +14,144 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n -->\n+\n # Top\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/2.12.0/apache_beam.transforms.combiners.html?#apache_beam.transforms.combiners.Top\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Top\" >}}\n \n Transforms for finding the largest (or smallest) set of elements in\n a collection, or the largest (or smallest) set of values associated\n with each key in a collection of key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [Sample](/documentation/transforms/python/aggregation/sample) to combine elements. takes samples of the elements in a collection.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the largest or smallest elements in different ways.\n+\n+### Example 1: Largest elements from a PCollection\n+\n+We use `Top.Largest()` to get the largest elements from the *entire* `PCollection`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_largest >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" largest_elements >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 2: Largest elements for each key\n+\n+We use `Top.LargestPerKey()` to get the largest elements for each unique key in a `PCollection` of key-values.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_largest_per_key >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" largest_elements_per_key >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 3: Smallest elements from a PCollection\n+\n+We use `Top.Smallest()` to get the smallest elements from the *entire* `PCollection`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_smallest >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" smallest_elements >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 4: Smallest elements for each key\n+\n+We use `Top.SmallestPerKey()` to get the smallest elements for each unique key in a `PCollection` of key-values.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_smallest_per_key >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" smallest_elements_per_key >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 5: Custom elements from a PCollection\n+\n+We use `Top.Of()` to get elements with customized rules from the *entire* `PCollection`.\n+\n+You can change how the elements are compared with `key`.\n+By default you get the largest elements, but you can get the smallest by setting `reverse=True`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_of >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" shortest_elements >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 6: Custom elements for each key\n+\n+We use `Top.PerKey()` to get elements with customized rules for each unique key in a `PCollection` of key-values.\n+\n+You can change how the elements are compared with `key`.\n+By default you get the largest elements, but you can get the smallest by setting `reverse=True`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_per_key >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" shortest_elements_per_key >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+## Related transforms\n+\n+* [Sample](/documentation/transforms/python/aggregation/sample) to combine elements. takes samples of the elements in a collection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f0da127cd10b9cfb44c3dcf5f52e0fb40b441e5"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5854a242f747176d9e7b0a1dad3fcdcf9fa94574", "author": {"user": {"login": "davidcavazos", "name": "David Cavazos"}}, "url": "https://github.com/apache/beam/commit/5854a242f747176d9e7b0a1dad3fcdcf9fa94574", "committedDate": "2020-08-06T18:14:03Z", "message": "Capitalized T"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc571d5768b24f7bd0d49a560365037456827e1", "author": {"user": {"login": "davidcavazos", "name": "David Cavazos"}}, "url": "https://github.com/apache/beam/commit/ffc571d5768b24f7bd0d49a560365037456827e1", "committedDate": "2020-08-07T16:34:30Z", "message": "Merge branch 'master' of https://github.com/apache/beam into top-docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDgxNTI1", "url": "https://github.com/apache/beam/pull/12482#pullrequestreview-463481525", "createdAt": "2020-08-07T17:26:23Z", "commit": {"oid": "ffc571d5768b24f7bd0d49a560365037456827e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3764, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}