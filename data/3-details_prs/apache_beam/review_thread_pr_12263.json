{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MzEwMjg2", "number": 12263, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzoxNTo1MlrOEPsvJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzoxNTo1MlrOEPsvJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODk3MDYwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzoxNTo1MlrOGzjbcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDoyMjoyMFrOG_Nkfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMTAyNQ==", "bodyText": "Do we need to add new unit tests to cover the new functionality ?", "url": "https://github.com/apache/beam/pull/12263#discussion_r456711025", "createdAt": "2020-07-17T23:15:52Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -177,19 +177,24 @@ public DLPDeidentifyText build() {\n   @Override\n   public PCollection<KV<String, DeidentifyContentResponse>> expand(\n       PCollection<KV<String, String>> input) {\n-    return input\n-        .apply(ParDo.of(new MapStringToDlpRow(getColumnDelimiter())))\n-        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(getBatchSizeBytes())))\n-        .apply(\n-            \"DLPDeidentify\",\n+\n+    ParDo.SingleOutput<KV<String, Iterable<Table.Row>>, KV<String, DeidentifyContentResponse>>\n+        deidentifyParDo =\n             ParDo.of(\n                 new DeidentifyText(\n                     getProjectId(),\n                     getInspectTemplateName(),\n                     getDeidentifyTemplateName(),\n                     getInspectConfig(),\n                     getDeidentifyConfig(),\n-                    getHeaderColumns())));\n+                    getHeaderColumns()));\n+    if (getHeaderColumns() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce70006837ae66318da6c56af4f4ff721092f0f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4ODQ5Nw==", "bodyText": "It would be nice to add them, but I have no idea how to approach checking this. Do you have any suggestions?", "url": "https://github.com/apache/beam/pull/12263#discussion_r457388497", "createdAt": "2020-07-20T13:34:58Z", "author": {"login": "mwalenia"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -177,19 +177,24 @@ public DLPDeidentifyText build() {\n   @Override\n   public PCollection<KV<String, DeidentifyContentResponse>> expand(\n       PCollection<KV<String, String>> input) {\n-    return input\n-        .apply(ParDo.of(new MapStringToDlpRow(getColumnDelimiter())))\n-        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(getBatchSizeBytes())))\n-        .apply(\n-            \"DLPDeidentify\",\n+\n+    ParDo.SingleOutput<KV<String, Iterable<Table.Row>>, KV<String, DeidentifyContentResponse>>\n+        deidentifyParDo =\n             ParDo.of(\n                 new DeidentifyText(\n                     getProjectId(),\n                     getInspectTemplateName(),\n                     getDeidentifyTemplateName(),\n                     getInspectConfig(),\n                     getDeidentifyConfig(),\n-                    getHeaderColumns())));\n+                    getHeaderColumns()));\n+    if (getHeaderColumns() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMTAyNQ=="}, "originalCommit": {"oid": "9ce70006837ae66318da6c56af4f4ff721092f0f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNDQ4Mw==", "bodyText": "I'm not sure of all the available tools for testing DoFns in Beam so there may be better options but one way would be to use the @NeedsRunner annotation and some PAsserts to verify the expected output (from the wiki)?\nIt would require injecting a mock cloud client library to avoid making any calls to the live API.", "url": "https://github.com/apache/beam/pull/12263#discussion_r457804483", "createdAt": "2020-07-21T02:49:33Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -177,19 +177,24 @@ public DLPDeidentifyText build() {\n   @Override\n   public PCollection<KV<String, DeidentifyContentResponse>> expand(\n       PCollection<KV<String, String>> input) {\n-    return input\n-        .apply(ParDo.of(new MapStringToDlpRow(getColumnDelimiter())))\n-        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(getBatchSizeBytes())))\n-        .apply(\n-            \"DLPDeidentify\",\n+\n+    ParDo.SingleOutput<KV<String, Iterable<Table.Row>>, KV<String, DeidentifyContentResponse>>\n+        deidentifyParDo =\n             ParDo.of(\n                 new DeidentifyText(\n                     getProjectId(),\n                     getInspectTemplateName(),\n                     getDeidentifyTemplateName(),\n                     getInspectConfig(),\n                     getDeidentifyConfig(),\n-                    getHeaderColumns())));\n+                    getHeaderColumns()));\n+    if (getHeaderColumns() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMTAyNQ=="}, "originalCommit": {"oid": "9ce70006837ae66318da6c56af4f4ff721092f0f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMDUyOQ==", "bodyText": "It was just a suggestion. I'm OK with merging as it is if that's OK with the author of the PR.", "url": "https://github.com/apache/beam/pull/12263#discussion_r468930529", "createdAt": "2020-08-12T00:03:19Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -177,19 +177,24 @@ public DLPDeidentifyText build() {\n   @Override\n   public PCollection<KV<String, DeidentifyContentResponse>> expand(\n       PCollection<KV<String, String>> input) {\n-    return input\n-        .apply(ParDo.of(new MapStringToDlpRow(getColumnDelimiter())))\n-        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(getBatchSizeBytes())))\n-        .apply(\n-            \"DLPDeidentify\",\n+\n+    ParDo.SingleOutput<KV<String, Iterable<Table.Row>>, KV<String, DeidentifyContentResponse>>\n+        deidentifyParDo =\n             ParDo.of(\n                 new DeidentifyText(\n                     getProjectId(),\n                     getInspectTemplateName(),\n                     getDeidentifyTemplateName(),\n                     getInspectConfig(),\n                     getDeidentifyConfig(),\n-                    getHeaderColumns())));\n+                    getHeaderColumns()));\n+    if (getHeaderColumns() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMTAyNQ=="}, "originalCommit": {"oid": "9ce70006837ae66318da6c56af4f4ff721092f0f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNTgwNg==", "bodyText": "Thanks, merging for now so that we don't have to cherry-pick this into 2.24.0 and we have manually verified the fix on 2.23.0.", "url": "https://github.com/apache/beam/pull/12263#discussion_r468935806", "createdAt": "2020-08-12T00:22:20Z", "author": {"login": "tvalentyn"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -177,19 +177,24 @@ public DLPDeidentifyText build() {\n   @Override\n   public PCollection<KV<String, DeidentifyContentResponse>> expand(\n       PCollection<KV<String, String>> input) {\n-    return input\n-        .apply(ParDo.of(new MapStringToDlpRow(getColumnDelimiter())))\n-        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(getBatchSizeBytes())))\n-        .apply(\n-            \"DLPDeidentify\",\n+\n+    ParDo.SingleOutput<KV<String, Iterable<Table.Row>>, KV<String, DeidentifyContentResponse>>\n+        deidentifyParDo =\n             ParDo.of(\n                 new DeidentifyText(\n                     getProjectId(),\n                     getInspectTemplateName(),\n                     getDeidentifyTemplateName(),\n                     getInspectConfig(),\n                     getDeidentifyConfig(),\n-                    getHeaderColumns())));\n+                    getHeaderColumns()));\n+    if (getHeaderColumns() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMTAyNQ=="}, "originalCommit": {"oid": "9ce70006837ae66318da6c56af4f4ff721092f0f"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1059, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}