{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzOTA0NTE1", "number": 10617, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODozNTozOVrODZmFYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzo1MTo0NVrODao8Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTY0OTYzOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODozNTozOVrOFgEf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMDozMjoxMVrOFhQ-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MjQ2OA==", "bodyText": "I'm a bit hesitant to have this but i'm okay if we have to. @chamikaramj Do you think this is still necessary? If this is required, we might consider to have new API in getCloudStorage().create to accept uploadBufferSizeBytes to avoid code for each type of channels.", "url": "https://github.com/apache/beam/pull/10617#discussion_r369172468", "createdAt": "2020-01-21T18:35:39Z", "author": {"login": "veblush"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,22 +440,14 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n+    WritableByteChannel channel = getCloudStorage().create(new StorageResourceId(path.getBucket()));\n     if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+      if (channel instanceof GoogleCloudStorageWriteChannel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e8d5d99207e213a68ae55e91aba9512cb6366d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzc2OA==", "bodyText": "This seems to be replaced with using AsyncWriteChannelOptions.setUploadChunkSize in GoogleCloudStorageOptions.WriteChannelOptions.", "url": "https://github.com/apache/beam/pull/10617#discussion_r369317768", "createdAt": "2020-01-22T00:35:13Z", "author": {"login": "veblush"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,22 +440,14 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n+    WritableByteChannel channel = getCloudStorage().create(new StorageResourceId(path.getBucket()));\n     if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+      if (channel instanceof GoogleCloudStorageWriteChannel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MjQ2OA=="}, "originalCommit": {"oid": "d8e8d5d99207e213a68ae55e91aba9512cb6366d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNTUxMA==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/10617#discussion_r370425510", "createdAt": "2020-01-24T00:32:11Z", "author": {"login": "vnorigoog"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,22 +440,14 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n+    WritableByteChannel channel = getCloudStorage().create(new StorageResourceId(path.getBucket()));\n     if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+      if (channel instanceof GoogleCloudStorageWriteChannel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MjQ2OA=="}, "originalCommit": {"oid": "d8e8d5d99207e213a68ae55e91aba9512cb6366d"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjI2NjYyOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDo1MDo0OFrOFhqDOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjoxNTo0NVrOFj7u6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjI4MQ==", "bodyText": "Can we combine this with code below? Does it need to call setGrpcEnabled, too?", "url": "https://github.com/apache/beam/pull/10617#discussion_r370836281", "createdAt": "2020-01-24T20:50:48Z", "author": {"login": "veblush"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +447,21 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {\n+      return googleCloudStorage.create(new StorageResourceId(path.getBucket()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ba5215094d98e8a185284c2faa879ba8050b7e"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NTg3NQ==", "bodyText": "fixed.\nI had to rework the code a bit to assume that gcsio doesn't yet have grpc support - but make this code almost ready to use it when it is available in gcsio", "url": "https://github.com/apache/beam/pull/10617#discussion_r370865875", "createdAt": "2020-01-24T22:13:32Z", "author": {"login": "vnorigoog"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +447,21 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {\n+      return googleCloudStorage.create(new StorageResourceId(path.getBucket()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjI4MQ=="}, "originalCommit": {"oid": "21ba5215094d98e8a185284c2faa879ba8050b7e"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMzE0Ng==", "bodyText": "fixed.\nand uploaded the modifications.", "url": "https://github.com/apache/beam/pull/10617#discussion_r373223146", "createdAt": "2020-01-30T22:15:45Z", "author": {"login": "vnorigoog"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +447,21 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {\n+      return googleCloudStorage.create(new StorageResourceId(path.getBucket()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjI4MQ=="}, "originalCommit": {"oid": "21ba5215094d98e8a185284c2faa879ba8050b7e"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjYwMzU1OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzo1MTo0NVrOFhtUiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0NzoyN1rOFjaNiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4OTg2Nw==", "bodyText": "Seems like this changes contentType from whatever provided above to always null. We should check the code base to see if this may introduce any behavioral changes.", "url": "https://github.com/apache/beam/pull/10617#discussion_r370889867", "createdAt": "2020-01-24T23:51:45Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +449,29 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bafd3b986ca63ed7cf7a16dcc0dbbfe2ce89a74d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NTIwMg==", "bodyText": "Was this addressed ? I see this being used in a number of places and probably users can set mime type themselves since this is a pipeline option. Can this be a breaking change for some users (or some applications of Beam) ?\nFor example,\n\n  \n    \n      beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryRowWriter.java\n    \n    \n         Line 58\n      in\n      35da90a\n    \n    \n    \n    \n\n        \n          \n           channel = FileSystems.create(resourceId, mimeType);", "url": "https://github.com/apache/beam/pull/10617#discussion_r372655202", "createdAt": "2020-01-29T22:01:39Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +449,29 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4OTg2Nw=="}, "originalCommit": {"oid": "bafd3b986ca63ed7cf7a16dcc0dbbfe2ce89a74d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MzkyOQ==", "bodyText": "I think this can be address by passing CreateObjectOptions to googleCloudStorage.create. CreateObjectOptions has a way to configure ContentType.", "url": "https://github.com/apache/beam/pull/10617#discussion_r372673929", "createdAt": "2020-01-29T22:47:27Z", "author": {"login": "veblush"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +449,29 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4OTg2Nw=="}, "originalCommit": {"oid": "bafd3b986ca63ed7cf7a16dcc0dbbfe2ce89a74d"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2196, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}