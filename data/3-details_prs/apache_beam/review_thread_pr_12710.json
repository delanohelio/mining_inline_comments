{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA1MDE2", "number": 12710, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjo1OTo0OVrOEfLFwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzozNDozM1rOEfMCQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTIzMDA5OnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjo1OTo0OVrOHLRp4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODozNTo0N1rOHL8lxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NTYzNQ==", "bodyText": "it seems that the whole if-else branch could be simplified to just\nwindowedSplitResult =\n              computeWindowSplitResult(\n                  currentElement,\n                  currentRestriction,\n                  currentWindow,\n                  windows,\n                  currentWatermarkEstimatorState,\n                  (elementSplit == null && downstreamSplitResult == null) ? currentWindowIndex : newWindowStopIndex,\n                  newWindowStopIndex,\n                  stopWindowIndex,\n                  elementSplit,\n                  watermarkAndState);\n\nor maybe I missed something.", "url": "https://github.com/apache/beam/pull/12710#discussion_r481585635", "createdAt": "2020-09-02T02:59:49Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1514,6 +1409,19 @@ public Object restriction() {\n                   stopWindowIndex,\n                   elementSplit,\n                   watermarkAndState);\n+        } else if (downstreamSplitResult != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI4OTA5NQ==", "bodyText": "Yeah you are right. Thanks!", "url": "https://github.com/apache/beam/pull/12710#discussion_r482289095", "createdAt": "2020-09-02T18:35:47Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1514,6 +1409,19 @@ public Object restriction() {\n                   stopWindowIndex,\n                   elementSplit,\n                   watermarkAndState);\n+        } else if (downstreamSplitResult != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NTYzNQ=="}, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTI4MjI3OnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzoxMzoxN1rOHLSLjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowOToyMVrOHL7Q4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU5NDI1Mw==", "bodyText": "can both windowedSplitResult and downstreamElementSplit be null? if not should the check expressed with xor ^", "url": "https://github.com/apache/beam/pull/12710#discussion_r481594253", "createdAt": "2020-09-02T03:13:17Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1546,50 +1459,32 @@ public Object restriction() {\n               currentWindowIndex,\n               stopWindowIndex,\n               stopWindowIndex,\n-              splitResult,\n+              elementSplitResult,\n               watermarkAndState);\n     }\n-    return KV.of(windowedSplitResult, newWindowStopIndex);\n+    return SplitResultsWithStopIndex.of(\n+        windowedSplitResult, downstreamSplitResult, newWindowStopIndex);\n   }\n \n-  private HandlesSplits.SplitResult trySplitForElementAndRestriction(\n-      double fractionOfRemainder, Duration resumeDelay) {\n-    KV<Instant, WatermarkEstimatorStateT> watermarkAndState;\n-    WindowedSplitResult windowedSplitResult = null;\n-    synchronized (splitLock) {\n-      // There is nothing to split if we are between element and restriction processing calls.\n-      if (currentTracker == null) {\n-        return null;\n-      }\n-      // Make sure to get the output watermark before we split to ensure that the lower bound\n-      // applies to the residual.\n-      watermarkAndState = currentWatermarkEstimator.getWatermarkAndState();\n-      KV<WindowedSplitResult, Integer> splitResult =\n-          trySplitForProcess(\n-              currentElement,\n-              currentRestriction,\n-              currentWindow,\n-              currentWindows,\n-              currentWatermarkEstimatorState,\n-              fractionOfRemainder,\n-              currentTracker,\n-              watermarkAndState,\n-              windowCurrentIndex,\n-              windowStopIndex);\n-      if (splitResult == null) {\n-        return null;\n-      }\n-      windowStopIndex = splitResult.getValue();\n-      windowedSplitResult =\n-          calculateRestrictionSize(\n-              splitResult.getKey(),\n-              PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN\n-                  + \"/GetSize\");\n-    }\n-\n+  @VisibleForTesting\n+  static <WatermarkEstimatorStateT> HandlesSplits.SplitResult constructSplitResult(\n+      WindowedSplitResult windowedSplitResult,\n+      HandlesSplits.SplitResult downstreamElementSplit,\n+      Coder fullInputCoder,\n+      Instant initialWatermark,\n+      KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n+      String pTransformId,\n+      String mainInputId,\n+      Collection<String> outputIds,\n+      Duration resumeDelay) {\n+    // The element split cannot from both windowedSplitResult and downstreamElementSplit.\n+    checkArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 404}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NzM2Mg==", "bodyText": "Yeah both windowedSplitResult.getResidualSplitRoot and downstreamElementSplit can be null. The only illegal state here is both of them are not null.", "url": "https://github.com/apache/beam/pull/12710#discussion_r482267362", "createdAt": "2020-09-02T18:09:21Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1546,50 +1459,32 @@ public Object restriction() {\n               currentWindowIndex,\n               stopWindowIndex,\n               stopWindowIndex,\n-              splitResult,\n+              elementSplitResult,\n               watermarkAndState);\n     }\n-    return KV.of(windowedSplitResult, newWindowStopIndex);\n+    return SplitResultsWithStopIndex.of(\n+        windowedSplitResult, downstreamSplitResult, newWindowStopIndex);\n   }\n \n-  private HandlesSplits.SplitResult trySplitForElementAndRestriction(\n-      double fractionOfRemainder, Duration resumeDelay) {\n-    KV<Instant, WatermarkEstimatorStateT> watermarkAndState;\n-    WindowedSplitResult windowedSplitResult = null;\n-    synchronized (splitLock) {\n-      // There is nothing to split if we are between element and restriction processing calls.\n-      if (currentTracker == null) {\n-        return null;\n-      }\n-      // Make sure to get the output watermark before we split to ensure that the lower bound\n-      // applies to the residual.\n-      watermarkAndState = currentWatermarkEstimator.getWatermarkAndState();\n-      KV<WindowedSplitResult, Integer> splitResult =\n-          trySplitForProcess(\n-              currentElement,\n-              currentRestriction,\n-              currentWindow,\n-              currentWindows,\n-              currentWatermarkEstimatorState,\n-              fractionOfRemainder,\n-              currentTracker,\n-              watermarkAndState,\n-              windowCurrentIndex,\n-              windowStopIndex);\n-      if (splitResult == null) {\n-        return null;\n-      }\n-      windowStopIndex = splitResult.getValue();\n-      windowedSplitResult =\n-          calculateRestrictionSize(\n-              splitResult.getKey(),\n-              PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN\n-                  + \"/GetSize\");\n-    }\n-\n+  @VisibleForTesting\n+  static <WatermarkEstimatorStateT> HandlesSplits.SplitResult constructSplitResult(\n+      WindowedSplitResult windowedSplitResult,\n+      HandlesSplits.SplitResult downstreamElementSplit,\n+      Coder fullInputCoder,\n+      Instant initialWatermark,\n+      KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n+      String pTransformId,\n+      String mainInputId,\n+      Collection<String> outputIds,\n+      Duration resumeDelay) {\n+    // The element split cannot from both windowedSplitResult and downstreamElementSplit.\n+    checkArgument(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU5NDI1Mw=="}, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 404}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTM1MzAyOnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzoyODo1MVrOHLS5eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoyNToxNFrOHL7-4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjAxMA==", "bodyText": "(currentTracker == null) ^ (splitDelegate == null) ?", "url": "https://github.com/apache/beam/pull/12710#discussion_r481606010", "createdAt": "2020-09-02T03:28:51Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1444,28 +1317,44 @@ public Object restriction() {\n   }\n \n   @VisibleForTesting\n-  static <WatermarkEstimatorStateT> KV<WindowedSplitResult, Integer> trySplitForProcess(\n+  static <WatermarkEstimatorStateT> SplitResultsWithStopIndex computeSplitForProcessOrTruncate(\n       WindowedValue currentElement,\n       Object currentRestriction,\n       BoundedWindow currentWindow,\n       List<BoundedWindow> windows,\n       WatermarkEstimatorStateT currentWatermarkEstimatorState,\n       double fractionOfRemainder,\n       RestrictionTracker currentTracker,\n+      HandlesSplits splitDelegate,\n       KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n       int currentWindowIndex,\n       int stopWindowIndex) {\n+    // We should only have currentTracker or splitDelegate.\n+    checkArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3OTEzNw==", "bodyText": "That's a good idea. Thanks!", "url": "https://github.com/apache/beam/pull/12710#discussion_r482279137", "createdAt": "2020-09-02T18:25:14Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1444,28 +1317,44 @@ public Object restriction() {\n   }\n \n   @VisibleForTesting\n-  static <WatermarkEstimatorStateT> KV<WindowedSplitResult, Integer> trySplitForProcess(\n+  static <WatermarkEstimatorStateT> SplitResultsWithStopIndex computeSplitForProcessOrTruncate(\n       WindowedValue currentElement,\n       Object currentRestriction,\n       BoundedWindow currentWindow,\n       List<BoundedWindow> windows,\n       WatermarkEstimatorStateT currentWatermarkEstimatorState,\n       double fractionOfRemainder,\n       RestrictionTracker currentTracker,\n+      HandlesSplits splitDelegate,\n       KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n       int currentWindowIndex,\n       int stopWindowIndex) {\n+    // We should only have currentTracker or splitDelegate.\n+    checkArgument(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjAxMA=="}, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTM4NDk3OnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzozNDozM1rOHLTOmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxNTo0N1rOHL7e1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYxMTQxOQ==", "bodyText": "I'm curious why we are not throwing another exception with reason instead?", "url": "https://github.com/apache/beam/pull/12710#discussion_r481611419", "createdAt": "2020-09-02T03:34:33Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java", "diffHunk": "@@ -3858,156 +3924,225 @@ public void testScaleProgress() throws Exception {\n       assertEquals(8, scaledResult.getWorkRemaining(), 0.0);\n     }\n \n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNullTrackerAndSplitDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          null,\n+          null,\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNotNullTrackerAndDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          new OffsetRangeTracker(currentRestriction),\n+          createSplitDelegate(0.3, 0.0, null),\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithInvalidWatermarkAndState()\n+        throws Exception {\n+      expected.expect(NullPointerException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MDkzMw==", "bodyText": "Because I use checkNotNull in the function body, please refer to FnApiDoFnRunner L1338.", "url": "https://github.com/apache/beam/pull/12710#discussion_r482270933", "createdAt": "2020-09-02T18:15:47Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java", "diffHunk": "@@ -3858,156 +3924,225 @@ public void testScaleProgress() throws Exception {\n       assertEquals(8, scaledResult.getWorkRemaining(), 0.0);\n     }\n \n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNullTrackerAndSplitDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          null,\n+          null,\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNotNullTrackerAndDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          new OffsetRangeTracker(currentRestriction),\n+          createSplitDelegate(0.3, 0.0, null),\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithInvalidWatermarkAndState()\n+        throws Exception {\n+      expected.expect(NullPointerException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYxMTQxOQ=="}, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 174}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 383, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}