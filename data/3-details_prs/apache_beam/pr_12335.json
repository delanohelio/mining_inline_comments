{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODQ2MTMz", "number": 12335, "title": "[BEAM-10378] Creates Azure Blob Storage Resource Id", "bodyText": "Creates and tests an Azure Blob Storage resource ID.  Work ongoing to implement an Azure Blob storage filesystem in the Java SDK.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-22T02:44:31Z", "url": "https://github.com/apache/beam/pull/12335", "merged": true, "mergeCommit": {"oid": "ed50ac8af5c5fdc89693d75ea57193ac0ce5cdfd"}, "closed": true, "closedAt": "2020-07-24T01:56:23Z", "author": {"login": "ettirapp"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3RkY7gH2gAyNDU0ODQ2MTMzOjk1MjgzN2U5YzE0MmRlOGM1YjkwOGQzYmE3ZTY5NDBlZGUzMjY3YTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3zXZjAH2gAyNDU0ODQ2MTMzOjcyMTcyMjVhNjhhNzQ0YWMzZmEwY2ZlNjk4MTEyN2FiYzAxNTc1ZjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "952837e9c142de8c5b908d3ba7e6940ede3267a3", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/952837e9c142de8c5b908d3ba7e6940ede3267a3", "committedDate": "2020-07-22T02:40:03Z", "message": "rearranging git branches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0452cb55f9b4e9812d69f0c741f591ead4bbb0e5", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/0452cb55f9b4e9812d69f0c741f591ead4bbb0e5", "committedDate": "2020-07-22T02:49:53Z", "message": "applied spotless to fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955f82f712408bb1fed2204aaed6d0112e004621", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/955f82f712408bb1fed2204aaed6d0112e004621", "committedDate": "2020-07-22T03:11:30Z", "message": "applied spotless to fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d6738b82abbbb017bc7a644c8fd8c6184d3a4f8", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/7d6738b82abbbb017bc7a644c8fd8c6184d3a4f8", "committedDate": "2020-07-22T03:20:24Z", "message": "trying to resolve gradle error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08aa214f03227c24a1dad87f4bb1ae4332b5fe49", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/08aa214f03227c24a1dad87f4bb1ae4332b5fe49", "committedDate": "2020-07-22T16:58:56Z", "message": "cleaning code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5586f0c1673fd87e49ad68db6dfa936db10ec8b1", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/5586f0c1673fd87e49ad68db6dfa936db10ec8b1", "committedDate": "2020-07-22T17:05:44Z", "message": "applied spotless to fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca2c62148b6d60abef7d6399d4b77945320f76f0", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/ca2c62148b6d60abef7d6399d4b77945320f76f0", "committedDate": "2020-07-22T17:20:21Z", "message": "wrote filesystem registrar to resolve javadoc error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a874977992bab8821ea395b3a2f99b44151f684b", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/a874977992bab8821ea395b3a2f99b44151f684b", "committedDate": "2020-07-22T17:30:59Z", "message": "fixing failing checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bff62e3271eece5d34a1cfbbc3d887d3161c6f0", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/7bff62e3271eece5d34a1cfbbc3d887d3161c6f0", "committedDate": "2020-07-22T17:32:05Z", "message": "applied spotless to fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e56f4df5fd958d68018a629f7d74c5eba860423", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/5e56f4df5fd958d68018a629f7d74c5eba860423", "committedDate": "2020-07-22T17:42:34Z", "message": "trying to fix spotless error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f0a0ad7f4b2013f39958c54350e1dc5929b1f5", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/84f0a0ad7f4b2013f39958c54350e1dc5929b1f5", "committedDate": "2020-07-22T19:16:06Z", "message": "Merge branch 'master' into azure-resourceid"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTc1OTE2", "url": "https://github.com/apache/beam/pull/12335#pullrequestreview-453575916", "createdAt": "2020-07-22T18:26:27Z", "commit": {"oid": "5e56f4df5fd958d68018a629f7d74c5eba860423"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODoyNjoyN1rOG1u5mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo0MjozN1rOG1zdmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NjEyMQ==", "bodyText": "Remove this empty method?", "url": "https://github.com/apache/beam/pull/12335#discussion_r458996121", "createdAt": "2020-07-22T18:26:27Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common gcs paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);\n+    assertEquals(a, b);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"a/b/c/\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"x/y/z\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), \"other-container\", a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(\"other-account\", a.getContainer(), a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\"));\n+  }\n+\n+  @Test\n+  public void testFromComponents() {\n+    AzfsResourceId resourceId = AzfsResourceId.fromComponents(\"account\", \"container\", \"blob\");\n+    assertEquals(\"azfs\", resourceId.getScheme());\n+    assertEquals(\"account\", resourceId.getAccount());\n+    assertEquals(\"container\", resourceId.getContainer());\n+    assertEquals(\"blob\", resourceId.getBlob());\n+    assertEquals(\n+        \"virtualDir/blob\",\n+        AzfsResourceId.fromComponents(\"account\", \"container\", \"virtualDir/blob\").getBlob());\n+    assertEquals(null, AzfsResourceId.fromComponents(\"account\", \"container\").getBlob());\n+  }\n+\n+  @Test\n+  public void testFromUri() {\n+    AzfsResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/blob\");\n+    assertEquals(\"azfs\", resourceId.getScheme());\n+    assertEquals(\"account\", resourceId.getAccount());\n+    assertEquals(\"container\", resourceId.getContainer());\n+    assertEquals(\"blob\", resourceId.getBlob());\n+    assertEquals(\n+        \"virtualDir/blob\",\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob\").getBlob());\n+    assertEquals(null, AzfsResourceId.fromUri(\"azfs://account/container\").getBlob());\n+  }\n+\n+  @Test\n+  public void testIsDirectory() {\n+    assertTrue(AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\").isDirectory());\n+    assertTrue(AzfsResourceId.fromUri(\"azfs://account/container\").isDirectory());\n+    assertFalse(AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob\").isDirectory());\n+  }\n+\n+  @Test\n+  public void testGetCurrentDirectory() {\n+    // test azfs path\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\").getCurrentDirectory());\n+    // test path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u6587\u4ef601.txt\").getCurrentDirectory());\n+    // test path without ending '/'\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container\").getCurrentDirectory());\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/blob\").getCurrentDirectory());\n+  }\n+\n+  @Test\n+  public void testInvalidPathNoContainer() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Invalid AZFS URI: [azfs://]\");\n+    AzfsResourceId.fromUri(\"azfs://\");\n+  }\n+\n+  @Test\n+  public void testInvalidPathNoContainerAndSlash() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Invalid AZFS URI: [azfs:///]\");\n+    AzfsResourceId.fromUri(\"azfs:///\");\n+  }\n+\n+  @Test\n+  public void testGetScheme() {\n+    // Tests azfs paths.\n+    assertEquals(\n+        \"azfs\", AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\").getScheme());\n+    // Tests bucket with no ending '/'.\n+    assertEquals(\"azfs\", AzfsResourceId.fromUri(\"azfs://account/container\").getScheme());\n+  }\n+\n+  @Test\n+  public void testGetFilename() {\n+    assertNull(AzfsResourceId.fromUri(\"azfs://account/container\").getFilename());\n+    assertEquals(\"blob\", AzfsResourceId.fromUri(\"azfs://account/container/blob\").getFilename());\n+    assertEquals(\"blob\", AzfsResourceId.fromUri(\"azfs://account/container/blob/\").getFilename());\n+    assertEquals(\n+        \"blob\", AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob\").getFilename());\n+    assertEquals(\n+        \"blob\", AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob/\").getFilename());\n+    assertEquals(\n+        \"blob.txt\",\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob.txt/\").getFilename());\n+  }\n+\n+  @Test\n+  public void testContainerParsing() {\n+    AzfsResourceId path1 = AzfsResourceId.fromUri(\"azfs://account/container\");\n+    AzfsResourceId path2 = AzfsResourceId.fromUri(\"azfs://account/container/\");\n+    assertEquals(path1, path2);\n+    assertEquals(path1.toString(), path2.toString());\n+  }\n+\n+  @Test\n+  public void testAzfsResourceIdToString() {\n+    String filename = \"azfs://account/container/dir/file.txt\";\n+    AzfsResourceId path = AzfsResourceId.fromUri(filename);\n+    assertEquals(filename, path.toString());\n+\n+    filename = \"azfs://account/container/blob/\";\n+    path = AzfsResourceId.fromUri(filename);\n+    assertEquals(filename, path.toString());\n+\n+    filename = \"azfs://account/container/\";\n+    path = AzfsResourceId.fromUri(filename);\n+    assertEquals(filename, path.toString());\n+  }\n+\n+  @Test\n+  public void testInvalidAzfsResourceId() {\n+    thrown.expect(IllegalArgumentException.class);\n+    AzfsResourceId.fromUri(\"file://an/invalid/azfs/path\");\n+  }\n+\n+  @Test\n+  public void testInvalidContainer() {\n+    thrown.expect(IllegalArgumentException.class);\n+    AzfsResourceId.fromComponents(\"account\", \"invalid/\", \"\");\n+  }\n+\n+  @Test\n+  public void testResourceIdTester() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e56f4df5fd958d68018a629f7d74c5eba860423"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1OTQzNQ==", "bodyText": "Let's remove this dependency for now, as we're not really using it.\nLet's also remove azure-storage-blob:12.6.0 until we start using it.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459059435", "createdAt": "2020-07-22T20:20:50Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/azure/build.gradle", "diffHunk": "@@ -17,7 +17,11 @@\n  */\n \n plugins { id 'org.apache.beam.module' }\n-applyJavaNature(automaticModuleName: 'org.apache.beam.sdk.io.azure')\n+applyJavaNature(automaticModuleName: 'org.apache.beam.sdk.io.azure', enableChecker: false)\n \n dependencies {\n+  compile \"com.azure:azure-storage-blob:12.6.0\"\n+  compile project(path: \":sdks:java:core\", configuration: \"shadow\")\n+  compile \"com.azure:azure-identity:1.0.8\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0a0ad7f4b2013f39958c54350e1dc5929b1f5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MDg3Mw==", "bodyText": "Update comment, heh.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Tests for common gcs paths.\n          \n          \n            \n                // Tests for common Azure paths.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459070873", "createdAt": "2020-07-22T20:42:37Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common gcs paths.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f0a0ad7f4b2013f39958c54350e1dc5929b1f5"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21813a99489e08ffcbaee61dcc2463b54831db9c", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/21813a99489e08ffcbaee61dcc2463b54831db9c", "committedDate": "2020-07-22T20:55:24Z", "message": "fix typo in comment\n\nCo-authored-by: Pablo <pabloem@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f4c5c0261db75be99cf7625702eb2fb55a25fc0", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/7f4c5c0261db75be99cf7625702eb2fb55a25fc0", "committedDate": "2020-07-22T20:57:07Z", "message": "removed empty method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b13869f99a5006029bb3c81a4becbbf585fd58b9", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/b13869f99a5006029bb3c81a4becbbf585fd58b9", "committedDate": "2020-07-22T20:58:50Z", "message": "no change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eddd2c74dd7018aae11eb78aac31ba1406c2e205", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/eddd2c74dd7018aae11eb78aac31ba1406c2e205", "committedDate": "2020-07-22T20:58:53Z", "message": "Merge branch 'azure-resourceid' of https://github.com/ettirapp/beam into azure-resourceid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09852c0b4d9109a7aee0c12c13a29ea76851620d", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/09852c0b4d9109a7aee0c12c13a29ea76851620d", "committedDate": "2020-07-22T21:04:53Z", "message": "removed unused dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjk2ODI0", "url": "https://github.com/apache/beam/pull/12335#pullrequestreview-453696824", "createdAt": "2020-07-22T21:25:23Z", "commit": {"oid": "09852c0b4d9109a7aee0c12c13a29ea76851620d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de418f69067196820fb457fd618057c14b4e71af", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/de418f69067196820fb457fd618057c14b4e71af", "committedDate": "2020-07-22T22:09:52Z", "message": "removed a comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0c172c56dd8ad1e87bf9b44d6da4c73ea12b358", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/e0c172c56dd8ad1e87bf9b44d6da4c73ea12b358", "committedDate": "2020-07-22T22:12:35Z", "message": "cleaning comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/87e3c906972eaa0165dd3f2e172edc57f68dbbee", "committedDate": "2020-07-22T22:17:15Z", "message": "applied spotless to fix formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzI5MTI3", "url": "https://github.com/apache/beam/pull/12335#pullrequestreview-453729127", "createdAt": "2020-07-22T22:28:49Z", "commit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoyODo1MFrOG12byw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzozMzowOVrOG13wTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExOTU2Mw==", "bodyText": "Any reason that we want to disable enableChecker?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459119563", "createdAt": "2020-07-22T22:28:50Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/build.gradle", "diffHunk": "@@ -17,7 +17,9 @@\n  */\n \n plugins { id 'org.apache.beam.module' }\n-applyJavaNature(automaticModuleName: 'org.apache.beam.sdk.io.azure')\n+applyJavaNature(automaticModuleName: 'org.apache.beam.sdk.io.azure', enableChecker: false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNDE2Nw==", "bodyText": "What if blob is empty?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459124167", "createdAt": "2020-07-22T22:41:27Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNTY1Mg==", "bodyText": "It seems like this function is not called anywhere. Also what if blob is null?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459125652", "createdAt": "2020-07-22T22:45:30Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNjE2Mw==", "bodyText": "It seems like this function is not used?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459126163", "createdAt": "2020-07-22T22:46:58Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNjY0OQ==", "bodyText": "What if blob is empty?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459126649", "createdAt": "2020-07-22T22:48:19Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {\n+    Matcher m = GLOB_PREFIX.matcher(blob);\n+    checkArgument(m.matches(), String.format(\"Glob expression: [%s] is not expandable.\", blob));\n+    return m.group(\"PREFIX\");\n+  }\n+\n+  @Override\n+  public ResourceId getCurrentDirectory() {\n+    if (isDirectory()) {\n+      return this;\n+    }\n+    if (blob.lastIndexOf('/') == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNzk0Mw==", "bodyText": "You could use Objects.equals(): https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#equals-java.lang.Object-java.lang.Object-", "url": "https://github.com/apache/beam/pull/12335#discussion_r459127943", "createdAt": "2020-07-22T22:52:01Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {\n+    Matcher m = GLOB_PREFIX.matcher(blob);\n+    checkArgument(m.matches(), String.format(\"Glob expression: [%s] is not expandable.\", blob));\n+    return m.group(\"PREFIX\");\n+  }\n+\n+  @Override\n+  public ResourceId getCurrentDirectory() {\n+    if (isDirectory()) {\n+      return this;\n+    }\n+    if (blob.lastIndexOf('/') == -1) {\n+      return fromComponents(account, container);\n+    }\n+    return fromComponents(account, container, blob.substring(0, blob.lastIndexOf('/') + 1));\n+  }\n+\n+  @Nullable\n+  @Override\n+  public String getFilename() {\n+    if (blob == null) {\n+      return null;\n+    }\n+    if (!isDirectory()) {\n+      return blob.substring(blob.lastIndexOf('/') + 1);\n+    }\n+    String blobWithoutTrailingSlash = blob.substring(0, blob.length() - 1);\n+    return blobWithoutTrailingSlash.substring(blobWithoutTrailingSlash.lastIndexOf('/') + 1);\n+  }\n+\n+  // TODO: ensure that this function lines up with what the filesystem match method expects\n+  @Override\n+  public String toString() {\n+    if (blob != null) {\n+      return String.format(\"%s://%s/%s/%s\", SCHEME, account, container, blob);\n+    }\n+    return String.format(\"%s://%s/%s/\", SCHEME, account, container);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (!(obj instanceof AzfsResourceId)) {\n+      return false;\n+    }\n+    String otherBlob = ((AzfsResourceId) obj).blob;\n+    boolean equalBlob = blob != null && otherBlob != null && blob.equals(otherBlob);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyOTE4MQ==", "bodyText": "Add // TODO? Or you may want to have this file together with the file system changes later.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459129181", "createdAt": "2020-07-22T22:55:26Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemRegistrar.java", "diffHunk": "@@ -15,3 +15,20 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nonnull;\n+import org.apache.beam.sdk.io.FileSystem;\n+import org.apache.beam.sdk.io.FileSystemRegistrar;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+public class AzureBlobStoreFileSystemRegistrar implements FileSystemRegistrar {\n+  @Override\n+  public Iterable<FileSystem> fromOptions(@Nonnull PipelineOptions options) {\n+    checkNotNull(options, \"Expect the runner have called FileSystems.setDefaultPipelineOptions().\");\n+    return ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMTA5NA==", "bodyText": "Minor: You could do this by using Parameterized  but it's up to you.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459131094", "createdAt": "2020-07-22T23:01:02Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMjE1OQ==", "bodyText": "Why do we want to compare a and a?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459132159", "createdAt": "2020-07-22T23:04:24Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common Azure paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMzczMA==", "bodyText": "assertNotEquals(a, b) means the same as ``assertNotEquals(b, a)", "url": "https://github.com/apache/beam/pull/12335#discussion_r459133730", "createdAt": "2020-07-22T23:09:40Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common Azure paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);\n+    assertEquals(a, b);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"a/b/c/\");\n+    assertNotEquals(a, b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNDA1NA==", "bodyText": "Please also test when blob is null and when blob is empty.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459134054", "createdAt": "2020-07-22T23:10:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common Azure paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);\n+    assertEquals(a, b);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"a/b/c/\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"x/y/z\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), \"other-container\", a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(\"other-account\", a.getContainer(), a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\"));\n+  }\n+\n+  @Test\n+  public void testFromComponents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNTk5Ng==", "bodyText": "It seems like this function is not used.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459135996", "createdAt": "2020-07-22T23:16:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {\n+    Matcher m = GLOB_PREFIX.matcher(blob);\n+    checkArgument(m.matches(), String.format(\"Glob expression: [%s] is not expandable.\", blob));\n+    return m.group(\"PREFIX\");\n+  }\n+\n+  @Override\n+  public ResourceId getCurrentDirectory() {\n+    if (isDirectory()) {\n+      return this;\n+    }\n+    if (blob.lastIndexOf('/') == -1) {\n+      return fromComponents(account, container);\n+    }\n+    return fromComponents(account, container, blob.substring(0, blob.lastIndexOf('/') + 1));\n+  }\n+\n+  @Nullable\n+  @Override\n+  public String getFilename() {\n+    if (blob == null) {\n+      return null;\n+    }\n+    if (!isDirectory()) {\n+      return blob.substring(blob.lastIndexOf('/') + 1);\n+    }\n+    String blobWithoutTrailingSlash = blob.substring(0, blob.length() - 1);\n+    return blobWithoutTrailingSlash.substring(blobWithoutTrailingSlash.lastIndexOf('/') + 1);\n+  }\n+\n+  // TODO: ensure that this function lines up with what the filesystem match method expects\n+  @Override\n+  public String toString() {\n+    if (blob != null) {\n+      return String.format(\"%s://%s/%s/%s\", SCHEME, account, container, blob);\n+    }\n+    return String.format(\"%s://%s/%s/\", SCHEME, account, container);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (!(obj instanceof AzfsResourceId)) {\n+      return false;\n+    }\n+    String otherBlob = ((AzfsResourceId) obj).blob;\n+    boolean equalBlob = blob != null && otherBlob != null && blob.equals(otherBlob);\n+    boolean noBlobs = blob == null && otherBlob == null;\n+    return account.equals(((AzfsResourceId) obj).account)\n+        && container.equals(((AzfsResourceId) obj).container)\n+        && (equalBlob || noBlobs);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(account, container, blob);\n+  }\n+\n+  @Override\n+  public ResourceId resolve(String other, ResolveOptions resolveOptions) {\n+    checkState(isDirectory(), \"Expected this resource to be a directory, but was [%s]\", toString());\n+    // TODO: check if resolve options are an illegal name in any way, see:\n+    // https://docs.microsoft.com/en-us/rest/api/storageservices/Naming-and-Referencing-Containers--Blobs--and-Metadata\n+\n+    if (resolveOptions == ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY) {\n+      if (\"..\".equals(other)) {\n+        if (\"/\".equals(blob)) {\n+          return this;\n+        }\n+        int parentStopsAt = blob.substring(0, blob.length() - 1).lastIndexOf('/');\n+        return fromComponents(account, container, blob.substring(0, parentStopsAt + 1));\n+      }\n+\n+      if (\"\".equals(other)) {\n+        return this;\n+      }\n+\n+      if (!other.endsWith(\"/\")) {\n+        other += \"/\";\n+      }\n+      if (AZFS_URI.matcher(other).matches()) {\n+        return fromUri(other);\n+      }\n+      if (blob == null) {\n+        return fromComponents(account, container, other);\n+      }\n+      return fromComponents(account, container, blob + other);\n+    }\n+\n+    if (resolveOptions == ResolveOptions.StandardResolveOptions.RESOLVE_FILE) {\n+      checkArgument(\n+          !other.endsWith(\"/\"), \"Cannot resolve a file with a directory path: [%s]\", other);\n+      checkArgument(!\"..\".equals(other), \"Cannot resolve parent as file: [%s]\", other);\n+      if (AZFS_URI.matcher(other).matches()) {\n+        return fromUri(other);\n+      }\n+      if (blob == null) {\n+        return fromComponents(account, container, other);\n+      }\n+      return fromComponents(account, container, blob + other);\n+    }\n+\n+    throw new UnsupportedOperationException(\n+        String.format(\"Unexpected StandardResolveOptions [%s]\", resolveOptions));\n+  }\n+\n+  // url format to interact with Azure\n+  public String toAzureUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MTE5OA==", "bodyText": "Remove the empty file?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459141198", "createdAt": "2020-07-22T23:33:09Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemTest.java", "diffHunk": "@@ -15,3 +15,4 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.beam.sdk.io.azure.blobstore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46a3719e23e11866b545b764efbd505f6e063b80", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/46a3719e23e11866b545b764efbd505f6e063b80", "committedDate": "2020-07-23T00:09:12Z", "message": "dealt with empty blob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf523b311eaa0cc54176717f2b01ba6b6aecf767", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/bf523b311eaa0cc54176717f2b01ba6b6aecf767", "committedDate": "2020-07-23T00:11:21Z", "message": "removed empty file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e019c91ccf7d71922c8d484f2f1061a33e203159", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/e019c91ccf7d71922c8d484f2f1061a33e203159", "committedDate": "2020-07-23T00:25:44Z", "message": "updated testFromComponents to test null/empty blobs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f680778044c1f71e08f697c043e97fea37ee2d", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/a2f680778044c1f71e08f697c043e97fea37ee2d", "committedDate": "2020-07-23T00:29:02Z", "message": "applied spotless to fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c77aa0725af05cc2c48a1c7faa0ccbf5db38aade", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/c77aa0725af05cc2c48a1c7faa0ccbf5db38aade", "committedDate": "2020-07-23T00:32:42Z", "message": "removed duplicate tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74bc1458e2aa79b57eb037e888fd56563e2e9cf", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/a74bc1458e2aa79b57eb037e888fd56563e2e9cf", "committedDate": "2020-07-23T00:39:35Z", "message": "cleaned up equals method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b91ebd5b848fa18a16005f937b07ee45861a42e", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/5b91ebd5b848fa18a16005f937b07ee45861a42e", "committedDate": "2020-07-23T00:42:38Z", "message": "added TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5c23740e25bc65f75a974bdc60fab030f4217df", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/e5c23740e25bc65f75a974bdc60fab030f4217df", "committedDate": "2020-07-23T00:52:56Z", "message": "added tests for isWildcard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a682fa5ada15e4942429f6cdf1420ccdc646b86b", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/a682fa5ada15e4942429f6cdf1420ccdc646b86b", "committedDate": "2020-07-23T00:56:50Z", "message": "dealing will null blob in isWildcard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d53270812a8543ed5101ba1c96435083b527f09", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/3d53270812a8543ed5101ba1c96435083b527f09", "committedDate": "2020-07-23T00:59:01Z", "message": "removed extra test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7359dd202ba3bda129c17d9b9c40913fba9e4f9", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/a7359dd202ba3bda129c17d9b9c40913fba9e4f9", "committedDate": "2020-07-23T01:17:16Z", "message": "removed unused methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzg0MzUy", "url": "https://github.com/apache/beam/pull/12335#pullrequestreview-453784352", "createdAt": "2020-07-23T01:13:37Z", "commit": {"oid": "3d53270812a8543ed5101ba1c96435083b527f09"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToxMzozN1rOG15XgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToxMzozN1rOG15XgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NzYxNg==", "bodyText": "The constructor will take care of this , right?", "url": "https://github.com/apache/beam/pull/12335#discussion_r459167616", "createdAt": "2020-07-23T01:13:37Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    if (blob == null || blob.isEmpty()) {\n+      this.blob = null;\n+    } else {\n+      this.blob = blob;\n+    }\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d53270812a8543ed5101ba1c96435083b527f09"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "135e50505962986149f1e0adc9a67f364bf92fdd", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/135e50505962986149f1e0adc9a67f364bf92fdd", "committedDate": "2020-07-23T01:33:21Z", "message": "removed extra code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbbc535b2cbeadc374057833364009d6bef11b1c", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/fbbc535b2cbeadc374057833364009d6bef11b1c", "committedDate": "2020-07-23T02:31:00Z", "message": "rewrote resolve test using parameterized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b6b5ce061a5677935d705468cf4e9721381a4d", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/15b6b5ce061a5677935d705468cf4e9721381a4d", "committedDate": "2020-07-23T02:41:45Z", "message": "deleted extra code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a182bba14e986ffccd8be0f91f57ac4b07d512e", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/3a182bba14e986ffccd8be0f91f57ac4b07d512e", "committedDate": "2020-07-23T02:54:46Z", "message": "rearranged tests for clarity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODE0MTU4", "url": "https://github.com/apache/beam/pull/12335#pullrequestreview-453814158", "createdAt": "2020-07-23T03:19:04Z", "commit": {"oid": "3a182bba14e986ffccd8be0f91f57ac4b07d512e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoxOTowNFrOG17A5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoyOTowMVrOG17I4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA==", "bodyText": "It should be @RunWith(Enclosed.class) to make sure inner test classes to be picked up.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459194598", "createdAt": "2020-07-23T03:19:04Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a182bba14e986ffccd8be0f91f57ac4b07d512e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NjY0Mw==", "bodyText": "The annotation @Parameterized.Parameter can be used to avoid creating constructor. But having constructor is also good. It's up to you.", "url": "https://github.com/apache/beam/pull/12335#discussion_r459196643", "createdAt": "2020-07-23T03:29:01Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  @RunWith(Parameterized.class)\n+  public static class ResolveTest {\n+\n+    private String baseUri;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a182bba14e986ffccd8be0f91f57ac4b07d512e"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e01b54a63509b2502fb1498457fe855aac10d9", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/b4e01b54a63509b2502fb1498457fe855aac10d9", "committedDate": "2020-07-23T14:04:29Z", "message": "removed constructor in parameterized"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0Mjk3MDI4", "url": "https://github.com/apache/beam/pull/12335#pullrequestreview-454297028", "createdAt": "2020-07-23T16:21:01Z", "commit": {"oid": "b4e01b54a63509b2502fb1498457fe855aac10d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c18efa44ee53580070723f73627cfc3a3f37052", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/1c18efa44ee53580070723f73627cfc3a3f37052", "committedDate": "2020-07-23T17:31:27Z", "message": "separating tests into parameterized and non-parameterized - work in progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "045580b758d45de0256528e74432eab54d5dc8b5", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/045580b758d45de0256528e74432eab54d5dc8b5", "committedDate": "2020-07-23T17:35:47Z", "message": "applied spotless. work in progress."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzcwNDI0", "url": "https://github.com/apache/beam/pull/12335#pullrequestreview-454370424", "createdAt": "2020-07-23T17:58:30Z", "commit": {"oid": "045580b758d45de0256528e74432eab54d5dc8b5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1ODozMFrOG2Vi-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1ODo0OVrOG2VjpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyOTMwNw==", "bodyText": "Please move this under the scope of NonParameterizedTests", "url": "https://github.com/apache/beam/pull/12335#discussion_r459629307", "createdAt": "2020-07-23T17:58:30Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045580b758d45de0256528e74432eab54d5dc8b5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyOTQ3Nw==", "bodyText": "Now you should change it to @RunWith(Enclosed.class)", "url": "https://github.com/apache/beam/pull/12335#discussion_r459629477", "createdAt": "2020-07-23T17:58:49Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}, "originalCommit": {"oid": "3a182bba14e986ffccd8be0f91f57ac4b07d512e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7217225a68a744ac3fa0cfe6981127abc01575f4", "author": {"user": {"login": "ettirapp", "name": "Etta Newman"}}, "url": "https://github.com/apache/beam/commit/7217225a68a744ac3fa0cfe6981127abc01575f4", "committedDate": "2020-07-23T18:02:38Z", "message": "changed scope of thrown variable"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3875, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}