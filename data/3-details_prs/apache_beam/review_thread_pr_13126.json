{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjg5NDc5", "number": 13126, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzo0MToyMFrOEutemA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzo0ODoxOVrOEuthtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDE1MDY0OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/dataframe/convert.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzo0MToyMFrOHjSbTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzo0MToyMFrOHjSbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NDEwOA==", "bodyText": "whoops, glad you noticed the typo I missed the first time around.", "url": "https://github.com/apache/beam/pull/13126#discussion_r506764108", "createdAt": "2020-10-16T23:41:20Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -112,23 +118,7 @@ def to_pcollection(\n   if label is None:\n     # Attempt to come up with a reasonable, stable label by retrieving the name\n     # of these variables in the calling context.\n-    current_frame = inspect.currentframe()\n-    if current_frame is None:\n-      label = 'ToDataframe(...)'\n-\n-    else:\n-      previous_frame = current_frame.f_back\n-\n-      def name(obj):\n-        for key, value in previous_frame.f_locals.items():\n-          if obj is value:\n-            return key\n-        for key, value in previous_frame.f_globals.items():\n-          if obj is value:\n-            return key\n-        return '...'\n-\n-      label = 'ToDataframe(%s)' % ', '.join(name(e) for e in dataframes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f48cbd8a3de7a67bd84e5fd1e2ef2da9452ee59"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDE1ODYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/schemas.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzo0ODoxOVrOHjSfyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoxNTo0NVrOHoaHLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTI1Nw==", "bodyText": "I think this should just generate the proxy from pcoll.element_type in expand. I don't know if there's a good way to retrieve it in to_pcollection though... it could just be re-generated, or memoized.\nThis is one reason I was thinking about a pandas typehint. If we had that this transform could annotate the output PC with a typehint containing the proxy and to_pcollection would be able to retrieve it.", "url": "https://github.com/apache/beam/pull/13126#discussion_r506765257", "createdAt": "2020-10-16T23:48:19Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -146,15 +146,21 @@ class BatchRowsAsDataFrame(beam.PTransform):\n   Batching parameters are inherited from\n   :class:`~apache_beam.transforms.util.BatchElements`.\n   \"\"\"\n-  def __init__(self, *args, **kwargs):\n+  def __init__(self, *args, proxy, **kwargs):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f48cbd8a3de7a67bd84e5fd1e2ef2da9452ee59"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNzU5Ng==", "bodyText": "I think it's preferable to compute it in one place and pass the desired shape around elsewhere. In addition, this opens the possibility that the user may want to manually specify a shape that cannot be inferred (or would be inferred differently, e.g. the user wants a Series of floats and passes a PCollection of float-convertable things). Granted we don't yet expose that to the public API, but it would make sense in the future.", "url": "https://github.com/apache/beam/pull/13126#discussion_r507917596", "createdAt": "2020-10-19T17:12:59Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -146,15 +146,21 @@ class BatchRowsAsDataFrame(beam.PTransform):\n   Batching parameters are inherited from\n   :class:`~apache_beam.transforms.util.BatchElements`.\n   \"\"\"\n-  def __init__(self, *args, **kwargs):\n+  def __init__(self, *args, proxy, **kwargs):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTI1Nw=="}, "originalCommit": {"oid": "2f48cbd8a3de7a67bd84e5fd1e2ef2da9452ee59"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkyNTk0MQ==", "bodyText": "Yeah definitely preferable to generate once... what if we make this proxy=None for now, with default behavior to generate the proxy. In the future we could consider propagating that proxy to DataframeTransform through a typehint to remove the need for generating it in to_pcollection", "url": "https://github.com/apache/beam/pull/13126#discussion_r508925941", "createdAt": "2020-10-21T00:53:43Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -146,15 +146,21 @@ class BatchRowsAsDataFrame(beam.PTransform):\n   Batching parameters are inherited from\n   :class:`~apache_beam.transforms.util.BatchElements`.\n   \"\"\"\n-  def __init__(self, *args, **kwargs):\n+  def __init__(self, *args, proxy, **kwargs):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTI1Nw=="}, "originalCommit": {"oid": "2f48cbd8a3de7a67bd84e5fd1e2ef2da9452ee59"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzMjkxMA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13126#discussion_r512132910", "createdAt": "2020-10-26T17:15:45Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -146,15 +146,21 @@ class BatchRowsAsDataFrame(beam.PTransform):\n   Batching parameters are inherited from\n   :class:`~apache_beam.transforms.util.BatchElements`.\n   \"\"\"\n-  def __init__(self, *args, **kwargs):\n+  def __init__(self, *args, proxy, **kwargs):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2NTI1Nw=="}, "originalCommit": {"oid": "2f48cbd8a3de7a67bd84e5fd1e2ef2da9452ee59"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3011, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}