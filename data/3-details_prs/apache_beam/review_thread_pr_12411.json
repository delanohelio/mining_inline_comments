{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTkzNzUx", "number": 12411, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNToxOVrOETaRwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNToxOVrOETaRwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzg4OTI5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/options/capture_limiters.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNToxOVrOG5IgGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo1ODowOFrOG5NIvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MTMwNg==", "bodyText": "nit: would it be simpler if we default this to 0 rather than None? It would let us eliminate the None checks in the methods.", "url": "https://github.com/apache/beam/pull/12411#discussion_r462561306", "createdAt": "2020-07-29T20:15:19Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_limiters.py", "diffHunk": "@@ -71,3 +87,62 @@ def _trigger(self):\n \n   def is_triggered(self):\n     return self._triggered\n+\n+\n+class CountLimiter(ElementLimiter):\n+  \"\"\"Limits by counting the number of elements seen.\"\"\"\n+  def __init__(self, max_count):\n+    self._max_count = max_count\n+    self._count = 0\n+\n+  def update(self, e):\n+    # A TestStreamFileRecord can contain many elements at once. If e is a file\n+    # record, then count the number of elements in the bundle.\n+    if isinstance(e, TestStreamFileRecord):\n+      if not e.recorded_event.element_event:\n+        return\n+      self._count += len(e.recorded_event.element_event.elements)\n+\n+    # Otherwise, count everything else but the header of the file since it is\n+    # not an element.\n+    elif not isinstance(e, TestStreamFileHeader):\n+      self._count += 1\n+\n+  def is_triggered(self):\n+    return self._count >= self._max_count\n+\n+\n+class ProcessingTimeLimiter(ElementLimiter):\n+  \"\"\"Limits by how long the ProcessingTime passed in the element stream.\n+\n+  This measures the duration from either a constructor argument or from the\n+  first element in the stream. Each subsequent element has a delta\n+  \"advance_duration\" that moves the internal clock forward. This triggers when\n+  the duration from the internal clock and the start exceeds the given duration.\n+  \"\"\"\n+  def __init__(self, max_duration_secs, start_secs=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a25b7a0ce4d7547f0eaf8ffd31bf793fefecddb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzI0Nw==", "bodyText": "Ack. I looked around and I wasn't using the start parameter, so I removed it.", "url": "https://github.com/apache/beam/pull/12411#discussion_r462637247", "createdAt": "2020-07-29T22:58:08Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_limiters.py", "diffHunk": "@@ -71,3 +87,62 @@ def _trigger(self):\n \n   def is_triggered(self):\n     return self._triggered\n+\n+\n+class CountLimiter(ElementLimiter):\n+  \"\"\"Limits by counting the number of elements seen.\"\"\"\n+  def __init__(self, max_count):\n+    self._max_count = max_count\n+    self._count = 0\n+\n+  def update(self, e):\n+    # A TestStreamFileRecord can contain many elements at once. If e is a file\n+    # record, then count the number of elements in the bundle.\n+    if isinstance(e, TestStreamFileRecord):\n+      if not e.recorded_event.element_event:\n+        return\n+      self._count += len(e.recorded_event.element_event.elements)\n+\n+    # Otherwise, count everything else but the header of the file since it is\n+    # not an element.\n+    elif not isinstance(e, TestStreamFileHeader):\n+      self._count += 1\n+\n+  def is_triggered(self):\n+    return self._count >= self._max_count\n+\n+\n+class ProcessingTimeLimiter(ElementLimiter):\n+  \"\"\"Limits by how long the ProcessingTime passed in the element stream.\n+\n+  This measures the duration from either a constructor argument or from the\n+  first element in the stream. Each subsequent element has a delta\n+  \"advance_duration\" that moves the internal clock forward. This triggers when\n+  the duration from the internal clock and the start exceeds the given duration.\n+  \"\"\"\n+  def __init__(self, max_duration_secs, start_secs=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MTMwNg=="}, "originalCommit": {"oid": "0a25b7a0ce4d7547f0eaf8ffd31bf793fefecddb"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 728, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}