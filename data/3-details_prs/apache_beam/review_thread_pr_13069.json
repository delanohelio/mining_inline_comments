{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODc5NjE2", "number": 13069, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoyMzo1OVrOEsU2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozODowNVrOEw71-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTE0MzIwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoyMzo1OVrOHfjHqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowODoxNlrOHgWrgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw==", "bodyText": "Currently the shard id is encoded using a ByteArrayCoder which uses a VarInt coder to encode/decode the length in 32bits. That is consistent with the parsing logic in the unified worker. But in Python we seem to be using 64bits  (e.g., VarIntCoder). Should I make it consistent by explicitly encoding / decoding a long value here?", "url": "https://github.com/apache/beam/pull/13069#discussion_r502843307", "createdAt": "2020-10-10T23:23:59Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "925b27a38305a3aff18f0d1edd4583d43ae20fc4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNzcyMg==", "bodyText": "The coder specification is underspecified as to how large the var int can be:\n\n  \n    \n      beam/model/pipeline/src/main/proto/beam_runner_api.proto\n    \n    \n         Line 673\n      in\n      eb75286\n    \n    \n    \n    \n\n        \n          \n           BYTES = 0 [(beam_urn) = \"beam:coder:bytes:v1\"]; \n        \n    \n  \n\n\nJava can't support byte[] greater then 2^31-1 in size. Also note that a varint64 coder and varint32 coder share the same encoding for all values from [0, 2^31-1] so this is unlikely to become an issue for shard id encoding so can you can ignore this for now.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503427722", "createdAt": "2020-10-12T17:10:00Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw=="}, "originalCommit": {"oid": "925b27a38305a3aff18f0d1edd4583d43ae20fc4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MDM1Nw==", "bodyText": "The two encodings are the same for all values in the range we'll be dealing with (and neither Java nor GRPC can handle >4G sized byte arrays) so we should be fine here.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503480357", "createdAt": "2020-10-12T19:03:24Z", "author": {"login": "robertwb"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw=="}, "originalCommit": {"oid": "925b27a38305a3aff18f0d1edd4583d43ae20fc4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODA2NA==", "bodyText": "Cool! Thanks for confirming.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688064", "createdAt": "2020-10-13T06:08:16Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw=="}, "originalCommit": {"oid": "925b27a38305a3aff18f0d1edd4583d43ae20fc4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzE5MTk3OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzowMzo1OFrOHgGnWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMTo1M1rOHgWw0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNDg1OA==", "bodyText": "Can you remove the irrelevant whitespace changes?", "url": "https://github.com/apache/beam/pull/13069#discussion_r503424858", "createdAt": "2020-10-12T17:03:58Z", "author": {"login": "robertwb"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1215,23 +1243,23 @@ message StandardArtifacts {\n   enum Types {\n     // A URN for locally-accessible artifact files.\n     // payload: ArtifactFilePayload\n-    FILE      = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];\n+    FILE = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTQyNA==", "bodyText": "Removed.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503689424", "createdAt": "2020-10-13T06:11:53Z", "author": {"login": "nehsyc"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1215,23 +1243,23 @@ message StandardArtifacts {\n   enum Types {\n     // A URN for locally-accessible artifact files.\n     // payload: ArtifactFilePayload\n-    FILE      = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];\n+    FILE = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNDg1OA=="}, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzE5MzM1OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/CommonCoderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzowNDoyMFrOHgGoGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowOTozNVrOHgWtSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNTA1MQ==", "bodyText": "There seems to be lots of whitespace changes in this file (and elsewhere).", "url": "https://github.com/apache/beam/pull/13069#discussion_r503425051", "createdAt": "2020-10-12T17:04:20Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/CommonCoderTest.java", "diffHunk": "@@ -89,6 +90,7 @@\n /** Tests that Java SDK coders standardized by the Fn API meet the common spec. */\n @RunWith(Parameterized.class)\n public class CommonCoderTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODUyMA==", "bodyText": "Oops. Happened to apply IntelliJ's auto format. Reverted.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688520", "createdAt": "2020-10-13T06:09:35Z", "author": {"login": "nehsyc"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/CommonCoderTest.java", "diffHunk": "@@ -89,6 +90,7 @@\n /** Tests that Java SDK coders standardized by the Fn API meet the common spec. */\n @RunWith(Parameterized.class)\n public class CommonCoderTest {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNTA1MQ=="}, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzIyODgxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoxNjoyMlrOHgG-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowODoyNlrOHgWrug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDczMA==", "bodyText": "I thought we were going to use the empty byte array as the default and not differentiate null.\nIt will remove an if from encode/decode logic and also save one byte in the encoded representation.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503430730", "createdAt": "2020-10-12T17:16:22Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODEyMg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688122", "createdAt": "2020-10-13T06:08:26Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDczMA=="}, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzIzOTkxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoyMDoxM1rOHgHFAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowODo1MVrOHgWsQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjQ1MQ==", "bodyText": "Please also implement structuralValue, verifyDeterministic, consistentWithEquals, isRegisterByteSizeObserverCheap.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503432451", "createdAt": "2020-10-12T17:20:13Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);\n+      }\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      if (!BooleanCoder.of().decode(inStream)) {\n+        K key = keyCoder.decode(inStream);\n+        return ShardedKey.of(key, null);\n+      }\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getComponents() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      verifyDeterministic(this, \"Key coder must be deterministic\", keyCoder);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODI1OQ==", "bodyText": "Done. Did not use the StructuralByteArray for shard id. Seems fine since AutoValue does compare values of bytes array as opposed to object identity.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688259", "createdAt": "2020-10-13T06:08:51Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);\n+      }\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      if (!BooleanCoder.of().decode(inStream)) {\n+        K key = keyCoder.decode(inStream);\n+        return ShardedKey.of(key, null);\n+      }\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getComponents() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      verifyDeterministic(this, \"Key coder must be deterministic\", keyCoder);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjQ1MQ=="}, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzI0MTY4OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzoyMDo0OFrOHgHGFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowODo1NFrOHgWsXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjcyNQ==", "bodyText": "This is already implemented in StructuredCoder.java, no point in duplicating.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503432725", "createdAt": "2020-10-12T17:20:48Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);\n+      }\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      if (!BooleanCoder.of().decode(inStream)) {\n+        K key = keyCoder.decode(inStream);\n+        return ShardedKey.of(key, null);\n+      }\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getComponents() {\n+      return Collections.singletonList(keyCoder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODI4NA==", "bodyText": "Removed.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688284", "createdAt": "2020-10-13T06:08:54Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);\n+      }\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      if (!BooleanCoder.of().decode(inStream)) {\n+        K key = keyCoder.decode(inStream);\n+        return ShardedKey.of(key, null);\n+      }\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getComponents() {\n+      return Collections.singletonList(keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjcyNQ=="}, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzU1NDkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTowNDoyNlrOHgKByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjoxMToyM1rOHgWwCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MDc3Nw==", "bodyText": "Are we leveraging AutoValue for hash and equality? If so, I don't think that'll work with byte[] here.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503480777", "createdAt": "2020-10-12T19:04:26Z", "author": {"login": "robertwb"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIyNA==", "bodyText": "Yes. AutoValue seems to be doing a reasonable job for byte[]. It uses Arrays.hashCode and Arrays.equals for has and equality.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503689224", "createdAt": "2020-10-13T06:11:23Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MDc3Nw=="}, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzU2MjA1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/portability/api/standard_coders.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTowNzowMFrOHgKGDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjowOTozMVrOHgWtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MTg2OQ==", "bodyText": "We shouldn't add this, it should be copied on demand. Otherwise things may diverge which defeats the purpose of standard coders.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503481869", "createdAt": "2020-10-12T19:07:00Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/portability/api/standard_coders.yaml", "diffHunk": "@@ -0,0 +1,410 @@\n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODQ4Mw==", "bodyText": "Deleted.", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688483", "createdAt": "2020-10-13T06:09:31Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/portability/api/standard_coders.yaml", "diffHunk": "@@ -0,0 +1,410 @@\n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MTg2OQ=="}, "originalCommit": {"oid": "0c033272b5324789e17fc359ffc3276c4de8bdb6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzcwOTU4OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxMjowMVrOHgxRTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxMjowMVrOHgxRTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMzcyNg==", "bodyText": "Instead of referencing varInt(len(shard id)) shard id we should just say that the shard id is encoded using beam:coder:bytes:v1\nOther coders descriptions should be more like row where we refer to other well known encodings.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504123726", "createdAt": "2020-10-13T17:12:01Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -879,6 +879,29 @@ message StandardCoders {\n     // Components: None\n     // Experimental.\n     ROW = 13 [(beam_urn) = \"beam:coder:row:v1\"];\n+\n+    // Encodes a use key and a shard id which is an opaque byte string.\n+    //\n+    // The encoding for a sharded key consists of the length prefixed shard id\n+    // and the encoded user key in the following order:\n+    //\n+    //     varInt(len(shard id))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc0ODYwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyMjowMlrOHgxo5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo1OToxMVrOHiX1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTc2NQ==", "bodyText": "In the long run we should aim to replace the existing implementation and its usage within WriteFiles.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504129765", "createdAt": "2020-10-13T17:22:02Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwNDA4OQ==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505804089", "createdAt": "2020-10-15T19:59:11Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTc2NQ=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc2MDc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNToxMVrOHgxwJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo1ODo0NFrOHiX0bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTYyMg==", "bodyText": "the bytearraycoder isn't consistent with equals yet the AutoValue ShardedKey is so we should state that ShardedKey is consistent with equals iff keyCoder is.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return shardCoder.consistentWithEquals() && keyCoder.consistentWithEquals();\n          \n          \n            \n                  return keyCoder.consistentWithEquals();", "url": "https://github.com/apache/beam/pull/13069#discussion_r504131622", "createdAt": "2020-10-13T17:25:11Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();\n+      keyCoder.verifyDeterministic();\n+    }\n+\n+    @Override\n+    public boolean consistentWithEquals() {\n+      return shardCoder.consistentWithEquals() && keyCoder.consistentWithEquals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzg4Ng==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803886", "createdAt": "2020-10-15T19:58:44Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();\n+      keyCoder.verifyDeterministic();\n+    }\n+\n+    @Override\n+    public boolean consistentWithEquals() {\n+      return shardCoder.consistentWithEquals() && keyCoder.consistentWithEquals();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTYyMg=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc2MzI0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coders_test_common.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNTo1MFrOHgxxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDowMDowNVrOHiX3Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjAyOQ==", "bodyText": "Maybe move these to the yaml file so they can be shared among all languages.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504132029", "createdAt": "2020-10-13T17:25:50Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coders_test_common.py", "diffHunk": "@@ -570,6 +571,37 @@ def test_map_coder(self):\n         }, {}, {i: str(i)\n                 for i in range(5000)})\n \n+  def test_sharded_key_coder(self):\n+    coder = coders.ShardedKeyCoder(coders.BytesCoder())\n+    # Verify cloud object representation\n+    self.assertEqual({\n+        '@type': 'kind:sharded_key',\n+        'component_encodings': [coders.BytesCoder().as_cloud_object()]\n+    },\n+                     coder.as_cloud_object())\n+\n+    # Test binary representation\n+    self.assertEqual(b'\\x00\\x00', coder.encode(ShardedKey(b'')))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwNDU4Mg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505804582", "createdAt": "2020-10-15T20:00:05Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coders_test_common.py", "diffHunk": "@@ -570,6 +571,37 @@ def test_map_coder(self):\n         }, {}, {i: str(i)\n                 for i in range(5000)})\n \n+  def test_sharded_key_coder(self):\n+    coder = coders.ShardedKeyCoder(coders.BytesCoder())\n+    # Verify cloud object representation\n+    self.assertEqual({\n+        '@type': 'kind:sharded_key',\n+        'component_encodings': [coders.BytesCoder().as_cloud_object()]\n+    },\n+                     coder.as_cloud_object())\n+\n+    # Test binary representation\n+    self.assertEqual(b'\\x00\\x00', coder.encode(ShardedKey(b'')))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjAyOQ=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc2NDMxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coders_test_common.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNjowOFrOHgxyZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDowMDozN1rOHiX4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjE5Nw==", "bodyText": "Have at least one example with a non-bytes key type?", "url": "https://github.com/apache/beam/pull/13069#discussion_r504132197", "createdAt": "2020-10-13T17:26:08Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coders_test_common.py", "diffHunk": "@@ -570,6 +571,37 @@ def test_map_coder(self):\n         }, {}, {i: str(i)\n                 for i in range(5000)})\n \n+  def test_sharded_key_coder(self):\n+    coder = coders.ShardedKeyCoder(coders.BytesCoder())\n+    # Verify cloud object representation\n+    self.assertEqual({\n+        '@type': 'kind:sharded_key',\n+        'component_encodings': [coders.BytesCoder().as_cloud_object()]\n+    },\n+                     coder.as_cloud_object())\n+\n+    # Test binary representation\n+    self.assertEqual(b'\\x00\\x00', coder.encode(ShardedKey(b'')))\n+    self.assertEqual(b'\\x00\\x03key', coder.encode(ShardedKey(b'key')))\n+    self.assertEqual(b'\\x00\\x00', coder.encode(ShardedKey(b'', b'')))\n+    self.assertEqual(b'\\x03123\\00', coder.encode(ShardedKey(b'', b'123')))\n+    self.assertEqual(b'\\x03123\\03key', coder.encode(ShardedKey(b'key', b'123')))\n+\n+    test_values = [\n+        ShardedKey(b''),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwNDgwMw==", "bodyText": "Added a string type and a tuple type.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505804803", "createdAt": "2020-10-15T20:00:37Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coders_test_common.py", "diffHunk": "@@ -570,6 +571,37 @@ def test_map_coder(self):\n         }, {}, {i: str(i)\n                 for i in range(5000)})\n \n+  def test_sharded_key_coder(self):\n+    coder = coders.ShardedKeyCoder(coders.BytesCoder())\n+    # Verify cloud object representation\n+    self.assertEqual({\n+        '@type': 'kind:sharded_key',\n+        'component_encodings': [coders.BytesCoder().as_cloud_object()]\n+    },\n+                     coder.as_cloud_object())\n+\n+    # Test binary representation\n+    self.assertEqual(b'\\x00\\x00', coder.encode(ShardedKey(b'')))\n+    self.assertEqual(b'\\x00\\x03key', coder.encode(ShardedKey(b'key')))\n+    self.assertEqual(b'\\x00\\x00', coder.encode(ShardedKey(b'', b'')))\n+    self.assertEqual(b'\\x03123\\00', coder.encode(ShardedKey(b'', b'123')))\n+    self.assertEqual(b'\\x03123\\03key', coder.encode(ShardedKey(b'key', b'123')))\n+\n+    test_values = [\n+        ShardedKey(b''),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjE5Nw=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc2NDM0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNjowOVrOHgxyaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo1ODozMVrOHiXz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjIwMA==", "bodyText": "See KvCoder for an example:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  keyCoder.verifyDeterministic();\n          \n          \n            \n                  verifyDeterministic(this, \"Key coder must be deterministic\", keyCoder);", "url": "https://github.com/apache/beam/pull/13069#discussion_r504132200", "createdAt": "2020-10-13T17:26:09Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();\n+      keyCoder.verifyDeterministic();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzc0Ng==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803746", "createdAt": "2020-10-15T19:58:31Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();\n+      keyCoder.verifyDeterministic();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjIwMA=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc2NjYxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNjo0NlrOHgxz0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo1ODoyMFrOHiXzgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjU2MA==", "bodyText": "No point in checking something that is required to be deterministic\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  shardCoder.verifyDeterministic();", "url": "https://github.com/apache/beam/pull/13069#discussion_r504132560", "createdAt": "2020-10-13T17:26:46Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzY1MA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803650", "createdAt": "2020-10-15T19:58:20Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjU2MA=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc3MjE3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyODoyMVrOHgx3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo1Nzo1M1rOHiXypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzQ3NA==", "bodyText": "Please make byte[0] a constant. Please add comment saying that the default shard identifier is the empty byte string.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504133474", "createdAt": "2020-10-13T17:28:21Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzQyOQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803429", "createdAt": "2020-10-15T19:57:53Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzQ3NA=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc3MzA1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/sharded_key.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyODozOFrOHgx4AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo1OTo0OVrOHiX2jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzYzMg==", "bodyText": "You can drop the anding with 0xFFFF. You could also just return hash((self.key, self.shard_key)) (i.e. has the tuple).", "url": "https://github.com/apache/beam/pull/13069#discussion_r504133632", "createdAt": "2020-10-13T17:28:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,65 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"A sharded key consisting of a user key and a shard id.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  @property\n+  def shard_id(self):\n+    return self._shard_id\n+\n+  def __repr__(self):\n+    return '(%s, %s)' % (repr(self.key), self.shard_id)\n+\n+  def __eq__(self, other):\n+    return (\n+        type(self) == type(other) and self.key == other.key and\n+        self.shard_id == other.shard_id)\n+\n+  def __ne__(self, other):\n+    # TODO(BEAM-5949): Needed for Python 2 compatibility.\n+    return not self == other\n+\n+  def __hash__(self):\n+    return ((hash(self.key) & 0xFFFFFFFFFFFFFFF) + 3 *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwNDQzMQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505804431", "createdAt": "2020-10-15T19:59:49Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,65 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"A sharded key consisting of a user key and a shard id.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  @property\n+  def shard_id(self):\n+    return self._shard_id\n+\n+  def __repr__(self):\n+    return '(%s, %s)' % (repr(self.key), self.shard_id)\n+\n+  def __eq__(self, other):\n+    return (\n+        type(self) == type(other) and self.key == other.key and\n+        self.shard_id == other.shard_id)\n+\n+  def __ne__(self, other):\n+    # TODO(BEAM-5949): Needed for Python 2 compatibility.\n+    return not self == other\n+\n+  def __hash__(self):\n+    return ((hash(self.key) & 0xFFFFFFFFFFFFFFF) + 3 *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzYzMg=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc3NzYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/sharded_key.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyOTo1M1rOHgx6wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODowNjo0MlrOHiT4Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDMzNg==", "bodyText": "Do we intend this to be public? IMHO, it'd be better to not have it part of the public API (and we can always add it later if needed).", "url": "https://github.com/apache/beam/pull/13069#discussion_r504134336", "createdAt": "2020-10-13T17:29:53Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,65 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"A sharded key consisting of a user key and a shard id.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  @property\n+  def shard_id(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDYwMQ==", "bodyText": "Same for Java.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504134601", "createdAt": "2020-10-13T17:30:19Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,65 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"A sharded key consisting of a user key and a shard id.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  @property\n+  def shard_id(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDMzNg=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzOTQ2NA==", "bodyText": "At least the coder impl needs to access the shard id for encoding. In Java, the coder is defined inside of the ShardedKey class so we could make the shard id protected (not private for the AutoValue to work). But in Python the coder is defined separately.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504339464", "createdAt": "2020-10-14T00:55:50Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,65 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"A sharded key consisting of a user key and a shard id.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  @property\n+  def shard_id(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDMzNg=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTczOTM0Ng==", "bodyText": "We can simply access _shard_id directly from the coder and get rid of this \"public\" accessor.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505739346", "createdAt": "2020-10-15T18:06:42Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,65 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"A sharded key consisting of a user key and a shard id.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  @property\n+  def shard_id(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNDMzNg=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc5NTYxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coder_impl.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozNToxMlrOHgyGAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODoyNzo0OVrOHhfxSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNzIxNw==", "bodyText": "Why do you need the LengthPrefixCoderImpl here?", "url": "https://github.com/apache/beam/pull/13069#discussion_r504137217", "createdAt": "2020-10-13T17:35:12Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzOTUyNA==", "bodyText": "BytesCoder simply copies the value to the stream and it doesn't automatically prepend a length prefix (code). While in Java the ByteArrayCoder does prepend the length.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504339524", "createdAt": "2020-10-14T00:56:05Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNzIxNw=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0MTc1OA==", "bodyText": "I was under the impression that nested=True would have the BytesCoderImpl have the length written by the OutputStream:\n\n  \n    \n      beam/sdks/python/apache_beam/coders/slow_stream.py\n    \n    \n         Line 45\n      in\n      c921b0c\n    \n    \n    \n    \n\n        \n          \n           self.write_var_int64(len(b))", "url": "https://github.com/apache/beam/pull/13069#discussion_r504841758", "createdAt": "2020-10-14T17:13:59Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNzIxNw=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg4NTU3Ng==", "bodyText": "I see. It requires a nested context which is always true for shard id. The StreamCoderImpl that the ShardedKeyImpl inherits seems to always use an unnested context so the encoded key won't have a length prefix if it is a string or bytes. Should I make the ShardedKeyImpl inherit CoderImpl directly to allow different encoding for different context? Also I am confused by the Java documentation for encoding/decoding context in Coder - seems like it's preferred to have a default context, either nested or unnested but not both.", "url": "https://github.com/apache/beam/pull/13069#discussion_r504885576", "createdAt": "2020-10-14T18:27:49Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNzIxNw=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzgwMjM4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coder_impl.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozNzowM1rOHgyKFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1NzowNFrOHjQ3ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzODI2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                self._key_coder_impl.encode_to_stream(value.key, out, True)\n          \n          \n            \n                self._key_coder_impl.encode_to_stream(value.key, out, nested)", "url": "https://github.com/apache/beam/pull/13069#discussion_r504138260", "createdAt": "2020-10-13T17:37:03Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())\n+    self._key_coder_impl = key_coder_impl\n+\n+  def encode_to_stream(self, value, out, nested):\n+    # type: (ShardedKey, create_OutputStream, bool) -> None\n+    self._shard_id_coder_impl.encode_to_stream(value.shard_id, out, True)\n+    self._key_coder_impl.encode_to_stream(value.key, out, True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyNTU2OQ==", "bodyText": "Didn't change this in the latest commit since it would by default apply an unnested context which doesn't seem to be consistent with the Java encoding. Please see my other comment above.", "url": "https://github.com/apache/beam/pull/13069#discussion_r505825569", "createdAt": "2020-10-15T20:36:00Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())\n+    self._key_coder_impl = key_coder_impl\n+\n+  def encode_to_stream(self, value, out, nested):\n+    # type: (ShardedKey, create_OutputStream, bool) -> None\n+    self._shard_id_coder_impl.encode_to_stream(value.shard_id, out, True)\n+    self._key_coder_impl.encode_to_stream(value.key, out, True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzODI2MA=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczODUzMw==", "bodyText": "True is correct and matches the description and Java. Let's not create more coders that have different nested/unnested encodings.", "url": "https://github.com/apache/beam/pull/13069#discussion_r506738533", "createdAt": "2020-10-16T21:57:04Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())\n+    self._key_coder_impl = key_coder_impl\n+\n+  def encode_to_stream(self, value, out, nested):\n+    # type: (ShardedKey, create_OutputStream, bool) -> None\n+    self._shard_id_coder_impl.encode_to_stream(value.shard_id, out, True)\n+    self._key_coder_impl.encode_to_stream(value.key, out, True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzODI2MA=="}, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzgwMjYxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coder_impl.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozNzowOVrOHgyKRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozNzowOVrOHgyKRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzODMwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                key = self._key_coder_impl.decode_from_stream(in_stream, True)\n          \n          \n            \n                key = self._key_coder_impl.decode_from_stream(in_stream, nested)", "url": "https://github.com/apache/beam/pull/13069#discussion_r504138309", "createdAt": "2020-10-13T17:37:09Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())\n+    self._key_coder_impl = key_coder_impl\n+\n+  def encode_to_stream(self, value, out, nested):\n+    # type: (ShardedKey, create_OutputStream, bool) -> None\n+    self._shard_id_coder_impl.encode_to_stream(value.shard_id, out, True)\n+    self._key_coder_impl.encode_to_stream(value.key, out, True)\n+\n+  def decode_from_stream(self, in_stream, nested):\n+    # type: (create_InputStream, bool) -> ShardedKey\n+    shard_id = self._shard_id_coder_impl.decode_from_stream(in_stream, True)\n+    key = self._key_coder_impl.decode_from_stream(in_stream, True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzgwNDExOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coder_impl.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozNzozNFrOHgyLKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozNzozNFrOHgyLKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzODUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    self._key_coder_impl.estimate_size(value.key, nested=True))\n          \n          \n            \n                    self._key_coder_impl.estimate_size(value.key, nested=nested))", "url": "https://github.com/apache/beam/pull/13069#discussion_r504138536", "createdAt": "2020-10-13T17:37:34Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -1365,3 +1366,38 @@ def estimate_size(self, value, nested=False):\n     # type: (Any, bool) -> int\n     value_size = self._value_coder.estimate_size(value)\n     return get_varint_size(value_size) + value_size\n+\n+\n+class ShardedKeyCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for sharded user keys.\n+\n+  The encoding and decoding should follow the order:\n+      length of shard id byte string\n+      shard id byte string\n+      encoded user key\n+  \"\"\"\n+  def __init__(self, key_coder_impl):\n+    self._shard_id_coder_impl = LengthPrefixCoderImpl(BytesCoderImpl())\n+    self._key_coder_impl = key_coder_impl\n+\n+  def encode_to_stream(self, value, out, nested):\n+    # type: (ShardedKey, create_OutputStream, bool) -> None\n+    self._shard_id_coder_impl.encode_to_stream(value.shard_id, out, True)\n+    self._key_coder_impl.encode_to_stream(value.key, out, True)\n+\n+  def decode_from_stream(self, in_stream, nested):\n+    # type: (create_InputStream, bool) -> ShardedKey\n+    shard_id = self._shard_id_coder_impl.decode_from_stream(in_stream, True)\n+    key = self._key_coder_impl.decode_from_stream(in_stream, True)\n+    return ShardedKey(key=key, shard_id=shard_id)\n+\n+  def estimate_size(self, value, nested=False):\n+    # type: (Any, bool) -> int\n+    estimated_size = 0\n+    estimated_size += (\n+        self._shard_id_coder_impl.estimate_size(value.shard_id, nested=True))\n+    estimated_size += (\n+        self._key_coder_impl.estimate_size(value.key, nested=True))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154790f17d853a96e8e66e4d5625521845ef729d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk3ODM1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coders.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1ODoxMlrOHjQ43w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzozMzoyMFrOHjSU_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczODkxMQ==", "bodyText": "Is this yapf or some other auto-formatter?", "url": "https://github.com/apache/beam/pull/13069#discussion_r506738911", "createdAt": "2020-10-16T21:58:12Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -312,11 +312,12 @@ def register_urn(\n \n   @classmethod\n   @overload\n-  def register_urn(cls,\n-                   urn,  # type: str\n-                   parameter_type,  # type: Optional[Type[T]]\n-                   fn  # type: Callable[[T, List[Coder], PipelineContext], Any]\n-                  ):\n+  def register_urn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb52ad8d380b36bbdb46523dab7d6c203369ceb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MjQ5NA==", "bodyText": "Yes this is yapf.", "url": "https://github.com/apache/beam/pull/13069#discussion_r506762494", "createdAt": "2020-10-16T23:33:20Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -312,11 +312,12 @@ def register_urn(\n \n   @classmethod\n   @overload\n-  def register_urn(cls,\n-                   urn,  # type: str\n-                   parameter_type,  # type: Optional[Type[T]]\n-                   fn  # type: Callable[[T, List[Coder], PipelineContext], Any]\n-                  ):\n+  def register_urn(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczODkxMQ=="}, "originalCommit": {"oid": "bbb52ad8d380b36bbdb46523dab7d6c203369ceb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk4MTcxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/sharded_key.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1OTo0OVrOHjQ60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMDo0Nzo1NVrOHjTBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczOTQwOA==", "bodyText": "Any reason not to make this required?", "url": "https://github.com/apache/beam/pull/13069#discussion_r506739408", "createdAt": "2020-10-16T21:59:49Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,62 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"\n+  A sharded key consisting of a user key and an opaque shard id represented by\n+  bytes.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb52ad8d380b36bbdb46523dab7d6c203369ceb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3Mzg4MA==", "bodyText": "I think no? Removed.", "url": "https://github.com/apache/beam/pull/13069#discussion_r506773880", "createdAt": "2020-10-17T00:47:55Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,62 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"\n+  A sharded key consisting of a user key and an opaque shard id represented by\n+  bytes.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczOTQwOA=="}, "originalCommit": {"oid": "bbb52ad8d380b36bbdb46523dab7d6c203369ceb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk4MzczOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/sharded_key.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowMDozOFrOHjQ74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMDo0NDo0M1rOHjS_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczOTY4Mw==", "bodyText": "We don't need Python 2 compatibility anymore.", "url": "https://github.com/apache/beam/pull/13069#discussion_r506739683", "createdAt": "2020-10-16T22:00:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,62 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"\n+  A sharded key consisting of a user key and an opaque shard id represented by\n+  bytes.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  def __repr__(self):\n+    return '(%s, %s)' % (repr(self.key), self._shard_id)\n+\n+  def __eq__(self, other):\n+    return (\n+        type(self) == type(other) and self.key == other.key and\n+        self._shard_id == other._shard_id)\n+\n+  def __ne__(self, other):\n+    # TODO(BEAM-5949): Needed for Python 2 compatibility.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb52ad8d380b36bbdb46523dab7d6c203369ceb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3MzQ4Ng==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r506773486", "createdAt": "2020-10-17T00:44:43Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/utils/sharded_key.py", "diffHunk": "@@ -0,0 +1,62 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+\n+class ShardedKey(object):\n+  \"\"\"\n+  A sharded key consisting of a user key and an opaque shard id represented by\n+  bytes.\n+\n+  Attributes:\n+    key: The user key.\n+    shard_id: An opaque byte string that uniquely represents a shard of the key.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      key,\n+      shard_id=b'',  # type: bytes\n+  ):\n+    # type: (...) -> None\n+    assert shard_id is not None\n+    self._key = key\n+    self._shard_id = shard_id\n+\n+  @property\n+  def key(self):\n+    return self._key\n+\n+  def __repr__(self):\n+    return '(%s, %s)' % (repr(self.key), self._shard_id)\n+\n+  def __eq__(self, other):\n+    return (\n+        type(self) == type(other) and self.key == other.key and\n+        self._shard_id == other._shard_id)\n+\n+  def __ne__(self, other):\n+    # TODO(BEAM-5949): Needed for Python 2 compatibility.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczOTY4Mw=="}, "originalCommit": {"oid": "bbb52ad8d380b36bbdb46523dab7d6c203369ceb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ0NjM5OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyOToxOVrOHmyo0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyOToxOVrOHmyo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNzU4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encodes a use key and a shard id which is an opaque byte string.\n          \n          \n            \n                // Encodes a user key and a shard id which is an opaque byte string.", "url": "https://github.com/apache/beam/pull/13069#discussion_r510437586", "createdAt": "2020-10-22T20:29:19Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -879,6 +879,28 @@ message StandardCoders {\n     // Components: None\n     // Experimental.\n     ROW = 13 [(beam_urn) = \"beam:coder:row:v1\"];\n+\n+    // Encodes a use key and a shard id which is an opaque byte string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ0OTIyOnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMDowNFrOHmyqfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMDowNFrOHmyqfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzODAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //     - length prefixed shard id using beam:coder:bytes:v1\n          \n          \n            \n                //     - bytes shard id using beam:coder:bytes:v1", "url": "https://github.com/apache/beam/pull/13069#discussion_r510438012", "createdAt": "2020-10-22T20:30:04Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -879,6 +879,28 @@ message StandardCoders {\n     // Components: None\n     // Experimental.\n     ROW = 13 [(beam_urn) = \"beam:coder:row:v1\"];\n+\n+    // Encodes a use key and a shard id which is an opaque byte string.\n+    //\n+    // The encoding for a sharded key consists of a shard id byte string and the\n+    // encoded user key in the following order:\n+    //\n+    //     - length prefixed shard id using beam:coder:bytes:v1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ1NzY5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMjozNVrOHmyvdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMjozNVrOHmyvdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n          \n          \n            \n              /** Creates a ShardedKey with given key and shard id. Shard id must not be null and must not be mutated. */", "url": "https://github.com/apache/beam/pull/13069#discussion_r510439285", "createdAt": "2020-10-22T20:32:35Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ1OTkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMzoxN1rOHmyw2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozMzoxN1rOHmyw2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTY0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n          \n          \n            \n                return \"ShardedKey{key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";", "url": "https://github.com/apache/beam/pull/13069#discussion_r510439643", "createdAt": "2020-10-22T20:33:17Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ2MjYzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDowN1rOHmyyhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowMTowNlrOHm2vGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDA3MQ==", "bodyText": "rename h$ to hash", "url": "https://github.com/apache/beam/pull/13069#discussion_r510440071", "createdAt": "2020-10-22T20:34:07Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o == this) {\n+      return true;\n+    }\n+    if (o instanceof ShardedKey) {\n+      ShardedKey<?> that = (ShardedKey<?>) o;\n+      return this.key.equals(that.key) && Arrays.equals(this.shardId, that.shardId);\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int h$ = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNDczMA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13069#discussion_r510504730", "createdAt": "2020-10-22T23:01:06Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o == this) {\n+      return true;\n+    }\n+    if (o instanceof ShardedKey) {\n+      ShardedKey<?> that = (ShardedKey<?>) o;\n+      return this.key.equals(that.key) && Arrays.equals(this.shardId, that.shardId);\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int h$ = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDA3MQ=="}, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ2NDcyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDozOVrOHmyzxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDozOVrOHmyzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  //   length prefixed shard id byte string\n          \n          \n            \n                  //   shard id byte string", "url": "https://github.com/apache/beam/pull/13069#discussion_r510440391", "createdAt": "2020-10-22T20:34:39Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o == this) {\n+      return true;\n+    }\n+    if (o instanceof ShardedKey) {\n+      ShardedKey<?> that = (ShardedKey<?>) o;\n+      return this.key.equals(that.key) && Arrays.equals(this.shardId, that.shardId);\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int h$ = 1;\n+    h$ *= 1000003;\n+    h$ ^= key.hashCode();\n+    h$ *= 1000003;\n+    h$ ^= Arrays.hashCode(shardId);\n+    return h$;\n+  }\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length prefixed shard id byte string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ3NTc3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozODowNVrOHmy6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzowMToyMFrOHm2vXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA2Nw==", "bodyText": "FYI, this equals method assumes the key type has a valid equals method and generally shouldn't be used. We should use structuralValue anywhere for comparisons.", "url": "https://github.com/apache/beam/pull/13069#discussion_r510442067", "createdAt": "2020-10-22T20:38:05Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1Njk1Nw==", "bodyText": "I don't want you to change it, its just an FYI.", "url": "https://github.com/apache/beam/pull/13069#discussion_r510456957", "createdAt": "2020-10-22T21:05:55Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA2Nw=="}, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNDc5Nw==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/13069#discussion_r510504797", "createdAt": "2020-10-22T23:01:20Z", "author": {"login": "nehsyc"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA2Nw=="}, "originalCommit": {"oid": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2928, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}