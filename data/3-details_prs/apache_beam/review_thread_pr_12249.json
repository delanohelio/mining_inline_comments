{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTgwNDQ5", "number": 12249, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMzozMFrOEOWw6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozMDo0M1rOEOW8uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDg4NDg4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMzozMFrOGxdpjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1NjozMlrOGxe6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxOTE4Mw==", "bodyText": "Do you need to call cleanup for evicted cache manager(s) ?", "url": "https://github.com/apache/beam/pull/12249#discussion_r454519183", "createdAt": "2020-07-14T17:23:30Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -286,24 +298,40 @@ def watching(self):\n         watching.append(vars(watchable).items())\n     return watching\n \n-  def set_cache_manager(self, cache_manager):\n-    \"\"\"Sets the cache manager held by current Interactive Environment.\"\"\"\n-    if self._cache_manager is cache_manager:\n+  def set_cache_manager(self, cache_manager, pipeline):\n+    \"\"\"Sets the cache manager held by current Interactive Environment for the\n+    given pipeline.\"\"\"\n+    if self.get_cache_manager(pipeline) is cache_manager:\n       # NOOP if setting to the same cache_manager.\n       return\n-    if self._cache_manager:\n+    if self.get_cache_manager(pipeline):\n       # Invoke cleanup routine when a new cache_manager is forcefully set and\n       # current cache_manager is not None.\n-      self.cleanup()\n-      atexit.unregister(self.cleanup)\n-    self._cache_manager = cache_manager\n-    if self._cache_manager:\n-      # Re-register cleanup routine for the new cache_manager if it's not None.\n-      atexit.register(self.cleanup)\n-\n-  def cache_manager(self):\n-    \"\"\"Gets the cache manager held by current Interactive Environment.\"\"\"\n-    return self._cache_manager\n+      self.cleanup(pipeline)\n+    self._cache_managers[str(id(pipeline))] = cache_manager\n+\n+  def get_cache_manager(self, pipeline, create_if_absent=False):\n+    \"\"\"Gets the cache manager held by current Interactive Environment for the\n+    given pipeline. If the pipeline is absent from the environment while\n+    create_if_absent is True, creates and returns a new file based cache\n+    manager for the pipeline.\"\"\"\n+    cache_manager = self._cache_managers.get(str(id(pipeline)), None)\n+    if not cache_manager and create_if_absent:\n+      cache_dir = tempfile.mkdtemp(\n+          suffix=str(id(pipeline)),\n+          prefix='interactive-temp-',\n+          dir=os.environ.get('TEST_TMPDIR', None))\n+      cache_manager = cache.FileBasedCacheManager(cache_dir)\n+      self._cache_managers[str(id(pipeline))] = cache_manager\n+    return cache_manager\n+\n+  def evict_cache_manager(self, pipeline=None):\n+    \"\"\"Evicts the cache manager held by current Interactive Environment for the\n+    given pipeline. Noop if the pipeline is absent from the environment. If no\n+    pipeline is specified, evicts for all pipelines.\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzOTg4Nw==", "bodyText": "Thanks! Yes, I'll add a cleanup here.", "url": "https://github.com/apache/beam/pull/12249#discussion_r454539887", "createdAt": "2020-07-14T17:56:32Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -286,24 +298,40 @@ def watching(self):\n         watching.append(vars(watchable).items())\n     return watching\n \n-  def set_cache_manager(self, cache_manager):\n-    \"\"\"Sets the cache manager held by current Interactive Environment.\"\"\"\n-    if self._cache_manager is cache_manager:\n+  def set_cache_manager(self, cache_manager, pipeline):\n+    \"\"\"Sets the cache manager held by current Interactive Environment for the\n+    given pipeline.\"\"\"\n+    if self.get_cache_manager(pipeline) is cache_manager:\n       # NOOP if setting to the same cache_manager.\n       return\n-    if self._cache_manager:\n+    if self.get_cache_manager(pipeline):\n       # Invoke cleanup routine when a new cache_manager is forcefully set and\n       # current cache_manager is not None.\n-      self.cleanup()\n-      atexit.unregister(self.cleanup)\n-    self._cache_manager = cache_manager\n-    if self._cache_manager:\n-      # Re-register cleanup routine for the new cache_manager if it's not None.\n-      atexit.register(self.cleanup)\n-\n-  def cache_manager(self):\n-    \"\"\"Gets the cache manager held by current Interactive Environment.\"\"\"\n-    return self._cache_manager\n+      self.cleanup(pipeline)\n+    self._cache_managers[str(id(pipeline))] = cache_manager\n+\n+  def get_cache_manager(self, pipeline, create_if_absent=False):\n+    \"\"\"Gets the cache manager held by current Interactive Environment for the\n+    given pipeline. If the pipeline is absent from the environment while\n+    create_if_absent is True, creates and returns a new file based cache\n+    manager for the pipeline.\"\"\"\n+    cache_manager = self._cache_managers.get(str(id(pipeline)), None)\n+    if not cache_manager and create_if_absent:\n+      cache_dir = tempfile.mkdtemp(\n+          suffix=str(id(pipeline)),\n+          prefix='interactive-temp-',\n+          dir=os.environ.get('TEST_TMPDIR', None))\n+      cache_manager = cache.FileBasedCacheManager(cache_dir)\n+      self._cache_managers[str(id(pipeline))] = cache_manager\n+    return cache_manager\n+\n+  def evict_cache_manager(self, pipeline=None):\n+    \"\"\"Evicts the cache manager held by current Interactive Environment for the\n+    given pipeline. Noop if the pipeline is absent from the environment. If no\n+    pipeline is specified, evicts for all pipelines.\"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxOTE4Mw=="}, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDkxMTk2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyOTo1OFrOGxd5-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0NToxN1rOGxpKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzM4NA==", "bodyText": "Do you need this? You can change L569 to use create_if_absent=True instead.", "url": "https://github.com/apache/beam/pull/12249#discussion_r454523384", "createdAt": "2020-07-14T17:29:58Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -556,19 +556,26 @@ def _process(self, pcoll):\n             if not self._pin._user_pipeline:\n               # Retrieve a reference to the user defined pipeline instance.\n               self._pin._user_pipeline = user_pcoll.pipeline\n-              # Once user_pipeline is retrieved, check if the user pipeline\n-              # contains any source to cache. If so, current cache manager held\n-              # by current interactive environment might get wrapped into a\n-              # streaming cache, thus re-assign the reference to that cache\n-              # manager.\n+              # Retrieve a reference to the cache manager for the user defined\n+              # pipeline instance.\n+              self._pin._cache_manager = ie.current_env().get_cache_manager(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NTYxMw==", "bodyText": "L569 might not get executed at all if the background_caching_job does not has_source_to_cache. This line makes sure the cache manager is initialized (if never initialized before) in either conditions.", "url": "https://github.com/apache/beam/pull/12249#discussion_r454545613", "createdAt": "2020-07-14T18:05:57Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -556,19 +556,26 @@ def _process(self, pcoll):\n             if not self._pin._user_pipeline:\n               # Retrieve a reference to the user defined pipeline instance.\n               self._pin._user_pipeline = user_pcoll.pipeline\n-              # Once user_pipeline is retrieved, check if the user pipeline\n-              # contains any source to cache. If so, current cache manager held\n-              # by current interactive environment might get wrapped into a\n-              # streaming cache, thus re-assign the reference to that cache\n-              # manager.\n+              # Retrieve a reference to the cache manager for the user defined\n+              # pipeline instance.\n+              self._pin._cache_manager = ie.current_env().get_cache_manager(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzM4NA=="}, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4NzAzMw==", "bodyText": "Does it matter though, because then there will be L577 to initialize? Is there a case if not self._user_pipeline: would not be true in the first run?", "url": "https://github.com/apache/beam/pull/12249#discussion_r454687033", "createdAt": "2020-07-14T22:43:19Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -556,19 +556,26 @@ def _process(self, pcoll):\n             if not self._pin._user_pipeline:\n               # Retrieve a reference to the user defined pipeline instance.\n               self._pin._user_pipeline = user_pcoll.pipeline\n-              # Once user_pipeline is retrieved, check if the user pipeline\n-              # contains any source to cache. If so, current cache manager held\n-              # by current interactive environment might get wrapped into a\n-              # streaming cache, thus re-assign the reference to that cache\n-              # manager.\n+              # Retrieve a reference to the cache manager for the user defined\n+              # pipeline instance.\n+              self._pin._cache_manager = ie.current_env().get_cache_manager(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzM4NA=="}, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNzkxOQ==", "bodyText": "This line is the \"official\" way within the module to initialize the cache manager.\n(Outside the module, each time a user appends a PTransform, a cache manager will be created_if_absent for the user defined pipeline)\nTL;DR: L577 is only a fallback when the user defined pipeline cannot be identified from the given pipeline. It might not get executed either.\nThere are 2 scenarios that the user defined pipeline can not be identified:\n\nThe given pipeline is empty without any PCollection in it.\nThe given pipeline is the user defined pipeline (would not happen internally except tests).\n\nIn either scenarios, use the given pipeline as the user pipeline as a fallback last resort.", "url": "https://github.com/apache/beam/pull/12249#discussion_r454707919", "createdAt": "2020-07-14T23:45:17Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -556,19 +556,26 @@ def _process(self, pcoll):\n             if not self._pin._user_pipeline:\n               # Retrieve a reference to the user defined pipeline instance.\n               self._pin._user_pipeline = user_pcoll.pipeline\n-              # Once user_pipeline is retrieved, check if the user pipeline\n-              # contains any source to cache. If so, current cache manager held\n-              # by current interactive environment might get wrapped into a\n-              # streaming cache, thus re-assign the reference to that cache\n-              # manager.\n+              # Retrieve a reference to the cache manager for the user defined\n+              # pipeline instance.\n+              self._pin._cache_manager = ie.current_env().get_cache_manager(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzM4NA=="}, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDkxNTE1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozMDo0M1rOGxd73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMTo1NlrOGxfHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzg3MQ==", "bodyText": "Do you need to check that cache_manager is not None?", "url": "https://github.com/apache/beam/pull/12249#discussion_r454523871", "createdAt": "2020-07-14T17:30:43Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_runner.py", "diffHunk": "@@ -259,7 +247,8 @@ def read(self, pcoll, include_window_info=False):\n     WindowedValues. Otherwise, return the element as itself.\n     \"\"\"\n     key = self._pipeline_instrument.cache_key(pcoll)\n-    cache_manager = ie.current_env().cache_manager()\n+    cache_manager = ie.current_env().get_cache_manager(\n+        self._pipeline_instrument.user_pipeline)\n     if cache_manager.exists('full', key):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzIyMA==", "bodyText": "That is not needed since PipelineResult takes in the PipelineInstrument in the constructor. The cache manager must have been initialized during the instrumenting.", "url": "https://github.com/apache/beam/pull/12249#discussion_r454543220", "createdAt": "2020-07-14T18:01:56Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_runner.py", "diffHunk": "@@ -259,7 +247,8 @@ def read(self, pcoll, include_window_info=False):\n     WindowedValues. Otherwise, return the element as itself.\n     \"\"\"\n     key = self._pipeline_instrument.cache_key(pcoll)\n-    cache_manager = ie.current_env().cache_manager()\n+    cache_manager = ie.current_env().get_cache_manager(\n+        self._pipeline_instrument.user_pipeline)\n     if cache_manager.exists('full', key):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzg3MQ=="}, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1041, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}