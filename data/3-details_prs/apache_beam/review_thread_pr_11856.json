{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDEwNTM0", "number": 11856, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjozODo1NFrOECPEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozMjoyNVrOEpNkaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzc5NDMxOnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjozODo1NFrOGekWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjozODo1NFrOGekWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwNTkzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n          \n          \n            \n                            title          : 'SideInput Python Load test: 1gb-1kb-10workers-1window-1key-percent-dict',", "url": "https://github.com/apache/beam/pull/11856#discussion_r434705932", "createdAt": "2020-06-03T16:38:54Z", "author": {"login": "tysonjh"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg1NzEyOnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1NTowMFrOGek-Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1NTowMFrOGek-Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNjE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',\n          \n          \n            \n                            title          : 'SideInput Python Load test: 1gb-1kb-10workers-1window-99key-percent-dict',", "url": "https://github.com/apache/beam/pull/11856#discussion_r434716182", "createdAt": "2020-06-03T16:55:00Z", "author": {"login": "tysonjh"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-1-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_1',\n+                        influx_measurement   : 'python_batch_sideinput_1',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg2ODk5OnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1Nzo1M1rOGelFkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1Nzo1M1rOGelFkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-first-iterable',\n          \n          \n            \n                            title          : 'SideInput Python Load test: 10gb-1kb-10workers-1window-first-iterable',", "url": "https://github.com/apache/beam/pull/11856#discussion_r434718096", "createdAt": "2020-06-03T16:57:53Z", "author": {"login": "tysonjh"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-1-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_1',\n+                        influx_measurement   : 'python_batch_sideinput_1',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-2-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_2',\n+                        influx_measurement   : 'python_batch_sideinput_2',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 99,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-first-iterable',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg3MTg0OnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1ODozN1rOGelHRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1ODozN1rOGelHRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODUzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-iterable',\n          \n          \n            \n                            title          : 'SideInput Python Load test: 10gb-1kb-10workers-1window-iterable',", "url": "https://github.com/apache/beam/pull/11856#discussion_r434718532", "createdAt": "2020-06-03T16:58:37Z", "author": {"login": "tysonjh"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-1-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_1',\n+                        influx_measurement   : 'python_batch_sideinput_1',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-2-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_2',\n+                        influx_measurement   : 'python_batch_sideinput_2',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 99,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-first-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-3-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_3',\n+                        influx_measurement   : 'python_batch_sideinput_3',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-iterable',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg3MzU5OnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1OTowNlrOGelIew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDozNTo1NFrOGfJG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODg0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-first-list',\n          \n          \n            \n                            title          : 'SideInput Python Load test: 100gb-1kb-10workers-1window-first-list',", "url": "https://github.com/apache/beam/pull/11856#discussion_r434718843", "createdAt": "2020-06-03T16:59:06Z", "author": {"login": "tysonjh"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-1-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_1',\n+                        influx_measurement   : 'python_batch_sideinput_1',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-2-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_2',\n+                        influx_measurement   : 'python_batch_sideinput_2',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 99,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-first-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-3-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_3',\n+                        influx_measurement   : 'python_batch_sideinput_3',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-4-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_4',\n+                        influx_measurement   : 'python_batch_sideinput_4',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-first-list',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMTAyMg==", "bodyText": "Will 100gb be too much?", "url": "https://github.com/apache/beam/pull/11856#discussion_r434721022", "createdAt": "2020-06-03T17:02:48Z", "author": {"login": "tysonjh"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-1-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_1',\n+                        influx_measurement   : 'python_batch_sideinput_1',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-2-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_2',\n+                        influx_measurement   : 'python_batch_sideinput_2',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 99,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-first-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-3-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_3',\n+                        influx_measurement   : 'python_batch_sideinput_3',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-4-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_4',\n+                        influx_measurement   : 'python_batch_sideinput_4',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-first-list',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODg0Mw=="}, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwODI2NA==", "bodyText": "Looks like even 10GB will be too much for lists. I get the following error:\nWorkflow failed. Causes: S03:Impulse+Collect start time metrics+ParDo(SequenceSideInputTestDoFn)/ParDo(SequenceSideInputTestDoFn)+Collect end time metrics failed., The job failed because a work item has failed 4 times. \n...\nRoot cause: The worker lost contact with the service.", "url": "https://github.com/apache/beam/pull/11856#discussion_r435308264", "createdAt": "2020-06-04T14:35:54Z", "author": {"login": "kamilwu"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-1-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_1',\n+                        influx_measurement   : 'python_batch_sideinput_1',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-2-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_2',\n+                        influx_measurement   : 'python_batch_sideinput_2',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 99,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-first-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-3-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_3',\n+                        influx_measurement   : 'python_batch_sideinput_3',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-4-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_4',\n+                        influx_measurement   : 'python_batch_sideinput_4',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-first-list',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODg0Mw=="}, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg5NjkxOnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzowNTo1MVrOGelXwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzowNTo1MVrOGelXwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMjc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-list',\n          \n          \n            \n                            title          : 'SideInput Python Load test: 10gb-1kb-10workers-1window-list',", "url": "https://github.com/apache/beam/pull/11856#discussion_r434722754", "createdAt": "2020-06-03T17:05:51Z", "author": {"login": "tysonjh"}, "path": ".test-infra/jenkins/job_LoadTests_SideInput_Python.groovy", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import CommonJobProperties as commonJobProperties\n+import LoadTestsBuilder as loadTestsBuilder\n+import PhraseTriggeringPostCommitBuilder\n+import InfluxDBCredentialsHelper\n+\n+def now = new Date().format(\"MMddHHmmss\", TimeZone.getTimeZone('UTC'))\n+\n+def loadTestConfigurations = { datasetName -> [\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-1key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-1-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_1',\n+                        influx_measurement   : 'python_batch_sideinput_1',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-99key-percent-dict',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-2-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_2',\n+                        influx_measurement   : 'python_batch_sideinput_2',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'dict',\n+                        access_percentage    : 99,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-first-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-3-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_3',\n+                        influx_measurement   : 'python_batch_sideinput_3',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 20gb-1kb-5workers-1window-iterable',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-4-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_4',\n+                        influx_measurement   : 'python_batch_sideinput_4',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 20000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'iter',\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-first-list',\n+                test           : 'apache_beam.testing.load_tests.sideinput_test',\n+                runner         : CommonTestProperties.Runner.DATAFLOW,\n+                pipelineOptions: [\n+                        job_name             : 'load-tests-python-dataflow-batch-sideinput-5-' + now,\n+                        project              : 'apache-beam-testing',\n+                        region               : 'us-central1',\n+                        temp_location        : 'gs://temp-storage-for-perf-tests/loadtests',\n+                        publish_to_big_query : true,\n+                        metrics_dataset      : datasetName,\n+                        metrics_table        : 'python_dataflow_batch_sideinput_5',\n+                        influx_measurement   : 'python_batch_sideinput_5',\n+                        input_options        : '\\'{' +\n+                                '\"num_records\": 2000000,' +\n+                                '\"key_size\": 100,' +\n+                                '\"value_size\": 900}\\'',\n+                        num_workers          : 5,\n+                        autoscaling_algorithm: 'NONE',\n+                        side_input_type      : 'list',\n+                        access_percentage    : 1,\n+                ]\n+        ],\n+        [\n+                title          : 'SideInput Python Load test: 2gb-1kb-5workers-1window-list',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c71d4b48c66c597d45986b1dba72ba913c293c"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjMyNDc1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0MDoxN1rOHauf6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxMjozNlrOHbDqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4Njg1OQ==", "bodyText": "Add typehints here?", "url": "https://github.com/apache/beam/pull/11856#discussion_r497786859", "createdAt": "2020-09-30T20:40:17Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -122,85 +122,95 @@ def process(self, unused_element, side_input):\n             # No-op. We only make sure that the element is accessed.\n             next(it)\n           except StopIteration:\n-            return\n+            break\n \n     class MappingSideInputTestDoFn(beam.DoFn):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzMzY0Mg==", "bodyText": "Ok.\nSince we don't support Python 2 anymore, I decided to use Python 3 annotations which are slightly better than class decorators (@typehints.with_input_types and @typehints.with_output_types)", "url": "https://github.com/apache/beam/pull/11856#discussion_r498133642", "createdAt": "2020-10-01T10:12:36Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -122,85 +122,95 @@ def process(self, unused_element, side_input):\n             # No-op. We only make sure that the element is accessed.\n             next(it)\n           except StopIteration:\n-            return\n+            break\n \n     class MappingSideInputTestDoFn(beam.DoFn):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4Njg1OQ=="}, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjM0NjQ1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0NzowNFrOHautFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDozMDoyOFrOHbEQ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5MDIyOA==", "bodyText": "What does this do?", "url": "https://github.com/apache/beam/pull/11856#discussion_r497790228", "createdAt": "2020-09-30T20:47:04Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -122,85 +122,95 @@ def process(self, unused_element, side_input):\n             # No-op. We only make sure that the element is accessed.\n             next(it)\n           except StopIteration:\n-            return\n+            break\n \n     class MappingSideInputTestDoFn(beam.DoFn):\n-      \"\"\"Take a sequence of keys as an additional side input and for each\n-      key in the sequence checks the value for key in the dictionary.\"\"\"\n-      def process(self, unused_element, dict_side_input, keys_to_check):\n-        for key in keys_to_check:\n-          # No-op. We only make sure that the element is accessed.\n-          dict_side_input[key]\n-\n-    class GetRandomKeys(beam.DoFn):\n-      def __init__(self, n):\n-        self._n = n\n+      \"\"\"Iterates over first n keys in the dictionary and checks the value.\"\"\"\n+      def __init__(self, first_n):\n+        self._first_n = first_n\n \n       def process(self, unused_element, dict_side_input):\n-        import random\n-        n = min(self._n, len(dict_side_input))\n-        return random.sample(dict_side_input.keys(), n)\n+        i = 0\n+        for key in dict_side_input:\n+          if i == self._first_n:\n+            break\n+          # No-op. We only make sure that the element is accessed.\n+          dict_side_input[key]\n+          i += 1\n \n-    class AddEventTimestamps(beam.DoFn):\n-      \"\"\"Assign timestamp to each element of PCollection.\"\"\"\n-      def setup(self):\n-        self._timestamp = 0\n+    @typehints.with_input_types(int)\n+    @typehints.with_output_types(int)\n+    class AssignTimestamps(beam.DoFn):\n+      \"\"\"Produces timestamped values. Timestamps are equal to the value of the\n+      element.\"\"\"\n+      def __init__(self):\n+        # Avoid having to use save_main_session\n+        self.window = window", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MzQ1Nw==", "bodyText": "Dataflow workers cannot use functions, classes and module imports defined in __main__ (the global scope) unless the --save_main_session pipeline option is specified. However, --save_main_session is likely to cause problems (for example: https://issues.apache.org/jira/browse/BEAM-6158) and I wanted to avoid using it. So this is a workaround. Thanks to it, I'm able to use window module without enabling  --save_main_session.", "url": "https://github.com/apache/beam/pull/11856#discussion_r498143457", "createdAt": "2020-10-01T10:30:28Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -122,85 +122,95 @@ def process(self, unused_element, side_input):\n             # No-op. We only make sure that the element is accessed.\n             next(it)\n           except StopIteration:\n-            return\n+            break\n \n     class MappingSideInputTestDoFn(beam.DoFn):\n-      \"\"\"Take a sequence of keys as an additional side input and for each\n-      key in the sequence checks the value for key in the dictionary.\"\"\"\n-      def process(self, unused_element, dict_side_input, keys_to_check):\n-        for key in keys_to_check:\n-          # No-op. We only make sure that the element is accessed.\n-          dict_side_input[key]\n-\n-    class GetRandomKeys(beam.DoFn):\n-      def __init__(self, n):\n-        self._n = n\n+      \"\"\"Iterates over first n keys in the dictionary and checks the value.\"\"\"\n+      def __init__(self, first_n):\n+        self._first_n = first_n\n \n       def process(self, unused_element, dict_side_input):\n-        import random\n-        n = min(self._n, len(dict_side_input))\n-        return random.sample(dict_side_input.keys(), n)\n+        i = 0\n+        for key in dict_side_input:\n+          if i == self._first_n:\n+            break\n+          # No-op. We only make sure that the element is accessed.\n+          dict_side_input[key]\n+          i += 1\n \n-    class AddEventTimestamps(beam.DoFn):\n-      \"\"\"Assign timestamp to each element of PCollection.\"\"\"\n-      def setup(self):\n-        self._timestamp = 0\n+    @typehints.with_input_types(int)\n+    @typehints.with_output_types(int)\n+    class AssignTimestamps(beam.DoFn):\n+      \"\"\"Produces timestamped values. Timestamps are equal to the value of the\n+      element.\"\"\"\n+      def __init__(self):\n+        # Avoid having to use save_main_session\n+        self.window = window", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5MDIyOA=="}, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQxMzg1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTowNzowOVrOHavWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTowNzowOVrOHavWgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwMDgzMg==", "bodyText": "Add typehints here too?", "url": "https://github.com/apache/beam/pull/11856#discussion_r497800832", "createdAt": "2020-09-30T21:07:09Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -122,85 +122,95 @@ def process(self, unused_element, side_input):\n             # No-op. We only make sure that the element is accessed.\n             next(it)\n           except StopIteration:\n-            return\n+            break\n \n     class MappingSideInputTestDoFn(beam.DoFn):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQ4MzYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToyOToyMlrOHawATA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDo0OToyN1rOHbE26A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMTUzMg==", "bodyText": "Could you explain this a bit please? It seems like when there are <=1 windows it will result in the side_input having 1000 SDF sources but I don't really understand why.", "url": "https://github.com/apache/beam/pull/11856#discussion_r497811532", "createdAt": "2020-09-30T21:29:22Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -122,85 +122,95 @@ def process(self, unused_element, side_input):\n             # No-op. We only make sure that the element is accessed.\n             next(it)\n           except StopIteration:\n-            return\n+            break\n \n     class MappingSideInputTestDoFn(beam.DoFn):\n-      \"\"\"Take a sequence of keys as an additional side input and for each\n-      key in the sequence checks the value for key in the dictionary.\"\"\"\n-      def process(self, unused_element, dict_side_input, keys_to_check):\n-        for key in keys_to_check:\n-          # No-op. We only make sure that the element is accessed.\n-          dict_side_input[key]\n-\n-    class GetRandomKeys(beam.DoFn):\n-      def __init__(self, n):\n-        self._n = n\n+      \"\"\"Iterates over first n keys in the dictionary and checks the value.\"\"\"\n+      def __init__(self, first_n):\n+        self._first_n = first_n\n \n       def process(self, unused_element, dict_side_input):\n-        import random\n-        n = min(self._n, len(dict_side_input))\n-        return random.sample(dict_side_input.keys(), n)\n+        i = 0\n+        for key in dict_side_input:\n+          if i == self._first_n:\n+            break\n+          # No-op. We only make sure that the element is accessed.\n+          dict_side_input[key]\n+          i += 1\n \n-    class AddEventTimestamps(beam.DoFn):\n-      \"\"\"Assign timestamp to each element of PCollection.\"\"\"\n-      def setup(self):\n-        self._timestamp = 0\n+    @typehints.with_input_types(int)\n+    @typehints.with_output_types(int)\n+    class AssignTimestamps(beam.DoFn):\n+      \"\"\"Produces timestamped values. Timestamps are equal to the value of the\n+      element.\"\"\"\n+      def __init__(self):\n+        # Avoid having to use save_main_session\n+        self.window = window\n \n       def process(self, element):\n-        from apache_beam.transforms.combiners import window\n-        yield window.TimestampedValue(element, self._timestamp)\n-        self._timestamp += 1\n-\n-    input_pc = (\n-        self.pipeline\n-        | 'Read synthetic' >> beam.io.Read(\n-            SyntheticSource(self.parse_synthetic_source_options()))\n-        | 'Collect start time metrics' >> beam.ParDo(\n-            MeasureTime(self.metrics_namespace)))\n-\n-    if self.side_input_size != self.input_options.get('num_records'):\n-      side_input = (\n-          input_pc\n-          | 'Sample {} elements'.format(self.side_input_size) >>\n-          beam.combiners.Sample.FixedSizeGlobally(self.side_input_size)\n-          | 'Flatten a sequence' >> beam.FlatMap(lambda x: x))\n+        yield self.window.TimestampedValue(element, element)\n+\n+    @typehints.with_input_types(Any)\n+    @typehints.with_output_types(Dict[str, Union[int, str]])\n+    class GetSyntheticSDFOptions(beam.DoFn):\n+      def __init__(self, elements_per_record, key_size, value_size):\n+        self.elements_per_record = elements_per_record\n+        self.key_size = key_size\n+        self.value_size = value_size\n+\n+      def process(self, unused_element):\n+        yield {\n+            'num_records': self.elements_per_record,\n+            'key_size': self.key_size,\n+            'value_size': self.value_size,\n+            'initial_splitting_num_bundles': 0,\n+            'initial_splitting_desired_bundle_size': 0,\n+            'sleep_per_input_record_sec': 0,\n+            'initial_splitting': 'const'\n+        }\n+\n+    main_input = self.pipeline | 'Create' >> beam.Create(range(self.windows))\n+\n+    initial_elements = self.SDF_INITIAL_ELEMENTS\n+    if self.windows > 1:\n+      main_input = (\n+          main_input\n+          | 'Assign timestamps' >> beam.ParDo(AssignTimestamps())\n+          | 'Apply windows' >> beam.WindowInto(window.FixedWindows(1)))\n+      side_input = main_input\n+      initial_elements = self.windows\n     else:\n-      side_input = input_pc\n-\n-    if self.windows > 0:\n-      window_size = self.side_input_size / self.windows\n-      logging.info('Fixed windows of %s seconds will be applied', window_size)\n-      side_input = (\n-          side_input\n-          | 'Add event timestamps' >> beam.ParDo(AddEventTimestamps())\n-          | 'Apply windows' >> beam.WindowInto(\n-              beam.combiners.window.FixedWindows(window_size)))\n+      side_input = self.pipeline | 'Side input: create' >> beam.Create(\n+          range(initial_elements))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MzE5Mg==", "bodyText": "Generally speaking, initial_elements should be equal to the number of windows. But there is an edge case. By default, a global window is being used (so the number of windows is 1):\nself.get_option_or_default('window_count', default=1)\nI noticed the pipeline runs slower when the number of elements before SyntheticSDFAsSource step is 1. In other words, it's more efficient to generate a big load of data from, say, 1000 initial elements than from 1 element. More than a half of our test cases use only 1 window, so this is an important improvement.", "url": "https://github.com/apache/beam/pull/11856#discussion_r498153192", "createdAt": "2020-10-01T10:49:27Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -122,85 +122,95 @@ def process(self, unused_element, side_input):\n             # No-op. We only make sure that the element is accessed.\n             next(it)\n           except StopIteration:\n-            return\n+            break\n \n     class MappingSideInputTestDoFn(beam.DoFn):\n-      \"\"\"Take a sequence of keys as an additional side input and for each\n-      key in the sequence checks the value for key in the dictionary.\"\"\"\n-      def process(self, unused_element, dict_side_input, keys_to_check):\n-        for key in keys_to_check:\n-          # No-op. We only make sure that the element is accessed.\n-          dict_side_input[key]\n-\n-    class GetRandomKeys(beam.DoFn):\n-      def __init__(self, n):\n-        self._n = n\n+      \"\"\"Iterates over first n keys in the dictionary and checks the value.\"\"\"\n+      def __init__(self, first_n):\n+        self._first_n = first_n\n \n       def process(self, unused_element, dict_side_input):\n-        import random\n-        n = min(self._n, len(dict_side_input))\n-        return random.sample(dict_side_input.keys(), n)\n+        i = 0\n+        for key in dict_side_input:\n+          if i == self._first_n:\n+            break\n+          # No-op. We only make sure that the element is accessed.\n+          dict_side_input[key]\n+          i += 1\n \n-    class AddEventTimestamps(beam.DoFn):\n-      \"\"\"Assign timestamp to each element of PCollection.\"\"\"\n-      def setup(self):\n-        self._timestamp = 0\n+    @typehints.with_input_types(int)\n+    @typehints.with_output_types(int)\n+    class AssignTimestamps(beam.DoFn):\n+      \"\"\"Produces timestamped values. Timestamps are equal to the value of the\n+      element.\"\"\"\n+      def __init__(self):\n+        # Avoid having to use save_main_session\n+        self.window = window\n \n       def process(self, element):\n-        from apache_beam.transforms.combiners import window\n-        yield window.TimestampedValue(element, self._timestamp)\n-        self._timestamp += 1\n-\n-    input_pc = (\n-        self.pipeline\n-        | 'Read synthetic' >> beam.io.Read(\n-            SyntheticSource(self.parse_synthetic_source_options()))\n-        | 'Collect start time metrics' >> beam.ParDo(\n-            MeasureTime(self.metrics_namespace)))\n-\n-    if self.side_input_size != self.input_options.get('num_records'):\n-      side_input = (\n-          input_pc\n-          | 'Sample {} elements'.format(self.side_input_size) >>\n-          beam.combiners.Sample.FixedSizeGlobally(self.side_input_size)\n-          | 'Flatten a sequence' >> beam.FlatMap(lambda x: x))\n+        yield self.window.TimestampedValue(element, element)\n+\n+    @typehints.with_input_types(Any)\n+    @typehints.with_output_types(Dict[str, Union[int, str]])\n+    class GetSyntheticSDFOptions(beam.DoFn):\n+      def __init__(self, elements_per_record, key_size, value_size):\n+        self.elements_per_record = elements_per_record\n+        self.key_size = key_size\n+        self.value_size = value_size\n+\n+      def process(self, unused_element):\n+        yield {\n+            'num_records': self.elements_per_record,\n+            'key_size': self.key_size,\n+            'value_size': self.value_size,\n+            'initial_splitting_num_bundles': 0,\n+            'initial_splitting_desired_bundle_size': 0,\n+            'sleep_per_input_record_sec': 0,\n+            'initial_splitting': 'const'\n+        }\n+\n+    main_input = self.pipeline | 'Create' >> beam.Create(range(self.windows))\n+\n+    initial_elements = self.SDF_INITIAL_ELEMENTS\n+    if self.windows > 1:\n+      main_input = (\n+          main_input\n+          | 'Assign timestamps' >> beam.ParDo(AssignTimestamps())\n+          | 'Apply windows' >> beam.WindowInto(window.FixedWindows(1)))\n+      side_input = main_input\n+      initial_elements = self.windows\n     else:\n-      side_input = input_pc\n-\n-    if self.windows > 0:\n-      window_size = self.side_input_size / self.windows\n-      logging.info('Fixed windows of %s seconds will be applied', window_size)\n-      side_input = (\n-          side_input\n-          | 'Add event timestamps' >> beam.ParDo(AddEventTimestamps())\n-          | 'Apply windows' >> beam.WindowInto(\n-              beam.combiners.window.FixedWindows(window_size)))\n+      side_input = self.pipeline | 'Side input: create' >> beam.Create(\n+          range(initial_elements))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMTUzMg=="}, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQ5Mzg3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozMjoyNVrOHawGQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyNDo0NVrOHbx4iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMzA1Ng==", "bodyText": "This should mention that by default the side_input will be subdivided into 1000 windows.", "url": "https://github.com/apache/beam/pull/11856#discussion_r497813056", "createdAt": "2020-09-30T21:32:25Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -27,11 +27,7 @@\n   * side_input_type (str) - Required. Specifies how the side input will be\n     materialized in ParDo operation. Choose from (dict, iter, list).\n   * window_count (int) - The number of fixed sized windows to subdivide the\n-    side input into. By default, no windows will be used.\n-  * side_input_size (int) - The size of the side input. Must be equal to or\n-    lower than the size of the main input. If lower, the side input will be\n-    created by applying a :class:`beam.combiners.Sample\n-    <apache_beam.transforms.combiners.Sample>` transform.\n+    side input into. By default, a global window will be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1NjgyNQ==", "bodyText": "Isn't it the other way around? Take a look at the constructor, where we have:\nself.get_option_or_default('window_count', default=1)\nThis applies both to the main and the side inputs.", "url": "https://github.com/apache/beam/pull/11856#discussion_r498156825", "createdAt": "2020-10-01T10:56:44Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -27,11 +27,7 @@\n   * side_input_type (str) - Required. Specifies how the side input will be\n     materialized in ParDo operation. Choose from (dict, iter, list).\n   * window_count (int) - The number of fixed sized windows to subdivide the\n-    side input into. By default, no windows will be used.\n-  * side_input_size (int) - The size of the side input. Must be equal to or\n-    lower than the size of the main input. If lower, the side input will be\n-    created by applying a :class:`beam.combiners.Sample\n-    <apache_beam.transforms.combiners.Sample>` transform.\n+    side input into. By default, a global window will be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMzA1Ng=="}, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5MDg4OA==", "bodyText": "Yes, I confused number of windows with the number of initial elements from the SyntheticSDFAsSource. Thanks!", "url": "https://github.com/apache/beam/pull/11856#discussion_r498890888", "createdAt": "2020-10-02T15:24:45Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -27,11 +27,7 @@\n   * side_input_type (str) - Required. Specifies how the side input will be\n     materialized in ParDo operation. Choose from (dict, iter, list).\n   * window_count (int) - The number of fixed sized windows to subdivide the\n-    side input into. By default, no windows will be used.\n-  * side_input_size (int) - The size of the side input. Must be equal to or\n-    lower than the size of the main input. If lower, the side input will be\n-    created by applying a :class:`beam.combiners.Sample\n-    <apache_beam.transforms.combiners.Sample>` transform.\n+    side input into. By default, a global window will be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMzA1Ng=="}, "originalCommit": {"oid": "cd6ba1486b029ec7f653126006979c48c40d401e"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3732, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}