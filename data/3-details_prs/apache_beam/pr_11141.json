{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTI1NzEy", "number": 11141, "title": "[BEAM-7923] Include side effects in p.run", "bodyText": "The problem: PCollections never used as inputs and not watched, such as\nsinks without being assigned to variables is currently pruned before p.run().\nThe change makes sure that these \"side effect\" PCollections are now\nconsidered as extended targets and will be executed on p.run().\nNote the change will not affect show, head and collect because\nthey have an additional pipeline fragment logic that already prunes\neverything unrelated before the instrumenting and the prune logic inside\ninstrumenting.\n\nPlease add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-16T22:29:35Z", "url": "https://github.com/apache/beam/pull/11141", "merged": true, "mergeCommit": {"oid": "df482df9a5bbb3963f3c2d2c48e0946eca65dabf"}, "closed": true, "closedAt": "2020-03-17T19:40:06Z", "author": {"login": "KevinGG"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOV69vAFqTM3NTYyNzI4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOoATEgBqjMxMzg3ODE0Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI3Mjg0", "url": "https://github.com/apache/beam/pull/11141#pullrequestreview-375627284", "createdAt": "2020-03-16T22:33:21Z", "commit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzoyMVrOF3H_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzoyMVrOF3H_vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzAwNQ==", "bodyText": "This test was flaky because the dataframe columns can be built in arbitrary orders. This option makes sure it doesn't take column positioning into consideration since we only care about the equivalence of data.", "url": "https://github.com/apache/beam/pull/11141#discussion_r393347005", "createdAt": "2020-03-16T22:33:21Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/utils_test.py", "diffHunk": "@@ -56,7 +56,7 @@ def test_parse_windowedvalue_with_window_info(self):\n         [['a', 2, int(1e6), els[0].windows, els[0].pane_info],\n          ['b', 3, int(1e6), els[1].windows, els[1].pane_info]],\n         columns=[0, 1, 'event_time', 'windows', 'pane_info'])\n-    pd.testing.assert_frame_equal(actual_df, expected_df)\n+    pd.testing.assert_frame_equal(actual_df, expected_df, check_like=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjMyMjI1", "url": "https://github.com/apache/beam/pull/11141#pullrequestreview-375632225", "createdAt": "2020-03-16T22:45:32Z", "commit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0NTozMlrOF3IPpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0NTozMlrOF3IPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTA3Ng==", "bodyText": "Do you want to track, mark side effects differently? Does users want to specifically track these pcollections?", "url": "https://github.com/apache/beam/pull/11141#discussion_r393351076", "createdAt": "2020-03-16T22:45:32Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -418,10 +420,16 @@ def visit_transform(self, transform_node):\n                       tuple(ie.current_env().options.capturable_sources)):\n           unbounded_source_pcolls.update(transform_node.outputs.values())\n         cacheable_inputs.update(self._pin._cacheable_inputs(transform_node))\n+        ins, outs = self._pin._all_inputs_outputs(transform_node)\n+        all_inputs.update(ins)\n+        all_outputs.update(outs)\n \n     v = InstrumentVisitor(self)\n     self._pipeline.visit(v)\n \n+    # Every output PCollection that is never used as an input PCollection is\n+    # considered as a side effect of the pipeline run and should be included.\n+    self._extended_targets.update(all_outputs.difference(all_inputs))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjM1MDEw", "url": "https://github.com/apache/beam/pull/11141#pullrequestreview-375635010", "createdAt": "2020-03-16T22:53:11Z", "commit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjkxNzE1", "url": "https://github.com/apache/beam/pull/11141#pullrequestreview-375691715", "createdAt": "2020-03-17T02:01:30Z", "commit": {"oid": "34dae9d0a4b8ebe5cc7471b29604b422c904f8a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b458cfdc65086b7476f0c949a1389dccf8a681f1", "author": {"user": {"login": "KevinGG", "name": "Ning Kang"}}, "url": "https://github.com/apache/beam/commit/b458cfdc65086b7476f0c949a1389dccf8a681f1", "committedDate": "2020-03-17T19:27:57Z", "message": "[BEAM-7923] Include side effects in p.run\n\n1. PCollections never used as inputs and not watched, such as sinks without being assigned\nto variables will be pruned before `p.run()`. The change makes sure that\nthese side effect PCollections are now considered as extended targets\nand will be executed on `p.run()`.\n2. Note the change will not affect `show`, `head` and `collect` because\nthey have an additional pipeline fragment logic that already prunes\neverything unrelated before the instrumenting and the prune logic inside\ninstrumenting."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34dae9d0a4b8ebe5cc7471b29604b422c904f8a9", "author": {"user": {"login": "KevinGG", "name": "Ning Kang"}}, "url": "https://github.com/apache/beam/commit/34dae9d0a4b8ebe5cc7471b29604b422c904f8a9", "committedDate": "2020-03-16T23:05:08Z", "message": "Apply check_like=True to all pd assertions to resolve test flakiness."}, "afterCommit": {"oid": "b458cfdc65086b7476f0c949a1389dccf8a681f1", "author": {"user": {"login": "KevinGG", "name": "Ning Kang"}}, "url": "https://github.com/apache/beam/commit/b458cfdc65086b7476f0c949a1389dccf8a681f1", "committedDate": "2020-03-17T19:27:57Z", "message": "[BEAM-7923] Include side effects in p.run\n\n1. PCollections never used as inputs and not watched, such as sinks without being assigned\nto variables will be pruned before `p.run()`. The change makes sure that\nthese side effect PCollections are now considered as extended targets\nand will be executed on `p.run()`.\n2. Note the change will not affect `show`, `head` and `collect` because\nthey have an additional pipeline fragment logic that already prunes\neverything unrelated before the instrumenting and the prune logic inside\ninstrumenting."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4968, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}