{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjE2NDI0", "number": 12012, "title": "[BEAM-10260] Fix continuation token support with statecache", "bodyText": "The continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\nRecursionError: maximum recursion depth exceeded while calling a Python object\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-15T15:31:30Z", "url": "https://github.com/apache/beam/pull/12012", "merged": true, "mergeCommit": {"oid": "d5c3391119061581b13d8b647b5c1f423a39d4b2"}, "closed": true, "closedAt": "2020-06-16T14:27:25Z", "author": {"login": "mxm"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrtOTzgFqTQzMTEzNzU4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr1LKNgBqjM0NDg5NTQzNDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTM3NTg4", "url": "https://github.com/apache/beam/pull/12012#pullrequestreview-431137588", "createdAt": "2020-06-16T03:38:23Z", "commit": {"oid": "451ebe39f63c7a63d7a332d9b366323794fcd226"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzozODoyM1rOGkKIaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzozOTozNlrOGkKJSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2NzkxMg==", "bodyText": "Why would extend be called in this case? Should this be an error?", "url": "https://github.com/apache/beam/pull/12012#discussion_r440567912", "createdAt": "2020-06-16T03:38:23Z", "author": {"login": "tweise"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -941,15 +942,29 @@ def extend(self,\n              is_cached=False\n             ):\n     # type: (...) -> _Future\n+    # Make sure the input is a list of elements\n+    elements = list(elements)\n     cache_token = self._get_cache_token(state_key, is_cached)\n     if cache_token:\n       # Update the cache\n       cache_key = self._convert_to_cache_key(state_key)\n-      if self._state_cache.get(cache_key, cache_token) is None:\n-        # We have never cached this key before, first initialize cache\n-        self.blocking_get(state_key, coder, is_cached=True)\n-      # Now update the values in the cache\n-      self._state_cache.extend(cache_key, cache_token, elements)\n+      cached_value = self._state_cache.get(cache_key, cache_token)\n+      # Keep in mind that the state for this key can be evicted\n+      # while executing this function. Either read or write to the cache\n+      # but never do both here!\n+      if cached_value is None:\n+        # We have never cached this key before, first retrieve state\n+        cached_value = self.blocking_get(state_key, coder)\n+      # Just extend the already cached value\n+      if isinstance(cached_value, list):\n+        # The state is fully cached and can be extended\n+        cached_value.extend(elements)\n+      elif isinstance(cached_value, itertools.chain):\n+        # The state is too large to be fully cached (continuation token used),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451ebe39f63c7a63d7a332d9b366323794fcd226"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODEzNw==", "bodyText": "Isn't cached_value.extend(elements) the only place where this matters?", "url": "https://github.com/apache/beam/pull/12012#discussion_r440568137", "createdAt": "2020-06-16T03:39:36Z", "author": {"login": "tweise"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -941,15 +942,29 @@ def extend(self,\n              is_cached=False\n             ):\n     # type: (...) -> _Future\n+    # Make sure the input is a list of elements\n+    elements = list(elements)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451ebe39f63c7a63d7a332d9b366323794fcd226"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "451ebe39f63c7a63d7a332d9b366323794fcd226", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/451ebe39f63c7a63d7a332d9b366323794fcd226", "committedDate": "2020-06-15T15:28:29Z", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction."}, "afterCommit": {"oid": "16da449b27f1c25e292b9e6458cab8cb6db69411", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/16da449b27f1c25e292b9e6458cab8cb6db69411", "committedDate": "2020-06-16T10:21:02Z", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16da449b27f1c25e292b9e6458cab8cb6db69411", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/16da449b27f1c25e292b9e6458cab8cb6db69411", "committedDate": "2020-06-16T10:21:02Z", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction."}, "afterCommit": {"oid": "35d78e498d7bde9df9d27561b2b8099bff5c5084", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/35d78e498d7bde9df9d27561b2b8099bff5c5084", "committedDate": "2020-06-16T12:10:46Z", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a85cc8102994fcadd79f903b5806aa8f9fde9139", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/a85cc8102994fcadd79f903b5806aa8f9fde9139", "committedDate": "2020-06-16T13:21:46Z", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c30629e6b556e8c473a5db0ae5d8d16503b265a8", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/c30629e6b556e8c473a5db0ae5d8d16503b265a8", "committedDate": "2020-06-16T13:21:46Z", "message": "[BEAM-10260] Remove is_cached parameter from CachingStateHandler\n\nThe parameter is not needed anymore because side input caching has been\nimplemented, which was the original reason for having the parameter."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35d78e498d7bde9df9d27561b2b8099bff5c5084", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/35d78e498d7bde9df9d27561b2b8099bff5c5084", "committedDate": "2020-06-16T12:10:46Z", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction."}, "afterCommit": {"oid": "c30629e6b556e8c473a5db0ae5d8d16503b265a8", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/c30629e6b556e8c473a5db0ae5d8d16503b265a8", "committedDate": "2020-06-16T13:21:46Z", "message": "[BEAM-10260] Remove is_cached parameter from CachingStateHandler\n\nThe parameter is not needed anymore because side input caching has been\nimplemented, which was the original reason for having the parameter."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3458, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}