{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDkzODA5", "number": 11925, "title": "[BEAM-9615] Add string coder utility functions.", "bodyText": "This adds initial utility functions for encoding and decoding utf8 strings in the Go SDK.\nDoesn't make use of them yet. In practice this is already how strings are encoded in the Go SDK, but marked as \"custom\" coders rather than the built in URN.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-04T21:13:08Z", "url": "https://github.com/apache/beam/pull/11925", "merged": true, "mergeCommit": {"oid": "2e13367e92a51ff3299a9e9e4cba6f2576e82038"}, "closed": true, "closedAt": "2020-06-05T18:30:15Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoEsVhAH2gAyNDI4MDkzODA5OjM0MmJjMGQ5ZmY0MWIwZWIxNWQwYTU2NjU1ZmVmYmU2NmU1MjQ2NWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoW6qDAFqTQyNTUyOTY5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "342bc0d9ff41b0eb15d0a56655fefbe66e52465b", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/342bc0d9ff41b0eb15d0a56655fefbe66e52465b", "committedDate": "2020-06-04T21:11:06Z", "message": "[BEAM-9615] Add string coder utility functions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/c453fbb34b6fa3db0e6618c91c29a71ad25196d3", "committedDate": "2020-06-04T22:34:12Z", "message": "!fixup add license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDI5OTk2", "url": "https://github.com/apache/beam/pull/11925#pullrequestreview-425429996", "createdAt": "2020-06-05T16:01:15Z", "commit": {"oid": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjowMToxNVrOGf0Wsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoyNzo0N1rOGf1Orw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjgxOA==", "bodyText": "Is the length prefix more than an implementation detail or should this just be named EncodeStringUTF8?", "url": "https://github.com/apache/beam/pull/11925#discussion_r436016818", "createdAt": "2020-06-05T16:01:15Z", "author": {"login": "tysonjh"}, "path": "sdks/go/pkg/beam/core/graph/coder/stringutf8.go", "diffHunk": "@@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"io\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/ioutilx\"\n+)\n+\n+const bufCap = 64\n+\n+// EncodeStringUTF8LP encodes a UTF string with a length prefix.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTE1MQ==", "bodyText": "Maybe a test that verifies the LP is present in the encoded result and one that verifies a failure on decode when the LP is not present?", "url": "https://github.com/apache/beam/pull/11925#discussion_r436031151", "createdAt": "2020-06-05T16:27:47Z", "author": {"login": "tysonjh"}, "path": "sdks/go/pkg/beam/core/graph/coder/stringutf8_test.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/base64\"\n+\t\"io\"\n+\t\"strings\"\n+\t\"testing\"\n+\t\"unicode/utf8\"\n+)\n+\n+var testValues = []string{\n+\t\"\",\n+\t\"a\",\n+\t\"13\",\n+\t\"hello\",\n+\t\"a longer string with spaces and all that\",\n+\t\"a string with a \\n newline\",\n+\t\"\u30b9\u30bf\u30ea\u30f3\u30b0\",\n+\t\"I am the very model of a modern major general.\\nI've information animal, vegetable, and mineral\",\n+}\n+\n+// Base64 encoded versions of the above strings, without the length prefix.\n+var testEncodings = []string{\n+\t\"\",\n+\t\"YQ\",\n+\t\"MTM\",\n+\t\"aGVsbG8\",\n+\t\"YSBsb25nZXIgc3RyaW5nIHdpdGggc3BhY2VzIGFuZCBhbGwgdGhhdA\",\n+\t\"YSBzdHJpbmcgd2l0aCBhIAogbmV3bGluZQ\",\n+\t\"44K544K_44Oq44Oz44Kw\",\n+\t\"SSBhbSB0aGUgdmVyeSBtb2RlbCBvZiBhIG1vZGVybiBtYWpvciBnZW5lcmFsLgpJJ3ZlIGluZm9ybWF0aW9uIGFuaW1hbCwgdmVnZXRhYmxlLCBhbmQgbWluZXJhbA\",\n+}\n+\n+// TestLen serves as a verification that string lengths\n+// match their equivalent byte lengths, and not their rune\n+// representation.\n+func TestLen(t *testing.T) {\n+\truneCount := []int{0, 1, 2, 5, 40, 25, 5, 94}\n+\tfor i, s := range testValues {\n+\t\tif got, want := len(s), len([]byte(s)); got != want {\n+\t\t\tt.Errorf(\"string and []byte len do not match. got %v, want %v\", got, want)\n+\t\t}\n+\t\tif got, want := utf8.RuneCountInString(s), runeCount[i]; got != want {\n+\t\t\tt.Errorf(\"Rune count of %q change len do not match. got %v, want %v\", s, got, want)\n+\t\t}\n+\t}\n+}\n+\n+func TestEncodeStringUTF8(t *testing.T) {\n+\tfor i, s := range testValues {\n+\t\ts := s\n+\t\twant := testEncodings[i]\n+\t\tt.Run(s, func(t *testing.T) {\n+\t\t\tvar b strings.Builder\n+\t\t\tbase64enc := base64.NewEncoder(base64.RawURLEncoding, &b)\n+\n+\t\t\tif err := encodeStringUTF8(s, base64enc); err != nil {\n+\t\t\t\tt.Fatal(err)\n+\t\t\t}\n+\t\t\tbase64enc.Close()\n+\t\t\tgot := b.String()\n+\t\t\tif got != want {\n+\t\t\t\tt.Errorf(\"encodeStringUTF8(%q) = %q, want %q\", s, got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestDecodeStringUTF8(t *testing.T) {\n+\tfor i, s := range testEncodings {\n+\t\ts := s\n+\t\twant := testValues[i]\n+\t\tt.Run(want, func(t *testing.T) {\n+\t\t\tb := bytes.NewBufferString(s)\n+\t\t\tbase64dec := base64.NewDecoder(base64.RawURLEncoding, b)\n+\n+\t\t\tgot, err := decodeStringUTF8(int64(len(want)), base64dec)\n+\t\t\tif err != nil && err != io.EOF {\n+\t\t\t\tt.Fatal(err)\n+\t\t\t}\n+\t\t\tif got != want {\n+\t\t\t\tt.Errorf(\"decodeStringUTF8(%q) = %q, want %q\", s, got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestEncodeDecodeStringUTF8LP(t *testing.T) {\n+\tfor _, s := range testValues {\n+\t\twant := s\n+\t\tt.Run(want, func(t *testing.T) {\n+\t\t\tvar build strings.Builder\n+\t\t\tif err := EncodeStringUTF8LP(want, &build); err != nil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTI5Njk1", "url": "https://github.com/apache/beam/pull/11925#pullrequestreview-425529695", "createdAt": "2020-06-05T18:25:02Z", "commit": {"oid": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4039, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}