{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMzQ1MDEx", "number": 13483, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjowNTo0M1rOFCnmlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMzowMjo0NFrOFcG84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjkwMzI3OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjowNTo0M1rOIB4VpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjowNTo0M1rOIB4VpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0MjUzMg==", "bodyText": "I think here we expect schema:\nSchema schema = Schema.builder().addArrayField(\"array_field\", FieldType.of(FieldType.INT64)).build();\n\nmeaning it is an \"array of int64\"", "url": "https://github.com/apache/beam/pull/13483#discussion_r538842532", "createdAt": "2020-12-08T22:05:43Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlDialectSpecTest.java", "diffHunk": "@@ -4067,4 +4060,21 @@ public void testSimpleTableName() {\n             Row.withSchema(singleField).addValues(15L).build());\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n+\n+  @Test\n+  public void testArrayAggregation() {\n+    String sql =\n+            \"SELECT ARRAY_AGG(x) AS array_agg\\n\" +\n+                    \"FROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    Schema schema = Schema.builder().addArrayField(\"array_field\", FieldType.of(Schema.TypeName.ARRAY)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5216b44cab5042b9c55db6bb6bc3a2ec956f2957"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjk1NDIyOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SqlOperators.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjoxODoxMVrOIB4yqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo1MToyM1rOIC9-xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0OTk2MA==", "bodyText": "Here you simply created an array type without specifying the element type. I guess that's why the error message says the \"inferred type is ARRAY NOT NULL\" (just array type, your can ignore the \"NOT NULL\" suffix), where it should be \"BIGINT NOT NULL ARRAY NOT NULL\" (array of bigint).\nTo create an array type with element type specified, you may want to use createTypeFactory().createArrayType(), like here: https://github.com/robinyqiu/beam/blob/cbe87445d4259b6b485bc010231dda1895022d83/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java#L170", "url": "https://github.com/apache/beam/pull/13483#discussion_r538849960", "createdAt": "2020-12-08T22:18:11Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SqlOperators.java", "diffHunk": "@@ -81,6 +72,12 @@\n           x -> createTypeFactory().createSqlType(SqlTypeName.VARCHAR),\n           new UdafImpl<>(new StringAgg.StringAggString()));\n \n+  public static final SqlOperator ARR_AGG_ARR_FN =\n+          createUdafOperator(\n+                  \"array_agg\",\n+                  x -> createTypeFactory().createSqlType(SqlTypeName.ARRAY),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5216b44cab5042b9c55db6bb6bc3a2ec956f2957"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwMDY1NQ==", "bodyText": "But ARRAY_AGG should support all element types, not just INT64. https://github.com/google/zetasql/blob/master/docs/aggregate_functions.md#array_agg", "url": "https://github.com/apache/beam/pull/13483#discussion_r539600655", "createdAt": "2020-12-09T19:52:15Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SqlOperators.java", "diffHunk": "@@ -81,6 +72,12 @@\n           x -> createTypeFactory().createSqlType(SqlTypeName.VARCHAR),\n           new UdafImpl<>(new StringAgg.StringAggString()));\n \n+  public static final SqlOperator ARR_AGG_ARR_FN =\n+          createUdafOperator(\n+                  \"array_agg\",\n+                  x -> createTypeFactory().createSqlType(SqlTypeName.ARRAY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0OTk2MA=="}, "originalCommit": {"oid": "5216b44cab5042b9c55db6bb6bc3a2ec956f2957"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwMjMxOQ==", "bodyText": "@ibzib exactly. I try to implement generic array like not sure if it is the correct way.\nprivate static RelDataType relDataType =\nnew JavaTypeFactoryImpl(RelDataTypeSystem.DEFAULT)\n.builder()\n.add(\"col_tinyint\", SqlTypeName.TINYINT)\n.add(\"col_smallint\", SqlTypeName.SMALLINT)\n.add(\"col_integer\", SqlTypeName.INTEGER)\n.add(\"col_bigint\", SqlTypeName.BIGINT)\n.add(\"col_float\", SqlTypeName.FLOAT)\n.add(\"col_double\", SqlTypeName.DOUBLE)\n.add(\"col_decimal\", SqlTypeName.DECIMAL)\n.add(\"col_string_varchar\", SqlTypeName.VARCHAR)\n.add(\"col_time\", SqlTypeName.TIME)\n.add(\"col_date\", SqlTypeName.DATE)\n.add(\"col_timestamp_with_local_time_zone\", SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE)\n.add(\"col_timestamp\", SqlTypeName.TIMESTAMP)\n.add(\"col_boolean\", SqlTypeName.BOOLEAN)\n.build();\npublic static final SqlOperator ARR_AGG_ARR_FN =\ncreateUdafOperator(\n\"array_agg\",\nx -> createTypeFactory().createArrayType(relDataType, -1),\nnew UdafImpl<>(new ArrayAgg.ArrayAggArray()));\n@robinyqiu", "url": "https://github.com/apache/beam/pull/13483#discussion_r539602319", "createdAt": "2020-12-09T19:54:50Z", "author": {"login": "sonam-vend"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SqlOperators.java", "diffHunk": "@@ -81,6 +72,12 @@\n           x -> createTypeFactory().createSqlType(SqlTypeName.VARCHAR),\n           new UdafImpl<>(new StringAgg.StringAggString()));\n \n+  public static final SqlOperator ARR_AGG_ARR_FN =\n+          createUdafOperator(\n+                  \"array_agg\",\n+                  x -> createTypeFactory().createSqlType(SqlTypeName.ARRAY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0OTk2MA=="}, "originalCommit": {"oid": "5216b44cab5042b9c55db6bb6bc3a2ec956f2957"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDMyNg==", "bodyText": "Yeah, ARRAY_AGG should be generic. I said the type should be \"BIGINT NOT NULL ARRAY NOT NULL\" because that's from the error message.\nSonam, I believe there is some way that you can get the element type from the input x. You don't need to define your new mapping.", "url": "https://github.com/apache/beam/pull/13483#discussion_r539664326", "createdAt": "2020-12-09T21:33:44Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SqlOperators.java", "diffHunk": "@@ -81,6 +72,12 @@\n           x -> createTypeFactory().createSqlType(SqlTypeName.VARCHAR),\n           new UdafImpl<>(new StringAgg.StringAggString()));\n \n+  public static final SqlOperator ARR_AGG_ARR_FN =\n+          createUdafOperator(\n+                  \"array_agg\",\n+                  x -> createTypeFactory().createSqlType(SqlTypeName.ARRAY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0OTk2MA=="}, "originalCommit": {"oid": "5216b44cab5042b9c55db6bb6bc3a2ec956f2957"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzU1Ng==", "bodyText": "x -> createTypeFactory().createArrayType(x.getOperandType(0), -1) worked.\nThanks @robinyqiu  @ibzib", "url": "https://github.com/apache/beam/pull/13483#discussion_r539983556", "createdAt": "2020-12-10T08:51:23Z", "author": {"login": "sonam-vend"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SqlOperators.java", "diffHunk": "@@ -81,6 +72,12 @@\n           x -> createTypeFactory().createSqlType(SqlTypeName.VARCHAR),\n           new UdafImpl<>(new StringAgg.StringAggString()));\n \n+  public static final SqlOperator ARR_AGG_ARR_FN =\n+          createUdafOperator(\n+                  \"array_agg\",\n+                  x -> createTypeFactory().createSqlType(SqlTypeName.ARRAY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0OTk2MA=="}, "originalCommit": {"oid": "5216b44cab5042b9c55db6bb6bc3a2ec956f2957"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1MDE4MzM2OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/udaf/ArrayAgg.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMzowMjo0NFrOIn_pGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMzowMjo0NFrOIn_pGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODgwODA5MA==", "bodyText": "The Beam ARRAY type expect the data to be a Collection type, not Object[] type (i.e Beam ARRAY != Java array). That's why you get the error during cast. The fix should be simple: change the return type of this function to list (also the third class generic parameter).", "url": "https://github.com/apache/beam/pull/13483#discussion_r578808090", "createdAt": "2021-02-18T23:02:44Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/udaf/ArrayAgg.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.udaf;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.sdk.transforms.Combine;\n+\n+public class ArrayAgg {\n+\n+  public static class ArrayAggArray extends Combine.CombineFn<Object, List<Object>, Object[]> {\n+    @Override\n+    public List<Object> createAccumulator() {\n+      return new ArrayList<>();\n+    }\n+\n+    @Override\n+    public List<Object> addInput(List<Object> accum, Object input) {\n+      accum.add(input);\n+      return accum;\n+    }\n+\n+    @Override\n+    public List<Object> mergeAccumulators(Iterable<List<Object>> accums) {\n+      List<Object> merged = new ArrayList<>();\n+      for (List<Object> accum : accums) {\n+        for (Object o : accum) {\n+          merged.add(o);\n+        }\n+      }\n+      return merged;\n+    }\n+\n+    @Override\n+    public Object[] extractOutput(List<Object> accumulator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f3bba96468ab49b98924dcdc1cc7718b005410"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2495, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}