{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzg3MTI5", "number": 11776, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyMzo0MFrOD_8Gww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyMzo0MFrOD_8Gww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzcxNjUxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/snippets/snippets.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyMzo0MFrOGa50aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MjozOVrOGbN1qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzQ2NQ==", "bodyText": "Could you remove trailing empty lines?", "url": "https://github.com/apache/beam/pull/11776#discussion_r430863465", "createdAt": "2020-05-27T05:23:40Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/examples/snippets/snippets.py", "diffHunk": "@@ -1520,3 +1528,90 @@ def bigqueryio_deadletter():\n   # [END BigQueryIODeadLetter]\n \n   return result\n+\n+\n+def extract_sentiments(response):\n+  # [START nlp_extract_sentiments]\n+  return {\n+      'sentences': [{\n+          sentence.text.content: sentence.sentiment.score\n+      } for sentence in response.sentences],\n+      'document_sentiment': response.document_sentiment.score,\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9af9d9f534d63024e3ec2a2fe28877d356d3950"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MTQ2NA==", "bodyText": "Done, thanks.", "url": "https://github.com/apache/beam/pull/11776#discussion_r431191464", "createdAt": "2020-05-27T14:42:39Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/examples/snippets/snippets.py", "diffHunk": "@@ -1520,3 +1528,90 @@ def bigqueryio_deadletter():\n   # [END BigQueryIODeadLetter]\n \n   return result\n+\n+\n+def extract_sentiments(response):\n+  # [START nlp_extract_sentiments]\n+  return {\n+      'sentences': [{\n+          sentence.text.content: sentence.sentiment.score\n+      } for sentence in response.sentences],\n+      'document_sentiment': response.document_sentiment.score,\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzQ2NQ=="}, "originalCommit": {"oid": "d9af9d9f534d63024e3ec2a2fe28877d356d3950"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3837, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}