{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDkzNDE0", "number": 11244, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxNzo0MVrODuKfDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMzoyM1rODuKjPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMyODc5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxNzo0MVrOGAA6IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0MjozNFrOGAqkFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODA2NQ==", "bodyText": "Not from this PR but shouldn't this be a dry run ?", "url": "https://github.com/apache/beam/pull/11244#discussion_r402668065", "createdAt": "2020-04-03T00:17:41Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -641,12 +641,19 @@ def __init__(\n   def estimate_size(self):\n     bq = bigquery_tools.BigQueryWrapper()\n     if self.table_reference is not None:\n+      table_ref = self.table_reference\n+      if (isinstance(self.table_reference, vp.ValueProvider) and\n+          self.table_reference.is_accessible()):\n+        table_ref = bigquery_tools.parse_table_reference(\n+            self.table_reference.get(), self.dataset, self.project)\n+      elif isinstance(self.table_reference, vp.ValueProvider):\n+        # Size estimation is best effort. We return 0 as we have no\n+        # access to the table that we're querying.\n+        return 0\n       table = bq.get_table(\n-          self.table_reference.projectId,\n-          self.table_reference.datasetId,\n-          self.table_reference.tableId)\n+          table_ref.projectId, table_ref.datasetId, table_ref.tableId)\n       return int(table.numBytes)\n-    else:\n+    elif self.query is not None and self.query.is_accessible():\n       job = bq._start_query_job(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDU0OQ==", "bodyText": "if you look at line 663, it is a dry run : )", "url": "https://github.com/apache/beam/pull/11244#discussion_r403350549", "createdAt": "2020-04-03T21:42:34Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -641,12 +641,19 @@ def __init__(\n   def estimate_size(self):\n     bq = bigquery_tools.BigQueryWrapper()\n     if self.table_reference is not None:\n+      table_ref = self.table_reference\n+      if (isinstance(self.table_reference, vp.ValueProvider) and\n+          self.table_reference.is_accessible()):\n+        table_ref = bigquery_tools.parse_table_reference(\n+            self.table_reference.get(), self.dataset, self.project)\n+      elif isinstance(self.table_reference, vp.ValueProvider):\n+        # Size estimation is best effort. We return 0 as we have no\n+        # access to the table that we're querying.\n+        return 0\n       table = bq.get_table(\n-          self.table_reference.projectId,\n-          self.table_reference.datasetId,\n-          self.table_reference.tableId)\n+          table_ref.projectId, table_ref.datasetId, table_ref.tableId)\n       return int(table.numBytes)\n-    else:\n+    elif self.query is not None and self.query.is_accessible():\n       job = bq._start_query_job(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODA2NQ=="}, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzMjY4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxOTozMVrOGAA8QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0MjoxM1rOGAqjnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODYwOA==", "bodyText": "Shouldn't we support ValueProvider for queries as well ?", "url": "https://github.com/apache/beam/pull/11244#discussion_r402668608", "createdAt": "2020-04-03T00:19:31Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -641,12 +641,19 @@ def __init__(\n   def estimate_size(self):\n     bq = bigquery_tools.BigQueryWrapper()\n     if self.table_reference is not None:\n+      table_ref = self.table_reference\n+      if (isinstance(self.table_reference, vp.ValueProvider) and\n+          self.table_reference.is_accessible()):\n+        table_ref = bigquery_tools.parse_table_reference(\n+            self.table_reference.get(), self.dataset, self.project)\n+      elif isinstance(self.table_reference, vp.ValueProvider):\n+        # Size estimation is best effort. We return 0 as we have no\n+        # access to the table that we're querying.\n+        return 0\n       table = bq.get_table(\n-          self.table_reference.projectId,\n-          self.table_reference.datasetId,\n-          self.table_reference.tableId)\n+          table_ref.projectId, table_ref.datasetId, table_ref.tableId)\n       return int(table.numBytes)\n-    else:\n+    elif self.query is not None and self.query.is_accessible():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDQyOA==", "bodyText": "It is supported now. In this case, the self.query parameter is wrapped by a ValueProvider already. This does not work for self.table because it may be a non-string.", "url": "https://github.com/apache/beam/pull/11244#discussion_r403350428", "createdAt": "2020-04-03T21:42:13Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -641,12 +641,19 @@ def __init__(\n   def estimate_size(self):\n     bq = bigquery_tools.BigQueryWrapper()\n     if self.table_reference is not None:\n+      table_ref = self.table_reference\n+      if (isinstance(self.table_reference, vp.ValueProvider) and\n+          self.table_reference.is_accessible()):\n+        table_ref = bigquery_tools.parse_table_reference(\n+            self.table_reference.get(), self.dataset, self.project)\n+      elif isinstance(self.table_reference, vp.ValueProvider):\n+        # Size estimation is best effort. We return 0 as we have no\n+        # access to the table that we're querying.\n+        return 0\n       table = bq.get_table(\n-          self.table_reference.projectId,\n-          self.table_reference.datasetId,\n-          self.table_reference.tableId)\n+          table_ref.projectId, table_ref.datasetId, table_ref.tableId)\n       return int(table.numBytes)\n-    else:\n+    elif self.query is not None and self.query.is_accessible():", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODYwOA=="}, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzOTI3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMzoxNVrOGAA__w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0Mjo1MlrOGAqkmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTU2Nw==", "bodyText": "We have to return None if size cannot be determined. See spec here: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/io/iobase.py#L157", "url": "https://github.com/apache/beam/pull/11244#discussion_r402669567", "createdAt": "2020-04-03T00:23:15Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -641,12 +641,19 @@ def __init__(\n   def estimate_size(self):\n     bq = bigquery_tools.BigQueryWrapper()\n     if self.table_reference is not None:\n+      table_ref = self.table_reference\n+      if (isinstance(self.table_reference, vp.ValueProvider) and\n+          self.table_reference.is_accessible()):\n+        table_ref = bigquery_tools.parse_table_reference(\n+            self.table_reference.get(), self.dataset, self.project)\n+      elif isinstance(self.table_reference, vp.ValueProvider):\n+        # Size estimation is best effort. We return 0 as we have no\n+        # access to the table that we're querying.\n+        return 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDY4Mw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11244#discussion_r403350683", "createdAt": "2020-04-03T21:42:52Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -641,12 +641,19 @@ def __init__(\n   def estimate_size(self):\n     bq = bigquery_tools.BigQueryWrapper()\n     if self.table_reference is not None:\n+      table_ref = self.table_reference\n+      if (isinstance(self.table_reference, vp.ValueProvider) and\n+          self.table_reference.is_accessible()):\n+        table_ref = bigquery_tools.parse_table_reference(\n+            self.table_reference.get(), self.dataset, self.project)\n+      elif isinstance(self.table_reference, vp.ValueProvider):\n+        # Size estimation is best effort. We return 0 as we have no\n+        # access to the table that we're querying.\n+        return 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTU2Nw=="}, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzOTQ5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMzoyM1rOGABAHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0Mjo1OFrOGAqkuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTU5Ng==", "bodyText": "Ditto.", "url": "https://github.com/apache/beam/pull/11244#discussion_r402669596", "createdAt": "2020-04-03T00:23:23Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -657,6 +664,10 @@ def estimate_size(self):\n           kms_key=self.kms_key)\n       size = int(job.statistics.totalBytesProcessed)\n       return size\n+    else:\n+      # Size estimation is best effort. We return 0 as we have no\n+      # access to the query that we're running.\n+      return 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDcxMw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11244#discussion_r403350713", "createdAt": "2020-04-03T21:42:58Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -657,6 +664,10 @@ def estimate_size(self):\n           kms_key=self.kms_key)\n       size = int(job.statistics.totalBytesProcessed)\n       return size\n+    else:\n+      # Size estimation is best effort. We return 0 as we have no\n+      # access to the query that we're running.\n+      return 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTU5Ng=="}, "originalCommit": {"oid": "857883bd88f7d2227501e69f1204029898be42b2"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1552, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}