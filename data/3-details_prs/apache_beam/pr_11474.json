{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzkyMTQw", "number": 11474, "title": "[BEAM-9642] Enabling SDF exec runners and fixing small bug.", "bodyText": "This actually enables SDFs to actually get used. Only basic testing has\nbeen done, though. One of the bugs that was revealed from that testing\nwas fixed in the ProcessSizedElementsAndRestrictions step.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-21T01:52:42Z", "url": "https://github.com/apache/beam/pull/11474", "merged": true, "mergeCommit": {"oid": "fe3241ff89e65e3b640d01ebfc266e2a9cf4f884"}, "closed": true, "closedAt": "2020-04-22T17:31:54Z", "author": {"login": "youngoli"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZpu_CgH2gAyNDA2MzkyMTQwOmFlNTBlNTNlMmI3MzJhMGZhMzFkZmMzZTMxOTEwMjEwZjU3MTZlMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaLx5PAFqTM5ODQxOTkxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/ae50e53e2b732a0fa31dfc3e31910210f5716e07", "committedDate": "2020-04-21T01:51:37Z", "message": "[BEAM-9642] Enabling SDF exec runners and fixing small bug.\n\nThis actually enables SDFs to actually get used. Only basic testing has\nbeen done, though. One of the bugs that was revealed from that testing\nwas fixed in the ProcessSizedElementsAndRestrictions step."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDgzNTI5", "url": "https://github.com/apache/beam/pull/11474#pullrequestreview-397483529", "createdAt": "2020-04-21T16:43:49Z", "commit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo0Mzo0OVrOGJN0qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0Nzo0OVrOGJTPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNjg0Mw==", "bodyText": "The idiomatic form for this would be to do the following:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvar mainIn = &MainInput{\n          \n          \n            \n             mainIn := &MainInput{\n          \n      \n    \n    \n  \n\nvar declarations are usually for uninitialized variables.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412316843", "createdAt": "2020-04-21T16:43:49Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -263,20 +266,33 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(ctx context.Context\n \t\treturn errors.Errorf(\"invalid status for ParDo %v: %v, want Active\", n.PDo.UID, n.PDo.status)\n \t}\n \n-\tuserElm := elm.Elm.(*FullValue).Elm.(*FullValue)\n \trest := elm.Elm.(*FullValue).Elm2\n \trt := n.inv.Invoke(rest)\n+\tvar mainIn = &MainInput{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNzM1OA==", "bodyText": "Note for the performance pass: We can know KV vs not KV from the input PCollection coderat exec/translate.go time, so we can avoid doing this if branch per element.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412317358", "createdAt": "2020-04-21T16:44:38Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -263,20 +266,33 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(ctx context.Context\n \t\treturn errors.Errorf(\"invalid status for ParDo %v: %v, want Active\", n.PDo.UID, n.PDo.status)\n \t}\n \n-\tuserElm := elm.Elm.(*FullValue).Elm.(*FullValue)\n \trest := elm.Elm.(*FullValue).Elm2\n \trt := n.inv.Invoke(rest)\n+\tvar mainIn = &MainInput{\n+\t\tValues:   values,\n+\t\tRTracker: rt,\n+\t}\n \n-\treturn n.PDo.processMainInput(&MainInput{\n-\t\tKey: FullValue{ // User userElm's values but the top-level windows and timestamp.\n+\t// For the key, the way we fill it out depends on whether the input element\n+\t// is a KV or single-element. Single-elements might have been lifted out of\n+\t// their FullValue if they were decoded, so we need to have a case for that.\n+\t// Also, we use the the top-level windows and timestamp.\n+\tif userElm, ok := elm.Elm.(*FullValue).Elm.(*FullValue); ok {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwMjg2OA==", "bodyText": "NoActionRequiredNit: I don't like that this gets to 6 indentations deep, which is a bit of a readability concern, but I'm not certain that moving this to a helper function would be that helpful. We'd probably need to break it into two helpers, one from handling the graphx.URNDoFn, and then this graph.ParDo block.\nThese are a changes for another PR though.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412402868", "createdAt": "2020-04-21T18:43:36Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "diffHunk": "@@ -372,32 +386,43 @@ func (b *builder) makeLink(from string, id linkID) (Node, error) {\n \n \t\t\tswitch op {\n \t\t\tcase graph.ParDo:\n-\t\t\t\tn := &ParDo{UID: b.idgen.New(), Inbound: in, Out: out}\n-\t\t\t\tn.Fn, err = graph.AsDoFn(fn, graph.MainUnknown)\n+\t\t\t\tdofn, err := graph.AsDoFn(fn, graph.MainUnknown)\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n-\t\t\t\tn.PID = transform.GetUniqueName()\n-\n-\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n-\t\t\t\tfor i := 1; i < len(input); i++ {\n-\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n-\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n-\n-\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\treturn nil, err\n+\t\t\t\tswitch urn {\n+\t\t\t\tcase urnPairWithRestriction:\n+\t\t\t\t\tu = &PairWithRestriction{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tcase urnSplitAndSizeRestrictions:\n+\t\t\t\t\tu = &SplitAndSizeRestrictions{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tdefault:\n+\t\t\t\t\tn := &ParDo{UID: b.idgen.New(), Fn: dofn, Inbound: in, Out: out}\n+\t\t\t\t\tn.PID = transform.GetUniqueName()\n+\n+\t\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n+\t\t\t\t\tfor i := 1; i < len(input); i++ {\n+\t\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNTYwMw==", "bodyText": "Consider moving the common case to always be used, and then corrected afterwards.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tif urn == urnProcessSizedElementsAndRestrictions {\n          \n          \n            \n            \t\t\t\t\t\tu = &ProcessSizedElementsAndRestrictions{PDo: n}\n          \n          \n            \n            \t\t\t\t\t} else {\n          \n          \n            \n            \t\t\t\t\t\tu = n\n          \n          \n            \n            \t\t\t\t\t}\n          \n          \n            \n            \t\t\t\t\tu = n\n          \n          \n            \n            \t\t\t\t\tif urn == urnProcessSizedElementsAndRestrictions {\n          \n          \n            \n            \t\t\t\t\t\tu = &ProcessSizedElementsAndRestrictions{PDo: n}\n          \n          \n            \n            \t\t\t\t\t}\n          \n      \n    \n    \n  \n\nThis idiom avoids the else block, and indicates that if there were a ?: operator in Go, that's what would happen. The compiler will optimize this appropriately.", "url": "https://github.com/apache/beam/pull/11474#discussion_r412405603", "createdAt": "2020-04-21T18:47:49Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/translate.go", "diffHunk": "@@ -372,32 +386,43 @@ func (b *builder) makeLink(from string, id linkID) (Node, error) {\n \n \t\t\tswitch op {\n \t\t\tcase graph.ParDo:\n-\t\t\t\tn := &ParDo{UID: b.idgen.New(), Inbound: in, Out: out}\n-\t\t\t\tn.Fn, err = graph.AsDoFn(fn, graph.MainUnknown)\n+\t\t\t\tdofn, err := graph.AsDoFn(fn, graph.MainUnknown)\n \t\t\t\tif err != nil {\n \t\t\t\t\treturn nil, err\n \t\t\t\t}\n-\t\t\t\tn.PID = transform.GetUniqueName()\n-\n-\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n-\t\t\t\tfor i := 1; i < len(input); i++ {\n-\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n-\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n-\n-\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\treturn nil, err\n+\t\t\t\tswitch urn {\n+\t\t\t\tcase urnPairWithRestriction:\n+\t\t\t\t\tu = &PairWithRestriction{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tcase urnSplitAndSizeRestrictions:\n+\t\t\t\t\tu = &SplitAndSizeRestrictions{UID: b.idgen.New(), Fn: dofn, Out: out[0]}\n+\t\t\t\tdefault:\n+\t\t\t\t\tn := &ParDo{UID: b.idgen.New(), Fn: dofn, Inbound: in, Out: out}\n+\t\t\t\t\tn.PID = transform.GetUniqueName()\n+\n+\t\t\t\t\tinput := unmarshalKeyedValues(transform.GetInputs())\n+\t\t\t\t\tfor i := 1; i < len(input); i++ {\n+\t\t\t\t\t\t// TODO(herohde) 8/8/2018: handle different windows, view_fn and window_mapping_fn.\n+\t\t\t\t\t\t// For now, assume we don't need any information in the pardo payload.\n+\n+\t\t\t\t\t\tec, wc, err := b.makeCoderForPCollection(input[i])\n+\t\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\t\treturn nil, err\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tsid := StreamID{\n+\t\t\t\t\t\t\tPort:         Port{URL: b.desc.GetStateApiServiceDescriptor().GetUrl()},\n+\t\t\t\t\t\t\tPtransformID: id.to,\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tsideInputID := fmt.Sprintf(\"i%v\", i) // SideInputID (= local id, \"iN\")\n+\t\t\t\t\t\tside := NewSideInputAdapter(sid, sideInputID, coder.NewW(ec, wc))\n+\t\t\t\t\t\tn.Side = append(n.Side, side)\n \t\t\t\t\t}\n-\n-\t\t\t\t\tsid := StreamID{\n-\t\t\t\t\t\tPort:         Port{URL: b.desc.GetStateApiServiceDescriptor().GetUrl()},\n-\t\t\t\t\t\tPtransformID: id.to,\n+\t\t\t\t\tif urn == urnProcessSizedElementsAndRestrictions {\n+\t\t\t\t\t\tu = &ProcessSizedElementsAndRestrictions{PDo: n}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tu = n\n \t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae50e53e2b732a0fa31dfc3e31910210f5716e07"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f918e47d4e0df859f12b03b276542dcb2fc2e0d6", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/f918e47d4e0df859f12b03b276542dcb2fc2e0d6", "committedDate": "2020-04-22T02:36:55Z", "message": "[BEAM-9642] Fixup."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDE5OTE4", "url": "https://github.com/apache/beam/pull/11474#pullrequestreview-398419918", "createdAt": "2020-04-22T17:31:34Z", "commit": {"oid": "f918e47d4e0df859f12b03b276542dcb2fc2e0d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4347, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}