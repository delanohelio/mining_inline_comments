{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjgzMDE5", "number": 12858, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoyNDo0NlrOEkZuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoyNzoxNFrOEkZxig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjA1NjA0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoyNDo0NlrOHTU3kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTo0NzozMlrOHWNi0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNjg5OQ==", "bodyText": "The all was dropped here, which makes the statement always true.", "url": "https://github.com/apache/beam/pull/12858#discussion_r490026899", "createdAt": "2020-09-17T07:24:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -279,13 +267,23 @@ def __getattr__(self, name):\n \n   def __getitem__(self, key):\n     # TODO: Replicate pd.DataFrame.__getitem__ logic\n-    if (isinstance(key, list) and\n-        all(key_column in self._expr.proxy().columns\n-            for key_column in key)) or key in self._expr.proxy().columns:\n+    if isinstance(key, frame_base.DeferredBase):\n+      # Fail early if key is a DeferredBase as it interacts surprisingly with\n+      # key in self._expr.proxy().columns\n+      raise NotImplementedError(\n+          \"Indexing with a deferred frame is not yet supported. Consider \"\n+          \"using df.loc[...]\")\n+\n+    if (isinstance(key, list) and key_column in self._expr.proxy().columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a67057766894d99be37ee9e9db6dac9ac5d299"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MjYyNw==", "bodyText": "Good catch, fixed", "url": "https://github.com/apache/beam/pull/12858#discussion_r493052627", "createdAt": "2020-09-22T21:47:32Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -279,13 +267,23 @@ def __getattr__(self, name):\n \n   def __getitem__(self, key):\n     # TODO: Replicate pd.DataFrame.__getitem__ logic\n-    if (isinstance(key, list) and\n-        all(key_column in self._expr.proxy().columns\n-            for key_column in key)) or key in self._expr.proxy().columns:\n+    if isinstance(key, frame_base.DeferredBase):\n+      # Fail early if key is a DeferredBase as it interacts surprisingly with\n+      # key in self._expr.proxy().columns\n+      raise NotImplementedError(\n+          \"Indexing with a deferred frame is not yet supported. Consider \"\n+          \"using df.loc[...]\")\n+\n+    if (isinstance(key, list) and key_column in self._expr.proxy().columns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNjg5OQ=="}, "originalCommit": {"oid": "e7a67057766894d99be37ee9e9db6dac9ac5d299"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjA2NDc0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoyNzoxNFrOHTU89Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTo0NzozOVrOHWNjCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyODI3Nw==", "bodyText": "I've been thinking we could do something here if the value type that goes into the columns are categorical.", "url": "https://github.com/apache/beam/pull/12858#discussion_r490028277", "createdAt": "2020-09-17T07:27:14Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -763,8 +788,9 @@ def sort_values(self, axis, **kwargs):\n   transform = frame_base._elementwise_method(\n       'transform', restrictions={'axis': 0})\n \n-  def transpose(self, *args, **kwargs):\n-    raise frame_base.WontImplementError('non-deferred column values')\n+  transpose = frame_base.wont_implement_method('non-deferred column values')\n+  pivot = frame_base.wont_implement_method('non-deferred column values')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a67057766894d99be37ee9e9db6dac9ac5d299"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYwMDI5NA==", "bodyText": "Ack, I'll change these to NotImplemented", "url": "https://github.com/apache/beam/pull/12858#discussion_r491600294", "createdAt": "2020-09-19T23:22:47Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -763,8 +788,9 @@ def sort_values(self, axis, **kwargs):\n   transform = frame_base._elementwise_method(\n       'transform', restrictions={'axis': 0})\n \n-  def transpose(self, *args, **kwargs):\n-    raise frame_base.WontImplementError('non-deferred column values')\n+  transpose = frame_base.wont_implement_method('non-deferred column values')\n+  pivot = frame_base.wont_implement_method('non-deferred column values')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyODI3Nw=="}, "originalCommit": {"oid": "e7a67057766894d99be37ee9e9db6dac9ac5d299"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MjY4Mw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12858#discussion_r493052683", "createdAt": "2020-09-22T21:47:39Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -763,8 +788,9 @@ def sort_values(self, axis, **kwargs):\n   transform = frame_base._elementwise_method(\n       'transform', restrictions={'axis': 0})\n \n-  def transpose(self, *args, **kwargs):\n-    raise frame_base.WontImplementError('non-deferred column values')\n+  transpose = frame_base.wont_implement_method('non-deferred column values')\n+  pivot = frame_base.wont_implement_method('non-deferred column values')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyODI3Nw=="}, "originalCommit": {"oid": "e7a67057766894d99be37ee9e9db6dac9ac5d299"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3332, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}