{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MTA0MDU0", "number": 12366, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1MzoyOVrOER8prg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1MzoyOVrOER8prg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjU0OTU4OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1MzoyOVrOG277wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDowOTo0MFrOG-QMEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA==", "bodyText": "I would prefer not to suppress the warnings, but to fix them. Or if they are suppressed, we need a comment explaining why. I know this is just test code, but good test code matters too!", "url": "https://github.com/apache/beam/pull/12366#discussion_r460258240", "createdAt": "2020-07-24T19:53:29Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MzUzMA==", "bodyText": "I got this after enabling the checkerframework\n/Users/jayendrap/lab/beam/sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java:100: error: [argument.type.incompatible] incompatible types in argument.\n          .setPlannerName(queryPlanner.getCanonicalName());\n                                                       ^\n  found   : @Initialized @Nullable String\n  required: @Initialized @NonNull String\n\nI am assuming that it is thrown as queryPlanner is uninitialized so compiler is inferring that queryPlanner.getCanonicalName() would give null and hence I suppressed that. Am I correct here, or I can't understand any other reason for this nullness.", "url": "https://github.com/apache/beam/pull/12366#discussion_r460353530", "createdAt": "2020-07-25T02:31:59Z", "author": {"login": "jayendra13"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NTcyMA==", "bodyText": "The checkerframework nullness analysis is not a heuristic warning framework like spotbugs/findbugs. It is a new and improved type system, so the idea is to always satisfy it by the right types everywhere.\nIn this case, the javadoc for Class#getCanonicalName says \"the canonical name of the class if it exists, otherwise null\". So the checkerframework team has put a @Nullable annotation on the method. I actually did not realize this method was nullable. That is pretty annoying. So we might want to switch to just getName sometimes or otherwise use MoreObjects.firstNonNull to give a default string.", "url": "https://github.com/apache/beam/pull/12366#discussion_r460355720", "createdAt": "2020-07-25T02:58:20Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjUxNA==", "bodyText": "gotcha so I am doing queryPlanner.getCanonicalName() --> queryPlanner.getName().", "url": "https://github.com/apache/beam/pull/12366#discussion_r460356514", "createdAt": "2020-07-25T03:07:52Z", "author": {"login": "jayendra13"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NzMxOA==", "bodyText": "Maybe... in this case I realize that the string is probably used to create a planner by reflection. I don't know if that will work. If it does, then that is great. If it does not work, then you'll want to check for null and throw an exception. I've created a new Beam module to make this easy: org.apache.beam.sdk.utils.Preconditions.checkArgumentNotNull returns a non-nullable value after checking.", "url": "https://github.com/apache/beam/pull/12366#discussion_r460357318", "createdAt": "2020-07-25T03:17:31Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2NjUyMQ==", "bodyText": "Using checkArgumentNotNull \n      readPipeline\n          .getOptions()\n          .as(BeamSqlPipelineOptions.class)\n          .setPlannerName(checkArgumentNotNull(queryPlanner.getCanonicalName()));\n\nthrows\n/home/jayendra/beam/sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java:101: error: [flowexpr.parse.error.postcondition] error parsing the postcondition expression for checkArgumentNotNull(T)\n          .setPlannerName(checkArgumentNotNull(queryPlanner.getCanonicalName()));\n                                              ^\n  cannot parse the expression Invalid 'reference' because identifier not found\n\nWhich seems to be related to typetools/checker-framework#752 .\nI checked the other places in the code where checkArgumentNotNull has been used, all the uses are under the runner.dataflow package where null-cheking has not been applied yet.", "url": "https://github.com/apache/beam/pull/12366#discussion_r460366521", "createdAt": "2020-07-25T05:10:32Z", "author": {"login": "jayendra13"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTY4Ng==", "bodyText": "Yes, my mistake. I used the name reference when I needed to use the positional parameter #1. It should be fixed now.", "url": "https://github.com/apache/beam/pull/12366#discussion_r461201686", "createdAt": "2020-07-27T22:15:56Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0MzUwOQ==", "bodyText": "So should I put back @SuppressWarnings(\"nullness\") for the method, but that would be method level suppression. May be we can pull out runPipeline part to separate method and apply SuppressWarnings to only that pulled out method.", "url": "https://github.com/apache/beam/pull/12366#discussion_r461343509", "createdAt": "2020-07-28T06:18:58Z", "author": {"login": "jayendra13"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMDEzMA==", "bodyText": "I think I should mark this as Resolved.", "url": "https://github.com/apache/beam/pull/12366#discussion_r467930130", "createdAt": "2020-08-10T14:09:40Z", "author": {"login": "jayendra13"}, "path": "sdks/java/extensions/sql/datacatalog/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogBigQueryIT.java", "diffHunk": "@@ -66,12 +66,15 @@\n           });\n     }\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(0)\n     public String dialectName;\n \n+    @SuppressWarnings(\"initialization.fields.uninitialized\")\n     @Parameterized.Parameter(1)\n     public Class<? extends QueryPlanner> queryPlanner;\n \n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODI0MA=="}, "originalCommit": {"oid": "9a7f729a4eaaf8e349c79349d71a312ae8a0d075"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 945, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}