{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxOTYxNTY4", "number": 13474, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxNjowNVrOFAZMBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNDo0MlrOFA_6kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTU2OTk5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxNjowNVrOH-qgrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyODoyOVrOH_kjFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MDI1Mw==", "bodyText": "To verify: this type constraint is for Beam internal use only and users are not expected specify it?", "url": "https://github.com/apache/beam/pull/13474#discussion_r535470253", "createdAt": "2020-12-03T18:16:05Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNTY4Mw==", "bodyText": "Users or dev may use it for specifying the output type of a transform to provide type hints.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535705683", "createdAt": "2020-12-03T22:53:32Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MDI1Mw=="}, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzkzNg==", "bodyText": "If you do want to allow something like a ShardedKey type hint annotation in code, add it here:\n\n  \n    \n      beam/sdks/python/apache_beam/typehints/typehints.py\n    \n    \n         Line 1117\n      in\n      edc087e\n    \n    \n    \n    \n\n        \n          \n           Any = AnyTypeConstraint() \n        \n    \n  \n\n\n(doesn't have to be in this PR)", "url": "https://github.com/apache/beam/pull/13474#discussion_r536407936", "createdAt": "2020-12-04T21:58:35Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MDI1Mw=="}, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTE0MA==", "bodyText": "I see. Thanks for pointing it out. I will change that in a follow-up PR.", "url": "https://github.com/apache/beam/pull/13474#discussion_r536421140", "createdAt": "2020-12-04T22:28:29Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MDI1Mw=="}, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTg1MDc1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coders.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOToyMDoxMlrOH-tK3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MzozNVrOH-44aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUxMzgyMQ==", "bodyText": "Why isn't this import at the top of the file?", "url": "https://github.com/apache/beam/pull/13474#discussion_r535513821", "createdAt": "2020-12-03T19:20:12Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -1485,6 +1486,21 @@ def as_cloud_object(self, coders_context=None):\n         ],\n     }\n \n+  def to_type_hint(self):\n+    from apache_beam.typehints import sharded_key_type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNTcwNA==", "bodyText": "To avoid circular import.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535705704", "createdAt": "2020-12-03T22:53:35Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -1485,6 +1486,21 @@ def as_cloud_object(self, coders_context=None):\n         ],\n     }\n \n+  def to_type_hint(self):\n+    from apache_beam.typehints import sharded_key_type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUxMzgyMQ=="}, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTkzMzIyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTozMzozN1rOH-t6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1NDoxN1rOH-45qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyNjAxMg==", "bodyText": "The 2 exceptions raised here should have test coverage.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535526012", "createdAt": "2020-12-03T19:33:37Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):\n+  def __init__(self, key_type):\n+    self.key_type = typehints.normalize(key_type)\n+\n+  def _inner_types(self):\n+    yield self.key_type\n+\n+  def _consistent_with_check_(self, sub):\n+    return (\n+        isinstance(sub, self.__class__) and\n+        typehints.is_consistent_with(sub.key_type, self.key_type))\n+\n+  def type_check(self, instance):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNjAyNw==", "bodyText": "Done. Added test coverage and some minor fixes in the latest commit.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535706027", "createdAt": "2020-12-03T22:54:17Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):\n+  def __init__(self, key_type):\n+    self.key_type = typehints.normalize(key_type)\n+\n+  def _inner_types(self):\n+    yield self.key_type\n+\n+  def _consistent_with_check_(self, sub):\n+    return (\n+        isinstance(sub, self.__class__) and\n+        typehints.is_consistent_with(sub.key_type, self.key_type))\n+\n+  def type_check(self, instance):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyNjAxMg=="}, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTk2NTEyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/coders.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTozODo0OFrOH-uNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1NDoyNVrOH-459A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzMDc2Mw==", "bodyText": "This branch should have test coverage.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535530763", "createdAt": "2020-12-03T19:38:48Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -1485,6 +1486,21 @@ def as_cloud_object(self, coders_context=None):\n         ],\n     }\n \n+  def to_type_hint(self):\n+    from apache_beam.typehints import sharded_key_type\n+    return sharded_key_type.ShardedKeyTypeConstraint(\n+        self._key_coder.to_type_hint())\n+\n+  @staticmethod\n+  def from_type_hint(typehint, registry):\n+    from apache_beam.typehints import sharded_key_type\n+    if isinstance(typehint, sharded_key_type.ShardedKeyTypeConstraint):\n+      return ShardedKeyCoder(registry.get_coder(typehint.key_type))\n+    else:\n+      raise ValueError((", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNjEwMA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535706100", "createdAt": "2020-12-03T22:54:25Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -1485,6 +1486,21 @@ def as_cloud_object(self, coders_context=None):\n         ],\n     }\n \n+  def to_type_hint(self):\n+    from apache_beam.typehints import sharded_key_type\n+    return sharded_key_type.ShardedKeyTypeConstraint(\n+        self._key_coder.to_type_hint())\n+\n+  @staticmethod\n+  def from_type_hint(typehint, registry):\n+    from apache_beam.typehints import sharded_key_type\n+    if isinstance(typehint, sharded_key_type.ShardedKeyTypeConstraint):\n+      return ShardedKeyCoder(registry.get_coder(typehint.key_type))\n+    else:\n+      raise ValueError((", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzMDc2Mw=="}, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkxNTA2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/sharded_key_type_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNDo0M1rOH_j6Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyODozM1rOH_kjNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDYzMA==", "bodyText": "Note: self.assertRaisesRegex can also check exception messages.", "url": "https://github.com/apache/beam/pull/13474#discussion_r536410630", "createdAt": "2020-12-04T22:04:43Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type_test.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Unit tests for the ShardedKeyTypeConstraint.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.typehints import Tuple\n+from apache_beam.typehints import typehints\n+from apache_beam.typehints.sharded_key_type import ShardedKeyTypeConstraint\n+from apache_beam.typehints.typehints_test import TypeHintTestCase\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraintTest(TypeHintTestCase):\n+  def test_compatibility(self):\n+    constraint1 = ShardedKeyTypeConstraint(int)\n+    constraint2 = ShardedKeyTypeConstraint(str)\n+\n+    self.assertCompatible(constraint1, constraint1)\n+    self.assertCompatible(constraint2, constraint2)\n+    self.assertNotCompatible(constraint1, constraint2)\n+\n+  def test_repr(self):\n+    constraint = ShardedKeyTypeConstraint(int)\n+    self.assertEqual('ShardedKey(int)', repr(constraint))\n+\n+  def test_type_check_not_sharded_key(self):\n+    constraint = ShardedKeyTypeConstraint(int)\n+    obj = 5\n+    with self.assertRaises(TypeError) as e:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc9e10db9f57ae55059510f9faaa117d2da32a4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTE3Mg==", "bodyText": "Good to know!", "url": "https://github.com/apache/beam/pull/13474#discussion_r536421172", "createdAt": "2020-12-04T22:28:33Z", "author": {"login": "nehsyc"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type_test.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Unit tests for the ShardedKeyTypeConstraint.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.typehints import Tuple\n+from apache_beam.typehints import typehints\n+from apache_beam.typehints.sharded_key_type import ShardedKeyTypeConstraint\n+from apache_beam.typehints.typehints_test import TypeHintTestCase\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraintTest(TypeHintTestCase):\n+  def test_compatibility(self):\n+    constraint1 = ShardedKeyTypeConstraint(int)\n+    constraint2 = ShardedKeyTypeConstraint(str)\n+\n+    self.assertCompatible(constraint1, constraint1)\n+    self.assertCompatible(constraint2, constraint2)\n+    self.assertNotCompatible(constraint1, constraint2)\n+\n+  def test_repr(self):\n+    constraint = ShardedKeyTypeConstraint(int)\n+    self.assertEqual('ShardedKey(int)', repr(constraint))\n+\n+  def test_type_check_not_sharded_key(self):\n+    constraint = ShardedKeyTypeConstraint(int)\n+    obj = 5\n+    with self.assertRaises(TypeError) as e:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDYzMA=="}, "originalCommit": {"oid": "6cc9e10db9f57ae55059510f9faaa117d2da32a4"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2492, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}