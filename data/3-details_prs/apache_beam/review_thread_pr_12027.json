{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTE4MTA0", "number": 12027, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowNToyOVrOEGiG5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozNDowOFrOEG3fVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mjg1NzMyOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowNToyOVrOGlZAWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowODowM1rOGl6mCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDE4Ng==", "bodyText": "You can write 100L to create a java Long literal.", "url": "https://github.com/apache/beam/pull/12027#discussion_r441860186", "createdAt": "2020-06-17T22:05:29Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java", "diffHunk": "@@ -195,7 +195,8 @@ private static void initializeCalciteEnvironmentWithContext(Context... extraCont\n   private static void initializeBeamTableProvider() {\n     Table projectTable = getTable(\"InMemoryTableProject\", PushDownOptions.PROJECT);\n     Table bothTable = getTable(\"InMemoryTableBoth\", PushDownOptions.BOTH);\n-    Row[] rows = {row(BASIC_SCHEMA, 100, 1, \"one\", 100), row(BASIC_SCHEMA, 200, 2, \"two\", 200)};\n+    Row[] rows = {row(BASIC_SCHEMA, (long) 100, (long) 1, \"one\", (long) 100),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDUwNA==", "bodyText": "Done. Thanks for pointing out.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442410504", "createdAt": "2020-06-18T18:08:03Z", "author": {"login": "ZijieSong946"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java", "diffHunk": "@@ -195,7 +195,8 @@ private static void initializeCalciteEnvironmentWithContext(Context... extraCont\n   private static void initializeBeamTableProvider() {\n     Table projectTable = getTable(\"InMemoryTableProject\", PushDownOptions.PROJECT);\n     Table bothTable = getTable(\"InMemoryTableBoth\", PushDownOptions.BOTH);\n-    Row[] rows = {row(BASIC_SCHEMA, 100, 1, \"one\", 100), row(BASIC_SCHEMA, 200, 2, \"two\", 200)};\n+    Row[] rows = {row(BASIC_SCHEMA, (long) 100, (long) 1, \"one\", (long) 100),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDE4Ng=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTkzNzM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozMDo0MlrOGl3LwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMDozM1rOGl7WDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDYyNQ==", "bodyText": "Could you mark this utility class as final and add a private constructor, like ZetaSqlBeamTranslationUtils.java?", "url": "https://github.com/apache/beam/pull/12027#discussion_r442354625", "createdAt": "2020-06-18T16:30:42Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjc5Nw==", "bodyText": "Done. Thanks for the suggestion.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442422797", "createdAt": "2020-06-18T18:30:33Z", "author": {"login": "ZijieSong946"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDYyNQ=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA0MjU2OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1ODo0NlrOGl4PNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowODoyN1rOGl8k8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg==", "bodyText": "We don't have TIME support at this point. Can we get this entry removed?\n(Also, just curious can the MAP entry below be removed as well? Not sure if any code is using that.)", "url": "https://github.com/apache/beam/pull/12027#discussion_r442371892", "createdAt": "2020-06-18T16:58:46Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzM4NA==", "bodyText": "Done. TIME and MAP entry removed at this point.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442423384", "createdAt": "2020-06-18T18:31:44Z", "author": {"login": "ZijieSong946"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNDIxNA==", "bodyText": "I believe #10158 dropped the need for MAP. You might verify it can be removed with @TheNeuralBit", "url": "https://github.com/apache/beam/pull/12027#discussion_r442424214", "createdAt": "2020-06-18T18:33:16Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzU1NQ==", "bodyText": "Thanks. I got it.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442427555", "createdAt": "2020-06-18T18:39:45Z", "author": {"login": "ZijieSong946"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTc3MA==", "bodyText": "Technically we still support the \"nested\" style of schema for pubsub that uses a MAP for attributes, but it won't work with ZetaSQL anyway, only in CalciteSQL. I think it's fine to just throw when we encounter a MAP here.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442439770", "createdAt": "2020-06-18T19:01:56Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0Mjk5NQ==", "bodyText": "Thanks. I would remove it anyway.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442442995", "createdAt": "2020-06-18T19:08:27Z", "author": {"login": "ZijieSong946"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjM2MDUzOnYy", "diffSide": "LEFT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozNDowOFrOGl7dTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozNDowOFrOGl7dTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNDY1Mg==", "bodyText": "Thanks for cleaning up after my C developer instinct to call itoa everywhere.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442424652", "createdAt": "2020-06-18T18:34:08Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -134,7 +138,7 @@ public static RelDataType toArrayRelDataType(\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n       if (\"\".equals(name)) {\n-        name = \"$col\" + String.valueOf(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3540, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}