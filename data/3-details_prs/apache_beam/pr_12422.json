{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDY1NjIz", "number": 12422, "title": "[BEAM-601] Run KinesisIOIT with localstack", "bodyText": "I've done this by the way of writing cross-language integration tests.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-30T10:45:13Z", "url": "https://github.com/apache/beam/pull/12422", "merged": true, "mergeCommit": {"oid": "dfadde2d3ee0a0487362dbcca80388fdc2ef2302"}, "closed": true, "closedAt": "2020-08-11T11:13:16Z", "author": {"login": "piotr-szuberski"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc59ZoLABqjM2MDMyNTEzNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9ziMPAFqTQ2NDkwNTk4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c1601715d00783e33857711f2a6f5c4f4225464", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1c1601715d00783e33857711f2a6f5c4f4225464", "committedDate": "2020-07-30T10:42:41Z", "message": "[BEAM-601] Add kinesis integration test to Java postcommit"}, "afterCommit": {"oid": "409d8c7bf94e453acd7c24494c46b716af16ecd0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/409d8c7bf94e453acd7c24494c46b716af16ecd0", "committedDate": "2020-07-30T10:51:47Z", "message": "[BEAM-601] Add kinesis integration test to Java postcommit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODI4Njk2", "url": "https://github.com/apache/beam/pull/12422#pullrequestreview-458828696", "createdAt": "2020-07-30T23:27:20Z", "commit": {"oid": "409d8c7bf94e453acd7c24494c46b716af16ecd0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzoyNzoyMFrOG53Jgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzoyNzoyMFrOG53Jgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU3MQ==", "bodyText": "I think we should maintain the ability to test against production AWS. Someday maybe we'll get some AWS credits to run this continuously against prod, and it could still be useful for local testing. Could you make it so we only start up a localstack container if nothing in KinesisTestOptions is modified?\nWhen starting the localstack you could just set the relevant fields in the PipelineOptions and let the rest of the test read them as it does now.", "url": "https://github.com/apache/beam/pull/12422#discussion_r463325571", "createdAt": "2020-07-30T23:27:20Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -34,34 +35,65 @@\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n-import org.joda.time.Instant;\n-import org.junit.BeforeClass;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n  * KinesisTestOptions} in order to run this.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n+  private static final String STREAM_NAME = \"beam_kinesis\";\n+  private static final int NUM_RECORDS = 1000;\n \n   @Rule public TestPipeline pipelineWrite = TestPipeline.create();\n   @Rule public TestPipeline pipelineRead = TestPipeline.create();\n \n-  private static KinesisTestOptions options;\n-  private static final Instant now = Instant.now();\n+  static {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+  }\n+\n+  private final LocalStackContainer localstackContainer =\n+      new LocalStackContainer(\"0.11.3\")\n+          .withServices(LocalStackContainer.Service.KINESIS)\n+          .withEnv(\"USE_SSL\", \"true\")\n+          .withStartupAttempts(3);\n+\n+  private String endpoint;\n+  private String region;\n+  private String accessKey;\n+  private String secretKey;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    localstackContainer.start();\n+    endpoint =\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getServiceEndpoint()\n+            .replace(\"http\", \"https\");\n+    region =\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getSigningRegion();\n+    accessKey =\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSAccessKeyId();\n+    secretKey =\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSSecretKey();\n+\n+    createStream();\n+  }\n \n-  @BeforeClass\n-  public static void setup() {\n-    PipelineOptionsFactory.register(KinesisTestOptions.class);\n-    options = TestPipeline.testingPipelineOptions().as(KinesisTestOptions.class);\n-    numberOfShards = options.getNumberOfShards();\n-    numberOfRows = options.getNumberOfRecords();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409d8c7bf94e453acd7c24494c46b716af16ecd0"}, "originalPosition": 90}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63a48eedca5351a9d04427622d49abebffb138fc", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/63a48eedca5351a9d04427622d49abebffb138fc", "committedDate": "2020-07-31T10:57:58Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}, "afterCommit": {"oid": "df359094b00107d0b30956f83e05afeb4b11ded3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/df359094b00107d0b30956f83e05afeb4b11ded3", "committedDate": "2020-07-31T11:32:57Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df359094b00107d0b30956f83e05afeb4b11ded3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/df359094b00107d0b30956f83e05afeb4b11ded3", "committedDate": "2020-07-31T11:32:57Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}, "afterCommit": {"oid": "eef87faf64f4a121101611e8926f5cf85814c4b0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eef87faf64f4a121101611e8926f5cf85814c4b0", "committedDate": "2020-07-31T11:34:23Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eef87faf64f4a121101611e8926f5cf85814c4b0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eef87faf64f4a121101611e8926f5cf85814c4b0", "committedDate": "2020-07-31T11:34:23Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}, "afterCommit": {"oid": "f481dc93fffed26eb1a29efa5759292dd5316867", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f481dc93fffed26eb1a29efa5759292dd5316867", "committedDate": "2020-07-31T11:59:15Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f481dc93fffed26eb1a29efa5759292dd5316867", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f481dc93fffed26eb1a29efa5759292dd5316867", "committedDate": "2020-07-31T11:59:15Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}, "afterCommit": {"oid": "6d8507a34d502a5d3cfcb02a7efd1522d211b92d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6d8507a34d502a5d3cfcb02a7efd1522d211b92d", "committedDate": "2020-07-31T12:11:14Z", "message": "Enable providing pipeline options so the kinesis test can be run on production environment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMzg3MTc5", "url": "https://github.com/apache/beam/pull/12422#pullrequestreview-460387179", "createdAt": "2020-08-03T22:46:39Z", "commit": {"oid": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo0NjozOVrOG7LGOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1NjoxNlrOG7LSEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMDk4NQ==", "bodyText": ":(", "url": "https://github.com/apache/beam/pull/12422#discussion_r464700985", "createdAt": "2020-08-03T22:46:39Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -99,28 +116,101 @@ private void runRead() {\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n                 .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n                 .withInitialTimestampInStream(now)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() throws Exception {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    // For some unclear reason localstack requires the timestamp in seconds\n+    now = Instant.ofEpochMilli(Long.divideUnsigned(Instant.now().getMillis(), 1000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTUyMQ==", "bodyText": "Does this need to be Instant.now()? Might be preferable to just make it some constant to make it more repeatable.", "url": "https://github.com/apache/beam/pull/12422#discussion_r464701521", "createdAt": "2020-08-03T22:48:16Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -35,33 +38,45 @@\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n+import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n- * KinesisTestOptions} in order to run this.\n+ * KinesisTestOptions} in order to run this if you want to test it with production setup. By default\n+ * when no options are provided an instance of localstack is used.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n-\n   @Rule public TestPipeline pipelineWrite = TestPipeline.create();\n   @Rule public TestPipeline pipelineRead = TestPipeline.create();\n \n+  private static LocalStackContainer localstackContainer;\n+\n   private static KinesisTestOptions options;\n-  private static final Instant now = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjI1OQ==", "bodyText": "Rather than repeating the default values here, you could create a fresh instance using PipelineOptionsFactory.fromArgs().as(KinesisTestOptions.class) and compare each field against it.", "url": "https://github.com/apache/beam/pull/12422#discussion_r464702259", "createdAt": "2020-08-03T22:50:42Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -99,28 +116,101 @@ private void runRead() {\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n                 .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n                 .withInitialTimestampInStream(now)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() throws Exception {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    // For some unclear reason localstack requires the timestamp in seconds\n+    now = Instant.ofEpochMilli(Long.divideUnsigned(Instant.now().getMillis(), 1000));\n+\n+    localstackContainer =\n+        new LocalStackContainer(\"0.11.3\")\n+            .withServices(LocalStackContainer.Service.KINESIS)\n+            .withEnv(\"USE_SSL\", \"true\")\n+            .withStartupAttempts(3);\n+    localstackContainer.start();\n+\n+    options.setAwsServiceEndpoint(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getServiceEndpoint()\n+            .replace(\"http\", \"https\"));\n+    options.setAwsKinesisRegion(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getSigningRegion());\n+    options.setAwsAccessKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSAccessKeyId());\n+    options.setAwsSecretKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSSecretKey());\n+    options.setNumberOfRecords(1000);\n+    options.setNumberOfShards(1);\n+    options.setAwsKinesisStream(\"beam_kinesis_test\");\n+    options.setAwsVerifyCertificate(false);\n+    createStream(options.getAwsKinesisStream());\n+  }\n+\n+  private static void createStream(String streamName) throws Exception {\n+    AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();\n+\n+    clientBuilder.setCredentials(localstackContainer.getDefaultCredentialsProvider());\n+    clientBuilder.setEndpointConfiguration(\n+        localstackContainer.getEndpointConfiguration(LocalStackContainer.Service.KINESIS));\n+\n+    AmazonKinesis client = clientBuilder.build();\n+\n+    client.createStream(streamName, 1);\n+    int repeats = 10;\n+    for (int i = 0; i <= repeats; ++i) {\n+      String streamStatus =\n+          client.describeStream(streamName).getStreamDescription().getStreamStatus();\n+      if (\"ACTIVE\".equals(streamStatus)) {\n+        break;\n+      }\n+      if (i == repeats) {\n+        throw new RuntimeException(\"Unable to initialize stream\");\n+      }\n+      Thread.sleep(1000L);\n+    }\n+  }\n+\n+  /** Check whether pipeline options were provided. If not, use localstack container. */\n+  private static boolean doUseLocalstack() {\n+    return \"aws-access-key\".equals(options.getAwsAccessKey())\n+        && \"aws-secret-key\".equals(options.getAwsSecretKey())\n+        && \"aws-kinesis-stream\".equals(options.getAwsKinesisStream())\n+        && \"aws-kinesis-region\".equals(options.getAwsKinesisRegion())\n+        && options.getNumberOfShards() == 2\n+        && options.getNumberOfRecords() == 1000\n+        && options.getAwsServiceEndpoint() == null\n+        && options.getAwsVerifyCertificate();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNDAxOQ==", "bodyText": "Is this something we're going to have to keep up-to-date? Is it possible to just omit it?", "url": "https://github.com/apache/beam/pull/12422#discussion_r464704019", "createdAt": "2020-08-03T22:56:16Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -99,28 +116,101 @@ private void runRead() {\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n                 .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n                 .withInitialTimestampInStream(now)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() throws Exception {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    // For some unclear reason localstack requires the timestamp in seconds\n+    now = Instant.ofEpochMilli(Long.divideUnsigned(Instant.now().getMillis(), 1000));\n+\n+    localstackContainer =\n+        new LocalStackContainer(\"0.11.3\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "committedDate": "2020-08-05T08:58:52Z", "message": "[BEAM-601] Run KinesisIOIT withtestcontainers with localstack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eb11a8ad83ecc932ad1e723b93b2f879710027e0", "committedDate": "2020-08-05T08:59:08Z", "message": "[BEAM-601] Add kinesis integration test to Java postcommit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bccded3c60651680b2a62f59f0dfcec42ea7d81", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2bccded3c60651680b2a62f59f0dfcec42ea7d81", "committedDate": "2020-08-04T07:25:32Z", "message": "Compare with default pipeline instead of comparing with default pipeline's values"}, "afterCommit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eb11a8ad83ecc932ad1e723b93b2f879710027e0", "committedDate": "2020-08-05T08:59:08Z", "message": "[BEAM-601] Add kinesis integration test to Java postcommit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTEzODk0", "url": "https://github.com/apache/beam/pull/12422#pullrequestreview-461513894", "createdAt": "2020-08-05T09:56:29Z", "commit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwOTo1NjoyOVrOG8CrEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTowODoyOFrOG8OCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxMTUzNw==", "bodyText": "Why not to use the more recent version, like 1.14.x?", "url": "https://github.com/apache/beam/pull/12422#discussion_r465611537", "createdAt": "2020-08-05T09:56:29Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kinesis/build.gradle", "diffHunk": "@@ -50,6 +50,7 @@ dependencies {\n   testCompile library.java.powermock\n   testCompile library.java.powermock_mockito\n   testCompile \"org.assertj:assertj-core:3.11.1\"\n+  testCompile 'org.testcontainers:localstack:1.11.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjA4MQ==", "bodyText": "Why you decided to modify BasicKinesisProvider and not just create a new provider class for testing that extends this basic one?", "url": "https://github.com/apache/beam/pull/12422#discussion_r465702081", "createdAt": "2020-08-05T12:50:03Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/BasicKinesisProvider.java", "diffHunk": "@@ -39,16 +40,27 @@\n   private final String secretKey;\n   private final Regions region;\n   private final @Nullable String serviceEndpoint;\n+  private final boolean verifyCertificate;\n \n   BasicKinesisProvider(\n-      String accessKey, String secretKey, Regions region, @Nullable String serviceEndpoint) {\n+      String accessKey,\n+      String secretKey,\n+      Regions region,\n+      @Nullable String serviceEndpoint,\n+      boolean verifyCertificate) {\n     checkArgument(accessKey != null, \"accessKey can not be null\");\n     checkArgument(secretKey != null, \"secretKey can not be null\");\n     checkArgument(region != null, \"region can not be null\");\n     this.accessKey = accessKey;\n     this.secretKey = secretKey;\n     this.region = region;\n     this.serviceEndpoint = serviceEndpoint;\n+    this.verifyCertificate = verifyCertificate;\n+  }\n+\n+  BasicKinesisProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NDEzOA==", "bodyText": "Could you elaborate why the stream name is partly hardcoded and not configurable as it was before? We run KinesisIOIT on our \"in-house\" env against real Kinesis instance with pre-created stream with different privileges.\nProbably, we should do this only in case of testing against LocalStack.", "url": "https://github.com/apache/beam/pull/12422#discussion_r465794138", "createdAt": "2020-08-05T15:03:14Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -34,34 +42,52 @@\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n-import org.joda.time.Instant;\n+import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n- * KinesisTestOptions} in order to run this.\n+ * KinesisTestOptions} in order to run this if you want to test it with production setup. By default\n+ * when no options are provided an instance of localstack is used.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n+  private static final String LOCALSTACK_VERSION = \"0.11.3\";\n \n   @Rule public TestPipeline pipelineWrite = TestPipeline.create();\n   @Rule public TestPipeline pipelineRead = TestPipeline.create();\n \n+  private static LocalStackContainer localstackContainer;\n+  private static String streamName;\n+  private static AmazonKinesis kinesisClient;\n+\n   private static KinesisTestOptions options;\n-  private static final Instant now = Instant.now();\n \n   @BeforeClass\n-  public static void setup() {\n+  public static void setup() throws Exception {\n     PipelineOptionsFactory.register(KinesisTestOptions.class);\n     options = TestPipeline.testingPipelineOptions().as(KinesisTestOptions.class);\n-    numberOfShards = options.getNumberOfShards();\n-    numberOfRows = options.getNumberOfRecords();\n+    if (doUseLocalstack()) {\n+      setupLocalstack();\n+    }\n+    kinesisClient = createKinesisClient();\n+    streamName = \"beam_test_kinesis\" + UUID.randomUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5Nzc1Mg==", "bodyText": "Wouldn't be enough just to add useLocalstack option to KinesisTestOptions?", "url": "https://github.com/apache/beam/pull/12422#discussion_r465797752", "createdAt": "2020-08-05T15:08:28Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -95,32 +123,114 @@ private void runRead() {\n     PCollection<KinesisRecord> output =\n         pipelineRead.apply(\n             KinesisIO.read()\n-                .withStreamName(options.getAwsKinesisStream())\n+                .withStreamName(streamName)\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n-                .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n-                .withInitialTimestampInStream(now)\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n+                .withInitialPositionInStream(InitialPositionInStream.TRIM_HORIZON)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    localstackContainer =\n+        new LocalStackContainer(LOCALSTACK_VERSION)\n+            .withServices(LocalStackContainer.Service.KINESIS)\n+            .withEnv(\"USE_SSL\", \"true\")\n+            .withStartupAttempts(3);\n+    localstackContainer.start();\n+\n+    options.setAwsServiceEndpoint(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getServiceEndpoint()\n+            .replace(\"http\", \"https\"));\n+    options.setAwsKinesisRegion(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getSigningRegion());\n+    options.setAwsAccessKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSAccessKeyId());\n+    options.setAwsSecretKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSSecretKey());\n+    options.setNumberOfRecords(1000);\n+    options.setNumberOfShards(1);\n+    options.setAwsKinesisStream(\"beam_kinesis_test\");\n+    options.setAwsVerifyCertificate(false);\n+  }\n+\n+  private static AmazonKinesis createKinesisClient() {\n+    AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();\n+\n+    AWSCredentialsProvider credentialsProvider =\n+        new AWSStaticCredentialsProvider(\n+            new BasicAWSCredentials(options.getAwsAccessKey(), options.getAwsSecretKey()));\n+    clientBuilder.setCredentials(credentialsProvider);\n+\n+    if (options.getAwsServiceEndpoint() != null) {\n+      AwsClientBuilder.EndpointConfiguration endpointConfiguration =\n+          new AwsClientBuilder.EndpointConfiguration(\n+              options.getAwsServiceEndpoint(), options.getAwsKinesisRegion());\n+      clientBuilder.setEndpointConfiguration(endpointConfiguration);\n+    } else {\n+      clientBuilder.setRegion(options.getAwsKinesisRegion());\n+    }\n+\n+    return clientBuilder.build();\n+  }\n+\n+  private static void createStream() throws Exception {\n+    kinesisClient.createStream(streamName, 1);\n+    int repeats = 10;\n+    for (int i = 0; i <= repeats; ++i) {\n+      String streamStatus =\n+          kinesisClient.describeStream(streamName).getStreamDescription().getStreamStatus();\n+      if (\"ACTIVE\".equals(streamStatus)) {\n+        break;\n+      }\n+      if (i == repeats) {\n+        throw new RuntimeException(\"Unable to initialize stream\");\n+      }\n+      Thread.sleep(1000L);\n+    }\n+  }\n+\n+  /** Check whether pipeline options were provided. If not, use localstack container. */\n+  private static boolean doUseLocalstack() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0"}, "originalPosition": 212}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDUzNTUy", "url": "https://github.com/apache/beam/pull/12422#pullrequestreview-462453552", "createdAt": "2020-08-06T12:04:17Z", "commit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjowNDoxN1rOG8wj2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjowNDoxN1rOG8wj2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2MzM1NQ==", "bodyText": "typo: verif y Certificate", "url": "https://github.com/apache/beam/pull/12422#discussion_r466363355", "createdAt": "2020-08-06T12:04:17Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -413,6 +413,28 @@ public Read withAWSClientsProvider(\n           new BasicKinesisProvider(awsAccessKey, awsSecretKey, region, serviceEndpoint));\n     }\n \n+    /**\n+     * Specify credential details and region to be used to read from Kinesis. If you need more\n+     * sophisticated credential protocol, then you should look at {@link\n+     * Read#withAWSClientsProvider(AWSClientsProvider)}.\n+     *\n+     * <p>The {@code serviceEndpoint} sets an alternative service host. This is useful to execute\n+     * the tests with Kinesis service emulator.\n+     *\n+     * <p>The {@code veriftCertificate} disables or enables certificate verification. Never set it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87484f4281ca8d3d8893a019182ef762d18151f8", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/87484f4281ca8d3d8893a019182ef762d18151f8", "committedDate": "2020-08-06T19:02:42Z", "message": "Fixes after Alexey's code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjcxMTg0", "url": "https://github.com/apache/beam/pull/12422#pullrequestreview-464271184", "createdAt": "2020-08-10T14:19:16Z", "commit": {"oid": "87484f4281ca8d3d8893a019182ef762d18151f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxOToxNlrOG-Qk7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxOToxNlrOG-Qk7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNjQ5Mw==", "bodyText": "Should this version comply with a version of localstack dependency (1.14.3)?", "url": "https://github.com/apache/beam/pull/12422#discussion_r467936493", "createdAt": "2020-08-10T14:19:16Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -35,33 +42,51 @@\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n+import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n- * KinesisTestOptions} in order to run this.\n+ * KinesisTestOptions} in order to run this if you want to test it with production setup. By default\n+ * when no options are provided an instance of localstack is used.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n+  private static final String LOCALSTACK_VERSION = \"0.11.3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87484f4281ca8d3d8893a019182ef762d18151f8"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTA1OTg2", "url": "https://github.com/apache/beam/pull/12422#pullrequestreview-464905986", "createdAt": "2020-08-11T09:37:58Z", "commit": {"oid": "87484f4281ca8d3d8893a019182ef762d18151f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3622, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}