{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjYzNDUz", "number": 10942, "title": "[BEAM-6374] Emit PCollection metrics from GoSDK", "bodyText": "This adds PCollection metrics to the Go SDK, in particular, Element Count, and Sampled Size.\nNew exec.PCollection nodes are added between every processing node in the bundle execution graph.\n\nThe new metrics are only added as MonitoringInfos, not the legacy protos.\nThere's about ~10ns added per element per PCollection node due to the atomic additions for every element.\nElements for sizes are selected randomly, then encoded to count their bytes (w/o window headers).\n\nAn initial index is selected form the first [0,1,2] at bundle start up, and then pre-select the next index from somewhere later on, proportional to the bundle so far.\nAs currently set up, it will take around 200-300 samples for the first 1M elements, so encoded overhead is limited\n\n\nPCollections from a DataSource do 100% \"sampling\", since they're reading the bytes directly anyway. The PCollection node that would have been added after the DataSource is elided from the graph during construction, but re-used to avoid duplicating the logic for concurrently manipulating the size distribution.\n\nDataSources can properly handle CoGBKs as well, counting non-header bytes for iterables, and state backed iterables.\nThis still involves a mutex Lock for every update, so we may want to find a lighter weight mechanism to handle the distribution samples from DataSources, or simply opt for the same random sampling.\nA similar method could be used for DataSinks as well, but not handled in this PR.\nIt's important to note that the runner is already aware of the number of bytes sent and received from the SDK side, so we may opt to remove that this entirely.\n\n\nCounts and Samples are yet not made for SideInputs, which would better account for data consumed by DoFns.\n\nThank you @ajamato for reminding me of the pre-select method for sampling, and @lukecwik for pointing out the DataSource can avoid separate additional encoding costs when measuring elements.\nPerformance impact:\nI have two jobs I use for benchmarking this: Pipeline A uses int64s as elements and does simple passthroughs and sums, and Pipeline B where it's using large protocol buffers as elements, which spends a fair amount of CPU time decoding them.\nFor small \"fast\" elements, the overhead is about ~19.5% of the Go side processing (which makes sense if elements are just being passed around or incremented).\nFor large \"heavy\" elements, the overhead is about ~0.125% of the Go side of processing.\nSpecifically, this is only taking into account the Go SDK worker, and not any runner side costs. This feels acceptable for the time being, though it's possible we can improve this later, especially for \"lighter\" jobs.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-23T04:55:57Z", "url": "https://github.com/apache/beam/pull/10942", "merged": true, "mergeCommit": {"oid": "ded686a58ad4747e91a26d3e59f61019b641e655"}, "closed": true, "closedAt": "2020-03-04T21:03:23Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHAY-hAH2gAyMzc4NjYzNDUzOmU3OTQ2MzQ0NjU3Y2ZlYjM0NmRjZTk0NmM2YjY4Yzk2ZTA5YjQ5Zjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKb6Q0AH2gAyMzc4NjYzNDUzOjBmMmY5ZTEwZGMwMThmZDU0MGI5NjZmMTc4NWRlZjc4ZGZiZTM5MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e7946344657cfeb346dce946c6b68c96e09b49f9", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/e7946344657cfeb346dce946c6b68c96e09b49f9", "committedDate": "2020-02-23T03:30:50Z", "message": "[GoSDK] Move user metrics store out of exec.Plan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52f4d7a432a6488f0227e2be0064e2a768e3592d", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/52f4d7a432a6488f0227e2be0064e2a768e3592d", "committedDate": "2020-02-23T03:52:25Z", "message": "[BEAM-6374] Emit PCollection metrics from GoSDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzgzNTky", "url": "https://github.com/apache/beam/pull/10942#pullrequestreview-363783592", "createdAt": "2020-02-24T23:52:29Z", "commit": {"oid": "52f4d7a432a6488f0227e2be0064e2a768e3592d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo1MjozMFrOFt0Djg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxNjozMVrOFuR0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MzExOA==", "bodyText": "This comment should probably be updated to explain that the bool returned represents whether the snapshot has a DataSource, as opposed to the usual assumption of an \"ok\" value.", "url": "https://github.com/apache/beam/pull/10942#discussion_r383583118", "createdAt": "2020-02-24T23:52:30Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/plan.go", "diffHunk": "@@ -178,19 +160,25 @@ func (p *Plan) String() string {\n \treturn fmt.Sprintf(\"Plan[%v]:\\n%v\", p.ID(), strings.Join(units, \"\\n\"))\n }\n \n-// Progress returns a snapshot of input progress of the plan, and associated metrics.\n-func (p *Plan) Progress() (ProgressReportSnapshot, bool) {\n-\tif p.source != nil {\n-\t\treturn p.source.Progress(), true\n-\t}\n-\treturn ProgressReportSnapshot{}, false\n+// PlanSnapshot contains system metrics for the current run of the plan.\n+type PlanSnapshot struct {\n+\tSource ProgressReportSnapshot\n+\tPCols  []PCollectionSnapshot\n }\n \n-// Store returns the metric store for the last use of this plan.\n-func (p *Plan) Store() *metrics.Store {\n-\tp.storeMu.Lock()\n-\tdefer p.storeMu.Unlock()\n-\treturn p.store\n+// Progress returns a snapshot of progress of the plan, and associated metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f4d7a432a6488f0227e2be0064e2a768e3592d"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDcwNA==", "bodyText": "Just checking, we use the size of a small int instead of an int64 because the keys are encoded as small ints, right?", "url": "https://github.com/apache/beam/pull/10942#discussion_r384070704", "createdAt": "2020-02-25T19:16:31Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/datasource_test.go", "diffHunk": "@@ -201,6 +201,16 @@ func TestDataSource_Iterators(t *testing.T) {\n \t\t\tif got, want := iVals, expectedKeys; !equalList(got, want) {\n \t\t\t\tt.Errorf(\"DataSource => %#v, want %#v\", extractValues(got...), extractValues(want...))\n \t\t\t}\n+\n+\t\t\t// We're using small ints, so do some quick math to validate.\n+\t\t\tsizeOfSmallInt := 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f4d7a432a6488f0227e2be0064e2a768e3592d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42888e0f89708d905a8aa935b1ca0b1fdb628751", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/42888e0f89708d905a8aa935b1ca0b1fdb628751", "committedDate": "2020-03-04T19:13:53Z", "message": "Clarify what \"small ints\" means"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f2f9e10dc018fd540b966f1785def78dfbe3912", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/0f2f9e10dc018fd540b966f1785def78dfbe3912", "committedDate": "2020-03-04T19:16:24Z", "message": "Clarity #Progress() returned bool"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2862, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}