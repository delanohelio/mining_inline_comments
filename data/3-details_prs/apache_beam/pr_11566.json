{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNjAxMTQw", "number": 11566, "title": "[BEAM-9723] Add DLP integration transforms", "bodyText": "This PR adds DLP integration transforms for Google Cloud DLP.\nReidentify transform is not integration tested since it would require us to use a cryptographic key setup.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-29T09:41:32Z", "url": "https://github.com/apache/beam/pull/11566", "merged": true, "mergeCommit": {"oid": "b6ca2aba5a0141eed5bed29a9948e2c65874254f"}, "closed": true, "closedAt": "2020-06-02T06:56:15Z", "author": {"login": "mwalenia"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcegIepAFqTQwNjI4NDExNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0nUeEAFqTQ0NzU3MDU0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mjg0MTE3", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-406284117", "createdAt": "2020-05-06T03:30:02Z", "commit": {"oid": "a6c0dc3024f1defc1f659b2371f516925bc9d7f2"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MTk3MzM2", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-409197336", "createdAt": "2020-05-11T13:57:25Z", "commit": {"oid": "59525abad6224ebb5ff63954a56385a3e0db81a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzo1NzoyNVrOGTddRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzo1NzoyNVrOGTddRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1ODc1Ng==", "bodyText": "@santhh Can you give me a hand here? I'm getting IllegalArgumentException here because of the OutputReceiver being parametrized with Iterable instead of KV", "url": "https://github.com/apache/beam/pull/11566#discussion_r423058756", "createdAt": "2020-05-11T13:57:25Z", "author": {"login": "mwalenia"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/BatchRequestForDLP.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.metrics.Counter;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.Timer;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.values.KV;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DoFn batching the input PCollection into bigger requests in order to better utilize the Cloud DLP\n+ * service.\n+ */\n+@Experimental\n+class BatchRequestForDLP extends DoFn<KV<String, String>, KV<String, String>> {\n+  public static final Logger LOG = LoggerFactory.getLogger(BatchRequestForDLP.class);\n+  private final Counter numberOfElementsBagged =\n+      Metrics.counter(BatchRequestForDLP.class, \"numberOfElementsBagged\");\n+  private final Integer batchSize;\n+\n+  public BatchRequestForDLP(Integer batchSize) {\n+    this.batchSize = batchSize;\n+  }\n+\n+  @StateId(\"elementsBag\")\n+  private final StateSpec<BagState<KV<String, String>>> elementsBag = StateSpecs.bag();\n+\n+  @TimerId(\"eventTimer\")\n+  private final TimerSpec eventTimer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+  @ProcessElement\n+  public void process(\n+      @Element KV<String, String> element,\n+      @StateId(\"elementsBag\") BagState<KV<String, String>> elementsBag,\n+      @TimerId(\"eventTimer\") Timer eventTimer,\n+      BoundedWindow w) {\n+    elementsBag.add(element);\n+    eventTimer.set(w.maxTimestamp());\n+  }\n+\n+  @OnTimer(\"eventTimer\")\n+  public void onTimer(\n+      @StateId(\"elementsBag\") BagState<KV<String, String>> elementsBag,\n+      OutputReceiver<KV<String, Iterable<String>>> output) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59525abad6224ebb5ff63954a56385a3e0db81a0"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODU0Nzk4", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-413854798", "createdAt": "2020-05-18T18:53:52Z", "commit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1NzozN1rOGXDvAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0OTo0OVrOGXJ9Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMTYxOQ==", "bodyText": "Is there a guarantee that at least one element will be in the elementsBag iterator or is there a chance for a NoSuchElementsException on the next() call?", "url": "https://github.com/apache/beam/pull/11566#discussion_r426831619", "createdAt": "2020-05-18T18:57:37Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/BatchRequestForDLP.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.privacy.dlp.v2.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.metrics.Counter;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.Timer;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.values.KV;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DoFn batching the input PCollection into bigger requests in order to better utilize the Cloud DLP\n+ * service.\n+ */\n+@Experimental\n+class BatchRequestForDLP extends DoFn<KV<String, Table.Row>, KV<String, Iterable<Table.Row>>> {\n+  public static final Logger LOG = LoggerFactory.getLogger(BatchRequestForDLP.class);\n+\n+  private final Counter numberOfRowsBagged =\n+      Metrics.counter(BatchRequestForDLP.class, \"numberOfRowsBagged\");\n+  private final Integer batchSize;\n+\n+  @StateId(\"elementsBag\")\n+  private final StateSpec<BagState<KV<String, Table.Row>>> elementsBag = StateSpecs.bag();\n+\n+  @TimerId(\"eventTimer\")\n+  private final TimerSpec eventTimer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+  public BatchRequestForDLP(Integer batchSize) {\n+    this.batchSize = batchSize;\n+  }\n+\n+  @ProcessElement\n+  public void process(\n+      @Element KV<String, Table.Row> element,\n+      @StateId(\"elementsBag\") BagState<KV<String, Table.Row>> elementsBag,\n+      @TimerId(\"eventTimer\") Timer eventTimer,\n+      BoundedWindow w) {\n+    elementsBag.add(element);\n+    eventTimer.set(w.maxTimestamp());\n+  }\n+\n+  @OnTimer(\"eventTimer\")\n+  public void onTimer(\n+      @StateId(\"elementsBag\") BagState<KV<String, Table.Row>> elementsBag,\n+      OutputReceiver<KV<String, Iterable<Table.Row>>> output) {\n+    String key = elementsBag.read().iterator().next().getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMTgxMQ==", "bodyText": "Nit: Can you move this to the first line of the if block to avoid splitting the code like this? Also it would be nice to have the unit in the log message for the bufferSize (e.g bytes).", "url": "https://github.com/apache/beam/pull/11566#discussion_r426901811", "createdAt": "2020-05-18T21:25:53Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/BatchRequestForDLP.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.privacy.dlp.v2.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.metrics.Counter;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.Timer;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.values.KV;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DoFn batching the input PCollection into bigger requests in order to better utilize the Cloud DLP\n+ * service.\n+ */\n+@Experimental\n+class BatchRequestForDLP extends DoFn<KV<String, Table.Row>, KV<String, Iterable<Table.Row>>> {\n+  public static final Logger LOG = LoggerFactory.getLogger(BatchRequestForDLP.class);\n+\n+  private final Counter numberOfRowsBagged =\n+      Metrics.counter(BatchRequestForDLP.class, \"numberOfRowsBagged\");\n+  private final Integer batchSize;\n+\n+  @StateId(\"elementsBag\")\n+  private final StateSpec<BagState<KV<String, Table.Row>>> elementsBag = StateSpecs.bag();\n+\n+  @TimerId(\"eventTimer\")\n+  private final TimerSpec eventTimer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+  public BatchRequestForDLP(Integer batchSize) {\n+    this.batchSize = batchSize;\n+  }\n+\n+  @ProcessElement\n+  public void process(\n+      @Element KV<String, Table.Row> element,\n+      @StateId(\"elementsBag\") BagState<KV<String, Table.Row>> elementsBag,\n+      @TimerId(\"eventTimer\") Timer eventTimer,\n+      BoundedWindow w) {\n+    elementsBag.add(element);\n+    eventTimer.set(w.maxTimestamp());\n+  }\n+\n+  @OnTimer(\"eventTimer\")\n+  public void onTimer(\n+      @StateId(\"elementsBag\") BagState<KV<String, Table.Row>> elementsBag,\n+      OutputReceiver<KV<String, Iterable<Table.Row>>> output) {\n+    String key = elementsBag.read().iterator().next().getKey();\n+    AtomicInteger bufferSize = new AtomicInteger();\n+    List<Table.Row> rows = new ArrayList<>();\n+    elementsBag\n+        .read()\n+        .forEach(\n+            element -> {\n+              int elementSize = element.getValue().getSerializedSize();\n+              boolean clearBuffer = bufferSize.intValue() + elementSize > batchSize;\n+              if (clearBuffer) {\n+                numberOfRowsBagged.inc(rows.size());\n+                LOG.debug(\"Clear Buffer {} , Key {}\", bufferSize.intValue(), element.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDY5Mw==", "bodyText": "Nit: This log message would be more clear if it said the action being taken like.. 'Outputting remaining {} rows'.", "url": "https://github.com/apache/beam/pull/11566#discussion_r426904693", "createdAt": "2020-05-18T21:32:25Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/BatchRequestForDLP.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.privacy.dlp.v2.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.metrics.Counter;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.Timer;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.values.KV;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DoFn batching the input PCollection into bigger requests in order to better utilize the Cloud DLP\n+ * service.\n+ */\n+@Experimental\n+class BatchRequestForDLP extends DoFn<KV<String, Table.Row>, KV<String, Iterable<Table.Row>>> {\n+  public static final Logger LOG = LoggerFactory.getLogger(BatchRequestForDLP.class);\n+\n+  private final Counter numberOfRowsBagged =\n+      Metrics.counter(BatchRequestForDLP.class, \"numberOfRowsBagged\");\n+  private final Integer batchSize;\n+\n+  @StateId(\"elementsBag\")\n+  private final StateSpec<BagState<KV<String, Table.Row>>> elementsBag = StateSpecs.bag();\n+\n+  @TimerId(\"eventTimer\")\n+  private final TimerSpec eventTimer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+  public BatchRequestForDLP(Integer batchSize) {\n+    this.batchSize = batchSize;\n+  }\n+\n+  @ProcessElement\n+  public void process(\n+      @Element KV<String, Table.Row> element,\n+      @StateId(\"elementsBag\") BagState<KV<String, Table.Row>> elementsBag,\n+      @TimerId(\"eventTimer\") Timer eventTimer,\n+      BoundedWindow w) {\n+    elementsBag.add(element);\n+    eventTimer.set(w.maxTimestamp());\n+  }\n+\n+  @OnTimer(\"eventTimer\")\n+  public void onTimer(\n+      @StateId(\"elementsBag\") BagState<KV<String, Table.Row>> elementsBag,\n+      OutputReceiver<KV<String, Iterable<Table.Row>>> output) {\n+    String key = elementsBag.read().iterator().next().getKey();\n+    AtomicInteger bufferSize = new AtomicInteger();\n+    List<Table.Row> rows = new ArrayList<>();\n+    elementsBag\n+        .read()\n+        .forEach(\n+            element -> {\n+              int elementSize = element.getValue().getSerializedSize();\n+              boolean clearBuffer = bufferSize.intValue() + elementSize > batchSize;\n+              if (clearBuffer) {\n+                numberOfRowsBagged.inc(rows.size());\n+                LOG.debug(\"Clear Buffer {} , Key {}\", bufferSize.intValue(), element.getKey());\n+                output.output(KV.of(element.getKey(), rows));\n+                rows.clear();\n+                bufferSize.set(0);\n+              }\n+              rows.add(element.getValue());\n+              bufferSize.getAndAdd(element.getValue().getSerializedSize());\n+            });\n+    if (!rows.isEmpty()) {\n+      LOG.debug(\"Remaining rows {}\", rows.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNTAzNA==", "bodyText": "Can you use DLP_PAYLOAD_LIMIT instead?", "url": "https://github.com/apache/beam/pull/11566#discussion_r426915034", "createdAt": "2020-05-18T21:57:28Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/DLPTextOperationsIT.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.privacy.dlp.v2.CharacterMaskConfig;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.PrimitiveTransformation;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DLPTextOperationsIT {\n+  @Rule public TestPipeline testPipeline = TestPipeline.create();\n+\n+  private static final String IDENTIFYING_TEXT = \"mary.sue@example.com\";\n+  private static InfoType emailAddress = InfoType.newBuilder().setName(\"EMAIL_ADDRESS\").build();\n+  private static final InspectConfig inspectConfig =\n+      InspectConfig.newBuilder()\n+          .addInfoTypes(emailAddress)\n+          .setMinLikelihood(Likelihood.LIKELY)\n+          .build();\n+\n+  @Test\n+  public void inspectsText() {\n+    String projectId = testPipeline.getOptions().as(GcpOptions.class).getProject();\n+    PCollection<KV<String, InspectContentResponse>> inspectionResult =\n+        testPipeline\n+            .apply(Create.of(KV.of(\"\", IDENTIFYING_TEXT)))\n+            .apply(\n+                DLPInspectText.newBuilder()\n+                    .setBatchSize(52400)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNTY2MA==", "bodyText": "Having the units in the name is helpful when the type is non-descriptive. Where did this number come from?", "url": "https://github.com/apache/beam/pull/11566#discussion_r426915660", "createdAt": "2020-05-18T21:59:11Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPReidentifyText.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.ReidentifyContentRequest;\n+import com.google.privacy.dlp.v2.ReidentifyContentResponse;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and inspecting text for identifying data according\n+ * to provided settings.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set, the\n+ * same goes for reidentifyTemplateName or reidentifyConfig.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPReidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, ReidentifyContentResponse>>> {\n+\n+  public static final Logger LOG = LoggerFactory.getLogger(DLPInspectText.class);\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT = 52400;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMzIwMA==", "bodyText": "Please add a comment. It would also be beneficial to name this variable with a unit like batchSizeBytes.", "url": "https://github.com/apache/beam/pull/11566#discussion_r426923200", "createdAt": "2020-05-18T22:19:28Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/BatchRequestForDLP.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.privacy.dlp.v2.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.metrics.Counter;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.Timer;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.values.KV;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DoFn batching the input PCollection into bigger requests in order to better utilize the Cloud DLP\n+ * service.\n+ */\n+@Experimental\n+class BatchRequestForDLP extends DoFn<KV<String, Table.Row>, KV<String, Iterable<Table.Row>>> {\n+  public static final Logger LOG = LoggerFactory.getLogger(BatchRequestForDLP.class);\n+\n+  private final Counter numberOfRowsBagged =\n+      Metrics.counter(BatchRequestForDLP.class, \"numberOfRowsBagged\");\n+  private final Integer batchSize;\n+\n+  @StateId(\"elementsBag\")\n+  private final StateSpec<BagState<KV<String, Table.Row>>> elementsBag = StateSpecs.bag();\n+\n+  @TimerId(\"eventTimer\")\n+  private final TimerSpec eventTimer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+  public BatchRequestForDLP(Integer batchSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMzc2NA==", "bodyText": "An incorrect configuration should result in an exception at pipeline construction time if possible. The sooner an exception can be raised to the user the better (e.g. pipeline construction vs. pipeline runtime).\nA couple options are,\n\nAdd precondition checks into the Builder for the AutoValue. You could do this by implementing your own public DLPDeidentifyText build() method the checks preconditions and then calls a generated autoBuild method.\nAdd precondition checks into the constructor of the DoFn.", "url": "https://github.com/apache/beam/pull/11566#discussion_r426923764", "createdAt": "2020-05-18T22:20:49Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNjc2MQ==", "bodyText": "Since the delimiter is configurable, what about dropping the 'csv'? You could add details in the comments as to where the delimiter applies and the default value.", "url": "https://github.com/apache/beam/pull/11566#discussion_r426926761", "createdAt": "2020-05-18T22:29:26Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();\n+\n+  @Nullable\n+  public abstract String csvDelimiter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyOTE5NA==", "bodyText": "It would be helpful if these abstract methods, and possibly those in the builder, had comments.", "url": "https://github.com/apache/beam/pull/11566#discussion_r426929194", "createdAt": "2020-05-18T22:36:47Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  @Nullable\n+  public abstract String inspectTemplateName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjUzOA==", "bodyText": "Would you move the comments about how a method works, or what it does, to the method definition please?", "url": "https://github.com/apache/beam/pull/11566#discussion_r426932538", "createdAt": "2020-05-18T22:46:55Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzU1NA==", "bodyText": "See my earlier comment about moving configuration exceptions like this to pipeline construction time. Doing so will give earlier feedback to the user and avoid having to spin up workers and processing part of the pipeline before running into a configuration issue.", "url": "https://github.com/apache/beam/pull/11566#discussion_r426933554", "createdAt": "2020-05-18T22:49:49Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();\n+\n+  @Nullable\n+  public abstract String csvDelimiter();\n+\n+  public abstract Integer batchSize();\n+\n+  public abstract String projectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    public abstract Builder setCsvHeader(PCollectionView<List<String>> csvHeader);\n+\n+    public abstract Builder setCsvDelimiter(String delimiter);\n+\n+    public abstract Builder setBatchSize(Integer batchSize);\n+\n+    public abstract Builder setProjectId(String projectId);\n+\n+    public abstract Builder setDeidentifyTemplateName(String deidentifyTemplateName);\n+\n+    public abstract Builder setInspectConfig(InspectConfig inspectConfig);\n+\n+    public abstract Builder setDeidentifyConfig(DeidentifyConfig deidentifyConfig);\n+\n+    public abstract DLPDeidentifyText build();\n+  }\n+\n+  public static DLPDeidentifyText.Builder newBuilder() {\n+    return new AutoValue_DLPDeidentifyText.Builder();\n+  }\n+\n+  /**\n+   * The transform batches the contents of input PCollection and then calls Cloud DLP service to\n+   * perform the deidentification.\n+   *\n+   * @param input input PCollection\n+   * @return PCollection after transformations\n+   */\n+  @Override\n+  public PCollection<KV<String, DeidentifyContentResponse>> expand(\n+      PCollection<KV<String, String>> input) {\n+    return input\n+        .apply(ParDo.of(new MapStringToDlpRow(csvDelimiter())))\n+        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(batchSize())))\n+        .apply(\n+            \"DLPDeidentify\",\n+            ParDo.of(\n+                new DeidentifyText(\n+                    projectId(),\n+                    inspectTemplateName(),\n+                    deidentifyTemplateName(),\n+                    inspectConfig(),\n+                    deidentifyConfig(),\n+                    csvHeader())));\n+  }\n+\n+  static class DeidentifyText\n+      extends DoFn<KV<String, Iterable<Table.Row>>, KV<String, DeidentifyContentResponse>> {\n+    private final String projectId;\n+    private final String inspectTemplateName;\n+    private final String deidentifyTemplateName;\n+    private final InspectConfig inspectConfig;\n+    private final DeidentifyConfig deidentifyConfig;\n+    private final PCollectionView<List<String>> csvHeaders;\n+    private transient DeidentifyContentRequest.Builder requestBuilder;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+      requestBuilder =\n+          DeidentifyContentRequest.newBuilder().setParent(ProjectName.of(projectId).toString());\n+      if (inspectTemplateName != null) {\n+        requestBuilder.setInspectTemplateName(inspectTemplateName);\n+      }\n+      if (inspectConfig != null) {\n+        requestBuilder.setInspectConfig(inspectConfig);\n+      }\n+      if (inspectConfig == null && inspectTemplateName == null) {\n+        throw new IllegalArgumentException(\n+            \"Either inspectConfig or inspectTemplateName need to be set!\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTQxMzI4", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-414541328", "createdAt": "2020-05-19T15:03:15Z", "commit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTowMzoxNlrOGXk49A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTowMzoxNlrOGXk49A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NDgzNg==", "bodyText": "Can we change this to 1.1.4? There are some known issues with 1.1.1 and 1.1.2", "url": "https://github.com/apache/beam/pull/11566#discussion_r427374836", "createdAt": "2020-05-19T15:03:16Z", "author": {"login": "santhh"}, "path": "sdks/java/extensions/ml/build.gradle", "diffHunk": "@@ -26,15 +28,23 @@ description = 'Apache Beam :: SDKs :: Java :: Extensions :: ML'\n dependencies {\n     compile project(path: \":sdks:java:core\", configuration: \"shadow\")\n     compile project(\":sdks:java:expansion-service\")\n-    testCompile project(path: ':sdks:java:core', configuration: 'shadowTest')\n     compile 'com.google.cloud:google-cloud-video-intelligence:1.2.0'\n+    compile 'com.google.cloud:google-cloud-dlp:1.1.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTc4ODg1", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-414578885", "createdAt": "2020-05-19T15:41:37Z", "commit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTo0MTozN1rOGXmovg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjozNzo0N1rOGX1D1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwMzQ1NA==", "bodyText": "Are you agreeing that the comments should be moved to the methods, or that the comments are also useful here for the template inspection (I'm unfamiliar with what the 'inspect contents' and 'inspect template' actions)?", "url": "https://github.com/apache/beam/pull/11566#discussion_r427403454", "createdAt": "2020-05-19T15:41:37Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjUzOA=="}, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNDkzMw==", "bodyText": "What is the expected input? I didn't see where that is mentioned. I think the KV contains a filename key and content string value?", "url": "https://github.com/apache/beam/pull/11566#discussion_r427404933", "createdAt": "2020-05-19T15:43:37Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMTc4Mw==", "bodyText": "Is a header required? As a user, if I set a null header, I wouldn't expect to see one in the output.\n@santhh do you have an opinion regarding this?", "url": "https://github.com/apache/beam/pull/11566#discussion_r427411783", "createdAt": "2020-05-19T15:53:15Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();\n+\n+  @Nullable\n+  public abstract String csvDelimiter();\n+\n+  public abstract Integer batchSize();\n+\n+  public abstract String projectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    public abstract Builder setCsvHeader(PCollectionView<List<String>> csvHeader);\n+\n+    public abstract Builder setCsvDelimiter(String delimiter);\n+\n+    public abstract Builder setBatchSize(Integer batchSize);\n+\n+    public abstract Builder setProjectId(String projectId);\n+\n+    public abstract Builder setDeidentifyTemplateName(String deidentifyTemplateName);\n+\n+    public abstract Builder setInspectConfig(InspectConfig inspectConfig);\n+\n+    public abstract Builder setDeidentifyConfig(DeidentifyConfig deidentifyConfig);\n+\n+    public abstract DLPDeidentifyText build();\n+  }\n+\n+  public static DLPDeidentifyText.Builder newBuilder() {\n+    return new AutoValue_DLPDeidentifyText.Builder();\n+  }\n+\n+  /**\n+   * The transform batches the contents of input PCollection and then calls Cloud DLP service to\n+   * perform the deidentification.\n+   *\n+   * @param input input PCollection\n+   * @return PCollection after transformations\n+   */\n+  @Override\n+  public PCollection<KV<String, DeidentifyContentResponse>> expand(\n+      PCollection<KV<String, String>> input) {\n+    return input\n+        .apply(ParDo.of(new MapStringToDlpRow(csvDelimiter())))\n+        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(batchSize())))\n+        .apply(\n+            \"DLPDeidentify\",\n+            ParDo.of(\n+                new DeidentifyText(\n+                    projectId(),\n+                    inspectTemplateName(),\n+                    deidentifyTemplateName(),\n+                    inspectConfig(),\n+                    deidentifyConfig(),\n+                    csvHeader())));\n+  }\n+\n+  static class DeidentifyText\n+      extends DoFn<KV<String, Iterable<Table.Row>>, KV<String, DeidentifyContentResponse>> {\n+    private final String projectId;\n+    private final String inspectTemplateName;\n+    private final String deidentifyTemplateName;\n+    private final InspectConfig inspectConfig;\n+    private final DeidentifyConfig deidentifyConfig;\n+    private final PCollectionView<List<String>> csvHeaders;\n+    private transient DeidentifyContentRequest.Builder requestBuilder;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+      requestBuilder =\n+          DeidentifyContentRequest.newBuilder().setParent(ProjectName.of(projectId).toString());\n+      if (inspectTemplateName != null) {\n+        requestBuilder.setInspectTemplateName(inspectTemplateName);\n+      }\n+      if (inspectConfig != null) {\n+        requestBuilder.setInspectConfig(inspectConfig);\n+      }\n+      if (inspectConfig == null && inspectTemplateName == null) {\n+        throw new IllegalArgumentException(\n+            \"Either inspectConfig or inspectTemplateName need to be set!\");\n+      }\n+      if (deidentifyConfig != null) {\n+        requestBuilder.setDeidentifyConfig(deidentifyConfig);\n+      }\n+      if (deidentifyTemplateName != null) {\n+        requestBuilder.setDeidentifyTemplateName(deidentifyTemplateName);\n+      }\n+      if (deidentifyConfig == null && deidentifyTemplateName == null) {\n+        throw new IllegalArgumentException(\n+            \"Either deidentifyConfig or deidentifyTemplateName need to be set!\");\n+      }\n+    }\n+\n+    public DeidentifyText(\n+        String projectId,\n+        String inspectTemplateName,\n+        String deidentifyTemplateName,\n+        InspectConfig inspectConfig,\n+        DeidentifyConfig deidentifyConfig,\n+        PCollectionView<List<String>> csvHeaders) {\n+      this.projectId = projectId;\n+      this.inspectTemplateName = inspectTemplateName;\n+      this.deidentifyTemplateName = deidentifyTemplateName;\n+      this.inspectConfig = inspectConfig;\n+      this.deidentifyConfig = deidentifyConfig;\n+      this.csvHeaders = csvHeaders;\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext c) throws IOException {\n+      try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+        String fileName = c.element().getKey();\n+        List<FieldId> dlpTableHeaders;\n+        if (csvHeaders != null) {\n+          dlpTableHeaders =\n+              c.sideInput(csvHeaders).stream()\n+                  .map(header -> FieldId.newBuilder().setName(header).build())\n+                  .collect(Collectors.toList());\n+        } else {\n+          // handle unstructured input\n+          dlpTableHeaders = new ArrayList<>();\n+          dlpTableHeaders.add(FieldId.newBuilder().setName(\"value\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxNDYyMA==", "bodyText": "I wonder if it would be helpful to link to the Cloud DLP content for each type of service for users in these transform comments?", "url": "https://github.com/apache/beam/pull/11566#discussion_r427414620", "createdAt": "2020-05-19T15:57:09Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MTEyNw==", "bodyText": "It's good practice to start all javadoc comments with a short summary fragment. There are more details at Google's java style guide [1]. For example, I would phrase the summary fragment for this class as:\n'Batches input rows to reduce the number of requests sent to the Cloud DLP service.'\nWould you please go through this CL and add such comments to public classes and methods? I personally like to add them to all classes, non-trivial methods, and tricky blocks of code, regardless of access modifiers.\n[1] https://google.github.io/styleguide/javaguide.html#s7.2-summary-fragment", "url": "https://github.com/apache/beam/pull/11566#discussion_r427471127", "createdAt": "2020-05-19T17:22:39Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/BatchRequestForDLP.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.privacy.dlp.v2.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.metrics.Counter;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.Timer;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.values.KV;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DoFn batching the input PCollection into bigger requests in order to better utilize the Cloud DLP", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTc2NQ==", "bodyText": "Some places c is used, some places context is used, please pick one and use throughout. I prefer context.", "url": "https://github.com/apache/beam/pull/11566#discussion_r427639765", "createdAt": "2020-05-19T22:37:47Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/MapStringToDlpRow.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.privacy.dlp.v2.Table;\n+import com.google.privacy.dlp.v2.Value;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.values.KV;\n+\n+class MapStringToDlpRow extends DoFn<KV<String, String>, KV<String, Table.Row>> {\n+  private final String delimiter;\n+\n+  public MapStringToDlpRow(String delimiter) {\n+    this.delimiter = delimiter;\n+  }\n+\n+  @ProcessElement\n+  public void processElement(ProcessContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTIwNTg3", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-414920587", "createdAt": "2020-05-20T00:50:59Z", "commit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo1MDo1OVrOGX3lhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo1MDo1OVrOGX3lhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4MTE1Ng==", "bodyText": "should this be re-identify?", "url": "https://github.com/apache/beam/pull/11566#discussion_r427681156", "createdAt": "2020-05-20T00:50:59Z", "author": {"login": "santhh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPReidentifyText.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.ReidentifyContentRequest;\n+import com.google.privacy.dlp.v2.ReidentifyContentResponse;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and inspecting text for identifying data according\n+ * to provided settings.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set, the\n+ * same goes for reidentifyTemplateName or reidentifyConfig.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPReidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, ReidentifyContentResponse>>> {\n+\n+  public static final Logger LOG = LoggerFactory.getLogger(DLPInspectText.class);\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT = 52400;\n+\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  @Nullable\n+  public abstract String reidentifyTemplateName();\n+\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  @Nullable\n+  public abstract DeidentifyConfig reidentifyConfig();\n+\n+  @Nullable\n+  public abstract String csvDelimiter();\n+\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeaders();\n+\n+  public abstract Integer batchSize();\n+\n+  public abstract String projectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    public abstract Builder setInspectConfig(InspectConfig inspectConfig);\n+\n+    public abstract Builder setReidentifyConfig(DeidentifyConfig deidentifyConfig);\n+\n+    public abstract Builder setReidentifyTemplateName(String deidentifyTemplateName);\n+\n+    public abstract Builder setBatchSize(Integer batchSize);\n+\n+    public abstract Builder setCsvHeaders(PCollectionView<List<String>> csvHeaders);\n+\n+    public abstract Builder setCsvDelimiter(String delimiter);\n+\n+    public abstract Builder setProjectId(String projectId);\n+\n+    public abstract DLPReidentifyText build();\n+  }\n+\n+  public static DLPReidentifyText.Builder newBuilder() {\n+    return new AutoValue_DLPReidentifyText.Builder();\n+  }\n+\n+  @Override\n+  public PCollection<KV<String, ReidentifyContentResponse>> expand(\n+      PCollection<KV<String, String>> input) {\n+    return input\n+        .apply(ParDo.of(new MapStringToDlpRow(csvDelimiter())))\n+        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(batchSize())))\n+        .apply(\n+            \"DLPDeidentify\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTIxMzIx", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-414921321", "createdAt": "2020-05-20T00:53:27Z", "commit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo1MzoyN1rOGX3n8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo1MzoyN1rOGX3n8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4MTc3OA==", "bodyText": "for re-id inspect template can be optional. only re-id template is required. we should just check if inspect template passed or not. if not take it as valid request.", "url": "https://github.com/apache/beam/pull/11566#discussion_r427681778", "createdAt": "2020-05-20T00:53:27Z", "author": {"login": "santhh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPReidentifyText.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.ReidentifyContentRequest;\n+import com.google.privacy.dlp.v2.ReidentifyContentResponse;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and inspecting text for identifying data according\n+ * to provided settings.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set, the\n+ * same goes for reidentifyTemplateName or reidentifyConfig.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPReidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, ReidentifyContentResponse>>> {\n+\n+  public static final Logger LOG = LoggerFactory.getLogger(DLPInspectText.class);\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT = 52400;\n+\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  @Nullable\n+  public abstract String reidentifyTemplateName();\n+\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  @Nullable\n+  public abstract DeidentifyConfig reidentifyConfig();\n+\n+  @Nullable\n+  public abstract String csvDelimiter();\n+\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeaders();\n+\n+  public abstract Integer batchSize();\n+\n+  public abstract String projectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    public abstract Builder setInspectConfig(InspectConfig inspectConfig);\n+\n+    public abstract Builder setReidentifyConfig(DeidentifyConfig deidentifyConfig);\n+\n+    public abstract Builder setReidentifyTemplateName(String deidentifyTemplateName);\n+\n+    public abstract Builder setBatchSize(Integer batchSize);\n+\n+    public abstract Builder setCsvHeaders(PCollectionView<List<String>> csvHeaders);\n+\n+    public abstract Builder setCsvDelimiter(String delimiter);\n+\n+    public abstract Builder setProjectId(String projectId);\n+\n+    public abstract DLPReidentifyText build();\n+  }\n+\n+  public static DLPReidentifyText.Builder newBuilder() {\n+    return new AutoValue_DLPReidentifyText.Builder();\n+  }\n+\n+  @Override\n+  public PCollection<KV<String, ReidentifyContentResponse>> expand(\n+      PCollection<KV<String, String>> input) {\n+    return input\n+        .apply(ParDo.of(new MapStringToDlpRow(csvDelimiter())))\n+        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(batchSize())))\n+        .apply(\n+            \"DLPDeidentify\",\n+            ParDo.of(\n+                new ReidentifyText(\n+                    projectId(),\n+                    inspectTemplateName(),\n+                    reidentifyTemplateName(),\n+                    inspectConfig(),\n+                    reidentifyConfig(),\n+                    csvHeaders())));\n+  }\n+\n+  public static class ReidentifyText\n+      extends DoFn<KV<String, Iterable<Table.Row>>, KV<String, ReidentifyContentResponse>> {\n+    private final String projectId;\n+    private final String inspectTemplateName;\n+    private final String reidentifyTemplateName;\n+    private final InspectConfig inspectConfig;\n+    private final DeidentifyConfig reidentifyConfig;\n+    private transient ReidentifyContentRequest.Builder requestBuilder;\n+    private final PCollectionView<List<String>> csvHeader;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+      requestBuilder =\n+          ReidentifyContentRequest.newBuilder().setParent(ProjectName.of(projectId).toString());\n+      if (inspectTemplateName != null) {\n+        requestBuilder.setInspectTemplateName(inspectTemplateName);\n+      }\n+      if (inspectConfig != null) {\n+        requestBuilder.setInspectConfig(inspectConfig);\n+      }\n+      if (inspectConfig == null && inspectTemplateName == null) {\n+        throw new IllegalArgumentException(\n+            \"Either inspectConfig or inspectTemplateName need to be set!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTIzNzQ1", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-414923745", "createdAt": "2020-05-20T01:01:24Z", "commit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTowMToyNFrOGX3wBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTowMToyNFrOGX3wBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Mzg0Ng==", "bodyText": "For de-id - it's also same as re-id. de-id template in required but inspect is optional.", "url": "https://github.com/apache/beam/pull/11566#discussion_r427683846", "createdAt": "2020-05-20T01:01:24Z", "author": {"login": "santhh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP and deidentifying text according to provided\n+ * settings. The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set, csvDelimiter also should be, else the results will be\n+ * incorrect. If csvHeader is not set, input is assumed to be unstructured.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set. The\n+ * situation is the same with deidentifyTemplateName and deidentifyConfig ({@link DeidentifyConfig}.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();\n+\n+  @Nullable\n+  public abstract String csvDelimiter();\n+\n+  public abstract Integer batchSize();\n+\n+  public abstract String projectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    public abstract Builder setCsvHeader(PCollectionView<List<String>> csvHeader);\n+\n+    public abstract Builder setCsvDelimiter(String delimiter);\n+\n+    public abstract Builder setBatchSize(Integer batchSize);\n+\n+    public abstract Builder setProjectId(String projectId);\n+\n+    public abstract Builder setDeidentifyTemplateName(String deidentifyTemplateName);\n+\n+    public abstract Builder setInspectConfig(InspectConfig inspectConfig);\n+\n+    public abstract Builder setDeidentifyConfig(DeidentifyConfig deidentifyConfig);\n+\n+    public abstract DLPDeidentifyText build();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2d93374e17dc3441a761880fb7283fe32f940c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/7e2d93374e17dc3441a761880fb7283fe32f940c", "committedDate": "2020-05-25T08:32:16Z", "message": "[BEAM-9723] Add DLP integration transforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b87bff6153345f7f0561c2dd09fbccda13c4277", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/3b87bff6153345f7f0561c2dd09fbccda13c4277", "committedDate": "2020-05-25T08:32:16Z", "message": "Separate logger for the batching DoFn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44bb857d662ff6dcf80d4dfdf305ed40a510008", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d44bb857d662ff6dcf80d4dfdf305ed40a510008", "committedDate": "2020-05-25T08:32:17Z", "message": "Modify the batching algorithm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45cd3f599aed360d780889ec0e50a07a9ac68c7a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/45cd3f599aed360d780889ec0e50a07a9ac68c7a", "committedDate": "2020-05-25T08:32:17Z", "message": "Rework DLP transforms into more usable forms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "926a47c69234a421c601feb9aa1c2bc7a43a1962", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/926a47c69234a421c601feb9aa1c2bc7a43a1962", "committedDate": "2020-05-25T08:32:17Z", "message": "Add default GCP project for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8847d275759ee3677a87577a36e434afcef07bf9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/8847d275759ee3677a87577a36e434afcef07bf9", "committedDate": "2020-05-25T08:32:18Z", "message": "First batch of fixes after code review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2a6d4dd7122f08cb913c5cb26d2106310e9110a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c2a6d4dd7122f08cb913c5cb26d2106310e9110a", "committedDate": "2020-05-22T12:18:53Z", "message": "Add javadocs to DLP transforms. Add more tests"}, "afterCommit": {"oid": "00add365d3d8168a6dbdad4d63b76892a3609399", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/00add365d3d8168a6dbdad4d63b76892a3609399", "committedDate": "2020-05-25T08:32:18Z", "message": "Add javadocs to DLP transforms. Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/7b2c379d38d4c0cc97f8e89f8399406d0fe3534d", "committedDate": "2020-05-25T10:07:30Z", "message": "Add javadocs to DLP transforms. Add more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00add365d3d8168a6dbdad4d63b76892a3609399", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/00add365d3d8168a6dbdad4d63b76892a3609399", "committedDate": "2020-05-25T08:32:18Z", "message": "Add javadocs to DLP transforms. Add more tests"}, "afterCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/7b2c379d38d4c0cc97f8e89f8399406d0fe3534d", "committedDate": "2020-05-25T10:07:30Z", "message": "Add javadocs to DLP transforms. Add more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MzAyNDQ2", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-419302446", "createdAt": "2020-05-27T14:52:26Z", "commit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo1MjoyNlrOGbOS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozMDo1NFrOGbfbIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5ODkzNg==", "bodyText": "I think we previously agreed that the term 'csv' here is misleading since it could be any delimiter not just a comma. Perhaps the right name for this is getHeaderColumns()? That would match nicely with getColumnDelimiter, setColumnDelimiter, and setHeaderColumns().\nThat would follow the style guide from here more closely, though it would require updating other getters to match but the setters in the builder already conform.", "url": "https://github.com/apache/beam/pull/11566#discussion_r431198936", "createdAt": "2020-05-27T14:52:26Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted\n+ * input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Either deidentifyTemplateName (String) or deidentifyConfig {@link DeidentifyConfig} need to be\n+ * set. inspectTemplateName and inspectConfig ({@link InspectConfig} are optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  /** @return Template name for data deidentification. */\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  /** @return Configuration object for deidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  /** @return List of column names if the input KV value is a CSV formatted row. */\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwMTI4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * deidentifying text according to provided settings. The transform supports both CSV formatted\n          \n          \n            \n             * deidentifying text according to provided settings. The transform supports both delimited", "url": "https://github.com/apache/beam/pull/11566#discussion_r431201285", "createdAt": "2020-05-27T14:54:58Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MzUwOQ==", "bodyText": "Since the builder has setter methods prefixed with set having parity with getters prefixed with get would be nice. Also dropping the csv makes sense.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public abstract String csvColumnDelimiter();\n          \n          \n            \n              public abstract String getColumnDelimiter();", "url": "https://github.com/apache/beam/pull/11566#discussion_r431463509", "createdAt": "2020-05-27T21:51:18Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted\n+ * input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Either deidentifyTemplateName (String) or deidentifyConfig {@link DeidentifyConfig} need to be\n+ * set. inspectTemplateName and inspectConfig ({@link InspectConfig} are optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  /** @return Template name for data deidentification. */\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  /** @return Configuration object for deidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  /** @return List of column names if the input KV value is a CSV formatted row. */\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();\n+\n+  /** @return Delimiter to be used when splitting values from input strings into columns. */\n+  @Nullable\n+  public abstract String csvColumnDelimiter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTUyMA==", "bodyText": "Since this is just a collection of column names for the header, I don't think the prefix csv is relevant here. Below is my suggestion that drops the csv, adds the word 'column', and adds a comment that describes the relationship between this method and the setColumnDelimiter.\nNote: I talk about the default header \"value\" here. It would make sense to mention this in getHeaderColumns() if my assumption is correct.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** @param csvHeader List of column names if the input KV value is a CSV formatted row. */\n          \n          \n            \n                public abstract Builder setCsvHeader(PCollectionView<List<String>> csvHeader);\n          \n          \n            \n                /** \n          \n          \n            \n                *  Sets the header column names corresponding to the delimited values of the input KV. If no header is set, \n          \n          \n            \n                *  a single column name \"value\" will be used for the header. If specified, requires that a delimiter is \n          \n          \n            \n                *  set using setColumnDelimiter.\n          \n          \n            \n                */\n          \n          \n            \n                public abstract Builder setHeaderColumns(PCollectionView<List<String>> header);", "url": "https://github.com/apache/beam/pull/11566#discussion_r431469520", "createdAt": "2020-05-27T22:05:15Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted\n+ * input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Either deidentifyTemplateName (String) or deidentifyConfig {@link DeidentifyConfig} need to be\n+ * set. inspectTemplateName and inspectConfig ({@link InspectConfig} are optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  /** @return Template name for data deidentification. */\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  /** @return Configuration object for deidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  /** @return List of column names if the input KV value is a CSV formatted row. */\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();\n+\n+  /** @return Delimiter to be used when splitting values from input strings into columns. */\n+  @Nullable\n+  public abstract String csvColumnDelimiter();\n+\n+  /** @return Size of input elements batch to be sent to Cloud DLP service in one request. */\n+  public abstract Integer batchSizeBytes();\n+\n+  /** @return ID of Google Cloud project to be used when deidentifying data. */\n+  public abstract String projectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    /** @param inspectTemplateName Template name for data inspection. */\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    /** @param csvHeader List of column names if the input KV value is a CSV formatted row. */\n+    public abstract Builder setCsvHeader(PCollectionView<List<String>> csvHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MDA2Mw==", "bodyText": "Similarly here, no need to say csv in the method name or comments since it may be any delimiter. Also mention how this method relates to the setHeader method above.", "url": "https://github.com/apache/beam/pull/11566#discussion_r431470063", "createdAt": "2020-05-27T22:06:43Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted\n+ * input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Either deidentifyTemplateName (String) or deidentifyConfig {@link DeidentifyConfig} need to be\n+ * set. inspectTemplateName and inspectConfig ({@link InspectConfig} are optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  /** @return Template name for data deidentification. */\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  /** @return Configuration object for deidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  /** @return List of column names if the input KV value is a CSV formatted row. */\n+  @Nullable\n+  public abstract PCollectionView<List<String>> csvHeader();\n+\n+  /** @return Delimiter to be used when splitting values from input strings into columns. */\n+  @Nullable\n+  public abstract String csvColumnDelimiter();\n+\n+  /** @return Size of input elements batch to be sent to Cloud DLP service in one request. */\n+  public abstract Integer batchSizeBytes();\n+\n+  /** @return ID of Google Cloud project to be used when deidentifying data. */\n+  public abstract String projectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    /** @param inspectTemplateName Template name for data inspection. */\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    /** @param csvHeader List of column names if the input KV value is a CSV formatted row. */\n+    public abstract Builder setCsvHeader(PCollectionView<List<String>> csvHeader);\n+\n+    /**\n+     * @param delimiter Delimiter to be used when splitting values from input strings into columns.\n+     */\n+    public abstract Builder setCsvColumnDelimiter(String delimiter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MTcyOA==", "bodyText": "This condition is not checked in the build() method. Can it be?", "url": "https://github.com/apache/beam/pull/11566#discussion_r431471728", "createdAt": "2020-05-27T22:10:49Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted\n+ * input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NTcxNQ==", "bodyText": "It seems like the formatting is strange in this class. There aren't empty newlines between methods, did it pass the spotless check?\nAlso can you apply the comments from previous transforms to this class? For example, dropping the csv, naming getters with a prefix get, ensuring that all preconditions are validated in the build() method.", "url": "https://github.com/apache/beam/pull/11566#discussion_r431475715", "createdAt": "2020-05-27T22:20:52Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPInspectText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * inspecting text for identifying data according to provided settings. The transform supports both\n+ * CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * InspectContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPInspectText", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3Nzg3MA==", "bodyText": "Similarly with this class, please apply comments from previous transforms here. For example, dropping the csv, naming getters with a prefix get, ensuring that all preconditions are validated in the build() method.", "url": "https://github.com/apache/beam/pull/11566#discussion_r431477870", "createdAt": "2020-05-27T22:26:26Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPReidentifyText.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.ReidentifyContentRequest;\n+import com.google.privacy.dlp.v2.ReidentifyContentResponse;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * inspecting text for identifying data according to provided settings.\n+ *\n+ * <p>The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * ReidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>Either reidentifyTemplateName {@link String} or reidentifyConfig {@link DeidentifyConfig} need\n+ * to be set. inspectConfig {@link InspectConfig} and inspectTemplateName {@link String} are\n+ * optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPReidentifyText", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3OTU4Ng==", "bodyText": "I'm getting a bit confused at when a header is present and when one isn't now. When building the table for the request to the cloud API, if no header is present, we set one to \"value\" by default. If that column header ends up in the response, should this method also return \"value\" when set to null?\nIf that is the case, this needs to be clear in the comments somewhere.", "url": "https://github.com/apache/beam/pull/11566#discussion_r431479586", "createdAt": "2020-05-27T22:30:54Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted\n+ * input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Either deidentifyTemplateName (String) or deidentifyConfig {@link DeidentifyConfig} need to be\n+ * set. inspectTemplateName and inspectConfig ({@link InspectConfig} are optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  /** @return Template name for data deidentification. */\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  /** @return Configuration object for deidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  /** @return List of column names if the input KV value is a CSV formatted row. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "987be4871c02e186903e8e5f452106accf7e9a0d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/987be4871c02e186903e8e5f452106accf7e9a0d", "committedDate": "2020-05-28T07:13:53Z", "message": "Get rid of CSV mentions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2327f6f0162bb4760bd82173f3575f0fc228ce7a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2327f6f0162bb4760bd82173f3575f0fc228ce7a", "committedDate": "2020-05-28T07:18:03Z", "message": "Rename getters to get*"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff69b1de58056c79302223388a3e283da7363d1f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ff69b1de58056c79302223388a3e283da7363d1f", "committedDate": "2020-05-28T07:40:25Z", "message": "Add delimiter requirement check to builders. Formatting in DLPInspectText"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c787b2a77b856cf23d4ac8aab082b5e542be7e23", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c787b2a77b856cf23d4ac8aab082b5e542be7e23", "committedDate": "2020-05-28T08:39:44Z", "message": "Add test of mapping delimited rows, verify table headers in deidentification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "423cd4d22e057e6018000afc793723f3ed1ba072", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/423cd4d22e057e6018000afc793723f3ed1ba072", "committedDate": "2020-05-28T09:41:51Z", "message": "Add tests for preconditions in DLP transforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a37f33b8d20f423e7e3384b8f992713e6a88325", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6a37f33b8d20f423e7e3384b8f992713e6a88325", "committedDate": "2020-05-28T10:59:04Z", "message": "Add more preconditions with tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80764a8fe303fbaf68d3c976ea952a06757b2222", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/80764a8fe303fbaf68d3c976ea952a06757b2222", "committedDate": "2020-05-28T11:49:51Z", "message": "Change default GCP project name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4411f1d594d519eecff944869964758663729b9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a4411f1d594d519eecff944869964758663729b9", "committedDate": "2020-05-28T11:59:25Z", "message": "Add info to CHANGES.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f0e1bab149e4f28869f87c9a38cf5da7cf9e49a", "author": {"user": {"login": "mwalenia", "name": "Michal Walenia"}}, "url": "https://github.com/apache/beam/commit/1f0e1bab149e4f28869f87c9a38cf5da7cf9e49a", "committedDate": "2020-05-28T12:45:35Z", "message": "Merge branch 'master' into BEAM-9723-java-dlp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzE2NDY2", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-421316466", "createdAt": "2020-05-29T21:51:18Z", "commit": {"oid": "1f0e1bab149e4f28869f87c9a38cf5da7cf9e49a"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMTo1MToxOFrOGctTaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMTo1NjowMlrOGctZQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1NTU2MA==", "bodyText": "Thank you.", "url": "https://github.com/apache/beam/pull/11566#discussion_r432755560", "createdAt": "2020-05-29T21:51:18Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPInspectText.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * inspecting text for identifying data according to provided settings. The transform supports both\n+ * CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * InspectContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ *\n+ * <p>Either inspectTemplateName (String) or inspectConfig {@link InspectConfig} need to be set.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPInspectText", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NTcxNQ=="}, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1NjEwMg==", "bodyText": "Thank you.", "url": "https://github.com/apache/beam/pull/11566#discussion_r432756102", "createdAt": "2020-05-29T21:53:04Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPReidentifyText.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.ReidentifyContentRequest;\n+import com.google.privacy.dlp.v2.ReidentifyContentResponse;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * inspecting text for identifying data according to provided settings.\n+ *\n+ * <p>The transform supports both CSV formatted input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * ReidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>Either reidentifyTemplateName {@link String} or reidentifyConfig {@link DeidentifyConfig} need\n+ * to be set. inspectConfig {@link InspectConfig} and inspectTemplateName {@link String} are\n+ * optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPReidentifyText", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3Nzg3MA=="}, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1NjE1Mg==", "bodyText": "Thank you.", "url": "https://github.com/apache/beam/pull/11566#discussion_r432756152", "createdAt": "2020-05-29T21:53:13Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/MapStringToDlpRow.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.privacy.dlp.v2.Table;\n+import com.google.privacy.dlp.v2.Value;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.values.KV;\n+\n+class MapStringToDlpRow extends DoFn<KV<String, String>, KV<String, Table.Row>> {\n+  private final String delimiter;\n+\n+  public MapStringToDlpRow(String delimiter) {\n+    this.delimiter = delimiter;\n+  }\n+\n+  @ProcessElement\n+  public void processElement(ProcessContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTc2NQ=="}, "originalCommit": {"oid": "e4984b7c3112e18a15b5cee76af7ae9398f76fa8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1NzA1OA==", "bodyText": "OK, sounds good.", "url": "https://github.com/apache/beam/pull/11566#discussion_r432757058", "createdAt": "2020-05-29T21:56:02Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both CSV formatted\n+ * input data and unstructured input.\n+ *\n+ * <p>If the csvHeader property is set and a sideinput with CSV headers is added to the PTransform,\n+ * csvDelimiter also should be set, else the results will be incorrect. If csvHeader is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Either deidentifyTemplateName (String) or deidentifyConfig {@link DeidentifyConfig} need to be\n+ * set. inspectTemplateName and inspectConfig ({@link InspectConfig} are optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String inspectTemplateName();\n+\n+  /** @return Template name for data deidentification. */\n+  @Nullable\n+  public abstract String deidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig inspectConfig();\n+\n+  /** @return Configuration object for deidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig deidentifyConfig();\n+\n+  /** @return List of column names if the input KV value is a CSV formatted row. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3OTU4Ng=="}, "originalCommit": {"oid": "7b2c379d38d4c0cc97f8e89f8399406d0fe3534d"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDM0NDYx", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-421434461", "createdAt": "2020-05-30T18:39:21Z", "commit": {"oid": "1f0e1bab149e4f28869f87c9a38cf5da7cf9e49a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODozOToyMVrOGc0vSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODozOToyMVrOGc0vSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NzM4NQ==", "bodyText": "Does it make sense to move the creation of client in startBundle? Just commenting for overall all three use cases.", "url": "https://github.com/apache/beam/pull/11566#discussion_r432877385", "createdAt": "2020-05-30T18:39:21Z", "author": {"login": "santhh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPReidentifyText.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.ReidentifyContentRequest;\n+import com.google.privacy.dlp.v2.ReidentifyContentResponse;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * inspecting text for identifying data according to provided settings.\n+ *\n+ * <p>The transform supports both delimited columnar input data and unstructured input.\n+ *\n+ * <p>If the headerColumns property is set and a sideinput with headers is added to the PTransform,\n+ * delimiter also should be set, else the results will be incorrect. If headerColumns is neither set\n+ * nor passed as sideinput, input is assumed to be unstructured.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * ReidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>Either reidentifyTemplateName {@link String} or reidentifyConfig {@link DeidentifyConfig} need\n+ * to be set. inspectConfig {@link InspectConfig} and inspectTemplateName {@link String} are\n+ * optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPReidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, ReidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String getInspectTemplateName();\n+\n+  /** @return Template name for data reidentification. */\n+  @Nullable\n+  public abstract String getReidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig getInspectConfig();\n+\n+  /** @return Configuration object for reidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig getReidentifyConfig();\n+\n+  /** @return Delimiter to be used when splitting values from input strings into columns. */\n+  @Nullable\n+  public abstract String getColumnDelimiter();\n+\n+  /** @return List of column names if the input KV value is a delimited row. */\n+  @Nullable\n+  public abstract PCollectionView<List<String>> getHeaderColumns();\n+\n+  /** @return Size of input elements batch to be sent to Cloud DLP service in one request. */\n+  public abstract Integer getBatchSizeBytes();\n+\n+  /** @return ID of Google Cloud project to be used when deidentifying data. */\n+  public abstract String getProjectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    /** @param inspectTemplateName Template name for data inspection. */\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    /**\n+     * @param inspectConfig Configuration object for data inspection. If present, supersedes the\n+     *     template settings.\n+     */\n+    public abstract Builder setInspectConfig(InspectConfig inspectConfig);\n+\n+    /**\n+     * @param reidentifyConfig Configuration object for data deidentification. If present,\n+     *     supersedes the template settings.\n+     */\n+    public abstract Builder setReidentifyConfig(DeidentifyConfig reidentifyConfig);\n+\n+    /** @param reidentifyTemplateName Template name for data deidentification. */\n+    public abstract Builder setReidentifyTemplateName(String reidentifyTemplateName);\n+\n+    /**\n+     * @param batchSize Size of input elements batch to be sent to Cloud DLP service in one request.\n+     */\n+    public abstract Builder setBatchSizeBytes(Integer batchSize);\n+    /** @param headerColumns List of column names if the input KV value is a delimited row. */\n+    public abstract Builder setHeaderColumns(PCollectionView<List<String>> headerColumns);\n+\n+    /**\n+     * @param delimiter Delimiter to be used when splitting values from input strings into columns.\n+     */\n+    public abstract Builder setColumnDelimiter(String delimiter);\n+\n+    /** @param projectId ID of Google Cloud project to be used when deidentifying data. */\n+    public abstract Builder setProjectId(String projectId);\n+\n+    abstract DLPReidentifyText autoBuild();\n+\n+    public DLPReidentifyText build() {\n+      DLPReidentifyText dlpReidentifyText = autoBuild();\n+      if (dlpReidentifyText.getReidentifyConfig() == null\n+          && dlpReidentifyText.getReidentifyTemplateName() == null) {\n+        throw new IllegalArgumentException(\n+            \"Either reidentifyConfig or reidentifyTemplateName need to be set!\");\n+      }\n+      if (dlpReidentifyText.getBatchSizeBytes() > DLP_PAYLOAD_LIMIT_BYTES) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Batch size is too large! It should be smaller or equal than %d.\",\n+                DLP_PAYLOAD_LIMIT_BYTES));\n+      }\n+      if (dlpReidentifyText.getColumnDelimiter() == null\n+          && dlpReidentifyText.getHeaderColumns() != null) {\n+        throw new IllegalArgumentException(\n+            \"Column delimiter should be set if headers are present.\");\n+      }\n+      if (dlpReidentifyText.getHeaderColumns() == null\n+          && dlpReidentifyText.getColumnDelimiter() != null) {\n+        throw new IllegalArgumentException(\n+            \"Column headers should be supplied when delimiter is present.\");\n+      }\n+      return dlpReidentifyText;\n+    }\n+  }\n+\n+  public static DLPReidentifyText.Builder newBuilder() {\n+    return new AutoValue_DLPReidentifyText.Builder();\n+  }\n+\n+  /**\n+   * The transform converts the contents of input PCollection into {@link Table.Row}s and then calls\n+   * Cloud DLP service to perform the reidentification according to provided settings.\n+   *\n+   * @param input input PCollection\n+   * @return PCollection after transformations\n+   */\n+  @Override\n+  public PCollection<KV<String, ReidentifyContentResponse>> expand(\n+      PCollection<KV<String, String>> input) {\n+    return input\n+        .apply(ParDo.of(new MapStringToDlpRow(getColumnDelimiter())))\n+        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(getBatchSizeBytes())))\n+        .apply(\n+            \"DLPReidentify\",\n+            ParDo.of(\n+                new ReidentifyText(\n+                    getProjectId(),\n+                    getInspectTemplateName(),\n+                    getReidentifyTemplateName(),\n+                    getInspectConfig(),\n+                    getReidentifyConfig(),\n+                    getHeaderColumns())));\n+  }\n+\n+  /** Performs the calls to Cloud DLP service on GCP. */\n+  static class ReidentifyText\n+      extends DoFn<KV<String, Iterable<Table.Row>>, KV<String, ReidentifyContentResponse>> {\n+    private final String projectId;\n+    private final String inspectTemplateName;\n+    private final String reidentifyTemplateName;\n+    private final InspectConfig inspectConfig;\n+    private final DeidentifyConfig reidentifyConfig;\n+    private transient ReidentifyContentRequest.Builder requestBuilder;\n+    private final PCollectionView<List<String>> headerColumns;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+      requestBuilder =\n+          ReidentifyContentRequest.newBuilder().setParent(ProjectName.of(projectId).toString());\n+      if (inspectTemplateName != null) {\n+        requestBuilder.setInspectTemplateName(inspectTemplateName);\n+      }\n+      if (inspectConfig != null) {\n+        requestBuilder.setInspectConfig(inspectConfig);\n+      }\n+      if (reidentifyConfig != null) {\n+        requestBuilder.setReidentifyConfig(reidentifyConfig);\n+      }\n+      if (reidentifyTemplateName != null) {\n+        requestBuilder.setReidentifyTemplateName(reidentifyTemplateName);\n+      }\n+    }\n+\n+    /**\n+     * @param projectId ID of GCP project that should be used for deidentification.\n+     * @param inspectTemplateName Template name for inspection. Optional.\n+     * @param reidentifyTemplateName Template name for reidentification. Either this or\n+     *     reidentifyConfig is required.\n+     * @param inspectConfig Configuration object for inspection. Optional.\n+     * @param reidentifyConfig Reidentification config containing data transformations. Either this\n+     *     or reidentifyTemplateName is required.\n+     * @param headerColumns Header row of the table if applicable.\n+     */\n+    public ReidentifyText(\n+        String projectId,\n+        String inspectTemplateName,\n+        String reidentifyTemplateName,\n+        InspectConfig inspectConfig,\n+        DeidentifyConfig reidentifyConfig,\n+        PCollectionView<List<String>> headerColumns) {\n+      this.projectId = projectId;\n+      this.inspectTemplateName = inspectTemplateName;\n+      this.reidentifyTemplateName = reidentifyTemplateName;\n+      this.inspectConfig = inspectConfig;\n+      this.reidentifyConfig = reidentifyConfig;\n+      this.headerColumns = headerColumns;\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext context) throws IOException {\n+      try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0e1bab149e4f28869f87c9a38cf5da7cf9e49a"}, "originalPosition": 256}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDM0Njc0", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-421434674", "createdAt": "2020-05-30T18:42:42Z", "commit": {"oid": "1f0e1bab149e4f28869f87c9a38cf5da7cf9e49a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c18ed1e8e197e88469a00db73b8f8f3b8a65f85", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5c18ed1e8e197e88469a00db73b8f8f3b8a65f85", "committedDate": "2020-06-01T08:48:11Z", "message": "Move initialization of dlpServiceClient to setup/teardown methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4345b72f47ebe21a28b6885d67f24a53f3695be0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/4345b72f47ebe21a28b6885d67f24a53f3695be0", "committedDate": "2020-06-01T08:50:02Z", "message": "Merge branch 'BEAM-9723-java-dlp' of github.com:apache/beam into BEAM-9723-java-dlp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTcwNTQz", "url": "https://github.com/apache/beam/pull/11566#pullrequestreview-447570543", "createdAt": "2020-07-13T20:18:48Z", "commit": {"oid": "4345b72f47ebe21a28b6885d67f24a53f3695be0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoxODo0OFrOGw4TWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoxODo0OFrOGw4TWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwNzI5MQ==", "bodyText": "@mwalenia Hi Michal- I have tried with 2.23 snapshot yesterday. Do you think it was missed to pass on the side input in this step? like .withSideInputs(headerColumns)", "url": "https://github.com/apache/beam/pull/11566#discussion_r453907291", "createdAt": "2020-07-13T20:18:48Z", "author": {"login": "santhh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/DLPDeidentifyText.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.Table;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * A {@link PTransform} connecting to Cloud DLP (https://cloud.google.com/dlp/docs/libraries) and\n+ * deidentifying text according to provided settings. The transform supports both columnar delimited\n+ * input data (eg. CSV) and unstructured input.\n+ *\n+ * <p>If the headerColumns property is set and a sideinput with table headers is added to the\n+ * PTransform, delimiter also should be set, else the results will be incorrect. If headerColumns is\n+ * neither set nor passed as side input, input is assumed to be unstructured.\n+ *\n+ * <p>Either deidentifyTemplateName (String) or deidentifyConfig {@link DeidentifyConfig} need to be\n+ * set. inspectTemplateName and inspectConfig ({@link InspectConfig} are optional.\n+ *\n+ * <p>Batch size defines how big are batches sent to DLP at once in bytes.\n+ *\n+ * <p>The transform consumes {@link KV} of {@link String}s (assumed to be filename as key and\n+ * contents as value) and outputs {@link KV} of {@link String} (eg. filename) and {@link\n+ * DeidentifyContentResponse}, which will contain {@link Table} of results for the user to consume.\n+ */\n+@Experimental\n+@AutoValue\n+public abstract class DLPDeidentifyText\n+    extends PTransform<\n+        PCollection<KV<String, String>>, PCollection<KV<String, DeidentifyContentResponse>>> {\n+\n+  public static final Integer DLP_PAYLOAD_LIMIT_BYTES = 524000;\n+\n+  /** @return Template name for data inspection. */\n+  @Nullable\n+  public abstract String getInspectTemplateName();\n+\n+  /** @return Template name for data deidentification. */\n+  @Nullable\n+  public abstract String getDeidentifyTemplateName();\n+\n+  /**\n+   * @return Configuration object for data inspection. If present, supersedes the template settings.\n+   */\n+  @Nullable\n+  public abstract InspectConfig getInspectConfig();\n+\n+  /** @return Configuration object for deidentification. If present, supersedes the template. */\n+  @Nullable\n+  public abstract DeidentifyConfig getDeidentifyConfig();\n+\n+  /** @return List of column names if the input KV value is a delimited row. */\n+  @Nullable\n+  public abstract PCollectionView<List<String>> getHeaderColumns();\n+\n+  /** @return Delimiter to be used when splitting values from input strings into columns. */\n+  @Nullable\n+  public abstract String getColumnDelimiter();\n+\n+  /** @return Size of input elements batch to be sent to Cloud DLP service in one request. */\n+  public abstract Integer getBatchSizeBytes();\n+\n+  /** @return ID of Google Cloud project to be used when deidentifying data. */\n+  public abstract String getProjectId();\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    /** @param inspectTemplateName Template name for data inspection. */\n+    public abstract Builder setInspectTemplateName(String inspectTemplateName);\n+\n+    /** @param headerColumns List of column names if the input KV value is a delimited row. */\n+    public abstract Builder setHeaderColumns(PCollectionView<List<String>> headerColumns);\n+\n+    /**\n+     * @param delimiter Delimiter to be used when splitting values from input strings into columns.\n+     */\n+    public abstract Builder setColumnDelimiter(String delimiter);\n+\n+    /**\n+     * @param batchSize Size of input elements batch to be sent to Cloud DLP service in one request.\n+     */\n+    public abstract Builder setBatchSizeBytes(Integer batchSize);\n+\n+    /** @param projectId ID of Google Cloud project to be used when deidentifying data. */\n+    public abstract Builder setProjectId(String projectId);\n+\n+    /** @param deidentifyTemplateName Template name for data deidentification. */\n+    public abstract Builder setDeidentifyTemplateName(String deidentifyTemplateName);\n+\n+    /**\n+     * @param inspectConfig Configuration object for data inspection. If present, supersedes the\n+     *     template settings.\n+     */\n+    public abstract Builder setInspectConfig(InspectConfig inspectConfig);\n+\n+    /**\n+     * @param deidentifyConfig Configuration object for data deidentification. If present,\n+     *     supersedes the template settings.\n+     */\n+    public abstract Builder setDeidentifyConfig(DeidentifyConfig deidentifyConfig);\n+\n+    abstract DLPDeidentifyText autoBuild();\n+\n+    public DLPDeidentifyText build() {\n+      DLPDeidentifyText dlpDeidentifyText = autoBuild();\n+      if (dlpDeidentifyText.getDeidentifyConfig() == null\n+          && dlpDeidentifyText.getDeidentifyTemplateName() == null) {\n+        throw new IllegalArgumentException(\n+            \"Either deidentifyConfig or deidentifyTemplateName need to be set!\");\n+      }\n+      if (dlpDeidentifyText.getBatchSizeBytes() > DLP_PAYLOAD_LIMIT_BYTES) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Batch size is too large! It should be smaller or equal than %d.\",\n+                DLP_PAYLOAD_LIMIT_BYTES));\n+      }\n+      if (dlpDeidentifyText.getColumnDelimiter() == null\n+          && dlpDeidentifyText.getHeaderColumns() != null) {\n+        throw new IllegalArgumentException(\n+            \"Column delimiter should be set if headers are present.\");\n+      }\n+      if (dlpDeidentifyText.getHeaderColumns() == null\n+          && dlpDeidentifyText.getColumnDelimiter() != null) {\n+        throw new IllegalArgumentException(\n+            \"Column headers should be supplied when delimiter is present.\");\n+      }\n+      return dlpDeidentifyText;\n+    }\n+  }\n+\n+  public static DLPDeidentifyText.Builder newBuilder() {\n+    return new AutoValue_DLPDeidentifyText.Builder();\n+  }\n+\n+  /**\n+   * The transform converts the contents of input PCollection into {@link Table.Row}s and then calls\n+   * Cloud DLP service to perform the deidentification according to provided settings.\n+   *\n+   * @param input input PCollection\n+   * @return PCollection after transformations\n+   */\n+  @Override\n+  public PCollection<KV<String, DeidentifyContentResponse>> expand(\n+      PCollection<KV<String, String>> input) {\n+    return input\n+        .apply(ParDo.of(new MapStringToDlpRow(getColumnDelimiter())))\n+        .apply(\"Batch Contents\", ParDo.of(new BatchRequestForDLP(getBatchSizeBytes())))\n+        .apply(\n+            \"DLPDeidentify\",\n+            ParDo.of(\n+                new DeidentifyText(\n+                    getProjectId(),\n+                    getInspectTemplateName(),\n+                    getDeidentifyTemplateName(),\n+                    getInspectConfig(),\n+                    getDeidentifyConfig(),\n+                    getHeaderColumns())));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4345b72f47ebe21a28b6885d67f24a53f3695be0"}, "originalPosition": 194}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4088, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}