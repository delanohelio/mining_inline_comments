{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjg4NDMy", "number": 12093, "title": "[BEAM-10303] Add support for the non-window observing optimization to DoFn execution in portable Beam Java", "bodyText": "The idea for the optimization is that if we don't observe the window then we don't need to process each element in each individual window.\nWe could make this better by making it dynamically figured out instead of statically during initialization but this change brings us up to what is implemented in the non-portable Java runner libraries.\nThis covers all but the splittable DoFn processElements call since I wanted to limit the size of the change and that one will be more involved.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\n\n\n\n\nGo\n\n---\n\n---\n\n\n\nJava\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-25T22:28:10Z", "url": "https://github.com/apache/beam/pull/12093", "merged": true, "mergeCommit": {"oid": "1d189e54675ba5fc277fae1cfe77522cd22cf7f3"}, "closed": true, "closedAt": "2020-06-26T23:13:48Z", "author": {"login": "lukecwik"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcu2YAzAH2gAyNDQwMjg4NDMyOjllZGU0Y2E3ZjgyNjU5YmE0M2ZkMDE4YTQyYTQxNmIxYzQzZjNiNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvOvhZAFqTQzODY2NjM5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ede4ca7f82659ba43fd018a42a416b1c43f3b6d", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/9ede4ca7f82659ba43fd018a42a416b1c43f3b6d", "committedDate": "2020-06-25T22:27:42Z", "message": "[BEAM-10303] Add support for the non-window observing optimization to DoFn execution.\n\nThis covers all but the splittable DoFn processElements call since I wanted to limit the size of the change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39292acb90443e9e643b656380e7fd62ed7a3020", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/39292acb90443e9e643b656380e7fd62ed7a3020", "committedDate": "2020-06-25T23:11:35Z", "message": "fixup! Fix issues found during beamimport test_pr\n\n* Make sure that TimerFamilyParameter makes DoFns window observing\n* Handle the case where the split call isn't implemented and we get the default"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "255f19d537e08055cc60a3304cd26029e6dda96f", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/255f19d537e08055cc60a3304cd26029e6dda96f", "committedDate": "2020-06-25T23:08:16Z", "message": "fixup! Fix issues found during beamimport test_pr\n\n* Make sure that TimerFamilyParameter makes DoFns window observing\n* Handle the case where the split call isn't implemented and we get the default"}, "afterCommit": {"oid": "39292acb90443e9e643b656380e7fd62ed7a3020", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/39292acb90443e9e643b656380e7fd62ed7a3020", "committedDate": "2020-06-25T23:11:35Z", "message": "fixup! Fix issues found during beamimport test_pr\n\n* Make sure that TimerFamilyParameter makes DoFns window observing\n* Handle the case where the split call isn't implemented and we get the default"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjA2NTA1", "url": "https://github.com/apache/beam/pull/12093#pullrequestreview-438606505", "createdAt": "2020-06-26T21:29:23Z", "commit": {"oid": "39292acb90443e9e643b656380e7fd62ed7a3020"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyOToyM1rOGpvN3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyOToyM1rOGpvN3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxODM5OQ==", "bodyText": "I noticed currentWindow isn't set to null here, where it was before. Same with processElementForWindowObservingPairWithRestriction. Why is that?", "url": "https://github.com/apache/beam/pull/12093#discussion_r446418399", "createdAt": "2020-06-26T21:29:23Z", "author": {"login": "ibzib"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -637,6 +737,28 @@ private void processElementForParDo(WindowedValue<InputT> elem) {\n   }\n \n   private void processElementForPairWithRestriction(WindowedValue<InputT> elem) {\n+    currentElement = elem;\n+    try {\n+      currentRestriction = doFnInvoker.invokeGetInitialRestriction(processContext);\n+      outputTo(\n+          mainOutputConsumers,\n+          (WindowedValue)\n+              elem.withValue(\n+                  KV.of(\n+                      elem.getValue(),\n+                      KV.of(\n+                          currentRestriction,\n+                          doFnInvoker.invokeGetInitialWatermarkEstimatorState(processContext)))));\n+    } finally {\n+      currentElement = null;\n+      currentRestriction = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39292acb90443e9e643b656380e7fd62ed7a3020"}, "originalPosition": 378}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjY2Mzkz", "url": "https://github.com/apache/beam/pull/12093#pullrequestreview-438666393", "createdAt": "2020-06-27T02:51:05Z", "commit": {"oid": "39292acb90443e9e643b656380e7fd62ed7a3020"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1MTowNlrOGpyr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1MTowNlrOGpyr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NTI2MA==", "bodyText": "It seems like we should remove this duplicate part.", "url": "https://github.com/apache/beam/pull/12093#discussion_r446475260", "createdAt": "2020-06-27T02:51:06Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -488,60 +438,201 @@ public void accept(WindowedValue input) throws Exception {\n     this.doFnInvoker.invokeSetup();\n \n     this.startBundleArgumentProvider = new StartBundleArgumentProvider();\n+    // Register the appropriate handlers.\n+    switch (pTransform.getSpec().getUrn()) {\n+      case PTransformTranslation.PAR_DO_TRANSFORM_URN:\n+      case PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN:\n+        startFunctionRegistry.register(pTransformId, this::startBundle);\n+        break;\n+      case PTransformTranslation.SPLITTABLE_PAIR_WITH_RESTRICTION_URN:\n+        // startBundle should not be invoked\n+      case PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN:\n+        // startBundle should not be invoked\n+      default:\n+        // no-op\n+    }\n+\n+    String mainInput;\n+    try {\n+      mainInput = ParDoTranslation.getMainInputName(pTransform);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    final FnDataReceiver<WindowedValue> mainInputConsumer;\n+    switch (pTransform.getSpec().getUrn()) {\n+      case PTransformTranslation.PAR_DO_TRANSFORM_URN:\n+        if (doFnSignature.processElement().observesWindow() || !sideInputMapping.isEmpty()) {\n+          mainInputConsumer = this::processElementForWindowObservingParDo;\n+          this.processContext = new WindowObservingProcessBundleContext();\n+        } else {\n+          mainInputConsumer = this::processElementForParDo;\n+          this.processContext = new NonWindowObservingProcessBundleContext();\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_PAIR_WITH_RESTRICTION_URN:\n+        if (doFnSignature.getInitialRestriction().observesWindow()\n+            || (doFnSignature.getInitialWatermarkEstimatorState() != null\n+                && doFnSignature.getInitialWatermarkEstimatorState().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          mainInputConsumer = this::processElementForWindowObservingPairWithRestriction;\n+          this.processContext = new WindowObservingProcessBundleContext();\n+        } else {\n+          mainInputConsumer = this::processElementForPairWithRestriction;\n+          this.processContext = new NonWindowObservingProcessBundleContext();\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN:\n+        if ((doFnSignature.splitRestriction() != null\n+                && doFnSignature.splitRestriction().observesWindow())\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          mainInputConsumer = this::processElementForWindowObservingSplitRestriction;\n+          // OutputT == RestrictionT\n+          this.processContext =\n+              new WindowObservingProcessBundleContext() {\n+                @Override\n+                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n+                  double size =\n+                      doFnInvoker.invokeGetSize(\n+                          new DelegatingArgumentProvider<InputT, OutputT>(\n+                              this,\n+                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n+                                  + \"/GetSize\") {\n+                            @Override\n+                            public Object restriction() {\n+                              return output;\n+                            }\n+\n+                            @Override\n+                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n+                              return timestamp;\n+                            }\n+\n+                            @Override\n+                            public RestrictionTracker<?, ?> restrictionTracker() {\n+                              return doFnInvoker.invokeNewTracker(this);\n+                            }\n+                          });\n+\n+                  outputTo(\n+                      mainOutputConsumers,\n+                      (WindowedValue<OutputT>)\n+                          WindowedValue.of(\n+                              KV.of(\n+                                  KV.of(\n+                                      currentElement.getValue(),\n+                                      KV.of(output, currentWatermarkEstimatorState)),\n+                                  size),\n+                              timestamp,\n+                              currentWindow,\n+                              currentElement.getPane()));\n+                }\n+              };\n+        } else {\n+          mainInputConsumer = this::processElementForSplitRestriction;\n+          // OutputT == RestrictionT\n+          this.processContext =\n+              new NonWindowObservingProcessBundleContext() {\n+                @Override\n+                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n+                  double size =\n+                      doFnInvoker.invokeGetSize(\n+                          new DelegatingArgumentProvider<InputT, OutputT>(\n+                              this,\n+                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n+                                  + \"/GetSize\") {\n+                            @Override\n+                            public Object restriction() {\n+                              return output;\n+                            }\n+\n+                            @Override\n+                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n+                              return timestamp;\n+                            }\n+\n+                            @Override\n+                            public RestrictionTracker<?, ?> restrictionTracker() {\n+                              return doFnInvoker.invokeNewTracker(this);\n+                            }\n+                          });\n+\n+                  outputTo(\n+                      mainOutputConsumers,\n+                      (WindowedValue<OutputT>)\n+                          WindowedValue.of(\n+                              KV.of(\n+                                  KV.of(\n+                                      currentElement.getValue(),\n+                                      KV.of(output, currentWatermarkEstimatorState)),\n+                                  size),\n+                              timestamp,\n+                              currentElement.getWindows(),\n+                              currentElement.getPane()));\n+                }\n+              };\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN:\n+        if (doFnSignature.processElement().observesWindow()\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || (doFnSignature.newWatermarkEstimator() != null\n+                && doFnSignature.newWatermarkEstimator().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          mainInputConsumer =\n+              new SplittableFnDataReceiver() {\n+                @Override\n+                public void accept(WindowedValue input) throws Exception {\n+                  processElementForWindowObservingSizedElementAndRestriction(input);\n+                }\n+              };\n+          this.processContext = new WindowObservingProcessBundleContext();\n+        } else {\n+          mainInputConsumer =\n+              new SplittableFnDataReceiver() {\n+                @Override\n+                public void accept(WindowedValue input) throws Exception {\n+                  // TODO(BEAM-10303): Create a variant which is optimized to not observe the\n+                  // windows.\n+                  processElementForWindowObservingSizedElementAndRestriction(input);\n+                }\n+              };\n+          this.processContext = new WindowObservingProcessBundleContext();\n+        }\n+        break;\n+      default:\n+        throw new IllegalStateException(\"Unknown urn: \" + pTransform.getSpec().getUrn());\n+    }\n+    pCollectionConsumerRegistry.register(\n+        pTransform.getInputsOrThrow(mainInput), pTransformId, (FnDataReceiver) mainInputConsumer);\n+\n     switch (pTransform.getSpec().getUrn()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39292acb90443e9e643b656380e7fd62ed7a3020"}, "originalPosition": 274}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3145, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}