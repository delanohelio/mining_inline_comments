{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDMzMzMz", "number": 11754, "title": "[BEAM-10037] BeamSqlExample.java fails to build ", "bodyText": "R: @TheNeuralBit\nIn the BeamSqlExample.java class, the instructions state that to run the example, use:\n./gradlew :sdks:java:extensions:sql:runBasicExample.\nI tried this and the build failed due to java.lang.IllegalStateException: Unable to return a default Coder\nI fixed this by setting the Coder for both anon transforms.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-20T00:14:38Z", "url": "https://github.com/apache/beam/pull/11754", "merged": true, "mergeCommit": {"oid": "758d821ac64edebf24bc1bba1f7bfa34fd03a2da"}, "closed": true, "closedAt": "2020-05-20T22:01:16Z", "author": {"login": "omarismail94"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci9rbUgH2gAyNDIwNDMzMzMzOjc2YjhjMGEwMWI5ZjQ3NjMzMDAyYjcwZWY5NWI3MzljN2E2MTI1MmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjLtPSAFqTQxNTUxNDk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76b8c0a01b9f47633002b70ef95b739c7a61252d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/76b8c0a01b9f47633002b70ef95b739c7a61252d", "committedDate": "2020-05-20T00:11:09Z", "message": "[BEAM-10037] BeamSqlExample.java fails to build when running ./gradlew command"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTEyNzQw", "url": "https://github.com/apache/beam/pull/11754#pullrequestreview-414912740", "createdAt": "2020-05-20T00:26:10Z", "commit": {"oid": "76b8c0a01b9f47633002b70ef95b739c7a61252d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDoyNjoxMFrOGX3LLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDoyNjoyMVrOGX3LaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NDQxNQ==", "bodyText": "could you change this to withRowSchema(type)? It does the same thing, but it's less verbose", "url": "https://github.com/apache/beam/pull/11754#discussion_r427674415", "createdAt": "2020-05-20T00:26:10Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/example/BeamSqlExample.java", "diffHunk": "@@ -66,38 +68,47 @@ public static void main(String[] args) {\n         inputTable.apply(SqlTransform.query(\"select c1, c2, c3 from PCOLLECTION where c1 > 1\"));\n \n     // print the output record of case 1;\n-    outputStream.apply(\n-        \"log_result\",\n-        MapElements.via(\n-            new SimpleFunction<Row, Row>() {\n-              @Override\n-              public Row apply(Row input) {\n-                // expect output:\n-                //  PCOLLECTION: [3, row, 3.0]\n-                //  PCOLLECTION: [2, row, 2.0]\n-                System.out.println(\"PCOLLECTION: \" + input.getValues());\n-                return input;\n-              }\n-            }));\n+    outputStream\n+        .apply(\n+            \"log_result\",\n+            MapElements.via(\n+                new SimpleFunction<Row, Row>() {\n+                  @Override\n+                  public Row apply(Row input) {\n+                    // expect output:\n+                    //  PCOLLECTION: [3, row, 3.0]\n+                    //  PCOLLECTION: [2, row, 2.0]\n+                    System.out.println(\"PCOLLECTION: \" + input.getValues());\n+                    return input;\n+                  }\n+                }))\n+        .setCoder(RowCoder.of(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b8c0a01b9f47633002b70ef95b739c7a61252d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NDQ3Mg==", "bodyText": "Here as well", "url": "https://github.com/apache/beam/pull/11754#discussion_r427674472", "createdAt": "2020-05-20T00:26:21Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/example/BeamSqlExample.java", "diffHunk": "@@ -66,38 +68,47 @@ public static void main(String[] args) {\n         inputTable.apply(SqlTransform.query(\"select c1, c2, c3 from PCOLLECTION where c1 > 1\"));\n \n     // print the output record of case 1;\n-    outputStream.apply(\n-        \"log_result\",\n-        MapElements.via(\n-            new SimpleFunction<Row, Row>() {\n-              @Override\n-              public Row apply(Row input) {\n-                // expect output:\n-                //  PCOLLECTION: [3, row, 3.0]\n-                //  PCOLLECTION: [2, row, 2.0]\n-                System.out.println(\"PCOLLECTION: \" + input.getValues());\n-                return input;\n-              }\n-            }));\n+    outputStream\n+        .apply(\n+            \"log_result\",\n+            MapElements.via(\n+                new SimpleFunction<Row, Row>() {\n+                  @Override\n+                  public Row apply(Row input) {\n+                    // expect output:\n+                    //  PCOLLECTION: [3, row, 3.0]\n+                    //  PCOLLECTION: [2, row, 2.0]\n+                    System.out.println(\"PCOLLECTION: \" + input.getValues());\n+                    return input;\n+                  }\n+                }))\n+        .setCoder(RowCoder.of(type));\n \n     // Case 2. run the query with SqlTransform.query over result PCollection of case 1.\n     PCollection<Row> outputStream2 =\n         PCollectionTuple.of(new TupleTag<>(\"CASE1_RESULT\"), outputStream)\n             .apply(SqlTransform.query(\"select c2, sum(c3) from CASE1_RESULT group by c2\"));\n \n     // print the output record of case 2;\n-    outputStream2.apply(\n-        \"log_result\",\n-        MapElements.via(\n-            new SimpleFunction<Row, Row>() {\n-              @Override\n-              public Row apply(Row input) {\n-                // expect output:\n-                //  CASE1_RESULT: [row, 5.0]\n-                System.out.println(\"CASE1_RESULT: \" + input.getValues());\n-                return input;\n-              }\n-            }));\n+    outputStream2\n+        .apply(\n+            \"log_result\",\n+            MapElements.via(\n+                new SimpleFunction<Row, Row>() {\n+                  @Override\n+                  public Row apply(Row input) {\n+                    // expect output:\n+                    //  CASE1_RESULT: [row, 5.0]\n+                    System.out.println(\"CASE1_RESULT: \" + input.getValues());\n+                    return input;\n+                  }\n+                }))\n+        .setCoder(\n+            RowCoder.of(\n+                Schema.builder()\n+                    .addStringField(\"stringField\")\n+                    .addDoubleField(\"doubleField\")\n+                    .build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b8c0a01b9f47633002b70ef95b739c7a61252d"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e74ab7009a11394a7cd1dc411ce2d70a38965f4", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2e74ab7009a11394a7cd1dc411ce2d70a38965f4", "committedDate": "2020-05-20T01:29:08Z", "message": "[BEAM-10037] Added BeamSQLExample and PojoExample to sqlPreCommit(), and fixed coder in BeamSqlExample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb31bc8743126729f5f09e03231b303cb55df9ad", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eb31bc8743126729f5f09e03231b303cb55df9ad", "committedDate": "2020-05-20T01:31:33Z", "message": "[BEAM-10037] Reverted first query to c1>1 as opposed to c3. I added c3 for testing and forgot to change it back :)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTE0OTc1", "url": "https://github.com/apache/beam/pull/11754#pullrequestreview-415514975", "createdAt": "2020-05-20T16:31:48Z", "commit": {"oid": "eb31bc8743126729f5f09e03231b303cb55df9ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4708, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}