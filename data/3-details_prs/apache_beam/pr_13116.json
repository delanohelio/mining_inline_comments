{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTk5Nzc4", "number": 13116, "title": "[BEAM-9855] Provide an option to configure the Flink state backend", "bodyText": "We should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n(A)  Configure the default state backend in their Flink cluster\n(B1) Include the dependency in their Gradle/Maven\nproject (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\nfor RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\nin Java due to the factory specification being in Java!\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-10-14T19:44:48Z", "url": "https://github.com/apache/beam/pull/13116", "merged": true, "mergeCommit": {"oid": "d4923711cdd7b83175e21a6a422638ce530bc80c"}, "closed": true, "closedAt": "2020-11-10T14:36:24Z", "author": {"login": "mxm"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSiY8CgH2gAyNTAzNTk5Nzc4OmE3YTJlMDEzMmExYTY5YTczYzY1ZDExNDRiOGRkYzI1NjA0ZDU4Y2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdae5xLgBqjM5NzA2ODQ0NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7a2e0132a1a69a73c65d1144b8ddc25604d58cb", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/a7a2e0132a1a69a73c65d1144b8ddc25604d58cb", "committedDate": "2020-10-14T19:31:53Z", "message": "Refactor checkpointing configuration code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee9c3d4acb8e71e45db92f6b6bf949d630025a56", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/ee9c3d4acb8e71e45db92f6b6bf949d630025a56", "committedDate": "2020-10-14T19:43:14Z", "message": "[BEAM-9855] Provide an option to configure the Flink state backend\n\nWe should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n\n(A)  Configure the default state backend in their Flink cluster\n\n(B1) Include the dependency in their Gradle/Maven\n     project (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\n     for RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\n     in Java due to the factory specification being in Java!\n\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default."}, "afterCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/760137709a9aa930fa9bec297db14917e2cc2e78", "committedDate": "2020-10-14T19:59:58Z", "message": "[BEAM-9855] Provide an option to configure the Flink state backend\n\nWe should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n\n(A)  Configure the default state backend in their Flink cluster\n\n(B1) Include the dependency in their Gradle/Maven\n     project (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\n     for RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\n     in Java due to the factory specification being in Java!\n\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDE3NTUz", "url": "https://github.com/apache/beam/pull/13116#pullrequestreview-511017553", "createdAt": "2020-10-17T21:52:54Z", "commit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTo1Mjo1NFrOHjgFbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTo1ODowNVrOHjgG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA==", "bodyText": "Just wanted to confirm that dependency won't be baked into the job server as it is already part of the Flink dist.", "url": "https://github.com/apache/beam/pull/13116#discussion_r506987884", "createdAt": "2020-10-17T21:52:54Z", "author": {"login": "tweise"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA==", "bodyText": "Flink is headed in the direction where everything that is set on an environment becomes configurable (including the executor, FLIP-73). This change kind of goes in the opposite direction, increasing the amount of Flink pipeline options further. Should we look into the generic configuration mechanism instead, where it is really easy for the user to supply the Flink configuration (optionally inline, instead of via a separate file)?", "url": "https://github.com/apache/beam/pull/13116#discussion_r506988274", "createdAt": "2020-10-17T21:58:05Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzA4NDM3", "url": "https://github.com/apache/beam/pull/13116#pullrequestreview-513708437", "createdAt": "2020-10-21T13:50:24Z", "commit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MDoyNFrOHltYPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODowMzozMFrOHmVatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwMjg0NA==", "bodyText": "s/unkown/unknown", "url": "https://github.com/apache/beam/pull/13116#discussion_r509302844", "createdAt": "2020-10-21T13:50:24Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/FlinkExecutionEnvironmentsTest.java", "diffHunk": "@@ -464,6 +467,63 @@ public void shouldSetSavepointRestoreForRemoteStreaming() {\n     assertThat(getSavepointPath(sev), is(path));\n   }\n \n+  @Test\n+  public void shouldFailOnUnknownStateBackend() {\n+    FlinkPipelineOptions options = PipelineOptionsFactory.as(FlinkPipelineOptions.class);\n+    options.setStreaming(true);\n+    options.setStateBackend(\"unknown\");\n+    options.setStateBackendStoragePath(\"/path\");\n+\n+    assertThrows(\n+        \"State backend was set to 'unkown' but no storage path was provided.\",\n+        IllegalArgumentException.class,\n+        () ->\n+            FlinkExecutionEnvironments.createStreamExecutionEnvironment(\n+                options, Collections.emptyList()));\n+  }\n+\n+  @Test\n+  public void shouldFailOnNoStoragePathProvided() {\n+    FlinkPipelineOptions options = PipelineOptionsFactory.as(FlinkPipelineOptions.class);\n+    options.setStreaming(true);\n+    options.setStateBackend(\"unknown\");\n+\n+    assertThrows(\n+        \"State backend was set to 'unkown' but no storage path was provided.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwMzc3NQ==", "bodyText": "s/unkown/unknown", "url": "https://github.com/apache/beam/pull/13116#discussion_r509303775", "createdAt": "2020-10-21T13:51:13Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/FlinkExecutionEnvironmentsTest.java", "diffHunk": "@@ -464,6 +467,63 @@ public void shouldSetSavepointRestoreForRemoteStreaming() {\n     assertThat(getSavepointPath(sev), is(path));\n   }\n \n+  @Test\n+  public void shouldFailOnUnknownStateBackend() {\n+    FlinkPipelineOptions options = PipelineOptionsFactory.as(FlinkPipelineOptions.class);\n+    options.setStreaming(true);\n+    options.setStateBackend(\"unknown\");\n+    options.setStateBackendStoragePath(\"/path\");\n+\n+    assertThrows(\n+        \"State backend was set to 'unkown' but no storage path was provided.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxNjA4Mw==", "bodyText": "ignorable nit: I will probably set the explicit values there as examples 'rocksdb' or 'filesystem' (or the classnames if we decide to change this).", "url": "https://github.com/apache/beam/pull/13116#discussion_r509316083", "createdAt": "2020-10-21T14:04:44Z", "author": {"login": "iemejia"}, "path": "website/www/site/layouts/shortcodes/flink_java_pipeline_options.html", "diffHunk": "@@ -157,9 +157,19 @@\n   <td>Shuts down sources which have been idle for the configured time of milliseconds. Once a source has been shut down, checkpointing is not possible anymore. Shutting down the sources eventually leads to pipeline shutdown (=Flink job finishes) once all input has been processed. Unless explicitly set, this will default to Long.MAX_VALUE when checkpointing is enabled and to 0 when checkpointing is disabled. See https://issues.apache.org/jira/browse/FLINK-2491 for progress on this issue.</td>\n   <td>Default: <code>-1</code></td>\n </tr>\n+<tr>\n+  <td><code>stateBackend</code></td>\n+  <td>State backend to store Beam's state. Use RocksDB or Filesystem. Defaults to heap.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxODA4NQ==", "bodyText": "We can do this env.setStateBackend out of the if/else block.", "url": "https://github.com/apache/beam/pull/13116#discussion_r509318085", "createdAt": "2020-10-21T14:07:10Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(\n+      FlinkPipelineOptions options, StreamExecutionEnvironment env) {\n+    if (options.getStateBackend() != null) {\n+      final String storagePath = options.getStateBackendStoragePath();\n+      Preconditions.checkArgument(\n+          storagePath != null,\n+          \"State backend was set to '%s' but no storage path was provided.\",\n+          options.getStateBackend());\n+\n+      final StateBackend stateBackend;\n+      if (options.getStateBackend().equalsIgnoreCase(\"rocksdb\")) {\n+        try {\n+          stateBackend = new RocksDBStateBackend(storagePath);\n+        } catch (IOException e) {\n+          throw new RuntimeException(\"Could not create RocksDB state backend.\", e);\n+        }\n+      } else if (options.getStateBackend().equalsIgnoreCase(\"filesystem\")) {\n+        stateBackend = new FsStateBackend(storagePath);\n+      } else {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Unknown state backend '%s'. Use 'rocksdb' or 'filesystem' or configure via Flink config file.\",\n+                options.getStateBackend()));\n+      }\n+      env.setStateBackend(stateBackend);\n+    } else if (options.getStateBackendFactory() != null) {\n+      // Legacy way of setting the state backend\n       final StateBackend stateBackend =\n           InstanceBuilder.ofType(FlinkStateBackendFactory.class)\n               .fromClass(options.getStateBackendFactory())\n               .build()\n               .createStateBackend(options);\n-      flinkStreamEnv.setStateBackend(stateBackend);\n+      env.setStateBackend(stateBackend);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjczNg==", "bodyText": "I checked and the dependency does not seem to be part of the default Flink distribution (quite surprising for me btw). However the way of instantiation makes the dependency needed, making it provided will solve it but it is a bit less user-friendly.", "url": "https://github.com/apache/beam/pull/13116#discussion_r509326736", "createdAt": "2020-10-21T14:17:22Z", "author": {"login": "iemejia"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1Njc4OQ==", "bodyText": "Should not this be the classname of the backend? I am assuming that what we want to achieve here is to allow new backends (not available in Flink) to be configured too (see comment above)", "url": "https://github.com/apache/beam/pull/13116#discussion_r509956789", "createdAt": "2020-10-22T08:00:06Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(\n+      FlinkPipelineOptions options, StreamExecutionEnvironment env) {\n+    if (options.getStateBackend() != null) {\n+      final String storagePath = options.getStateBackendStoragePath();\n+      Preconditions.checkArgument(\n+          storagePath != null,\n+          \"State backend was set to '%s' but no storage path was provided.\",\n+          options.getStateBackend());\n+\n+      final StateBackend stateBackend;\n+      if (options.getStateBackend().equalsIgnoreCase(\"rocksdb\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1ODgzOA==", "bodyText": "Is the intention of supporting this to be able to configure new Backends too? I mean like the new one by the RISE team? Is this the intended Nexmark use?", "url": "https://github.com/apache/beam/pull/13116#discussion_r509958838", "createdAt": "2020-10-22T08:03:30Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODEyMjM4", "url": "https://github.com/apache/beam/pull/13116#pullrequestreview-516812238", "createdAt": "2020-10-26T14:07:34Z", "commit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/760137709a9aa930fa9bec297db14917e2cc2e78", "committedDate": "2020-10-14T19:59:58Z", "message": "[BEAM-9855] Provide an option to configure the Flink state backend\n\nWe should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n\n(A)  Configure the default state backend in their Flink cluster\n\n(B1) Include the dependency in their Gradle/Maven\n     project (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\n     for RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\n     in Java due to the factory specification being in Java!\n\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default."}, "afterCommit": {"oid": "f292ca89f75b2a7d8319198f21f268ae4f7902d8", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/f292ca89f75b2a7d8319198f21f268ae4f7902d8", "committedDate": "2020-11-08T11:57:49Z", "message": "[BEAM-9855] Provide an option to configure the Flink state backend\n\nWe should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n\n(A)  Configure the default state backend in their Flink cluster\n\n(B1) Include the dependency in their Gradle/Maven\n     project (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\n     for RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\n     in Java due to the factory specification being in Java!\n\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74663e28e9fbb698f6a09fef7f429f7d52b69c0f", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/74663e28e9fbb698f6a09fef7f429f7d52b69c0f", "committedDate": "2020-11-08T11:59:22Z", "message": "[BEAM-9855] Provide an option to configure the Flink state backend\n\nWe should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n\n(A)  Configure the default state backend in their Flink cluster\n\n(B1) Include the dependency in their Gradle/Maven\n     project (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\n     for RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\n     in Java due to the factory specification being in Java!\n\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f292ca89f75b2a7d8319198f21f268ae4f7902d8", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/f292ca89f75b2a7d8319198f21f268ae4f7902d8", "committedDate": "2020-11-08T11:57:49Z", "message": "[BEAM-9855] Provide an option to configure the Flink state backend\n\nWe should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n\n(A)  Configure the default state backend in their Flink cluster\n\n(B1) Include the dependency in their Gradle/Maven\n     project (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\n     for RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\n     in Java due to the factory specification being in Java!\n\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default."}, "afterCommit": {"oid": "74663e28e9fbb698f6a09fef7f429f7d52b69c0f", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/74663e28e9fbb698f6a09fef7f429f7d52b69c0f", "committedDate": "2020-11-08T11:59:22Z", "message": "[BEAM-9855] Provide an option to configure the Flink state backend\n\nWe should make it easier to configure a Flink state backend. At the moment,\nusers have to either:\n\n(A)  Configure the default state backend in their Flink cluster\n\n(B1) Include the dependency in their Gradle/Maven\n     project (e.g. \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"\n     for RocksDB).\n(B2) Set the state backend factory in the FlinkPipelineOptions. This only works\n     in Java due to the factory specification being in Java!\n\nWe can make it easier by simple adding pipeline options for the state backend\nname and the checkpoint directory which will be enough for configuring the state\nbackend. We bundle the RocksDB state backend by default."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2044, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}