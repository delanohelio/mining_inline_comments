{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzE1NzU1", "number": 10822, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowMDo1M1rODjLkWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowODoxNlrODjLttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjE2MjgwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/iobase.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowMDo1M1rOFu2I-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODoyNDoyNlrOFu26XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NTg1MQ==", "bodyText": "I don't know that we want to restrict this to integral values.", "url": "https://github.com/apache/beam/pull/10822#discussion_r384665851", "createdAt": "2020-02-26T18:00:53Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1289,9 +1289,9 @@ class RestrictionProgress(object):\n   \"\"\"\n   def __init__(self, **kwargs):\n     # Only accept keyword arguments.\n-    self._fraction = kwargs.pop('fraction', None)\n-    self._completed = kwargs.pop('completed', None)\n-    self._remaining = kwargs.pop('remaining', None)\n+    self._fraction = kwargs.pop('fraction', None)  # type: Optional[float]\n+    self._completed = kwargs.pop('completed', None)  # type: Optional[int]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3ODQ5Mw==", "bodyText": "I was a pretty confused by this class, and I think there may actually be some bugs in its handling of None-values, so I tried to do the bare minimum of what I thought was right.  No worries. I will revert this and leave this as a final typing task to someone who understands it.", "url": "https://github.com/apache/beam/pull/10822#discussion_r384678493", "createdAt": "2020-02-26T18:24:26Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1289,9 +1289,9 @@ class RestrictionProgress(object):\n   \"\"\"\n   def __init__(self, **kwargs):\n     # Only accept keyword arguments.\n-    self._fraction = kwargs.pop('fraction', None)\n-    self._completed = kwargs.pop('completed', None)\n-    self._remaining = kwargs.pop('remaining', None)\n+    self._fraction = kwargs.pop('fraction', None)  # type: Optional[float]\n+    self._completed = kwargs.pop('completed', None)  # type: Optional[int]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NTg1MQ=="}, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjE2Njk0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/common.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowMjowN1rOFu2Lvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTowNToxM1rOFu4Row==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NjU1OA==", "bodyText": "Why this change? (And below.)", "url": "https://github.com/apache/beam/pull/10822#discussion_r384666558", "createdAt": "2020-02-26T18:02:07Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -375,7 +379,7 @@ class DoFnInvoker(object):\n   represented by a given DoFnSignature.\"\"\"\n \n   def __init__(self,\n-               output_processor,  # type: OutputProcessor\n+               output_processor,  # type: _OutputProcessor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMDgzNQ==", "bodyText": "hmmm... well, at the time that I made this change I think it resolved an error, but either I am mistaken or something changed in the module.   I'm rolling this back.", "url": "https://github.com/apache/beam/pull/10822#discussion_r384700835", "createdAt": "2020-02-26T19:05:13Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -375,7 +379,7 @@ class DoFnInvoker(object):\n   represented by a given DoFnSignature.\"\"\"\n \n   def __init__(self,\n-               output_processor,  # type: OutputProcessor\n+               output_processor,  # type: _OutputProcessor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NjU1OA=="}, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjE2Nzg1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/common.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowMjoyNVrOFu2MXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowMjoyNVrOFu2MXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NjcxNg==", "bodyText": "Same.", "url": "https://github.com/apache/beam/pull/10822#discussion_r384666716", "createdAt": "2020-02-26T18:02:25Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -529,7 +530,7 @@ class SimpleInvoker(DoFnInvoker):\n   \"\"\"An invoker that processes elements ignoring windowing information.\"\"\"\n \n   def __init__(self,\n-               output_processor,  # type: OutputProcessor\n+               output_processor,  # type: _OutputProcessor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjE4Njc2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/external_java.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODowODoxNlrOFu2YPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo0ODo0OFrOFvAi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw==", "bodyText": "I prefer the previous format, where there was single assignment rather than re-assignment. Is there any benefit to typing this?", "url": "https://github.com/apache/beam/pull/10822#discussion_r384669757", "createdAt": "2020-02-26T18:08:16Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/external_java.py", "diffHunk": "@@ -37,18 +39,19 @@\n \n # Protect against environments where apitools library is not available.\n # pylint: disable=wrong-import-order, wrong-import-position\n+apiclient = None  # type: Optional[types.ModuleType]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4OTA5OA==", "bodyText": "I completely agree.  Unfortunately, this is a syntax error in mypy:\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient  # type: Optional[types.ModuleType]\nexcept ImportError:\n  apiclient = None\nAs is this:\ntry:\n  import apache_beam.runners.dataflow.internal.apiclient as apiclient  # type: Optional[types.ModuleType]\nexcept ImportError:\n  apiclient = None\nThe reason is that type comments are (by design) not capable of doing anything that the new PEP 526 variable annotations are not.  In other words, this is obviously wrong:\ntry:\n  Optional[types.ModuleType]: import apache_beam.runners.dataflow.internal.apiclient as apiclient \nexcept ImportError:\n  apiclient = None\nIn that context, this makes more sense:\napiclient: Optional[types.ModuleType] = None\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient\nexcept ImportError:\n  pass", "url": "https://github.com/apache/beam/pull/10822#discussion_r384689098", "createdAt": "2020-02-26T18:43:52Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/transforms/external_java.py", "diffHunk": "@@ -37,18 +39,19 @@\n \n # Protect against environments where apitools library is not available.\n # pylint: disable=wrong-import-order, wrong-import-position\n+apiclient = None  # type: Optional[types.ModuleType]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4ODI2OQ==", "bodyText": "My question is why we need to type apiclient as types.ModuleType at all.", "url": "https://github.com/apache/beam/pull/10822#discussion_r384788269", "createdAt": "2020-02-26T21:50:45Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/external_java.py", "diffHunk": "@@ -37,18 +39,19 @@\n \n # Protect against environments where apitools library is not available.\n # pylint: disable=wrong-import-order, wrong-import-position\n+apiclient = None  # type: Optional[types.ModuleType]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNzQyMQ==", "bodyText": "My question is why we need to type apiclient as types.ModuleType at all.\n\nFair question.\nIf we don't do this (i.e. as with the original code), we get the following error:\napache_beam/transforms/external_java.py:46: error: Incompatible types in assignment (expression has type \"None\", variable has type Module)  [assignment]\n\nTo resolve this, we need to mark apiclient as Optional\n\nwhy can't we save ourselves some headache and leave out of the types.ModuleType part?\napiclient = None  # type: Optional\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient\nexcept ImportError:\n  pass\nIf we do this, apiclient will become Optional[Any]\n\nWhy can't we ignore the error?\nWe can, but then mypy will mark the type as non-Optional, and that would remove the added protections that mypy provides against accidentally using the variable when it's None.\n\nWhy can't we just add the type comment on the original apiclient = None line?\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient\nexcept ImportError:\n  apiclient = None  # type: Optional[types.ModuleType]\nWith this, we get the following error:\napache_beam/transforms/external_java.py:46: error: Name 'apiclient' already defined (by an import)  [no-redef]\n\nThere is only one opportunity to override/influence the inferred type of a variable:  on the first line where it is defined (think of type variable definitions like C/C++, but with python scoping rules).  However, apiclient is defined via an import rather than an assignment, which forces us to preface the import with a variable definition.", "url": "https://github.com/apache/beam/pull/10822#discussion_r384807421", "createdAt": "2020-02-26T22:30:32Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/transforms/external_java.py", "diffHunk": "@@ -37,18 +39,19 @@\n \n # Protect against environments where apitools library is not available.\n # pylint: disable=wrong-import-order, wrong-import-position\n+apiclient = None  # type: Optional[types.ModuleType]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzNjMwNg==", "bodyText": "I did some more research on this, and I found this mypy issue: python/mypy#1297\nIt suggests this idiom:\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient as _apiclient\nexcept ImportError:\n  apiclient = None\nelse:\n  apiclient = _apiclient\nThe import is a bit longer and uglier, but it has 2 advantages:\n\nno need to import Optional or ModuleType\nthe idiom I was using was actually making apiclient a generic ModuleType, dropping all knowledge of the members of apache_beam.runners.dataflow.internal.  That's bad!\n\nThe reason this works without explicit Optional annotation that mypy will automatically determine optionality in some cases, like this:\nif some_conditional():\n  x = None\nelse:\n  x = 1\nreveal_type(x)  # Revealed type is 'Union[builtins.int, None]'", "url": "https://github.com/apache/beam/pull/10822#discussion_r384836306", "createdAt": "2020-02-26T23:48:48Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/transforms/external_java.py", "diffHunk": "@@ -37,18 +39,19 @@\n \n # Protect against environments where apitools library is not available.\n # pylint: disable=wrong-import-order, wrong-import-position\n+apiclient = None  # type: Optional[types.ModuleType]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}, "originalCommit": {"oid": "19ba9d8e6f54be306d28b305ade429908035335d"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1973, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}