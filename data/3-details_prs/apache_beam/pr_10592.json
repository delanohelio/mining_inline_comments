{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODk3ODkx", "number": 10592, "title": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers", "bodyText": "This is a followup to #9056.\nR: @robertwb\nR: @udim\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-15T00:12:05Z", "url": "https://github.com/apache/beam/pull/10592", "merged": true, "mergeCommit": {"oid": "e670b8a276bdf8af0d9f4432af9b588472e5d53f"}, "closed": true, "closedAt": "2020-01-28T19:01:38Z", "author": {"login": "chadrik"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9p3b1AFqTM0ODI5NzI5Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-gY6-gFqTM0ODg1MTQzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Mjk3Mjkz", "url": "https://github.com/apache/beam/pull/10592#pullrequestreview-348297293", "createdAt": "2020-01-25T01:03:07Z", "commit": {"oid": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMTowMzowN1rOFht_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMjoxMDowMlrOFhuXpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwMDgzOA==", "bodyText": "From looking at the examples in https://mypy.readthedocs.io/en/stable/protocols.html, it seems that the pattern is to name a protocol after what it does.\nAlternate name ideas: PartitionableBuffer, SupportsPartition, PartitionableBytesList", "url": "https://github.com/apache/beam/pull/10592#discussion_r370900838", "createdAt": "2020-01-25T01:03:07Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -262,7 +263,21 @@ def done(self):\n                    in self._req_worker_mapping.items()])\n \n \n-class _ListBuffer(list):\n+class BufferProtocol(Protocol):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwMTQwMw==", "bodyText": "Instead of asserting is not None, the code could self._table.clear() instead of self._table = None in line 359.", "url": "https://github.com/apache/beam/pull/10592#discussion_r370901403", "createdAt": "2020-01-25T01:07:37Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -288,6 +303,7 @@ def append(self, elements_data):\n     # type: (bytes) -> None\n     if self._grouped_output:\n       raise RuntimeError('Grouping table append after read.')\n+    assert self._table is not None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNTMxOA==", "bodyText": "This protocol's name does not match its structure. Structurally, _ListBuffer is a CopyOnWriteListProtocol but semantically it does not do the CopyOnWrite part. A verb other than append could be used to make the distinction, perhaps overlay? (and the protocol could be OverlayList or FloatingList)", "url": "https://github.com/apache/beam/pull/10592#discussion_r370905318", "createdAt": "2020-01-25T01:46:20Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -1026,12 +1050,23 @@ def _extract_endpoints(stage,  # type: fn_api_runner_transforms.Stage\n   class StateServicer(beam_fn_api_pb2_grpc.BeamFnStateServicer,\n                       sdk_worker.StateHandler):\n \n+    class CopyOnWriteListProtocol(Protocol):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNjM4Ng==", "bodyText": "A list is not semantically a CopyOnWriteListProtocol.", "url": "https://github.com/apache/beam/pull/10592#discussion_r370906386", "createdAt": "2020-01-25T01:59:57Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -1065,24 +1106,37 @@ def append(self, item):\n           self._overlay[self._key] = list(self._underlying[self._key])\n         self._overlay[self._key].append(item)\n \n+    StateType = Union[CopyOnWriteState,\n+                      DefaultDict[bytes, CopyOnWriteListProtocol]]\n+\n     def __init__(self):\n+      # type: () -> None\n       self._lock = threading.Lock()\n-      self._state = collections.defaultdict(list)  # type: DefaultDict[bytes, List[bytes]]\n-      self._checkpoint = None\n+      self._state = collections.defaultdict(list)  # type: FnApiRunner.StateServicer.StateType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzA0Ng==", "bodyText": "This is confusing. Why does self._state change its type during the lifetime of StateServicer?\nPerhaps it'd be clearer if there were 2 members (_state and _cow_state), or if self._state was initialized to be a CopyOnWriteState in this method? @robertwb", "url": "https://github.com/apache/beam/pull/10592#discussion_r370907046", "createdAt": "2020-01-25T02:10:02Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -1065,24 +1106,37 @@ def append(self, item):\n           self._overlay[self._key] = list(self._underlying[self._key])\n         self._overlay[self._key].append(item)\n \n+    StateType = Union[CopyOnWriteState,\n+                      DefaultDict[bytes, CopyOnWriteListProtocol]]\n+\n     def __init__(self):\n+      # type: () -> None\n       self._lock = threading.Lock()\n-      self._state = collections.defaultdict(list)  # type: DefaultDict[bytes, List[bytes]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f"}, "originalPosition": 218}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f", "committedDate": "2020-01-15T00:05:47Z", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers"}, "afterCommit": {"oid": "bfe63768c8091f2822ad0ffc5340e80ec80daa58", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/bfe63768c8091f2822ad0ffc5340e80ec80daa58", "committedDate": "2020-01-25T20:41:31Z", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfe63768c8091f2822ad0ffc5340e80ec80daa58", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/bfe63768c8091f2822ad0ffc5340e80ec80daa58", "committedDate": "2020-01-25T20:41:31Z", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers"}, "afterCommit": {"oid": "9c547d3fa8f4e2561f761a02f4bf63ae9403ed38", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/9c547d3fa8f4e2561f761a02f4bf63ae9403ed38", "committedDate": "2020-01-25T20:44:10Z", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4824049623c68a64027183c7e2e0be6009912d", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/7b4824049623c68a64027183c7e2e0be6009912d", "committedDate": "2020-01-25T21:48:18Z", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c547d3fa8f4e2561f761a02f4bf63ae9403ed38", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/9c547d3fa8f4e2561f761a02f4bf63ae9403ed38", "committedDate": "2020-01-25T20:44:10Z", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers"}, "afterCommit": {"oid": "7b4824049623c68a64027183c7e2e0be6009912d", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/7b4824049623c68a64027183c7e2e0be6009912d", "committedDate": "2020-01-25T21:48:18Z", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4ODUxNDMx", "url": "https://github.com/apache/beam/pull/10592#pullrequestreview-348851431", "createdAt": "2020-01-27T17:42:25Z", "commit": {"oid": "7b4824049623c68a64027183c7e2e0be6009912d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3814, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}