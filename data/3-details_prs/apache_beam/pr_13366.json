{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjI4MzE1", "number": 13366, "title": "[BEAM-9615] Switch options for logical types.", "bodyText": "Turns out Logical Types were the correct way to solve the int problem. Who knew?\nThis only tests the \"to and from schema\" type specifications half, and not the encoding decoding half of logical types, so those conversions are subject to change. However, I wanted to get this part in because I'm working on not needing to write similar structures for encoders, decoders, toSchemas, and FromSchemas for all the provisioning as well.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-11-17T18:54:06Z", "url": "https://github.com/apache/beam/pull/13366", "merged": true, "mergeCommit": {"oid": "a267d96bcf7db9a3405a3a0d30d97ab7cb0c6d33"}, "closed": true, "closedAt": "2020-11-19T00:21:28Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddeH2fAH2gAyNTIyNjI4MzE1OjdhNGE5YzQwMWNkM2MyOTc4NjVmMmRmODMyNTIzM2U3NGVjZTQ0MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddxqkYgH2gAyNTIyNjI4MzE1OjhmYzJjNjhjZGNkNjI1ODY1N2RiZjIwMDM0OGNlZDE4OTZlYzQyNzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/7a4a9c401cd3c297865f2df8325233e74ece4413", "committedDate": "2020-11-17T18:46:46Z", "message": "[BEAM-9615] Switch options  for logical types."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMDc5NzQ2", "url": "https://github.com/apache/beam/pull/13366#pullrequestreview-533079746", "createdAt": "2020-11-18T03:34:21Z", "commit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzozNDoyMVrOH1YhUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo1NDoyOFrOH1Zrpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTczODMyMg==", "bodyText": "Is this godoc-related or just something accidentally left in?", "url": "https://github.com/apache/beam/pull/13366#discussion_r525738322", "createdAt": "2020-11-18T03:34:21Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}\n+)\n+\n+// LogicalType is an interface between custom Go types, and schema storage types.\n+//\n+// A LogicalType is a way to define a new type that can be stored in a schema field\n+// using a known underlying type for storage. The storage type must be comprised of\n+// known schema field types, or pre-registered LogicalTypes. LogicalTypes may not be\n+// mutually recursive at any level of indirection.\n+//End", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTQ4Mg==", "bodyText": "I don't understand the reason to have the ID layer between logicalIdentifiers and logicalTypes. Is there a reason not to just have this?:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tlogicalTypes       = map[string]LogicalType{}\n          \n          \n            \n            \tlogicalIdentifiers = map[reflect.Type]string{}\n          \n          \n            \n            \tlogicalTypes       = map[reflect.Type]LogicalType{}", "url": "https://github.com/apache/beam/pull/13366#discussion_r525745482", "createdAt": "2020-11-18T03:41:55Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1NzM1MA==", "bodyText": "Nit: This line can just be part of the previous line.", "url": "https://github.com/apache/beam/pull/13366#discussion_r525757350", "createdAt": "2020-11-18T03:54:28Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/schema.go", "diffHunk": "@@ -412,12 +382,18 @@ func fieldTypeToReflectType(sft *pipepb.FieldType, opts []*pipepb.Option) (refle\n \t// case *pipepb.FieldType_IterableType:\n \t// TODO(BEAM-9615): handle IterableTypes.\n \n-\t//case *pipepb.FieldType_LogicalType:\n-\t// TODO(BEAM-9615): handle LogicalTypes types.\n-\t//sft.GetLogicalType().\n+\tcase *pipepb.FieldType_LogicalType:\n+\t\tlst := sft.GetLogicalType()\n+\t\tidentifier := lst.GetUrn()\n+\t\tlt, ok := logicalTypes[identifier]\n+\t\tif !ok {\n+\t\t\treturn nil, errors.Errorf(\"unknown logical type: %v\", identifier)\n+\t\t}\n+\t\tt = lt.GoType()\n \n \t// Logical Types are for things that have more specialized user representation already, or\n-\t// things like Time or protocol buffers.\n+\t// things like Time or protocol buffers, or int.\n+\t// Or specifically formatted integers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 224}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc2c68cdcd6258657dbf200348ced1896ec4277", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/8fc2c68cdcd6258657dbf200348ced1896ec4277", "committedDate": "2020-11-18T17:32:53Z", "message": "!fixup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4462, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}