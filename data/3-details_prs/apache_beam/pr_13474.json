{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxOTYxNTY4", "number": 13474, "title": "[BEAM-10475] Add typehints for ShardedKeyCoder", "bodyText": "Implement to_type_hint and from_type_hint for ShardedKeyCoder and add a TypeConstraint for ShardedKey so during the runner API translation the corresponding coder can be added.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-03T17:48:25Z", "url": "https://github.com/apache/beam/pull/13474", "merged": true, "mergeCommit": {"oid": "44a2ac55ae73401009d877a2a5d93165d1d8237b"}, "closed": true, "closedAt": "2020-12-04T22:35:20Z", "author": {"login": "nehsyc"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdimy0xAH2gAyNTMxOTYxNTY4OjIxNDgzMDA4ODRlNDliZGI1OGM1MjFhMWIyNGVhNTZhOGM0YWM3MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi_OWMgFqTU0NTMyOTI1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/2148300884e49bdb58c521a1b24ea56a8c4ac700", "committedDate": "2020-12-03T17:42:34Z", "message": "Add typehints for ShardedKeyCoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MjQ2ODgy", "url": "https://github.com/apache/beam/pull/13474#pullrequestreview-544246882", "createdAt": "2020-12-03T18:16:05Z", "commit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxNjowNVrOH-qgrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTozODo0OFrOH-uNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MDI1Mw==", "bodyText": "To verify: this type constraint is for Beam internal use only and users are not expected specify it?", "url": "https://github.com/apache/beam/pull/13474#discussion_r535470253", "createdAt": "2020-12-03T18:16:05Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUxMzgyMQ==", "bodyText": "Why isn't this import at the top of the file?", "url": "https://github.com/apache/beam/pull/13474#discussion_r535513821", "createdAt": "2020-12-03T19:20:12Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -1485,6 +1486,21 @@ def as_cloud_object(self, coders_context=None):\n         ],\n     }\n \n+  def to_type_hint(self):\n+    from apache_beam.typehints import sharded_key_type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyNjAxMg==", "bodyText": "The 2 exceptions raised here should have test coverage.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535526012", "createdAt": "2020-12-03T19:33:37Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -0,0 +1,69 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.coders import typecoders\n+from apache_beam.coders.coders import ShardedKeyCoder\n+from apache_beam.typehints import typehints\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraint(typehints.TypeConstraint):\n+  def __init__(self, key_type):\n+    self.key_type = typehints.normalize(key_type)\n+\n+  def _inner_types(self):\n+    yield self.key_type\n+\n+  def _consistent_with_check_(self, sub):\n+    return (\n+        isinstance(sub, self.__class__) and\n+        typehints.is_consistent_with(sub.key_type, self.key_type))\n+\n+  def type_check(self, instance):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzMDc2Mw==", "bodyText": "This branch should have test coverage.", "url": "https://github.com/apache/beam/pull/13474#discussion_r535530763", "createdAt": "2020-12-03T19:38:48Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/coders/coders.py", "diffHunk": "@@ -1485,6 +1486,21 @@ def as_cloud_object(self, coders_context=None):\n         ],\n     }\n \n+  def to_type_hint(self):\n+    from apache_beam.typehints import sharded_key_type\n+    return sharded_key_type.ShardedKeyTypeConstraint(\n+        self._key_coder.to_type_hint())\n+\n+  @staticmethod\n+  def from_type_hint(typehint, registry):\n+    from apache_beam.typehints import sharded_key_type\n+    if isinstance(typehint, sharded_key_type.ShardedKeyTypeConstraint):\n+      return ShardedKeyCoder(registry.get_coder(typehint.key_type))\n+    else:\n+      raise ValueError((", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2148300884e49bdb58c521a1b24ea56a8c4ac700"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc9e10db9f57ae55059510f9faaa117d2da32a4", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/6cc9e10db9f57ae55059510f9faaa117d2da32a4", "committedDate": "2020-12-04T18:17:35Z", "message": "Add test coverage for ShardedKeyTypeConstraint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "209799478f260e2cd9627cbfea6dd6677410957f", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/209799478f260e2cd9627cbfea6dd6677410957f", "committedDate": "2020-12-03T22:50:58Z", "message": "Add test coverage for ShardedKeyTypeConstraint"}, "afterCommit": {"oid": "6cc9e10db9f57ae55059510f9faaa117d2da32a4", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/6cc9e10db9f57ae55059510f9faaa117d2da32a4", "committedDate": "2020-12-04T18:17:35Z", "message": "Add test coverage for ShardedKeyTypeConstraint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzI5MjUw", "url": "https://github.com/apache/beam/pull/13474#pullrequestreview-545329250", "createdAt": "2020-12-04T22:04:42Z", "commit": {"oid": "6cc9e10db9f57ae55059510f9faaa117d2da32a4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNDo0M1rOH_j6Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNDo0M1rOH_j6Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDYzMA==", "bodyText": "Note: self.assertRaisesRegex can also check exception messages.", "url": "https://github.com/apache/beam/pull/13474#discussion_r536410630", "createdAt": "2020-12-04T22:04:43Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/sharded_key_type_test.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Unit tests for the ShardedKeyTypeConstraint.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.typehints import Tuple\n+from apache_beam.typehints import typehints\n+from apache_beam.typehints.sharded_key_type import ShardedKeyTypeConstraint\n+from apache_beam.typehints.typehints_test import TypeHintTestCase\n+from apache_beam.utils.sharded_key import ShardedKey\n+\n+\n+class ShardedKeyTypeConstraintTest(TypeHintTestCase):\n+  def test_compatibility(self):\n+    constraint1 = ShardedKeyTypeConstraint(int)\n+    constraint2 = ShardedKeyTypeConstraint(str)\n+\n+    self.assertCompatible(constraint1, constraint1)\n+    self.assertCompatible(constraint2, constraint2)\n+    self.assertNotCompatible(constraint1, constraint2)\n+\n+  def test_repr(self):\n+    constraint = ShardedKeyTypeConstraint(int)\n+    self.assertEqual('ShardedKey(int)', repr(constraint))\n+\n+  def test_type_check_not_sharded_key(self):\n+    constraint = ShardedKeyTypeConstraint(int)\n+    obj = 5\n+    with self.assertRaises(TypeError) as e:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc9e10db9f57ae55059510f9faaa117d2da32a4"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4309, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}