{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Njg2MTQ4", "number": 12618, "title": "[BEAM-10669] Add support for Dataflow Templates in SnowflakeIO", "bodyText": "Changed basic types in SnowflakeIO to ValueProvider and refactored necessary functionalities due to support Dataflow Templates.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n \n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-18T19:13:39Z", "url": "https://github.com/apache/beam/pull/12618", "merged": true, "mergeCommit": {"oid": "1bdc8599ccf459aa623e307cd4e48253a5e41334"}, "closed": true, "closedAt": "2020-09-03T21:54:49Z", "author": {"login": "kkucharc"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-eyJpgH2gAyNDY5Njg2MTQ4OmE3OTQ4NGUwN2E2YTc5YjIzZGYwNGJiN2I2MzU0NmVmOWQ1YWVlMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE7bGgABqjM3MTk2Mzc0OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a79484e07a6a79b23df04bb7b63546ef9d5aee30", "author": {"user": {"login": "kkucharc", "name": "Kasia Kucharczyk"}}, "url": "https://github.com/apache/beam/commit/a79484e07a6a79b23df04bb7b63546ef9d5aee30", "committedDate": "2020-08-13T12:01:19Z", "message": "[BEAM-10669] Changed SnowflakeIO parameters to ValueProvider<> and moved most of functionalities to expand methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d033c0ec145facf9b5411f1b4f9a6d8ce504c23", "author": {"user": {"login": "kkucharc", "name": "Kasia Kucharczyk"}}, "url": "https://github.com/apache/beam/commit/2d033c0ec145facf9b5411f1b4f9a6d8ce504c23", "committedDate": "2020-08-17T11:20:30Z", "message": "[BEAM-10669] Changed quotation mark to value provider variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adcbdea094a89857ad08757de6e30362c5d945b0", "author": {"user": {"login": "kkucharc", "name": "Kasia Kucharczyk"}}, "url": "https://github.com/apache/beam/commit/adcbdea094a89857ad08757de6e30362c5d945b0", "committedDate": "2020-08-17T11:33:16Z", "message": "[BEAM-10669] Added required pipeline options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c7cadd9c3e012bb9cd6c37333093407381684af", "author": {"user": {"login": "kkucharc", "name": "Kasia Kucharczyk"}}, "url": "https://github.com/apache/beam/commit/6c7cadd9c3e012bb9cd6c37333093407381684af", "committedDate": "2020-08-19T11:05:16Z", "message": "[BEAM-10669] Excluded test key in Snowflake resources in RAT task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df488686ede295f009cfeebbb1bbec58d8cbe0f5", "author": {"user": {"login": "kkucharc", "name": "Kasia Kucharczyk"}}, "url": "https://github.com/apache/beam/commit/df488686ede295f009cfeebbb1bbec58d8cbe0f5", "committedDate": "2020-08-21T05:38:33Z", "message": "Merge branch 'master' into support-templates-in-snowflakeio"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b8fb4b691c068b97c9caf265d7410580a6a922b", "author": {"user": {"login": "kkucharc", "name": "Kasia Kucharczyk"}}, "url": "https://github.com/apache/beam/commit/1b8fb4b691c068b97c9caf265d7410580a6a922b", "committedDate": "2020-08-21T16:29:04Z", "message": "[BEAM-10669] fixed dependencies in Snowflake streaming IOIT test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTI5NTg1", "url": "https://github.com/apache/beam/pull/12618#pullrequestreview-479929585", "createdAt": "2020-09-01T16:38:43Z", "commit": {"oid": "1b8fb4b691c068b97c9caf265d7410580a6a922b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjozODo0NFrOHK_Omw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzowODozNlrOHLAURA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzczOQ==", "bodyText": "This should be setQuotationMark?", "url": "https://github.com/apache/beam/pull/12618#discussion_r481283739", "createdAt": "2020-09-01T16:38:44Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -390,6 +407,12 @@\n      * @return\n      */\n     public Read<T> withQuotationMark(String quotationMark) {\n+      return toBuilder()\n+          .setStorageIntegrationName(ValueProvider.StaticValueProvider.of(quotationMark))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8fb4b691c068b97c9caf265d7410580a6a922b"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5MDQyMg==", "bodyText": "In this case, the key comes from a file path in the local machine at pipeline construction time. Is that right?", "url": "https://github.com/apache/beam/pull/12618#discussion_r481290422", "createdAt": "2020-09-01T16:49:48Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -1302,123 +1381,249 @@ public void finishBundle() throws Exception {\n     }\n   }\n \n-  private static String getValueOrNull(ValueProvider<String> valueProvider) {\n-    return valueProvider != null ? valueProvider.get() : null;\n-  }\n-\n   /**\n    * A POJO describing a {@link DataSource}, providing all properties allowing to create a {@link\n    * DataSource}.\n    */\n   @AutoValue\n   public abstract static class DataSourceConfiguration implements Serializable {\n+    @Nullable\n+    public abstract String getUrl();\n \n-    public abstract @Nullable String getUrl();\n+    @Nullable\n+    public abstract ValueProvider<String> getUsername();\n \n-    public abstract @Nullable String getUsername();\n+    @Nullable\n+    public abstract ValueProvider<String> getPassword();\n \n-    public abstract @Nullable String getPassword();\n+    @Nullable\n+    public abstract PrivateKey getPrivateKey();\n \n-    public abstract @Nullable PrivateKey getPrivateKey();\n+    @Nullable\n+    public abstract String getPrivateKeyPath();\n \n-    public abstract @Nullable String getOauthToken();\n+    @Nullable\n+    public abstract ValueProvider<String> getRawPrivateKey();\n \n-    public abstract @Nullable String getDatabase();\n+    @Nullable\n+    public abstract ValueProvider<String> getPrivateKeyPassphrase();\n \n-    public abstract @Nullable String getWarehouse();\n+    @Nullable\n+    public abstract ValueProvider<String> getOauthToken();\n \n-    public abstract @Nullable String getSchema();\n+    @Nullable\n+    public abstract ValueProvider<String> getDatabase();\n \n-    public abstract @Nullable String getServerName();\n+    @Nullable\n+    public abstract ValueProvider<String> getWarehouse();\n \n-    public abstract @Nullable Integer getPortNumber();\n+    @Nullable\n+    public abstract ValueProvider<String> getSchema();\n \n-    public abstract @Nullable String getRole();\n+    @Nullable\n+    public abstract ValueProvider<String> getServerName();\n \n-    public abstract @Nullable Integer getLoginTimeout();\n+    @Nullable\n+    public abstract Integer getPortNumber();\n \n-    public abstract @Nullable Boolean getSsl();\n+    @Nullable\n+    public abstract ValueProvider<String> getRole();\n \n-    public abstract @Nullable Boolean getValidate();\n+    @Nullable\n+    public abstract String getAuthenticator();\n \n-    public abstract @Nullable DataSource getDataSource();\n+    @Nullable\n+    public abstract Integer getLoginTimeout();\n+\n+    @Nullable\n+    public abstract Boolean getSsl();\n+\n+    @Nullable\n+    public abstract DataSource getDataSource();\n \n     abstract Builder builder();\n \n     @AutoValue.Builder\n     abstract static class Builder {\n       abstract Builder setUrl(String url);\n \n-      abstract Builder setUsername(String username);\n+      abstract Builder setUsername(ValueProvider<String> username);\n \n-      abstract Builder setPassword(String password);\n+      abstract Builder setPassword(ValueProvider<String> password);\n \n       abstract Builder setPrivateKey(PrivateKey privateKey);\n \n-      abstract Builder setOauthToken(String oauthToken);\n+      abstract Builder setPrivateKeyPath(String privateKeyPath);\n+\n+      abstract Builder setRawPrivateKey(ValueProvider<String> rawPrivateKey);\n+\n+      abstract Builder setPrivateKeyPassphrase(ValueProvider<String> privateKeyPassphrase);\n \n-      abstract Builder setDatabase(String database);\n+      abstract Builder setOauthToken(ValueProvider<String> oauthToken);\n \n-      abstract Builder setWarehouse(String warehouse);\n+      abstract Builder setDatabase(ValueProvider<String> database);\n \n-      abstract Builder setSchema(String schema);\n+      abstract Builder setWarehouse(ValueProvider<String> warehouse);\n \n-      abstract Builder setServerName(String serverName);\n+      abstract Builder setSchema(ValueProvider<String> schema);\n+\n+      abstract Builder setServerName(ValueProvider<String> serverName);\n \n       abstract Builder setPortNumber(Integer portNumber);\n \n-      abstract Builder setRole(String role);\n+      abstract Builder setRole(ValueProvider<String> role);\n+\n+      abstract Builder setAuthenticator(String authenticator);\n \n       abstract Builder setLoginTimeout(Integer loginTimeout);\n \n       abstract Builder setSsl(Boolean ssl);\n \n-      abstract Builder setValidate(Boolean validate);\n-\n       abstract Builder setDataSource(DataSource dataSource);\n \n       abstract DataSourceConfiguration build();\n     }\n \n+    public static DataSourceConfiguration create() {\n+      return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder().build();\n+    }\n+\n     /**\n      * Creates {@link DataSourceConfiguration} from existing instance of {@link DataSource}.\n      *\n-     * @param dataSource an instance of {@link DataSource}.\n+     * @param dataSource - an instance of {@link DataSource}.\n      */\n     public static DataSourceConfiguration create(DataSource dataSource) {\n       checkArgument(dataSource instanceof Serializable, \"dataSource must be Serializable\");\n       return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-          .setValidate(true)\n           .setDataSource(dataSource)\n           .build();\n     }\n \n     /**\n-     * Creates {@link DataSourceConfiguration} from instance of {@link SnowflakeCredentials}.\n+     * Sets username/password authentication.\n      *\n-     * @param credentials an instance of {@link SnowflakeCredentials}.\n+     * @param username - Snowflake username.\n+     * @param password - Password for provided Snowflake username.\n      */\n-    public static DataSourceConfiguration create(SnowflakeCredentials credentials) {\n-      if (credentials instanceof UsernamePasswordSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setUsername(((UsernamePasswordSnowflakeCredentials) credentials).getUsername())\n-            .setPassword(((UsernamePasswordSnowflakeCredentials) credentials).getPassword())\n-            .build();\n-      } else if (credentials instanceof OAuthTokenSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setOauthToken(((OAuthTokenSnowflakeCredentials) credentials).getToken())\n-            .build();\n-      } else if (credentials instanceof KeyPairSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setUsername(((KeyPairSnowflakeCredentials) credentials).getUsername())\n-            .setPrivateKey(((KeyPairSnowflakeCredentials) credentials).getPrivateKey())\n-            .build();\n-      }\n-      throw new IllegalArgumentException(\n-          \"Can't create DataSourceConfiguration from given credentials\");\n+    public DataSourceConfiguration withUsernamePasswordAuth(String username, String password) {\n+      return builder()\n+          .setUsername(ValueProvider.StaticValueProvider.of(username))\n+          .setPassword(ValueProvider.StaticValueProvider.of(password))\n+          .build();\n+    }\n+\n+    /**\n+     * Sets username/password authentication.\n+     *\n+     * @param username - Snowflake username.\n+     * @param password - Password for provided Snowflake username.\n+     */\n+    public DataSourceConfiguration withUsernamePasswordAuth(\n+        ValueProvider<String> username, ValueProvider<String> password) {\n+      return builder().setUsername(username).setPassword(password).build();\n+    }\n+\n+    /**\n+     * Sets OAuth authentication.\n+     *\n+     * @param token - OAuth token.\n+     */\n+    public DataSourceConfiguration withOAuth(String token) {\n+      return builder().setOauthToken(ValueProvider.StaticValueProvider.of(token)).build();\n+    }\n+\n+    /**\n+     * Sets OAuth authentication.\n+     *\n+     * @param token - OAuth token.\n+     */\n+    public DataSourceConfiguration withOAuth(ValueProvider<String> token) {\n+      return builder().setOauthToken(token).build();\n+    }\n+\n+    /**\n+     * Sets key pair authentication.\n+     *\n+     * @param username - Snowflake username.\n+     * @param privateKey - Private key.\n+     */\n+    public DataSourceConfiguration withKeyPairAuth(String username, PrivateKey privateKey) {\n+      return builder()\n+          .setUsername(ValueProvider.StaticValueProvider.of(username))\n+          .setPrivateKey(privateKey)\n+          .build();\n+    }\n+\n+    /**\n+     * Sets key pair authentication.\n+     *\n+     * @param username - Snowflake username.\n+     * @param privateKeyPath - Private key path.\n+     * @param privateKeyPassphrase - Passphrase for provided private key.\n+     */\n+    public DataSourceConfiguration withKeyPairPathAuth(\n+        ValueProvider<String> username,\n+        String privateKeyPath,\n+        ValueProvider<String> privateKeyPassphrase) {\n+      String privateKey = KeyPairUtils.readPrivateKeyFile(privateKeyPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8fb4b691c068b97c9caf265d7410580a6a922b"}, "originalPosition": 901}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5NTEwOQ==", "bodyText": "These data are sensitive, so maybe we should not show them so readily. They are part of the create job request, and also visible in the UI (by anyone who has access to the job, including support engineers). (to be fair, PipelineOptions are also visible in the UI) - are you sure it makes sense to make them display data?\nI don't have strong opinions either way, but I think it makes sense to reflect what's the best approach.", "url": "https://github.com/apache/beam/pull/12618#discussion_r481295109", "createdAt": "2020-09-01T16:57:19Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -1532,26 +1767,47 @@ public DataSource buildDatasource() {\n         SnowflakeBasicDataSource basicDataSource = new SnowflakeBasicDataSource();\n         basicDataSource.setUrl(buildUrl());\n \n-        if (getUsername() != null) {\n-          basicDataSource.setUser(getUsername());\n+        if (isNotEmpty(getOauthToken())) {\n+          basicDataSource.setOauthToken(getOauthToken().get());\n+        } else if (isNotEmpty(getUsername()) && getPrivateKey() != null) {\n+          basicDataSource.setUser(getUsername().get());\n+          basicDataSource.setPrivateKey(getPrivateKey());\n+        } else if (isNotEmpty(getUsername())\n+            && isNotEmpty(getPrivateKeyPassphrase())\n+            && isNotEmpty(getRawPrivateKey())) {\n+          PrivateKey privateKey =\n+              KeyPairUtils.preparePrivateKey(\n+                  getRawPrivateKey().get(), getPrivateKeyPassphrase().get());\n+          basicDataSource.setPrivateKey(privateKey);\n+          basicDataSource.setUser(getUsername().get());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8fb4b691c068b97c9caf265d7410580a6a922b"}, "originalPosition": 1084}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5ODU4Nw==", "bodyText": "populateDisplayData is called at pipeline construction time. Since you're adding support for ValueProviders, you're enabling users to fill in the data for their credentials AFTER construction time. Imagine you're building a template. In that case, none of the credentials will be known.\nTherefore, I think you likely don't want to throw this exception.", "url": "https://github.com/apache/beam/pull/12618#discussion_r481298587", "createdAt": "2020-09-01T17:03:16Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -1532,26 +1767,47 @@ public DataSource buildDatasource() {\n         SnowflakeBasicDataSource basicDataSource = new SnowflakeBasicDataSource();\n         basicDataSource.setUrl(buildUrl());\n \n-        if (getUsername() != null) {\n-          basicDataSource.setUser(getUsername());\n+        if (isNotEmpty(getOauthToken())) {\n+          basicDataSource.setOauthToken(getOauthToken().get());\n+        } else if (isNotEmpty(getUsername()) && getPrivateKey() != null) {\n+          basicDataSource.setUser(getUsername().get());\n+          basicDataSource.setPrivateKey(getPrivateKey());\n+        } else if (isNotEmpty(getUsername())\n+            && isNotEmpty(getPrivateKeyPassphrase())\n+            && isNotEmpty(getRawPrivateKey())) {\n+          PrivateKey privateKey =\n+              KeyPairUtils.preparePrivateKey(\n+                  getRawPrivateKey().get(), getPrivateKeyPassphrase().get());\n+          basicDataSource.setPrivateKey(privateKey);\n+          basicDataSource.setUser(getUsername().get());\n+\n+        } else if (isNotEmpty(getUsername()) && isNotEmpty(getPassword())) {\n+          basicDataSource.setUser(getUsername().get());\n+          basicDataSource.setPassword(getPassword().get());\n+        } else {\n+          throw new RuntimeException(\"Missing credentials values. Please check your credentials\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8fb4b691c068b97c9caf265d7410580a6a922b"}, "originalPosition": 1089}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwMTU3Mg==", "bodyText": "I see you're using this method at pipeline construction time. Note that for RuntimeValueProviders, they will throw an exception when you ccall get on them at construction time.\nThe documentation is poor, but it'll throw IllegalStateException - so you also need to call valueProvider.isAccessible() before calling get on it. - and if it's not yet accessible, then that does not mean it's empty or not. It just means that we'll know later whether it's empty.\nVP javadoc: https://beam.apache.org/releases/javadoc/2.23.0/org/apache/beam/sdk/options/ValueProvider.html\nI hope I did not confuse you more here : )", "url": "https://github.com/apache/beam/pull/12618#discussion_r481301572", "createdAt": "2020-09-01T17:08:36Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -1623,4 +1867,12 @@ public DataSourceConfiguration getConfig() {\n       return this.config;\n     }\n   }\n+\n+  private static String getValueOrNull(ValueProvider<String> valueProvider) {\n+    return valueProvider != null ? valueProvider.get() : null;\n+  }\n+\n+  private static boolean isNotEmpty(ValueProvider<String> valueProvider) {\n+    return valueProvider != null && valueProvider.get() != null && !valueProvider.get().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8fb4b691c068b97c9caf265d7410580a6a922b"}, "originalPosition": 1172}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d043840746e9025f7979a2c644ab7af11d28a2c", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/0d043840746e9025f7979a2c644ab7af11d28a2c", "committedDate": "2020-09-02T10:51:32Z", "message": "refactor: isNotEmpty method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9828997a5192eba7a721cee8beb958ef70fe5018", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/9828997a5192eba7a721cee8beb958ef70fe5018", "committedDate": "2020-09-02T12:46:22Z", "message": "Merge branch 'master' of https://github.com/apache/beam into support-templates-in-snowflakeio"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e154ba75ce1ee029d8d596a8482c44d30d70c368", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/e154ba75ce1ee029d8d596a8482c44d30d70c368", "committedDate": "2020-09-02T12:16:24Z", "message": "Merge branch 'master' of https://github.com/apache/beam into support-templates-in-snowflakeio"}, "afterCommit": {"oid": "9828997a5192eba7a721cee8beb958ef70fe5018", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/9828997a5192eba7a721cee8beb958ef70fe5018", "committedDate": "2020-09-02T12:46:22Z", "message": "Merge branch 'master' of https://github.com/apache/beam into support-templates-in-snowflakeio"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}