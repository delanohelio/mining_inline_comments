{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3Mjg2MTk3", "number": 11286, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MTozNlrODuCmhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MzoyNVrODuCpdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjAzNzE4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MTozNlrOF_0VZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxMjozOVrOF_3lfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjA1Mw==", "bodyText": "I think you missed adding your monitoring_infos changes.", "url": "https://github.com/apache/beam/pull/11286#discussion_r402462053", "createdAt": "2020-04-02T16:51:36Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -76,6 +79,50 @@\n DEFAULT_BUNDLE_PROCESSOR_CACHE_SHUTDOWN_THRESHOLD_S = 60\n \n \n+class ShortIdCache(object):\n+  \"\"\" Cache for MonitoringInfo \"short ids\"\n+  \"\"\"\n+  def __init__(self):\n+    self._lock = threading.Lock()\n+    self._lastShortId = 0\n+    self._infoKeyToShortId = {}  # type: Dict[FrozenSet, str]\n+    self._shortIdToInfo = {}  # type: Dict[str, metrics_pb2.MonitoringInfo]\n+\n+  def getShortId(self, monitoring_info):\n+    \"\"\" Returns the assigned shortId for a given MonitoringInfo, assigns one if\n+    not assigned already.\n+    \"\"\"\n+    # type: (metrics_pb2.MonitoringInfo) -> str\n+    with self._lock:\n+      key = monitoring_infos.to_key(monitoring_info)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e59e22d56debc4eb857dd009db46ce41f209d5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NjYyMQ==", "bodyText": "This function exists already: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/metrics/monitoring_infos.py#L329-L338", "url": "https://github.com/apache/beam/pull/11286#discussion_r402466621", "createdAt": "2020-04-02T16:58:36Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -76,6 +79,50 @@\n DEFAULT_BUNDLE_PROCESSOR_CACHE_SHUTDOWN_THRESHOLD_S = 60\n \n \n+class ShortIdCache(object):\n+  \"\"\" Cache for MonitoringInfo \"short ids\"\n+  \"\"\"\n+  def __init__(self):\n+    self._lock = threading.Lock()\n+    self._lastShortId = 0\n+    self._infoKeyToShortId = {}  # type: Dict[FrozenSet, str]\n+    self._shortIdToInfo = {}  # type: Dict[str, metrics_pb2.MonitoringInfo]\n+\n+  def getShortId(self, monitoring_info):\n+    \"\"\" Returns the assigned shortId for a given MonitoringInfo, assigns one if\n+    not assigned already.\n+    \"\"\"\n+    # type: (metrics_pb2.MonitoringInfo) -> str\n+    with self._lock:\n+      key = monitoring_infos.to_key(monitoring_info)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjA1Mw=="}, "originalCommit": {"oid": "11e59e22d56debc4eb857dd009db46ce41f209d5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNTMyNA==", "bodyText": "yup and I was editing that code a week ago", "url": "https://github.com/apache/beam/pull/11286#discussion_r402515324", "createdAt": "2020-04-02T18:12:39Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -76,6 +79,50 @@\n DEFAULT_BUNDLE_PROCESSOR_CACHE_SHUTDOWN_THRESHOLD_S = 60\n \n \n+class ShortIdCache(object):\n+  \"\"\" Cache for MonitoringInfo \"short ids\"\n+  \"\"\"\n+  def __init__(self):\n+    self._lock = threading.Lock()\n+    self._lastShortId = 0\n+    self._infoKeyToShortId = {}  # type: Dict[FrozenSet, str]\n+    self._shortIdToInfo = {}  # type: Dict[str, metrics_pb2.MonitoringInfo]\n+\n+  def getShortId(self, monitoring_info):\n+    \"\"\" Returns the assigned shortId for a given MonitoringInfo, assigns one if\n+    not assigned already.\n+    \"\"\"\n+    # type: (metrics_pb2.MonitoringInfo) -> str\n+    with self._lock:\n+      key = monitoring_infos.to_key(monitoring_info)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjA1Mw=="}, "originalCommit": {"oid": "11e59e22d56debc4eb857dd009db46ce41f209d5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjA0NDcxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MzoyNVrOF_0Z7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MzoyNVrOF_0Z7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                with self._lock:\n          \n          \n            \n                  key = monitoring_infos.to_key(monitoring_info)\n          \n          \n            \n                key = monitoring_infos.to_key(monitoring_info)\n          \n          \n            \n                with self._lock:", "url": "https://github.com/apache/beam/pull/11286#discussion_r402463213", "createdAt": "2020-04-02T16:53:25Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -76,6 +79,50 @@\n DEFAULT_BUNDLE_PROCESSOR_CACHE_SHUTDOWN_THRESHOLD_S = 60\n \n \n+class ShortIdCache(object):\n+  \"\"\" Cache for MonitoringInfo \"short ids\"\n+  \"\"\"\n+  def __init__(self):\n+    self._lock = threading.Lock()\n+    self._lastShortId = 0\n+    self._infoKeyToShortId = {}  # type: Dict[FrozenSet, str]\n+    self._shortIdToInfo = {}  # type: Dict[str, metrics_pb2.MonitoringInfo]\n+\n+  def getShortId(self, monitoring_info):\n+    \"\"\" Returns the assigned shortId for a given MonitoringInfo, assigns one if\n+    not assigned already.\n+    \"\"\"\n+    # type: (metrics_pb2.MonitoringInfo) -> str\n+    with self._lock:\n+      key = monitoring_infos.to_key(monitoring_info)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e59e22d56debc4eb857dd009db46ce41f209d5"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1605, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}