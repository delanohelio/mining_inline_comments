{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTM4NzIy", "number": 12427, "title": "[BEAM-2855] nexmark python suite implement queries 0, 1, 2 and 9", "bodyText": "changed queries 0-2, implemented query9, coders for all models, new models for query results, changed launcher to count and print results to file\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-30T19:41:28Z", "url": "https://github.com/apache/beam/pull/12427", "merged": true, "mergeCommit": {"oid": "a098130ae4a7d108ccacc346405ec9e03b94052e"}, "closed": true, "closedAt": "2020-08-13T19:19:27Z", "author": {"login": "leiyiz"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc381vNgH2gAyNDU5NTM4NzIyOjAzYzhjYzljNDU2ZTU0MDBhYzkzZjdhY2I1MDEzNmFiOTBiYjIzZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-PU6IAH2gAyNDU5NTM4NzIyOjg1ZThiMjhkZGRhNzExNzRlOTkyNGYxMjYyNjRkY2ZiNmU3NjQyODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "03c8cc9c456e5400ac93f7acb50136ab90bb23d7", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/03c8cc9c456e5400ac93f7acb50136ab90bb23d7", "committedDate": "2020-07-24T05:04:55Z", "message": "changed parser and serialization code to use the same json format to represent models, added auctionprice model and corrected the behavior of query2, corrected the behavior of query 0 and 1 to align with the nexmark specification. created fieldname file to map the fieldname with string literals. created nexmark_query_util to put transforms that gets reused across different queries."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ede1d6121e9042f2b9aad97f8221647ede2c244", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/9ede1d6121e9042f2b9aad97f8221647ede2c244", "committedDate": "2020-07-24T05:11:08Z", "message": "Merge branch 'master' of https://github.com/apache/beam into nexmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff865ef882be9d8a06f7f4a494b0cad501bbeafd", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/ff865ef882be9d8a06f7f4a494b0cad501bbeafd", "committedDate": "2020-07-24T17:33:18Z", "message": "changed repr and aligned code style.\nChanged repr for all models to eliminate spaces in their json string representation; aligned code style for some files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b5f6ce6af834e1832b315661d162b8b2d51370f", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/5b5f6ce6af834e1832b315661d162b8b2d51370f", "committedDate": "2020-07-28T07:54:17Z", "message": "refactoring code to have a better code practice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6002dc3a73874088326f45a7cb084b795fa037d", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/d6002dc3a73874088326f45a7cb084b795fa037d", "committedDate": "2020-07-28T22:27:01Z", "message": "implemented coder for all models, query9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fbf968b80f96f77dbcef4f9246e1b1e34f941bc", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/1fbf968b80f96f77dbcef4f9246e1b1e34f941bc", "committedDate": "2020-07-28T23:59:11Z", "message": "yapf style, implemented query0 to use the coder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37add17a70ce74955a9b2ef24c50fcc84ac5de07", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/37add17a70ce74955a9b2ef24c50fcc84ac5de07", "committedDate": "2020-07-29T00:01:11Z", "message": "yapf style change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1110ec9fe56f6f1a0233647bd64277da43cb5023", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/1110ec9fe56f6f1a0233647bd64277da43cb5023", "committedDate": "2020-07-29T23:53:26Z", "message": "naming changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0129cd6b4cddc3e263f22f627f004068c99cf87b", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/0129cd6b4cddc3e263f22f627f004068c99cf87b", "committedDate": "2020-07-30T00:01:49Z", "message": "nexmark launcher deserialization, timestamping and result counting and printing to file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7420cb489d6d06ea34752b257d45ade8b95ed36a", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/7420cb489d6d06ea34752b257d45ade8b95ed36a", "committedDate": "2020-07-30T19:11:21Z", "message": "pylint style changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2ae8233ef92a68ed45b299809c4b10817ea2cd8", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/e2ae8233ef92a68ed45b299809c4b10817ea2cd8", "committedDate": "2020-07-30T19:19:44Z", "message": "Merge branch 'master' of https://github.com/apache/beam into nexmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/07896c96511eb55f07d5bd607a38284a55f7cf76", "committedDate": "2020-07-30T21:17:38Z", "message": "fieldname changes to comply with python convention"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Nzc0MTA3", "url": "https://github.com/apache/beam/pull/12427#pullrequestreview-458774107", "createdAt": "2020-07-30T21:37:11Z", "commit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTozNzoxMlrOG50ttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo1NzozOFrOG6Syzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NTY4Nw==", "bodyText": "cls doesn't use snake case.", "url": "https://github.com/apache/beam/pull/12427#discussion_r463285687", "createdAt": "2020-07-30T21:37:12Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/query0.py", "diffHunk": "@@ -30,8 +30,17 @@\n from __future__ import absolute_import\n \n import apache_beam as beam\n-from apache_beam.testing.benchmarks.nexmark.nexmark_util import ParseEventFn\n \n \n-def load(raw_events, query_args=None):\n-  return raw_events | 'ParseEventFn' >> beam.ParDo(ParseEventFn())  # pylint: disable=expression-not-assigned\n+class round_tripFn(beam.DoFn):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NjgyNA==", "bodyText": "is this function necessary?", "url": "https://github.com/apache/beam/pull/12427#discussion_r463286824", "createdAt": "2020-07-30T21:39:40Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/winning_bids.py", "diffHunk": "@@ -0,0 +1,183 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import apache_beam as beam\n+from apache_beam.coders import coder_impl\n+from apache_beam.coders.coders import FastCoder\n+from apache_beam.transforms.window import WindowFn\n+from apache_beam.transforms.window import IntervalWindow\n+from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n+from apache_beam.testing.benchmarks.nexmark.models import auction_bid\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n+\n+\n+class AuctionOrBidWindow(IntervalWindow):\n+  \"\"\"Windows for open auctions and bids.\"\"\"\n+  def __init__(self, start, end, auction_id, is_auction_window):\n+    super(AuctionOrBidWindow, self).__init__(start, end)\n+    self.auction = auction_id\n+    self.is_auction_window = is_auction_window\n+\n+  @staticmethod\n+  def for_auction(timestamp, auction: nexmark_model.Auction):\n+    return AuctionOrBidWindow(timestamp, auction.expires, auction.id, True)\n+\n+  @staticmethod\n+  def for_bid(expected_duration_micro, timestamp, bid: nexmark_model.Bid):\n+    return AuctionOrBidWindow(\n+        timestamp, timestamp + expected_duration_micro * 2, bid.auction, False)\n+\n+  def is_auction_window_fn(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2MzU0MQ==", "bodyText": "why we need to override and pass here?", "url": "https://github.com/apache/beam/pull/12427#discussion_r463763541", "createdAt": "2020-07-31T18:23:36Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/models/nexmark_model.py", "diffHunk": "@@ -26,31 +26,55 @@\n   - The bid on an item for auction (Bid).\n \n \"\"\"\n+from apache_beam.coders import coder_impl\n+from apache_beam.coders.coders import FastCoder\n+from apache_beam.coders.coders import StrUtf8Coder\n+from apache_beam.testing.benchmarks.nexmark import nexmark_util\n+\n+\n+class PersonCoder(FastCoder):\n+  def _create_impl(self):\n+    return PersonCoderImpl()\n+\n+  def is_deterministic(self):\n+    # type: () -> bool\n+    return True\n \n \n class Person(object):\n   \"Author of an auction or a bid.\"\n+  CODER = PersonCoder()\n \n   def __init__(\n-      self, id, name, email, credit_card, city, state, timestamp, extra=None):\n+      self, id, name, email, credit_card, city, state, date_time, extra=None):\n     self.id = id\n     self.name = name\n-    self.email = email  # key\n+    self.email_address = email  # key\n     self.credit_card = credit_card\n     self.city = city\n     self.state = state\n-    self.timestamp = timestamp\n+    self.date_time = date_time\n     self.extra = extra\n \n   def __repr__(self):\n-    return 'Person({id}, {email})'.format(\n-        **{\n-            'id': self.id, 'email': self.email\n-        })\n+    return nexmark_util.model_to_json(self)\n+\n+\n+class AuctionCoder(FastCoder):\n+  def to_type_hint(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2NDE4OA==", "bodyText": "I think this shouldn't be commented out.", "url": "https://github.com/apache/beam/pull/12427#discussion_r463764188", "createdAt": "2020-07-31T18:24:56Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/nexmark_launcher.py", "diffHunk": "@@ -263,4 +279,4 @@ def run(self):\n if __name__ == '__main__':\n   launcher = NexmarkLauncher()\n   launcher.run()\n-  launcher.cleanup()\n+  # launcher.cleanup()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2Njc0NQ==", "bodyText": "I think you can simply pass the micro converted from millis to Timestamp", "url": "https://github.com/apache/beam/pull/12427#discussion_r463766745", "createdAt": "2020-07-31T18:30:30Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/nexmark_util.py", "diffHunk": "@@ -103,6 +121,108 @@ def process(self, elem):\n     yield event\n \n \n+class ParseJsonEvnetFn(beam.DoFn):\n+  \"\"\"Parses the raw event info into a Python objects.\n+\n+  Each event line has the following format:\n+\n+    person: {id,name,email,credit_card,city, \\\n+                          state,timestamp,extra}\n+    auction: {id,item_name, description,initial_bid, \\\n+                          reserve_price,timestamp,expires,seller,category,extra}\n+    bid: {auction,bidder,price,timestamp,extra}\n+\n+  For example:\n+\n+    {\"id\":1000,\"name\":\"Peter Jones\",\"emailAddress\":\"nhd@xcat.com\",\\\n+        \"creditCard\":\"7241 7320 9143 4888\",\"city\":\"Portland\",\"state\":\"WY\",\\\n+        \"dateTime\":1528098831026,\\\"extra\":\"WN_HS_bnpVQ\\\\[[\"}\n+\n+    {\"id\":1000,\"itemName\":\"wkx mgee\",\"description\":\"eszpqxtdxrvwmmywkmogoahf\",\\\n+        \"initialBid\":28873,\"reserve\":29448,\"dateTime\":1528098831036,\\\n+        \"expires\":1528098840451,\"seller\":1000,\"category\":13,\"extra\":\"zcuupiz\"}\n+\n+    {\"auction\":1000,\"bidder\":1001,\"price\":32530001,\"dateTime\":1528098831066,\\\n+        \"extra\":\"fdiysaV^]NLVsbolvyqwgticfdrwdyiyofWPYTOuwogvszlxjrcNOORM\"}\n+  \"\"\"\n+  def process(self, elem):\n+    json_dict = json.loads(elem)\n+    if type(json_dict[FieldNames.DATE_TIME]) is dict:\n+      json_dict[FieldNames.DATE_TIME] = json_dict[\n+          FieldNames.DATE_TIME]['millis']\n+    if FieldNames.NAME in json_dict:\n+      yield nexmark_model.Person(\n+          json_dict[FieldNames.ID],\n+          json_dict[FieldNames.NAME],\n+          json_dict[FieldNames.EMAIL_ADDRESS],\n+          json_dict[FieldNames.CREDIT_CARD],\n+          json_dict[FieldNames.CITY],\n+          json_dict[FieldNames.STATE],\n+          millis_to_timestamp(json_dict[FieldNames.DATE_TIME]),\n+          json_dict[FieldNames.EXTRA])\n+    elif FieldNames.ITEM_NAME in json_dict:\n+      if type(json_dict[FieldNames.EXPIRES]) is dict:\n+        json_dict[FieldNames.EXPIRES] = json_dict[FieldNames.EXPIRES]['millis']\n+      yield nexmark_model.Auction(\n+          json_dict[FieldNames.ID],\n+          json_dict[FieldNames.ITEM_NAME],\n+          json_dict[FieldNames.DESCRIPTION],\n+          json_dict[FieldNames.INITIAL_BID],\n+          json_dict[FieldNames.RESERVE],\n+          millis_to_timestamp(json_dict[FieldNames.DATE_TIME]),\n+          millis_to_timestamp(json_dict[FieldNames.EXPIRES]),\n+          json_dict[FieldNames.SELLER],\n+          json_dict[FieldNames.CATEGORY],\n+          json_dict[FieldNames.EXTRA])\n+    elif FieldNames.AUCTION in json_dict:\n+      yield nexmark_model.Bid(\n+          json_dict[FieldNames.AUCTION],\n+          json_dict[FieldNames.BIDDER],\n+          json_dict[FieldNames.PRICE],\n+          millis_to_timestamp(json_dict[FieldNames.DATE_TIME]),\n+          json_dict[FieldNames.EXTRA])\n+    else:\n+      raise ValueError('Invalid event: %s.' % str(json_dict))\n+\n+\n+class CountAndLog(beam.PTransform):\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | 'window' >> beam.WindowInto(window.GlobalWindows())\n+        | \"Count\" >> beam.combiners.Count.Globally()\n+        | \"Log\" >> beam.Map(log_count_info))\n+\n+\n+def log_count_info(count):\n+  logging.info('Query resulted in %d results', count)\n+  return count\n+\n+\n def display(elm):\n   logging.debug(elm)\n   return elm\n+\n+\n+def model_to_json(model):\n+  return json.dumps(construct_json_dict(model), separators=(',', ':'))\n+\n+\n+def construct_json_dict(model):\n+  return {k: unnest_to_json(v) for k, v in model.__dict__.items()}\n+\n+\n+def unnest_to_json(cand):\n+  if isinstance(cand, Timestamp):\n+    return cand.micros // 1000\n+  elif isinstance(\n+      cand, (nexmark_model.Auction, nexmark_model.Bid, nexmark_model.Person)):\n+    return construct_json_dict(cand)\n+  else:\n+    return cand\n+\n+\n+def millis_to_timestamp(millis: int):\n+  second = millis // 1000\n+  micro_second = millis % 1000 * 1000\n+  return Timestamp(second, micro_second)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MDkxNw==", "bodyText": "I think you need to be careful here, if timestamp is Timestamp type and expected_duration_micro is int, + will try to convert expected_duration_micro * 2 with Duration.of(expected_duration_micro * 2), which by default treat the expected_duration_micro * 2 as seconds value. You probably want to do something like timestamp + Duration(micros=expected_duration_micro * 2).", "url": "https://github.com/apache/beam/pull/12427#discussion_r463770917", "createdAt": "2020-07-31T18:40:08Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/winning_bids.py", "diffHunk": "@@ -0,0 +1,183 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import apache_beam as beam\n+from apache_beam.coders import coder_impl\n+from apache_beam.coders.coders import FastCoder\n+from apache_beam.transforms.window import WindowFn\n+from apache_beam.transforms.window import IntervalWindow\n+from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n+from apache_beam.testing.benchmarks.nexmark.models import auction_bid\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n+\n+\n+class AuctionOrBidWindow(IntervalWindow):\n+  \"\"\"Windows for open auctions and bids.\"\"\"\n+  def __init__(self, start, end, auction_id, is_auction_window):\n+    super(AuctionOrBidWindow, self).__init__(start, end)\n+    self.auction = auction_id\n+    self.is_auction_window = is_auction_window\n+\n+  @staticmethod\n+  def for_auction(timestamp, auction: nexmark_model.Auction):\n+    return AuctionOrBidWindow(timestamp, auction.expires, auction.id, True)\n+\n+  @staticmethod\n+  def for_bid(expected_duration_micro, timestamp, bid: nexmark_model.Bid):\n+    return AuctionOrBidWindow(\n+        timestamp, timestamp + expected_duration_micro * 2, bid.auction, False)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MjI3NA==", "bodyText": "nit: rename to auction_id_to_auction_window, auction_id_to_bid_window.", "url": "https://github.com/apache/beam/pull/12427#discussion_r463772274", "createdAt": "2020-07-31T18:43:17Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/winning_bids.py", "diffHunk": "@@ -0,0 +1,183 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import apache_beam as beam\n+from apache_beam.coders import coder_impl\n+from apache_beam.coders.coders import FastCoder\n+from apache_beam.transforms.window import WindowFn\n+from apache_beam.transforms.window import IntervalWindow\n+from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n+from apache_beam.testing.benchmarks.nexmark.models import auction_bid\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n+\n+\n+class AuctionOrBidWindow(IntervalWindow):\n+  \"\"\"Windows for open auctions and bids.\"\"\"\n+  def __init__(self, start, end, auction_id, is_auction_window):\n+    super(AuctionOrBidWindow, self).__init__(start, end)\n+    self.auction = auction_id\n+    self.is_auction_window = is_auction_window\n+\n+  @staticmethod\n+  def for_auction(timestamp, auction: nexmark_model.Auction):\n+    return AuctionOrBidWindow(timestamp, auction.expires, auction.id, True)\n+\n+  @staticmethod\n+  def for_bid(expected_duration_micro, timestamp, bid: nexmark_model.Bid):\n+    return AuctionOrBidWindow(\n+        timestamp, timestamp + expected_duration_micro * 2, bid.auction, False)\n+\n+  def is_auction_window_fn(self):\n+    return self.is_auction_window\n+\n+  def __str__(self):\n+    return (\n+        'AuctionOrBidWindow{start:%s; end:%s; auction:%d; isAuctionWindow:%s}' %\n+        (self.start, self.end, self.auction, self.is_auction_window))\n+\n+\n+class AuctionOrBidWindowCoder(FastCoder):\n+  def _create_impl(self):\n+    return AuctionOrBidWindowCoderImpl()\n+\n+  def is_deterministic(self):\n+    # type: () -> bool\n+    return True\n+\n+\n+class AuctionOrBidWindowCoderImpl(coder_impl.StreamCoderImpl):\n+  _super_coder_impl = coder_impl.IntervalWindowCoderImpl()\n+  _id_coder_impl = coder_impl.VarIntCoderImpl()\n+  _bool_coder_impl = coder_impl.BooleanCoderImpl()\n+\n+  def encode_to_stream(self, value: AuctionOrBidWindow, stream, nested):\n+    self._super_coder_impl.encode_to_stream(value, stream, True)\n+    self._id_coder_impl.encode_to_stream(value.auction, stream, True)\n+    self._bool_coder_impl.encode_to_stream(\n+        value.is_auction_window, stream, True)\n+\n+  def decode_from_stream(self, stream, nested):\n+    super_window = self._super_coder_impl.decode_from_stream(stream, True)\n+    auction = self._id_coder_impl.decode_from_stream(stream, True)\n+    is_auction = self._bool_coder_impl.decode_from_stream(stream, True)\n+    return AuctionOrBidWindow(\n+        super_window.start, super_window.end, auction, is_auction)\n+\n+\n+class AuctionOrBidWindowFn(WindowFn):\n+  def __init__(self, expected_duration_micro):\n+    self.expected_duration = expected_duration_micro\n+\n+  def assign(self, assign_context):\n+    event = assign_context.element\n+    if isinstance(event, nexmark_model.Auction):\n+      return [AuctionOrBidWindow.for_auction(assign_context.timestamp, event)]\n+    elif isinstance(event, nexmark_model.Bid):\n+      return [\n+          AuctionOrBidWindow.for_bid(\n+              self.expected_duration, assign_context.timestamp, event)\n+      ]\n+    else:\n+      raise ValueError(\n+          '%s can only assign windows to auctions and bids, but received %s' %\n+          (self.__class__.__name__, event))\n+\n+  def merge(self, merge_context):\n+    id_to_auction = {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MjQxOA==", "bodyText": "nit: you can do\nif window.auction not in id_to_bid:\n  id_to_bid[window.auction] = []\nid_to_bid[window.auction].append(window)", "url": "https://github.com/apache/beam/pull/12427#discussion_r463772418", "createdAt": "2020-07-31T18:43:39Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/winning_bids.py", "diffHunk": "@@ -0,0 +1,183 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import apache_beam as beam\n+from apache_beam.coders import coder_impl\n+from apache_beam.coders.coders import FastCoder\n+from apache_beam.transforms.window import WindowFn\n+from apache_beam.transforms.window import IntervalWindow\n+from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n+from apache_beam.testing.benchmarks.nexmark.models import auction_bid\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n+\n+\n+class AuctionOrBidWindow(IntervalWindow):\n+  \"\"\"Windows for open auctions and bids.\"\"\"\n+  def __init__(self, start, end, auction_id, is_auction_window):\n+    super(AuctionOrBidWindow, self).__init__(start, end)\n+    self.auction = auction_id\n+    self.is_auction_window = is_auction_window\n+\n+  @staticmethod\n+  def for_auction(timestamp, auction: nexmark_model.Auction):\n+    return AuctionOrBidWindow(timestamp, auction.expires, auction.id, True)\n+\n+  @staticmethod\n+  def for_bid(expected_duration_micro, timestamp, bid: nexmark_model.Bid):\n+    return AuctionOrBidWindow(\n+        timestamp, timestamp + expected_duration_micro * 2, bid.auction, False)\n+\n+  def is_auction_window_fn(self):\n+    return self.is_auction_window\n+\n+  def __str__(self):\n+    return (\n+        'AuctionOrBidWindow{start:%s; end:%s; auction:%d; isAuctionWindow:%s}' %\n+        (self.start, self.end, self.auction, self.is_auction_window))\n+\n+\n+class AuctionOrBidWindowCoder(FastCoder):\n+  def _create_impl(self):\n+    return AuctionOrBidWindowCoderImpl()\n+\n+  def is_deterministic(self):\n+    # type: () -> bool\n+    return True\n+\n+\n+class AuctionOrBidWindowCoderImpl(coder_impl.StreamCoderImpl):\n+  _super_coder_impl = coder_impl.IntervalWindowCoderImpl()\n+  _id_coder_impl = coder_impl.VarIntCoderImpl()\n+  _bool_coder_impl = coder_impl.BooleanCoderImpl()\n+\n+  def encode_to_stream(self, value: AuctionOrBidWindow, stream, nested):\n+    self._super_coder_impl.encode_to_stream(value, stream, True)\n+    self._id_coder_impl.encode_to_stream(value.auction, stream, True)\n+    self._bool_coder_impl.encode_to_stream(\n+        value.is_auction_window, stream, True)\n+\n+  def decode_from_stream(self, stream, nested):\n+    super_window = self._super_coder_impl.decode_from_stream(stream, True)\n+    auction = self._id_coder_impl.decode_from_stream(stream, True)\n+    is_auction = self._bool_coder_impl.decode_from_stream(stream, True)\n+    return AuctionOrBidWindow(\n+        super_window.start, super_window.end, auction, is_auction)\n+\n+\n+class AuctionOrBidWindowFn(WindowFn):\n+  def __init__(self, expected_duration_micro):\n+    self.expected_duration = expected_duration_micro\n+\n+  def assign(self, assign_context):\n+    event = assign_context.element\n+    if isinstance(event, nexmark_model.Auction):\n+      return [AuctionOrBidWindow.for_auction(assign_context.timestamp, event)]\n+    elif isinstance(event, nexmark_model.Bid):\n+      return [\n+          AuctionOrBidWindow.for_bid(\n+              self.expected_duration, assign_context.timestamp, event)\n+      ]\n+    else:\n+      raise ValueError(\n+          '%s can only assign windows to auctions and bids, but received %s' %\n+          (self.__class__.__name__, event))\n+\n+  def merge(self, merge_context):\n+    id_to_auction = {}\n+    id_to_bid = {}\n+    for window in merge_context.windows:\n+      if window.is_auction_window_fn():\n+        id_to_auction[window.auction] = window\n+      else:\n+        if window.auction in id_to_bid:\n+          bid_windows = id_to_bid[window.auction]\n+        else:\n+          bid_windows = []\n+          id_to_bid[window.auction] = bid_windows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3ODUxMQ==", "bodyText": "if best_bid:\n  yield ...", "url": "https://github.com/apache/beam/pull/12427#discussion_r463778511", "createdAt": "2020-07-31T18:57:38Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/winning_bids.py", "diffHunk": "@@ -0,0 +1,183 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import apache_beam as beam\n+from apache_beam.coders import coder_impl\n+from apache_beam.coders.coders import FastCoder\n+from apache_beam.transforms.window import WindowFn\n+from apache_beam.transforms.window import IntervalWindow\n+from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n+from apache_beam.testing.benchmarks.nexmark.models import auction_bid\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n+\n+\n+class AuctionOrBidWindow(IntervalWindow):\n+  \"\"\"Windows for open auctions and bids.\"\"\"\n+  def __init__(self, start, end, auction_id, is_auction_window):\n+    super(AuctionOrBidWindow, self).__init__(start, end)\n+    self.auction = auction_id\n+    self.is_auction_window = is_auction_window\n+\n+  @staticmethod\n+  def for_auction(timestamp, auction: nexmark_model.Auction):\n+    return AuctionOrBidWindow(timestamp, auction.expires, auction.id, True)\n+\n+  @staticmethod\n+  def for_bid(expected_duration_micro, timestamp, bid: nexmark_model.Bid):\n+    return AuctionOrBidWindow(\n+        timestamp, timestamp + expected_duration_micro * 2, bid.auction, False)\n+\n+  def is_auction_window_fn(self):\n+    return self.is_auction_window\n+\n+  def __str__(self):\n+    return (\n+        'AuctionOrBidWindow{start:%s; end:%s; auction:%d; isAuctionWindow:%s}' %\n+        (self.start, self.end, self.auction, self.is_auction_window))\n+\n+\n+class AuctionOrBidWindowCoder(FastCoder):\n+  def _create_impl(self):\n+    return AuctionOrBidWindowCoderImpl()\n+\n+  def is_deterministic(self):\n+    # type: () -> bool\n+    return True\n+\n+\n+class AuctionOrBidWindowCoderImpl(coder_impl.StreamCoderImpl):\n+  _super_coder_impl = coder_impl.IntervalWindowCoderImpl()\n+  _id_coder_impl = coder_impl.VarIntCoderImpl()\n+  _bool_coder_impl = coder_impl.BooleanCoderImpl()\n+\n+  def encode_to_stream(self, value: AuctionOrBidWindow, stream, nested):\n+    self._super_coder_impl.encode_to_stream(value, stream, True)\n+    self._id_coder_impl.encode_to_stream(value.auction, stream, True)\n+    self._bool_coder_impl.encode_to_stream(\n+        value.is_auction_window, stream, True)\n+\n+  def decode_from_stream(self, stream, nested):\n+    super_window = self._super_coder_impl.decode_from_stream(stream, True)\n+    auction = self._id_coder_impl.decode_from_stream(stream, True)\n+    is_auction = self._bool_coder_impl.decode_from_stream(stream, True)\n+    return AuctionOrBidWindow(\n+        super_window.start, super_window.end, auction, is_auction)\n+\n+\n+class AuctionOrBidWindowFn(WindowFn):\n+  def __init__(self, expected_duration_micro):\n+    self.expected_duration = expected_duration_micro\n+\n+  def assign(self, assign_context):\n+    event = assign_context.element\n+    if isinstance(event, nexmark_model.Auction):\n+      return [AuctionOrBidWindow.for_auction(assign_context.timestamp, event)]\n+    elif isinstance(event, nexmark_model.Bid):\n+      return [\n+          AuctionOrBidWindow.for_bid(\n+              self.expected_duration, assign_context.timestamp, event)\n+      ]\n+    else:\n+      raise ValueError(\n+          '%s can only assign windows to auctions and bids, but received %s' %\n+          (self.__class__.__name__, event))\n+\n+  def merge(self, merge_context):\n+    id_to_auction = {}\n+    id_to_bid = {}\n+    for window in merge_context.windows:\n+      if window.is_auction_window_fn():\n+        id_to_auction[window.auction] = window\n+      else:\n+        if window.auction in id_to_bid:\n+          bid_windows = id_to_bid[window.auction]\n+        else:\n+          bid_windows = []\n+          id_to_bid[window.auction] = bid_windows\n+        bid_windows.append(window)\n+\n+    for auction, auction_window in id_to_auction.items():\n+      bid_window_list = id_to_bid.get(auction)\n+      if bid_window_list is not None:\n+        to_merge = []\n+        for bid_window in bid_window_list:\n+          if bid_window.start < auction_window.end:\n+            to_merge.append(bid_window)\n+        if len(to_merge) > 0:\n+          to_merge.append(auction_window)\n+          merge_context.merge(to_merge, auction_window)\n+\n+  def get_window_coder(self):\n+    return AuctionOrBidWindowCoder()\n+\n+  def get_transformed_output_time(self, window, input_timestamp):\n+    return window.max_timestamp()\n+\n+\n+class JoinAuctionBidFn(beam.DoFn):\n+  @staticmethod\n+  def higher_bid(bid, other):\n+    if bid.price > other.price:\n+      return True\n+    elif bid.price < other.price:\n+      return False\n+    else:\n+      return bid.date_time < other.date_time\n+\n+  def process(self, element):\n+    _, group = element\n+    auctions = group[nexmark_query_util.AUCTION_TAG]\n+    auction = auctions[0] if auctions else None\n+    if auction is None:\n+      return\n+    best_bid = None\n+    for bid in group[nexmark_query_util.BID_TAG]:\n+      if bid.price < auction.reserve:\n+        continue\n+      if best_bid is None or JoinAuctionBidFn.higher_bid(bid, best_bid):\n+        best_bid = bid\n+    if best_bid is None:\n+      return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07896c96511eb55f07d5bd607a38284a55f7cf76"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "061041c50777b2960259b837df78ed27cd3de96f", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/061041c50777b2960259b837df78ed27cd3de96f", "committedDate": "2020-08-02T06:33:32Z", "message": "resolve issues brought up in code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Nzc0MTE0", "url": "https://github.com/apache/beam/pull/12427#pullrequestreview-459774114", "createdAt": "2020-08-03T06:24:53Z", "commit": {"oid": "061041c50777b2960259b837df78ed27cd3de96f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75b65ff0d0978c6d54b98424d666fc595f1868f", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/b75b65ff0d0978c6d54b98424d666fc595f1868f", "committedDate": "2020-08-03T23:07:58Z", "message": "resolve py2.7 lint error for import and python3 type hint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf", "committedDate": "2020-08-04T08:14:33Z", "message": "fix 3.7 lint errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxOTIxNzQ4", "url": "https://github.com/apache/beam/pull/12427#pullrequestreview-461921748", "createdAt": "2020-08-05T18:32:15Z", "commit": {"oid": "a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODozMjoxNlrOG8Vt9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzowMzoyMlrOG88UXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyMzU3NQ==", "bodyText": "Perhaps it's not that important, but it looks like these events are already parsed (hence the name events instead of raw_events. Should you rename the pcollection in query 1 and query 0?", "url": "https://github.com/apache/beam/pull/12427#discussion_r465923575", "createdAt": "2020-08-05T18:32:16Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/query2.py", "diffHunk": "@@ -29,17 +29,15 @@\n from __future__ import absolute_import\n \n import apache_beam as beam\n-from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n-from apache_beam.testing.benchmarks.nexmark.nexmark_util import ParseEventFn\n-from apache_beam.testing.benchmarks.nexmark.nexmark_util import display\n+from apache_beam.testing.benchmarks.nexmark.models import auction_price\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n \n \n-def load(raw_events, metadata=None):\n+def load(events, metadata=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNDY4Mw==", "bodyText": "Perhaps create constants for 89 and 100? EURO_RATE = 0.89 or something like that?", "url": "https://github.com/apache/beam/pull/12427#discussion_r465924683", "createdAt": "2020-08-05T18:34:24Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/query1.py", "diffHunk": "@@ -29,20 +29,16 @@\n \n import apache_beam as beam\n from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n-from apache_beam.testing.benchmarks.nexmark.nexmark_util import ParseEventFn\n-from apache_beam.testing.benchmarks.nexmark.nexmark_util import display\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n \n \n def load(raw_events, query_args=None):\n   return (\n       raw_events\n-      | 'ParseEventFn' >> beam.ParDo(ParseEventFn())\n-      | 'FilterInBids' >>\n-      beam.Filter(lambda event: isinstance(event, nexmark_model.Bid))\n+      | nexmark_query_util.JustBids()\n       | 'ConvertToEuro' >> beam.Map(\n           lambda bid: nexmark_model.Bid(\n               bid.auction,\n-              bid.bidder, (float(bid.price) * 89) // 100,\n-              bid.timestamp,\n-              bid.extra))\n-      | 'DisplayQuery1' >> beam.Map(display))  # pylint: disable=expression-not-assigned\n+              bid.bidder, (bid.price * 89) // 100,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTU2Nw==", "bodyText": "The documentation for q2 says Select auctions by auction id. - but I see you're selecting Bids, and then filtering them by Auction. Should the documentation be updated or should you be selecting Auctions and filtering those?", "url": "https://github.com/apache/beam/pull/12427#discussion_r465925567", "createdAt": "2020-08-05T18:36:02Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/query2.py", "diffHunk": "@@ -29,17 +29,15 @@\n from __future__ import absolute_import\n \n import apache_beam as beam\n-from apache_beam.testing.benchmarks.nexmark.models import nexmark_model\n-from apache_beam.testing.benchmarks.nexmark.nexmark_util import ParseEventFn\n-from apache_beam.testing.benchmarks.nexmark.nexmark_util import display\n+from apache_beam.testing.benchmarks.nexmark.models import auction_price\n+from apache_beam.testing.benchmarks.nexmark.queries import nexmark_query_util\n \n \n-def load(raw_events, metadata=None):\n+def load(events, metadata=None):\n   return (\n-      raw_events\n-      | 'ParseEventFn' >> beam.ParDo(ParseEventFn())\n-      | 'FilterInAuctionsWithSelectedId' >> beam.Filter(\n-          lambda event: (\n-              isinstance(event, nexmark_model.Auction) and event.id == metadata.\n-              get('auction_id')))\n-      | 'DisplayQuery2' >> beam.Map(display))  # pylint: disable=expression-not-assigned\n+      events\n+      | nexmark_query_util.JustBids()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTY4NA==", "bodyText": "Please document query9 at the top", "url": "https://github.com/apache/beam/pull/12427#discussion_r465925684", "createdAt": "2020-08-05T18:36:16Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/queries/query9.py", "diffHunk": "@@ -0,0 +1,29 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NTk5OQ==", "bodyText": "can you improve the formatting of these docs?", "url": "https://github.com/apache/beam/pull/12427#discussion_r466555999", "createdAt": "2020-08-06T17:03:22Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/nexmark_util.py", "diffHunk": "@@ -103,6 +121,107 @@ def process(self, elem):\n     yield event\n \n \n+class ParseJsonEvnetFn(beam.DoFn):\n+  \"\"\"Parses the raw event info into a Python objects.\n+\n+  Each event line has the following format:\n+\n+    person: {id,name,email,credit_card,city, \\\n+                          state,timestamp,extra}\n+    auction: {id,item_name, description,initial_bid, \\\n+                          reserve_price,timestamp,expires,seller,category,extra}\n+    bid: {auction,bidder,price,timestamp,extra}\n+\n+  For example:\n+\n+    {\"id\":1000,\"name\":\"Peter Jones\",\"emailAddress\":\"nhd@xcat.com\",\\\n+        \"creditCard\":\"7241 7320 9143 4888\",\"city\":\"Portland\",\"state\":\"WY\",\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a857f0a6e1cb343e737c5e833ce8ed7af76eb6cf"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1942f91f6a1dda37d6af61a4b9ef1baa276f093", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/f1942f91f6a1dda37d6af61a4b9ef1baa276f093", "committedDate": "2020-08-06T22:04:23Z", "message": "resolve issues brought up in code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTU2NTM4", "url": "https://github.com/apache/beam/pull/12427#pullrequestreview-462956538", "createdAt": "2020-08-07T00:11:39Z", "commit": {"oid": "f1942f91f6a1dda37d6af61a4b9ef1baa276f093"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoxMTozOVrOG9INUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoxMTozOVrOG9INUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MDgwMw==", "bodyText": "It's a bit of a silly thing, but something like this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                person: {id,name,email,credit_card,city, \\\n          \n          \n            \n                                      state,timestamp,extra}\n          \n          \n            \n                auction: {id,item_name, description,initial_bid, \\\n          \n          \n            \n                                      reserve_price,timestamp,expires,seller,category,extra}\n          \n          \n            \n                bid: {auction,bidder,price,timestamp,extra}\n          \n          \n            \n            \n          \n          \n            \n              For example:\n          \n          \n            \n            \n          \n          \n            \n                {\"id\":1000,\"name\":\"Peter Jones\",\"emailAddress\":\"nhd@xcat.com\",\\\n          \n          \n            \n                    \"creditCard\":\"7241 7320 9143 4888\",\"city\":\"Portland\",\"state\":\"WY\",\\\n          \n          \n            \n                    \"dateTime\":1528098831026,\\\"extra\":\"WN_HS_bnpVQ\\\\[[\"}\n          \n          \n            \n            \n          \n          \n            \n                {\"id\":1000,\"itemName\":\"wkx mgee\",\"description\":\"eszpqxtdxrvwmmywkmogoahf\",\\\n          \n          \n            \n                    \"initialBid\":28873,\"reserve\":29448,\"dateTime\":1528098831036,\\\n          \n          \n            \n                    \"expires\":1528098840451,\"seller\":1000,\"category\":13,\"extra\":\"zcuupiz\"}\n          \n          \n            \n            \n          \n          \n            \n                {\"auction\":1000,\"bidder\":1001,\"price\":32530001,\"dateTime\":1528098831066,\\\n          \n          \n            \n                    \"extra\":\"fdiysaV^]NLVsbolvyqwgticfdrwdyiyofWPYTOuwogvszlxjrcNOORM\"}\n          \n          \n            \n                person: {id,name,email,credit_card,city, \\\n          \n          \n            \n                         state,timestamp,extra}\n          \n          \n            \n                auction: {id,item_name, description,initial_bid, \\\n          \n          \n            \n                          reserve_price,timestamp,expires,seller,category,extra}\n          \n          \n            \n                bid: {auction,bidder,price,timestamp,extra}\n          \n          \n            \n            \n          \n          \n            \n              For example:\n          \n          \n            \n            \n          \n          \n            \n                {\"id\":1000,\"name\":\"Peter Jones\",\"emailAddress\":\"nhd@xcat.com\",\\\n          \n          \n            \n                 \"creditCard\":\"7241 7320 9143 4888\",\"city\":\"Portland\",\"state\":\"WY\",\\\n          \n          \n            \n                 \"dateTime\":1528098831026,\\\"extra\":\"WN_HS_bnpVQ\\\\[[\"}\n          \n          \n            \n            \n          \n          \n            \n                {\"id\":1000,\"itemName\":\"wkx mgee\",\"description\":\"eszpqxtdxrvwmmywkmogoahf\",\\\n          \n          \n            \n                 \"initialBid\":28873,\"reserve\":29448,\"dateTime\":1528098831036,\\\n          \n          \n            \n                 \"expires\":1528098840451,\"seller\":1000,\"category\":13,\"extra\":\"zcuupiz\"}\n          \n          \n            \n            \n          \n          \n            \n                {\"auction\":1000,\"bidder\":1001,\"price\":32530001,\"dateTime\":1528098831066,\\\n          \n          \n            \n                 \"extra\":\"fdiysaV^]NLVsbolvyqwgticfdrwdyiyofWPYTOuwogvszlxjrcNOORM\"}", "url": "https://github.com/apache/beam/pull/12427#discussion_r466750803", "createdAt": "2020-08-07T00:11:39Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/nexmark_util.py", "diffHunk": "@@ -103,6 +121,107 @@ def process(self, elem):\n     yield event\n \n \n+class ParseJsonEvnetFn(beam.DoFn):\n+  \"\"\"Parses the raw event info into a Python objects.\n+\n+  Each event line has the following format:\n+\n+    person: {id,name,email,credit_card,city, \\\n+                          state,timestamp,extra}\n+    auction: {id,item_name, description,initial_bid, \\\n+                          reserve_price,timestamp,expires,seller,category,extra}\n+    bid: {auction,bidder,price,timestamp,extra}\n+\n+  For example:\n+\n+    {\"id\":1000,\"name\":\"Peter Jones\",\"emailAddress\":\"nhd@xcat.com\",\\\n+        \"creditCard\":\"7241 7320 9143 4888\",\"city\":\"Portland\",\"state\":\"WY\",\\\n+        \"dateTime\":1528098831026,\\\"extra\":\"WN_HS_bnpVQ\\\\[[\"}\n+\n+    {\"id\":1000,\"itemName\":\"wkx mgee\",\"description\":\"eszpqxtdxrvwmmywkmogoahf\",\\\n+        \"initialBid\":28873,\"reserve\":29448,\"dateTime\":1528098831036,\\\n+        \"expires\":1528098840451,\"seller\":1000,\"category\":13,\"extra\":\"zcuupiz\"}\n+\n+    {\"auction\":1000,\"bidder\":1001,\"price\":32530001,\"dateTime\":1528098831066,\\\n+        \"extra\":\"fdiysaV^]NLVsbolvyqwgticfdrwdyiyofWPYTOuwogvszlxjrcNOORM\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1942f91f6a1dda37d6af61a4b9ef1baa276f093"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d048b0541d41e7d7a131a5a1a598175a3cac5a6e", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/d048b0541d41e7d7a131a5a1a598175a3cac5a6e", "committedDate": "2020-08-07T21:09:44Z", "message": "better formatting for nexmark_util docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e8b28ddda71174e9924f126264dcfb6e764288", "author": {"user": {"login": "leiyiz", "name": "Leiyi Zhang"}}, "url": "https://github.com/apache/beam/commit/85e8b28ddda71174e9924f126264dcfb6e764288", "committedDate": "2020-08-12T18:00:48Z", "message": "exported StreamCoderImpl to fix issue with pydoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3636, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}