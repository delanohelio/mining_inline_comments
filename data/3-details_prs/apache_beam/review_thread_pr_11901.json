{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2ODc1NDc0", "number": 11901, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoyOTowMFrOEB9lng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NToyMVrOED8mNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDkzMDg2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/opcodes.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoyOTowMFrOGeIPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzoyNjoxNFrOGemFgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTQ3MA==", "bodyText": "It looks like this is an unrelated change that got pulled in?", "url": "https://github.com/apache/beam/pull/11901#discussion_r434245470", "createdAt": "2020-06-03T00:29:00Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/typehints/opcodes.py", "diffHunk": "@@ -120,7 +120,7 @@ def get_iter(state, unused_arg):\n \n def symmetric_binary_op(state, unused_arg):\n   # TODO(robertwb): This may not be entirely correct...\n-  b, a = state.stack.pop(), state.stack.pop()\n+  b, a = Const.unwrap(state.stack.pop()), Const.unwrap(state.stack.pop())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDQ2NA==", "bodyText": "This was needed for my test. (It now correctly infers x + 1 for ints x.) I thought it small enough to not merit a new PR.", "url": "https://github.com/apache/beam/pull/11901#discussion_r434734464", "createdAt": "2020-06-03T17:26:14Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/opcodes.py", "diffHunk": "@@ -120,7 +120,7 @@ def get_iter(state, unused_arg):\n \n def symmetric_binary_op(state, unused_arg):\n   # TODO(robertwb): This may not be entirely correct...\n-  b, a = state.stack.pop(), state.stack.pop()\n+  b, a = Const.unwrap(state.stack.pop()), Const.unwrap(state.stack.pop())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTQ3MA=="}, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDkzNjc5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/sql.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDozMjoxMlrOGeIS4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjowNzozNVrOGheHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA==", "bodyText": "This is definitely useful for SQL but I don't think it should be SQL-specific. What about putting it in apache_beam/typehints/schemas.py?", "url": "https://github.com/apache/beam/pull/11901#discussion_r434246368", "createdAt": "2020-06-03T00:32:12Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/transforms/sql.py", "diffHunk": "@@ -74,3 +77,8 @@ def __init__(self, query, dialect=None):\n             SqlTransformSchema(query=query, dialect=dialect)),\n         BeamJarExpansionService(\n             ':sdks:java:extensions:sql:expansion-service:shadowJar'))\n+\n+\n+class Row(object):\n+  def __init__(self, **kwargs):\n+    self.__dict__.update(kwargs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDc4NA==", "bodyText": "I'd rather users not be importing stuff from typehints. Is there a better place?", "url": "https://github.com/apache/beam/pull/11901#discussion_r434734784", "createdAt": "2020-06-03T17:26:50Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/sql.py", "diffHunk": "@@ -74,3 +77,8 @@ def __init__(self, query, dialect=None):\n             SqlTransformSchema(query=query, dialect=dialect)),\n         BeamJarExpansionService(\n             ':sdks:java:extensions:sql:expansion-service:shadowJar'))\n+\n+\n+class Row(object):\n+  def __init__(self, **kwargs):\n+    self.__dict__.update(kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MjE3OQ==", "bodyText": "Hm yeah that makes sense. Maybe we need a new file or package for user-facing schema tools?", "url": "https://github.com/apache/beam/pull/11901#discussion_r434772179", "createdAt": "2020-06-03T18:31:43Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/transforms/sql.py", "diffHunk": "@@ -74,3 +77,8 @@ def __init__(self, query, dialect=None):\n             SqlTransformSchema(query=query, dialect=dialect)),\n         BeamJarExpansionService(\n             ':sdks:java:extensions:sql:expansion-service:shadowJar'))\n+\n+\n+class Row(object):\n+  def __init__(self, **kwargs):\n+    self.__dict__.update(kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDUzOA==", "bodyText": "Is there going to be any other top-level schema stuff that it would make sense for this to be a sibling to? Otherwise, perhaps I could just put at a top level, and one would use it as apache_beam.Row.", "url": "https://github.com/apache/beam/pull/11901#discussion_r437080538", "createdAt": "2020-06-09T01:03:00Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/sql.py", "diffHunk": "@@ -74,3 +77,8 @@ def __init__(self, query, dialect=None):\n             SqlTransformSchema(query=query, dialect=dialect)),\n         BeamJarExpansionService(\n             ':sdks:java:extensions:sql:expansion-service:shadowJar'))\n+\n+\n+class Row(object):\n+  def __init__(self, **kwargs):\n+    self.__dict__.update(kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNjExNQ==", "bodyText": "Mm nothing comes to mind. I suppose it could just be apache_beam.Row for now, and we can alias it if we add a schema package with other top-level schema stuff later.", "url": "https://github.com/apache/beam/pull/11901#discussion_r437536115", "createdAt": "2020-06-09T15:48:47Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/transforms/sql.py", "diffHunk": "@@ -74,3 +77,8 @@ def __init__(self, query, dialect=None):\n             SqlTransformSchema(query=query, dialect=dialect)),\n         BeamJarExpansionService(\n             ':sdks:java:extensions:sql:expansion-service:shadowJar'))\n+\n+\n+class Row(object):\n+  def __init__(self, **kwargs):\n+    self.__dict__.update(kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0OTU0MA==", "bodyText": "Moved to pvalue (imported to the top level), like TaggedOutput.", "url": "https://github.com/apache/beam/pull/11901#discussion_r437749540", "createdAt": "2020-06-09T22:07:35Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/sql.py", "diffHunk": "@@ -74,3 +77,8 @@ def __init__(self, query, dialect=None):\n             SqlTransformSchema(query=query, dialect=dialect)),\n         BeamJarExpansionService(\n             ':sdks:java:extensions:sql:expansion-service:shadowJar'))\n+\n+\n+class Row(object):\n+  def __init__(self, **kwargs):\n+    self.__dict__.update(kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTc0MDA2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/coders/row_coder.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NToyMVrOGhQ7sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjowNzoxNlrOGheGsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzYxOA==", "bodyText": "Could you move this inference to typehints.schemas alongside named_tuple_to_schema? I have a WIP PR for batching schema'd PCollections that are inputs to Dataframes and I should re-use this logic there.", "url": "https://github.com/apache/beam/pull/11901#discussion_r437533618", "createdAt": "2020-06-09T15:45:21Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/coders/row_coder.py", "diffHunk": "@@ -82,8 +86,19 @@ def from_runner_api_parameter(schema, components, unused_context):\n     return RowCoder(schema)\n \n   @staticmethod\n-  def from_type_hint(named_tuple_type, registry):\n-    return RowCoder(named_tuple_to_schema(named_tuple_type))\n+  def from_type_hint(type_hint, registry):\n+    if isinstance(type_hint, row_type.RowTypeConstraint):\n+      schema = schema_pb2.Schema(\n+          fields=[\n+              schema_pb2.Field(\n+                  name=name,\n+                  type=typing_to_runner_api(type))\n+              for (name, type) in type_hint._fields\n+          ],\n+          id=str(uuid.uuid4()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0OTQyNQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11901#discussion_r437749425", "createdAt": "2020-06-09T22:07:16Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/row_coder.py", "diffHunk": "@@ -82,8 +86,19 @@ def from_runner_api_parameter(schema, components, unused_context):\n     return RowCoder(schema)\n \n   @staticmethod\n-  def from_type_hint(named_tuple_type, registry):\n-    return RowCoder(named_tuple_to_schema(named_tuple_type))\n+  def from_type_hint(type_hint, registry):\n+    if isinstance(type_hint, row_type.RowTypeConstraint):\n+      schema = schema_pb2.Schema(\n+          fields=[\n+              schema_pb2.Field(\n+                  name=name,\n+                  type=typing_to_runner_api(type))\n+              for (name, type) in type_hint._fields\n+          ],\n+          id=str(uuid.uuid4()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzYxOA=="}, "originalCommit": {"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3596, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}