{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTEyNDg0", "number": 13318, "title": "[BEAM-11300] Improve Nexmark performance:", "bodyText": "Change Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling. Also use BagState instead of ValueState<List<>>\nChange Query5 to avoid unnecessary lists when combining.\nChange Query10 to avoid excessive logging.\nPlease add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-11-12T14:12:43Z", "url": "https://github.com/apache/beam/pull/13318", "merged": true, "mergeCommit": {"oid": "80248d00abeabdbcfc81d876638c5437fa118e41"}, "closed": true, "closedAt": "2020-12-18T05:11:47Z", "author": {"login": "scwhittle"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb5FIXgBqjM5OTA2NjYzMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiiDJOABqjQwNjcxNDk1MzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f11607971f302de3f9c1a6eee5bf3bdd38a2a2e", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/9f11607971f302de3f9c1a6eee5bf3bdd38a2a2e", "committedDate": "2020-11-12T13:54:29Z", "message": "Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}, "afterCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/3d980846c1da07171fb1615432f7424cef521038", "committedDate": "2020-11-12T21:02:45Z", "message": "Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjQwNTg5", "url": "https://github.com/apache/beam/pull/13318#pullrequestreview-532640589", "createdAt": "2020-11-17T17:53:54Z", "commit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1Mzo1NFrOH1B6yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoxNzo1NFrOH1C4nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2ODAwOQ==", "bodyText": "Simpler to do\n.apply(\"EventByAuctionSeller\", WithKeys.of(Auction::seller).withKeyType(TypeDescriptors.longs()))", "url": "https://github.com/apache/beam/pull/13318#discussion_r525368009", "createdAt": "2020-11-17T17:53:54Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -83,27 +75,29 @@ public Query3(NexmarkConfiguration configuration) {\n \n   @Override\n   public PCollection<NameCityStateId> expand(PCollection<Event> events) {\n-    int numEventsInPane = 30;\n-\n-    PCollection<Event> eventsWindowed =\n-        events.apply(\n-            Window.<Event>into(new GlobalWindows())\n-                .triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(numEventsInPane)))\n-                .discardingFiredPanes()\n-                .withAllowedLateness(Duration.ZERO));\n-    PCollection<KV<Long, Auction>> auctionsBySellerId =\n-        eventsWindowed\n+    PCollection<KV<Long, Event>> auctionsBySellerId =\n+        events\n             // Only want the new auction events.\n             .apply(NexmarkQueryUtil.JUST_NEW_AUCTIONS)\n \n             // We only want auctions in category 10.\n             .apply(name + \".InCategory\", Filter.by(auction -> auction.category == 10))\n \n             // Key auctions by their seller id.\n-            .apply(\"AuctionBySeller\", NexmarkQueryUtil.AUCTION_BY_SELLER);\n-\n-    PCollection<KV<Long, Person>> personsById =\n-        eventsWindowed\n+            .apply(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2ODIwMg==", "bodyText": "Ditto - simpler to use WithKeys", "url": "https://github.com/apache/beam/pull/13318#discussion_r525368202", "createdAt": "2020-11-17T17:54:09Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -115,19 +109,23 @@ public Query3(NexmarkConfiguration configuration) {\n                         \"OR\".equals(person.state)\n                             || \"ID\".equals(person.state)\n                             || \"CA\".equals(person.state)))\n+            .apply(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2OTQwNw==", "bodyText": "Instead of ProcessContext just inject @element and OutputReceiver parameters", "url": "https://github.com/apache/beam/pull/13318#discussion_r525369407", "createdAt": "2020-11-17T17:55:50Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MDU1OA==", "bodyText": "Comment - this is because Event is a union object, etc.", "url": "https://github.com/apache/beam/pull/13318#discussion_r525370558", "createdAt": "2020-11-17T17:57:29Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,\n-        @TimerId(PERSON_STATE_EXPIRING) Timer timer,\n-        @StateId(PERSON) ValueState<Person> personState,\n-        @StateId(AUCTIONS) ValueState<List<Auction>> auctionsState) {\n+        @TimerId(STATE_EXPIRING) Timer timer,\n+        @StateId(PERSON) @AlwaysFetched ValueState<Person> personState,\n+        @StateId(AUCTIONS) BagState<Auction> auctionsState) {\n       // We would *almost* implement this by  rewindowing into the global window and\n       // running a combiner over the result. The combiner's accumulator would be the\n       // state we use below. However, combiners cannot emit intermediate results, thus\n-      // we need to wait for the pending ReduceFn API.\n+      // we need to wait for the pending ReduceFn API\n \n       Person existingPerson = personState.read();\n-      if (existingPerson != null) {\n-        // We've already seen the new person event for this person id.\n-        // We can join with any new auctions on-the-fly without needing any\n-        // additional persistent state.\n-        for (Auction newAuction : c.element().getValue().getAll(NexmarkQueryUtil.AUCTION_TAG)) {\n-          newAuctionCounter.inc();\n-          newOldOutputCounter.inc();\n-          c.output(KV.of(newAuction, existingPerson));\n-        }\n-        return;\n-      }\n-\n-      Person theNewPerson = null;\n-      for (Person newPerson : c.element().getValue().getAll(NexmarkQueryUtil.PERSON_TAG)) {\n-        if (theNewPerson == null) {\n-          theNewPerson = newPerson;\n+      if (c.element().getValue().newPerson != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MTMzMg==", "bodyText": "If this is not the first time this person has been seen, there's no point in even fetching auctionsState, right?", "url": "https://github.com/apache/beam/pull/13318#discussion_r525371332", "createdAt": "2020-11-17T17:58:43Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -197,85 +195,60 @@ private JoinDoFn(String name, int maxAuctionsWaitingTime) {\n     @ProcessElement\n     public void processElement(\n         ProcessContext c,\n-        @TimerId(PERSON_STATE_EXPIRING) Timer timer,\n-        @StateId(PERSON) ValueState<Person> personState,\n-        @StateId(AUCTIONS) ValueState<List<Auction>> auctionsState) {\n+        @TimerId(STATE_EXPIRING) Timer timer,\n+        @StateId(PERSON) @AlwaysFetched ValueState<Person> personState,\n+        @StateId(AUCTIONS) BagState<Auction> auctionsState) {\n       // We would *almost* implement this by  rewindowing into the global window and\n       // running a combiner over the result. The combiner's accumulator would be the\n       // state we use below. However, combiners cannot emit intermediate results, thus\n-      // we need to wait for the pending ReduceFn API.\n+      // we need to wait for the pending ReduceFn API\n \n       Person existingPerson = personState.read();\n-      if (existingPerson != null) {\n-        // We've already seen the new person event for this person id.\n-        // We can join with any new auctions on-the-fly without needing any\n-        // additional persistent state.\n-        for (Auction newAuction : c.element().getValue().getAll(NexmarkQueryUtil.AUCTION_TAG)) {\n-          newAuctionCounter.inc();\n-          newOldOutputCounter.inc();\n-          c.output(KV.of(newAuction, existingPerson));\n-        }\n-        return;\n-      }\n-\n-      Person theNewPerson = null;\n-      for (Person newPerson : c.element().getValue().getAll(NexmarkQueryUtil.PERSON_TAG)) {\n-        if (theNewPerson == null) {\n-          theNewPerson = newPerson;\n+      if (c.element().getValue().newPerson != null) {\n+        Person person = c.element().getValue().newPerson;\n+        if (existingPerson == null) {\n+          newPersonCounter.inc();\n+          personState.write(person);\n         } else {\n-          if (theNewPerson.equals(newPerson)) {\n-            LOG.error(\"Duplicate person {}\", theNewPerson);\n+          if (person.equals(existingPerson)) {\n+            LOG.error(\"Duplicate person {}\", person);\n           } else {\n-            LOG.error(\"Conflicting persons {} and {}\", theNewPerson, newPerson);\n+            LOG.error(\"Conflicting persons {} and {}\", existingPerson, person);\n           }\n           fatalCounter.inc();\n-          continue;\n         }\n-        newPersonCounter.inc();\n         // We've now seen the person for this person id so can flush any\n         // pending auctions for the same seller id (an auction is done by only one seller).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Mjk0OQ==", "bodyText": "Why are you making the expiration timer a processing-time timer? Isn't event time more correct here?", "url": "https://github.com/apache/beam/pull/13318#discussion_r525372949", "createdAt": "2020-11-17T18:01:08Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query3.java", "diffHunk": "@@ -164,21 +165,19 @@ public void processElement(ProcessContext c) {\n     @StateId(PERSON)\n     private static final StateSpec<ValueState<Person>> personSpec = StateSpecs.value(Person.CODER);\n \n-    private static final String PERSON_STATE_EXPIRING = \"personStateExpiring\";\n+    private static final String STATE_EXPIRING = \"stateExpiring\";\n \n     @StateId(AUCTIONS)\n-    private final StateSpec<ValueState<List<Auction>>> auctionsSpec =\n-        StateSpecs.value(ListCoder.of(Auction.CODER));\n+    private final StateSpec<BagState<Auction>> auctionsSpec = StateSpecs.bag(Auction.CODER);\n \n-    @TimerId(PERSON_STATE_EXPIRING)\n-    private final TimerSpec timerSpec = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+    @TimerId(STATE_EXPIRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4MzgzNg==", "bodyText": "AvroCoder tends to be very inefficient. Either write a custom coder or use SchemaCoder. To use SchemaCoder return the following from getAccumulatorCoder (unfortunately it appears that combiners have not been integrated yet with the SchemaRegistry, as otherwise it would be much simpler - just annotating with @DefaultSchema)\nJavaFieldSchema provider = new JavaFieldSchema();\nTypeDescriptor typeDescriptor = new TypeDescriptor{}();\nreturn SchemaCoder.of(provider.schemaFor(typeDescriptor), provider.toRowFunction(typeDescriptor), provider.fromRowFunction(typeDescriptor));", "url": "https://github.com/apache/beam/pull/13318#discussion_r525383836", "createdAt": "2020-11-17T18:17:54Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query5.java", "diffHunk": "@@ -53,6 +56,48 @@\n public class Query5 extends NexmarkQueryTransform<AuctionCount> {\n   private final NexmarkConfiguration configuration;\n \n+  public static class TopCombineFn\n+      extends AccumulatingCombineFn<KV<Long, Long>, Accum, KV<Long, List<Long>>> {\n+    @Override\n+    public Accum createAccumulator() {\n+      return new Accum();\n+    }\n+\n+    @DefaultCoder(AvroCoder.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d980846c1da07171fb1615432f7424cef521038", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/3d980846c1da07171fb1615432f7424cef521038", "committedDate": "2020-11-12T21:02:45Z", "message": "Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}, "afterCommit": {"oid": "69f9b9e24bf981bb1d1db3b5a0847220ebd55194", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/69f9b9e24bf981bb1d1db3b5a0847220ebd55194", "committedDate": "2020-11-18T13:09:31Z", "message": "[BEAM-11300] Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69f9b9e24bf981bb1d1db3b5a0847220ebd55194", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/69f9b9e24bf981bb1d1db3b5a0847220ebd55194", "committedDate": "2020-11-18T13:09:31Z", "message": "[BEAM-11300] Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}, "afterCommit": {"oid": "f9760400106ec5d06306d2f85b601f54b5545481", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/f9760400106ec5d06306d2f85b601f54b5545481", "committedDate": "2020-11-19T11:59:01Z", "message": "[BEAM-11300] Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9760400106ec5d06306d2f85b601f54b5545481", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/f9760400106ec5d06306d2f85b601f54b5545481", "committedDate": "2020-11-19T11:59:01Z", "message": "[BEAM-11300] Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}, "afterCommit": {"oid": "77d9d45ab2243c47059408e0252d5f9e8cb389c9", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/77d9d45ab2243c47059408e0252d5f9e8cb389c9", "committedDate": "2020-12-02T11:29:17Z", "message": "[BEAM-11300] Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTc1NTc4", "url": "https://github.com/apache/beam/pull/13318#pullrequestreview-543175578", "createdAt": "2020-12-02T19:38:28Z", "commit": {"oid": "77d9d45ab2243c47059408e0252d5f9e8cb389c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozODoyOVrOH9rJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozODoyOVrOH9rJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjA1Mg==", "bodyText": "why do you call schemaFor twice?", "url": "https://github.com/apache/beam/pull/13318#discussion_r534432052", "createdAt": "2020-12-02T19:38:29Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/Query5.java", "diffHunk": "@@ -53,6 +63,79 @@\n public class Query5 extends NexmarkQueryTransform<AuctionCount> {\n   private final NexmarkConfiguration configuration;\n \n+  public static class TopCombineFn\n+      extends AccumulatingCombineFn<KV<Long, Long>, Accum, KV<Long, List<Long>>> {\n+    @Override\n+    public Accum createAccumulator() {\n+      return new Accum();\n+    }\n+\n+    @Override\n+    public Coder<Accum> getAccumulatorCoder(\n+        @NonNull CoderRegistry registry, @NonNull Coder<KV<Long, Long>> inputCoder) {\n+      JavaFieldSchema provider = new JavaFieldSchema();\n+      TypeDescriptor<Accum> typeDescriptor = new TypeDescriptor<Accum>() {};\n+      provider.schemaFor(typeDescriptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d9d45ab2243c47059408e0252d5f9e8cb389c9"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d88858e9fbce14befcc8f92dcbc932a6fe69b27", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/7d88858e9fbce14befcc8f92dcbc932a6fe69b27", "committedDate": "2020-12-03T12:10:20Z", "message": "[BEAM-11300] Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aa3b6db93fbca70aee0dff21e11601b7c464364", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/7aa3b6db93fbca70aee0dff21e11601b7c464364", "committedDate": "2020-12-02T19:46:44Z", "message": "remove unnecessary schemaFor"}, "afterCommit": {"oid": "7d88858e9fbce14befcc8f92dcbc932a6fe69b27", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/7d88858e9fbce14befcc8f92dcbc932a6fe69b27", "committedDate": "2020-12-03T12:10:20Z", "message": "[BEAM-11300] Improve Nexmark performance:\n\nChange Query3 to use stateful processing and timers without\nCoGroupByKey which introduces additional windowing and shuffling.\n\nChange Query5 to avoid unnecessary lists when combining.\n\nChange Query10 to avoid excessive logging."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4826, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}