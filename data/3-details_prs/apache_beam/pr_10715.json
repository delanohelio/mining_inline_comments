{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzM1Mzk5", "number": 10715, "title": "[BEAM-9179] Cleanup ZetaSQLQueryPlanner and ExpressionConverter code", "bodyText": "Minor cleanup after #10659 in preparation for https://issues.apache.org/jira/browse/BEAM-9179\nr: @ibzib\ncc: @kennknowles\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-29T19:50:10Z", "url": "https://github.com/apache/beam/pull/10715", "merged": true, "mergeCommit": {"oid": "a926175769b455aed9e5c6c63c04e104e05d6515"}, "closed": true, "closedAt": "2020-01-30T19:23:18Z", "author": {"login": "robinyqiu"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_LXm7AH2gAyMzY4NzM1Mzk5OmNiMDI0NjhiYmUyMTZjMzA3YzgwMDU2MTcxMGI5OTJlZjg2YTkwZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_LiShAFqTM1MDM4NDM4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cb02468bbe216c307c800561710b992ef86a90fe", "author": {"user": {"login": "robinyqiu", "name": "Yueyang Qiu"}}, "url": "https://github.com/apache/beam/commit/cb02468bbe216c307c800561710b992ef86a90fe", "committedDate": "2020-01-29T19:46:54Z", "message": "Cleanup ZetaSQLQueryPlanner and ExpressionConverter code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg0Mzgx", "url": "https://github.com/apache/beam/pull/10715#pullrequestreview-350384381", "createdAt": "2020-01-29T19:57:05Z", "commit": {"oid": "cb02468bbe216c307c800561710b992ef86a90fe"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1NzowNlrOFjVqAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1NzowNlrOFjVqAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5OTI5OA==", "bodyText": "There are problems with missing ZetaSQL functionality, so we might have to remove this line: #10707", "url": "https://github.com/apache/beam/pull/10715#discussion_r372599298", "createdAt": "2020-01-29T19:57:06Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -1002,27 +1001,27 @@ private static boolean isZetaSQLCast(TypeKind fromType, TypeKind toType) {\n   }\n \n   private RexNode convertResolvedParameter(ResolvedParameter parameter) {\n-    if (queryParams.getKind() == Kind.NAMED) {\n-      Map<String, Value> queryParameterMap = (Map<String, Value>) queryParams.named();\n-      Value value = queryParameterMap.get(parameter.getName());\n-      Preconditions.checkState(\n-          parameter.getType().equals(value.getType()),\n-          String.format(\n-              \"Expected resolved parameter %s to have type %s, but it has type %s\",\n-              parameter.getName(), value.getType(), parameter.getType()));\n-      return convertValueToRexNode(value.getType(), value);\n-    } else if (queryParams.getKind() == Kind.POSITIONAL) {\n-      List<Value> queryParameterList = (List<Value>) queryParams.positional();\n-      // parameter is 1-indexed, while parameter list is 0-indexed.\n-      Value value = queryParameterList.get((int) parameter.getPosition() - 1);\n-      Preconditions.checkState(\n-          parameter.getType().equals(value.getType()),\n-          String.format(\n-              \"Expected resolved parameter %d to have type %s, but it has type %s\",\n-              parameter.getPosition(), value.getType(), parameter.getType()));\n-      return convertValueToRexNode(value.getType(), value);\n+    Value value;\n+    String identifier;\n+    switch (queryParams.getKind()) {\n+      case NAMED:\n+        value = ((Map<String, Value>) queryParams.named()).get(parameter.getName());\n+        identifier = parameter.getName();\n+        break;\n+      case POSITIONAL:\n+        // parameter is 1-indexed, while parameter list is 0-indexed.\n+        value = ((List<Value>) queryParams.positional()).get((int) parameter.getPosition() - 1);\n+        identifier = Long.toString(parameter.getPosition());\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Found unexpected parameter \" + parameter);\n     }\n-    throw new IllegalArgumentException(\"Found unexpected parameter \" + parameter);\n+    Preconditions.checkState(\n+        parameter.getType().equals(value.getType()),\n+        String.format(\n+            \"Expected resolved parameter %s to have type %s, but it has type %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb02468bbe216c307c800561710b992ef86a90fe"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3275, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}