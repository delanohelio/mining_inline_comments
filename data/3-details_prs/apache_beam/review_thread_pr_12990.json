{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2Mzk4NTc1", "number": 12990, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo1MDoyOFrOEp7kHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoxMTo1NVrOEp757g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDAyOTc1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo1MDoyOFrOHb5xiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTozNToxOVrOHb8Oqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMDE2OA==", "bodyText": "nit: this formatting makes it really unclear where the lambda ends. I think this is it? Is this auto formatted? Can the lambda be put on a single line or indented to make this clearer?", "url": "https://github.com/apache/beam/pull/12990#discussion_r499020168", "createdAt": "2020-10-02T19:50:28Z", "author": {"login": "apilloud"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -34,6 +34,45 @@ def __array__(self, dtype=None):\n \n   between = frame_base._elementwise_method('between')\n \n+  def dot(self, other):\n+    left = self._expr\n+    if isinstance(other, DeferredSeries):\n+      right = expressions.ComputedExpression(\n+          'to_dataframe',\n+          pd.DataFrame, [other._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Index())\n+      right_is_series = True\n+    elif isinstance(other, DeferredDataFrame):\n+      right = other._expr\n+      right_is_series = False\n+    else:\n+      raise frame_base.WontImplementError('non-deferred result')\n+\n+    dots = expressions.ComputedExpression(\n+        'dot',\n+        # Transpose so we can sum across rows.\n+        lambda left,\n+        right: pd.DataFrame(left @ right).T,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDM5NA==", "bodyText": "Yes, this is the auto-formatter. I'll play around with this.", "url": "https://github.com/apache/beam/pull/12990#discussion_r499060394", "createdAt": "2020-10-02T21:35:19Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -34,6 +34,45 @@ def __array__(self, dtype=None):\n \n   between = frame_base._elementwise_method('between')\n \n+  def dot(self, other):\n+    left = self._expr\n+    if isinstance(other, DeferredSeries):\n+      right = expressions.ComputedExpression(\n+          'to_dataframe',\n+          pd.DataFrame, [other._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Index())\n+      right_is_series = True\n+    elif isinstance(other, DeferredDataFrame):\n+      right = other._expr\n+      right_is_series = False\n+    else:\n+      raise frame_base.WontImplementError('non-deferred result')\n+\n+    dots = expressions.ComputedExpression(\n+        'dot',\n+        # Transpose so we can sum across rows.\n+        lambda left,\n+        right: pd.DataFrame(left @ right).T,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMDE2OA=="}, "originalCommit": {"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDAzNzU1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo1MzoyNlrOHb52YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTozNToyM1rOHb8OzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMTQwOA==", "bodyText": "nit: same thing here, in reverse. Can there be a newline here?", "url": "https://github.com/apache/beam/pull/12990#discussion_r499021408", "createdAt": "2020-10-02T19:53:26Z", "author": {"login": "apilloud"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -34,6 +34,45 @@ def __array__(self, dtype=None):\n \n   between = frame_base._elementwise_method('between')\n \n+  def dot(self, other):\n+    left = self._expr\n+    if isinstance(other, DeferredSeries):\n+      right = expressions.ComputedExpression(\n+          'to_dataframe',\n+          pd.DataFrame, [other._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Index())\n+      right_is_series = True\n+    elif isinstance(other, DeferredDataFrame):\n+      right = other._expr\n+      right_is_series = False\n+    else:\n+      raise frame_base.WontImplementError('non-deferred result')\n+\n+    dots = expressions.ComputedExpression(\n+        'dot',\n+        # Transpose so we can sum across rows.\n+        lambda left,\n+        right: pd.DataFrame(left @ right).T,\n+        [left, right],\n+        requires_partition_by=partitionings.Index())\n+    with expressions.allow_non_parallel_operations(True):\n+      sums = expressions.ComputedExpression(\n+          'sum',\n+          lambda dots: dots.sum(), [dots],\n+          requires_partition_by=partitionings.Singleton())\n+\n+      if right_is_series:\n+        result = expressions.ComputedExpression(\n+            'extract',\n+            lambda df: df[0], [sums],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDQyOQ==", "bodyText": "Same.", "url": "https://github.com/apache/beam/pull/12990#discussion_r499060429", "createdAt": "2020-10-02T21:35:23Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -34,6 +34,45 @@ def __array__(self, dtype=None):\n \n   between = frame_base._elementwise_method('between')\n \n+  def dot(self, other):\n+    left = self._expr\n+    if isinstance(other, DeferredSeries):\n+      right = expressions.ComputedExpression(\n+          'to_dataframe',\n+          pd.DataFrame, [other._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Index())\n+      right_is_series = True\n+    elif isinstance(other, DeferredDataFrame):\n+      right = other._expr\n+      right_is_series = False\n+    else:\n+      raise frame_base.WontImplementError('non-deferred result')\n+\n+    dots = expressions.ComputedExpression(\n+        'dot',\n+        # Transpose so we can sum across rows.\n+        lambda left,\n+        right: pd.DataFrame(left @ right).T,\n+        [left, right],\n+        requires_partition_by=partitionings.Index())\n+    with expressions.allow_non_parallel_operations(True):\n+      sums = expressions.ComputedExpression(\n+          'sum',\n+          lambda dots: dots.sum(), [dots],\n+          requires_partition_by=partitionings.Singleton())\n+\n+      if right_is_series:\n+        result = expressions.ComputedExpression(\n+            'extract',\n+            lambda df: df[0], [sums],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMTQwOA=="}, "originalCommit": {"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDA4NTU4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoxMTo1NVrOHb6UgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTozNjo1MVrOHb8Qxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyOTEyMA==", "bodyText": "Should this have a isinstance check as well?", "url": "https://github.com/apache/beam/pull/12990#discussion_r499029120", "createdAt": "2020-10-02T20:11:55Z", "author": {"login": "apilloud"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -415,6 +453,37 @@ def aggregate(self, func, axis=0, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  def dot(self, other):\n+    # We want to broadcast the right hand side to all partitions of the left.\n+    # This is OK, as its index must be the same size as the columns set of self,\n+    # so cannot be too large.\n+    class AsScalar(object):\n+      def __init__(self, value):\n+        self.value = value\n+\n+    if isinstance(other, frame_base.DeferredFrame):\n+      proxy = other._expr.proxy()\n+      with expressions.allow_non_parallel_operations():\n+        side = expressions.ComputedExpression(\n+            'as_scalar',\n+            lambda df: AsScalar(df),\n+            [other._expr],\n+            requires_partition_by=partitionings.Singleton())\n+    else:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDkzNA==", "bodyText": "This side is all the constant types that pandas may accept.", "url": "https://github.com/apache/beam/pull/12990#discussion_r499060934", "createdAt": "2020-10-02T21:36:51Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -415,6 +453,37 @@ def aggregate(self, func, axis=0, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  def dot(self, other):\n+    # We want to broadcast the right hand side to all partitions of the left.\n+    # This is OK, as its index must be the same size as the columns set of self,\n+    # so cannot be too large.\n+    class AsScalar(object):\n+      def __init__(self, value):\n+        self.value = value\n+\n+    if isinstance(other, frame_base.DeferredFrame):\n+      proxy = other._expr.proxy()\n+      with expressions.allow_non_parallel_operations():\n+        side = expressions.ComputedExpression(\n+            'as_scalar',\n+            lambda df: AsScalar(df),\n+            [other._expr],\n+            requires_partition_by=partitionings.Singleton())\n+    else:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyOTEyMA=="}, "originalCommit": {"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3088, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}