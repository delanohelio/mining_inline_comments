{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODExNTU4", "number": 12002, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDozNzozNFrOEFLvnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxOTowMlrOEFoGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODcwNzUxOnYy", "diffSide": "RIGHT", "path": "sdks/python/test-suites/portable/common.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDozNzozNFrOGjQ_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDozNzozNFrOGjQ_Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTY1OA==", "bodyText": "You'll need to change environment_type and environment_config according to the value of workerType.", "url": "https://github.com/apache/beam/pull/12002#discussion_r439631658", "createdAt": "2020-06-12T20:37:34Z", "author": {"login": "ibzib"}, "path": "sdks/python/test-suites/portable/common.gradle", "diffHunk": "@@ -99,34 +101,110 @@ task flinkTriggerTranscript() {\n   }\n }\n \n+\n+task createProcessWorker {\n+  dependsOn ':sdks:python:container:build'\n+  dependsOn 'setupVirtualenv'\n+  def sdkWorkerFile = file(\"${buildDir}/sdk_worker.sh\")\n+  def osType = 'linux'\n+  if (Os.isFamily(Os.FAMILY_MAC))\n+    osType = 'darwin'\n+  def workerScript = \"${project(\":sdks:python:container:\").buildDir.absolutePath}/target/launcher/${osType}_amd64/boot\"\n+  def sdkWorkerFileCode = \"sh -c \\\"pip=`which pip` . ${envdir}/bin/activate && ${workerScript} \\$* \\\"\"\n+  outputs.file sdkWorkerFile\n+  doLast {\n+    sdkWorkerFile.write sdkWorkerFileCode\n+    exec {\n+      commandLine('sh', '-c', \". ${envdir}/bin/activate && cd ${pythonRootDir} && pip install -e .[test]\")\n+    }\n+    exec {\n+      commandLine('chmod', '+x', sdkWorkerFile)\n+    }\n+  }\n+}\n+\n+def sparkCompatibilityMatrix = {\n+  def config = it ? it as CompatibilityMatrixConfig : new CompatibilityMatrixConfig()\n+  def workerType = config.workerType.name()\n+  def streaming = config.streaming\n+  // def environment_config = config.workerType == CompatibilityMatrixConfig.SDK_WORKER_TYPE.PROCESS ? \"--environment_config='{\\\"command\\\": \\\"${buildDir.absolutePath}/sdk_worker.sh\\\"}'\" : \"\"\n+  def name = \"sparkCompatibilityMatrix${streaming ? 'Streaming' : 'Batch'}${config.preOptimize ? 'PreOptimize' : ''}${workerType}\"\n+  def extra_experiments = []\n+  if (config.preOptimize)\n+    extra_experiments.add('pre_optimize=all')\n+  tasks.create(name: name) {\n+    dependsOn 'createProcessWorker'\n+    dependsOn 'setupVirtualenv'\n+    dependsOn ':runners:spark:job-server:shadowJar'\n+    doLast {\n+      def environment_config = \"'{\\\"command\\\": \\\"${buildDir.absolutePath}/sdk_worker.sh\\\"}'\"\n+      def argMap = [\n+              \"environment_type\"    : \"PROCESS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a81f3daac9a6eb4371eeac8f75ea6f3c36af9cb1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzM1MjkzOnYy", "diffSide": "RIGHT", "path": "sdks/python/test-suites/portable/common.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxOTowMlrOGj7gFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxOTowMlrOGj7gFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyODIxMw==", "bodyText": "This isn't used anywhere.", "url": "https://github.com/apache/beam/pull/12002#discussion_r440328213", "createdAt": "2020-06-15T17:19:02Z", "author": {"login": "ibzib"}, "path": "sdks/python/test-suites/portable/common.gradle", "diffHunk": "@@ -99,34 +101,108 @@ task flinkTriggerTranscript() {\n   }\n }\n \n+\n+task createProcessWorker {\n+  dependsOn ':sdks:python:container:build'\n+  dependsOn 'setupVirtualenv'\n+  def sdkWorkerFile = file(\"${buildDir}/sdk_worker.sh\")\n+  def osType = 'linux'\n+  if (Os.isFamily(Os.FAMILY_MAC))\n+    osType = 'darwin'\n+  def workerScript = \"${project(\":sdks:python:container:\").buildDir.absolutePath}/target/launcher/${osType}_amd64/boot\"\n+  def sdkWorkerFileCode = \"sh -c \\\"pip=`which pip` . ${envdir}/bin/activate && ${workerScript} \\$* \\\"\"\n+  outputs.file sdkWorkerFile\n+  doLast {\n+    sdkWorkerFile.write sdkWorkerFileCode\n+    exec {\n+      commandLine('sh', '-c', \". ${envdir}/bin/activate && cd ${pythonRootDir} && pip install -e .[test]\")\n+    }\n+    exec {\n+      commandLine('chmod', '+x', sdkWorkerFile)\n+    }\n+  }\n+}\n+\n+def sparkCompatibilityMatrix = {\n+  def config = it ? it as CompatibilityMatrixConfig : new CompatibilityMatrixConfig()\n+  def workerType = config.workerType.name()\n+  def streaming = config.streaming\n+  def environment_config = config.workerType == CompatibilityMatrixConfig.SDK_WORKER_TYPE.PROCESS ? \"--environment_config='{\\\"command\\\": \\\"${buildDir.absolutePath}/sdk_worker.sh\\\"}'\" : \"\"\n+  def name = \"sparkCompatibilityMatrix${streaming ? 'Streaming' : 'Batch'}${config.preOptimize ? 'PreOptimize' : ''}${workerType}\"\n+  def extra_experiments = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "575fc087ebd9bfac9adad3af7567ea0d8f8a7182"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3515, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}