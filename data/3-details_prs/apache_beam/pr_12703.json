{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODkwNDc0", "number": 12703, "title": "[BEAM-10603] Add describe and cancel to RecordingManager", "bodyText": "Change-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8\nThis adds the ability to introspect into the RecordingManager to get the start time and size on cache for a recording or pipeline (RecordingManager). Also adds the \"cancel\" method to a recording. This allows to gracefully shutdown a recording if a kernel interrupt is caught.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-27T18:58:38Z", "url": "https://github.com/apache/beam/pull/12703", "merged": true, "mergeCommit": {"oid": "71d5395b8c98cfd309def3802cd37a9e61995ad4"}, "closed": true, "closedAt": "2020-09-08T22:01:44Z", "author": {"login": "rohdesamuel"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEYB8xgBqjM3MTEzMjg5MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG8dS6gBqjM3NDI0MTY4ODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc721a8779b8fdfd2de0ca740067e6ea3b082a2e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/bc721a8779b8fdfd2de0ca740067e6ea3b082a2e", "committedDate": "2020-08-27T18:54:56Z", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8"}, "afterCommit": {"oid": "b3011ad47b46fb1916aba3485491c80731578c9b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b3011ad47b46fb1916aba3485491c80731578c9b", "committedDate": "2020-08-31T19:32:17Z", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a4dcca4a0aea106e54e8d41ce841a174a54398fe", "committedDate": "2020-08-31T20:33:02Z", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3011ad47b46fb1916aba3485491c80731578c9b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b3011ad47b46fb1916aba3485491c80731578c9b", "committedDate": "2020-08-31T19:32:17Z", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8"}, "afterCommit": {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a4dcca4a0aea106e54e8d41ce841a174a54398fe", "committedDate": "2020-08-31T20:33:02Z", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjYyMjA0", "url": "https://github.com/apache/beam/pull/12703#pullrequestreview-481262204", "createdAt": "2020-09-02T20:09:22Z", "commit": {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDowOToyMlrOHMC-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDowOToyMlrOHMC-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MzczOQ==", "bodyText": "You can use attempt_to_cancel_background_caching_job(user_pipeline) https://github.com/apache/beam/blob/master/sdks/python/apache_beam/runners/interactive/background_caching_job.py#L220", "url": "https://github.com/apache/beam/pull/12703#discussion_r482393739", "createdAt": "2020-09-02T20:09:22Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -258,16 +278,46 @@ def _watch(self, pcolls):\n         ie.current_env().watch(\n             {'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n-  def clear(self, pcolls):\n+  def _clear(self, pipeline_instrument):\n     # type: (List[beam.pvalue.PCollection]) -> None\n \n-    \"\"\"Clears the cache of the given PCollections.\"\"\"\n+    \"\"\"Clears the recording of all non-source PCollections.\"\"\"\n \n     cache_manager = ie.current_env().get_cache_manager(self.user_pipeline)\n-    for pc in pcolls:\n-      cache_key = self._pipeline_instrument.cache_key(pc)\n+\n+    # Only clear the PCollections that aren't being populated from the\n+    # BackgroundCachingJob.\n+    all_cached = set(\n+        str(c.to_key()) for c in pipeline_instrument.cacheables.values())\n+    source_pcolls = getattr(cache_manager, 'capture_keys', set())\n+    to_clear = all_cached - source_pcolls\n+\n+    for cache_key in to_clear:\n       cache_manager.clear('full', cache_key)\n \n+  def cancel(self):\n+    # type: (None) -> None\n+\n+    \"\"\"Cancels the current background recording job.\"\"\"\n+\n+    bcj = ie.current_env().get_background_caching_job(self.user_pipeline)\n+    if bcj:\n+      bcj.cancel()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjc1MzMx", "url": "https://github.com/apache/beam/pull/12703#pullrequestreview-481275331", "createdAt": "2020-09-02T20:29:17Z", "commit": {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDoyOToxN1rOHMElXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDoyOToxN1rOHMElXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyMDA2MQ==", "bodyText": "Are we still calling it BackgroundCachingJob?", "url": "https://github.com/apache/beam/pull/12703#discussion_r482420061", "createdAt": "2020-09-02T20:29:17Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager_test.py", "diffHunk": "@@ -288,18 +347,122 @@ def test_basic_wordcount(self):\n     # Create the recording objects. By calling `record` a new PipelineFragment\n     # is started to compute the given PCollections and cache to disk.\n     rm = RecordingManager(p)\n-    recording = rm.record([elems], max_n=3, max_duration_secs=500)\n-    stream = recording.stream(elems)\n-    recording.wait_until_finish()\n+    numbers_recording = rm.record([numbers], max_n=3, max_duration_secs=500)\n+    numbers_stream = numbers_recording.stream(numbers)\n+    numbers_recording.wait_until_finish()\n \n     # Once the pipeline fragment completes, we can read from the stream and know\n     # that all elements were written to cache.\n-    elems = list(stream.read())\n+    elems = list(numbers_stream.read())\n     expected_elems = [\n         WindowedValue(i, MIN_TIMESTAMP, [GlobalWindow()]) for i in range(3)\n     ]\n     self.assertListEqual(elems, expected_elems)\n \n+    # Make an extra recording and test the description.\n+    letters_recording = rm.record([letters], max_n=3, max_duration_secs=500)\n+    letters_recording.wait_until_finish()\n+\n+    self.assertEqual(\n+        rm.describe()['size'],\n+        numbers_recording.describe()['size'] +\n+        letters_recording.describe()['size'])\n+\n+    rm.cancel()\n+\n+  @unittest.skipIf(\n+      sys.version_info < (3, 6, 0),\n+      'This test requires at least Python 3.6 to work.')\n+  def test_cancel_stops_recording(self):\n+    # Add the TestStream so that it can be cached.\n+    ib.options.capturable_sources.add(TestStream)\n+\n+    p = beam.Pipeline(\n+        InteractiveRunner(), options=PipelineOptions(streaming=True))\n+    elems = (\n+        p\n+        | TestStream().advance_watermark_to(0).advance_processing_time(\n+            1).add_elements(list(range(10))).advance_processing_time(1))\n+    squares = elems | beam.Map(lambda x: x**2)\n+\n+    # Watch the local scope for Interactive Beam so that referenced PCollections\n+    # will be cached.\n+    ib.watch(locals())\n+\n+    # This is normally done in the interactive_utils when a transform is\n+    # applied but needs an IPython environment. So we manually run this here.\n+    ie.current_env().track_user_pipelines()\n+\n+    # Get the recording then the BackgroundCachingJob.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab76559752bb27497d75fc44a614851d3b257ad6", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ab76559752bb27497d75fc44a614851d3b257ad6", "committedDate": "2020-09-02T20:48:11Z", "message": "use the existing method to cancel the BCJ\n\nChange-Id: Ifd0bd62c95958a96728c293628b6ed5be2b38790"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzU4Nzgw", "url": "https://github.com/apache/beam/pull/12703#pullrequestreview-481358780", "createdAt": "2020-09-02T22:31:06Z", "commit": {"oid": "ab76559752bb27497d75fc44a614851d3b257ad6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozMTowNlrOHMMLjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoyMDo0OFrOHOcjPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0NDUyNA==", "bodyText": "Generally doing this is not necessary. You can name the attribute self.cache_key, and users can access the attribute directly, unless there's a strong reason not to.", "url": "https://github.com/apache/beam/pull/12703#discussion_r482544524", "createdAt": "2020-09-02T22:31:06Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -63,6 +63,12 @@ def var(self):\n     \"\"\"Returns the variable named that defined this PCollection.\"\"\"\n     return self._var\n \n+  def cache_key(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab76559752bb27497d75fc44a614851d3b257ad6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwODQ2Nw==", "bodyText": "It's a little unsafe to use string representation as keys, no? Should CacheKey implement a hash method instead?", "url": "https://github.com/apache/beam/pull/12703#discussion_r484908467", "createdAt": "2020-09-08T13:19:30Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -258,16 +278,44 @@ def _watch(self, pcolls):\n         ie.current_env().watch(\n             {'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n-  def clear(self, pcolls):\n+  def _clear(self, pipeline_instrument):\n     # type: (List[beam.pvalue.PCollection]) -> None\n \n-    \"\"\"Clears the cache of the given PCollections.\"\"\"\n+    \"\"\"Clears the recording of all non-source PCollections.\"\"\"\n \n     cache_manager = ie.current_env().get_cache_manager(self.user_pipeline)\n-    for pc in pcolls:\n-      cache_key = self._pipeline_instrument.cache_key(pc)\n+\n+    # Only clear the PCollections that aren't being populated from the\n+    # BackgroundCachingJob.\n+    all_cached = set(\n+        str(c.to_key()) for c in pipeline_instrument.cacheables.values())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab76559752bb27497d75fc44a614851d3b257ad6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwOTg4NA==", "bodyText": "It seems that we're using the string representation everywhere, so it may represent a large change - and I see it;s a carefully written repr method, so it's not necessary for this PR.", "url": "https://github.com/apache/beam/pull/12703#discussion_r484909884", "createdAt": "2020-09-08T13:20:48Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -258,16 +278,44 @@ def _watch(self, pcolls):\n         ie.current_env().watch(\n             {'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n-  def clear(self, pcolls):\n+  def _clear(self, pipeline_instrument):\n     # type: (List[beam.pvalue.PCollection]) -> None\n \n-    \"\"\"Clears the cache of the given PCollections.\"\"\"\n+    \"\"\"Clears the recording of all non-source PCollections.\"\"\"\n \n     cache_manager = ie.current_env().get_cache_manager(self.user_pipeline)\n-    for pc in pcolls:\n-      cache_key = self._pipeline_instrument.cache_key(pc)\n+\n+    # Only clear the PCollections that aren't being populated from the\n+    # BackgroundCachingJob.\n+    all_cached = set(\n+        str(c.to_key()) for c in pipeline_instrument.cacheables.values())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwODQ2Nw=="}, "originalCommit": {"oid": "ab76559752bb27497d75fc44a614851d3b257ad6"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d7add997cd371b3232ea34729a0d03d286d8899", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0d7add997cd371b3232ea34729a0d03d286d8899", "committedDate": "2020-09-08T19:06:42Z", "message": "Turn cache_key and var into properties\n\nChange-Id: Ie74c50e7624df1b0611b35fe98d12eff905520aa"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "835d0863f09a7e736f966bf477bcff521da9b30a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/835d0863f09a7e736f966bf477bcff521da9b30a", "committedDate": "2020-09-08T18:12:31Z", "message": "Turn cache_key and var into properties\n\nChange-Id: Ie74c50e7624df1b0611b35fe98d12eff905520aa"}, "afterCommit": {"oid": "0d7add997cd371b3232ea34729a0d03d286d8899", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0d7add997cd371b3232ea34729a0d03d286d8899", "committedDate": "2020-09-08T19:06:42Z", "message": "Turn cache_key and var into properties\n\nChange-Id: Ie74c50e7624df1b0611b35fe98d12eff905520aa"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4489, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}