{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDY1MTM0", "number": 12460, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyMjozM1rOEVb5Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyOToyNVrOEVcFnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTEyNTgyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyMjozM1rOG8L_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODoyNTozMlrOG_D-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NDE4Ng==", "bodyText": "nit I think it's generally preferred to use string[] for primitive array types.", "url": "https://github.com/apache/beam/pull/12460#discussion_r465764186", "createdAt": "2020-08-05T14:22:33Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3ODY0Nw==", "bodyText": "Acked. Change all occurrences to string[].", "url": "https://github.com/apache/beam/pull/12460#discussion_r468778647", "createdAt": "2020-08-11T18:25:32Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NDE4Ng=="}, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTE0MjIwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyNTo1NlrOG8MJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzoxODozNlrOG_Bowg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2Njc2OQ==", "bodyText": "Is this only included for test purposes? Or is there somewhere else that it's expected to be used.", "url": "https://github.com/apache/beam/pull/12460#discussion_r465766769", "createdAt": "2020-08-05T14:25:56Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;\n+}\n+\n+interface IHtmlViewProps {\n+  htmlProvider: IHtmlProvider;\n+}\n+\n+interface IHtmlViewState {\n+  innerHtml: string;\n+  script: Array<string>;\n+}\n+\n+/**\n+ * A common HTML viewing component that renders given HTML and executes scripts\n+ * from the given provider.\n+ */\n+export class HtmlView extends React.Component<IHtmlViewProps, IHtmlViewState> {\n+  constructor(props: IHtmlViewProps) {\n+    super(props);\n+    this.state = {\n+      innerHtml: props.htmlProvider.html,\n+      script: []\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1000);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    const currentHtml = this.state.innerHtml;\n+    const htmlToUpdate = this.props.htmlProvider.html;\n+    const currentScript = this.state.script;\n+    const scriptToUpdate = [...this.props.htmlProvider.script];\n+    if (htmlToUpdate !== currentHtml) {\n+      this.setState({\n+        innerHtml: htmlToUpdate,\n+        // As long as the html is updated, clear the script state.\n+        script: []\n+      });\n+    }\n+    /* Depending on whether this iteration updates the html, the scripts\n+     * are executed differently.\n+     * Html updated: all scripts are new, start execution from index 0;\n+     * Html not updated: only newly added scripts need to be executed.\n+     */\n+    const currentScriptLength =\n+      htmlToUpdate === currentHtml ? currentScript.length : 0;\n+    if (scriptToUpdate.length > currentScriptLength) {\n+      this.setState(\n+        {\n+          script: scriptToUpdate\n+        },\n+        // Executes scripts once the state is updated.\n+        () => {\n+          for (let i = currentScriptLength; i < scriptToUpdate.length; ++i) {\n+            new Function(scriptToUpdate[i])();\n+          }\n+        }\n+      );\n+    }\n+  }\n+\n+  render(): React.ReactNode {\n+    return (\n+      // This injects raw HTML fetched from kernel into JSX.\n+      <div dangerouslySetInnerHTML={{ __html: this.state.innerHtml }} />\n+    );\n+  }\n+\n+  private _updateRenderTimerId: number;\n+}\n+\n+/**\n+ * Makes the browser support HTML import and import HTML from given hrefs if\n+ * any is given.\n+ *\n+ * Native HTML import has been deprecated by modern browsers. To support\n+ * importing reusable HTML templates, webcomponentsjs library is needed.\n+ * The given hrefs will be imported once the library is loaded.\n+ *\n+ * Note everything is appended to head and if there are duplicated HTML\n+ * imports, only the first one will take effect.\n+ */\n+export function importHtml(hrefs: Array<string>): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0MDI5MA==", "bodyText": "This is needed when initializing the lumino Widget during activation of the extension.\nThe importHtml only needs to be invoked once.\nThe HTML we are targeting is the one used by PAIR-facets.\nOnce invoked, later in the view, those facets visualization sent back from the kernel could be rendered correctly.", "url": "https://github.com/apache/beam/pull/12460#discussion_r468740290", "createdAt": "2020-08-11T17:18:36Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;\n+}\n+\n+interface IHtmlViewProps {\n+  htmlProvider: IHtmlProvider;\n+}\n+\n+interface IHtmlViewState {\n+  innerHtml: string;\n+  script: Array<string>;\n+}\n+\n+/**\n+ * A common HTML viewing component that renders given HTML and executes scripts\n+ * from the given provider.\n+ */\n+export class HtmlView extends React.Component<IHtmlViewProps, IHtmlViewState> {\n+  constructor(props: IHtmlViewProps) {\n+    super(props);\n+    this.state = {\n+      innerHtml: props.htmlProvider.html,\n+      script: []\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1000);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    const currentHtml = this.state.innerHtml;\n+    const htmlToUpdate = this.props.htmlProvider.html;\n+    const currentScript = this.state.script;\n+    const scriptToUpdate = [...this.props.htmlProvider.script];\n+    if (htmlToUpdate !== currentHtml) {\n+      this.setState({\n+        innerHtml: htmlToUpdate,\n+        // As long as the html is updated, clear the script state.\n+        script: []\n+      });\n+    }\n+    /* Depending on whether this iteration updates the html, the scripts\n+     * are executed differently.\n+     * Html updated: all scripts are new, start execution from index 0;\n+     * Html not updated: only newly added scripts need to be executed.\n+     */\n+    const currentScriptLength =\n+      htmlToUpdate === currentHtml ? currentScript.length : 0;\n+    if (scriptToUpdate.length > currentScriptLength) {\n+      this.setState(\n+        {\n+          script: scriptToUpdate\n+        },\n+        // Executes scripts once the state is updated.\n+        () => {\n+          for (let i = currentScriptLength; i < scriptToUpdate.length; ++i) {\n+            new Function(scriptToUpdate[i])();\n+          }\n+        }\n+      );\n+    }\n+  }\n+\n+  render(): React.ReactNode {\n+    return (\n+      // This injects raw HTML fetched from kernel into JSX.\n+      <div dangerouslySetInnerHTML={{ __html: this.state.innerHtml }} />\n+    );\n+  }\n+\n+  private _updateRenderTimerId: number;\n+}\n+\n+/**\n+ * Makes the browser support HTML import and import HTML from given hrefs if\n+ * any is given.\n+ *\n+ * Native HTML import has been deprecated by modern browsers. To support\n+ * importing reusable HTML templates, webcomponentsjs library is needed.\n+ * The given hrefs will be imported once the library is loaded.\n+ *\n+ * Note everything is appended to head and if there are duplicated HTML\n+ * imports, only the first one will take effect.\n+ */\n+export function importHtml(hrefs: Array<string>): void {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2Njc2OQ=="}, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTE1NzQxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyOToyNVrOG8MTWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1OTo0M1rOG_DGdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2OTMwNw==", "bodyText": "Haha as the property name suggests, this is definitely a risky operation from a security perspective since the markup being injected has the ability to run scripts in the user's context with access to whatever resources their credentials provide.\nIs there any alternative that could be considered? Could you create an <iframe> element and render the HTML there so that it's sandboxed? I don't have any fundamental objections to this as I don't know the full context, bu  I know this type of thing has been looked upon with significant concern by our internal security reviewers and has implications for us being able to include certain types of extensions in our enterprise product.", "url": "https://github.com/apache/beam/pull/12460#discussion_r465769307", "createdAt": "2020-08-05T14:29:25Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;\n+}\n+\n+interface IHtmlViewProps {\n+  htmlProvider: IHtmlProvider;\n+}\n+\n+interface IHtmlViewState {\n+  innerHtml: string;\n+  script: Array<string>;\n+}\n+\n+/**\n+ * A common HTML viewing component that renders given HTML and executes scripts\n+ * from the given provider.\n+ */\n+export class HtmlView extends React.Component<IHtmlViewProps, IHtmlViewState> {\n+  constructor(props: IHtmlViewProps) {\n+    super(props);\n+    this.state = {\n+      innerHtml: props.htmlProvider.html,\n+      script: []\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1000);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    const currentHtml = this.state.innerHtml;\n+    const htmlToUpdate = this.props.htmlProvider.html;\n+    const currentScript = this.state.script;\n+    const scriptToUpdate = [...this.props.htmlProvider.script];\n+    if (htmlToUpdate !== currentHtml) {\n+      this.setState({\n+        innerHtml: htmlToUpdate,\n+        // As long as the html is updated, clear the script state.\n+        script: []\n+      });\n+    }\n+    /* Depending on whether this iteration updates the html, the scripts\n+     * are executed differently.\n+     * Html updated: all scripts are new, start execution from index 0;\n+     * Html not updated: only newly added scripts need to be executed.\n+     */\n+    const currentScriptLength =\n+      htmlToUpdate === currentHtml ? currentScript.length : 0;\n+    if (scriptToUpdate.length > currentScriptLength) {\n+      this.setState(\n+        {\n+          script: scriptToUpdate\n+        },\n+        // Executes scripts once the state is updated.\n+        () => {\n+          for (let i = currentScriptLength; i < scriptToUpdate.length; ++i) {\n+            new Function(scriptToUpdate[i])();\n+          }\n+        }\n+      );\n+    }\n+  }\n+\n+  render(): React.ReactNode {\n+    return (\n+      // This injects raw HTML fetched from kernel into JSX.\n+      <div dangerouslySetInnerHTML={{ __html: this.state.innerHtml }} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2NDI3Ng==", "bodyText": "Yeah, it sounds scary :)\ndangerouslySetInnerHTML is React's replacement for innerHTML in the browser DOM.\nAnd the warning about using innerHTML is here. iframe has similar concerns.\nAll these concerns are about serving HTML from another domain that might contain malicious code.\nHere I think it's a valid use case because the HTML and scripts are returned from the kernel generated by the SDK as the user executes codes in their notebooks. They are known and trusted.\nThe purpose of this module is to render the generated visualization. Whether using dangerouslySetInnerHTML or iframe, to serve the purpose, the HTML has to be rendered and the scripts have to be executed. In the end, either way would do the same thing.\nThe security concern is similar to whether a notebook should execute scripts in an opened ipynb file. By default, Jupyter only renders HTML in the ipynb file (stored as JSON text, identical to this module getting those JSON fields through kernel messaging) and does not execute any script unless the notebook is trusted. A notebook is only trusted after the user executes jupyter trust notebook.ipynb or after the user executes the notebook in a kernel (identical to the extension's usage).", "url": "https://github.com/apache/beam/pull/12460#discussion_r468764276", "createdAt": "2020-08-11T17:59:43Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/common/HtmlView.tsx", "diffHunk": "@@ -0,0 +1,119 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+export interface IHtmlProvider {\n+  readonly html: string;\n+  readonly script: Array<string>;\n+}\n+\n+interface IHtmlViewProps {\n+  htmlProvider: IHtmlProvider;\n+}\n+\n+interface IHtmlViewState {\n+  innerHtml: string;\n+  script: Array<string>;\n+}\n+\n+/**\n+ * A common HTML viewing component that renders given HTML and executes scripts\n+ * from the given provider.\n+ */\n+export class HtmlView extends React.Component<IHtmlViewProps, IHtmlViewState> {\n+  constructor(props: IHtmlViewProps) {\n+    super(props);\n+    this.state = {\n+      innerHtml: props.htmlProvider.html,\n+      script: []\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1000);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    const currentHtml = this.state.innerHtml;\n+    const htmlToUpdate = this.props.htmlProvider.html;\n+    const currentScript = this.state.script;\n+    const scriptToUpdate = [...this.props.htmlProvider.script];\n+    if (htmlToUpdate !== currentHtml) {\n+      this.setState({\n+        innerHtml: htmlToUpdate,\n+        // As long as the html is updated, clear the script state.\n+        script: []\n+      });\n+    }\n+    /* Depending on whether this iteration updates the html, the scripts\n+     * are executed differently.\n+     * Html updated: all scripts are new, start execution from index 0;\n+     * Html not updated: only newly added scripts need to be executed.\n+     */\n+    const currentScriptLength =\n+      htmlToUpdate === currentHtml ? currentScript.length : 0;\n+    if (scriptToUpdate.length > currentScriptLength) {\n+      this.setState(\n+        {\n+          script: scriptToUpdate\n+        },\n+        // Executes scripts once the state is updated.\n+        () => {\n+          for (let i = currentScriptLength; i < scriptToUpdate.length; ++i) {\n+            new Function(scriptToUpdate[i])();\n+          }\n+        }\n+      );\n+    }\n+  }\n+\n+  render(): React.ReactNode {\n+    return (\n+      // This injects raw HTML fetched from kernel into JSX.\n+      <div dangerouslySetInnerHTML={{ __html: this.state.innerHtml }} />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2OTMwNw=="}, "originalCommit": {"oid": "5ae71f90512866fee7362171a86184fc78fc201b"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 804, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}