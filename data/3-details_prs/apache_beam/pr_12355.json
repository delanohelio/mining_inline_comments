{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODQ2MzM3", "number": 12355, "title": "[BEAM-10559] Add some comments and clean up SQL example.", "bodyText": "We will want to link to this from the blog. Is there other documentation we should point to other than the docstring of the transform itself?\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-23T17:10:08Z", "url": "https://github.com/apache/beam/pull/12355", "merged": true, "mergeCommit": {"oid": "bac13f8d50b8c82add546c1cf1b25c6c210a7830"}, "closed": true, "closedAt": "2020-07-27T18:11:37Z", "author": {"login": "robertwb"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3yi5MgH2gAyNDU1ODQ2MzM3OmVlMTBiZTExNGNjZGQwYjI1M2UxMDc2Y2NkN2RlYzE3YTlhYjQwZjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5EukVgH2gAyNDU1ODQ2MzM3OmM3OTI3NTU1ZTk4MDVhZGFiNDNjODFiNjI5NTkzMDRjYzE4YzA2NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee10be114ccdd0b253e1076ccd7dec17a9ab40f4", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/ee10be114ccdd0b253e1076ccd7dec17a9ab40f4", "committedDate": "2020-07-23T17:05:17Z", "message": "Add some comments and clean up SQL exmple."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/ad943a7f113af0c2764111004647462bf12210c1", "committedDate": "2020-07-23T17:44:17Z", "message": "lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0Mzg4NzQ0", "url": "https://github.com/apache/beam/pull/12355#pullrequestreview-454388744", "createdAt": "2020-07-23T18:24:29Z", "commit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNDoyOVrOG2WbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0MTo0NlrOG2XBGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Mzc5Mw==", "bodyText": "\".. that use the SQL transform.\"  (to differentiate from wordcount_xlang.py)", "url": "https://github.com/apache/beam/pull/12355#discussion_r459643793", "createdAt": "2020-07-23T18:24:29Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,16 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A cross-language word-counting workflow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ==", "bodyText": "I think we need a README file more specific instructions for Dataflow and portable runners for users to easily try this out. I believe @TheNeuralBit is working on it.", "url": "https://github.com/apache/beam/pull/12355#discussion_r459644349", "createdAt": "2020-07-23T18:25:24Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,16 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A cross-language word-counting workflow.\n+\n+Java and docker must be available to run this pipeline.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTMzNQ==", "bodyText": "Can we generalize this so that users can easily try this out with Dataflow as well ?", "url": "https://github.com/apache/beam/pull/12355#discussion_r459645335", "createdAt": "2020-07-23T18:27:16Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -101,12 +89,33 @@ def main():\n   # workflow rely on global context (e.g., a module imported at module level).\n   pipeline_options.view_as(SetupOptions).save_main_session = True\n \n-  p = beam.Pipeline(options=pipeline_options)\n-  # Preemptively start due to BEAM-6666.\n-  p.runner.create_job_service(pipeline_options)\n+  with beam.Pipeline(options=pipeline_options) as p:\n+    if isinstance(p.runner, portable_runner.PortableRunner):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTc5NA==", "bodyText": "Can we also briefly describe what this pipeline does and what output it produces ?", "url": "https://github.com/apache/beam/pull/12355#discussion_r459645794", "createdAt": "2020-07-23T18:28:06Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,16 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A cross-language word-counting workflow.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjM2Nw==", "bodyText": "What are the other ways ? We should document all such possibilities in the Sql transform. Currently sql.py mentions that input PCollection must have a PCollection NamedTuple type.", "url": "https://github.com/apache/beam/pull/12355#discussion_r459646367", "createdAt": "2020-07-23T18:29:07Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -31,51 +35,35 @@\n from apache_beam.io import WriteToText\n from apache_beam.options.pipeline_options import PipelineOptions\n from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.runners.portability import portable_runner\n from apache_beam.transforms.sql import SqlTransform\n \n+# The input to SqlTransform must be a PCollection(s) of known schema.\n+# One way to create such a PCollection is to produce a PCollection of\n+# NamedTuple registered with the RowCoder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MDc1NQ==", "bodyText": "We should also document current limitations of sql.py in the pydoc in that file (if any).", "url": "https://github.com/apache/beam/pull/12355#discussion_r459650755", "createdAt": "2020-07-23T18:36:57Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -31,51 +35,35 @@\n from apache_beam.io import WriteToText\n from apache_beam.options.pipeline_options import PipelineOptions\n from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.runners.portability import portable_runner\n from apache_beam.transforms.sql import SqlTransform\n \n+# The input to SqlTransform must be a PCollection(s) of known schema.\n+# One way to create such a PCollection is to produce a PCollection of\n+# NamedTuple registered with the RowCoder.\n+#\n+# Here we create and register a simple NamedTuple with a single unicode typed\n+# field named 'word' which we will use below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjI0Nw==", "bodyText": "key and count properties are already defined ? Let's clarify that here in a comment.", "url": "https://github.com/apache/beam/pull/12355#discussion_r459652247", "createdAt": "2020-07-23T18:39:40Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -31,51 +35,35 @@\n from apache_beam.io import WriteToText\n from apache_beam.options.pipeline_options import PipelineOptions\n from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.runners.portability import portable_runner\n from apache_beam.transforms.sql import SqlTransform\n \n+# The input to SqlTransform must be a PCollection(s) of known schema.\n+# One way to create such a PCollection is to produce a PCollection of\n+# NamedTuple registered with the RowCoder.\n+#\n+# Here we create and register a simple NamedTuple with a single unicode typed\n+# field named 'word' which we will use below.\n MyRow = typing.NamedTuple('MyRow', [('word', unicode)])\n coders.registry.register_coder(MyRow, coders.RowCoder)\n \n-# Some more fun queries:\n-# ------\n-# SELECT\n-#   word as key,\n-#   COUNT(*) as `count`\n-# FROM PCOLLECTION\n-# GROUP BY word\n-# ORDER BY `count` DESC\n-# LIMIT 100\n-# ------\n-# SELECT\n-#   len as key,\n-#   COUNT(*) as `count`\n-# FROM (\n-#   SELECT\n-#     LENGTH(word) AS len\n-#   FROM PCOLLECTION\n-# )\n-# GROUP BY len\n-\n \n def run(p, input_file, output_file):\n   #pylint: disable=expression-not-assigned\n   (\n       p\n-      | 'read' >> ReadFromText(input_file)\n-      | 'split' >> beam.FlatMap(str.split)\n-      | 'row' >> beam.Map(MyRow).with_output_types(MyRow)\n-      | 'sql!!' >> SqlTransform(\n+      | 'Read' >> ReadFromText(input_file)\n+      | 'Split' >> beam.FlatMap(lambda line: re.split(r'\\W+', line))\n+      | 'ToRow' >> beam.Map(MyRow).with_output_types(MyRow)\n+      | 'Sql!!' >> SqlTransform(\n           \"\"\"\n                    SELECT\n                      word as key,\n                      COUNT(*) as `count`\n                    FROM PCOLLECTION\n                    GROUP BY word\"\"\")\n-      | 'format' >> beam.Map(lambda row: '{}: {}'.format(row.key, row.count))\n-      | 'write' >> WriteToText(output_file))\n-\n-  result = p.run()\n-  result.wait_until_finish()\n+      | 'Format' >> beam.Map(lambda row: '{}: {}'.format(row.key, row.count))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjUwMw==", "bodyText": "This should not be done for Dataflow.", "url": "https://github.com/apache/beam/pull/12355#discussion_r459652503", "createdAt": "2020-07-23T18:40:08Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -101,12 +89,33 @@ def main():\n   # workflow rely on global context (e.g., a module imported at module level).\n   pipeline_options.view_as(SetupOptions).save_main_session = True\n \n-  p = beam.Pipeline(options=pipeline_options)\n-  # Preemptively start due to BEAM-6666.\n-  p.runner.create_job_service(pipeline_options)\n+  with beam.Pipeline(options=pipeline_options) as p:\n+    if isinstance(p.runner, portable_runner.PortableRunner):\n+      # Preemptively start due to BEAM-6666.\n+      p.runner.create_job_service(pipeline_options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MzQwMA==", "bodyText": "Did we confirm that these are working for Daataflow and portable runners ?", "url": "https://github.com/apache/beam/pull/12355#discussion_r459653400", "createdAt": "2020-07-23T18:41:46Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -101,12 +89,33 @@ def main():\n   # workflow rely on global context (e.g., a module imported at module level).\n   pipeline_options.view_as(SetupOptions).save_main_session = True\n \n-  p = beam.Pipeline(options=pipeline_options)\n-  # Preemptively start due to BEAM-6666.\n-  p.runner.create_job_service(pipeline_options)\n+  with beam.Pipeline(options=pipeline_options) as p:\n+    if isinstance(p.runner, portable_runner.PortableRunner):\n+      # Preemptively start due to BEAM-6666.\n+      p.runner.create_job_service(pipeline_options)\n+\n+    run(p, known_args.input, known_args.output)\n \n-  run(p, known_args.input, known_args.output)\n \n+# Some more fun queries:\n+# ------\n+# SELECT\n+#   word as key,\n+#   COUNT(*) as `count`\n+# FROM PCOLLECTION\n+# GROUP BY word", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad943a7f113af0c2764111004647462bf12210c1"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b9c6f7e76108ac7d256480d8dc60870b5eb270", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/85b9c6f7e76108ac7d256480d8dc60870b5eb270", "committedDate": "2020-07-23T22:48:16Z", "message": "Update decription."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da6612a2bd9e59ab1e8240700e5121c2a7daf5e0", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/da6612a2bd9e59ab1e8240700e5121c2a7daf5e0", "committedDate": "2020-07-24T00:05:56Z", "message": "note about java8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d51ce31db3bc1985a4e38489137e95e96aa848f", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/8d51ce31db3bc1985a4e38489137e95e96aa848f", "committedDate": "2020-07-24T00:09:49Z", "message": "More comments in the pipeline."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTc0MzEy", "url": "https://github.com/apache/beam/pull/12355#pullrequestreview-454574312", "createdAt": "2020-07-24T00:13:14Z", "commit": {"oid": "da6612a2bd9e59ab1e8240700e5121c2a7daf5e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDoxMzoxNFrOG2frkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDoxMzoxNFrOG2frkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NTM0Nw==", "bodyText": "How about:\nJava 8 must be available to run this pipeline and --experiments=use_runner_v2 flag must be passed for running on Dataflow.\nAdditionally you need to install Docker to run this pipeline from HEAD with a custom Java container. See `here <https://github.com/apache/beam/tree/master/sdks/python/apache_beam/examples/kafkataxi/>` for more details.", "url": "https://github.com/apache/beam/pull/12355#discussion_r459795347", "createdAt": "2020-07-24T00:13:14Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,17 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A word-counting workflow that uses the SQL transform.\n+\n+Java 8 and docker must be available to run this pipeline, and the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da6612a2bd9e59ab1e8240700e5121c2a7daf5e0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjIxOTU4", "url": "https://github.com/apache/beam/pull/12355#pullrequestreview-455221958", "createdAt": "2020-07-24T22:46:45Z", "commit": {"oid": "8d51ce31db3bc1985a4e38489137e95e96aa848f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7927555e9805adab43c81b62959304cc18c0642", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/c7927555e9805adab43c81b62959304cc18c0642", "committedDate": "2020-07-27T16:50:15Z", "message": "update note about docker"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3917, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}