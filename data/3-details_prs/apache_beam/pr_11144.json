{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTcyNTQy", "number": 11144, "title": "[BEAM-3301] Perform SDF validation (missing RestrictionTrackers).", "bodyText": "Added SDF detection and method validation when creating DoFns. This\nadds all the validation except for anything to do with restriction\ntrackers, which will be added in a later change.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-17T01:29:07Z", "url": "https://github.com/apache/beam/pull/11144", "merged": true, "mergeCommit": {"oid": "12e6e4a0eb34d66a679bc3174d120f16d98142f2"}, "closed": true, "closedAt": "2020-03-20T00:19:21Z", "author": {"login": "youngoli"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPBMHUgFqTM3NzIwOTI2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPUraeABqjMxNDc2MzQ4NTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjA5MjY4", "url": "https://github.com/apache/beam/pull/11144#pullrequestreview-377209268", "createdAt": "2020-03-18T20:26:10Z", "commit": {"oid": "f4295ee7badff2ec8f0c5b07f325234e604d228f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoyNjoxMVrOF4VnRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDo1NzowMlrOF4cTuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxODY5Mg==", "bodyText": "A semantic note: the error shouldn't be ignored. Semantically if a function returns an error, the non error return values are not guaranteed to be valid.\nSo conventionally, the way to handle IsSplittable here is to check for the error, and return false if not nil, and otherwise return what the boolean is.", "url": "https://github.com/apache/beam/pull/11144#discussion_r394618692", "createdAt": "2020-03-18T20:26:11Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -196,13 +217,31 @@ func (f *DoFn) Name() string {\n \n // IsSplittable returns whether the DoFn is a valid Splittable DoFn.\n func (f *DoFn) IsSplittable() bool {\n-\treturn false // TODO(BEAM-3301): Implement this when we add SDFs.\n+\tisSdf, _ := validateSdfMethodsPresent((*Fn)(f))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4295ee7badff2ec8f0c5b07f325234e604d228f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMjQ4Nw==", "bodyText": "Prefer declaring empty slices using the var syntax.\nvar missing []string", "url": "https://github.com/apache/beam/pull/11144#discussion_r394722487", "createdAt": "2020-03-19T00:33:45Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -569,6 +622,188 @@ func validateSideInputsNumUnknown(processFnInputs []funcx.FnParam, method *funcx\n \treturn nil\n }\n \n+// validateSdfMethods validates that all SDF methods are either present or\n+// missing in a Fn, and then returns true if they're present and false\n+// otherwise. If some are present and some are missing, it returns an error.\n+func validateSdfMethodsPresent(fn *Fn) (bool, error) {\n+\t// Check if first sdf method is present or not, and compare all subsequent\n+\t// methods to that result. If there's a mismatch, then we only fail after\n+\t// finishing the loop so we can output all the missing methods.\n+\tmissing := make([]string, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4295ee7badff2ec8f0c5b07f325234e604d228f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyNTI1NA==", "bodyText": "I see that this function is trying to distinguish between partial coverage or complete coverage, but I think it could be simpler.\nConsider that the booleans could be removed by comparing whether len(missing) == len(sdfNames) to check if it's simply not an SDF at all (and thus, no error should be returned).\nswitch len(missing) {\ncase 0: \n  return true, nil\ncase len(sdfNames): \n  return false, nil\ndefault:\n  err := errors.Errorf(\"not all SplittableDoFn methods are present. Missing methods: %v\", missing)\n  return false, err\n}", "url": "https://github.com/apache/beam/pull/11144#discussion_r394725254", "createdAt": "2020-03-19T00:44:27Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -569,6 +622,188 @@ func validateSideInputsNumUnknown(processFnInputs []funcx.FnParam, method *funcx\n \treturn nil\n }\n \n+// validateSdfMethods validates that all SDF methods are either present or\n+// missing in a Fn, and then returns true if they're present and false\n+// otherwise. If some are present and some are missing, it returns an error.\n+func validateSdfMethodsPresent(fn *Fn) (bool, error) {\n+\t// Check if first sdf method is present or not, and compare all subsequent\n+\t// methods to that result. If there's a mismatch, then we only fail after\n+\t// finishing the loop so we can output all the missing methods.\n+\tmissing := make([]string, 0)\n+\tvar first, fail bool\n+\n+\tfor i, name := range sdfNames {\n+\t\t_, ok := fn.methods[name]\n+\t\tif !ok {\n+\t\t\tmissing = append(missing, name)\n+\t\t}\n+\n+\t\tif i == 0 {\n+\t\t\tfirst = ok\n+\t\t} else if ok != first {\n+\t\t\tfail = true\n+\t\t}\n+\t}\n+\n+\tif fail {\n+\t\terr := errors.Errorf(\"not all SplittableDoFn methods are present. Missing methods: %v\", missing)\n+\t\treturn false, err\n+\t}\n+\n+\treturn first, nil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4295ee7badff2ec8f0c5b07f325234e604d228f"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyODM3Nw==", "bodyText": "Shouldn't the ProcessElement method be adjusted here for the Restriction tracker parameter for a \"GoodSdf\" ?\nI guess technically if we don't care about dynamic splitting at all, it should be allowed. It's not unreasonable to prevent it until we have the right idea how to do that, but if so, lets put a TODO in here somewhere to make the intent explicit.", "url": "https://github.com/apache/beam/pull/11144#discussion_r394728377", "createdAt": "2020-03-19T00:57:02Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "diffHunk": "@@ -470,6 +542,169 @@ func (fn *BadDoFnAmbiguousSideInput) StartBundle(bool) {\n func (fn *BadDoFnAmbiguousSideInput) FinishBundle(bool) {\n }\n \n+// Examples of correct SplittableDoFn signatures\n+\n+type RestT struct{}\n+\n+type GoodSdf struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4295ee7badff2ec8f0c5b07f325234e604d228f"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTE5ODUx", "url": "https://github.com/apache/beam/pull/11144#pullrequestreview-378119851", "createdAt": "2020-03-19T21:52:33Z", "commit": {"oid": "51df23dba409ae4a16836d75bd47cd44e8d012eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "committedDate": "2020-03-19T23:38:36Z", "message": "[BEAM-3301] Perform SDF validation (missing RestrictionTrackers).\n\nAdded SDF detection and method validation when creating DoFns. This\nadds all the validation except for anything to do with restriction\ntrackers, which will be added in a later change."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51df23dba409ae4a16836d75bd47cd44e8d012eb", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/51df23dba409ae4a16836d75bd47cd44e8d012eb", "committedDate": "2020-03-19T04:21:39Z", "message": "[BEAM-3301] Fixup: Addressing PR comments."}, "afterCommit": {"oid": "26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "committedDate": "2020-03-19T23:38:36Z", "message": "[BEAM-3301] Perform SDF validation (missing RestrictionTrackers).\n\nAdded SDF detection and method validation when creating DoFns. This\nadds all the validation except for anything to do with restriction\ntrackers, which will be added in a later change."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4973, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}