{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExOTMxMTQ4", "number": 13215, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0MjowM1rOE5oBqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0NTo0OFrOE5oHNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODYwMDc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/ToStringFnRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0MjowM1rOH0McCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDoxNzo1N1rOH1JK9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MTc4NA==", "bodyText": "Can you scope this more narrowly, or use  instead?", "url": "https://github.com/apache/beam/pull/13215#discussion_r524491784", "createdAt": "2020-11-16T18:42:03Z", "author": {"login": "robertwb"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/ToStringFnRunner.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.model.pipeline.v1.RunnerApi.PTransform;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.sdk.function.ThrowingFunction;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Translates from elements to human-readable string.\n+ *\n+ * <p>Translation function:\n+ *\n+ * <ul>\n+ *   <li>Input: {@code KV<nonce, element>}\n+ *   <li>Output: {@code KV<nonce, string>}\n+ * </ul>\n+ *\n+ * <p>For each element, the human-readable string is returned. The nonce is used by a runner to\n+ * associate each input with its output. The nonce is represented as an opaque set of bytes.\n+ */\n+@SuppressWarnings({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20809fd8ea53e557e74176d2889726528b68080"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ4NjgzOQ==", "bodyText": "Done, scoped down to the offending method.", "url": "https://github.com/apache/beam/pull/13215#discussion_r525486839", "createdAt": "2020-11-17T20:17:57Z", "author": {"login": "rohdesamuel"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/ToStringFnRunner.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.model.pipeline.v1.RunnerApi.PTransform;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.sdk.function.ThrowingFunction;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Translates from elements to human-readable string.\n+ *\n+ * <p>Translation function:\n+ *\n+ * <ul>\n+ *   <li>Input: {@code KV<nonce, element>}\n+ *   <li>Output: {@code KV<nonce, string>}\n+ * </ul>\n+ *\n+ * <p>For each element, the human-readable string is returned. The nonce is used by a runner to\n+ * associate each input with its output. The nonce is represented as an opaque set of bytes.\n+ */\n+@SuppressWarnings({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MTc4NA=="}, "originalCommit": {"oid": "f20809fd8ea53e557e74176d2889726528b68080"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODYxNDk1OnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/ToStringFnRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0NTo0OFrOH0MkfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDoxODowMlrOH1JLXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5Mzk0OA==", "bodyText": "Rather than assigning a value and then overwriting it, do\nif (v == null) {\nval = \"null\";\n} else {\nval = v.toString();\n}\nYou could also just return \"\" + val or, even better, just use Objects.toString(input.getValue()).", "url": "https://github.com/apache/beam/pull/13215#discussion_r524493948", "createdAt": "2020-11-16T18:45:48Z", "author": {"login": "robertwb"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/ToStringFnRunner.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.model.pipeline.v1.RunnerApi.PTransform;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.sdk.function.ThrowingFunction;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Translates from elements to human-readable string.\n+ *\n+ * <p>Translation function:\n+ *\n+ * <ul>\n+ *   <li>Input: {@code KV<nonce, element>}\n+ *   <li>Output: {@code KV<nonce, string>}\n+ * </ul>\n+ *\n+ * <p>For each element, the human-readable string is returned. The nonce is used by a runner to\n+ * associate each input with its output. The nonce is represented as an opaque set of bytes.\n+ */\n+@SuppressWarnings({\n+  \"rawtypes\" // TODO(https://issues.apache.org/jira/browse/BEAM-10556)\n+})\n+public class ToStringFnRunner {\n+  static final String URN = PTransformTranslation.TO_STRING_TRANSFORM_URN;\n+\n+  /**\n+   * A registrar which provides a factory to handle translating elements to a human readable string.\n+   */\n+  @AutoService(PTransformRunnerFactory.Registrar.class)\n+  public static class Registrar implements PTransformRunnerFactory.Registrar {\n+\n+    @Override\n+    public Map<String, PTransformRunnerFactory> getPTransformRunnerFactories() {\n+      return ImmutableMap.of(\n+          URN,\n+          MapFnRunners.forValueMapFnFactory(ToStringFnRunner::createToStringFunctionForPTransform));\n+    }\n+  }\n+\n+  static <T, V> ThrowingFunction<KV<T, V>, KV<T, String>> createToStringFunctionForPTransform(\n+      String ptransformId, PTransform pTransform) {\n+    return (KV<T, V> input) -> {\n+      String val = \"null\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20809fd8ea53e557e74176d2889726528b68080"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ4Njk0Mw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13215#discussion_r525486943", "createdAt": "2020-11-17T20:18:02Z", "author": {"login": "rohdesamuel"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/ToStringFnRunner.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.fn.harness;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.model.pipeline.v1.RunnerApi.PTransform;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.sdk.function.ThrowingFunction;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Translates from elements to human-readable string.\n+ *\n+ * <p>Translation function:\n+ *\n+ * <ul>\n+ *   <li>Input: {@code KV<nonce, element>}\n+ *   <li>Output: {@code KV<nonce, string>}\n+ * </ul>\n+ *\n+ * <p>For each element, the human-readable string is returned. The nonce is used by a runner to\n+ * associate each input with its output. The nonce is represented as an opaque set of bytes.\n+ */\n+@SuppressWarnings({\n+  \"rawtypes\" // TODO(https://issues.apache.org/jira/browse/BEAM-10556)\n+})\n+public class ToStringFnRunner {\n+  static final String URN = PTransformTranslation.TO_STRING_TRANSFORM_URN;\n+\n+  /**\n+   * A registrar which provides a factory to handle translating elements to a human readable string.\n+   */\n+  @AutoService(PTransformRunnerFactory.Registrar.class)\n+  public static class Registrar implements PTransformRunnerFactory.Registrar {\n+\n+    @Override\n+    public Map<String, PTransformRunnerFactory> getPTransformRunnerFactories() {\n+      return ImmutableMap.of(\n+          URN,\n+          MapFnRunners.forValueMapFnFactory(ToStringFnRunner::createToStringFunctionForPTransform));\n+    }\n+  }\n+\n+  static <T, V> ThrowingFunction<KV<T, V>, KV<T, String>> createToStringFunctionForPTransform(\n+      String ptransformId, PTransform pTransform) {\n+    return (KV<T, V> input) -> {\n+      String val = \"null\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5Mzk0OA=="}, "originalCommit": {"oid": "f20809fd8ea53e557e74176d2889726528b68080"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2875, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}