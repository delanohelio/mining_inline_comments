{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzQ1MTc3", "number": 11362, "title": "[BEAM-9733] Always let ImpulseSourceFunction emit a final watermark", "bodyText": "This contains two fixes which are tight to one another:\n[BEAM-9733] Always let ImpulseSourceFunction emit a final watermark\n\nThe Flink Runner's ImpulseSourceFunction does not emit a final watermark, unless\nthe `--shutdownSourcesOnFinalWatermark` flag has been specified (the flag is\nused in tests to shutdown the pipeline after reading all data). Most pipelines\nwill be long-running and thus do not specify the flag.\n\nNot sending out the final watermark causes GroupByKey to hold back the data of\nevent time windows until the pipeline is shut down (the final watermark is\nalways emitted on pipeline shutdown which is why using the above flag works).\n\n\n[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer.\n\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-09T10:34:55Z", "url": "https://github.com/apache/beam/pull/11362", "merged": true, "mergeCommit": {"oid": "4797f310b6671de6fd703502520f4b012b655c82"}, "closed": true, "closedAt": "2020-04-24T10:45:34Z", "author": {"login": "mxm"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV7BQoAFqTM5MDcxOTE0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaa4ASgBqjMyNjQ1NTkyMjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzE5MTQz", "url": "https://github.com/apache/beam/pull/11362#pullrequestreview-390719143", "createdAt": "2020-04-09T11:44:16Z", "commit": {"oid": "07ffc5ef6b39beb09c0a796febf7f43003c522df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTA5OTA5", "url": "https://github.com/apache/beam/pull/11362#pullrequestreview-390909909", "createdAt": "2020-04-09T15:41:12Z", "commit": {"oid": "07ffc5ef6b39beb09c0a796febf7f43003c522df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5a99b070de9198c93c294cbcb00c0a251fe10be", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/a5a99b070de9198c93c294cbcb00c0a251fe10be", "committedDate": "2020-04-12T12:06:52Z", "message": "[BEAM-9733] Make up for timers set while finishing the bundle"}, "afterCommit": {"oid": "d1372bc8e234c0bbe977b6ae39eab3d8e41f8d5a", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/d1372bc8e234c0bbe977b6ae39eab3d8e41f8d5a", "committedDate": "2020-04-14T13:20:07Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the watermark can only be advanced after the current bundle\nfinishes. We have to make up for timers set during bundle processing which only\nallows us to advance the watermark to the lowest output timestamp of a given set\nof timers."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTE2OTM3", "url": "https://github.com/apache/beam/pull/11362#pullrequestreview-393116937", "createdAt": "2020-04-14T16:53:35Z", "commit": {"oid": "d1372bc8e234c0bbe977b6ae39eab3d8e41f8d5a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1372bc8e234c0bbe977b6ae39eab3d8e41f8d5a", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/d1372bc8e234c0bbe977b6ae39eab3d8e41f8d5a", "committedDate": "2020-04-14T13:20:07Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the watermark can only be advanced after the current bundle\nfinishes. We have to make up for timers set during bundle processing which only\nallows us to advance the watermark to the lowest output timestamp of a given set\nof timers."}, "afterCommit": {"oid": "bcab609cba64631af6d350e0e2371f3e52ed3cff", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/bcab609cba64631af6d350e0e2371f3e52ed3cff", "committedDate": "2020-04-17T12:18:27Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcab609cba64631af6d350e0e2371f3e52ed3cff", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/bcab609cba64631af6d350e0e2371f3e52ed3cff", "committedDate": "2020-04-17T12:18:27Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}, "afterCommit": {"oid": "7d5010bd1c6ddd6ed360949a1f809d6ff32fa89b", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/7d5010bd1c6ddd6ed360949a1f809d6ff32fa89b", "committedDate": "2020-04-19T15:51:01Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d416fd101d1385d84668026b2a47dcc5c6a39eab", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/d416fd101d1385d84668026b2a47dcc5c6a39eab", "committedDate": "2020-04-19T18:32:16Z", "message": "[BEAM-9733] Always let ImpulseSourceFunction emit a final watermark\n\nThe Flink Runner's ImpulseSourceFunction does not emit a final watermark, unless\nthe `--shutdownSourcesOnFinalWatermark` flag has been specified (the flag is\nused in tests to shutdown the pipeline after reading all data). Most pipelines\nwill be long-running and thus do not specify the flag.\n\nNot sending out the final watermark causes GroupByKey to hold back the data of\nevent time windows until the pipeline is shut down (the final watermark is\nalways emitted on pipeline shutdown which is why using the above flag works)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d5010bd1c6ddd6ed360949a1f809d6ff32fa89b", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/7d5010bd1c6ddd6ed360949a1f809d6ff32fa89b", "committedDate": "2020-04-19T15:51:01Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}, "afterCommit": {"oid": "b1f566f5139262015f8d801e819a7bbb4d623d49", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/b1f566f5139262015f8d801e819a7bbb4d623d49", "committedDate": "2020-04-19T19:27:33Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Nzc0NDA0", "url": "https://github.com/apache/beam/pull/11362#pullrequestreview-398774404", "createdAt": "2020-04-23T05:44:03Z", "commit": {"oid": "b1f566f5139262015f8d801e819a7bbb4d623d49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo0NDowM1rOGKXj9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo0NDowM1rOGKXj9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNDk4Mw==", "bodyText": "Don't we have to emit pushed back data at this point (up to the side input watermark), even when it is not the final watermark?", "url": "https://github.com/apache/beam/pull/11362#discussion_r413524983", "createdAt": "2020-04-23T05:44:03Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -658,46 +671,69 @@ public void processWatermark1(Watermark mark) throws Exception {\n       emitAllPushedBackData();\n     }\n \n-    setCurrentInputWatermark(mark.getTimestamp());\n+    currentInputWatermark = mark.getTimestamp();\n \n-    if (keyCoder == null) {\n-      long potentialOutputWatermark = Math.min(getPushbackWatermarkHold(), currentInputWatermark);\n-      if (potentialOutputWatermark > currentOutputWatermark) {\n-        setCurrentOutputWatermark(potentialOutputWatermark);\n-        emitWatermark(currentOutputWatermark);\n-      }\n-    } else {\n-      // hold back by the pushed back values waiting for side inputs\n-      long pushedBackInputWatermark = Math.min(getPushbackWatermarkHold(), mark.getTimestamp());\n+    long inputWatermarkHold = applyInputWatermarkHold(getEffectiveInputWatermark());\n+    if (keyCoder != null) {\n+      timeServiceManager.advanceWatermark(new Watermark(inputWatermarkHold));\n+    }\n \n-      timeServiceManager.advanceWatermark(new Watermark(pushedBackInputWatermark));\n+    long potentialOutputWatermark =\n+        applyOutputWatermarkHold(\n+            currentOutputWatermark, computeOutputWatermark(inputWatermarkHold));\n+    maybeEmitWatermark(potentialOutputWatermark);\n+  }\n \n-      Instant watermarkHold = keyedStateInternals.watermarkHold();\n+  /**\n+   * Allows to apply a hold to the input watermark. By default, just passes the input watermark\n+   * through.\n+   */\n+  public long applyInputWatermarkHold(long inputWatermark) {\n+    return inputWatermark;\n+  }\n \n-      long combinedWatermarkHold = Math.min(watermarkHold.getMillis(), getPushbackWatermarkHold());\n-      combinedWatermarkHold =\n-          Math.min(combinedWatermarkHold, timerInternals.getMinOutputTimestampMs());\n-      long potentialOutputWatermark = Math.min(pushedBackInputWatermark, combinedWatermarkHold);\n+  /**\n+   * Allows to apply a hold to the output watermark before it is send out. By default, just passes\n+   * the potential output watermark through which will make it the new output watermark.\n+   *\n+   * @param currentOutputWatermark the current output watermark\n+   * @param potentialOutputWatermark The potential new output watermark which can be adjusted, if\n+   *     needed. The input watermark hold has already been applied.\n+   * @return The new output watermark which will be emitted.\n+   */\n+  public long applyOutputWatermarkHold(long currentOutputWatermark, long potentialOutputWatermark) {\n+    return potentialOutputWatermark;\n+  }\n \n-      if (potentialOutputWatermark > currentOutputWatermark) {\n-        setCurrentOutputWatermark(potentialOutputWatermark);\n-        emitWatermark(currentOutputWatermark);\n-      }\n+  private long computeOutputWatermark(long inputWatermarkHold) {\n+    final long potentialOutputWatermark;\n+    if (keyCoder == null) {\n+      potentialOutputWatermark = inputWatermarkHold;\n+    } else {\n+      Instant watermarkHold = keyedStateInternals.watermarkHold();\n+      long combinedWatermarkHold = Math.min(watermarkHold.getMillis(), inputWatermarkHold);\n+      potentialOutputWatermark =\n+          Math.min(combinedWatermarkHold, timerInternals.getMinOutputTimestampMs());\n     }\n+    return potentialOutputWatermark;\n   }\n \n-  private void emitWatermark(long watermark) {\n-    // Must invoke finishBatch before emit the +Inf watermark otherwise there are some late events.\n-    if (watermark >= BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis()) {\n-      invokeFinishBundle();\n+  private void maybeEmitWatermark(long watermark) {\n+    if (watermark > currentOutputWatermark) {\n+      // Must invoke finishBatch before emit the +Inf watermark otherwise there are some late\n+      // events.\n+      if (watermark >= BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis()) {\n+        invokeFinishBundle();\n+      }\n+      LOG.debug(\"Emitting watermark {}\", watermark);\n+      currentOutputWatermark = watermark;\n+      output.emitWatermark(new Watermark(watermark));\n     }\n-    output.emitWatermark(new Watermark(watermark));\n   }\n \n   @Override\n-  public void processWatermark2(Watermark mark) throws Exception {\n-\n-    setCurrentSideInputWatermark(mark.getTimestamp());\n+  public final void processWatermark2(Watermark mark) throws Exception {\n+    currentSideInputWatermark = mark.getTimestamp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f566f5139262015f8d801e819a7bbb4d623d49"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzgyNTcw", "url": "https://github.com/apache/beam/pull/11362#pullrequestreview-398782570", "createdAt": "2020-04-23T06:05:17Z", "commit": {"oid": "b1f566f5139262015f8d801e819a7bbb4d623d49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjowNToxN1rOGKYD3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjowNToxN1rOGKYD3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUzMzE0OA==", "bodyText": "The comment is a bit misleading. How about: \"We are scheduling a timer for advancing the watermark, to not delay finishing the bundle and temporarily release the checkpoint lock. Otherwise, we could potentially loop when a timer keeps scheduling a timer for the same timestamp.\"", "url": "https://github.com/apache/beam/pull/11362#discussion_r413533148", "createdAt": "2020-04-23T06:05:17Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java", "diffHunk": "@@ -544,30 +601,49 @@ public void processWatermark(Watermark mark) throws Exception {\n     // every watermark. So we have implemented 2) below.\n     //\n     if (sdkHarnessRunner.isBundleInProgress()) {\n-      if (mark.getTimestamp() >= BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis()) {\n-        invokeFinishBundle();\n-        setPushedBackWatermark(Long.MAX_VALUE);\n+      if (minEventTimeTimerTimestampInLastBundle < Long.MAX_VALUE) {\n+        // We can safely advance the watermark to before the last bundle's minimum event timer\n+        // but not past the potential output watermark which includes holds to the input watermark.\n+        return Math.min(minEventTimeTimerTimestampInLastBundle - 1, potentialOutputWatermark);\n       } else {\n-        // It is not safe to advance the output watermark yet, so add a hold on the current\n-        // output watermark.\n-        backupWatermarkHold = Math.max(backupWatermarkHold, getPushbackWatermarkHold());\n-        setPushedBackWatermark(Math.min(currentOutputWatermark, backupWatermarkHold));\n-        super.setBundleFinishedCallback(\n-            () -> {\n-              try {\n-                LOG.debug(\"processing pushed back watermark: {}\", mark);\n-                // at this point the bundle is finished, allow the watermark to pass\n-                // we are restoring the previous hold in case it was already set for side inputs\n-                setPushedBackWatermark(backupWatermarkHold);\n-                super.processWatermark(mark);\n-              } catch (Exception e) {\n-                throw new RuntimeException(\n-                    \"Failed to process pushed back watermark after finished bundle.\", e);\n-              }\n-            });\n+        // We don't have any information yet, use the current output watermark for now.\n+        return currentOutputWatermark;\n+      }\n+    } else {\n+      // No bundle was started when we advanced the input watermark.\n+      // Thus, we can safely set a new output watermark.\n+      return potentialOutputWatermark;\n+    }\n+  }\n+\n+  private void preBundleStartCallback() {\n+    inputWatermarkBeforeBundleStart = getEffectiveInputWatermark();\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  private void finishBundleCallback() {\n+    minEventTimeTimerTimestampInLastBundle = minEventTimeTimerTimestampInCurrentBundle;\n+    minEventTimeTimerTimestampInCurrentBundle = Long.MAX_VALUE;\n+    try {\n+      if (!closed\n+          && minEventTimeTimerTimestampInLastBundle < Long.MAX_VALUE\n+          && minEventTimeTimerTimestampInLastBundle <= getEffectiveInputWatermark()) {\n+        ProcessingTimeService processingTimeService = getProcessingTimeService();\n+        // We are scheduling a timer for advancing the watermark. Otherwise we\n+        // could potentially loop forever here when a timer keeps scheduling a timer\n+        // for the same timestamp. This in itself would not be an issue. However,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f566f5139262015f8d801e819a7bbb4d623d49"}, "originalPosition": 199}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "643945a8e44b33e216e58b1405076179617f7740", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/643945a8e44b33e216e58b1405076179617f7740", "committedDate": "2020-04-23T11:06:29Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1f566f5139262015f8d801e819a7bbb4d623d49", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/b1f566f5139262015f8d801e819a7bbb4d623d49", "committedDate": "2020-04-19T19:27:33Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}, "afterCommit": {"oid": "643945a8e44b33e216e58b1405076179617f7740", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/643945a8e44b33e216e58b1405076179617f7740", "committedDate": "2020-04-23T11:06:29Z", "message": "[BEAM-9733] Make up for timers set while processing the bundle\n\nDue to the asynchronous nature of the bundle processing which includes access to\nstate and timers, the output watermark can only be advanced after the current\nbundle has finished. Furthermore, we have to take care to only advance it to the\nlowest newly set timer in the finished bundle. Otherwise we would be violating\nthe watermark contract.\n\nBesides the problem of advancing the output watermark too soon, the current\nmodel was also overly restrictive with handling the input watermark. The input\nwatermark would be pushed back until the end of the bundle. This is not\nnecessary as we can advance the input watermark freely during bundle processing\nwhich can trigger timers as soon as they become eligible for firing. Special\ncare has to be taken to handle cleanup timers which may already fire when we\nhaven't collected all the timers from the SDK Harness. In case we end up with\nnew timers for a window for which the cleanup timer scheduled a cleanup at the\nend of the bundle, we have to defer the cleanup and reschedule the cleanup\ntimer. Otherwise, we would lose all state for a timer."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4573, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}