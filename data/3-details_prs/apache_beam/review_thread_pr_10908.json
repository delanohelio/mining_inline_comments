{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDcyMjE4", "number": 10908, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjo0MzoxMFrODhUQmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjo0NzoyOFrODhUXZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjYxNTI4OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjo0MzoxMFrOFsAZWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOToyODo1OVrOFsgSoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY4ODE1NA==", "bodyText": "nit: should we add a reference to clarify what old/new metrics are ?", "url": "https://github.com/apache/beam/pull/10908#discussion_r381688154", "createdAt": "2020-02-20T02:43:10Z", "author": {"login": "chamikaramj"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1209,6 +1209,30 @@ message ExternalPayload {\n   map<string, string> params = 2;  // Arbitrary extra parameters to pass\n }\n \n+// These URNs are used to indicate capabilities of environments that cannot\n+// simply be expressed as a component (such as a Coder or PTransform) that this\n+// environment understands.\n+message StandardProtocols {\n+  enum Enum {\n+    // Indicates suport for progress reporting via the legacy metric APIs.\n+    LEGACY_PROGRESS_REPORTING = 0 [(beam_urn) = \"beam:protocol:progress_reporting:v0\"];\n+\n+    // Indicates suport for progress reporting via the new metric APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f4de4201fc4fde3c8d8f94329b12dbb5e5e3b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxMDcyMA==", "bodyText": "Good point. Done.", "url": "https://github.com/apache/beam/pull/10908#discussion_r382210720", "createdAt": "2020-02-20T19:28:59Z", "author": {"login": "robertwb"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1209,6 +1209,30 @@ message ExternalPayload {\n   map<string, string> params = 2;  // Arbitrary extra parameters to pass\n }\n \n+// These URNs are used to indicate capabilities of environments that cannot\n+// simply be expressed as a component (such as a Coder or PTransform) that this\n+// environment understands.\n+message StandardProtocols {\n+  enum Enum {\n+    // Indicates suport for progress reporting via the legacy metric APIs.\n+    LEGACY_PROGRESS_REPORTING = 0 [(beam_urn) = \"beam:protocol:progress_reporting:v0\"];\n+\n+    // Indicates suport for progress reporting via the new metric APIs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY4ODE1NA=="}, "originalCommit": {"oid": "06f4de4201fc4fde3c8d8f94329b12dbb5e5e3b9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjYzMjY4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/environments_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjo0NzoyOFrOFsAh7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjo0NzoyOFrOFsAh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY5MDM1MQ==", "bodyText": "Probably test for every expected capability here ? And also force failure if the test has not been updated to reflect a new capability ?\nThe test can be updated as the list of capabilities are updated.", "url": "https://github.com/apache/beam/pull/10908#discussion_r381690351", "createdAt": "2020-02-20T02:47:28Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/transforms/environments_test.py", "diffHunk": "@@ -53,10 +63,14 @@ def test_environment_encoding(self):\n                             state_cache_size=0, data_buffer_time_limit_ms=0),\n                         SubprocessSDKEnvironment(command_string=u'fo\u00f6')):\n       context = pipeline_context.PipelineContext()\n-      self.assertEqual(\n-          environment,\n-          Environment.from_runner_api(\n-              environment.to_runner_api(context), context))\n+      proto = environment.to_runner_api(context)\n+      reconstructed = Environment.from_runner_api(proto, context)\n+      self.assertEqual(environment, reconstructed)\n+      self.assertEqual(proto, reconstructed.to_runner_api(context))\n+\n+  def test_sdk_capabilities(self):\n+    sdk_capabilities = environments.python_sdk_capabilities()\n+    self.assertIn(common_urns.coders.LENGTH_PREFIX.urn, sdk_capabilities)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f4de4201fc4fde3c8d8f94329b12dbb5e5e3b9"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1846, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}