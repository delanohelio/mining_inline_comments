{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODMwNDA0", "number": 12981, "title": "[BEAM-10435] Add LOOPBACK mode Java ValidatesRunner test suite for ULR", "bodyText": "This just adds the additional gradle target. TODO: add continuous Jenkins runs. It looks like it takes long enough it has to be a postcommit.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-30T22:48:13Z", "url": "https://github.com/apache/beam/pull/12981", "merged": true, "mergeCommit": {"oid": "2f2ae6b330e77309c20cf172a7a30289da53d178"}, "closed": true, "closedAt": "2020-10-01T13:50:07Z", "author": {"login": "kennknowles"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOFK-IgFqTQ5OTg3MjE2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOFfcrgBqjM4MjY4NTEzMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODcyMTYw", "url": "https://github.com/apache/beam/pull/12981#pullrequestreview-499872160", "createdAt": "2020-09-30T23:09:25Z", "commit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzowOToyNVrOHayWEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMzowOFrOHayatw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0OTg3Mw==", "bodyText": "Noting that my previous approach did not work. The property was always set by the time the conditional was checked. I had only verified it against a job service that I launched externally so did not catch that the logic was flawed. This approach does work, by setting needsLocalJobService earlier.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497849873", "createdAt": "2020-09-30T23:09:25Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -50,27 +50,32 @@ dependencies {\n   validatesRunner project(path: project.path, configuration: \"testRuntime\")\n }\n \n-\n project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":sdks:python\")\n project.evaluationDependsOn(\":runners:core-java\")\n \n-ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.pythonSdkDir = project.findProject(\":sdks:python\").getProjectDir().getAbsoluteFile().toString()\n+\n+// If this is set via -P then we assume it is already running and will not start it\n+def needsLocalJobService = !project.hasProperty(\"localJobServicePortFile\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDIwMA==", "bodyText": "The prior reference to pythonSdkDir was actually an unbound variable.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850200", "createdAt": "2020-09-30T23:10:22Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -50,27 +50,32 @@ dependencies {\n   validatesRunner project(path: project.path, configuration: \"testRuntime\")\n }\n \n-\n project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":sdks:python\")\n project.evaluationDependsOn(\":runners:core-java\")\n \n-ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.pythonSdkDir = project.findProject(\":sdks:python\").getProjectDir().getAbsoluteFile().toString()\n+\n+// If this is set via -P then we assume it is already running and will not start it\n+def needsLocalJobService = !project.hasProperty(\"localJobServicePortFile\")\n+\n ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+\n ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n \n void execInVirtualenv(String... args) {\n   String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n   exec {\n-    workingDir pythonSdkDir\n+    workingDir project.ext.pythonSdkDir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDI4MQ==", "bodyText": "Left in accidentally ;_;", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850281", "createdAt": "2020-09-30T23:10:38Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -50,27 +50,32 @@ dependencies {\n   validatesRunner project(path: project.path, configuration: \"testRuntime\")\n }\n \n-\n project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":sdks:python\")\n project.evaluationDependsOn(\":runners:core-java\")\n \n-ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.pythonSdkDir = project.findProject(\":sdks:python\").getProjectDir().getAbsoluteFile().toString()\n+\n+// If this is set via -P then we assume it is already running and will not start it\n+def needsLocalJobService = !project.hasProperty(\"localJobServicePortFile\")\n+\n ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+\n ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n \n void execInVirtualenv(String... args) {\n   String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n   exec {\n-    workingDir pythonSdkDir\n+    workingDir project.ext.pythonSdkDir\n     commandLine \"sh\", \"-c\", shellCommand\n   }\n }\n \n // Does not background the process, but allows the process to daemonize itself\n void execBackgroundInVirtualenv(String... args) {\n   String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n-  println \"execBackgroundInVirtualEnv: ${shellCommand}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDQ4MQ==", "bodyText": "I did not understand previously that the Beam SDK and requirements were not installed into the virtualenv. Again, masked by the fact that I only ran it with -PlocalJobServicePortFile hence did not test the virtualenv setup properly.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850481", "createdAt": "2020-09-30T23:11:17Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -82,8 +87,15 @@ void execBackgroundInVirtualenv(String... args) {\n   proc.waitFor();\n }\n \n-task startLocalJobService {\n+task installBeamPythonInVirtualenv {\n   dependsOn setupVirtualenv\n+  doLast {\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDczNw==", "bodyText": "Previously, only a special case of UsesTestStreamWithMultipleStages was sickbayed. But I got a failure of being unable to understand the URN beam:transforms:teststream:v1 so I interpret that to mean it is not supported at all.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850737", "createdAt": "2020-09-30T23:12:08Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesMapState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesSetState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOrderedListState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesTestStream'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDg0Ng==", "bodyText": "UsesBundleFinalizer is also new since the initial setup of the VR gradle task.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850846", "createdAt": "2020-09-30T23:12:31Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MTA2Mw==", "bodyText": "This failure is new and seems problematic. It is an elementary test from the very beginning of Beam. It was not failing before.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497851063", "createdAt": "2020-09-30T23:13:08Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesMapState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesSetState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOrderedListState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesTestStream'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesTimersInParDo'\n+    }\n+    filter {\n+      // There is not currently a category for excluding these _only_ in committed mode\n+      // https://issues.apache.org/jira/browse/BEAM-10445\n+      excludeTestsMatching 'org.apache.beam.sdk.metrics.MetricsTest$CommittedMetricTests.testCommittedCounterMetrics'\n+      // https://issues.apache.org/jira/browse/BEAM-10446\n+      excludeTestsMatching 'org.apache.beam.sdk.metrics.MetricsTest$CommittedMetricTests.testCommittedDistributionMetrics'\n+  \n+      // This test seems erroneously labeled ValidatesRunner\n+      excludeTestsMatching 'org.apache.beam.sdk.schemas.AvroSchemaTest.testAvroPipelineGroupBy'\n+  \n+      // Teardown not called in exceptions\n+      // https://issues.apache.org/jira/browse/BEAM-10447\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInFinishBundle'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInFinishBundleStateful'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInProcessElement'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInProcessElementStateful'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInSetup'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInSetupStateful'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInStartBundle'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInStartBundleStateful'\n+  \n+      // Only known window fns supported, not general window merging\n+      // https://issues.apache.org/jira/browse/BEAM-10448\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowTest.testMergingCustomWindows'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowTest.testMergingCustomWindowsKeyedCollection'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowingTest.testMergingWindowing'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowingTest.testNonPartitioningWindowing'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.GroupByKeyTest$WindowTests.testGroupByKeyMergingWindows'\n+\n+      // Flatten with empty PCollections hangs\n+      // https://issues.apache.org/jira/browse/BEAM-10450\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.FlattenTest.testEmptyFlattenAsSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.FlattenTest.testFlattenPCollectionsEmpty'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.FlattenTest.testFlattenPCollectionsEmptyThenParDo'\n+  \n+      // Empty side inputs hang\n+      // https://issues.apache.org/jira/browse/BEAM-10449\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testWindowedSideInputFixedToFixedWithDefault'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyIterableSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptySingletonSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyListSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMultimapSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMultimapSideInputWithNonDeterministicKeyCoder'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMapSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMapSideInputWithNonDeterministicKeyCoder'\n+  \n+      // Misc failures\n+      // https://issues.apache.org/jira/browse/BEAM-10451\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$WindowingTests.testGlobalCombineWithDefaultsAndTriggers'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$WindowingTests.testSessionsCombine'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$WindowingTests.testSessionsCombineWithContext'\n+  \n+      // https://issues.apache.org/jira/browse/BEAM-10454\n+      excludeTestsMatching 'org.apache.beam.sdk.testing.PAssertTest.testWindowedIsEqualTo'\n+  \n+      // https://issues.apache.org/jira/browse/BEAM-10453\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ReshuffleTest.testReshuffleWithTimestampsStreaming'\n+  \n+      // https://issues.apache.org/jira/browse/BEAM-10452\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$BasicTests.testHotKeyCombiningWithAccumulationMode'\n+\n+      // https://issues.apache.org/jira/browse/BEAM-10995\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowingTest.testWindowPreservation'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODgwMTg2", "url": "https://github.com/apache/beam/pull/12981#pullrequestreview-499880186", "createdAt": "2020-09-30T23:29:31Z", "commit": {"oid": "626300157768a199cb1ec6c1326f85e6aa2b5902"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4fb93c1f6ee54e20b62f68b5d8817a524b11408", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/c4fb93c1f6ee54e20b62f68b5d8817a524b11408", "committedDate": "2020-09-30T23:35:53Z", "message": "Add LOOPBACK mode Java ValidatesRunner test suite for ULR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec613a7672275039af370ceb676dd8720d60b696", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/ec613a7672275039af370ceb676dd8720d60b696", "committedDate": "2020-09-30T23:35:53Z", "message": "Add ULR LOOPBACK ValidatesRunner Jenkins Job"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "626300157768a199cb1ec6c1326f85e6aa2b5902", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/626300157768a199cb1ec6c1326f85e6aa2b5902", "committedDate": "2020-09-30T23:20:11Z", "message": "Add ULR LOOPBACK ValidatesRunner Jenkins Job"}, "afterCommit": {"oid": "ec613a7672275039af370ceb676dd8720d60b696", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/ec613a7672275039af370ceb676dd8720d60b696", "committedDate": "2020-09-30T23:35:53Z", "message": "Add ULR LOOPBACK ValidatesRunner Jenkins Job"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2200, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}