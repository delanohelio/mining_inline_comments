{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2ODUxMDY2", "number": 10684, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo0Nzo1OVrODansaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOTo0NjoxMlrODeIZKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjM5OTE1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/opcodes.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo0Nzo1OVrOFhrVPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo1OTozMFrOFiFrgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NzI3OA==", "bodyText": "Not sure I like this change: and should be at the end of this line.", "url": "https://github.com/apache/beam/pull/10684#discussion_r370857278", "createdAt": "2020-01-24T21:47:59Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/opcodes.py", "diffHunk": "@@ -268,14 +266,14 @@ def load_attr(state, arg):\n   name = state.get_name(arg)\n   if isinstance(o, Const) and hasattr(o.value, name):\n     state.stack.append(Const(getattr(o.value, name)))\n-  elif (inspect.isclass(o) and\n-        isinstance(getattr(o, name, None),\n-                   (types.MethodType, types.FunctionType))):\n+  elif (inspect.isclass(o)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MDIzMA==", "bodyText": "I believe the knob\nSPLIT_BEFORE_LOGICAL_OPERATOR = false\nwould change this.", "url": "https://github.com/apache/beam/pull/10684#discussion_r370860230", "createdAt": "2020-01-24T21:56:12Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/opcodes.py", "diffHunk": "@@ -268,14 +266,14 @@ def load_attr(state, arg):\n   name = state.get_name(arg)\n   if isinstance(o, Const) and hasattr(o.value, name):\n     state.stack.append(Const(getattr(o.value, name)))\n-  elif (inspect.isclass(o) and\n-        isinstance(getattr(o, name, None),\n-                   (types.MethodType, types.FunctionType))):\n+  elif (inspect.isclass(o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NzI3OA=="}, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4ODk2Mg==", "bodyText": "That's right, it worked", "url": "https://github.com/apache/beam/pull/10684#discussion_r371288962", "createdAt": "2020-01-27T14:59:30Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/typehints/opcodes.py", "diffHunk": "@@ -268,14 +266,14 @@ def load_attr(state, arg):\n   name = state.get_name(arg)\n   if isinstance(o, Const) and hasattr(o.value, name):\n     state.stack.append(Const(getattr(o.value, name)))\n-  elif (inspect.isclass(o) and\n-        isinstance(getattr(o, name, None),\n-                   (types.MethodType, types.FunctionType))):\n+  elif (inspect.isclass(o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NzI3OA=="}, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQwMTI2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo0OTowMVrOFhrWlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToxOTo1NlrOFio-Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NzYyMQ==", "bodyText": "The , ] at the end looks odd.", "url": "https://github.com/apache/beam/pull/10684#discussion_r370857621", "createdAt": "2020-01-24T21:49:01Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -68,24 +68,23 @@ def instance_to_type(o):\n     return typehints.Tuple[[instance_to_type(item) for item in o]]\n   elif t == list:\n     if len(o) > 0:\n-      return typehints.List[\n-          typehints.Union[[instance_to_type(item) for item in o]]\n-      ]\n+      return typehints.List[typehints.Union[[\n+          instance_to_type(item) for item in o\n+      ]]]\n     else:\n       return typehints.List[typehints.Any]\n   elif t == set:\n     if len(o) > 0:\n-      return typehints.Set[\n-          typehints.Union[[instance_to_type(item) for item in o]]\n-      ]\n+      return typehints.Set[typehints.Union[[\n+          instance_to_type(item) for item in o\n+      ]]]\n     else:\n       return typehints.Set[typehints.Any]\n   elif t == dict:\n     if len(o) > 0:\n       return typehints.Dict[\n           typehints.Union[[instance_to_type(k) for k, v in o.items()]],\n-          typehints.Union[[instance_to_type(v) for k, v in o.items()]],\n-      ]\n+          typehints.Union[[instance_to_type(v) for k, v in o.items()]], ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NzIxOA==", "bodyText": "It's OK now.", "url": "https://github.com/apache/beam/pull/10684#discussion_r371867218", "createdAt": "2020-01-28T15:19:56Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -68,24 +68,23 @@ def instance_to_type(o):\n     return typehints.Tuple[[instance_to_type(item) for item in o]]\n   elif t == list:\n     if len(o) > 0:\n-      return typehints.List[\n-          typehints.Union[[instance_to_type(item) for item in o]]\n-      ]\n+      return typehints.List[typehints.Union[[\n+          instance_to_type(item) for item in o\n+      ]]]\n     else:\n       return typehints.List[typehints.Any]\n   elif t == set:\n     if len(o) > 0:\n-      return typehints.Set[\n-          typehints.Union[[instance_to_type(item) for item in o]]\n-      ]\n+      return typehints.Set[typehints.Union[[\n+          instance_to_type(item) for item in o\n+      ]]]\n     else:\n       return typehints.Set[typehints.Any]\n   elif t == dict:\n     if len(o) > 0:\n       return typehints.Dict[\n           typehints.Union[[instance_to_type(k) for k, v in o.items()]],\n-          typehints.Union[[instance_to_type(v) for k, v in o.items()]],\n-      ]\n+          typehints.Union[[instance_to_type(v) for k, v in o.items()]], ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NzYyMQ=="}, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQwMzU0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1MDowMVrOFhrX8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToyMDowNlrOFio-yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1Nzk3MA==", "bodyText": "This change makes things less readable IMO.", "url": "https://github.com/apache/beam/pull/10684#discussion_r370857970", "createdAt": "2020-01-24T21:50:01Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -303,10 +302,8 @@ def infer_return_type(c, input_types, debug=False, depth=5):\n     elif inspect.isclass(c):\n       if c in typehints.DISALLOWED_PRIMITIVE_TYPES:\n         return {\n-            list: typehints.List[Any],\n-            set: typehints.Set[Any],\n-            tuple: typehints.Tuple[Any, ...],\n-            dict: typehints.Dict[Any, Any]\n+            list: typehints.List[Any], set: typehints.Set[Any], tuple:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTA0Ng==", "bodyText": "The knob for this is each_dict_entry_on_separate_line I believe.", "url": "https://github.com/apache/beam/pull/10684#discussion_r370861046", "createdAt": "2020-01-24T21:58:38Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -303,10 +302,8 @@ def infer_return_type(c, input_types, debug=False, depth=5):\n     elif inspect.isclass(c):\n       if c in typehints.DISALLOWED_PRIMITIVE_TYPES:\n         return {\n-            list: typehints.List[Any],\n-            set: typehints.Set[Any],\n-            tuple: typehints.Tuple[Any, ...],\n-            dict: typehints.Dict[Any, Any]\n+            list: typehints.List[Any], set: typehints.Set[Any], tuple:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1Nzk3MA=="}, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NzMzOQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10684#discussion_r371867339", "createdAt": "2020-01-28T15:20:06Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -303,10 +302,8 @@ def infer_return_type(c, input_types, debug=False, depth=5):\n     elif inspect.isclass(c):\n       if c in typehints.DISALLOWED_PRIMITIVE_TYPES:\n         return {\n-            list: typehints.List[Any],\n-            set: typehints.Set[Any],\n-            tuple: typehints.Tuple[Any, ...],\n-            dict: typehints.Dict[Any, Any]\n+            list: typehints.List[Any], set: typehints.Set[Any], tuple:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1Nzk3MA=="}, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQwNDk0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1MDozOVrOFhrYyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1MDozOVrOFhrYyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODE4NA==", "bodyText": "same", "url": "https://github.com/apache/beam/pull/10684#discussion_r370858184", "createdAt": "2020-01-24T21:50:39Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -356,8 +353,8 @@ def infer_return_type_func(f, input_types, debug=False, depth=0):\n   yields = set()\n   returns = set()\n   # TODO(robertwb): Default args via inspect module.\n-  local_vars = list(input_types) + [typehints.Union[()]] * (len(co.co_varnames)\n-                                                            - len(input_types))\n+  local_vars = list(input_types) + [typehints.Union[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQwOTIwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/trivial_inference_test_py3.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1MjozOVrOFhrbaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTowNToyN1rOFiF56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODg1Ng==", "bodyText": "ALLOW_MULTILINE_LAMBDAS = false", "url": "https://github.com/apache/beam/pull/10684#discussion_r370858856", "createdAt": "2020-01-24T21:52:39Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/trivial_inference_test_py3.py", "diffHunk": "@@ -43,8 +42,8 @@ def testBuildListUnpack(self):\n \n   def testBuildTupleUnpack(self):\n     # Lambda uses BUILD_TUPLE_UNPACK opcode in Python 3.\n-    self.assertReturnType(typehints.Tuple[int, str, str],\n-                          lambda _list1, _list2: (*_list1, *_list2, *_list2),\n+    self.assertReturnType(typehints.Tuple[int, str, str], lambda _list1, _list2:\n+                          (*_list1, *_list2, *_list2),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwODYxMQ==", "bodyText": "Weird. Looks like this knob is turned off by default, but the lambda is getting split anyway", "url": "https://github.com/apache/beam/pull/10684#discussion_r371208611", "createdAt": "2020-01-27T12:18:10Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/typehints/trivial_inference_test_py3.py", "diffHunk": "@@ -43,8 +42,8 @@ def testBuildListUnpack(self):\n \n   def testBuildTupleUnpack(self):\n     # Lambda uses BUILD_TUPLE_UNPACK opcode in Python 3.\n-    self.assertReturnType(typehints.Tuple[int, str, str],\n-                          lambda _list1, _list2: (*_list1, *_list2, *_list2),\n+    self.assertReturnType(typehints.Tuple[int, str, str], lambda _list1, _list2:\n+                          (*_list1, *_list2, *_list2),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODg1Ng=="}, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI5MjY1MQ==", "bodyText": "I've disabled formatting for this block", "url": "https://github.com/apache/beam/pull/10684#discussion_r371292651", "createdAt": "2020-01-27T15:05:27Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/typehints/trivial_inference_test_py3.py", "diffHunk": "@@ -43,8 +42,8 @@ def testBuildListUnpack(self):\n \n   def testBuildTupleUnpack(self):\n     # Lambda uses BUILD_TUPLE_UNPACK opcode in Python 3.\n-    self.assertReturnType(typehints.Tuple[int, str, str],\n-                          lambda _list1, _list2: (*_list1, *_list2, *_list2),\n+    self.assertReturnType(typehints.Tuple[int, str, str], lambda _list1, _list2:\n+                          (*_list1, *_list2, *_list2),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODg1Ng=="}, "originalCommit": {"oid": "6baa4d4d2d8cf6e14348c55a521e38e9f84b8d21"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTIxMzg0OnYy", "diffSide": "RIGHT", "path": "sdks/python/test-suites/tox/py37/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOTo0NjoxMlrOFnIR3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzoyNDoxMVrOFnNGjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDQzMA==", "bodyText": "I missed this in my review. The lint precommit runs :pythonLintPreCommit, which depends on lint tasks.\nSuggestion:\nlint.dependsOn formatter", "url": "https://github.com/apache/beam/pull/10684#discussion_r376574430", "createdAt": "2020-02-07T19:46:12Z", "author": {"login": "udim"}, "path": "sdks/python/test-suites/tox/py37/build.gradle", "diffHunk": "@@ -35,6 +35,9 @@ lint.dependsOn lintPy37\n toxTask \"mypyPy37\", \"py37-mypy\"\n lint.dependsOn mypyPy37\n \n+toxTask \"formatter\", \"py3-yapf-check\"\n+check.dependsOn formatter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa102c871da4db661d0d2ebde98545e61d2a9d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1MzQ1NA==", "bodyText": "Nevermind, I see there's a new job named PythonFormatter", "url": "https://github.com/apache/beam/pull/10684#discussion_r376653454", "createdAt": "2020-02-07T23:24:11Z", "author": {"login": "udim"}, "path": "sdks/python/test-suites/tox/py37/build.gradle", "diffHunk": "@@ -35,6 +35,9 @@ lint.dependsOn lintPy37\n toxTask \"mypyPy37\", \"py37-mypy\"\n lint.dependsOn mypyPy37\n \n+toxTask \"formatter\", \"py3-yapf-check\"\n+check.dependsOn formatter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDQzMA=="}, "originalCommit": {"oid": "4fa102c871da4db661d0d2ebde98545e61d2a9d4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2257, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}