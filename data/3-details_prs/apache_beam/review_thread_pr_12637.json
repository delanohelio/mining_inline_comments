{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDc2NTMy", "number": 12637, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoxMToxMVrOEapm5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTozNToyMFrOEl2Ong==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzgwMTM1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoxMToxMVrOHENiuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTo0MjoyMFrOHUcq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODIzMw==", "bodyText": "I don't think this change updates the test to test the correct expectations since we should be testing that multiple messages are received in order over the channel.\nI believe send doesn't have the correct semantics since we want to have a persistent stream for the life of this test and to control when it gets closed after sending for a specific instruction,transform pair is done.", "url": "https://github.com/apache/beam/pull/12637#discussion_r474178233", "createdAt": "2020-08-20T18:11:11Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -99,35 +100,33 @@ def send(instruction_id, transform_id, data):\n \n     # Single write.\n     send('0', transform_1, b'abc')\n-    self.assertEqual(\n+    hc.assert_that(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98dffcf4ded012d765b606ab5d9a90861583f19e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTEzMQ==", "bodyText": "Also, we may want to have a sleep in the time based test to force a flush sometimes between messages (which likely means we should test with more messages).", "url": "https://github.com/apache/beam/pull/12637#discussion_r474179131", "createdAt": "2020-08-20T18:12:45Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -99,35 +100,33 @@ def send(instruction_id, transform_id, data):\n \n     # Single write.\n     send('0', transform_1, b'abc')\n-    self.assertEqual(\n+    hc.assert_that(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODIzMw=="}, "originalCommit": {"oid": "98dffcf4ded012d765b606ab5d9a90861583f19e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2NTY2NA==", "bodyText": "So is the correct fix to create stream outside of send and re-use it? Or do we need a stream per assertion?", "url": "https://github.com/apache/beam/pull/12637#discussion_r487165664", "createdAt": "2020-09-11T16:46:28Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -99,35 +100,33 @@ def send(instruction_id, transform_id, data):\n \n     # Single write.\n     send('0', transform_1, b'abc')\n-    self.assertEqual(\n+    hc.assert_that(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODIzMw=="}, "originalCommit": {"oid": "98dffcf4ded012d765b606ab5d9a90861583f19e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MDIzNQ==", "bodyText": "Yes, the stream should be created outside of send so that its lifetime can be explicitly managed in the test based upon what the test is trying to do.", "url": "https://github.com/apache/beam/pull/12637#discussion_r487190235", "createdAt": "2020-09-11T17:34:10Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -99,35 +100,33 @@ def send(instruction_id, transform_id, data):\n \n     # Single write.\n     send('0', transform_1, b'abc')\n-    self.assertEqual(\n+    hc.assert_that(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODIzMw=="}, "originalCommit": {"oid": "98dffcf4ded012d765b606ab5d9a90861583f19e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMzMxOA==", "bodyText": "I implemented some of your suggestions Luke. PTAL", "url": "https://github.com/apache/beam/pull/12637#discussion_r491203318", "createdAt": "2020-09-18T21:42:20Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -99,35 +100,33 @@ def send(instruction_id, transform_id, data):\n \n     # Single write.\n     send('0', transform_1, b'abc')\n-    self.assertEqual(\n+    hc.assert_that(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3ODIzMw=="}, "originalCommit": {"oid": "98dffcf4ded012d765b606ab5d9a90861583f19e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTIxMjQ2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTozNToyMFrOHVjPww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowNjo0NlrOHWKdHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1OTYxOQ==", "bodyText": "Why do we need to wait for the flush, shouldn't the earlier stream21.write(b'def') provide the correct ordering?", "url": "https://github.com/apache/beam/pull/12637#discussion_r492359619", "createdAt": "2020-09-21T21:35:20Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -108,16 +106,28 @@ def send(instruction_id, transform_id, data):\n         ])\n \n     # Multiple interleaved writes to multiple instructions.\n-    send('1', transform_1, b'abc')\n-    send('2', transform_1, b'def')\n+    stream11 = from_channel.output_stream('1', transform_1)\n+    stream11.write(b'abc')\n+    stream21 = from_channel.output_stream('2', transform_1)\n+    stream21.write(b'def')\n+    if not time_based_flush:\n+      stream11.close()\n     self.assertEqual(\n         list(\n             itertools.islice(to_channel.input_elements('1', [transform_1]), 1)),\n         [\n             beam_fn_api_pb2.Elements.Data(\n                 instruction_id='1', transform_id=transform_1, data=b'abc')\n         ])\n-    send('2', transform_2, b'ghi')\n+    if time_based_flush:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d548ef23a89c892f3809a7ff9473704179b8ce"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4Njc3OA==", "bodyText": "Write does not provide ordering guarantees in this case.\nElements are stored in a queue before being sent, to enable batching. Elements aren't added to that queue until the flush callback is invoked. Because the flush callback is invoked periodically starting from when a stream is constructed, there is no guarantee that one stream's callback is called before the other.", "url": "https://github.com/apache/beam/pull/12637#discussion_r492386778", "createdAt": "2020-09-21T22:42:35Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -108,16 +106,28 @@ def send(instruction_id, transform_id, data):\n         ])\n \n     # Multiple interleaved writes to multiple instructions.\n-    send('1', transform_1, b'abc')\n-    send('2', transform_1, b'def')\n+    stream11 = from_channel.output_stream('1', transform_1)\n+    stream11.write(b'abc')\n+    stream21 = from_channel.output_stream('2', transform_1)\n+    stream21.write(b'def')\n+    if not time_based_flush:\n+      stream11.close()\n     self.assertEqual(\n         list(\n             itertools.islice(to_channel.input_elements('1', [transform_1]), 1)),\n         [\n             beam_fn_api_pb2.Elements.Data(\n                 instruction_id='1', transform_id=transform_1, data=b'abc')\n         ])\n-    send('2', transform_2, b'ghi')\n+    if time_based_flush:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1OTYxOQ=="}, "originalCommit": {"oid": "97d548ef23a89c892f3809a7ff9473704179b8ce"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgyODA3OQ==", "bodyText": "Please add details as comment.", "url": "https://github.com/apache/beam/pull/12637#discussion_r492828079", "createdAt": "2020-09-22T15:25:12Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -108,16 +106,28 @@ def send(instruction_id, transform_id, data):\n         ])\n \n     # Multiple interleaved writes to multiple instructions.\n-    send('1', transform_1, b'abc')\n-    send('2', transform_1, b'def')\n+    stream11 = from_channel.output_stream('1', transform_1)\n+    stream11.write(b'abc')\n+    stream21 = from_channel.output_stream('2', transform_1)\n+    stream21.write(b'def')\n+    if not time_based_flush:\n+      stream11.close()\n     self.assertEqual(\n         list(\n             itertools.islice(to_channel.input_elements('1', [transform_1]), 1)),\n         [\n             beam_fn_api_pb2.Elements.Data(\n                 instruction_id='1', transform_id=transform_1, data=b'abc')\n         ])\n-    send('2', transform_2, b'ghi')\n+    if time_based_flush:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1OTYxOQ=="}, "originalCommit": {"oid": "97d548ef23a89c892f3809a7ff9473704179b8ce"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzMjE4NA==", "bodyText": "I would have expected that from_channel.output_stream would share the same queue of elements across distinct transforms when dealing with the same instruction id instead of multiple different queues with separate flushing characteristics.", "url": "https://github.com/apache/beam/pull/12637#discussion_r492832184", "createdAt": "2020-09-22T15:30:18Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -108,16 +106,28 @@ def send(instruction_id, transform_id, data):\n         ])\n \n     # Multiple interleaved writes to multiple instructions.\n-    send('1', transform_1, b'abc')\n-    send('2', transform_1, b'def')\n+    stream11 = from_channel.output_stream('1', transform_1)\n+    stream11.write(b'abc')\n+    stream21 = from_channel.output_stream('2', transform_1)\n+    stream21.write(b'def')\n+    if not time_based_flush:\n+      stream11.close()\n     self.assertEqual(\n         list(\n             itertools.islice(to_channel.input_elements('1', [transform_1]), 1)),\n         [\n             beam_fn_api_pb2.Elements.Data(\n                 instruction_id='1', transform_id=transform_1, data=b'abc')\n         ])\n-    send('2', transform_2, b'ghi')\n+    if time_based_flush:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1OTYxOQ=="}, "originalCommit": {"oid": "97d548ef23a89c892f3809a7ff9473704179b8ce"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjAxNA==", "bodyText": "Please add details as comment.\n\nDone.", "url": "https://github.com/apache/beam/pull/12637#discussion_r493002014", "createdAt": "2020-09-22T20:06:46Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/worker/data_plane_test.py", "diffHunk": "@@ -108,16 +106,28 @@ def send(instruction_id, transform_id, data):\n         ])\n \n     # Multiple interleaved writes to multiple instructions.\n-    send('1', transform_1, b'abc')\n-    send('2', transform_1, b'def')\n+    stream11 = from_channel.output_stream('1', transform_1)\n+    stream11.write(b'abc')\n+    stream21 = from_channel.output_stream('2', transform_1)\n+    stream21.write(b'def')\n+    if not time_based_flush:\n+      stream11.close()\n     self.assertEqual(\n         list(\n             itertools.islice(to_channel.input_elements('1', [transform_1]), 1)),\n         [\n             beam_fn_api_pb2.Elements.Data(\n                 instruction_id='1', transform_id=transform_1, data=b'abc')\n         ])\n-    send('2', transform_2, b'ghi')\n+    if time_based_flush:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1OTYxOQ=="}, "originalCommit": {"oid": "97d548ef23a89c892f3809a7ff9473704179b8ce"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 544, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}