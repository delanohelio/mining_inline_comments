{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1Mjk5NjAw", "number": 11450, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoyMjoxMlrODzCMEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo0ODowNFrOD2ybAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODM5ODI0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOWriteIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoyMjoxMlrOGHb9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyMDoyMFrOGIcvpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1MTI2NQ==", "bodyText": "I could add\npipeline.getOptions().as(DirectOptions.class).setBlockOnRun(true);\nBut I think this is the same as pipeline.run().waitUntilFinish(); for batch pipelines which I already use.", "url": "https://github.com/apache/beam/pull/11450#discussion_r410451265", "createdAt": "2020-04-17T20:22:12Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOWriteIT.java", "diffHunk": "@@ -46,6 +45,8 @@\n   private static final String HL7V2_STORE_NAME =\n       \"hl7v2_store_write_it_\" + System.currentTimeMillis() + \"_\" + (new SecureRandom().nextInt(32));\n \n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47a9774755032d02575f7657d5843916f47dac9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMjc0Mg==", "bodyText": "pipeline.run().waitUntilFinish() is the correct way to wait till completion.", "url": "https://github.com/apache/beam/pull/11450#discussion_r411512742", "createdAt": "2020-04-20T16:20:20Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOWriteIT.java", "diffHunk": "@@ -46,6 +45,8 @@\n   private static final String HL7V2_STORE_NAME =\n       \"hl7v2_store_write_it_\" + System.currentTimeMillis() + \"_\" + (new SecureRandom().nextInt(32));\n \n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1MTI2NQ=="}, "originalCommit": {"oid": "f47a9774755032d02575f7657d5843916f47dac9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODIzNzM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyMjoyM1rOGKHIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMTozMjozNlrOGKSo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1NTc0Mg==", "bodyText": "Seems like read and write sections are unrelated. Should these be two different tests ?\nAlternatively we can convert this to a single \"write and then read pipeline\" where data needed for the read step are generated in the write step (and remove data generation in the setUp method.", "url": "https://github.com/apache/beam/pull/11450#discussion_r413255742", "createdAt": "2020-04-22T19:22:23Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.MESSAGES;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.deleteAllHL7v2Messages;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.writeHL7v2Messages;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.Collections;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.ListHL7v2MessageIDs;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * This should catch that we read {@link HL7v2Message} with schematized data but do not fail inserts\n+ * with schematized data which should be output only.\n+ */\n+@RunWith(JUnit4.class)\n+public class HL7v2IOReadWriteIT {\n+\n+  private transient HealthcareApiClient client;\n+  private static String healthcareDataset;\n+  private static final String BASE =\n+      \"hl7v2_store_rw_it_\" + System.currentTimeMillis() + \"_\" + (new SecureRandom().nextInt(32));\n+  private static final String INPUT_HL7V2_STORE_NAME = BASE + \"INPUT\";\n+  private static final String OUTPUT_HL7V2_STORE_NAME = BASE + \"OUTPUT\";\n+\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+\n+  @BeforeClass\n+  public static void createHL7v2tores() throws IOException {\n+    String project = TestPipeline.testingPipelineOptions().as(GcpOptions.class).getProject();\n+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.createHL7v2Store(healthcareDataset, INPUT_HL7V2_STORE_NAME);\n+    client.createHL7v2Store(healthcareDataset, OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @AfterClass\n+  public static void deleteHL7v2tores() throws IOException {\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+    if (client == null) {\n+      client = new HttpHealthcareApiClient();\n+    }\n+\n+    // Create HL7 messages and write them to HL7v2 Store.\n+    writeHL7v2Messages(this.client, healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    deleteAllHL7v2Messages(client, healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Test\n+  public void testHL7v2IOE2E() throws Exception {\n+    HL7v2IO.Read.Result readResult =\n+        pipeline\n+            .apply(\n+                new ListHL7v2MessageIDs(\n+                    Collections.singletonList(\n+                        healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME)))\n+            .apply(HL7v2IO.getAll());\n+\n+    PCollection<Long> numReadMessages =\n+        readResult.getMessages().setCoder(new HL7v2MessageCoder()).apply(Count.globally());\n+    PAssert.thatSingleton(numReadMessages).isEqualTo((long) MESSAGES.size());\n+    PAssert.that(readResult.getFailedReads()).empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NDMzMQ==", "bodyText": "The sections are actually related.\nthe write section starts with readResult.getMessages() (which is returns the output PCollection of the read).\nI specifically wanted to add this test because in testing w/ customer we noticed that (before the changes in this PR that set only data and labels) if you ran read and went straight to write you would get errors on ingest because our messages would have fields that should be output only.\nThis test will help us ensure we don't run introduce a regression in the future for this read to write case.\nFor context, we already have \"just read\" and \"just write\" integration tests for this connector.", "url": "https://github.com/apache/beam/pull/11450#discussion_r413444331", "createdAt": "2020-04-23T01:32:36Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.MESSAGES;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.deleteAllHL7v2Messages;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.writeHL7v2Messages;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.Collections;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.ListHL7v2MessageIDs;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * This should catch that we read {@link HL7v2Message} with schematized data but do not fail inserts\n+ * with schematized data which should be output only.\n+ */\n+@RunWith(JUnit4.class)\n+public class HL7v2IOReadWriteIT {\n+\n+  private transient HealthcareApiClient client;\n+  private static String healthcareDataset;\n+  private static final String BASE =\n+      \"hl7v2_store_rw_it_\" + System.currentTimeMillis() + \"_\" + (new SecureRandom().nextInt(32));\n+  private static final String INPUT_HL7V2_STORE_NAME = BASE + \"INPUT\";\n+  private static final String OUTPUT_HL7V2_STORE_NAME = BASE + \"OUTPUT\";\n+\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+\n+  @BeforeClass\n+  public static void createHL7v2tores() throws IOException {\n+    String project = TestPipeline.testingPipelineOptions().as(GcpOptions.class).getProject();\n+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.createHL7v2Store(healthcareDataset, INPUT_HL7V2_STORE_NAME);\n+    client.createHL7v2Store(healthcareDataset, OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @AfterClass\n+  public static void deleteHL7v2tores() throws IOException {\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+    if (client == null) {\n+      client = new HttpHealthcareApiClient();\n+    }\n+\n+    // Create HL7 messages and write them to HL7v2 Store.\n+    writeHL7v2Messages(this.client, healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    deleteAllHL7v2Messages(client, healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Test\n+  public void testHL7v2IOE2E() throws Exception {\n+    HL7v2IO.Read.Result readResult =\n+        pipeline\n+            .apply(\n+                new ListHL7v2MessageIDs(\n+                    Collections.singletonList(\n+                        healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME)))\n+            .apply(HL7v2IO.getAll());\n+\n+    PCollection<Long> numReadMessages =\n+        readResult.getMessages().setCoder(new HL7v2MessageCoder()).apply(Count.globally());\n+    PAssert.thatSingleton(numReadMessages).isEqualTo((long) MESSAGES.size());\n+    PAssert.that(readResult.getFailedReads()).empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1NTc0Mg=="}, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODI1NTMzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOTestUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyNjo0NlrOGKHS2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxNjo0OFrOGLnrog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1ODQ1OA==", "bodyText": "How do we know that 5000 is enough ? If not the test will be flaky.", "url": "https://github.com/apache/beam/pull/11450#discussion_r413258458", "createdAt": "2020-04-22T19:26:46Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOTestUtil.java", "diffHunk": "@@ -91,10 +92,13 @@ static void deleteAllHL7v2Messages(HealthcareApiClient client, String hl7v2Store\n   }\n \n   /** Populate the test messages into the HL7v2 store. */\n-  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store) throws IOException {\n+  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store)\n+      throws IOException, InterruptedException {\n     for (HL7v2Message msg : MESSAGES) {\n       client.createHL7v2Message(hl7v2Store, msg.toModel());\n     }\n+    // [BEAM-9779] HL7v2 indexing is asyncronous. Add sleep to stabilize this IT.\n+    Sleeper.DEFAULT.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NzM3NA==", "bodyText": "Great Question!\nAs the Jira ticket explains I was not able to reproduce the flakiness of the test locally (I think because it takes long enough for my list request to reach us-central (from my workstation in Oregon) that the async indexing is complete (while the jenkins workers are much closer and end up sometimes beating the indexer to the punch and reading a stale list of messages). I chose 5000 based on my latency to us-central being well under 5 seconds and a hope that the indexer doesn't take this long to index 3 measly messages :)\nI know the Java Post Commit is already a long check so I didn't want to unnecessarily sleep for too long.\nI'm not sure if the Healthcare API has an SLA or benchmarks for the async HL7v2 Message indexing.\n@lastomato any idea?\nI'm happy to bump this value higher, but it's guesswork on my end for how long we should sleep.", "url": "https://github.com/apache/beam/pull/11450#discussion_r413447374", "createdAt": "2020-04-23T01:41:56Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOTestUtil.java", "diffHunk": "@@ -91,10 +92,13 @@ static void deleteAllHL7v2Messages(HealthcareApiClient client, String hl7v2Store\n   }\n \n   /** Populate the test messages into the HL7v2 store. */\n-  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store) throws IOException {\n+  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store)\n+      throws IOException, InterruptedException {\n     for (HL7v2Message msg : MESSAGES) {\n       client.createHL7v2Message(hl7v2Store, msg.toModel());\n     }\n+    // [BEAM-9779] HL7v2 indexing is asyncronous. Add sleep to stabilize this IT.\n+    Sleeper.DEFAULT.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1ODQ1OA=="}, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0ODgwNA==", "bodyText": "Alternatively we could throw some EBO / retry logic waiting until the list returns the number of messages we expect.", "url": "https://github.com/apache/beam/pull/11450#discussion_r413448804", "createdAt": "2020-04-23T01:46:09Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOTestUtil.java", "diffHunk": "@@ -91,10 +92,13 @@ static void deleteAllHL7v2Messages(HealthcareApiClient client, String hl7v2Store\n   }\n \n   /** Populate the test messages into the HL7v2 store. */\n-  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store) throws IOException {\n+  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store)\n+      throws IOException, InterruptedException {\n     for (HL7v2Message msg : MESSAGES) {\n       client.createHL7v2Message(hl7v2Store, msg.toModel());\n     }\n+    // [BEAM-9779] HL7v2 indexing is asyncronous. Add sleep to stabilize this IT.\n+    Sleeper.DEFAULT.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1ODQ1OA=="}, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNzY2Ng==", "bodyText": "Based on internal thread it seems HCAPI team uses EBO w/ 10 min timeout to deal with async indexing in their own integration tests. I've added the same here.", "url": "https://github.com/apache/beam/pull/11450#discussion_r414837666", "createdAt": "2020-04-24T20:16:48Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOTestUtil.java", "diffHunk": "@@ -91,10 +92,13 @@ static void deleteAllHL7v2Messages(HealthcareApiClient client, String hl7v2Store\n   }\n \n   /** Populate the test messages into the HL7v2 store. */\n-  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store) throws IOException {\n+  static void writeHL7v2Messages(HealthcareApiClient client, String hl7v2Store)\n+      throws IOException, InterruptedException {\n     for (HL7v2Message msg : MESSAGES) {\n       client.createHL7v2Message(hl7v2Store, msg.toModel());\n     }\n+    // [BEAM-9779] HL7v2 indexing is asyncronous. Add sleep to stabilize this IT.\n+    Sleeper.DEFAULT.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1ODQ1OA=="}, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODI2NDM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyOToxNVrOGKHYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMToyNToyMFrOGKSfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1OTkxOQ==", "bodyText": "Does the store name here uniquely identify the set of data being deleted (just to confirm) ?", "url": "https://github.com/apache/beam/pull/11450#discussion_r413259919", "createdAt": "2020-04-22T19:29:15Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.MESSAGES;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.deleteAllHL7v2Messages;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.writeHL7v2Messages;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.Collections;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.ListHL7v2MessageIDs;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * This should catch that we read {@link HL7v2Message} with schematized data but do not fail inserts\n+ * with schematized data which should be output only.\n+ */\n+@RunWith(JUnit4.class)\n+public class HL7v2IOReadWriteIT {\n+\n+  private transient HealthcareApiClient client;\n+  private static String healthcareDataset;\n+  private static final String BASE =\n+      \"hl7v2_store_rw_it_\" + System.currentTimeMillis() + \"_\" + (new SecureRandom().nextInt(32));\n+  private static final String INPUT_HL7V2_STORE_NAME = BASE + \"INPUT\";\n+  private static final String OUTPUT_HL7V2_STORE_NAME = BASE + \"OUTPUT\";\n+\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+\n+  @BeforeClass\n+  public static void createHL7v2tores() throws IOException {\n+    String project = TestPipeline.testingPipelineOptions().as(GcpOptions.class).getProject();\n+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.createHL7v2Store(healthcareDataset, INPUT_HL7V2_STORE_NAME);\n+    client.createHL7v2Store(healthcareDataset, OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @AfterClass\n+  public static void deleteHL7v2tores() throws IOException {\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+    if (client == null) {\n+      client = new HttpHealthcareApiClient();\n+    }\n+\n+    // Create HL7 messages and write them to HL7v2 Store.\n+    writeHL7v2Messages(this.client, healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    deleteAllHL7v2Messages(client, healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0MTkyMA==", "bodyText": "yes.", "url": "https://github.com/apache/beam/pull/11450#discussion_r413441920", "createdAt": "2020-04-23T01:25:20Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.MESSAGES;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.deleteAllHL7v2Messages;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.writeHL7v2Messages;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.Collections;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.ListHL7v2MessageIDs;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * This should catch that we read {@link HL7v2Message} with schematized data but do not fail inserts\n+ * with schematized data which should be output only.\n+ */\n+@RunWith(JUnit4.class)\n+public class HL7v2IOReadWriteIT {\n+\n+  private transient HealthcareApiClient client;\n+  private static String healthcareDataset;\n+  private static final String BASE =\n+      \"hl7v2_store_rw_it_\" + System.currentTimeMillis() + \"_\" + (new SecureRandom().nextInt(32));\n+  private static final String INPUT_HL7V2_STORE_NAME = BASE + \"INPUT\";\n+  private static final String OUTPUT_HL7V2_STORE_NAME = BASE + \"OUTPUT\";\n+\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+\n+  @BeforeClass\n+  public static void createHL7v2tores() throws IOException {\n+    String project = TestPipeline.testingPipelineOptions().as(GcpOptions.class).getProject();\n+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.createHL7v2Store(healthcareDataset, INPUT_HL7V2_STORE_NAME);\n+    client.createHL7v2Store(healthcareDataset, OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @AfterClass\n+  public static void deleteHL7v2tores() throws IOException {\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+    if (client == null) {\n+      client = new HttpHealthcareApiClient();\n+    }\n+\n+    // Create HL7 messages and write them to HL7v2 Store.\n+    writeHL7v2Messages(this.client, healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    deleteAllHL7v2Messages(client, healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1OTkxOQ=="}, "originalCommit": {"oid": "6f86186e41c23a18d51036f24bb548d88efeac50"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzMwNjI5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyNTo0MVrOGMpH2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowMDoxMlrOGMwe1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwOTg0OA==", "bodyText": "This is a pretty large sleep for a single test. Java post commit test suite is run pretty regularly with limited Jenkins resources so I suggest adding a separate test suite for HI7v2 tests and removing this and any other tests that need large sleeps from general Java post-commit test suite.", "url": "https://github.com/apache/beam/pull/11450#discussion_r415909848", "createdAt": "2020-04-27T15:25:41Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "diffHunk": "@@ -127,6 +114,7 @@ public ListMessagesResponse makeHL7v2ListRequest(\n             .messages()\n             .list(hl7v2Store)\n             .set(\"view\", \"full\")\n+            .setPageSize(1000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9bad7c1c9df7c004f0f4f67185a3d5099a351f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5Nzg5NA==", "bodyText": "This is not a sleep.\nI think this is a comment on the wrong line.\nCurrently the approach I've taken is to retry listing of HL7v2 messages until the desired number of messages is returned with EBO and an over all timeout of 10 minutes.\nThis is very different than a 10 minute sleep as it's expected to succeed well under 10 mins.\nI'm pretty sure this is an extremely over kill timeout for indexing 3 messages.\nI've asked the internal team about stats we have on this async indexing process to increase confidence here.\nI'm not sure how to move this out of the post commit test suite.\nSo I have some questions:\n\nWhat would an acceptable timeout be to keep this in the post commit?\nIf I were to run this test 1000x on a VM in the same region as the jenkins VMs with the contents of this PR to prove that it fixes the flakiness, is there additional stats (beyond 1000/1000 runs pass) you'd find helpful (e.g. distribution of total runtime for this test)?\nHow to move this to a \"sick bay\" or other test suite? Does this already exist in beam code base?", "url": "https://github.com/apache/beam/pull/11450#discussion_r415997894", "createdAt": "2020-04-27T17:15:46Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "diffHunk": "@@ -127,6 +114,7 @@ public ListMessagesResponse makeHL7v2ListRequest(\n             .messages()\n             .list(hl7v2Store)\n             .set(\"view\", \"full\")\n+            .setPageSize(1000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwOTg0OA=="}, "originalCommit": {"oid": "5f9bad7c1c9df7c004f0f4f67185a3d5099a351f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMDQyMA==", "bodyText": "Thanks for clarifying. I agree waiting till completion with a timeout much better than waiting.\nThere's some information on adding new test suites here.\nhttps://beam.apache.org/documentation/io/testing/", "url": "https://github.com/apache/beam/pull/11450#discussion_r416030420", "createdAt": "2020-04-27T18:00:12Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "diffHunk": "@@ -127,6 +114,7 @@ public ListMessagesResponse makeHL7v2ListRequest(\n             .messages()\n             .list(hl7v2Store)\n             .set(\"view\", \"full\")\n+            .setPageSize(1000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwOTg0OA=="}, "originalCommit": {"oid": "5f9bad7c1c9df7c004f0f4f67185a3d5099a351f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzMyOTgxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyOTo1M1rOGMpVoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyOTo1M1rOGMpVoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxMzM3Ng==", "bodyText": "Ditto. I suggest moving tests that require a large sleep to a new test suite.", "url": "https://github.com/apache/beam/pull/11450#discussion_r415913376", "createdAt": "2020-04-27T15:29:53Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.MESSAGES;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.deleteAllHL7v2Messages;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.writeHL7v2Messages;\n+\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.Collections;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.ListHL7v2MessageIDs;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.joda.time.Duration;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * This should catch that we read {@link HL7v2Message} with schematized data but do not fail inserts\n+ * with schematized data which should be output only.\n+ */\n+@RunWith(JUnit4.class)\n+public class HL7v2IOReadWriteIT {\n+\n+  private transient HealthcareApiClient client;\n+  private static String healthcareDataset;\n+  private static final String BASE =\n+      \"hl7v2_store_rw_it_\" + System.currentTimeMillis() + \"_\" + (new SecureRandom().nextInt(32));\n+  private static final String INPUT_HL7V2_STORE_NAME = BASE + \"INPUT\";\n+  private static final String OUTPUT_HL7V2_STORE_NAME = BASE + \"OUTPUT\";\n+\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+\n+  @BeforeClass\n+  public static void createHL7v2tores() throws IOException {\n+    String project = TestPipeline.testingPipelineOptions().as(GcpOptions.class).getProject();\n+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.createHL7v2Store(healthcareDataset, INPUT_HL7V2_STORE_NAME);\n+    client.createHL7v2Store(healthcareDataset, OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @AfterClass\n+  public static void deleteHL7v2tores() throws IOException {\n+    HealthcareApiClient client = new HttpHealthcareApiClient();\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+    client.deleteHL7v2Store(healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+    if (client == null) {\n+      client = new HttpHealthcareApiClient();\n+    }\n+\n+    // Create HL7 messages and write them to HL7v2 Store.\n+    writeHL7v2Messages(this.client, healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    deleteAllHL7v2Messages(client, healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME);\n+  }\n+\n+  @Test\n+  public void testHL7v2IOE2E() throws Exception {\n+    HL7v2IO.Read.Result readResult =\n+        pipeline\n+            .apply(\n+                new ListHL7v2MessageIDs(\n+                    Collections.singletonList(\n+                        healthcareDataset + \"/hl7V2Stores/\" + INPUT_HL7V2_STORE_NAME)))\n+            .apply(HL7v2IO.getAll());\n+\n+    PCollection<Long> numReadMessages =\n+        readResult.getMessages().setCoder(new HL7v2MessageCoder()).apply(Count.globally());\n+    PAssert.thatSingleton(numReadMessages).isEqualTo((long) MESSAGES.size());\n+    PAssert.that(readResult.getFailedReads()).empty();\n+\n+    HL7v2IO.Write.Result writeResult =\n+        readResult\n+            .getMessages()\n+            .apply(\n+                HL7v2IO.ingestMessages(\n+                    healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME));\n+\n+    PAssert.that(writeResult.getFailedInsertsWithErr()).empty();\n+\n+    pipeline.run().waitUntilFinish();\n+\n+    try {\n+      HL7v2IOTestUtil.waitForHL7v2Indexing(\n+          client,\n+          healthcareDataset + \"/hl7V2Stores/\" + OUTPUT_HL7V2_STORE_NAME,\n+          MESSAGES.size(),\n+          Duration.standardMinutes(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9bad7c1c9df7c004f0f4f67185a3d5099a351f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzM1NTc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTozNDoxNlrOGMpklQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzowMDo0MlrOGMt28w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxNzIwNQ==", "bodyText": "Can we please defer adding these new tests till we are sure that the changes to fix flakyness actually fix the immediate issue. Also can you please send additional changes that are not related to BEAM https://issues.apache.org/jira/browse/BEAM-9779 as a separate PR and mention the correct JIRA.", "url": "https://github.com/apache/beam/pull/11450#discussion_r415917205", "createdAt": "2020-04-27T15:34:16Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.MESSAGES;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.deleteAllHL7v2Messages;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.writeHL7v2Messages;\n+\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.Collections;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.ListHL7v2MessageIDs;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9bad7c1c9df7c004f0f4f67185a3d5099a351f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4NzQ0Mw==", "bodyText": "sure.", "url": "https://github.com/apache/beam/pull/11450#discussion_r415987443", "createdAt": "2020-04-27T17:00:42Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadWriteIT.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.MESSAGES;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.deleteAllHL7v2Messages;\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.writeHL7v2Messages;\n+\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.Collections;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.ListHL7v2MessageIDs;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Count;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxNzIwNQ=="}, "originalCommit": {"oid": "5f9bad7c1c9df7c004f0f4f67185a3d5099a351f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Nzc1ODExOnYy", "diffSide": "LEFT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo0ODowNFrOGMtQ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo0ODowNFrOGMtQ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NzY5NA==", "bodyText": "these tests are actually redundant with the non-deleted testHL7v2IO_ListHL7v2Messages and testHL7v2IO_ListHL7v2Messages_filtered", "url": "https://github.com/apache/beam/pull/11450#discussion_r415977694", "createdAt": "2020-04-27T16:48:04Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IOReadIT.java", "diffHunk": "@@ -86,36 +86,6 @@ public void tearDown() throws Exception {\n     deleteAllHL7v2Messages(this.client, healthcareDataset + \"/hl7V2Stores/\" + HL7V2_STORE_NAME);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0b33499457fb1be8990967921cc1864a1963d2b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1304, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}