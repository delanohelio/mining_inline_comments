{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTkyMzEz", "number": 13137, "title": "[BEAM-11073] Dicom IO Connector for Java", "bodyText": "We are looking to create a new Java Pipeline Connector to help facilitate Reading data from the Imaging API in GCP. Initially, this connector will be used to read study level metadata of Dicom instances.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-10-19T18:26:05Z", "url": "https://github.com/apache/beam/pull/13137", "merged": true, "mergeCommit": {"oid": "978b812d87e7195aa5e553f52d0624f4ecfcdba8"}, "closed": true, "closedAt": "2020-11-30T17:07:19Z", "author": {"login": "Aliraza-N"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPpxwKgH2gAyNTA2MTkyMzEzOjBjZjY4YTIyM2NhMTc3MmUxMDUwMjhkMTI5ZTRkODQ4NTEwZTdkODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgZ4bCAH2gAyNTA2MTkyMzEzOjA2OWE0ZTgyNzQzMWQyMzcwNTIwYjE4ZmQ1MTI2NzUzNjcyYjBmM2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0cf68a223ca1772e105028d129e4d848510e7d83", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/0cf68a223ca1772e105028d129e4d848510e7d83", "committedDate": "2020-10-05T20:26:33Z", "message": "New Dicom IO connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49cb6ef4b738157ff19ad08bb0b82c7db0f3e155", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/49cb6ef4b738157ff19ad08bb0b82c7db0f3e155", "committedDate": "2020-10-05T20:30:59Z", "message": "Revert \"New Dicom IO connector\"\n\nThis reverts commit 0cf68a223ca1772e105028d129e4d848510e7d83."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ddcee9b6969f5df103c8aba63b1a551bbe6351", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/d5ddcee9b6969f5df103c8aba63b1a551bbe6351", "committedDate": "2020-10-06T16:19:09Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f6713f9c91e62fcf0ab5c2949e40b2882f52e5", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/02f6713f9c91e62fcf0ab5c2949e40b2882f52e5", "committedDate": "2020-10-14T19:13:36Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/5437fda63f2f598f650ddba1664382b72b683755", "committedDate": "2020-10-19T13:52:25Z", "message": "New Dicom IO connector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTEwNzQx", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-513910741", "createdAt": "2020-10-21T16:34:12Z", "commit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjozNDoxM1rOHl1X9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0Mzo0MlrOHl1wcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMzg0NQ==", "bodyText": "DICOM study metadata?", "url": "https://github.com/apache/beam/pull/13137#discussion_r509433845", "createdAt": "2020-10-21T16:34:13Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TupleTag;\n+\n+public class DicomIO {\n+\n+  /**\n+   * Read dicom study metadata from a PCollection of resource webpath.\n+   *\n+   * @return the read", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNTA0Mg==", "bodyText": "Read the DICOM study metadata from the resource path obtained from PubSub ?", "url": "https://github.com/apache/beam/pull/13137#discussion_r509435042", "createdAt": "2020-10-21T16:36:01Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TupleTag;\n+\n+public class DicomIO {\n+\n+  /**\n+   * Read dicom study metadata from a PCollection of resource webpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNTM2MA==", "bodyText": "Why not move this comment into the Class to show that the class does...this method is only returning an Object of the class..", "url": "https://github.com/apache/beam/pull/13137#discussion_r509435360", "createdAt": "2020-10-21T16:36:30Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TupleTag;\n+\n+public class DicomIO {\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNjk4Ng==", "bodyText": "this seems incomplete?", "url": "https://github.com/apache/beam/pull/13137#discussion_r509436986", "createdAt": "2020-10-21T16:39:02Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TupleTag;\n+\n+public class DicomIO {\n+\n+  /**\n+   * Read dicom study metadata from a PCollection of resource webpath.\n+   *\n+   * @return the read\n+   * @see ReadDicomStudyMetadata\n+   */\n+  public static ReadDicomStudyMetadata retrieveStudyMetadata() {\n+    return new ReadDicomStudyMetadata();\n+  }\n+\n+  /** The type ReadDicomStudyMetadata. */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, PCollection<String>> {\n+\n+    public ReadDicomStudyMetadata() {}\n+\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+\n+    /**\n+     * DoFn to fetch the metadata of a study from a Dicom store based on it's location and study id.\n+     */\n+    static class FetchStudyMetadataFn extends DoFn<PubsubMessage, String> {\n+\n+      private HealthcareApiClient dicomStore;\n+\n+      /**\n+       * Instantiate the healthcare client.\n+       *\n+       * @throws IOException\n+       */\n+      @Setup\n+      public void instantiateHealthcareClient() throws IOException {\n+        this.dicomStore = new HttpHealthcareApiClient();\n+      }\n+\n+      /**\n+       * Process The Pub/Sub message.\n+       *\n+       * @param context The input containing the pub/sub message\n+       */\n+      @ProcessElement\n+      public void processElement(ProcessContext context) {\n+        PubsubMessage msg = context.element();\n+        byte[] msgPayload = msg.getPayload();\n+        try {\n+          String dicomWebPath = new String(msgPayload, \"UTF-8\");\n+          String responseData = dicomStore.retrieveDicomStudyMetadata(dicomWebPath);\n+          context.output(responseData);\n+        } catch (Exception e) {\n+          // IO exception, unsupported encoding exception\n+          System.out.println(e);\n+          if (e.getClass() == IOException.class) {\n+          } else if (e.getClass() == UnsupportedEncodingException.class) {\n+          } else {\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNzUwOQ==", "bodyText": "nit: remove", "url": "https://github.com/apache/beam/pull/13137#discussion_r509437509", "createdAt": "2020-10-21T16:39:51Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "diffHunk": "@@ -196,6 +197,64 @@ public Empty deleteFhirStore(String name) throws IOException {\n     return client.projects().locations().datasets().fhirStores().delete(name).execute();\n   }\n \n+  @Override\n+  public String retrieveDicomStudyMetadata(String dicomWebPath) throws IOException {\n+    String[] webPathSplit;\n+    webPathSplit = dicomWebPath.split(\"/dicomWeb/\");\n+    String dicomStorePath = webPathSplit[0];\n+\n+    String[] searchParameters;\n+    searchParameters = webPathSplit[1].split(\"/\");\n+    String studyId = searchParameters[1];\n+    //        String seriesId = searchParameters[3];\n+    //        String instanceId = searchParameters[5];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzODYwMw==", "bodyText": "How about a test for the success case?", "url": "https://github.com/apache/beam/pull/13137#discussion_r509438603", "createdAt": "2020-10-21T16:41:20Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DicomIOTest {\n+  @Rule public final transient TestPipeline pipeline = TestPipeline.create();\n+\n+  @Test\n+  public void test_Dicom_failedMetadataRead() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MDExMg==", "bodyText": "Right on the top of this page I would add some information on what this connector is and what it is doing. Somthing like this is used to connect Google Cloud Healthcare DICOM API with links to the API, how to configure pubsub, etc. to make it easy for a customer of the connector to get some context.", "url": "https://github.com/apache/beam/pull/13137#discussion_r509440112", "createdAt": "2020-10-21T16:43:42Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TupleTag;\n+\n+public class DicomIO {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12d2257898f864000a24a846d3abda10839fda3a", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/12d2257898f864000a24a846d3abda10839fda3a", "committedDate": "2020-10-22T18:46:32Z", "message": "Dicom IO connector output changed to a Result class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDY1MTM0", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-514065134", "createdAt": "2020-10-21T18:32:53Z", "commit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMjo1M1rOHl9Cyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMjo1M1rOHl9Cyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1OTQ5OQ==", "bodyText": "We are not really doing much in this method, so we can remove it", "url": "https://github.com/apache/beam/pull/13137#discussion_r509559499", "createdAt": "2020-10-21T18:32:53Z", "author": {"login": "Aliraza-N"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TupleTag;\n+\n+public class DicomIO {\n+\n+  /**\n+   * Read dicom study metadata from a PCollection of resource webpath.\n+   *\n+   * @return the read\n+   * @see ReadDicomStudyMetadata\n+   */\n+  public static ReadDicomStudyMetadata retrieveStudyMetadata() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5437fda63f2f598f650ddba1664382b72b683755"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7748e8a57d4394b2f627ea644100d470ef3efd7d", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/7748e8a57d4394b2f627ea644100d470ef3efd7d", "committedDate": "2020-10-22T19:00:20Z", "message": "[BEAM-11073] Dicom IO connector output changed to a Result class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/c46c0c5f52134b7745e2b6f269c5396781102656", "committedDate": "2020-10-22T19:03:35Z", "message": "Merge branch 'master' of https://github.com/Aliraza-N/beam"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDUwNDA1", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-515050405", "createdAt": "2020-10-22T19:27:08Z", "commit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyNzowOVrOHmwmCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTo0Nzo1OFrOHmxRyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDEwNg==", "bodyText": "add a link to the Dicom API here..", "url": "https://github.com/apache/beam/pull/13137#discussion_r510404106", "createdAt": "2020-10-22T19:27:09Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNDk3Ng==", "bodyText": "please be more descriptive in the comment", "url": "https://github.com/apache/beam/pull/13137#discussion_r510404976", "createdAt": "2020-10-22T19:28:52Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a\n+ * PubSub message as input, where the message's body will contain the location of the Study. You can\n+ * learn how to configure PubSub messages to be published when an instance is stored in a data store\n+ * by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output\n+ * a {@link ReadDicomStudyMetadata.Result} which will contain metadata of a study encoded in json\n+ * string\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    public ReadDicomStudyMetadata() {}\n+\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    public static final TupleTag<String> DEAD_LETTER = new TupleTag<String>() {};\n+\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> readResponse;\n+\n+      private PCollection<String> failedReads;\n+      /** The Pct. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODAwMA==", "bodyText": "why not give these both better names like \"Response\" and \"Error\"?", "url": "https://github.com/apache/beam/pull/13137#discussion_r510408000", "createdAt": "2020-10-22T19:34:25Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a\n+ * PubSub message as input, where the message's body will contain the location of the Study. You can\n+ * learn how to configure PubSub messages to be published when an instance is stored in a data store\n+ * by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output\n+ * a {@link ReadDicomStudyMetadata.Result} which will contain metadata of a study encoded in json\n+ * string\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    public ReadDicomStudyMetadata() {}\n+\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwOTYxNg==", "bodyText": "you can also check for the error in the result now?", "url": "https://github.com/apache/beam/pull/13137#discussion_r510409616", "createdAt": "2020-10-22T19:37:33Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DicomIOTest {\n+  @Rule public final transient TestPipeline pipeline = TestPipeline.create();\n+\n+  @Test\n+  public void test_Dicom_failedMetadataRead() {\n+    PubsubMessage badMessage = createPubSubMessage(\"foo\");\n+\n+    DicomIO.ReadDicomStudyMetadata.Result retrievedData;\n+    retrievedData =\n+        pipeline.apply(Create.of(badMessage)).apply(new DicomIO.ReadDicomStudyMetadata());\n+\n+    PAssert.that(retrievedData.getReadResponse()).empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxMzYwMA==", "bodyText": "nit: read from the Google Cloud Healthcare DICOM API. ?", "url": "https://github.com/apache/beam/pull/13137#discussion_r510413600", "createdAt": "2020-10-22T19:44:51Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxMzg3Mg==", "bodyText": "DICOM study metadata can be read?", "url": "https://github.com/apache/beam/pull/13137#discussion_r510413872", "createdAt": "2020-10-22T19:45:20Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxNDQxMQ==", "bodyText": "nit: contain the path to the study.", "url": "https://github.com/apache/beam/pull/13137#discussion_r510414411", "createdAt": "2020-10-22T19:46:20Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a\n+ * PubSub message as input, where the message's body will contain the location of the Study. You can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxNDY5NA==", "bodyText": "when a DICOM instance is stored by following..", "url": "https://github.com/apache/beam/pull/13137#discussion_r510414694", "createdAt": "2020-10-22T19:46:52Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a\n+ * PubSub message as input, where the message's body will contain the location of the Study. You can\n+ * learn how to configure PubSub messages to be published when an instance is stored in a data store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxNDk0MA==", "bodyText": "study encoded as a  json string?", "url": "https://github.com/apache/beam/pull/13137#discussion_r510414940", "createdAt": "2020-10-22T19:47:19Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a\n+ * PubSub message as input, where the message's body will contain the location of the Study. You can\n+ * learn how to configure PubSub messages to be published when an instance is stored in a data store\n+ * by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output\n+ * a {@link ReadDicomStudyMetadata.Result} which will contain metadata of a study encoded in json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxNTMwNQ==", "bodyText": "You can move the Description you gave for ReadStudyMetadata above here because we might add other methods to the same connector in the future..", "url": "https://github.com/apache/beam/pull/13137#discussion_r510415305", "createdAt": "2020-10-22T19:47:58Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a\n+ * PubSub message as input, where the message's body will contain the location of the Study. You can\n+ * learn how to configure PubSub messages to be published when an instance is stored in a data store\n+ * by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output\n+ * a {@link ReadDicomStudyMetadata.Result} which will contain metadata of a study encoded in json\n+ * string\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2dcb44a51dea3dcef2b0ba388cc655b95ff969", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/1e2dcb44a51dea3dcef2b0ba388cc655b95ff969", "committedDate": "2020-10-23T19:43:18Z", "message": "Renamed tuple tags in DicomIO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85600b7580896cd77c029121292830a4bedce724", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/85600b7580896cd77c029121292830a4bedce724", "committedDate": "2020-10-23T20:28:32Z", "message": "[BEAM-11073] DicomIO - adjusted failure test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTI0Nzg1", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-516924785", "createdAt": "2020-10-26T15:54:57Z", "commit": {"oid": "85600b7580896cd77c029121292830a4bedce724"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1NDo1N1rOHoWXLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1NDo1N1rOHoWXLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MTQ3MA==", "bodyText": "Need to update error message", "url": "https://github.com/apache/beam/pull/13137#discussion_r512071470", "createdAt": "2020-10-26T15:54:57Z", "author": {"login": "Aliraza-N"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API from Google Cloud\n+ * Healthcare. https://cloud.google.com/healthcare/docs/concepts/dicom\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    /**\n+     * This class makes a call to the retrieve metadata endpoint\n+     * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata It is\n+     * expecting a PubSub message as input, where the message's body will contain the path to the\n+     * study. You can learn how to configure PubSub messages to be published when an instance is\n+     * stored by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector\n+     * will output a {@link ReadDicomStudyMetadata.Result} which will contain metadata of the study\n+     * encoded as a json array.\n+     */\n+    public ReadDicomStudyMetadata() {}\n+\n+    /** TupleTag for the main output. */\n+    public static final TupleTag<String> METADATA = new TupleTag<String>() {};\n+    /** TupleTag for any error response. */\n+    public static final TupleTag<String> ERROR_MESSAGE = new TupleTag<String>() {};\n+\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> readResponse;\n+\n+      private PCollection<String> failedReads;\n+\n+      /** Contains both the response and error outputs from the transformation. */\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create DicomIO.ReadDicomStudyMetadata.Result form PCollectionTuple with OUT and DEAD_LETTER\n+       * tags.\n+       *\n+       * @param pct the pct\n+       * @return the read result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static DicomIO.ReadDicomStudyMetadata.Result of(PCollectionTuple pct)\n+          throws IllegalArgumentException {\n+        if (pct.getAll()\n+            .keySet()\n+            .containsAll((Collection<?>) TupleTagList.of(METADATA).and(ERROR_MESSAGE))) {\n+          return new DicomIO.ReadDicomStudyMetadata.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+              \"The PCollection tuple must have the DicomIO.ReadDicomStudyMetadata.OUT \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85600b7580896cd77c029121292830a4bedce724"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODg1NDA0", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-515885404", "createdAt": "2020-10-23T17:54:55Z", "commit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzo1NDo1NVrOHnX32g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1MzoyNFrOHoWSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0NzY0Mg==", "bodyText": "That's ok these names make it difficult to read and understand what these values are without going through the code which is not ideal so we should rename them..", "url": "https://github.com/apache/beam/pull/13137#discussion_r511047642", "createdAt": "2020-10-23T17:54:55Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to read from the Dicom API from Google Cloud\n+ * Healthcare.\n+ *\n+ * <p>Study-level metadata can be read using {@link ReadDicomStudyMetadata}. It is expecting a\n+ * PubSub message as input, where the message's body will contain the location of the Study. You can\n+ * learn how to configure PubSub messages to be published when an instance is stored in a data store\n+ * by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output\n+ * a {@link ReadDicomStudyMetadata.Result} which will contain metadata of a study encoded in json\n+ * string\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    public ReadDicomStudyMetadata() {}\n+\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODAwMA=="}, "originalCommit": {"oid": "c46c0c5f52134b7745e2b6f269c5396781102656"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NTI4MQ==", "bodyText": "\"allows Beam pipelines to make calls to the DICOM API of the Google Cloud Healthcare API: https://cloud.google.com/healthcare/docs/how-tos#dicom-guide\" ? the link here is better because it links to the How-to guide which is much easier for someone to follow..", "url": "https://github.com/apache/beam/pull/13137#discussion_r512065281", "createdAt": "2020-10-26T15:47:09Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API from Google Cloud\n+ * Healthcare. https://cloud.google.com/healthcare/docs/concepts/dicom", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85600b7580896cd77c029121292830a4bedce724"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NzQ4Mg==", "bodyText": "add the class documentation here...the general rule of thumb is you add the description and all details about the class with the class definition and then each method will have it's specific description..", "url": "https://github.com/apache/beam/pull/13137#discussion_r512067482", "createdAt": "2020-10-26T15:49:55Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API from Google Cloud\n+ * Healthcare. https://cloud.google.com/healthcare/docs/concepts/dicom\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85600b7580896cd77c029121292830a4bedce724"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2ODMwNg==", "bodyText": "add a ). after the link....", "url": "https://github.com/apache/beam/pull/13137#discussion_r512068306", "createdAt": "2020-10-26T15:50:53Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API from Google Cloud\n+ * Healthcare. https://cloud.google.com/healthcare/docs/concepts/dicom\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    /**\n+     * This class makes a call to the retrieve metadata endpoint\n+     * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata It is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85600b7580896cd77c029121292830a4bedce724"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MDI0MA==", "bodyText": "It defines a function that can be used to process a Pubsub message from a DICOM store, read the DICOM study path and get the metadata of the specified study.", "url": "https://github.com/apache/beam/pull/13137#discussion_r512070240", "createdAt": "2020-10-26T15:53:24Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API from Google Cloud\n+ * Healthcare. https://cloud.google.com/healthcare/docs/concepts/dicom\n+ */\n+public class DicomIO {\n+\n+  /** The type ReadDicomStudyMetadata. */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    /**\n+     * This class makes a call to the retrieve metadata endpoint\n+     * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata It is\n+     * expecting a PubSub message as input, where the message's body will contain the path to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85600b7580896cd77c029121292830a4bedce724"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6b117204174442d73f0657aedaac8b26c090038", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/d6b117204174442d73f0657aedaac8b26c090038", "committedDate": "2020-10-26T16:23:09Z", "message": "Made changes to the documentation for DicomIO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDE3NzE4", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-517017718", "createdAt": "2020-10-26T17:31:49Z", "commit": {"oid": "d6b117204174442d73f0657aedaac8b26c090038"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzozMTo0OVrOHoayEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo1NzoyN1rOHobz4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0Mzg5MQ==", "bodyText": "from instead of form and change the names here too..", "url": "https://github.com/apache/beam/pull/13137#discussion_r512143891", "createdAt": "2020-10-26T17:31:49Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API: https://cloud.google.com/healthcare/docs/how-tos#dicom-guide\n+ */\n+public class DicomIO {\n+\n+  /**\n+   * This class makes a call to the retrieve metadata endpoint\n+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a function that can\n+   * be used to process a Pubsub message from a DICOM store, read the DICOM study path and get the metadata of the\n+   * specified study.\n+   * You can learn how to configure PubSub messages to be published when an instance is\n+   * stored by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector\n+   * will output a {@link ReadDicomStudyMetadata.Result} which will contain metadata of the study\n+   * encoded as a json array.\n+   */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    public ReadDicomStudyMetadata() {}\n+\n+    /** TupleTag for the main output. */\n+    public static final TupleTag<String> METADATA = new TupleTag<String>() {};\n+    /** TupleTag for any error response. */\n+    public static final TupleTag<String> ERROR_MESSAGE = new TupleTag<String>() {};\n+\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> readResponse;\n+\n+      private PCollection<String> failedReads;\n+\n+      /** Contains both the response and error outputs from the transformation. */\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create DicomIO.ReadDicomStudyMetadata.Result form PCollectionTuple with OUT and DEAD_LETTER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b117204174442d73f0657aedaac8b26c090038"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1OTM0MA==", "bodyText": "the PcollectionTuple which contains the response", "url": "https://github.com/apache/beam/pull/13137#discussion_r512159340", "createdAt": "2020-10-26T17:55:13Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API: https://cloud.google.com/healthcare/docs/how-tos#dicom-guide\n+ */\n+public class DicomIO {\n+\n+  /**\n+   * This class makes a call to the retrieve metadata endpoint\n+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a function that can\n+   * be used to process a Pubsub message from a DICOM store, read the DICOM study path and get the metadata of the\n+   * specified study.\n+   * You can learn how to configure PubSub messages to be published when an instance is\n+   * stored by following: https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector\n+   * will output a {@link ReadDicomStudyMetadata.Result} which will contain metadata of the study\n+   * encoded as a json array.\n+   */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    public ReadDicomStudyMetadata() {}\n+\n+    /** TupleTag for the main output. */\n+    public static final TupleTag<String> METADATA = new TupleTag<String>() {};\n+    /** TupleTag for any error response. */\n+    public static final TupleTag<String> ERROR_MESSAGE = new TupleTag<String>() {};\n+\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> readResponse;\n+\n+      private PCollection<String> failedReads;\n+\n+      /** Contains both the response and error outputs from the transformation. */\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create DicomIO.ReadDicomStudyMetadata.Result form PCollectionTuple with OUT and DEAD_LETTER\n+       * tags.\n+       *\n+       * @param pct the pct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b117204174442d73f0657aedaac8b26c090038"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MDczOQ==", "bodyText": "invalid DICOM web path", "url": "https://github.com/apache/beam/pull/13137#discussion_r512160739", "createdAt": "2020-10-26T17:57:27Z", "author": {"login": "poojavenkatram"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "diffHunk": "@@ -196,6 +197,69 @@ public Empty deleteFhirStore(String name) throws IOException {\n     return client.projects().locations().datasets().fhirStores().delete(name).execute();\n   }\n \n+  @Override\n+  public String retrieveDicomStudyMetadata(String dicomWebPath) throws IOException {\n+    String[] webPathSplit;\n+    webPathSplit = dicomWebPath.split(\"/dicomWeb/\");\n+    if (webPathSplit.length != 2) {\n+      throw new IOException(\"Invalid Web Path\");\n+    }\n+\n+    String dicomStorePath = webPathSplit[0];\n+\n+    String[] searchParameters;\n+    searchParameters = webPathSplit[1].split(\"/\");\n+    if (searchParameters.length < 2) {\n+      throw new IOException(\"Invalid Web Path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b117204174442d73f0657aedaac8b26c090038"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af247509a78bd0821fa53bdaa12b6f454ea186ef", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/af247509a78bd0821fa53bdaa12b6f454ea186ef", "committedDate": "2020-10-26T18:30:23Z", "message": "[BEAM-11073] DicomIO documentation fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODY3NTM1", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-522867535", "createdAt": "2020-11-03T20:55:57Z", "commit": {"oid": "af247509a78bd0821fa53bdaa12b6f454ea186ef"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo1NTo1N1rOHtAIyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTowMjozNVrOHtAVUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1MDIxNg==", "bodyText": "Transforms in Beam almost never are meant to be created via their constructor. I would recommend using a static class-level function (e.g. DicomIO.readStudyMetadata()), and making the constructor private.", "url": "https://github.com/apache/beam/pull/13137#discussion_r516950216", "createdAt": "2020-11-03T20:55:57Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).\n+ */\n+public class DicomIO {\n+\n+  /**\n+   * This class makes a call to the retrieve metadata endpoint\n+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a\n+   * function that can be used to process a Pubsub message from a DICOM store, read the DICOM study\n+   * path and get the metadata of the specified study. You can learn how to configure PubSub\n+   * messages to be published when an instance is stored by following:\n+   * https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output a {@link\n+   * ReadDicomStudyMetadata.Result} which will contain metadata of the study encoded as a json\n+   * array.\n+   */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    public ReadDicomStudyMetadata() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af247509a78bd0821fa53bdaa12b6f454ea186ef"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1MDgzNA==", "bodyText": "I recommend adding richer documentation here. Consider the FhirIO Javadoc:\nhttps://beam.apache.org/releases/javadoc/2.23.0/index.html?org/apache/beam/sdk/io/gcp/healthcare/FhirIO.html\nAnd the code:\nhttps://github.com/apache/beam/blob/master/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java#L91-L200", "url": "https://github.com/apache/beam/pull/13137#discussion_r516950834", "createdAt": "2020-11-03T20:57:11Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af247509a78bd0821fa53bdaa12b6f454ea186ef"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1MTg5NA==", "bodyText": "Is it possible to read study metadata coming from a source other than Pubsub? Perhaps a batch pipeline that reads a set of files?\nI am wondering if it makes sense to fix the input to a Pubsub Message. It sounds like you need a String containing a web path - wouldn't it make sense to receive a PCollection of String, so that users don't have to always pass a Pubsub message?\nAnother option is to make this a PTransform<PCollection<T>, DicomIO.ReadDicomStudyMetadata.Result>, and have a configuration parameter SimpleFunction<T, String> dicomPathFunction that users can pass to obtain the dicom path from the input object, but that feels like overkill : )", "url": "https://github.com/apache/beam/pull/13137#discussion_r516951894", "createdAt": "2020-11-03T20:59:20Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).\n+ */\n+public class DicomIO {\n+\n+  /**\n+   * This class makes a call to the retrieve metadata endpoint\n+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a\n+   * function that can be used to process a Pubsub message from a DICOM store, read the DICOM study\n+   * path and get the metadata of the specified study. You can learn how to configure PubSub\n+   * messages to be published when an instance is stored by following:\n+   * https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output a {@link\n+   * ReadDicomStudyMetadata.Result} which will contain metadata of the study encoded as a json\n+   * array.\n+   */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af247509a78bd0821fa53bdaa12b6f454ea186ef"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1MzQyNg==", "bodyText": "I see that you're making individual blocking requests to the dicomStore - I have a couple questions:\n\nDoes dicom support batched requests?\nDoes it support concurrent requests?\n\nIn this case, you're issuing individual, blocking calls, which may give your transform a very low throughput. If you can use batching and/or async IO, you should be able to reach a higher throughput.", "url": "https://github.com/apache/beam/pull/13137#discussion_r516953426", "createdAt": "2020-11-03T21:02:35Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).\n+ */\n+public class DicomIO {\n+\n+  /**\n+   * This class makes a call to the retrieve metadata endpoint\n+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a\n+   * function that can be used to process a Pubsub message from a DICOM store, read the DICOM study\n+   * path and get the metadata of the specified study. You can learn how to configure PubSub\n+   * messages to be published when an instance is stored by following:\n+   * https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output a {@link\n+   * ReadDicomStudyMetadata.Result} which will contain metadata of the study encoded as a json\n+   * array.\n+   */\n+  public static class ReadDicomStudyMetadata\n+      extends PTransform<PCollection<PubsubMessage>, DicomIO.ReadDicomStudyMetadata.Result> {\n+\n+    public ReadDicomStudyMetadata() {}\n+\n+    /** TupleTag for the main output. */\n+    public static final TupleTag<String> METADATA = new TupleTag<String>() {};\n+    /** TupleTag for any error response. */\n+    public static final TupleTag<String> ERROR_MESSAGE = new TupleTag<String>() {};\n+\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> readResponse;\n+\n+      private PCollection<String> failedReads;\n+\n+      /** Contains both the response and error outputs from the transformation. */\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create DicomIO.ReadDicomStudyMetadata.Result from PCollectionTuple which contains the\n+       * response (with METADATA and ERROR_MESSAGE tags).\n+       *\n+       * @param pct the pct\n+       * @return the read result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static DicomIO.ReadDicomStudyMetadata.Result of(PCollectionTuple pct)\n+          throws IllegalArgumentException {\n+        if (pct.getAll()\n+            .keySet()\n+            .containsAll((Collection<?>) TupleTagList.of(METADATA).and(ERROR_MESSAGE))) {\n+          return new DicomIO.ReadDicomStudyMetadata.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+              \"The PCollection tuple must have the DicomIO.ReadDicomStudyMetadata.METADATA \"\n+                  + \"and DicomIO.ReadDicomStudyMetadata.ERROR_MESSAGE tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.readResponse = pct.get(METADATA);\n+        this.failedReads = pct.get(ERROR_MESSAGE);\n+      }\n+\n+      /**\n+       * Gets failed reads.\n+       *\n+       * @return the failed reads\n+       */\n+      public PCollection<String> getFailedReads() {\n+        return failedReads;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getReadResponse() {\n+        return readResponse;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(METADATA, readResponse);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+          String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /**\n+     * DoFn to fetch the metadata of a study from a Dicom store based on it's location and study id.\n+     */\n+    static class FetchStudyMetadataFn extends DoFn<PubsubMessage, String> {\n+\n+      private HealthcareApiClient dicomStore;\n+\n+      /**\n+       * Instantiate the healthcare client.\n+       *\n+       * @throws IOException\n+       */\n+      @Setup\n+      public void instantiateHealthcareClient() throws IOException {\n+        this.dicomStore = new HttpHealthcareApiClient();\n+      }\n+\n+      /**\n+       * Process The Pub/Sub message.\n+       *\n+       * @param context The input containing the pub/sub message\n+       */\n+      @ProcessElement\n+      public void processElement(ProcessContext context) {\n+        PubsubMessage msg = context.element();\n+        byte[] msgPayload = msg.getPayload();\n+        try {\n+          String dicomWebPath = new String(msgPayload, \"UTF-8\");\n+          String responseData = dicomStore.retrieveDicomStudyMetadata(dicomWebPath);\n+          context.output(METADATA, responseData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af247509a78bd0821fa53bdaa12b6f454ea186ef"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e5640e9f2a27d29156bad25c504fac388509a5", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/66e5640e9f2a27d29156bad25c504fac388509a5", "committedDate": "2020-11-04T20:10:50Z", "message": "DicomIO - New docs + connector requires a String input"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzAzNzk1", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-524703795", "createdAt": "2020-11-05T21:56:33Z", "commit": {"oid": "66e5640e9f2a27d29156bad25c504fac388509a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1NjozNFrOHuYPdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1NjozNFrOHuYPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MzcxNw==", "bodyText": "ok one more question - does it make sense to just call it readStudyMetadata since we're already in DicomIO? Up to you.", "url": "https://github.com/apache/beam/pull/13137#discussion_r518393717", "createdAt": "2020-11-05T21:56:34Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -37,9 +36,27 @@\n /**\n  * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n  * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).\n+ *\n+ * <h3>Reading Study-Level Metadata</h3>\n+ *\n+ * The study-level metadata for a dicom instance can be read with {@link ReadDicomStudyMetadata}.\n+ * Retrieve the metadata of a dicom instance given its store path as a string. This will return a\n+ * {@link ReadDicomStudyMetadata.Result}. You can fetch the successful calls using\n+ * getReadResponse(), and any failed reads using getFailedReads().\n+ *\n+ * <h3>Example</h3>\n+ *\n+ * {@code Pipeline p = ... String webPath = ... DicomIO.ReadDicomStudyMetadata.Result\n+ * readMetadataResult = p .apply(Create.of(webPath)) PCollection<String> goodRead =\n+ * readMetadataResult.getReadResponse() PCollection<String> failRead =\n+ * readMetadataResult.getFailedReads() }\n  */\n public class DicomIO {\n \n+  public static ReadDicomStudyMetadata readDicomStudyMetadata() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e5640e9f2a27d29156bad25c504fac388509a5"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bcbfa392b47d5a7fc6e7723c21ccf21529c4c08", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/7bcbfa392b47d5a7fc6e7723c21ccf21529c4c08", "committedDate": "2020-11-06T18:44:57Z", "message": "DicomIO Integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f62e66d8eab39da8df57613d5fba77b09a2d6ef", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/1f62e66d8eab39da8df57613d5fba77b09a2d6ef", "committedDate": "2020-11-09T15:02:01Z", "message": "DicomIO fix compatibility with DirectRunner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41b42e5f0faa0ccf55043414086dc0eec1cb1c8", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/d41b42e5f0faa0ccf55043414086dc0eec1cb1c8", "committedDate": "2020-11-09T15:40:32Z", "message": "DicomIO compile checks fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d575b18ea5593b2bc404cfe00c3662ab5b32670", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/1d575b18ea5593b2bc404cfe00c3662ab5b32670", "committedDate": "2020-11-10T18:37:39Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "164b36f344aa4ffb87c26ca8e318e57967476e63", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/164b36f344aa4ffb87c26ca8e318e57967476e63", "committedDate": "2020-11-10T18:44:37Z", "message": "Merge branch 'master' of https://github.com/Aliraza-N/beam"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bcaad787db9e98a239ef44d62c80a6b3ce42bf6", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/5bcaad787db9e98a239ef44d62c80a6b3ce42bf6", "committedDate": "2020-11-10T18:46:24Z", "message": "DicomIO remove old constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/ac04754a56906de19b3f3467ee63adce9d94a847", "committedDate": "2020-11-10T20:23:24Z", "message": "DicomIO suppress warnings that contradict beam model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzgxMzY2", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-529381366", "createdAt": "2020-11-12T18:40:34Z", "commit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0MDozNVrOHyIlwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0MDozNVrOHyIlwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMTU4NQ==", "bodyText": "can you add a PAssert verification here? To verify that the expected message shows up?", "url": "https://github.com/apache/beam/pull/13137#discussion_r522331585", "createdAt": "2020-11-12T18:40:35Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOReadIT.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+\n+import java.io.IOException;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@SuppressWarnings({\"nullness\", \"rawtypes\", \"uninitialized\"})\n+public class DicomIOReadIT {\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+\n+  private String healthcareDataset;\n+  private String project;\n+  private HealthcareApiClient client;\n+  private String storeName = \"foo\";\n+\n+  @Before\n+  public void setup() throws IOException {\n+    project =\n+        TestPipeline.testingPipelineOptions()\n+            .as(HealthcareStoreTestPipelineOptions.class)\n+            .getStoreProjectId();\n+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);\n+    client = new HttpHealthcareApiClient();\n+\n+    client.createDicomStore(healthcareDataset, storeName);\n+  }\n+\n+  @After\n+  public void deleteDicomStore() throws IOException {\n+    client.deleteDicomStore(healthcareDataset + \"/dicomStores/\" + storeName);\n+  }\n+\n+  @Test\n+  public void testDicomMetadataRead() throws IOException {\n+    String webPath =\n+        String.format(\"%s/dicomStores/%s/dicomWeb/studies/\", healthcareDataset, storeName);\n+\n+    DicomIO.ReadStudyMetadata.Result result =\n+        pipeline.apply(Create.of(webPath)).apply(DicomIO.readStudyMetadata());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzgxOTgw", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-529381980", "createdAt": "2020-11-12T18:41:21Z", "commit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0MToyMVrOHyInmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0MToyMVrOHyInmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMjA1OQ==", "bodyText": "Maybe - can you create a JIRA issue, and add // TODO(BEAM-XXXX) Change to non-blocking async calls here?", "url": "https://github.com/apache/beam/pull/13137#discussion_r522332059", "createdAt": "2020-11-12T18:41:21Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).\n+ *\n+ * <h3>Reading Study-Level Metadata</h3>\n+ *\n+ * The study-level metadata for a dicom instance can be read with {@link ReadStudyMetadata}.\n+ * Retrieve the metadata of a dicom instance given its store path as a string. This will return a\n+ * {@link ReadStudyMetadata.Result}. You can fetch the successful calls using getReadResponse(), and\n+ * any failed reads using getFailedReads().\n+ *\n+ * <h3>Example</h3>\n+ *\n+ * {@code Pipeline p = ... String webPath = ... DicomIO.ReadStudyMetadata.Result readMetadataResult\n+ * = p .apply(Create.of(webPath)) PCollection<String> goodRead =\n+ * readMetadataResult.getReadResponse() PCollection<String> failRead =\n+ * readMetadataResult.getFailedReads() }\n+ */\n+public class DicomIO {\n+\n+  public static ReadStudyMetadata readStudyMetadata() {\n+    return new ReadStudyMetadata();\n+  }\n+\n+  /**\n+   * This class makes a call to the retrieve metadata endpoint\n+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a\n+   * function that can be used to process a Pubsub message from a DICOM store, read the DICOM study\n+   * path and get the metadata of the specified study. You can learn how to configure PubSub\n+   * messages to be published when an instance is stored by following:\n+   * https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output a {@link\n+   * ReadStudyMetadata.Result} which will contain metadata of the study encoded as a json array.\n+   */\n+  public static class ReadStudyMetadata\n+      extends PTransform<PCollection<String>, ReadStudyMetadata.Result> {\n+\n+    private ReadStudyMetadata() {}\n+\n+    /** TupleTag for the main output. */\n+    public static final TupleTag<String> METADATA = new TupleTag<String>() {};\n+    /** TupleTag for any error response. */\n+    public static final TupleTag<String> ERROR_MESSAGE = new TupleTag<String>() {};\n+\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> readResponse;\n+\n+      private PCollection<String> failedReads;\n+\n+      /** Contains both the response and error outputs from the transformation. */\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create DicomIO.ReadStudyMetadata.Result from PCollectionTuple which contains the response\n+       * (with METADATA and ERROR_MESSAGE tags).\n+       *\n+       * @param pct the pct\n+       * @return the read result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static ReadStudyMetadata.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+            .keySet()\n+            .containsAll((Collection<?>) TupleTagList.of(METADATA).and(ERROR_MESSAGE))) {\n+          return new ReadStudyMetadata.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+              \"The PCollection tuple must have the DicomIO.ReadStudyMetadata.METADATA \"\n+                  + \"and DicomIO.ReadStudyMetadata.ERROR_MESSAGE tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.readResponse = pct.get(METADATA);\n+        this.failedReads = pct.get(ERROR_MESSAGE);\n+      }\n+\n+      /**\n+       * Gets failed reads.\n+       *\n+       * @return the failed reads\n+       */\n+      public PCollection<String> getFailedReads() {\n+        return failedReads;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getReadResponse() {\n+        return readResponse;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(METADATA, readResponse);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+          String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /**\n+     * DoFn to fetch the metadata of a study from a Dicom store based on it's location and study id.\n+     */\n+    @SuppressWarnings({\"nullness\", \"rawtypes\"})\n+    static class FetchStudyMetadataFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient dicomStore;\n+\n+      /**\n+       * Instantiate the healthcare client.\n+       *\n+       * @throws IOException\n+       */\n+      @Setup\n+      public void instantiateHealthcareClient() throws IOException {\n+        if (dicomStore == null) {\n+          this.dicomStore = new HttpHealthcareApiClient();\n+        }\n+      }\n+\n+      /**\n+       * Process The Pub/Sub message.\n+       *\n+       * @param context The input containing the pub/sub message\n+       */\n+      @ProcessElement\n+      public void processElement(ProcessContext context) {\n+        String dicomWebPath = context.element();\n+        try {\n+          // TODO Change to non-blocking async calls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5Mzg0MTIz", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-529384123", "createdAt": "2020-11-12T18:44:07Z", "commit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0NDowN1rOHyIt3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0NDowN1rOHyIt3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMzY2Mw==", "bodyText": "I suspect that if you do this, you can remove the nullness condition in SuppressWarnings?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  private HealthcareApiClient dicomStore;\n          \n          \n            \n                  private HealthcareApiClient dicomStore = new HttpHealthcareApiClient();", "url": "https://github.com/apache/beam/pull/13137#discussion_r522333663", "createdAt": "2020-11-12T18:44:07Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionTuple;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.PValue;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.apache.beam.sdk.values.TupleTagList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud\n+ * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).\n+ *\n+ * <h3>Reading Study-Level Metadata</h3>\n+ *\n+ * The study-level metadata for a dicom instance can be read with {@link ReadStudyMetadata}.\n+ * Retrieve the metadata of a dicom instance given its store path as a string. This will return a\n+ * {@link ReadStudyMetadata.Result}. You can fetch the successful calls using getReadResponse(), and\n+ * any failed reads using getFailedReads().\n+ *\n+ * <h3>Example</h3>\n+ *\n+ * {@code Pipeline p = ... String webPath = ... DicomIO.ReadStudyMetadata.Result readMetadataResult\n+ * = p .apply(Create.of(webPath)) PCollection<String> goodRead =\n+ * readMetadataResult.getReadResponse() PCollection<String> failRead =\n+ * readMetadataResult.getFailedReads() }\n+ */\n+public class DicomIO {\n+\n+  public static ReadStudyMetadata readStudyMetadata() {\n+    return new ReadStudyMetadata();\n+  }\n+\n+  /**\n+   * This class makes a call to the retrieve metadata endpoint\n+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a\n+   * function that can be used to process a Pubsub message from a DICOM store, read the DICOM study\n+   * path and get the metadata of the specified study. You can learn how to configure PubSub\n+   * messages to be published when an instance is stored by following:\n+   * https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output a {@link\n+   * ReadStudyMetadata.Result} which will contain metadata of the study encoded as a json array.\n+   */\n+  public static class ReadStudyMetadata\n+      extends PTransform<PCollection<String>, ReadStudyMetadata.Result> {\n+\n+    private ReadStudyMetadata() {}\n+\n+    /** TupleTag for the main output. */\n+    public static final TupleTag<String> METADATA = new TupleTag<String>() {};\n+    /** TupleTag for any error response. */\n+    public static final TupleTag<String> ERROR_MESSAGE = new TupleTag<String>() {};\n+\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> readResponse;\n+\n+      private PCollection<String> failedReads;\n+\n+      /** Contains both the response and error outputs from the transformation. */\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create DicomIO.ReadStudyMetadata.Result from PCollectionTuple which contains the response\n+       * (with METADATA and ERROR_MESSAGE tags).\n+       *\n+       * @param pct the pct\n+       * @return the read result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static ReadStudyMetadata.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+            .keySet()\n+            .containsAll((Collection<?>) TupleTagList.of(METADATA).and(ERROR_MESSAGE))) {\n+          return new ReadStudyMetadata.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+              \"The PCollection tuple must have the DicomIO.ReadStudyMetadata.METADATA \"\n+                  + \"and DicomIO.ReadStudyMetadata.ERROR_MESSAGE tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.readResponse = pct.get(METADATA);\n+        this.failedReads = pct.get(ERROR_MESSAGE);\n+      }\n+\n+      /**\n+       * Gets failed reads.\n+       *\n+       * @return the failed reads\n+       */\n+      public PCollection<String> getFailedReads() {\n+        return failedReads;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getReadResponse() {\n+        return readResponse;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(METADATA, readResponse);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+          String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /**\n+     * DoFn to fetch the metadata of a study from a Dicom store based on it's location and study id.\n+     */\n+    @SuppressWarnings({\"nullness\", \"rawtypes\"})\n+    static class FetchStudyMetadataFn extends DoFn<String, String> {\n+\n+      private HealthcareApiClient dicomStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5Mzg1MDgz", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-529385083", "createdAt": "2020-11-12T18:45:20Z", "commit": {"oid": "ac04754a56906de19b3f3467ee63adce9d94a847"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c4a87f1881256c1130aec2fb347f290e8efcc1b", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/6c4a87f1881256c1130aec2fb347f290e8efcc1b", "committedDate": "2020-11-12T22:35:23Z", "message": "DicomIO - updated integration test + small fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f923e67df39b119008be9ba8d0f83e1daf026a20", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/f923e67df39b119008be9ba8d0f83e1daf026a20", "committedDate": "2020-11-13T15:54:01Z", "message": "DicomIO - added null checks after supressing warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjY2NDg1", "url": "https://github.com/apache/beam/pull/13137#pullrequestreview-530266485", "createdAt": "2020-11-13T17:30:15Z", "commit": {"oid": "f923e67df39b119008be9ba8d0f83e1daf026a20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozMDoxNVrOHy4J1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozMDoxNVrOHy4J1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExMDg3MA==", "bodyText": "Does it make sense to add a positive PAssert as well? Verifying that the content you inserted is still there?", "url": "https://github.com/apache/beam/pull/13137#discussion_r523110870", "createdAt": "2020-11-13T17:30:15Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOReadIT.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.healthcare;\n+\n+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@SuppressWarnings({\"nullness\", \"rawtypes\", \"uninitialized\"})\n+public class DicomIOReadIT {\n+  private static final String TEST_FILE_PATH = \"src/test/resources/DICOM/testDicomFile.dcm\";\n+  private static final String TEST_FILE_STUDY_ID = \"study_000000000\";\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+\n+  private String healthcareDataset;\n+  private String project;\n+  private HealthcareApiClient client;\n+  private String storeName = \"foo\";\n+\n+  @Before\n+  public void setup() throws IOException, URISyntaxException {\n+    project =\n+        TestPipeline.testingPipelineOptions()\n+            .as(HealthcareStoreTestPipelineOptions.class)\n+            .getStoreProjectId();\n+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);\n+    client = new HttpHealthcareApiClient();\n+\n+    client.createDicomStore(healthcareDataset, storeName);\n+    client.uploadToDicomStore(healthcareDataset + \"/dicomStores/\" + storeName, TEST_FILE_PATH);\n+  }\n+\n+  @After\n+  public void deleteDicomStore() throws IOException {\n+    client.deleteDicomStore(healthcareDataset + \"/dicomStores/\" + storeName);\n+  }\n+\n+  @Test\n+  public void testDicomMetadataRead() throws IOException {\n+    String webPath =\n+        String.format(\n+            \"%s/dicomStores/%s/dicomWeb/studies/%s\",\n+            healthcareDataset, storeName, TEST_FILE_STUDY_ID);\n+\n+    DicomIO.ReadStudyMetadata.Result result =\n+        pipeline.apply(Create.of(webPath)).apply(DicomIO.readStudyMetadata());\n+\n+    PAssert.that(result.getFailedReads()).empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f923e67df39b119008be9ba8d0f83e1daf026a20"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b59713c663e0d53462d201d7104f37a43c088fa", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/9b59713c663e0d53462d201d7104f37a43c088fa", "committedDate": "2020-11-13T20:03:46Z", "message": "Dicom IO - more checks in IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ef111ea5d69d02286bf9aa54fdcdff1ef61d4b", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/28ef111ea5d69d02286bf9aa54fdcdff1ef61d4b", "committedDate": "2020-11-26T15:47:12Z", "message": "GCP healthcare IO - new utility class for parsing webpaths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63e22da3adcbc4ba61f0e194b674f2074b46aa8b", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/63e22da3adcbc4ba61f0e194b674f2074b46aa8b", "committedDate": "2020-11-26T18:53:38Z", "message": "GCP Webpath parser - handle null warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "069a4e827431d2370520b18fd5126753672b0f3d", "author": {"user": {"login": "Aliraza-N", "name": "Aliraza Nagamia"}}, "url": "https://github.com/apache/beam/commit/069a4e827431d2370520b18fd5126753672b0f3d", "committedDate": "2020-11-26T21:32:04Z", "message": "Dicom API method uses Webpath parser"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2115, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}