{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3Njk4MjMx", "number": 12578, "title": "[BEAM-10703] Prepare Dataflow Java runner for shardable states", "bodyText": "This is to support GroupIntoBatches transform with runner determined sharding in Dataflow. To mitigate the limited parallelism introduced by an implicit grouping on keys, we allow the states/timers associated with each input key to be shardable.\nThis PR modifies the state and work caching in the Dataflow Java runner such that the states of different shards of keys are tracked separately, to prepare it for shardable GroupIntoBatches.\nSee more details in https://s.apache.org/sharded-group-into-batches.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-14T00:07:07Z", "url": "https://github.com/apache/beam/pull/12578", "merged": true, "mergeCommit": {"oid": "60c1e8d00e9d6a0e5740837685a1ab34e752b540"}, "closed": true, "closedAt": "2020-08-21T21:08:28Z", "author": {"login": "nehsyc"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7sbcogH2gAyNDY3Njk4MjMxOjhjMDQ5MGZkMWY0NzY0ZmU0NjliZDg2YTMzMGI2Y2RlMTYxYTk3NWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBKSaHgH2gAyNDY3Njk4MjMxOjIwZWE2ZTRlMjQ0NjI3ZDQyMWI5YTliZTY1M2YyY2NhNzJjMzc5OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c0490fd1f4764fe469bd86a330b6cde161a975a", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/8c0490fd1f4764fe469bd86a330b6cde161a975a", "committedDate": "2020-08-04T20:13:25Z", "message": "Initial draft for Java worker changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a823af335ccc0ea6b7d24e0118b499e13b50fd6", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/7a823af335ccc0ea6b7d24e0118b499e13b50fd6", "committedDate": "2020-08-04T20:26:14Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af11bc0fb35ff4f6fc6c067a1bf8b69bac13d52", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/4af11bc0fb35ff4f6fc6c067a1bf8b69bac13d52", "committedDate": "2020-08-13T18:15:59Z", "message": "Fix merge conflicts and format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/73de8133f0a83ee6ff5052cc39480ea6442fa6fe", "committedDate": "2020-08-13T23:23:41Z", "message": "Minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4ODQ5MDM4", "url": "https://github.com/apache/beam/pull/12578#pullrequestreview-468849038", "createdAt": "2020-08-17T21:35:55Z", "commit": {"oid": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTozNTo1NVrOHB7rWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMjoxNzowNlrOHB8szA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODM3OQ==", "bodyText": "shardedKey?", "url": "https://github.com/apache/beam/pull/12578#discussion_r471788379", "createdAt": "2020-08-17T21:35:55Z", "author": {"login": "boyuanzz"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -2167,7 +2209,7 @@ public MapTask getMapTask() {\n     }\n \n     /** Mark the given key and work as active. */\n-    public boolean activateWork(ByteString key, Work work) {\n+    public boolean activateWork(ShardedKey key, Work work) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODQ3Ng==", "bodyText": "sharedKey?", "url": "https://github.com/apache/beam/pull/12578#discussion_r471788476", "createdAt": "2020-08-17T21:36:09Z", "author": {"login": "boyuanzz"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -2193,7 +2235,7 @@ public boolean activateWork(ByteString key, Work work) {\n     }\n \n     /** Marks the work for a the given key as complete. Schedules queued work for the key if any. */\n-    public void completeWork(ByteString key, long workToken) {\n+    public void completeWork(ShardedKey key, long workToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTEzMg==", "bodyText": "the cachedReader is also keyed: \n  \n    \n      beam/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n    \n    \n        Lines 338 to 340\n      in\n      88acc52\n    \n    \n    \n    \n\n        \n          \n           public UnboundedSource.UnboundedReader<?> getCachedReader() { \n        \n\n        \n          \n             return readerCache.acquireReader(computationId, getSerializedKey(), getWork().getCacheToken()); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nShould it also be keyed by sharedKey?", "url": "https://github.com/apache/beam/pull/12578#discussion_r471805132", "createdAt": "2020-08-17T22:17:06Z", "author": {"login": "boyuanzz"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -357,7 +358,7 @@ public void invalidateCache() {\n         }\n       }\n       activeReader = null;\n-      stateCache.invalidate(key);\n+      stateCache.invalidate(key, getWork().getShardingKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73de8133f0a83ee6ff5052cc39480ea6442fa6fe"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/f971b077eeea63b57f18501116952494b58e8c51", "committedDate": "2020-08-18T18:10:59Z", "message": "Fixed ReaderCache to include sharding key in the cache key. Renamed a few local variables."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDEyNzU1", "url": "https://github.com/apache/beam/pull/12578#pullrequestreview-471012755", "createdAt": "2020-08-19T22:40:42Z", "commit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjo0MDo0MlrOHDd20w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjo1MDoxNlrOHDeTIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5Njk0Nw==", "bodyText": "Use @AutoValue", "url": "https://github.com/apache/beam/pull/12578#discussion_r473396947", "createdAt": "2020-08-19T22:40:42Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java", "diffHunk": "@@ -59,7 +59,41 @@\n     }\n   }\n \n-  private final Cache<KV<String, ByteString>, CacheEntry> cache;\n+  private static class CacheKey {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5ODQ2MQ==", "bodyText": "no need for toString since {} does type conversions for you already\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());\n          \n          \n            \n                                LOG.info(\"Closing idle reader for {}\", notification.getKey());", "url": "https://github.com/apache/beam/pull/12578#discussion_r473398461", "createdAt": "2020-08-19T22:42:50Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java", "diffHunk": "@@ -72,25 +106,21 @@\n         CacheBuilder.newBuilder()\n             .expireAfterWrite(cacheDuration.getMillis(), TimeUnit.MILLISECONDS)\n             .removalListener(\n-                (RemovalNotification<KV<String, ByteString>, CacheEntry> notification) -> {\n+                (RemovalNotification<CacheKey, CacheEntry> notification) -> {\n                   if (notification.getCause() != RemovalCause.EXPLICIT) {\n-                    LOG.info(\"Closing idle reader for {}\", keyToString(notification.getKey()));\n+                    LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5ODY3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.warn(\"Failed to close UnboundedReader for {}\", key.toString(), e);\n          \n          \n            \n                  LOG.warn(\"Failed to close UnboundedReader for {}\", key, e);", "url": "https://github.com/apache/beam/pull/12578#discussion_r473398677", "createdAt": "2020-08-19T22:43:04Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/ReaderCache.java", "diffHunk": "@@ -72,25 +106,21 @@\n         CacheBuilder.newBuilder()\n             .expireAfterWrite(cacheDuration.getMillis(), TimeUnit.MILLISECONDS)\n             .removalListener(\n-                (RemovalNotification<KV<String, ByteString>, CacheEntry> notification) -> {\n+                (RemovalNotification<CacheKey, CacheEntry> notification) -> {\n                   if (notification.getCause() != RemovalCause.EXPLICIT) {\n-                    LOG.info(\"Closing idle reader for {}\", keyToString(notification.getKey()));\n+                    LOG.info(\"Closing idle reader for {}\", notification.getKey().toString());\n                     closeReader(notification.getKey(), notification.getValue());\n                   }\n                 })\n             .build();\n   }\n \n-  private static String keyToString(KV<String, ByteString> key) {\n-    return key.getKey() + \"-\" + key.getValue().toStringUtf8();\n-  }\n-\n   /** Close the reader and log a warning if close fails. */\n-  private void closeReader(KV<String, ByteString> key, CacheEntry entry) {\n+  private void closeReader(CacheKey key, CacheEntry entry) {\n     try {\n       entry.reader.close();\n     } catch (IOException e) {\n-      LOG.warn(\"Failed to close UnboundedReader for {}\", keyToString(key), e);\n+      LOG.warn(\"Failed to close UnboundedReader for {}\", key.toString(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwMjc2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);\n          \n          \n            \n                ShardedKey key1Shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);", "url": "https://github.com/apache/beam/pull/12578#discussion_r473402766", "createdAt": "2020-08-19T22:48:26Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java", "diffHunk": "@@ -2131,8 +2215,50 @@ public void testActiveWork() throws Exception {\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n   }\n \n+  @Test\n+  public void testActiveWorkForShardedKeys() throws Exception {\n+    BoundedQueueExecutor mockExecutor = Mockito.mock(BoundedQueueExecutor.class);\n+    StreamingDataflowWorker.ComputationState computationState =\n+        new StreamingDataflowWorker.ComputationState(\n+            \"computation\",\n+            defaultMapTask(Arrays.asList(makeSourceInstruction(StringUtf8Coder.of()))),\n+            mockExecutor,\n+            ImmutableMap.of(),\n+            null);\n+\n+    ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51"}, "originalPosition": 437}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwMjkwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ShardedKey key1_shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);\n          \n          \n            \n                ShardedKey key1Shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);", "url": "https://github.com/apache/beam/pull/12578#discussion_r473402906", "createdAt": "2020-08-19T22:48:36Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorkerTest.java", "diffHunk": "@@ -2131,8 +2215,50 @@ public void testActiveWork() throws Exception {\n     Mockito.verifyNoMoreInteractions(mockExecutor);\n   }\n \n+  @Test\n+  public void testActiveWorkForShardedKeys() throws Exception {\n+    BoundedQueueExecutor mockExecutor = Mockito.mock(BoundedQueueExecutor.class);\n+    StreamingDataflowWorker.ComputationState computationState =\n+        new StreamingDataflowWorker.ComputationState(\n+            \"computation\",\n+            defaultMapTask(Arrays.asList(makeSourceInstruction(StringUtf8Coder.of()))),\n+            mockExecutor,\n+            ImmutableMap.of(),\n+            null);\n+\n+    ShardedKey key1_shard1 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 1);\n+    ShardedKey key1_shard2 = new ShardedKey(ByteString.copyFromUtf8(\"key1\"), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwNDE5Mw==", "bodyText": "Use @AutoValue", "url": "https://github.com/apache/beam/pull/12578#discussion_r473404193", "createdAt": "2020-08-19T22:50:16Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1095,14 +1098,46 @@ public void run() {\n             }\n           }\n         };\n-    if (!computationState.activateWork(workItem.getKey(), work)) {\n+    if (!computationState.activateWork(\n+        new ShardedKey(workItem.getKey(), workItem.getShardingKey()), work)) {\n       // Free worker if the work was not activated.\n       // This can happen if it's duplicate work or some other reason.\n       sdkHarnessRegistry.completeWork(worker);\n     }\n   }\n \n+  static class ShardedKey {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f971b077eeea63b57f18501116952494b58e8c51"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f203e9b48a44135065cce919607347c0b3fe345e", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/f203e9b48a44135065cce919607347c0b3fe345e", "committedDate": "2020-08-20T19:46:15Z", "message": "Addressed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjgzMDM3", "url": "https://github.com/apache/beam/pull/12578#pullrequestreview-472683037", "createdAt": "2020-08-21T17:55:59Z", "commit": {"oid": "f203e9b48a44135065cce919607347c0b3fe345e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1NTo1OVrOHE2OTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1NTo1OVrOHE2OTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDc1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              shardedKey.toString(), completedWork.getWorkItem().getWorkToken(), workToken));\n          \n          \n            \n                              shardedKey, completedWork.getWorkItem().getWorkToken(), workToken));", "url": "https://github.com/apache/beam/pull/12578#discussion_r474844750", "createdAt": "2020-08-21T17:55:59Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -2205,20 +2238,18 @@ public void completeWork(ByteString key, long workToken) {\n           throw new NullPointerException(\n               String.format(\n                   \"No active state for key %s, expected token %s\",\n-                  TextFormat.escapeBytes(key), workToken));\n+                  shardedKey.toString(), workToken));\n         }\n         if (completedWork.getWorkItem().getWorkToken() != workToken) {\n           throw new IllegalStateException(\n               String.format(\n                   \"Token mismatch for key %s: %s and %s\",\n-                  TextFormat.escapeBytes(key),\n-                  completedWork.getWorkItem().getWorkToken(),\n-                  workToken));\n+                  shardedKey.toString(), completedWork.getWorkItem().getWorkToken(), workToken));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f203e9b48a44135065cce919607347c0b3fe345e"}, "originalPosition": 201}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a53b777882b872bfafda8d52a8d5574ddcfd68", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/b0a53b777882b872bfafda8d52a8d5574ddcfd68", "committedDate": "2020-08-21T17:56:49Z", "message": "Update runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43456607cc77b81721a9b398c7d44e199e579d9f", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/43456607cc77b81721a9b398c7d44e199e579d9f", "committedDate": "2020-08-21T19:41:53Z", "message": "Update StreamingDataflowWorker.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20ea6e4e244627d421b9a9be653f2cca72c37995", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/20ea6e4e244627d421b9a9be653f2cca72c37995", "committedDate": "2020-08-21T19:50:19Z", "message": "Run spotlessApply"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3530, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}