{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzU2Njc2", "number": 13567, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxODo1ODoyNlrOFOSl-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOToyMTo1MlrOFOTHug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTI5MDE3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriberOptions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxODo1ODoyNlrOIS90hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODo0OTowM1rOITyHcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1ODE0OA==", "bodyText": "You may want to update the javadoc of public abstract Set<Partition> partitions();. Based on your code, whether the partitions is empty will lead to different behavior.", "url": "https://github.com/apache/beam/pull/13567#discussion_r556758148", "createdAt": "2021-01-13T18:58:26Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriberOptions.java", "diffHunk": "@@ -163,28 +161,6 @@ abstract Builder setBacklogReaderSupplier(\n     abstract Builder setOffsetReaderSupplier(\n         SerializableSupplier<InitialOffsetReader> offsetReaderSupplier);\n \n-    // Used for implementing build();\n-    abstract SubscriptionPath subscriptionPath();\n-\n-    abstract Set<Partition> partitions();\n-\n-    abstract SubscriberOptions autoBuild();\n-\n-    @SuppressWarnings(\"CheckReturnValue\")\n-    public SubscriberOptions build() throws ApiException {\n-      if (!partitions().isEmpty()) {\n-        return autoBuild();\n-      }\n-\n-      if (partitions().isEmpty()) {\n-        int partitionCount = PartitionLookupUtils.numPartitions(subscriptionPath());\n-        ImmutableSet.Builder<Partition> partitions = ImmutableSet.builder();\n-        for (int i = 0; i < partitionCount; i++) {\n-          partitions.add(Partition.of(i));\n-        }\n-        setPartitions(partitions.build());\n-      }\n-      return autoBuild();\n-    }\n+    public abstract SubscriberOptions build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3NDYyNg==", "bodyText": "\"A set of partitions. If empty, retrieve the set of partitions using an admin client.\" is the comment there. I think that is still an accurate explanation?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556774626", "createdAt": "2021-01-13T19:27:05Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriberOptions.java", "diffHunk": "@@ -163,28 +161,6 @@ abstract Builder setBacklogReaderSupplier(\n     abstract Builder setOffsetReaderSupplier(\n         SerializableSupplier<InitialOffsetReader> offsetReaderSupplier);\n \n-    // Used for implementing build();\n-    abstract SubscriptionPath subscriptionPath();\n-\n-    abstract Set<Partition> partitions();\n-\n-    abstract SubscriberOptions autoBuild();\n-\n-    @SuppressWarnings(\"CheckReturnValue\")\n-    public SubscriberOptions build() throws ApiException {\n-      if (!partitions().isEmpty()) {\n-        return autoBuild();\n-      }\n-\n-      if (partitions().isEmpty()) {\n-        int partitionCount = PartitionLookupUtils.numPartitions(subscriptionPath());\n-        ImmutableSet.Builder<Partition> partitions = ImmutableSet.builder();\n-        for (int i = 0; i < partitionCount; i++) {\n-          partitions.add(Partition.of(i));\n-        }\n-        setPartitions(partitions.build());\n-      }\n-      return autoBuild();\n-    }\n+    public abstract SubscriberOptions build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1ODE0OA=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzOTA3MA==", "bodyText": "You may want to highlight the ability of watching partitions growth when partitions() is empty. This is the key information when users look into javadoc.", "url": "https://github.com/apache/beam/pull/13567#discussion_r557039070", "createdAt": "2021-01-14T04:37:45Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriberOptions.java", "diffHunk": "@@ -163,28 +161,6 @@ abstract Builder setBacklogReaderSupplier(\n     abstract Builder setOffsetReaderSupplier(\n         SerializableSupplier<InitialOffsetReader> offsetReaderSupplier);\n \n-    // Used for implementing build();\n-    abstract SubscriptionPath subscriptionPath();\n-\n-    abstract Set<Partition> partitions();\n-\n-    abstract SubscriberOptions autoBuild();\n-\n-    @SuppressWarnings(\"CheckReturnValue\")\n-    public SubscriberOptions build() throws ApiException {\n-      if (!partitions().isEmpty()) {\n-        return autoBuild();\n-      }\n-\n-      if (partitions().isEmpty()) {\n-        int partitionCount = PartitionLookupUtils.numPartitions(subscriptionPath());\n-        ImmutableSet.Builder<Partition> partitions = ImmutableSet.builder();\n-        for (int i = 0; i < partitionCount; i++) {\n-          partitions.add(Partition.of(i));\n-        }\n-        setPartitions(partitions.build());\n-      }\n-      return autoBuild();\n-    }\n+    public abstract SubscriberOptions build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1ODE0OA=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNDk2MA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13567#discussion_r557614960", "createdAt": "2021-01-14T18:49:03Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriberOptions.java", "diffHunk": "@@ -163,28 +161,6 @@ abstract Builder setBacklogReaderSupplier(\n     abstract Builder setOffsetReaderSupplier(\n         SerializableSupplier<InitialOffsetReader> offsetReaderSupplier);\n \n-    // Used for implementing build();\n-    abstract SubscriptionPath subscriptionPath();\n-\n-    abstract Set<Partition> partitions();\n-\n-    abstract SubscriberOptions autoBuild();\n-\n-    @SuppressWarnings(\"CheckReturnValue\")\n-    public SubscriberOptions build() throws ApiException {\n-      if (!partitions().isEmpty()) {\n-        return autoBuild();\n-      }\n-\n-      if (partitions().isEmpty()) {\n-        int partitionCount = PartitionLookupUtils.numPartitions(subscriptionPath());\n-        ImmutableSet.Builder<Partition> partitions = ImmutableSet.builder();\n-        for (int i = 0; i < partitionCount; i++) {\n-          partitions.add(Partition.of(i));\n-        }\n-        setPartitions(partitions.build());\n-      }\n-      return autoBuild();\n-    }\n+    public abstract SubscriberOptions build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1ODE0OA=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTMzMTY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOTowOTo1NFrOIS-OkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOTozMDo0NlrOIS-9VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NDgxNg==", "bodyText": "Even though the terminate will not be true in this PR, I'm wondering how is pollDuration.multipliedBy(10) computed?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556764816", "createdAt": "2021-01-13T19:09:54Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);\n+                      }\n+                    })\n+                .withPollInterval(pollDuration)\n+                .withTerminationPerInput(\n+                    terminate\n+                        ? Watch.Growth.afterTotalOf(pollDuration.multipliedBy(10))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3Njc4OA==", "bodyText": "This is for unit testing purposes only. If set to true, it polls 10 times. I'm open to better testing methodologies if they exist.", "url": "https://github.com/apache/beam/pull/13567#discussion_r556776788", "createdAt": "2021-01-13T19:30:46Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);\n+                      }\n+                    })\n+                .withPollInterval(pollDuration)\n+                .withTerminationPerInput(\n+                    terminate\n+                        ? Watch.Growth.afterTotalOf(pollDuration.multipliedBy(10))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NDgxNg=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTMzNjc5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOToxMToyOFrOIS-R3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODoyOToyNlrOITxb7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NTY2Mg==", "bodyText": "pollDuration and terminate should be configurable from PubSubLiteIO with provided default values. What do you think?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556765662", "createdAt": "2021-01-13T19:11:28Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NzY4Mg==", "bodyText": "And for terminate, if you decide to use Watch.Growth.afterTotalOf as the termination condition, it would be better to have the time duration directly instead of a boolean. What do you think?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556767682", "createdAt": "2021-01-13T19:14:51Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NTY2Mg=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3NTkxOA==", "bodyText": "should be configurable from PubSubLiteIO\n\nI don't know why? I can't imagine a user would care how often they were polling for an event that is likely to be human triggered. I'd rather defer this until someone asks for it.\n\nif you decide to use Watch.Growth.afterTotalOf as the termination condition, it would be better to have the time duration directly instead of a boolean\n\nIt will never terminate. The boolean only exists for testing purposes, as testing unbounded transforms seems to be an unsolved problem as of yet? If you can think of a better way to test this let me know.", "url": "https://github.com/apache/beam/pull/13567#discussion_r556775918", "createdAt": "2021-01-13T19:29:13Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NTY2Mg=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA0MjQwMg==", "bodyText": "I don't know why? I can't imagine a user would care how often they were polling for an event that is likely to be human triggered. I'd rather defer this until someone asks for it.\n\nIf users have a good knowledge on the pattern on partitions growth, they can figure out a reasonable poll duration to be able to detect the new produced partitions as soon as possible, or to avoid doing polling so frequently.\n\nIt will never terminate. The boolean only exists for testing purposes, as testing unbounded transforms seems to be an unsolved problem as of yet? If you can think of a better way to test this let me know.\n\nHmmm that's a real problem for testing unbounded transform. I don't have a better idea now.", "url": "https://github.com/apache/beam/pull/13567#discussion_r557042402", "createdAt": "2021-01-14T04:50:40Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NTY2Mg=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMzgyMg==", "bodyText": "the pattern on partitions growth\n\nThis should be O(months) apart. I think the default frequency is fine.", "url": "https://github.com/apache/beam/pull/13567#discussion_r557603822", "createdAt": "2021-01-14T18:29:26Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NTY2Mg=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTM3NjU4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOToyMTo1MlrOIS-prQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNDo1NzowOVrOIUBMTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MTc1Nw==", "bodyText": "Is it intended to always have the watermark as Instant.EPOCH? It will hold back the system watermark unnecessary and the worst case is that downstream operations will have to wait for this watch transform to complete to process.", "url": "https://github.com/apache/beam/pull/13567#discussion_r556771757", "createdAt": "2021-01-13T19:21:52Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3NjM5OQ==", "bodyText": "Is it intended to always have the watermark as Instant.EPOCH\n\nI don't care what the watermark is, so I used EPOCH as the default value. Should I use something like Instant.now()?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556776399", "createdAt": "2021-01-13T19:30:03Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MTc1Nw=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA0MDMyNQ==", "bodyText": "Instant.now() is better than Instant.EPOCH. You should care about the watermark here since the watermark here will affect the watermark of the whole pipeline.", "url": "https://github.com/apache/beam/pull/13567#discussion_r557040325", "createdAt": "2021-01-14T04:42:45Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MTc1Nw=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwNDIyMQ==", "bodyText": "It shouldn't, since the next stage will overwrite the timestamps and watermarking IIUC. But I'll change to Instant.now().", "url": "https://github.com/apache/beam/pull/13567#discussion_r557604221", "createdAt": "2021-01-14T18:30:04Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MTc1Nw=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNTI5NQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13567#discussion_r557615295", "createdAt": "2021-01-14T18:49:44Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MTc1Nw=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MTk2NQ==", "bodyText": "It shouldn't, since the next stage will overwrite the timestamps and watermarking IIUC.\n\nAt least Dataflow will compute a global watermark, which is the minimal watermark of all stages. That's why you don't want to hold the watermark here.", "url": "https://github.com/apache/beam/pull/13567#discussion_r557861965", "createdAt": "2021-01-15T04:57:09Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MTc1Nw=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2403, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}