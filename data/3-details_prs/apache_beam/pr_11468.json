{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjgyNjEx", "number": 11468, "title": "[BEAM-9789] Fix lock error. Add test.", "bodyText": "Fix locking error introduced to the harness when resolving https://issues.apache.org/jira/browse/BEAM-9618\nThe root is: Always check the error before locking. And if defer mu.Unlock() isn't used (or as in this case, able to be used), always unlock before returning the error.\nDeadlocks can prevent the error case you're returning from being transmitted.\nThis PR adds tests for that new code, since harness.go is woefully under unit tested, though due to deadlocks being unverifyable (and could cause test timeouts), a specific test for that hasn't been added.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-20T20:24:14Z", "url": "https://github.com/apache/beam/pull/11468", "merged": true, "mergeCommit": {"oid": "6e6ff6157904498ceeca4931648168d793721a6e"}, "closed": true, "closedAt": "2020-04-21T20:52:04Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZk-Y5gH2gAyNDA2MjgyNjExOjgwNzhkNjNiN2FkOGZjMDkyMmJjMGNhOTRiMTkwZjE0YzYyZWYzODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ4Up7AH2gAyNDA2MjgyNjExOjg0NWMzNzQ3NTEyYjA1NmIzZGNjMDczMTM0OWU5YTllYmEzYjQwYzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8078d63b7ad8fc0922bc0ca94b190f14c62ef382", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/8078d63b7ad8fc0922bc0ca94b190f14c62ef382", "committedDate": "2020-04-20T20:18:55Z", "message": "[BEAM-9789] Fix lock error. Add test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTE5MDc4", "url": "https://github.com/apache/beam/pull/11468#pullrequestreview-396919078", "createdAt": "2020-04-21T01:03:20Z", "commit": {"oid": "8078d63b7ad8fc0922bc0ca94b190f14c62ef382"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMTowMzoyMVrOGIt5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMTowMzoyMVrOGIt5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MzY3Mg==", "bodyText": "What's the difference between the \"badLookup\" and \"nilLookup\" tests? Doesn't lookupDesc default to nil if it's not specified, making these two tests identical except with different lookupErrs?", "url": "https://github.com/apache/beam/pull/11468#discussion_r411793672", "createdAt": "2020-04-21T01:03:21Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/harness/harness_test.go", "diffHunk": "@@ -0,0 +1,169 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package harness\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n+\tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"github.com/golang/protobuf/proto\"\n+)\n+\n+// validDescriptor describes a valid pipeline with a source and a sink, but doesn't do anything else.\n+func validDescriptor(t *testing.T) *fnpb.ProcessBundleDescriptor {\n+\tt.Helper()\n+\tport := &fnpb.RemoteGrpcPort{\n+\t\tCoderId: \"c1\",\n+\t\tApiServiceDescriptor: &pipepb.ApiServiceDescriptor{\n+\t\t\tUrl: \"hostname:port\",\n+\t\t},\n+\t}\n+\tportBytes, err := proto.Marshal(port)\n+\tif err != nil {\n+\t\tt.Fatalf(\"bad port: %v\", err)\n+\t}\n+\treturn &fnpb.ProcessBundleDescriptor{\n+\t\tId: \"test\",\n+\t\tTransforms: map[string]*pipepb.PTransform{\n+\t\t\t\"source\": &pipepb.PTransform{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn:     \"beam:runner:source:v1\",\n+\t\t\t\t\tPayload: portBytes,\n+\t\t\t\t},\n+\t\t\t\tOutputs: map[string]string{\n+\t\t\t\t\t\"o1\": \"p1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\t\"sink\": &pipepb.PTransform{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn:     \"beam:runner:sink:v1\",\n+\t\t\t\t\tPayload: portBytes,\n+\t\t\t\t},\n+\t\t\t\tInputs: map[string]string{\n+\t\t\t\t\t\"i1\": \"p1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\tPcollections: map[string]*pipepb.PCollection{\n+\t\t\t\"p1\": &pipepb.PCollection{\n+\t\t\t\tCoderId: \"c1\",\n+\t\t\t},\n+\t\t},\n+\t\tCoders: map[string]*pipepb.Coder{\n+\t\t\t\"c1\": &pipepb.Coder{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn: \"beam:coder:windowed_value:v1\",\n+\t\t\t\t},\n+\t\t\t\tComponentCoderIds: []string{\"c2\", \"c3\"},\n+\t\t\t},\n+\t\t\t\"c2\": &pipepb.Coder{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn: \"beam:coder:varint:v1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\t\"c3\": &pipepb.Coder{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn: \"beam:coder:global_window:v1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+}\n+\n+func invalidDescriptor(t *testing.T) *fnpb.ProcessBundleDescriptor {\n+\treturn &fnpb.ProcessBundleDescriptor{}\n+}\n+\n+func TestControl_getOrCreatePlan(t *testing.T) {\n+\ttestBDID := bundleDescriptorID(\"test\")\n+\ttestPlan, err := exec.UnmarshalPlan(validDescriptor(t))\n+\tif err != nil {\n+\t\tt.Fatal(\"bad testPlan\")\n+\t}\n+\ttests := []struct {\n+\t\tname               string\n+\t\tlookupErr, planErr error\n+\t\tlookupDesc         *fnpb.ProcessBundleDescriptor\n+\t\tdescriptors        map[bundleDescriptorID]*fnpb.ProcessBundleDescriptor\n+\t\tplans              map[bundleDescriptorID][]*exec.Plan\n+\t}{\n+\t\t{\n+\t\t\tname:       \"OK\",\n+\t\t\tlookupDesc: validDescriptor(t),\n+\t\t}, {\n+\t\t\tname: \"cachedDescriptor\",\n+\t\t\tdescriptors: map[bundleDescriptorID]*fnpb.ProcessBundleDescriptor{\n+\t\t\t\ttestBDID: validDescriptor(t),\n+\t\t\t},\n+\t\t}, {\n+\t\t\tname: \"cachedPlan\",\n+\t\t\tplans: map[bundleDescriptorID][]*exec.Plan{\n+\t\t\t\ttestBDID: []*exec.Plan{testPlan},\n+\t\t\t},\n+\t\t}, {\n+\t\t\tname:      \"badLookup\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8078d63b7ad8fc0922bc0ca94b190f14c62ef382"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "845c3747512b056b3dcc0731349e9a9eba3b40c8", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/845c3747512b056b3dcc0731349e9a9eba3b40c8", "committedDate": "2020-04-21T18:51:26Z", "message": "Remove redundant case."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4332, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}