{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODU4MzEz", "number": 13077, "title": "[BEAM-9561] Dataframe test infrastructure improvements.", "bodyText": "Unset variables from failed assignments.\nBetter parsing of multi-line examples.\nStrip ipython prompts.\nTrack line numbers in test parsing.\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-10-12T22:40:23Z", "url": "https://github.com/apache/beam/pull/13077", "merged": true, "mergeCommit": {"oid": "46c226ec434afd38834f1cc5a7ff9e6e705f3d1c"}, "closed": true, "closedAt": "2020-10-28T17:23:29Z", "author": {"login": "robertwb"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR73FlgH2gAyNTAxODU4MzEzOjVlNzZlNjY2MjFlNzI4NzhkYTQzODQwYWY3OWY0YmNjYmEyMGI5NWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWtTJwgFqTUxODAxOTkyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e76e66621e72878da43840af79f4bccba20b95a", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/5e76e66621e72878da43840af79f4bccba20b95a", "committedDate": "2020-10-12T22:38:31Z", "message": "Unset variables from failed assignments.\n\nThis avoids surprising failures when previous values are used due\nto earlier (and sometimes expected) failures."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b003d424b2c395ea7a7d2383e2fa40aaadff74", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/30b003d424b2c395ea7a7d2383e2fa40aaadff74", "committedDate": "2020-10-12T22:47:45Z", "message": "Track line numbers in test parsing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392213ada8ee455d8523bc5de64cd6c164fc7e23", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/392213ada8ee455d8523bc5de64cd6c164fc7e23", "committedDate": "2020-10-12T22:47:45Z", "message": "Better parsing of multi-line examples.\n\nConsider a closing bracket with the same indentation to be\na continuation of the previous example, not a new example.\n\nWe could do full bracket-matching, but that might be overkill."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/bd1a2a949d1e38a2d32de7216e8a45e2376c5252", "committedDate": "2020-10-12T22:47:45Z", "message": "Strip ipython prompts."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f09b42fc12d66cf5a046decb03c929edd073fdd8", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/f09b42fc12d66cf5a046decb03c929edd073fdd8", "committedDate": "2020-10-12T22:38:31Z", "message": "Better parsing of multi-line examples.\n\nConsider a closing bracket with the same indentation to be\na continuation of the previous example, not a new example.\n\nWe could do full bracket-matching, but that might be overkill."}, "afterCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/bd1a2a949d1e38a2d32de7216e8a45e2376c5252", "committedDate": "2020-10-12T22:47:45Z", "message": "Strip ipython prompts."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDc3ODgx", "url": "https://github.com/apache/beam/pull/13077#pullrequestreview-517077881", "createdAt": "2020-10-26T18:46:57Z", "commit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo0Njo1N1rOHodqog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNzozM1rOHofEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTEzOA==", "bodyText": "This regex lacks a whitespace after the colon. Not sure if it matters.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512191138", "createdAt": "2020-10-26T18:46:57Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -502,31 +512,33 @@ def is_example_line(line):\n   IMPORT_PANDAS = 'import pandas as pd'\n \n   example_srcs = []\n-  lines = iter(\n-      [line.rstrip()\n-       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+  lines = iter([(lineno, line.rstrip()) for lineno,\n+                line in enumerate(rst.split('\\n')) if is_example_line(line)] +\n+               [(None, 'END')])\n \n   # https://ipython.readthedocs.io/en/stable/sphinxext.html\n-  line = next(lines)\n+  lineno, line = next(lines)\n   while True:\n     if line == 'END':\n       break\n     if line.startswith('.. ipython::'):\n-      line = next(lines)\n+      lineno, line = next(lines)\n       indent = get_indent(line)\n       example = []\n-      example_srcs.append(example)\n+      example_srcs.append((lineno, example))\n       while get_indent(line) >= indent:\n         if '@verbatim' in line or ':verbatim:' in line or '@savefig' in line:\n           example_srcs.pop()\n           break\n+        line = re.sub(r'In \\[\\d+\\]: ', '', line)\n+        line = re.sub(r'\\.\\.\\.+:', '', line)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDEyNA==", "bodyText": "Why did this change? There still seem to be only 5 ipython statements in the RST_IPYTHON rst.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512214124", "createdAt": "2020-10-26T19:27:33Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "diffHunk": "@@ -212,13 +228,21 @@ def test_not_implemented_followed_by_name_error(self):\n     self.assertEqual(result.attempted, 6)\n     self.assertEqual(result.failed, 1)  # Only the very last one.\n \n+  def test_failed_assignment(self):\n+    result = doctests.teststring(\n+        FAILED_ASSIGNMENT,\n+        optionflags=doctest.ELLIPSIS,\n+        not_implemented_ok=True)\n+    self.assertNotEqual(result.attempted, 0)\n+    self.assertEqual(result.failed, 0)\n+\n   def test_rst_ipython(self):\n     try:\n       import IPython\n     except ImportError:\n       raise unittest.SkipTest('IPython not available')\n     result = doctests.test_rst_ipython(RST_IPYTHON, 'test_rst_ipython')\n-    self.assertEqual(result.attempted, 5)\n+    self.assertEqual(result.attempted, 8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDEzMDUw", "url": "https://github.com/apache/beam/pull/13077#pullrequestreview-518013050", "createdAt": "2020-10-27T18:20:57Z", "commit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoyMDo1N1rOHpKoxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoyMjo1N1rOHpKt2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyNzk0Mg==", "bodyText": "This is correct, there may not be whitespace following this colon in all cases (but if there is, it's fine to include it as part of the indentation). This is different than the initial prompt.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512927942", "createdAt": "2020-10-27T18:20:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -502,31 +512,33 @@ def is_example_line(line):\n   IMPORT_PANDAS = 'import pandas as pd'\n \n   example_srcs = []\n-  lines = iter(\n-      [line.rstrip()\n-       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+  lines = iter([(lineno, line.rstrip()) for lineno,\n+                line in enumerate(rst.split('\\n')) if is_example_line(line)] +\n+               [(None, 'END')])\n \n   # https://ipython.readthedocs.io/en/stable/sphinxext.html\n-  line = next(lines)\n+  lineno, line = next(lines)\n   while True:\n     if line == 'END':\n       break\n     if line.startswith('.. ipython::'):\n-      line = next(lines)\n+      lineno, line = next(lines)\n       indent = get_indent(line)\n       example = []\n-      example_srcs.append(example)\n+      example_srcs.append((lineno, example))\n       while get_indent(line) >= indent:\n         if '@verbatim' in line or ':verbatim:' in line or '@savefig' in line:\n           example_srcs.pop()\n           break\n+        line = re.sub(r'In \\[\\d+\\]: ', '', line)\n+        line = re.sub(r'\\.\\.\\.+:', '', line)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTEzOA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyOTI0Mw==", "bodyText": "I added\nfoo(\n    4\n)\n\nplus the re-definition of foo and another invocation foo(5).", "url": "https://github.com/apache/beam/pull/13077#discussion_r512929243", "createdAt": "2020-10-27T18:22:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "diffHunk": "@@ -212,13 +228,21 @@ def test_not_implemented_followed_by_name_error(self):\n     self.assertEqual(result.attempted, 6)\n     self.assertEqual(result.failed, 1)  # Only the very last one.\n \n+  def test_failed_assignment(self):\n+    result = doctests.teststring(\n+        FAILED_ASSIGNMENT,\n+        optionflags=doctest.ELLIPSIS,\n+        not_implemented_ok=True)\n+    self.assertNotEqual(result.attempted, 0)\n+    self.assertEqual(result.failed, 0)\n+\n   def test_rst_ipython(self):\n     try:\n       import IPython\n     except ImportError:\n       raise unittest.SkipTest('IPython not available')\n     result = doctests.test_rst_ipython(RST_IPYTHON, 'test_rst_ipython')\n-    self.assertEqual(result.attempted, 5)\n+    self.assertEqual(result.attempted, 8)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDEyNA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDE5OTI3", "url": "https://github.com/apache/beam/pull/13077#pullrequestreview-518019927", "createdAt": "2020-10-27T18:29:31Z", "commit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoyOTozMVrOHpK-EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozMDowMVrOHpK_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMzM5Mg==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512933392", "createdAt": "2020-10-27T18:29:31Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -502,31 +512,33 @@ def is_example_line(line):\n   IMPORT_PANDAS = 'import pandas as pd'\n \n   example_srcs = []\n-  lines = iter(\n-      [line.rstrip()\n-       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+  lines = iter([(lineno, line.rstrip()) for lineno,\n+                line in enumerate(rst.split('\\n')) if is_example_line(line)] +\n+               [(None, 'END')])\n \n   # https://ipython.readthedocs.io/en/stable/sphinxext.html\n-  line = next(lines)\n+  lineno, line = next(lines)\n   while True:\n     if line == 'END':\n       break\n     if line.startswith('.. ipython::'):\n-      line = next(lines)\n+      lineno, line = next(lines)\n       indent = get_indent(line)\n       example = []\n-      example_srcs.append(example)\n+      example_srcs.append((lineno, example))\n       while get_indent(line) >= indent:\n         if '@verbatim' in line or ':verbatim:' in line or '@savefig' in line:\n           example_srcs.pop()\n           break\n+        line = re.sub(r'In \\[\\d+\\]: ', '', line)\n+        line = re.sub(r'\\.\\.\\.+:', '', line)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTEzOA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMzc1MQ==", "bodyText": "OK, thanks. I misunderstood how counting worked here.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512933751", "createdAt": "2020-10-27T18:30:01Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "diffHunk": "@@ -212,13 +228,21 @@ def test_not_implemented_followed_by_name_error(self):\n     self.assertEqual(result.attempted, 6)\n     self.assertEqual(result.failed, 1)  # Only the very last one.\n \n+  def test_failed_assignment(self):\n+    result = doctests.teststring(\n+        FAILED_ASSIGNMENT,\n+        optionflags=doctest.ELLIPSIS,\n+        not_implemented_ok=True)\n+    self.assertNotEqual(result.attempted, 0)\n+    self.assertEqual(result.failed, 0)\n+\n   def test_rst_ipython(self):\n     try:\n       import IPython\n     except ImportError:\n       raise unittest.SkipTest('IPython not available')\n     result = doctests.test_rst_ipython(RST_IPYTHON, 'test_rst_ipython')\n-    self.assertEqual(result.attempted, 5)\n+    self.assertEqual(result.attempted, 8)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDEyNA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1954, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}