{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMjMyNDY1", "number": 11331, "title": "[BEAM-9646] Add Google Cloud vision integration transform", "bodyText": "This PR adds a set of PTransforms integrating Beam with Google Cloud AI Vision API.\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-07T12:20:08Z", "url": "https://github.com/apache/beam/pull/11331", "merged": true, "mergeCommit": {"oid": "7e575a72aab640976329d7d05bfaa3f17238239d"}, "closed": true, "closedAt": "2020-06-03T16:32:49Z", "author": {"login": "mwalenia"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccWGX1ABqjMyODQwMDczMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnsDghgFqTQyMzczMDA2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6beafe08aa81938aa2ae47ca976d96d3672bd6eb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6beafe08aa81938aa2ae47ca976d96d3672bd6eb", "committedDate": "2020-04-10T09:15:27Z", "message": "Added change to CHANGES.md"}, "afterCommit": {"oid": "86175c8c2da9350ce683101264da58a18fc2d4b9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/86175c8c2da9350ce683101264da58a18fc2d4b9", "committedDate": "2020-04-29T10:40:40Z", "message": "Add @Experimental annotation, make parent class package-private"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzA1MTg3", "url": "https://github.com/apache/beam/pull/11331#pullrequestreview-407705187", "createdAt": "2020-05-07T17:55:12Z", "commit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo1NToxMlrOGSJzDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoyMjoxN1rOGSrUew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4ODA3OQ==", "bodyText": "Why was 5 chosen?", "url": "https://github.com/apache/beam/pull/11331#discussion_r421688079", "createdAt": "2020-05-07T17:55:12Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTk5Mw==", "bodyText": "Would you please add comments to this as well? It would be useful for those implementing subclasses.", "url": "https://github.com/apache/beam/pull/11331#discussion_r421689993", "createdAt": "2020-05-07T17:58:29Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MzQ1OA==", "bodyText": "'larger or equal to %d'", "url": "https://github.com/apache/beam/pull/11331#discussion_r421693458", "createdAt": "2020-05-07T18:04:01Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzU5Mw==", "bodyText": "What do you think about adding a CheckForNull annotation for ctx? Mentioning that the parameter may be null in the comments, and the significance of it, would be helpful.", "url": "https://github.com/apache/beam/pull/11331#discussion_r421697593", "createdAt": "2020-05-07T18:11:01Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyOTI5NA==", "bodyText": "Should this be in finishBundle()?\nI would expect either a new ImageAnnotatorClient is created with each bundle and closed after processing a bundle, or that a single instance is used for the life of the DoFn using setup/teardown.", "url": "https://github.com/apache/beam/pull/11331#discussion_r421829294", "createdAt": "2020-05-07T22:24:12Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);\n+\n+  /**\n+   * The {@link DoFn} performing the calls to Cloud Vision API. Input PCollection contains lists of\n+   * {@link AnnotateImageRequest}s ready for batching.\n+   */\n+  public static class PerformImageAnnotation\n+      extends DoFn<List<AnnotateImageRequest>, List<AnnotateImageResponse>> {\n+\n+    private ImageAnnotatorClient imageAnnotatorClient;\n+\n+    public PerformImageAnnotation() {}\n+\n+    /**\n+     * Parametrized constructor to make mock injection easier in testing.\n+     *\n+     * @param imageAnnotatorClient\n+     */\n+    public PerformImageAnnotation(ImageAnnotatorClient imageAnnotatorClient) {\n+      this.imageAnnotatorClient = imageAnnotatorClient;\n+    }\n+\n+    @StartBundle\n+    public void startBundle() throws IOException {\n+      imageAnnotatorClient = ImageAnnotatorClient.create();\n+    }\n+\n+    @Teardown\n+    public void teardown() {\n+      imageAnnotatorClient.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDA2Nw==", "bodyText": "Nit: 'the call itself' doesn't describe what this method does. Consider rephrasing.", "url": "https://github.com/apache/beam/pull/11331#discussion_r421830067", "createdAt": "2020-05-07T22:26:11Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);\n+\n+  /**\n+   * The {@link DoFn} performing the calls to Cloud Vision API. Input PCollection contains lists of\n+   * {@link AnnotateImageRequest}s ready for batching.\n+   */\n+  public static class PerformImageAnnotation\n+      extends DoFn<List<AnnotateImageRequest>, List<AnnotateImageResponse>> {\n+\n+    private ImageAnnotatorClient imageAnnotatorClient;\n+\n+    public PerformImageAnnotation() {}\n+\n+    /**\n+     * Parametrized constructor to make mock injection easier in testing.\n+     *\n+     * @param imageAnnotatorClient\n+     */\n+    public PerformImageAnnotation(ImageAnnotatorClient imageAnnotatorClient) {\n+      this.imageAnnotatorClient = imageAnnotatorClient;\n+    }\n+\n+    @StartBundle\n+    public void startBundle() throws IOException {\n+      imageAnnotatorClient = ImageAnnotatorClient.create();\n+    }\n+\n+    @Teardown\n+    public void teardown() {\n+      imageAnnotatorClient.close();\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext context) {\n+      context.output(getResponse(context.element()));\n+    }\n+\n+    /**\n+     * Performs the call itself. Default access for testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA==", "bodyText": "From what I read, GroupIntoBatches only batches elements within a key. If keys are random, won't this result in very little batching?", "url": "https://github.com/apache/beam/pull/11331#discussion_r421831948", "createdAt": "2020-05-07T22:31:27Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);\n+\n+  /**\n+   * The {@link DoFn} performing the calls to Cloud Vision API. Input PCollection contains lists of\n+   * {@link AnnotateImageRequest}s ready for batching.\n+   */\n+  public static class PerformImageAnnotation\n+      extends DoFn<List<AnnotateImageRequest>, List<AnnotateImageResponse>> {\n+\n+    private ImageAnnotatorClient imageAnnotatorClient;\n+\n+    public PerformImageAnnotation() {}\n+\n+    /**\n+     * Parametrized constructor to make mock injection easier in testing.\n+     *\n+     * @param imageAnnotatorClient\n+     */\n+    public PerformImageAnnotation(ImageAnnotatorClient imageAnnotatorClient) {\n+      this.imageAnnotatorClient = imageAnnotatorClient;\n+    }\n+\n+    @StartBundle\n+    public void startBundle() throws IOException {\n+      imageAnnotatorClient = ImageAnnotatorClient.create();\n+    }\n+\n+    @Teardown\n+    public void teardown() {\n+      imageAnnotatorClient.close();\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext context) {\n+      context.output(getResponse(context.element()));\n+    }\n+\n+    /**\n+     * Performs the call itself. Default access for testing.\n+     *\n+     * @param requests request list.\n+     * @return response list.\n+     */\n+    List<AnnotateImageResponse> getResponse(List<AnnotateImageRequest> requests) {\n+      BatchAnnotateImagesResponse batchAnnotateImagesResponse =\n+          imageAnnotatorClient.batchAnnotateImages(requests);\n+      return batchAnnotateImagesResponse.getResponsesList();\n+    }\n+  }\n+\n+  /** A transform that converts input elements to {@link KV}s for grouping. */\n+  private static class AssignRandomKeys\n+      extends DoFn<AnnotateImageRequest, KV<Long, AnnotateImageRequest>> {\n+    private Random random;\n+\n+    @Setup\n+    public void setup() {\n+      random = new Random();\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext context) {\n+      context.output(KV.of(random.nextLong(), context.element()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MDA5MQ==", "bodyText": "Since there is a max and min for this parameter it would be good to mention both requirements. There are a couple places in this file where this applies.", "url": "https://github.com/apache/beam/pull/11331#discussion_r421840091", "createdAt": "2020-05-07T22:55:14Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageContext;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.protobuf.ByteString;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Factory class for implementations of {@link AnnotateImages}.\n+ *\n+ * <p>Example usage:\n+ *\n+ * <pre>\n+ * pipeline\n+ *  .apply(Create.of(IMAGE_URI))\n+ *  .apply(CloudVision.annotateImagesFromGcsUri(sideInputWithContext,\n+ *         features, 1));\n+ * </pre>\n+ */\n+public class CloudVision {\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images.\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDUzNQ==", "bodyText": "It would be helpful to describe the effects of including/excluding a contextSideInput, either here or in the method comments within this class.", "url": "https://github.com/apache/beam/pull/11331#discussion_r422224535", "createdAt": "2020-05-08T15:57:18Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageContext;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.protobuf.ByteString;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Factory class for implementations of {@link AnnotateImages}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyODYzMQ==", "bodyText": "I think you can drop 'Implementaiton of' since we get this information from the class signature. It would be helpful to know what this implementation does differently than other implementations. The name of the class is very descriptive which is great, you could even start the comment with it to the effect of 'Annotates images from a GCS URI. (then a bit more detail)'.", "url": "https://github.com/apache/beam/pull/11331#discussion_r422228631", "createdAt": "2020-05-08T16:05:15Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageContext;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.protobuf.ByteString;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Factory class for implementations of {@link AnnotateImages}.\n+ *\n+ * <p>Example usage:\n+ *\n+ * <pre>\n+ * pipeline\n+ *  .apply(Create.of(IMAGE_URI))\n+ *  .apply(CloudVision.annotateImagesFromGcsUri(sideInputWithContext,\n+ *         features, 1));\n+ * </pre>\n+ */\n+public class CloudVision {\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images.\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n+      PCollectionView<Map<String, ImageContext>> contextSideInput,\n+      List<Feature> features,\n+      long batchSize) {\n+    return new AnnotateImagesFromGcsUri(contextSideInput, features, batchSize);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * contents encoded in {@link ByteString}s.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images.\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromBytes annotateImagesFromBytes(\n+      PCollectionView<Map<ByteString, ImageContext>> contextSideInput,\n+      List<Feature> features,\n+      long batchSize) {\n+    return new AnnotateImagesFromBytes(contextSideInput, features, batchSize);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from KVs of\n+   * their GCS addresses in Strings and {@link ImageContext} for each image.\n+   *\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromBytesWithContext annotateImagesFromBytesWithContext(\n+      List<Feature> features, long batchSize) {\n+    return new AnnotateImagesFromBytesWithContext(features, batchSize);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from KVs of\n+   * their String-encoded contents and {@link ImageContext} for each image.\n+   *\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromGcsUriWithContext annotateImagesFromGcsUriWithContext(\n+      List<Feature> features, long batchSize) {\n+    return new AnnotateImagesFromGcsUriWithContext(features, batchSize);\n+  }\n+\n+  /**\n+   * Implementation of {@link AnnotateImages} that accepts {@link String} (image URI on GCS) with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNzMwNw==", "bodyText": "I don't see names being set elsewhere, why is this project different?", "url": "https://github.com/apache/beam/pull/11331#discussion_r422237307", "createdAt": "2020-05-08T16:22:17Z", "author": {"login": "tysonjh"}, "path": "settings.gradle", "diffHunk": "@@ -167,3 +167,6 @@ include \"beam-test-infra-metrics\"\n project(\":beam-test-infra-metrics\").dir = file(\".test-infra/metrics\")\n include \"beam-test-tools\"\n project(\":beam-test-tools\").dir = file(\".test-infra/tools\")\n+include 'sdks:java:extensions:ml'\n+findProject(':sdks:java:extensions:ml')?.name = 'ml'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7291cb501cad47bccf951432ad6ece922d9d4b3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a7291cb501cad47bccf951432ad6ece922d9d4b3", "committedDate": "2020-05-08T12:59:34Z", "message": "Add dependency to build.gradle"}, "afterCommit": {"oid": "53d9601284e2fd081d27ae3b4b265f66a6be40ef", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/53d9601284e2fd081d27ae3b4b265f66a6be40ef", "committedDate": "2020-05-11T13:31:00Z", "message": "Fixes after code review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b08355209d0b8973b29edf178614474aafaaf7d2", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b08355209d0b8973b29edf178614474aafaaf7d2", "committedDate": "2020-05-13T11:07:48Z", "message": "Set the same key for each element so that grouping is done correctly by existing transforms"}, "afterCommit": {"oid": "6089b1fda1f1831568ae139af146c052c4e45cec", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6089b1fda1f1831568ae139af146c052c4e45cec", "committedDate": "2020-05-18T11:57:21Z", "message": "Add customizable number of keys to the transform"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzY3NTQz", "url": "https://github.com/apache/beam/pull/11331#pullrequestreview-415767543", "createdAt": "2020-05-20T22:50:05Z", "commit": {"oid": "6089b1fda1f1831568ae139af146c052c4e45cec"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1MDowNVrOGYgfqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjo1MDowNVrOGYgfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1MTQwMw==", "bodyText": "A summary fragment would be nice here, even something simple like 'Constructs an AnnotateImages transform.'", "url": "https://github.com/apache/beam/pull/11331#discussion_r428351403", "createdAt": "2020-05-20T22:50:05Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTk5Mw=="}, "originalCommit": {"oid": "ae6ef78224af8d00f9dc51a027283d98f943d4f0"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c439ff6ee12f46afd6744f44690967ca8036c50", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0c439ff6ee12f46afd6744f44690967ca8036c50", "committedDate": "2020-05-22T14:04:46Z", "message": "Added changes to CHANGES.md"}, "afterCommit": {"oid": "aa91ce7bcc3825f4ab882562c51619c758d9493b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/aa91ce7bcc3825f4ab882562c51619c758d9493b", "committedDate": "2020-05-25T08:50:00Z", "message": "Added changes to CHANGES.md"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa91ce7bcc3825f4ab882562c51619c758d9493b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/aa91ce7bcc3825f4ab882562c51619c758d9493b", "committedDate": "2020-05-25T08:50:00Z", "message": "Added changes to CHANGES.md"}, "afterCommit": {"oid": "cd7d3deb4f7e84f96a16299e44b192d4642f94ac", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/cd7d3deb4f7e84f96a16299e44b192d4642f94ac", "committedDate": "2020-05-28T11:24:58Z", "message": "Update README.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzI4OTI4", "url": "https://github.com/apache/beam/pull/11331#pullrequestreview-421328928", "createdAt": "2020-05-29T22:22:50Z", "commit": {"oid": "cd7d3deb4f7e84f96a16299e44b192d4642f94ac"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjoyMjo1MVrOGct5-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjoyNDoxMVrOGct7UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTQzNQ==", "bodyText": "Instead of numKeys, which is an implementation detail, let's change it to desiredRequestParallelism to represent the maximum number of concurrent threads that will be issuing API calls. This will need to be documented clearly. Apply it elsewhere as well since I see it in a few constructors and classes.", "url": "https://github.com/apache/beam/pull/11331#discussion_r432765435", "createdAt": "2020-05-29T22:22:51Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Random;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.WithKeys;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API. https://cloud.google.com/vision/docs/batch\n+ * Max batch size limit is imposed by the API for synchronous requests.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+@Experimental\n+abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 16L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private final long batchSize;\n+  protected final int numKeys;\n+\n+  /**\n+   * @param contextSideInput Side input optionally containting a map of elements to {@link\n+   *     ImageContext} objects with metadata for the analysis.\n+   * @param featureList list of features to be extracted from the image.\n+   * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n+   *     16.\n+   * @param numKeys number of keys to map the requests into for batching.\n+   */\n+  public AnnotateImages(\n+      @Nullable PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize,\n+      int numKeys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7d3deb4f7e84f96a16299e44b192d4642f94ac"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTc3Ng==", "bodyText": "Can this be named batchSizeBytes instead? Or mention in the parameter documentation that the unit for this parameter is bytes. Apply this elsewhere as well since I see it in a few constructors and classes.", "url": "https://github.com/apache/beam/pull/11331#discussion_r432765776", "createdAt": "2020-05-29T22:24:11Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Random;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.WithKeys;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API. https://cloud.google.com/vision/docs/batch\n+ * Max batch size limit is imposed by the API for synchronous requests.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+@Experimental\n+abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 16L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private final long batchSize;\n+  protected final int numKeys;\n+\n+  /**\n+   * @param contextSideInput Side input optionally containting a map of elements to {@link\n+   *     ImageContext} objects with metadata for the analysis.\n+   * @param featureList list of features to be extracted from the image.\n+   * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n+   *     16.\n+   * @param numKeys number of keys to map the requests into for batching.\n+   */\n+  public AnnotateImages(\n+      @Nullable PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7d3deb4f7e84f96a16299e44b192d4642f94ac"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTYwMzM1", "url": "https://github.com/apache/beam/pull/11331#pullrequestreview-421960335", "createdAt": "2020-06-01T15:42:08Z", "commit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "state": "APPROVED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTo0MjowOFrOGdPj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTo1MDoyMVrOGdQBfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNjg0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433316842", "createdAt": "2020-06-01T15:42:08Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -58,24 +58,24 @@\n   protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n   protected final List<Feature> featureList;\n   private final long batchSize;\n-  protected final int numKeys;\n+  protected final int desiredRequestParallelism;\n \n   /**\n    * @param contextSideInput Side input optionally containting a map of elements to {@link\n    *     ImageContext} objects with metadata for the analysis.\n    * @param featureList list of features to be extracted from the image.\n    * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n    *     16.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNzQyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433317424", "createdAt": "2020-06-01T15:42:45Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -86,10 +86,10 @@ public AnnotateImages(\n    * @param featureList list of features to be extracted from the image.\n    * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n    *     16.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNzg1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433317858", "createdAt": "2020-06-01T15:43:10Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -54,15 +55,34 @@\n    *     can\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxOTA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * GCS addresses. Uses default parallelism of 5.\n          \n          \n            \n               * GCS addresses. Uses a default value 5 for desiredRequestParallelism.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433319062", "createdAt": "2020-06-01T15:44:30Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -54,15 +55,34 @@\n    *     can\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n    * @return the PTransform.\n    */\n   public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n       PCollectionView<Map<String, ImageContext>> contextSideInput,\n       List<Feature> features,\n       long batchSize,\n-      int numKeys) {\n-    return new AnnotateImagesFromGcsUri(contextSideInput, features, batchSize, numKeys);\n+      int desiredRequestParallelism) {\n+    return new AnnotateImagesFromGcsUri(\n+        contextSideInput, features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses. Uses default parallelism of 5.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMDE1OA==", "bodyText": "This comment is incomplete... 'This way users can' ....", "url": "https://github.com/apache/beam/pull/11331#discussion_r433320158", "createdAt": "2020-06-01T15:45:38Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -54,15 +55,34 @@\n    *     can\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n    * @return the PTransform.\n    */\n   public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n       PCollectionView<Map<String, ImageContext>> contextSideInput,\n       List<Feature> features,\n       long batchSize,\n-      int numKeys) {\n-    return new AnnotateImagesFromGcsUri(contextSideInput, features, batchSize, numKeys);\n+      int desiredRequestParallelism) {\n+    return new AnnotateImagesFromGcsUri(\n+        contextSideInput, features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses. Uses default parallelism of 5.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images. The {@link\n+   *     ImageContext} objects provide additional metadata for the annotation API. This way users\n+   *     can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMDczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433320735", "createdAt": "2020-06-01T15:46:15Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -72,15 +92,32 @@ public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n    * @param contextSideInput optional side input with contexts for select images.\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMTE4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * contents encoded in {@link ByteString}s. Uses default parallelism of 5.\n          \n          \n            \n               * contents encoded in {@link ByteString}s. Uses a default value 5 for desiredRequestParallelism.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433321185", "createdAt": "2020-06-01T15:46:46Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -72,15 +92,32 @@ public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n    * @param contextSideInput optional side input with contexts for select images.\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n    * @return the PTransform.\n    */\n   public static AnnotateImagesFromBytes annotateImagesFromBytes(\n       PCollectionView<Map<ByteString, ImageContext>> contextSideInput,\n       List<Feature> features,\n       long batchSize,\n-      int numKeys) {\n-    return new AnnotateImagesFromBytes(contextSideInput, features, batchSize, numKeys);\n+      int desiredRequestParallelism) {\n+    return new AnnotateImagesFromBytes(\n+        contextSideInput, features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * contents encoded in {@link ByteString}s. Uses default parallelism of 5.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMTY0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433321645", "createdAt": "2020-06-01T15:47:19Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -89,12 +126,26 @@ public static AnnotateImagesFromBytes annotateImagesFromBytes(\n    *\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMjIwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * their GCS addresses in Strings and {@link ImageContext} for each image. Uses default\n          \n          \n            \n               * parallelism of 5.\n          \n          \n            \n               * their GCS addresses in Strings and {@link ImageContext} for each image. Uses a default \n          \n          \n            \n               * value of 5 for desiredRequestParallelism.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433322209", "createdAt": "2020-06-01T15:47:54Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -89,12 +126,26 @@ public static AnnotateImagesFromBytes annotateImagesFromBytes(\n    *\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromBytesWithContext annotateImagesFromBytesWithContext(\n+      List<Feature> features, long batchSize, int desiredRequestParallelism) {\n+    return new AnnotateImagesFromBytesWithContext(features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from KVs of\n+   * their GCS addresses in Strings and {@link ImageContext} for each image. Uses default\n+   * parallelism of 5.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyNDQxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "url": "https://github.com/apache/beam/pull/11331#discussion_r433324414", "createdAt": "2020-06-01T15:50:21Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -103,12 +154,26 @@ public static AnnotateImagesFromBytesWithContext annotateImagesFromBytesWithCont\n    *\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67"}, "originalPosition": 117}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be5d91a8a4bb5816a72a52c5075a537c888a7dff", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/be5d91a8a4bb5816a72a52c5075a537c888a7dff", "committedDate": "2020-06-02T10:42:38Z", "message": "[BEAM-9646] Add Google Cloud vision integration transform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0100fdcfe6ae94edddd4323ea06607322ce43775", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0100fdcfe6ae94edddd4323ea06607322ce43775", "committedDate": "2020-06-02T10:42:39Z", "message": "Fix spotbugs errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ed48deed395eefaff5751863d691a5b4ce986d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/e0ed48deed395eefaff5751863d691a5b4ce986d", "committedDate": "2020-06-02T10:42:39Z", "message": "Add @Experimental annotation, make parent class package-private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8f048e79504ddaa5dee077eecec105e309bef4a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b8f048e79504ddaa5dee077eecec105e309bef4a", "committedDate": "2020-06-02T10:45:36Z", "message": "Add dependency to build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aa6815d4b8d05853f3bb918d3ce4622aec2030a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6aa6815d4b8d05853f3bb918d3ce4622aec2030a", "committedDate": "2020-06-02T10:45:37Z", "message": "Fixes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b108cb3efa7b8fc9ef8369f6ecaa4c9e7a9a25db", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b108cb3efa7b8fc9ef8369f6ecaa4c9e7a9a25db", "committedDate": "2020-06-02T10:45:37Z", "message": "Set the same key for each element so that grouping is done correctly by existing transforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962aefacc4f63a402c08c103cd7cf1709e2fb16b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/962aefacc4f63a402c08c103cd7cf1709e2fb16b", "committedDate": "2020-06-02T10:45:37Z", "message": "Add customizable number of keys to the transform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60ee68edd7d448940ddf7ea1b5522aaf19b2eac9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/60ee68edd7d448940ddf7ea1b5522aaf19b2eac9", "committedDate": "2020-06-02T10:45:37Z", "message": "Added changes to CHANGES.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5860c851902e3df41193c1368299b269ee398ba3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5860c851902e3df41193c1368299b269ee398ba3", "committedDate": "2020-06-02T10:45:37Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7145d47383674cb86e562df00cd431625b5108d7", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/7145d47383674cb86e562df00cd431625b5108d7", "committedDate": "2020-06-02T10:45:37Z", "message": "Change param name from numKeys to desiredRequestParallelism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6038bfc5be9a65c4aad5016d81b81c2b1a25d274", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6038bfc5be9a65c4aad5016d81b81c2b1a25d274", "committedDate": "2020-06-02T10:45:37Z", "message": "Add default parallelism value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40306adba420dd872bc7e1a61c20326836a2e7b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c40306adba420dd872bc7e1a61c20326836a2e7b", "committedDate": "2020-06-02T10:45:38Z", "message": "Fix code comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/16e087a3eb98a09b1be93b7570adbe31ce7beb67", "committedDate": "2020-06-01T09:23:47Z", "message": "Add default parallelism value"}, "afterCommit": {"oid": "c40306adba420dd872bc7e1a61c20326836a2e7b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c40306adba420dd872bc7e1a61c20326836a2e7b", "committedDate": "2020-06-02T10:45:38Z", "message": "Fix code comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzMwMDY5", "url": "https://github.com/apache/beam/pull/11331#pullrequestreview-423730069", "createdAt": "2020-06-03T16:28:47Z", "commit": {"oid": "c40306adba420dd872bc7e1a61c20326836a2e7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4466, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}