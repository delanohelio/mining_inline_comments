{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTkzNzU4", "number": 10566, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyNToyN1rODXmMKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyNToyN1rODXmMKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDY5NTQ2OnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobInvocation.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyNToyN1rOFc-hJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwODo1OTowNFrOFdQErQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODc0MA==", "bodyText": "I've added this to make it consistent with the state updates, which we also save. However, this may be too memory intense, I'm seeing that the test time increased here: https://builds.apache.org/job/beam_PreCommit_Python2_PVR_Flink_Commit/2320/\nNeed to check if this is due to this change. If so, we could subscribe to the messages before running the pipeline which would remove the need to save the messages.", "url": "https://github.com/apache/beam/pull/10566#discussion_r365928740", "createdAt": "2020-01-13T17:25:27Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobInvocation.java", "diffHunk": "@@ -243,6 +249,7 @@ private synchronized void setState(JobState.Enum state) {\n   }\n \n   private synchronized void sendMessage(JobMessage message) {\n+    messageHistory.add(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db2e3976fb2a5c15c77e55928e19c003db3b387"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyNDkzMg==", "bodyText": "yeah, I'd be wary of storing all of that.  There should be a way to cap the number of historical messages a user cares about.   We could choose a sensible default for now and come back and expose it as an option later if anyone cares to do so.", "url": "https://github.com/apache/beam/pull/10566#discussion_r366024932", "createdAt": "2020-01-13T20:59:31Z", "author": {"login": "chadrik"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobInvocation.java", "diffHunk": "@@ -243,6 +249,7 @@ private synchronized void setState(JobState.Enum state) {\n   }\n \n   private synchronized void sendMessage(JobMessage message) {\n+    messageHistory.add(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODc0MA=="}, "originalCommit": {"oid": "1db2e3976fb2a5c15c77e55928e19c003db3b387"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzNzMyMg==", "bodyText": "Right now, it looks like sendMessage is only being called by onFailure:\n\n  \n    \n      beam/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobInvocation.java\n    \n    \n        Lines 141 to 150\n      in\n      1db2e39\n    \n    \n    \n    \n\n        \n          \n           sendMessage( \n        \n\n        \n          \n               JobMessage.newBuilder() \n        \n\n        \n          \n                   .setMessageText(getStackTraceAsString(throwable)) \n        \n\n        \n          \n                   .setImportance(JobMessage.MessageImportance.JOB_MESSAGE_DEBUG) \n        \n\n        \n          \n                   .build()); \n        \n\n        \n          \n           sendMessage( \n        \n\n        \n          \n               JobMessage.newBuilder() \n        \n\n        \n          \n                   .setMessageText(getRootCause(throwable).toString()) \n        \n\n        \n          \n                   .setImportance(JobMessage.MessageImportance.JOB_MESSAGE_ERROR) \n        \n\n        \n          \n                   .build()); \n        \n    \n  \n\n\nMeaning there should be only 2 messages per pipeline failure. Unless there's something I'm missing?", "url": "https://github.com/apache/beam/pull/10566#discussion_r366037322", "createdAt": "2020-01-13T21:27:38Z", "author": {"login": "ibzib"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobInvocation.java", "diffHunk": "@@ -243,6 +249,7 @@ private synchronized void setState(JobState.Enum state) {\n   }\n \n   private synchronized void sendMessage(JobMessage message) {\n+    messageHistory.add(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODc0MA=="}, "originalCommit": {"oid": "1db2e3976fb2a5c15c77e55928e19c003db3b387"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEyMDU1Mw==", "bodyText": "Good point.  I can confirm that is the behavior that I have seen.", "url": "https://github.com/apache/beam/pull/10566#discussion_r366120553", "createdAt": "2020-01-14T01:59:19Z", "author": {"login": "chadrik"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobInvocation.java", "diffHunk": "@@ -243,6 +249,7 @@ private synchronized void setState(JobState.Enum state) {\n   }\n \n   private synchronized void sendMessage(JobMessage message) {\n+    messageHistory.add(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODc0MA=="}, "originalCommit": {"oid": "1db2e3976fb2a5c15c77e55928e19c003db3b387"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxNjM2NQ==", "bodyText": "yeah, I'd be wary of storing all of that.\n\nWe have the same problem for the state updates which are smaller but also can arrive at a higher frequency. How about (1) limiting the number of past invocations? We would keep all the state updates / messages per invocation. (2) An alternative could be to just store the error-related messages. (3) A third option would be to subscribe to the message stream early before pipeline execution starts.\nI'm leaning towards (1) because that would still allow the retrieval of past state updates that I think was a requirement for you @chadrik.\n\nMeaning there should be only 2 messages per pipeline failure. Unless there's something I'm missing?\n\nThat's right. However, the messages also contain the state updates which we already save. So there is some room for optimization the storage.\nWill follow-up regarding the build time but it looks like it almost doubled which we should definitely take serious.", "url": "https://github.com/apache/beam/pull/10566#discussion_r366216365", "createdAt": "2020-01-14T08:59:04Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/jobsubmission/JobInvocation.java", "diffHunk": "@@ -243,6 +249,7 @@ private synchronized void setState(JobState.Enum state) {\n   }\n \n   private synchronized void sendMessage(JobMessage message) {\n+    messageHistory.add(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODc0MA=="}, "originalCommit": {"oid": "1db2e3976fb2a5c15c77e55928e19c003db3b387"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2340, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}