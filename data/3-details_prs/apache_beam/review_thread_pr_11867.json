{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MzUyOTAy", "number": 11867, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzowNzoyMlrOEBcXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMzoxOFrOEBc4zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTQ4ODY4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/thread_pool_executor.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzowNzoyMlrOGdSuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTowNzoxN1rOGdWkGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2ODYzMg==", "bodyText": "Do we expect UnboundedThreadPoolExecutor to be used directly after this? Should it be renamed to _UnboundedThreadPoolExecutor ?", "url": "https://github.com/apache/beam/pull/11867#discussion_r433368632", "createdAt": "2020-06-01T17:07:22Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/utils/thread_pool_executor.py", "diffHunk": "@@ -134,3 +134,12 @@ def shutdown(self, wait=True):\n       if wait:\n         for worker in self._workers:\n           worker.join()\n+\n+\n+class _SharedUnboundedThreadPoolExecutor(UnboundedThreadPoolExecutor):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c613afbeea1d321e6c475b2924da37ee3fcb4f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTU3Ng==", "bodyText": "People can still use UnboundedThreadPoolExecutor and there could be a usecase around having threads from the pool having meaningful names to simplify debugging so I'm going to leave it as is.", "url": "https://github.com/apache/beam/pull/11867#discussion_r433431576", "createdAt": "2020-06-01T19:07:17Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/utils/thread_pool_executor.py", "diffHunk": "@@ -134,3 +134,12 @@ def shutdown(self, wait=True):\n       if wait:\n         for worker in self._workers:\n           worker.join()\n+\n+\n+class _SharedUnboundedThreadPoolExecutor(UnboundedThreadPoolExecutor):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2ODYzMg=="}, "originalCommit": {"oid": "31c613afbeea1d321e6c475b2924da37ee3fcb4f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU3MzI2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/thread_pool_executor.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMzoxOFrOGdTkLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozOTowMlrOGdXiAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjQ0Ng==", "bodyText": "Maybe give it a constant name? SHARED_THREAD_POOL_EXECUTOR or something like that? To clarify it's an instance, and not a class.\nI know we did not do this for MetricsEnvironment, but I think it may be better.", "url": "https://github.com/apache/beam/pull/11867#discussion_r433382446", "createdAt": "2020-06-01T17:33:18Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/utils/thread_pool_executor.py", "diffHunk": "@@ -134,3 +134,12 @@ def shutdown(self, wait=True):\n       if wait:\n         for worker in self._workers:\n           worker.join()\n+\n+\n+class _SharedUnboundedThreadPoolExecutor(UnboundedThreadPoolExecutor):\n+  def shutdown(self, wait=True):\n+    # Prevent shutting down the shared thread pool\n+    pass\n+\n+\n+SharedUnboundedThreadPoolExecutor = _SharedUnboundedThreadPoolExecutor()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c613afbeea1d321e6c475b2924da37ee3fcb4f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNTUwNA==", "bodyText": "+1, this is confusing.\nI would declare the global instance private to thread_pool_executor module (_shared_thread_pool_executor), and add a public getter function: thread_pool_executor.get_shared_executor().\nThis is also recommended by http://google.github.io/styleguide/pyguide.html#254-decision.", "url": "https://github.com/apache/beam/pull/11867#discussion_r433415504", "createdAt": "2020-06-01T18:35:53Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/utils/thread_pool_executor.py", "diffHunk": "@@ -134,3 +134,12 @@ def shutdown(self, wait=True):\n       if wait:\n         for worker in self._workers:\n           worker.join()\n+\n+\n+class _SharedUnboundedThreadPoolExecutor(UnboundedThreadPoolExecutor):\n+  def shutdown(self, wait=True):\n+    # Prevent shutting down the shared thread pool\n+    pass\n+\n+\n+SharedUnboundedThreadPoolExecutor = _SharedUnboundedThreadPoolExecutor()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjQ0Ng=="}, "originalCommit": {"oid": "31c613afbeea1d321e6c475b2924da37ee3fcb4f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NzQyNg==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/11867#discussion_r433447426", "createdAt": "2020-06-01T19:39:02Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/utils/thread_pool_executor.py", "diffHunk": "@@ -134,3 +134,12 @@ def shutdown(self, wait=True):\n       if wait:\n         for worker in self._workers:\n           worker.join()\n+\n+\n+class _SharedUnboundedThreadPoolExecutor(UnboundedThreadPoolExecutor):\n+  def shutdown(self, wait=True):\n+    # Prevent shutting down the shared thread pool\n+    pass\n+\n+\n+SharedUnboundedThreadPoolExecutor = _SharedUnboundedThreadPoolExecutor()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjQ0Ng=="}, "originalCommit": {"oid": "31c613afbeea1d321e6c475b2924da37ee3fcb4f"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3738, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}