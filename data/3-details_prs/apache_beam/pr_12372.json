{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTM4NjU5", "number": 12372, "title": "[BEAM-10545] KernelModel and jest tests", "bodyText": "Added a KernelModel module that handles messaging between the\nfrontend and the connected kernel. The model silently executes code in the kernel and handles IOPub responses from the kernel for information of the current interactive environment. UI components and other data models can use this module as a data model to communicate with the kernel. When instantiated, this model does not have to be a singleton.\nIntegrated jest test framework with typescript.\nAdvanced prettier to 1.19 so that it can parse typescript optional\nchaining syntax.\nThe tests can be executed with jlpm jest. Test details see README.\nChanges made by jlpm are:\njlpm add --dev jest @types/jest ts-jest identity-obj-proxy\njlpm upgrade prettier@^1.19.0\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-25T00:23:28Z", "url": "https://github.com/apache/beam/pull/12372", "merged": true, "mergeCommit": {"oid": "c64cf34607dadfce6f0bd7372b160ebf581b9408"}, "closed": true, "closedAt": "2020-07-30T23:09:57Z", "author": {"login": "KevinGG"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5IJLjAH2gAyNDU2NTM4NjU5OmIwNTIwNGU4YWQyNGVmMGI1YjRhYTdhZGFjNWU5YjQwNWNlODcxZGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6H9FqgFqTQ1ODgyMjYzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "committedDate": "2020-07-27T20:49:02Z", "message": "[BEAM-10545] KernelModel and jest tests\n\n1. Added a KernelModel module that handles messaging between the\n   frontend and the connected kernel.\n2. Integrated jest test framework with typescript.\n3. Advanced prettier to 1.19 so that it can parse typescript optional\n   chaining syntax.\n4. The tests can be executed with `jlpm jest`. Test details see README.\n5. Changes made by jlpm are:\n   jlpm add --dev jest @types/jest ts-jest identity-obj-proxy\n   jlpm upgrade prettier@^1.19.0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9f5dd0b05b4c0250ed44a42fe79de33ec3327e2", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f9f5dd0b05b4c0250ed44a42fe79de33ec3327e2", "committedDate": "2020-07-25T00:16:16Z", "message": "[BEAM-10545] KernelModel and jest tests\n\n1. Added a KernelModel module that handles messaging between the\n   frontend and the connected kernel.\n2. Integrated jest test framework with typescript.\n3. Advanced prettier to 1.19 so that it can parse typescript optional\n   chaining syntax.\n4. The tests can be executed with `jlpm jest`. Test details see README.\n5. Changes made by jlpm are:\n   jlpm add --dev jest @types/jest ts-jest identity-obj-proxy\n   jlpm upgrade prettier@^1.19.0"}, "afterCommit": {"oid": "b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "committedDate": "2020-07-27T20:49:02Z", "message": "[BEAM-10545] KernelModel and jest tests\n\n1. Added a KernelModel module that handles messaging between the\n   frontend and the connected kernel.\n2. Integrated jest test framework with typescript.\n3. Advanced prettier to 1.19 so that it can parse typescript optional\n   chaining syntax.\n4. The tests can be executed with `jlpm jest`. Test details see README.\n5. Changes made by jlpm are:\n   jlpm add --dev jest @types/jest ts-jest identity-obj-proxy\n   jlpm upgrade prettier@^1.19.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Nzk5MTc5", "url": "https://github.com/apache/beam/pull/12372#pullrequestreview-457799179", "createdAt": "2020-07-29T18:53:03Z", "commit": {"oid": "b05204e8ad24ef0b5b4aa7adac5e9b405ce871da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1MzowNFrOG5FuqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1MzowNFrOG5FuqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNTg4MA==", "bodyText": "This is just a nit, but for consistency, I would keep the private method signature the same as the public methods (ie. private _onIOPub(msg: KernelMessage.IIOPubMessage) {...)  as opposed to this syntax which assigns the lambda function to the private data member.", "url": "https://github.com/apache/beam/pull/12372#discussion_r462515880", "createdAt": "2020-07-29T18:53:04Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/kernel/KernelModel.ts", "diffHunk": "@@ -0,0 +1,161 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * The module holds the model that handles messaging between the frontend and\n+ * the connected kernel.\n+ */\n+\n+import { ISessionContext } from '@jupyterlab/apputils';\n+\n+import {\n+  IDisplayData,\n+  IDisplayUpdate,\n+  IExecuteResult\n+} from '@jupyterlab/nbformat';\n+\n+import { Kernel, KernelMessage } from '@jupyterlab/services';\n+\n+import { ISignal, Signal } from '@lumino/signaling';\n+\n+import { KernelCode } from '../kernel/KernelCode';\n+\n+export class KernelModel {\n+  constructor(sessionContext: ISessionContext, enableConsoleLog = false) {\n+    this._sessionContext = sessionContext;\n+    this._enableConsoleLog = enableConsoleLog;\n+  }\n+\n+  get future(): Kernel.IFuture<\n+    KernelMessage.IExecuteRequestMsg,\n+    KernelMessage.IExecuteReplyMsg\n+  > | null {\n+    return this._future;\n+  }\n+\n+  set future(\n+    value: Kernel.IFuture<\n+      KernelMessage.IExecuteRequestMsg,\n+      KernelMessage.IExecuteReplyMsg\n+    > | null\n+  ) {\n+    if (this._future === value) {\n+      return;\n+    }\n+\n+    if (this._future) {\n+      this._future.dispose();\n+    }\n+\n+    this._future = value;\n+\n+    if (!value) {\n+      return;\n+    }\n+\n+    value.onIOPub = this._onIOPub;\n+  }\n+\n+  get executeResult(): object {\n+    if (this._executeResult) {\n+      const dataInPlainText = this._executeResult.data['text/plain'] as string;\n+      if (dataInPlainText) {\n+        try {\n+          // The slice removes trailing single quotes from the nbformat output.\n+          // The replace removes literal backslashes from the nbformat output.\n+          const dataInJsonString = dataInPlainText\n+            .slice(1, -1)\n+            .replace(/\\\\'/g, \"'\");\n+          return JSON.parse(dataInJsonString);\n+        } catch (e) {\n+          console.error(e);\n+          return {};\n+        }\n+      }\n+    }\n+    return {};\n+  }\n+\n+  get displayData(): Array<IDisplayData> {\n+    return this._displayData;\n+  }\n+\n+  get displayUpdate(): Array<IDisplayUpdate> {\n+    return this._displayUpdate;\n+  }\n+\n+  get stateChanged(): ISignal<KernelModel, void> {\n+    return this._stateChanged;\n+  }\n+\n+  execute(code: string, expectReply = true): void {\n+    // Dispose the kernel future so that no more IOPub will be handled.\n+    if (this.future) {\n+      this.future.dispose();\n+      this.future = null;\n+    }\n+    // Clear the outputs from previous kernel executions.\n+    this._executeResult = null;\n+    this._displayData.length = 0;\n+    this._displayUpdate.length = 0;\n+    if (!this._sessionContext || !this._sessionContext.session?.kernel) {\n+      return;\n+    }\n+    this.future = this._sessionContext.session?.kernel?.requestExecute({\n+      code: KernelCode.COMMON_KERNEL_IMPORTS + code,\n+      silent: !expectReply,\n+      store_history: false // eslint-disable-line @typescript-eslint/camelcase\n+    });\n+  }\n+\n+  private _onIOPub = (msg: KernelMessage.IIOPubMessage): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b05204e8ad24ef0b5b4aa7adac5e9b405ce871da"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/8f24efaaa65a5e520f29afbd7842da4c20194156", "committedDate": "2020-07-29T19:39:25Z", "message": "Change the syntax of private _onIOPub to a function declaration instead of arrow function assignment. This requires binding `this` when assigning the function to the `future`."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODM2NDk4", "url": "https://github.com/apache/beam/pull/12372#pullrequestreview-457836498", "createdAt": "2020-07-29T19:48:06Z", "commit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjE5OTIz", "url": "https://github.com/apache/beam/pull/12372#pullrequestreview-458619923", "createdAt": "2020-07-30T17:41:29Z", "commit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjIxNzAy", "url": "https://github.com/apache/beam/pull/12372#pullrequestreview-458621702", "createdAt": "2020-07-30T17:44:02Z", "commit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0NDowMlrOG5tXag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo1MDoyMVrOG5tl-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NTI5MA==", "bodyText": "What does this console.log's do? Are they executed?", "url": "https://github.com/apache/beam/pull/12372#discussion_r463165290", "createdAt": "2020-07-30T17:44:02Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/__tests__/kernel/KernelModel.test.ts", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * Tests for KernelModel module.\n+ *\n+ * Non camelcase fields are nbformat fields used in notebooks. Lint is ignored\n+ * for them.\n+ */\n+\n+import { KernelModel } from '../../kernel/KernelModel';\n+\n+const fakeSessionContext = {\n+  session: {\n+    kernel: {\n+      requestExecute: function(): object {\n+        return {\n+          onIOPub: function(): void {\n+            // do nothing\n+          }\n+        };\n+      }\n+    }\n+  }\n+};\n+\n+it('creates new future with IOPub callbacks when executing new code in kernel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('new code');\n+  expect(kernelModel.future).not.toBe(null);\n+  expect(kernelModel.future.onIOPub).not.toBe(null);\n+});\n+\n+it('handles execute result from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  kernelModel.future.onIOPub({\n+    header: {\n+      // eslint-disable-next-line @typescript-eslint/camelcase\n+      msg_type: 'execute_result'\n+    },\n+    content: {\n+      data: {\n+        'text/plain':\n+          '\\'{\"pipelineId\": {\"metadata\": {\"name\": \"pipeline\", \"inMemoryId\": 1, \"type\": \"pipeline\"}, \"pcolls\": {\"pcollId\": {\"name\": \"pcoll\", \"inMemoryId\": 2, \"type\": \"pcollection\"}}}}\\''\n+      },\n+      channel: 'iopub'\n+    }\n+  } as any);\n+  expect(kernelModel.executeResult).toEqual({\n+    pipelineId: {\n+      metadata: {\n+        name: 'pipeline',\n+        inMemoryId: 1,\n+        type: 'pipeline'\n+      },\n+      pcolls: {\n+        pcollId: {\n+          name: 'pcoll',\n+          inMemoryId: 2,\n+          type: 'pcollection'\n+        }\n+      }\n+    }\n+  });\n+});\n+\n+it('handles display data from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  const displayData = {\n+    // eslint-disable-next-line @typescript-eslint/camelcase\n+    output_type: 'display_data',\n+    data: {\n+      'text/html': '<div></div>',\n+      'application/javascript': 'console.log(1);'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2Njc3OQ==", "bodyText": "it seems to replace a backslash and a quote? \\\\'", "url": "https://github.com/apache/beam/pull/12372#discussion_r463166779", "createdAt": "2020-07-30T17:46:47Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/kernel/KernelModel.ts", "diffHunk": "@@ -0,0 +1,161 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * The module holds the model that handles messaging between the frontend and\n+ * the connected kernel.\n+ */\n+\n+import { ISessionContext } from '@jupyterlab/apputils';\n+\n+import {\n+  IDisplayData,\n+  IDisplayUpdate,\n+  IExecuteResult\n+} from '@jupyterlab/nbformat';\n+\n+import { Kernel, KernelMessage } from '@jupyterlab/services';\n+\n+import { ISignal, Signal } from '@lumino/signaling';\n+\n+import { KernelCode } from '../kernel/KernelCode';\n+\n+export class KernelModel {\n+  constructor(sessionContext: ISessionContext, enableConsoleLog = false) {\n+    this._sessionContext = sessionContext;\n+    this._enableConsoleLog = enableConsoleLog;\n+  }\n+\n+  get future(): Kernel.IFuture<\n+    KernelMessage.IExecuteRequestMsg,\n+    KernelMessage.IExecuteReplyMsg\n+  > | null {\n+    return this._future;\n+  }\n+\n+  set future(\n+    value: Kernel.IFuture<\n+      KernelMessage.IExecuteRequestMsg,\n+      KernelMessage.IExecuteReplyMsg\n+    > | null\n+  ) {\n+    if (this._future === value) {\n+      return;\n+    }\n+\n+    if (this._future) {\n+      this._future.dispose();\n+    }\n+\n+    this._future = value;\n+\n+    if (!value) {\n+      return;\n+    }\n+\n+    value.onIOPub = this._onIOPub.bind(this);\n+  }\n+\n+  get executeResult(): object {\n+    if (this._executeResult) {\n+      const dataInPlainText = this._executeResult.data['text/plain'] as string;\n+      if (dataInPlainText) {\n+        try {\n+          // The slice removes trailing single quotes from the nbformat output.\n+          // The replace removes literal backslashes from the nbformat output.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NzY2MQ==", "bodyText": "If silent is the name of the underlying api, why do we use an oppositely behaving expectReply flag?", "url": "https://github.com/apache/beam/pull/12372#discussion_r463167661", "createdAt": "2020-07-30T17:48:07Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/kernel/KernelModel.ts", "diffHunk": "@@ -0,0 +1,161 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * The module holds the model that handles messaging between the frontend and\n+ * the connected kernel.\n+ */\n+\n+import { ISessionContext } from '@jupyterlab/apputils';\n+\n+import {\n+  IDisplayData,\n+  IDisplayUpdate,\n+  IExecuteResult\n+} from '@jupyterlab/nbformat';\n+\n+import { Kernel, KernelMessage } from '@jupyterlab/services';\n+\n+import { ISignal, Signal } from '@lumino/signaling';\n+\n+import { KernelCode } from '../kernel/KernelCode';\n+\n+export class KernelModel {\n+  constructor(sessionContext: ISessionContext, enableConsoleLog = false) {\n+    this._sessionContext = sessionContext;\n+    this._enableConsoleLog = enableConsoleLog;\n+  }\n+\n+  get future(): Kernel.IFuture<\n+    KernelMessage.IExecuteRequestMsg,\n+    KernelMessage.IExecuteReplyMsg\n+  > | null {\n+    return this._future;\n+  }\n+\n+  set future(\n+    value: Kernel.IFuture<\n+      KernelMessage.IExecuteRequestMsg,\n+      KernelMessage.IExecuteReplyMsg\n+    > | null\n+  ) {\n+    if (this._future === value) {\n+      return;\n+    }\n+\n+    if (this._future) {\n+      this._future.dispose();\n+    }\n+\n+    this._future = value;\n+\n+    if (!value) {\n+      return;\n+    }\n+\n+    value.onIOPub = this._onIOPub.bind(this);\n+  }\n+\n+  get executeResult(): object {\n+    if (this._executeResult) {\n+      const dataInPlainText = this._executeResult.data['text/plain'] as string;\n+      if (dataInPlainText) {\n+        try {\n+          // The slice removes trailing single quotes from the nbformat output.\n+          // The replace removes literal backslashes from the nbformat output.\n+          const dataInJsonString = dataInPlainText\n+            .slice(1, -1)\n+            .replace(/\\\\'/g, \"'\");\n+          return JSON.parse(dataInJsonString);\n+        } catch (e) {\n+          console.error(e);\n+          return {};\n+        }\n+      }\n+    }\n+    return {};\n+  }\n+\n+  get displayData(): Array<IDisplayData> {\n+    return this._displayData;\n+  }\n+\n+  get displayUpdate(): Array<IDisplayUpdate> {\n+    return this._displayUpdate;\n+  }\n+\n+  get stateChanged(): ISignal<KernelModel, void> {\n+    return this._stateChanged;\n+  }\n+\n+  execute(code: string, expectReply = true): void {\n+    // Dispose the kernel future so that no more IOPub will be handled.\n+    if (this.future) {\n+      this.future.dispose();\n+      this.future = null;\n+    }\n+    // Clear the outputs from previous kernel executions.\n+    this._executeResult = null;\n+    this._displayData.length = 0;\n+    this._displayUpdate.length = 0;\n+    if (!this._sessionContext || !this._sessionContext.session?.kernel) {\n+      return;\n+    }\n+    this.future = this._sessionContext.session?.kernel?.requestExecute({\n+      code: KernelCode.COMMON_KERNEL_IMPORTS + code,\n+      silent: !expectReply,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2OTAxNg==", "bodyText": "what is the difference between display data and display update messages?", "url": "https://github.com/apache/beam/pull/12372#discussion_r463169016", "createdAt": "2020-07-30T17:50:21Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/__tests__/kernel/KernelModel.test.ts", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * Tests for KernelModel module.\n+ *\n+ * Non camelcase fields are nbformat fields used in notebooks. Lint is ignored\n+ * for them.\n+ */\n+\n+import { KernelModel } from '../../kernel/KernelModel';\n+\n+const fakeSessionContext = {\n+  session: {\n+    kernel: {\n+      requestExecute: function(): object {\n+        return {\n+          onIOPub: function(): void {\n+            // do nothing\n+          }\n+        };\n+      }\n+    }\n+  }\n+};\n+\n+it('creates new future with IOPub callbacks when executing new code in kernel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('new code');\n+  expect(kernelModel.future).not.toBe(null);\n+  expect(kernelModel.future.onIOPub).not.toBe(null);\n+});\n+\n+it('handles execute result from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  kernelModel.future.onIOPub({\n+    header: {\n+      // eslint-disable-next-line @typescript-eslint/camelcase\n+      msg_type: 'execute_result'\n+    },\n+    content: {\n+      data: {\n+        'text/plain':\n+          '\\'{\"pipelineId\": {\"metadata\": {\"name\": \"pipeline\", \"inMemoryId\": 1, \"type\": \"pipeline\"}, \"pcolls\": {\"pcollId\": {\"name\": \"pcoll\", \"inMemoryId\": 2, \"type\": \"pcollection\"}}}}\\''\n+      },\n+      channel: 'iopub'\n+    }\n+  } as any);\n+  expect(kernelModel.executeResult).toEqual({\n+    pipelineId: {\n+      metadata: {\n+        name: 'pipeline',\n+        inMemoryId: 1,\n+        type: 'pipeline'\n+      },\n+      pcolls: {\n+        pcollId: {\n+          name: 'pcoll',\n+          inMemoryId: 2,\n+          type: 'pcollection'\n+        }\n+      }\n+    }\n+  });\n+});\n+\n+it('handles display data from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  const displayData = {\n+    // eslint-disable-next-line @typescript-eslint/camelcase\n+    output_type: 'display_data',\n+    data: {\n+      'text/html': '<div></div>',\n+      'application/javascript': 'console.log(1);'\n+    },\n+    metadata: {\n+      some: 'data'\n+    }\n+  };\n+\n+  kernelModel.future.onIOPub({\n+    header: {\n+      // eslint-disable-next-line @typescript-eslint/camelcase\n+      msg_type: 'display_data'\n+    },\n+    content: displayData\n+  } as any);\n+  expect(kernelModel.displayData).toEqual([displayData]);\n+});\n+\n+it('handles display update from IOPub channel', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODIyNjM3", "url": "https://github.com/apache/beam/pull/12372#pullrequestreview-458822637", "createdAt": "2020-07-30T23:09:45Z", "commit": {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3949, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}