{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTQzOTQw", "number": 12155, "title": "[BEAM-10400] Fix race condition in DirectRunner watermark update", "bodyText": "Fixes [BEAM-10400]\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-01T19:42:33Z", "url": "https://github.com/apache/beam/pull/12155", "merged": true, "mergeCommit": {"oid": "639cb75275e5772387581792e37255a059ddea61"}, "closed": true, "closedAt": "2020-07-23T20:59:58Z", "author": {"login": "je-ik"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwvneRAFqTQ0MTE0OTE0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc315N_gFqTQ1NDQ5MDQwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTQ5MTQz", "url": "https://github.com/apache/beam/pull/12155#pullrequestreview-441149143", "createdAt": "2020-07-01T19:43:05Z", "commit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0MzowNVrOGrzEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0MzowNVrOGrzEmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODcxNA==", "bodyText": "We collect here bundles and AppliedPTransforms that have started to process bundle, but have not completed it yet. The reason for that is that the bundle processing might change output watermark of a PTransform before enqueuing the resulting bundle to pendingUpdates of downstream PTransform, which can lead to watermark being updated past the emitted elements.", "url": "https://github.com/apache/beam/pull/12155#discussion_r448578714", "createdAt": "2020-07-01T19:43:05Z", "author": {"login": "je-ik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/QuiescenceDriver.java", "diffHunk": "@@ -70,6 +71,8 @@ public static ExecutionDriver create(\n   private final Map<AppliedPTransform<?, ?, ?>, ConcurrentLinkedQueue<CommittedBundle<?>>>\n       pendingRootBundles;\n   private final Queue<WorkUpdate> pendingWork = new ConcurrentLinkedQueue<>();\n+  private final Map<AppliedPTransform<?, ?, ?>, Collection<CommittedBundle<?>>> inflightBundles =\n+      new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTQ5Mzky", "url": "https://github.com/apache/beam/pull/12155#pullrequestreview-441149392", "createdAt": "2020-07-01T19:43:31Z", "commit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0MzozMlrOGrzFVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0MzozMlrOGrzFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODkwMA==", "bodyText": "This is removed because it is somewhat duplicate to what StatefulDoFnRunner already does. We can return it back, it is not directly related to purpose of this PR, it is just a cleanup that I did during bug hunting.", "url": "https://github.com/apache/beam/pull/12155#discussion_r448578900", "createdAt": "2020-07-01T19:43:32Z", "author": {"login": "je-ik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java", "diffHunk": "@@ -128,19 +108,6 @@ public void cleanup() throws Exception {\n     final DoFn<KV<K, InputT>, OutputT> doFn = application.getTransform().getDoFn();\n     final DoFnSignature signature = DoFnSignatures.getSignature(doFn.getClass());\n \n-    // If the DoFn is stateful, schedule state clearing.\n-    // It is semantically correct to schedule any number of redundant clear tasks; the\n-    // cache is used to limit the number of tasks to avoid performance degradation.\n-    if (signature.stateDeclarations().size() > 0) {\n-      for (final WindowedValue<?> element : inputBundle.getElements()) {\n-        for (final BoundedWindow window : element.getWindows()) {\n-          cleanupRegistry.get(\n-              AppliedPTransformOutputKeyAndWindow.create(\n-                  application, (StructuralKey<K>) inputBundle.getKey(), window));\n-        }\n-      }\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTQ5NjM5", "url": "https://github.com/apache/beam/pull/12155#pullrequestreview-441149639", "createdAt": "2020-07-01T19:44:01Z", "commit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NDowMVrOGrzGEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NDowMVrOGrzGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTA5MA==", "bodyText": "It can happen that elements processed inside this bundle set timer, so it is technically better to check this before firing any timer. In practice it probably doesn't matter, because DirectRunner currently apparently doesn't mix bundles with timers and bundles with elements.", "url": "https://github.com/apache/beam/pull/12155#discussion_r448579090", "createdAt": "2020-07-01T19:44:01Z", "author": {"login": "je-ik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java", "diffHunk": "@@ -270,11 +177,13 @@ public void processElement(WindowedValue<KeyedWorkItem<K, KV<K, InputT>>> gbkRes\n         delegateEvaluator.processElement(windowedValue);\n       }\n \n-      Instant currentInputWatermark = timerInternals.currentInputWatermarkTime();\n+      final Instant inputWatermarkTime = timerInternals.currentInputWatermarkTime();\n       PriorityQueue<TimerData> toBeFiredTimers =\n           new PriorityQueue<>(Comparator.comparing(TimerData::getTimestamp));\n       gbkResult.getValue().timersIterable().forEach(toBeFiredTimers::add);\n-      while (!toBeFiredTimers.isEmpty()) {\n+\n+      while (!timerInternals.containsUpdateForTimeBefore(inputWatermarkTime)\n+          && !toBeFiredTimers.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTUwMDY0", "url": "https://github.com/apache/beam/pull/12155#pullrequestreview-441150064", "createdAt": "2020-07-01T19:44:44Z", "commit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NDo0NFrOGrzHTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NDo0NFrOGrzHTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTQwNw==", "bodyText": "Not sure what was the purpose for limiting the number of applied updates, but that seems to be wrong - we need to apply all updates at all times, because otherwise we again might not hold the downstream watermark back enough.", "url": "https://github.com/apache/beam/pull/12155#discussion_r448579407", "createdAt": "2020-07-01T19:44:44Z", "author": {"login": "je-ik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/WatermarkManager.java", "diffHunk": "@@ -1110,17 +1109,7 @@ public void updateWatermarks(\n     pendingUpdates.offer(\n         PendingWatermarkUpdate.create(\n             executable, completed, timerUpdate, unprocessedInputs, outputs, earliestHold));\n-    tryApplyPendingUpdates();\n-  }\n-\n-  private void tryApplyPendingUpdates() {\n-    if (refreshLock.tryLock()) {\n-      try {\n-        applyNUpdates(MAX_INCREMENTAL_UPDATES);\n-      } finally {\n-        refreshLock.unlock();\n-      }\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTUwNTAy", "url": "https://github.com/apache/beam/pull/12155#pullrequestreview-441150502", "createdAt": "2020-07-01T19:45:25Z", "commit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NToyNVrOGrzIqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NToyNVrOGrzIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTc1Mg==", "bodyText": "This was not cleared ever before.", "url": "https://github.com/apache/beam/pull/12155#discussion_r448579752", "createdAt": "2020-07-01T19:45:25Z", "author": {"login": "je-ik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/WatermarkManager.java", "diffHunk": "@@ -1222,6 +1209,7 @@ public synchronized void refreshAll() {\n       while (!toRefresh.isEmpty()) {\n         toRefresh = refreshAllOf(toRefresh);\n       }\n+      pendingRefreshes.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/333717387cb4d02a566fb1601d95b1b336b22869", "committedDate": "2020-07-01T19:38:05Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}, "afterCommit": {"oid": "edbdd542d06a5ed5648912e9732a8c76be3a5a08", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/edbdd542d06a5ed5648912e9732a8c76be3a5a08", "committedDate": "2020-07-02T12:25:42Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edbdd542d06a5ed5648912e9732a8c76be3a5a08", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/edbdd542d06a5ed5648912e9732a8c76be3a5a08", "committedDate": "2020-07-02T12:25:42Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}, "afterCommit": {"oid": "3134171ae69e1d7184936fdf2956939e6b457a1c", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/3134171ae69e1d7184936fdf2956939e6b457a1c", "committedDate": "2020-07-02T12:44:15Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzc0Mzg2", "url": "https://github.com/apache/beam/pull/12155#pullrequestreview-443374386", "createdAt": "2020-07-06T20:09:20Z", "commit": {"oid": "3134171ae69e1d7184936fdf2956939e6b457a1c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDowOToyMFrOGtlfVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoxNjoxNlrOGtlr7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1MzMzNQ==", "bodyText": "Please do make it a separate commit. Because when reading code history it will make more sense. Also single commits can be rolled back. it is fine to have it in the same PR in my opinion.\nI agree that this seems redundant with \n  \n    \n      beam/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ParDoEvaluator.java\n    \n    \n         Line 113\n      in\n      c3d1e5d\n    \n    \n    \n    \n\n        \n          \n           new StatefulDoFnRunner.TimeInternalsCleanupTimer<>( \n        \n    \n  \n\n\nThis code I think predates StatefulDoFnRunner so perhaps this was missed when it was ported to use StatefulDoFnRunner. (I could be wrong; I did not check the git history)", "url": "https://github.com/apache/beam/pull/12155#discussion_r450453335", "createdAt": "2020-07-06T20:09:20Z", "author": {"login": "kennknowles"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java", "diffHunk": "@@ -128,19 +108,6 @@ public void cleanup() throws Exception {\n     final DoFn<KV<K, InputT>, OutputT> doFn = application.getTransform().getDoFn();\n     final DoFnSignature signature = DoFnSignatures.getSignature(doFn.getClass());\n \n-    // If the DoFn is stateful, schedule state clearing.\n-    // It is semantically correct to schedule any number of redundant clear tasks; the\n-    // cache is used to limit the number of tasks to avoid performance degradation.\n-    if (signature.stateDeclarations().size() > 0) {\n-      for (final WindowedValue<?> element : inputBundle.getElements()) {\n-        for (final BoundedWindow window : element.getWindows()) {\n-          cleanupRegistry.get(\n-              AppliedPTransformOutputKeyAndWindow.create(\n-                  application, (StructuralKey<K>) inputBundle.getKey(), window));\n-        }\n-      }\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODkwMA=="}, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NDYxNw==", "bodyText": "Updates can only move watermarks forward. I think this is just a rate limiting effect. This is from #1287. I believe it is correct. Whenever a bundle is completed, it can allow the watermark to move forward - but not past other holds. In this way, adding updates does not need a shared lock with applying and removing updates.", "url": "https://github.com/apache/beam/pull/12155#discussion_r450454617", "createdAt": "2020-07-06T20:12:07Z", "author": {"login": "kennknowles"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/WatermarkManager.java", "diffHunk": "@@ -1110,17 +1109,7 @@ public void updateWatermarks(\n     pendingUpdates.offer(\n         PendingWatermarkUpdate.create(\n             executable, completed, timerUpdate, unprocessedInputs, outputs, earliestHold));\n-    tryApplyPendingUpdates();\n-  }\n-\n-  private void tryApplyPendingUpdates() {\n-    if (refreshLock.tryLock()) {\n-      try {\n-        applyNUpdates(MAX_INCREMENTAL_UPDATES);\n-      } finally {\n-        refreshLock.unlock();\n-      }\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTQwNw=="}, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NjU1OA==", "bodyText": "The watermark should be held by all timestamps in the bundle, until the bundle is completed and committed.\nCan you move your GitHub review comment into a code comment that explains this field?", "url": "https://github.com/apache/beam/pull/12155#discussion_r450456558", "createdAt": "2020-07-06T20:16:16Z", "author": {"login": "kennknowles"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/QuiescenceDriver.java", "diffHunk": "@@ -70,6 +71,8 @@ public static ExecutionDriver create(\n   private final Map<AppliedPTransform<?, ?, ?>, ConcurrentLinkedQueue<CommittedBundle<?>>>\n       pendingRootBundles;\n   private final Queue<WorkUpdate> pendingWork = new ConcurrentLinkedQueue<>();\n+  private final Map<AppliedPTransform<?, ?, ?>, Collection<CommittedBundle<?>>> inflightBundles =\n+      new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODcxNA=="}, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3134171ae69e1d7184936fdf2956939e6b457a1c", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/3134171ae69e1d7184936fdf2956939e6b457a1c", "committedDate": "2020-07-02T12:44:15Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}, "afterCommit": {"oid": "cb424c1ab3f598333349878ab6f5bf96acd35262", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/cb424c1ab3f598333349878ab6f5bf96acd35262", "committedDate": "2020-07-13T10:11:31Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d4684d85ae73eaf21733e7bbb1ac0d45847fa99", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/6d4684d85ae73eaf21733e7bbb1ac0d45847fa99", "committedDate": "2020-07-13T10:24:41Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb424c1ab3f598333349878ab6f5bf96acd35262", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/cb424c1ab3f598333349878ab6f5bf96acd35262", "committedDate": "2020-07-13T10:11:31Z", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update"}, "afterCommit": {"oid": "20b07a582c70a48d6578a012c55ab23156f84bd5", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/20b07a582c70a48d6578a012c55ab23156f84bd5", "committedDate": "2020-07-13T10:26:09Z", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20b07a582c70a48d6578a012c55ab23156f84bd5", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/20b07a582c70a48d6578a012c55ab23156f84bd5", "committedDate": "2020-07-13T10:26:09Z", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory"}, "afterCommit": {"oid": "d7b3ed4ec53143374530c3d8eca56819c92b209f", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/d7b3ed4ec53143374530c3d8eca56819c92b209f", "committedDate": "2020-07-13T12:57:58Z", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "101a493c89f5278190412d0f7e182b41f7451482", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/101a493c89f5278190412d0f7e182b41f7451482", "committedDate": "2020-07-13T13:04:08Z", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7b3ed4ec53143374530c3d8eca56819c92b209f", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/d7b3ed4ec53143374530c3d8eca56819c92b209f", "committedDate": "2020-07-13T12:57:58Z", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory"}, "afterCommit": {"oid": "101a493c89f5278190412d0f7e182b41f7451482", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/101a493c89f5278190412d0f7e182b41f7451482", "committedDate": "2020-07-13T13:04:08Z", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDkwNDA5", "url": "https://github.com/apache/beam/pull/12155#pullrequestreview-454490409", "createdAt": "2020-07-23T20:58:25Z", "commit": {"oid": "6d4684d85ae73eaf21733e7bbb1ac0d45847fa99"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1ODoyNVrOG2bVyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1ODoyNVrOG2bVyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyNDIzMg==", "bodyText": "Yes that sounds about right.", "url": "https://github.com/apache/beam/pull/12155#discussion_r459724232", "createdAt": "2020-07-23T20:58:25Z", "author": {"login": "kennknowles"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/QuiescenceDriver.java", "diffHunk": "@@ -70,6 +71,8 @@ public static ExecutionDriver create(\n   private final Map<AppliedPTransform<?, ?, ?>, ConcurrentLinkedQueue<CommittedBundle<?>>>\n       pendingRootBundles;\n   private final Queue<WorkUpdate> pendingWork = new ConcurrentLinkedQueue<>();\n+  private final Map<AppliedPTransform<?, ?, ?>, Collection<CommittedBundle<?>>> inflightBundles =\n+      new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODcxNA=="}, "originalCommit": {"oid": "333717387cb4d02a566fb1601d95b1b336b22869"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3326, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}