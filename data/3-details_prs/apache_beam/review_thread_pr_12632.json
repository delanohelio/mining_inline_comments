{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjk3NTA3", "number": 12632, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNDo0MlrOEaFFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjo0MTo0MlrOEaMblA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzgxODAwOnYy", "diffSide": "LEFT", "path": "sdks/go/pkg/beam/core/graph/edge.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNDo0MlrOHDR8kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMToxNDo0OVrOHFBaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMTgwOQ==", "bodyText": "Note that none of the other graph functions require the Inbound and outbounds to be passed in. They're usually constructed inside these methods and attached to the node that way.", "url": "https://github.com/apache/beam/pull/12632#discussion_r473201809", "createdAt": "2020-08-19T17:24:42Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/edge.go", "diffHunk": "@@ -283,31 +283,51 @@ func NewFlatten(g *Graph, s *Scope, in []*Node) (*MultiEdge, error) {\n }\n \n // NewCrossLanguage inserts a Cross-langugae External transform.\n-func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform) *MultiEdge {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyODA1Mg==", "bodyText": "Noted. It was intentional since the order of Inputs v/s Outputs being set in ambiguous. I guess a change in the API will help resolve this.", "url": "https://github.com/apache/beam/pull/12632#discussion_r475028052", "createdAt": "2020-08-22T01:14:49Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/core/graph/edge.go", "diffHunk": "@@ -283,31 +283,51 @@ func NewFlatten(g *Graph, s *Scope, in []*Node) (*MultiEdge, error) {\n }\n \n // NewCrossLanguage inserts a Cross-langugae External transform.\n-func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform) *MultiEdge {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMTgwOQ=="}, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzg0MzYwOnYy", "diffSide": "LEFT", "path": "sdks/go/pkg/beam/core/graph/edge.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozMTo1MlrOHDSMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMToxNjoyNlrOHFBa_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNTg5Nw==", "bodyText": "Just an educational note: As a rule it's very bad form to make breaking changes (like deleting entirely, changing the API surface) to exported functions, as they will break user builds that use them forcing them to make such changes. Breaking changes shouldn't be made lightly. Similarly, adding new user visible surfaces (like methods and types) shouldn't be made lightly either, as they represent a new maintenance burden.\nIn this case it's OK since this function was only added to support XLang super recently and under the same experimental umbrella of use at own risk. Just letting you know.", "url": "https://github.com/apache/beam/pull/12632#discussion_r473205897", "createdAt": "2020-08-19T17:31:52Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/edge.go", "diffHunk": "@@ -283,31 +283,51 @@ func NewFlatten(g *Graph, s *Scope, in []*Node) (*MultiEdge, error) {\n }\n \n // NewCrossLanguage inserts a Cross-langugae External transform.\n-func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform) *MultiEdge {\n+func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform, ins []*Inbound, outs []*Outbound) (*MultiEdge, func(*Node, bool)) {\n \tedge := g.NewEdge(s)\n \tedge.Op = External\n \tedge.External = ext\n \n-\tfor _, n := range ext.Inputs() {\n-\t\tedge.Input = append(edge.Input, &Inbound{Kind: Main, From: n, Type: n.Type()})\n+\twindowingStrategy := inputWindow([]*Node{ins[0].From})\n+\tfor _, o := range outs {\n+\t\to.To.w = windowingStrategy\n \t}\n-\treturn edge\n+\n+\tisBoundedUpdater := func(n *Node, bounded bool) {\n+\t\tn.bounded = bounded\n+\t}\n+\n+\tedge.Input = ins\n+\tedge.Output = outs\n+\n+\treturn edge, isBoundedUpdater\n+}\n+\n+func NewNamedInboundLinks(ins map[string]*Node) (map[string]int, []*Inbound) {\n+\tinputsMap := make(map[string]int)\n+\tvar inboundLinks []*Inbound\n+\n+\tfor tag, node := range ins {\n+\t\tid := len(inboundLinks)\n+\t\tinputsMap[tag] = id\n+\t\tinboundLinks = append(inboundLinks, &Inbound{Kind: Main, From: node, Type: node.Type()})\n+\t}\n+\n+\treturn inputsMap, inboundLinks\n }\n \n-// AddOutboundLinks adds Outbound links to existing MultiEdge\n-func AddOutboundLinks(g *Graph, e *MultiEdge) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyODIyMw==", "bodyText": "Hahaha yes I get that. I had to though. That initial version was so crude. But thanks for bringing it up.", "url": "https://github.com/apache/beam/pull/12632#discussion_r475028223", "createdAt": "2020-08-22T01:16:26Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/core/graph/edge.go", "diffHunk": "@@ -283,31 +283,51 @@ func NewFlatten(g *Graph, s *Scope, in []*Node) (*MultiEdge, error) {\n }\n \n // NewCrossLanguage inserts a Cross-langugae External transform.\n-func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform) *MultiEdge {\n+func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform, ins []*Inbound, outs []*Outbound) (*MultiEdge, func(*Node, bool)) {\n \tedge := g.NewEdge(s)\n \tedge.Op = External\n \tedge.External = ext\n \n-\tfor _, n := range ext.Inputs() {\n-\t\tedge.Input = append(edge.Input, &Inbound{Kind: Main, From: n, Type: n.Type()})\n+\twindowingStrategy := inputWindow([]*Node{ins[0].From})\n+\tfor _, o := range outs {\n+\t\to.To.w = windowingStrategy\n \t}\n-\treturn edge\n+\n+\tisBoundedUpdater := func(n *Node, bounded bool) {\n+\t\tn.bounded = bounded\n+\t}\n+\n+\tedge.Input = ins\n+\tedge.Output = outs\n+\n+\treturn edge, isBoundedUpdater\n+}\n+\n+func NewNamedInboundLinks(ins map[string]*Node) (map[string]int, []*Inbound) {\n+\tinputsMap := make(map[string]int)\n+\tvar inboundLinks []*Inbound\n+\n+\tfor tag, node := range ins {\n+\t\tid := len(inboundLinks)\n+\t\tinputsMap[tag] = id\n+\t\tinboundLinks = append(inboundLinks, &Inbound{Kind: Main, From: node, Type: node.Type()})\n+\t}\n+\n+\treturn inputsMap, inboundLinks\n }\n \n-// AddOutboundLinks adds Outbound links to existing MultiEdge\n-func AddOutboundLinks(g *Graph, e *MultiEdge) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNTg5Nw=="}, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzg1Mzk3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/graph/edge.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozNDo1OFrOHDSTYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMToxNjozOVrOHFBbDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNzY0OQ==", "bodyText": "Map iteration isn't deterministic, and will change from call to call.\nHere and in your other helper, I recommend extracting the keys to a []string first and then calling sort.Strings(keys) on it before iterating. This makes the iteration order determistic. This helps with testing, and debugging since the results will always be the same.", "url": "https://github.com/apache/beam/pull/12632#discussion_r473207649", "createdAt": "2020-08-19T17:34:58Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/edge.go", "diffHunk": "@@ -283,31 +283,51 @@ func NewFlatten(g *Graph, s *Scope, in []*Node) (*MultiEdge, error) {\n }\n \n // NewCrossLanguage inserts a Cross-langugae External transform.\n-func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform) *MultiEdge {\n+func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform, ins []*Inbound, outs []*Outbound) (*MultiEdge, func(*Node, bool)) {\n \tedge := g.NewEdge(s)\n \tedge.Op = External\n \tedge.External = ext\n \n-\tfor _, n := range ext.Inputs() {\n-\t\tedge.Input = append(edge.Input, &Inbound{Kind: Main, From: n, Type: n.Type()})\n+\twindowingStrategy := inputWindow([]*Node{ins[0].From})\n+\tfor _, o := range outs {\n+\t\to.To.w = windowingStrategy\n \t}\n-\treturn edge\n+\n+\tisBoundedUpdater := func(n *Node, bounded bool) {\n+\t\tn.bounded = bounded\n+\t}\n+\n+\tedge.Input = ins\n+\tedge.Output = outs\n+\n+\treturn edge, isBoundedUpdater\n+}\n+\n+func NewNamedInboundLinks(ins map[string]*Node) (map[string]int, []*Inbound) {\n+\tinputsMap := make(map[string]int)\n+\tvar inboundLinks []*Inbound\n+\n+\tfor tag, node := range ins {\n+\t\tid := len(inboundLinks)\n+\t\tinputsMap[tag] = id\n+\t\tinboundLinks = append(inboundLinks, &Inbound{Kind: Main, From: node, Type: node.Type()})\n+\t}\n+\n+\treturn inputsMap, inboundLinks\n }\n \n-// AddOutboundLinks adds Outbound links to existing MultiEdge\n-func AddOutboundLinks(g *Graph, e *MultiEdge) {\n-\twindowingStrategy := inputWindow([]*Node{e.Input[0].From})\n-\toutputTypes := e.External.OutputTypes()\n-\tboundedOutputs := e.External.Expanded().BoundedOutputs()\n-\toutputs := make(map[string]*Node)\n+func NewNamedOutboundLinks(g *Graph, outs map[string]typex.FullType) (map[string]int, []*Outbound) {\n+\toutputsMap := make(map[string]int)\n+\tvar outboundLinks []*Outbound\n \n-\tfor tag, fullType := range outputTypes {\n-\t\tn := g.NewNode(fullType, windowingStrategy, boundedOutputs[tag])\n-\t\toutputs[tag] = n\n-\t\te.Output = append(e.Output, &Outbound{To: n, Type: fullType})\n+\tfor tag, fullType := range outs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyODIzOA==", "bodyText": "Addressed and updated in #12667.", "url": "https://github.com/apache/beam/pull/12632#discussion_r475028238", "createdAt": "2020-08-22T01:16:39Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/core/graph/edge.go", "diffHunk": "@@ -283,31 +283,51 @@ func NewFlatten(g *Graph, s *Scope, in []*Node) (*MultiEdge, error) {\n }\n \n // NewCrossLanguage inserts a Cross-langugae External transform.\n-func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform) *MultiEdge {\n+func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform, ins []*Inbound, outs []*Outbound) (*MultiEdge, func(*Node, bool)) {\n \tedge := g.NewEdge(s)\n \tedge.Op = External\n \tedge.External = ext\n \n-\tfor _, n := range ext.Inputs() {\n-\t\tedge.Input = append(edge.Input, &Inbound{Kind: Main, From: n, Type: n.Type()})\n+\twindowingStrategy := inputWindow([]*Node{ins[0].From})\n+\tfor _, o := range outs {\n+\t\to.To.w = windowingStrategy\n \t}\n-\treturn edge\n+\n+\tisBoundedUpdater := func(n *Node, bounded bool) {\n+\t\tn.bounded = bounded\n+\t}\n+\n+\tedge.Input = ins\n+\tedge.Output = outs\n+\n+\treturn edge, isBoundedUpdater\n+}\n+\n+func NewNamedInboundLinks(ins map[string]*Node) (map[string]int, []*Inbound) {\n+\tinputsMap := make(map[string]int)\n+\tvar inboundLinks []*Inbound\n+\n+\tfor tag, node := range ins {\n+\t\tid := len(inboundLinks)\n+\t\tinputsMap[tag] = id\n+\t\tinboundLinks = append(inboundLinks, &Inbound{Kind: Main, From: node, Type: node.Type()})\n+\t}\n+\n+\treturn inputsMap, inboundLinks\n }\n \n-// AddOutboundLinks adds Outbound links to existing MultiEdge\n-func AddOutboundLinks(g *Graph, e *MultiEdge) {\n-\twindowingStrategy := inputWindow([]*Node{e.Input[0].From})\n-\toutputTypes := e.External.OutputTypes()\n-\tboundedOutputs := e.External.Expanded().BoundedOutputs()\n-\toutputs := make(map[string]*Node)\n+func NewNamedOutboundLinks(g *Graph, outs map[string]typex.FullType) (map[string]int, []*Outbound) {\n+\toutputsMap := make(map[string]int)\n+\tvar outboundLinks []*Outbound\n \n-\tfor tag, fullType := range outputTypes {\n-\t\tn := g.NewNode(fullType, windowingStrategy, boundedOutputs[tag])\n-\t\toutputs[tag] = n\n-\t\te.Output = append(e.Output, &Outbound{To: n, Type: fullType})\n+\tfor tag, fullType := range outs {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNzY0OQ=="}, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzg3NjMwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/xlangx/translate.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0MToyMFrOHDShpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0MToyMFrOHDShpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMTMwMw==", "bodyText": "Consider instead of repeatedly calling the helper function, extract the components once to a var comps *pipepb.Components, and get the other fields that way. it's Totally ok for this package to import those protos.", "url": "https://github.com/apache/beam/pull/12632#discussion_r473211303", "createdAt": "2020-08-19T17:41:20Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/xlangx/translate.go", "diffHunk": "@@ -32,32 +32,32 @@ func MergeExpandedWithPipeline(edges []*graph.MultiEdge, p *pipepb.Pipeline) {\n \tfor _, e := range edges {\n \t\tif e.Op == graph.External {\n \t\t\tid := fmt.Sprintf(\"e%v\", e.ID())\n-\t\t\texp := e.External.Expanded()\n+\t\t\texp := e.External.Expanded\n \n-\t\t\tp.Requirements = append(p.Requirements, exp.Requirements()...)\n+\t\t\tp.Requirements = append(p.Requirements, exp.Requirements...)\n \n \t\t\t// Adding components of the Expanded Transforms to the current Pipeline\n-\t\t\tfor k, v := range exp.Components().GetTransforms() {\n+\t\t\tfor k, v := range graphx.ExpandedComponents(exp).GetTransforms() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTAwNDYzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/graphx/xlang.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozNzo0MlrOHDdueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMToxNjo1NVrOHFBbLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NDgwOA==", "bodyText": "I'd quibble over the necessity to type assert and then panic, but I do like the additional clarity that panic message will provide. No change necessary just a note.", "url": "https://github.com/apache/beam/pull/12632#discussion_r473394808", "createdAt": "2020-08-19T22:37:42Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/xlang.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package graphx\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+)\n+\n+func ExpandedComponents(exp *graph.ExpandedTransform) *pipepb.Components {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyODI3MQ==", "bodyText": "Thanks!", "url": "https://github.com/apache/beam/pull/12632#discussion_r475028271", "createdAt": "2020-08-22T01:16:55Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/xlang.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package graphx\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+)\n+\n+func ExpandedComponents(exp *graph.ExpandedTransform) *pipepb.Components {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NDgwOA=="}, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTAyMTAwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/xlangx/translate.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjo0MTo0MlrOHDd5fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjo0MTo0MlrOHDd5fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NzYyOA==", "bodyText": "Just a note, that VerifyNamedOutputs and ResolveOutputIsBounded are excellent candidates for unit tests.", "url": "https://github.com/apache/beam/pull/12632#discussion_r473397628", "createdAt": "2020-08-19T22:41:42Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/xlangx/translate.go", "diffHunk": "@@ -89,27 +89,28 @@ func PurgeOutputInput(edges []*graph.MultiEdge, p *pipepb.Pipeline) {\n \t}\n }\n \n+// TODO(pskevin): handle sourceInput and sinkOutput\n func VerifyNamedOutputs(ext *graph.ExternalTransform) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673e348c4221310cdb4d4d106f94cf1fe4eea45"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 536, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}