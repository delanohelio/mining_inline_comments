{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MjAwMDc5", "number": 12261, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyNjoyNFrOEPqnxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyNjoyNFrOEPqnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODYyNDA0OnYy", "diffSide": "LEFT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyNjoyNFrOGzgOJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMToyMzoyMFrOGzhkZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1ODQ2OQ==", "bodyText": "Is this test not relavent anymore ?", "url": "https://github.com/apache/beam/pull/12261#discussion_r456658469", "createdAt": "2020-07-17T20:26:24Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java", "diffHunk": "@@ -410,96 +415,49 @@ public void testSubMilliPrecisionRejected() {\n     assertThrows(\n         \"precision\",\n         IllegalArgumentException.class,\n-        () ->\n-            BigQueryUtils.convertAvroFormat(\n-                Schema.Field.of(\"dummy\", Schema.FieldType.DATETIME).getType(),\n-                1000000001L,\n-                REJECT_OPTIONS));\n+        () -> BigQueryUtils.convertAvroFormat(FieldType.DATETIME, 1000000001L, REJECT_OPTIONS));\n   }\n \n   @Test\n   public void testMilliPrecisionOk() {\n     long millis = 123456789L;\n     assertThat(\n-        BigQueryUtils.convertAvroFormat(\n-            Schema.Field.of(\"dummy\", Schema.FieldType.DATETIME).getType(),\n-            millis * 1000,\n-            REJECT_OPTIONS),\n+        BigQueryUtils.convertAvroFormat(FieldType.DATETIME, millis * 1000, REJECT_OPTIONS),\n         equalTo(new Instant(millis)));\n   }\n \n   @Test\n   public void testSubMilliPrecisionTruncated() {\n     long millis = 123456789L;\n     assertThat(\n-        BigQueryUtils.convertAvroFormat(\n-            Schema.Field.of(\"dummy\", Schema.FieldType.DATETIME).getType(),\n-            millis * 1000 + 123,\n-            TRUNCATE_OPTIONS),\n+        BigQueryUtils.convertAvroFormat(FieldType.DATETIME, millis * 1000 + 123, TRUNCATE_OPTIONS),\n         equalTo(new Instant(millis)));\n   }\n \n   @Test\n-  public void testSubMilliPrecisionLogicalTypeRejected() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9181a3a7eea26a206f97ad28109a5cbb3dea4dfe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4MDU0OA==", "bodyText": "Yes, it's not relavent anymore. ZetaSQL TIME type is now able to support micro-second precision.", "url": "https://github.com/apache/beam/pull/12261#discussion_r456680548", "createdAt": "2020-07-17T21:23:20Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryUtilsTest.java", "diffHunk": "@@ -410,96 +415,49 @@ public void testSubMilliPrecisionRejected() {\n     assertThrows(\n         \"precision\",\n         IllegalArgumentException.class,\n-        () ->\n-            BigQueryUtils.convertAvroFormat(\n-                Schema.Field.of(\"dummy\", Schema.FieldType.DATETIME).getType(),\n-                1000000001L,\n-                REJECT_OPTIONS));\n+        () -> BigQueryUtils.convertAvroFormat(FieldType.DATETIME, 1000000001L, REJECT_OPTIONS));\n   }\n \n   @Test\n   public void testMilliPrecisionOk() {\n     long millis = 123456789L;\n     assertThat(\n-        BigQueryUtils.convertAvroFormat(\n-            Schema.Field.of(\"dummy\", Schema.FieldType.DATETIME).getType(),\n-            millis * 1000,\n-            REJECT_OPTIONS),\n+        BigQueryUtils.convertAvroFormat(FieldType.DATETIME, millis * 1000, REJECT_OPTIONS),\n         equalTo(new Instant(millis)));\n   }\n \n   @Test\n   public void testSubMilliPrecisionTruncated() {\n     long millis = 123456789L;\n     assertThat(\n-        BigQueryUtils.convertAvroFormat(\n-            Schema.Field.of(\"dummy\", Schema.FieldType.DATETIME).getType(),\n-            millis * 1000 + 123,\n-            TRUNCATE_OPTIONS),\n+        BigQueryUtils.convertAvroFormat(FieldType.DATETIME, millis * 1000 + 123, TRUNCATE_OPTIONS),\n         equalTo(new Instant(millis)));\n   }\n \n   @Test\n-  public void testSubMilliPrecisionLogicalTypeRejected() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1ODQ2OQ=="}, "originalCommit": {"oid": "9181a3a7eea26a206f97ad28109a5cbb3dea4dfe"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1057, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}