{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzU2Njc2", "number": 13567, "title": "[BEAM-10114] Add partition increase handling to PubsubLiteIO", "bodyText": "This allows for handling when topics have partitions added to them once the backend supports this.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-16T18:25:06Z", "url": "https://github.com/apache/beam/pull/13567", "merged": true, "mergeCommit": {"oid": "343a847c641997fe8350ac4f4b20b34c8fc4dd21"}, "closed": true, "closedAt": "2021-01-15T21:52:43Z", "author": {"login": "dpcollins-google"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmyxG7gH2gAyNTQxMzU2Njc2OmM5MDA0YjJhMDQ3ZTFiMWNmZjNmZTZlY2M3Y2YyNDcxNGM1NWVjNDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdwRsQ2AFqTU2ODgxODE1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c9004b2a047e1b1cff3fe6ecc7cf24714c55ec45", "author": {"user": {"login": "dpcollins-google", "name": null}}, "url": "https://github.com/apache/beam/commit/c9004b2a047e1b1cff3fe6ecc7cf24714c55ec45", "committedDate": "2020-12-16T17:55:15Z", "message": "feat: Add partition increase handling to PubsubLiteIO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b109e21c700c1f726f8114f0a508935ce0acb095", "author": {"user": {"login": "dpcollins-google", "name": null}}, "url": "https://github.com/apache/beam/commit/b109e21c700c1f726f8114f0a508935ce0acb095", "committedDate": "2020-12-16T18:32:08Z", "message": "fix: Ensure manually set partitions are not ignored."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ca43608eb0e43f944d48cf939fa772696a24d86", "author": {"user": {"login": "dpcollins-google", "name": null}}, "url": "https://github.com/apache/beam/commit/3ca43608eb0e43f944d48cf939fa772696a24d86", "committedDate": "2020-12-16T18:33:21Z", "message": "fix: Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879", "author": {"user": {"login": "dpcollins-google", "name": null}}, "url": "https://github.com/apache/beam/commit/1db9ec33ba87be566f96b706097f61907b3ec879", "committedDate": "2020-12-16T18:43:44Z", "message": "fix: Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NTI4MjI0", "url": "https://github.com/apache/beam/pull/13567#pullrequestreview-567528224", "createdAt": "2021-01-13T18:58:26Z", "commit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxODo1ODoyNlrOIS90hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOToyMTo1MlrOIS-prQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1ODE0OA==", "bodyText": "You may want to update the javadoc of public abstract Set<Partition> partitions();. Based on your code, whether the partitions is empty will lead to different behavior.", "url": "https://github.com/apache/beam/pull/13567#discussion_r556758148", "createdAt": "2021-01-13T18:58:26Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriberOptions.java", "diffHunk": "@@ -163,28 +161,6 @@ abstract Builder setBacklogReaderSupplier(\n     abstract Builder setOffsetReaderSupplier(\n         SerializableSupplier<InitialOffsetReader> offsetReaderSupplier);\n \n-    // Used for implementing build();\n-    abstract SubscriptionPath subscriptionPath();\n-\n-    abstract Set<Partition> partitions();\n-\n-    abstract SubscriberOptions autoBuild();\n-\n-    @SuppressWarnings(\"CheckReturnValue\")\n-    public SubscriberOptions build() throws ApiException {\n-      if (!partitions().isEmpty()) {\n-        return autoBuild();\n-      }\n-\n-      if (partitions().isEmpty()) {\n-        int partitionCount = PartitionLookupUtils.numPartitions(subscriptionPath());\n-        ImmutableSet.Builder<Partition> partitions = ImmutableSet.builder();\n-        for (int i = 0; i < partitionCount; i++) {\n-          partitions.add(Partition.of(i));\n-        }\n-        setPartitions(partitions.build());\n-      }\n-      return autoBuild();\n-    }\n+    public abstract SubscriberOptions build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NDgxNg==", "bodyText": "Even though the terminate will not be true in this PR, I'm wondering how is pollDuration.multipliedBy(10) computed?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556764816", "createdAt": "2021-01-13T19:09:54Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);\n+                      }\n+                    })\n+                .withPollInterval(pollDuration)\n+                .withTerminationPerInput(\n+                    terminate\n+                        ? Watch.Growth.afterTotalOf(pollDuration.multipliedBy(10))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NTY2Mg==", "bodyText": "pollDuration and terminate should be configurable from PubSubLiteIO with provided default values. What do you think?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556765662", "createdAt": "2021-01-13T19:11:28Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NzY4Mg==", "bodyText": "And for terminate, if you decide to use Watch.Growth.afterTotalOf as the termination condition, it would be better to have the time duration directly instead of a boolean. What do you think?", "url": "https://github.com/apache/beam/pull/13567#discussion_r556767682", "createdAt": "2021-01-13T19:14:51Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc2NTY2Mg=="}, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MTc1Nw==", "bodyText": "Is it intended to always have the watermark as Instant.EPOCH? It will hold back the system watermark unnecessary and the worst case is that downstream operations will have to wait for this watch transform to complete to process.", "url": "https://github.com/apache/beam/pull/13567#discussion_r556771757", "createdAt": "2021-01-13T19:21:52Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/SubscriptionPartitionLoader.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.cloud.pubsublite.Partition;\n+import com.google.cloud.pubsublite.PartitionLookupUtils;\n+import com.google.cloud.pubsublite.SubscriptionPath;\n+import com.google.cloud.pubsublite.TopicPath;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.Watch;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollFn;\n+import org.apache.beam.sdk.transforms.Watch.Growth.PollResult;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+class SubscriptionPartitionLoader extends PTransform<PBegin, PCollection<SubscriptionPartition>> {\n+  private final TopicPath topic;\n+  private final SubscriptionPath subscription;\n+  private final SerializableFunction<TopicPath, Integer> getPartitionCount;\n+  private final Duration pollDuration;\n+  private final boolean terminate;\n+\n+  SubscriptionPartitionLoader(TopicPath topic, SubscriptionPath subscription) {\n+    this(\n+        topic,\n+        subscription,\n+        PartitionLookupUtils::numPartitions,\n+        Duration.standardMinutes(1),\n+        false);\n+  }\n+\n+  @VisibleForTesting\n+  SubscriptionPartitionLoader(\n+      TopicPath topic,\n+      SubscriptionPath subscription,\n+      SerializableFunction<TopicPath, Integer> getPartitionCount,\n+      Duration pollDuration,\n+      boolean terminate) {\n+    this.topic = topic;\n+    this.subscription = subscription;\n+    this.getPartitionCount = getPartitionCount;\n+    this.pollDuration = pollDuration;\n+    this.terminate = terminate;\n+  }\n+\n+  @Override\n+  public PCollection<SubscriptionPartition> expand(PBegin input) {\n+    PCollection<TopicPath> start = input.apply(Create.of(ImmutableList.of(topic)));\n+    PCollection<KV<TopicPath, Partition>> partitions =\n+        start.apply(\n+            Watch.growthOf(\n+                    new PollFn<TopicPath, Partition>() {\n+                      @Override\n+                      public PollResult<Partition> apply(TopicPath element, Context c) {\n+                        checkArgument(element.equals(topic));\n+                        int partitionCount = getPartitionCount.apply(element);\n+                        List<Partition> partitions =\n+                            IntStream.range(0, partitionCount)\n+                                .mapToObj(Partition::of)\n+                                .collect(Collectors.toList());\n+                        return PollResult.incomplete(Instant.EPOCH, partitions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db9ec33ba87be566f96b706097f61907b3ec879"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49c5ed0b0d7681bb080627c259b9cd17dfad0e5d", "author": {"user": {"login": "dpcollins-google", "name": null}}, "url": "https://github.com/apache/beam/commit/49c5ed0b0d7681bb080627c259b9cd17dfad0e5d", "committedDate": "2021-01-13T20:05:55Z", "message": "fix: Remove guava usage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a700852a01d4409be24729f5271b7f75b69b02a", "author": {"user": {"login": "dpcollins-google", "name": null}}, "url": "https://github.com/apache/beam/commit/6a700852a01d4409be24729f5271b7f75b69b02a", "committedDate": "2021-01-14T18:40:52Z", "message": "fix: docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4ODE4MTU4", "url": "https://github.com/apache/beam/pull/13567#pullrequestreview-568818158", "createdAt": "2021-01-15T05:02:20Z", "commit": {"oid": "6a700852a01d4409be24729f5271b7f75b69b02a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4185, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}