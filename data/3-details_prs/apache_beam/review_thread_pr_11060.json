{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTMzNjEz", "number": 11060, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowNTozOVrODnhwsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0OTo0NVrODqguWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc0MTkyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/sdf_utils.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowNTozOVrOF1lD2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNTozNTo1OFrOF14GxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNjA0Mg==", "bodyText": "The Python timer API seems primitive compared to the Java SDK\nUse a switch case for the three types:\nDEPENDENT_REAL_TIME\nREAL_TIME\nWATERMARK\nand throw an error otherwise since you won't know what to do.", "url": "https://github.com/apache/beam/pull/11060#discussion_r391726042", "createdAt": "2020-03-12T16:05:39Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicate input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      time_domain=userstate.TimeDomain.REAL_TIME,\n+      duration=Duration(10 * 60)):\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True not in seen_state.read():\n+          if domain is userstate.TimeDomain.REAL_TIME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzU2OA==", "bodyText": "Python timer only supports REAL_TIME  and WATERMARK . I changed it to checking the type of TimeDomain when constructing DeduplictaionWithinDuration.\nThe type is string so it's not switchable, and python doesn't have switch.", "url": "https://github.com/apache/beam/pull/11060#discussion_r392037568", "createdAt": "2020-03-13T05:33:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicate input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      time_domain=userstate.TimeDomain.REAL_TIME,\n+      duration=Duration(10 * 60)):\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True not in seen_state.read():\n+          if domain is userstate.TimeDomain.REAL_TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNjA0Mg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzODA4NQ==", "bodyText": "When writing this part, I think we should update user-face timer API in python to do similar thing as Java, which makes life easier a lot.", "url": "https://github.com/apache/beam/pull/11060#discussion_r392038085", "createdAt": "2020-03-13T05:35:58Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicate input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      time_domain=userstate.TimeDomain.REAL_TIME,\n+      duration=Duration(10 * 60)):\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True not in seen_state.read():\n+          if domain is userstate.TimeDomain.REAL_TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNjA0Mg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc1MTIzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/sdf_utils.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowNzo1NVrOF1lJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNTozMzo0M1rOF14E3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNzUyOQ==", "bodyText": "I should have used a guard style statement in the Java implementation instead of nesting.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if True not in seen_state.read():\n          \n          \n            \n                      if domain is userstate.TimeDomain.REAL_TIME:\n          \n          \n            \n                        expiry_timer.set(Timestamp.now() + duration)\n          \n          \n            \n                      else:\n          \n          \n            \n                        expiry_timer.set(ts + duration)\n          \n          \n            \n                      seen_state.add(True)\n          \n          \n            \n                      value, _ = element\n          \n          \n            \n                      yield value\n          \n          \n            \n                    if True in seen_state.read():\n          \n          \n            \n                      return\n          \n          \n            \n            \n          \n          \n            \n                    if domain is userstate.TimeDomain.REAL_TIME:\n          \n          \n            \n                      expiry_timer.set(Timestamp.now() + duration)\n          \n          \n            \n                    else:\n          \n          \n            \n                      expiry_timer.set(ts + duration)\n          \n          \n            \n                    seen_state.add(True)\n          \n          \n            \n                    value, _ = element\n          \n          \n            \n                    yield value", "url": "https://github.com/apache/beam/pull/11060#discussion_r391727529", "createdAt": "2020-03-12T16:07:55Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicate input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      time_domain=userstate.TimeDomain.REAL_TIME,\n+      duration=Duration(10 * 60)):\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True not in seen_state.read():\n+          if domain is userstate.TimeDomain.REAL_TIME:\n+            expiry_timer.set(Timestamp.now() + duration)\n+          else:\n+            expiry_timer.set(ts + duration)\n+          seen_state.add(True)\n+          value, _ = element\n+          yield value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzU5Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11060#discussion_r392037597", "createdAt": "2020-03-13T05:33:43Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicate input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self,\n+      time_domain=userstate.TimeDomain.REAL_TIME,\n+      duration=Duration(10 * 60)):\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True not in seen_state.read():\n+          if domain is userstate.TimeDomain.REAL_TIME:\n+            expiry_timer.set(Timestamp.now() + duration)\n+          else:\n+            expiry_timer.set(ts + duration)\n+          seen_state.add(True)\n+          value, _ = element\n+          yield value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNzUyOQ=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc1NzQ5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/sdf_utils.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowOTozN1rOF1lN2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjozNDozNFrOF2VNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyODYwMg==", "bodyText": "It would be useful to expose a keyed deduplication transform as the common implementation that all use internally so in the future we can turn into a well known URN and then runners could provide optimized deduplication transform implementations.\nWe want pipeline authors to use this transform and I think it should go into sdks/python/apache_beam/transforms/util.py or into a dedicated file such as sdks/python/apache_beam/transforms/ such as deduplicate.py.\nCC: @udim What do you think?", "url": "https://github.com/apache/beam/pull/11060#discussion_r391728602", "createdAt": "2020-03-12T16:09:37Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjY4OA==", "bodyText": "I would prefer the second one: sdks/python/apache_beam/transforms/deduplicate.py", "url": "https://github.com/apache/beam/pull/11060#discussion_r391962688", "createdAt": "2020-03-12T23:49:06Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyODYwMg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzY5NQ==", "bodyText": "Moved transform to sdks/python/apache_beam/transforms/deduplicate.py", "url": "https://github.com/apache/beam/pull/11060#discussion_r392037695", "createdAt": "2020-03-13T05:34:12Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyODYwMg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM4NjIyMQ==", "bodyText": "Unlike Java, we typically don't put transforms in their own module in Python. I would recommend putting it under an existing file such as transforms/util.py.", "url": "https://github.com/apache/beam/pull/11060#discussion_r392386221", "createdAt": "2020-03-13T17:58:52Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyODYwMg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MTE1NQ==", "bodyText": "Thanks Udi! Similar to watermark_estimators.py, I'm thinking about providing a collection of transforms for deduplicating purpose. Any reason that we don't put a group of similar transforms into one module?", "url": "https://github.com/apache/beam/pull/11060#discussion_r392461155", "createdAt": "2020-03-13T20:39:57Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyODYwMg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxNDg4NQ==", "bodyText": "No, no reason. Go ahead with using a separate file", "url": "https://github.com/apache/beam/pull/11060#discussion_r392514885", "createdAt": "2020-03-13T22:34:34Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyODYwMg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc2NTI3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMTozM1rOF1lSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo0OTozM1rOF1zgnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyOTg1Mg==", "bodyText": "Is test stream unsupported in these other setups?", "url": "https://github.com/apache/beam/pull/11060#discussion_r391729852", "createdAt": "2020-03-12T16:11:33Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -1250,6 +1313,9 @@ def test_sdf_with_sdf_initiated_checkpointing(self):\n   def test_sdf_with_watermark_tracking(self):\n     raise unittest.SkipTest(\"This test is for a single worker only.\")\n \n+  def test_deduplication_transform_with_processing_time(self):\n+    raise unittest.SkipTest(\"This test is for a single worker only.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2Mjc4MA==", "bodyText": "No, I don't think so.", "url": "https://github.com/apache/beam/pull/11060#discussion_r391962780", "createdAt": "2020-03-12T23:49:33Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -1250,6 +1313,9 @@ def test_sdf_with_sdf_initiated_checkpointing(self):\n   def test_sdf_with_watermark_tracking(self):\n     raise unittest.SkipTest(\"This test is for a single worker only.\")\n \n+  def test_deduplication_transform_with_processing_time(self):\n+    raise unittest.SkipTest(\"This test is for a single worker only.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyOTg1Mg=="}, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzgzMjAxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/sdf_utils.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNzo0MlrOF1l8wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNzo0MlrOF1l8wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MDYwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"\"\" A PTransform which deduplicate input records over a time domain and\n          \n          \n            \n              \"\"\" A PTransform which deduplicates input records over a time domain and", "url": "https://github.com/apache/beam/pull/11060#discussion_r391740608", "createdAt": "2020-03-12T16:27:42Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -244,3 +251,63 @@ def get_estimator_state(self):\n         return None\n \n     return _NoOpWatermarkEstimator()\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicate input records over a time domain and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3657894e8369634fc403a1e444acd4c666915b2d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTk5NTgxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowMTo1M1rOF3t60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowMTo1M1rOF3t60w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2ODMzOQ==", "bodyText": "fn_api_runner_test primarily for testing primitives. I would put this in apache_beam.transforms.deduplicate_test (or util_test, if that's where we plan to move it).", "url": "https://github.com/apache/beam/pull/11060#discussion_r393968339", "createdAt": "2020-03-17T21:01:53Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -448,6 +449,42 @@ def is_buffered_correctly(actual):\n \n       assert_that(actual, is_buffered_correctly)\n \n+  def test_deduplication_transform_with_processing_time(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTk5ODg1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowMzowMVrOF3t8zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo1NzowNFrOF3yGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2ODg0Ng==", "bodyText": "Generally we've been following the convention of importing modules rather than objects from modules. http://google.github.io/styleguide/pyguide.html#22-imports", "url": "https://github.com/apache/beam/pull/11060#discussion_r393968846", "createdAt": "2020-03-17T21:03:01Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -65,6 +65,7 @@\n from apache_beam.transforms import environments\n from apache_beam.transforms import userstate\n from apache_beam.transforms import window\n+from apache_beam.transforms.deduplicate import DeduplictaionWithinDuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjgwNQ==", "bodyText": "Thanks for the pointer!", "url": "https://github.com/apache/beam/pull/11060#discussion_r394036805", "createdAt": "2020-03-17T23:57:04Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -65,6 +65,7 @@\n from apache_beam.transforms import environments\n from apache_beam.transforms import userstate\n from apache_beam.transforms import window\n+from apache_beam.transforms.deduplicate import DeduplictaionWithinDuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2ODg0Ng=="}, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjAwMjg4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowNDowOFrOF3t_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowNDowOFrOF3t_PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2OTQ2OQ==", "bodyText": "IIRC, the FnApiRunner does respect timestamps. (Not sure about the Create transform though.)", "url": "https://github.com/apache/beam/pull/11060#discussion_r393969469", "createdAt": "2020-03-17T21:04:08Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -448,6 +449,42 @@ def is_buffered_correctly(actual):\n \n       assert_that(actual, is_buffered_correctly)\n \n+  def test_deduplication_transform_with_processing_time(self):\n+    # Note that current FnApiRunner doesn't respect either real timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjAwOTI1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowNjowMFrOF3uDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTowNjowMFrOF3uDFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3MDQ1NA==", "bodyText": "The duplication of value_1 probably merits a comment.", "url": "https://github.com/apache/beam/pull/11060#discussion_r393970454", "createdAt": "2020-03-17T21:06:00Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -448,6 +449,42 @@ def is_buffered_correctly(actual):\n \n       assert_that(actual, is_buffered_correctly)\n \n+  def test_deduplication_transform_with_processing_time(self):\n+    # Note that current FnApiRunner doesn't respect either real timestamp.\n+    with self.create_pipeline() as p:\n+      inputs = [\n+          window.TimestampedValue('value_1', 1),\n+          window.TimestampedValue('value_1', 2),\n+          window.TimestampedValue('value_1', 3)\n+      ]\n+      actual = (\n+          p\n+          | beam.Create(inputs)\n+          | beam.WindowInto(window.FixedWindows(10))\n+          | DeduplictaionWithinDuration(duration=timestamp.Duration(5)))\n+      assert_that(actual, equal_to(['value_1']))\n+\n+  @unittest.skip('TestStream not yet supported')\n+  def test_deduplication_transform_with_event_time(self):\n+    test_stream = (\n+        TestStream().advance_watermark_to(0).add_elements([\n+            window.TimestampedValue('value_1', 1),\n+            window.TimestampedValue('value_1', 2),\n+            window.TimestampedValue('value_1', 10)\n+        ]).advance_watermark_to(10).add_elements([\n+            window.TimestampedValue('value_1', 6)\n+        ]).add_elements([window.TimestampedValue('value_2', 15)\n+                         ]).advance_watermark_to_infinity())\n+\n+    with self.create_pipeline() as p:\n+      actual = (\n+          p\n+          | test_stream\n+          | DeduplictaionWithinDuration(\n+              duration=timestamp.Duration(10),\n+              time_domain=userstate.TimeDomain.WATERMARK))\n+      assert_that(actual, equal_to(['value_1', 'value_1', 'value_2']))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjAyNDIzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToxMDozN1rOF3uMMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToxMDozN1rOF3uMMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3Mjc4NA==", "bodyText": "PTransform names are generally verbs. Perhaps just call this Deduplicate. The duration argument would typically be part of the constructor, e.g. Deduplicate(duration=...), so wouldn't need to be repeated in the name.", "url": "https://github.com/apache/beam/pull/11060#discussion_r393972784", "createdAt": "2020-03-17T21:10:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,108 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.core import DoFn\n+from apache_beam.transforms.core import Map\n+from apache_beam.transforms.core import ParDo\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.typehints import trivial_inference\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+__all__ = [\n+    'DeduplictaionWithinDuration',\n+]\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjAzNTY3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToxNDozNVrOF3uTlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyMTo0OFrOF3xcBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NDY3Ng==", "bodyText": "I would make duration a required parameter; I don't think there's a good default we can pick for all pipelines. (This also allows us to have a more intelligent default in the future, e.g. dynamically based on the actual watermark/propagation delay in the pipeline.)\nAlso, is it not possible to have both a real and watermark delay? This API forces you to do one or the other.", "url": "https://github.com/apache/beam/pull/11060#discussion_r393974676", "createdAt": "2020-03-17T21:14:35Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,108 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.core import DoFn\n+from apache_beam.transforms.core import Map\n+from apache_beam.transforms.core import ParDo\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.typehints import trivial_inference\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+__all__ = [\n+    'DeduplictaionWithinDuration',\n+]\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self, time_domain=TimeDomain.REAL_TIME, duration=Duration(10 * 60)):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTk4OA==", "bodyText": "Also, is it not possible to have both a real and watermark delay? This API forces you to do one or the other.\n\nCurrently the API only allows either watermark based or walltime based.  I'm not sure what kind of strategy we can do if allowing both. Do we want to do no matter which fires first, just clear another?", "url": "https://github.com/apache/beam/pull/11060#discussion_r394025988", "createdAt": "2020-03-17T23:21:48Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,108 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.core import DoFn\n+from apache_beam.transforms.core import Map\n+from apache_beam.transforms.core import ParDo\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.typehints import trivial_inference\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+__all__ = [\n+    'DeduplictaionWithinDuration',\n+]\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self, time_domain=TimeDomain.REAL_TIME, duration=Duration(10 * 60)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NDY3Ng=="}, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjA0NjE1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToxODowMFrOF3uaTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNTowNlrOF3xf6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NjM5OA==", "bodyText": "I would expose a DeduplicatePerKey transform which emits a single KV per key, and then have the generic Deduplicate build on that.", "url": "https://github.com/apache/beam/pull/11060#discussion_r393976398", "createdAt": "2020-03-17T21:18:00Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,108 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.core import DoFn\n+from apache_beam.transforms.core import Map\n+from apache_beam.transforms.core import ParDo\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.typehints import trivial_inference\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+__all__ = [\n+    'DeduplictaionWithinDuration',\n+]\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self, time_domain=TimeDomain.REAL_TIME, duration=Duration(10 * 60)):\n+    if time_domain not in (TimeDomain.WATERMARK, TimeDomain.REAL_TIME):\n+      raise ValueError(\n+          'Unsupported TimeDomain: %r. DeduplictaionWithinDuration'\n+          'expects TimeDomain.WATERMARK or TimeDomain.REAL_TIME' %\n+          (time_domain, ))\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True in seen_state.read():\n+          return\n+\n+        if domain == TimeDomain.REAL_TIME:\n+          expiry_timer.set(Timestamp.now() + duration)\n+        elif domain == TimeDomain.WATERMARK:\n+          expiry_timer.set(ts + duration)\n+        else:\n+          raise ValueError(\n+              'Unsupported TimeDomain: %r. DeduplictaionWithinDuration'\n+              'expects TimeDomain.WATERMARK or TimeDomain.REAL_TIME' %\n+              (domain, ))\n+        seen_state.add(True)\n+        value, _ = element\n+        yield value\n+\n+      def infer_output_type(self, input_type):\n+        key_type, _ = trivial_inference.key_value_types(input_type)\n+        return key_type\n+\n+      @userstate.on_timer(timer_spec)\n+      def process_timer(self, seen_state=DoFn.StateParam(state_spec)):\n+        seen_state.clear()\n+\n+    return DeduplicationFn()\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | 'KeyByElement' >> Map(lambda x: (x, None))\n+        | 'DeduplicateFn' >> ParDo(self._create_deduplicate_fn()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNjk4NQ==", "bodyText": "Are you suggesting that we provide both DeduplicatePerKey and Deduplicate which uses value as key?", "url": "https://github.com/apache/beam/pull/11060#discussion_r394026985", "createdAt": "2020-03-17T23:25:06Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,108 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.core import DoFn\n+from apache_beam.transforms.core import Map\n+from apache_beam.transforms.core import ParDo\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.typehints import trivial_inference\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+__all__ = [\n+    'DeduplictaionWithinDuration',\n+]\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self, time_domain=TimeDomain.REAL_TIME, duration=Duration(10 * 60)):\n+    if time_domain not in (TimeDomain.WATERMARK, TimeDomain.REAL_TIME):\n+      raise ValueError(\n+          'Unsupported TimeDomain: %r. DeduplictaionWithinDuration'\n+          'expects TimeDomain.WATERMARK or TimeDomain.REAL_TIME' %\n+          (time_domain, ))\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True in seen_state.read():\n+          return\n+\n+        if domain == TimeDomain.REAL_TIME:\n+          expiry_timer.set(Timestamp.now() + duration)\n+        elif domain == TimeDomain.WATERMARK:\n+          expiry_timer.set(ts + duration)\n+        else:\n+          raise ValueError(\n+              'Unsupported TimeDomain: %r. DeduplictaionWithinDuration'\n+              'expects TimeDomain.WATERMARK or TimeDomain.REAL_TIME' %\n+              (domain, ))\n+        seen_state.add(True)\n+        value, _ = element\n+        yield value\n+\n+      def infer_output_type(self, input_type):\n+        key_type, _ = trivial_inference.key_value_types(input_type)\n+        return key_type\n+\n+      @userstate.on_timer(timer_spec)\n+      def process_timer(self, seen_state=DoFn.StateParam(state_spec)):\n+        seen_state.clear()\n+\n+    return DeduplicationFn()\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | 'KeyByElement' >> Map(lambda x: (x, None))\n+        | 'DeduplicateFn' >> ParDo(self._create_deduplicate_fn()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3NjM5OA=="}, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjA1ODAwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMjoxMlrOF3uh2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNTozN1rOF3xrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODMyOA==", "bodyText": "Suppose one has values with timestamps 10, 1, 12, and duration 10. This will not properly deduplicate because the timer will fire at 11 clearing state before 12 gets seen.", "url": "https://github.com/apache/beam/pull/11060#discussion_r393978328", "createdAt": "2020-03-17T21:22:12Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,108 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.core import DoFn\n+from apache_beam.transforms.core import Map\n+from apache_beam.transforms.core import ParDo\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.typehints import trivial_inference\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+__all__ = [\n+    'DeduplictaionWithinDuration',\n+]\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self, time_domain=TimeDomain.REAL_TIME, duration=Duration(10 * 60)):\n+    if time_domain not in (TimeDomain.WATERMARK, TimeDomain.REAL_TIME):\n+      raise ValueError(\n+          'Unsupported TimeDomain: %r. DeduplictaionWithinDuration'\n+          'expects TimeDomain.WATERMARK or TimeDomain.REAL_TIME' %\n+          (time_domain, ))\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True in seen_state.read():\n+          return\n+\n+        if domain == TimeDomain.REAL_TIME:\n+          expiry_timer.set(Timestamp.now() + duration)\n+        elif domain == TimeDomain.WATERMARK:\n+          expiry_timer.set(ts + duration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTk2OA==", "bodyText": "Are you talking about the watermark case? yes the timer will be fires when the watermark advance to 11 if the timer is set by the value with timestamp 1", "url": "https://github.com/apache/beam/pull/11060#discussion_r394029968", "createdAt": "2020-03-17T23:35:37Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,108 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.core import DoFn\n+from apache_beam.transforms.core import Map\n+from apache_beam.transforms.core import ParDo\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.typehints import trivial_inference\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+__all__ = [\n+    'DeduplictaionWithinDuration',\n+]\n+\n+\n+class DeduplictaionWithinDuration(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates input records over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(\n+      self, time_domain=TimeDomain.REAL_TIME, duration=Duration(10 * 60)):\n+    if time_domain not in (TimeDomain.WATERMARK, TimeDomain.REAL_TIME):\n+      raise ValueError(\n+          'Unsupported TimeDomain: %r. DeduplictaionWithinDuration'\n+          'expects TimeDomain.WATERMARK or TimeDomain.REAL_TIME' %\n+          (time_domain, ))\n+    self.time_domain = time_domain\n+    self.duration = duration\n+\n+  def _create_deduplicate_fn(self):\n+    timer_spec = userstate.TimerSpec('expiry_timer', self.time_domain)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())\n+    duration = self.duration\n+    domain = self.time_domain\n+\n+    class DeduplicationFn(DoFn):\n+      def process(\n+          self,\n+          element,\n+          ts=DoFn.TimestampParam,\n+          seen_state=DoFn.StateParam(state_spec),\n+          expiry_timer=DoFn.TimerParam(timer_spec)):\n+        if True in seen_state.read():\n+          return\n+\n+        if domain == TimeDomain.REAL_TIME:\n+          expiry_timer.set(Timestamp.now() + duration)\n+        elif domain == TimeDomain.WATERMARK:\n+          expiry_timer.set(ts + duration)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODMyOA=="}, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjA1OTIwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMjo0M1rOF3uisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMjo0M1rOF3uisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODU0Nw==", "bodyText": "It's be a stronger test to add elements one at a time.", "url": "https://github.com/apache/beam/pull/11060#discussion_r393978547", "createdAt": "2020-03-17T21:22:43Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -448,6 +449,42 @@ def is_buffered_correctly(actual):\n \n       assert_that(actual, is_buffered_correctly)\n \n+  def test_deduplication_transform_with_processing_time(self):\n+    # Note that current FnApiRunner doesn't respect either real timestamp.\n+    with self.create_pipeline() as p:\n+      inputs = [\n+          window.TimestampedValue('value_1', 1),\n+          window.TimestampedValue('value_1', 2),\n+          window.TimestampedValue('value_1', 3)\n+      ]\n+      actual = (\n+          p\n+          | beam.Create(inputs)\n+          | beam.WindowInto(window.FixedWindows(10))\n+          | DeduplictaionWithinDuration(duration=timestamp.Duration(5)))\n+      assert_that(actual, equal_to(['value_1']))\n+\n+  @unittest.skip('TestStream not yet supported')\n+  def test_deduplication_transform_with_event_time(self):\n+    test_stream = (\n+        TestStream().advance_watermark_to(0).add_elements([\n+            window.TimestampedValue('value_1', 1),\n+            window.TimestampedValue('value_1', 2),\n+            window.TimestampedValue('value_1', 10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c44dc083dea1934294ba71e571dbe97c54e710"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODk5ODQyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0MToyNFrOF6TLcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowNjozOVrOF9DM4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NTk1NA==", "bodyText": "Perhaps this should be a combining state?", "url": "https://github.com/apache/beam/pull/11060#discussion_r396675954", "createdAt": "2020-03-23T18:41:24Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,133 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import typing\n+\n+from apache_beam import typehints\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import core\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.utils import timestamp\n+\n+__all__ = [\n+    'Deduplicate',\n+    'DeduplicatePerKey',\n+]\n+\n+K = typing.TypeVar('K')\n+V = typing.TypeVar('V')\n+\n+\n+@typehints.with_input_types(typing.Tuple[K, V])\n+@typehints.with_output_types(typing.Tuple[K, V])\n+class DeduplicatePerKey(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates <key, value> pair over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(self, processing_time_duration=None, event_time_duration=None):\n+    if processing_time_duration is None and event_time_duration is None:\n+      raise ValueError(\n+          'DeduplicatePerKey requires at lease provide either'\n+          'processing_time_duration or event_time_duration.')\n+    self.processing_time_duration = processing_time_duration\n+    self.event_time_duration = event_time_duration\n+\n+  def _create_deduplicate_fn(self):\n+    processing_timer_spec = userstate.TimerSpec(\n+        'processing_timer', TimeDomain.REAL_TIME)\n+    event_timer_spec = userstate.TimerSpec('event_timer', TimeDomain.WATERMARK)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51611d387b547ea8856f8502181c7567f9bba57b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0Nzc2OQ==", "bodyText": "The seen_state is only set once per key during that duration. I'm not sure whether combining state is more suitable here. What do you think?", "url": "https://github.com/apache/beam/pull/11060#discussion_r396747769", "createdAt": "2020-03-23T20:49:58Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,133 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import typing\n+\n+from apache_beam import typehints\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import core\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.utils import timestamp\n+\n+__all__ = [\n+    'Deduplicate',\n+    'DeduplicatePerKey',\n+]\n+\n+K = typing.TypeVar('K')\n+V = typing.TypeVar('V')\n+\n+\n+@typehints.with_input_types(typing.Tuple[K, V])\n+@typehints.with_output_types(typing.Tuple[K, V])\n+class DeduplicatePerKey(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates <key, value> pair over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(self, processing_time_duration=None, event_time_duration=None):\n+    if processing_time_duration is None and event_time_duration is None:\n+      raise ValueError(\n+          'DeduplicatePerKey requires at lease provide either'\n+          'processing_time_duration or event_time_duration.')\n+    self.processing_time_duration = processing_time_duration\n+    self.event_time_duration = event_time_duration\n+\n+  def _create_deduplicate_fn(self):\n+    processing_timer_spec = userstate.TimerSpec(\n+        'processing_timer', TimeDomain.REAL_TIME)\n+    event_timer_spec = userstate.TimerSpec('event_timer', TimeDomain.WATERMARK)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NTk1NA=="}, "originalCommit": {"oid": "51611d387b547ea8856f8502181c7567f9bba57b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTkwNg==", "bodyText": "To follow up from what we discussed off-line, I think combining state semantically makes slightly more sense here, but as we're not adding to the state unless it's the first element there's no performance concerns, and I'm also fine with this as is.", "url": "https://github.com/apache/beam/pull/11060#discussion_r399559906", "createdAt": "2020-03-27T22:06:39Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,133 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import typing\n+\n+from apache_beam import typehints\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import core\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.utils import timestamp\n+\n+__all__ = [\n+    'Deduplicate',\n+    'DeduplicatePerKey',\n+]\n+\n+K = typing.TypeVar('K')\n+V = typing.TypeVar('V')\n+\n+\n+@typehints.with_input_types(typing.Tuple[K, V])\n+@typehints.with_output_types(typing.Tuple[K, V])\n+class DeduplicatePerKey(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates <key, value> pair over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within\n+  a runner and care might need to be used to ensure that the deduplication time\n+  limit is long enough to remove duplicates but short enough to not cause\n+  performance problems within a runner. Each runner may provide an optimized\n+  implementation of their choice using the deduplication time domain and\n+  threshold specified.\n+\n+  Does not preserve any order the input PCollection might have had.\n+  \"\"\"\n+  def __init__(self, processing_time_duration=None, event_time_duration=None):\n+    if processing_time_duration is None and event_time_duration is None:\n+      raise ValueError(\n+          'DeduplicatePerKey requires at lease provide either'\n+          'processing_time_duration or event_time_duration.')\n+    self.processing_time_duration = processing_time_duration\n+    self.event_time_duration = event_time_duration\n+\n+  def _create_deduplicate_fn(self):\n+    processing_timer_spec = userstate.TimerSpec(\n+        'processing_timer', TimeDomain.REAL_TIME)\n+    event_timer_spec = userstate.TimerSpec('event_timer', TimeDomain.WATERMARK)\n+    state_spec = userstate.BagStateSpec('seen', BooleanCoder())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NTk1NA=="}, "originalCommit": {"oid": "51611d387b547ea8856f8502181c7567f9bba57b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTAwNjg4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0MzozN1rOF6TQhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDozODo0OFrOF6XN0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzI1NA==", "bodyText": "Is it not possible to sickbay it for only dataflow?", "url": "https://github.com/apache/beam/pull/11060#discussion_r396677254", "createdAt": "2020-03-23T18:43:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate_test.py", "diffHunk": "@@ -0,0 +1,168 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Unit tests for deduplicate transform by using TestStream.\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+from nose.plugins.attrib import attr\n+\n+import apache_beam as beam\n+from apache_beam.coders import coders\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.test_stream import TestStream\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+from apache_beam.testing.util import equal_to_per_window\n+from apache_beam.transforms import deduplicate\n+from apache_beam.transforms import window\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+# TestStream is only supported in streaming pipeline. The Deduplicate transform\n+# also requires Timer support. Sickbaying this testsuite until dataflow runner\n+# supports both TestStream and user timer.\n+@attr('ValidatesRunner', 'sickbay-batch', 'sickbay-streaming')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51611d387b547ea8856f8502181c7567f9bba57b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjA5Nw==", "bodyText": "The  'sickbay-batch' and 'sickbay-streaming' is only used by dataflow suite now. And unfortunately, I don't we have runners supporting these python test now.", "url": "https://github.com/apache/beam/pull/11060#discussion_r396742097", "createdAt": "2020-03-23T20:38:48Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/deduplicate_test.py", "diffHunk": "@@ -0,0 +1,168 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Unit tests for deduplicate transform by using TestStream.\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+from nose.plugins.attrib import attr\n+\n+import apache_beam as beam\n+from apache_beam.coders import coders\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.test_stream import TestStream\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+from apache_beam.testing.util import equal_to_per_window\n+from apache_beam.transforms import deduplicate\n+from apache_beam.transforms import window\n+from apache_beam.utils.timestamp import Duration\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+# TestStream is only supported in streaming pipeline. The Deduplicate transform\n+# also requires Timer support. Sickbaying this testsuite until dataflow runner\n+# supports both TestStream and user timer.\n+@attr('ValidatesRunner', 'sickbay-batch', 'sickbay-streaming')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NzI1NA=="}, "originalCommit": {"oid": "51611d387b547ea8856f8502181c7567f9bba57b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTAyODI1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0OToyNVrOF6Tdrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0OToyNVrOF6Tdrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDYyMg==", "bodyText": "I might phrase this as \"Time durations are required so as to avoid unbounded memory and/or storage requirements on the runner...\"", "url": "https://github.com/apache/beam/pull/11060#discussion_r396680622", "createdAt": "2020-03-23T18:49:25Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,133 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import typing\n+\n+from apache_beam import typehints\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import core\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.utils import timestamp\n+\n+__all__ = [\n+    'Deduplicate',\n+    'DeduplicatePerKey',\n+]\n+\n+K = typing.TypeVar('K')\n+V = typing.TypeVar('V')\n+\n+\n+@typehints.with_input_types(typing.Tuple[K, V])\n+@typehints.with_output_types(typing.Tuple[K, V])\n+class DeduplicatePerKey(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates <key, value> pair over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.\n+\n+  The durations specified may impose memory and/or storage requirements within", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51611d387b547ea8856f8502181c7567f9bba57b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTAyOTM5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/deduplicate.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0OTo0NlrOF6TeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0OTo0NlrOF6TeXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MDc5OQ==", "bodyText": "It's not really best effort, rather it is only respected within the time domains (and there you can count on it).", "url": "https://github.com/apache/beam/pull/11060#discussion_r396680799", "createdAt": "2020-03-23T18:49:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/deduplicate.py", "diffHunk": "@@ -0,0 +1,133 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"a collection of ptransforms for deduplicating elements.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import typing\n+\n+from apache_beam import typehints\n+from apache_beam.coders.coders import BooleanCoder\n+from apache_beam.transforms import core\n+from apache_beam.transforms import ptransform\n+from apache_beam.transforms import userstate\n+from apache_beam.transforms.timeutil import TimeDomain\n+from apache_beam.utils import timestamp\n+\n+__all__ = [\n+    'Deduplicate',\n+    'DeduplicatePerKey',\n+]\n+\n+K = typing.TypeVar('K')\n+V = typing.TypeVar('V')\n+\n+\n+@typehints.with_input_types(typing.Tuple[K, V])\n+@typehints.with_output_types(typing.Tuple[K, V])\n+class DeduplicatePerKey(ptransform.PTransform):\n+  \"\"\" A PTransform which deduplicates <key, value> pair over a time domain and\n+  threshold. Values in different windows will NOT be considered duplicates of\n+  each other. Deduplication is best effort.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51611d387b547ea8856f8502181c7567f9bba57b"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1800, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}