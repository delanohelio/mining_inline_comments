{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NTEyNDYw", "number": 12352, "title": "[BEAM-10549] Improve runtime type checking performance for the Python SDK", "bodyText": "This PR creates a new flag, performance_runtime_type_check which provides faster runtime type checking by sampling values.\nTests and documentation have been added to reflect this change.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-23T06:49:22Z", "url": "https://github.com/apache/beam/pull/12352", "merged": true, "mergeCommit": {"oid": "c9bed1e2485934171610d26d32a4807c3656dc30"}, "closed": true, "closedAt": "2020-08-21T21:23:29Z", "author": {"login": "saavannanavati"}, "timelineItems": {"totalCount": 110, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAiDA7ABqjM2NzI1NzkzNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBLnbhgFqTQ3MjgyNjcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd1f3918337f70e3286202c7203e4b0de0a0f03d", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/fd1f3918337f70e3286202c7203e4b0de0a0f03d", "committedDate": "2020-08-19T20:27:56Z", "message": "Use cleaner syntax"}, "afterCommit": {"oid": "68b4ce8c8ed13fa446036a0b520e871ff0739c33", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/68b4ce8c8ed13fa446036a0b520e871ff0739c33", "committedDate": "2020-08-19T20:55:23Z", "message": "Rebase onto master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dc13b010de56971bfb0e2ef898518b1b84da5b7", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/1dc13b010de56971bfb0e2ef898518b1b84da5b7", "committedDate": "2020-08-19T21:40:40Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e85777a7e7b984e7a11ab2b6ced70a65f0df4331", "author": {"user": {"login": "robertwb", "name": "Robert Bradshaw"}}, "url": "https://github.com/apache/beam/commit/e85777a7e7b984e7a11ab2b6ced70a65f0df4331", "committedDate": "2020-08-19T23:09:30Z", "message": "Remove unneeded code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61f94fd9a864ec5b4159026d0e697c43e1a94535", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/61f94fd9a864ec5b4159026d0e697c43e1a94535", "committedDate": "2020-08-20T03:01:23Z", "message": "Fix snippets bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e07a9f88cc3ff4bb93a65c8e470af58bd59ea1e", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/5e07a9f88cc3ff4bb93a65c8e470af58bd59ea1e", "committedDate": "2020-08-20T06:11:57Z", "message": "Remove accidental changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a23ea8bcf2fd20a826cceae0f3b6abb761be26dd", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a23ea8bcf2fd20a826cceae0f3b6abb761be26dd", "committedDate": "2020-08-20T16:55:56Z", "message": "Add TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0bd248b35fa3fa4baa1afd7d4f2b359c75d4850", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/c0bd248b35fa3fa4baa1afd7d4f2b359c75d4850", "committedDate": "2020-08-21T00:49:00Z", "message": "Remove expensive isinstance check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f396eb10074d487c4edffe5a859fdc843a8501bd", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f396eb10074d487c4edffe5a859fdc843a8501bd", "committedDate": "2020-08-21T03:09:55Z", "message": "Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9314c3dfb425d5f83a6633c8287af7d88bcc52a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e9314c3dfb425d5f83a6633c8287af7d88bcc52a", "committedDate": "2020-08-21T04:18:08Z", "message": "Fix TODO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODI2NzEz", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-472826713", "createdAt": "2020-08-21T21:23:11Z", "commit": {"oid": "e9314c3dfb425d5f83a6633c8287af7d88bcc52a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzI5Nzg3", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-454329787", "createdAt": "2020-07-23T17:03:39Z", "commit": {"oid": "0d8c8c3fc3f1e5913109bc1d92bcc3e6d4a1a8b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzowMzozOVrOG2TmRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzowMzozOVrOG2TmRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5NzM4MA==", "bodyText": "You can just do if consumers here.\nAs discussed, there may be more than one consumer, so worth thinking about what to do in that case.", "url": "https://github.com/apache/beam/pull/12352#discussion_r459597380", "createdAt": "2020-07-23T17:03:39Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -202,6 +205,17 @@ def __init__(\n     self._sample_counter = 0\n     self._next_sample = 0\n \n+    if consumers and len(consumers):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8c8c3fc3f1e5913109bc1d92bcc3e6d4a1a8b9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMzU2MDk3", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-460356097", "createdAt": "2020-08-03T21:34:26Z", "commit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozNDoyNlrOG7JeJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTo1NzozMFrOG7KCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NDM0Mg==", "bodyText": "This check is slow. Let's guard this or remove it (as it will still fail below).", "url": "https://github.com/apache/beam/pull/12352#discussion_r464674342", "createdAt": "2020-08-03T21:34:26Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -1340,6 +1342,17 @@ def process_outputs(\n         self.per_element_output_counter.add_input(0)\n       return\n \n+    if isinstance(results, (dict, str, unicode, bytes)):\n+      results_type = type(results).__name__\n+      raise TypeCheckError(\n+          'Returning a %s from a ParDo or FlatMap is '\n+          'discouraged. Please use list(\"%s\") if you really '\n+          'want this behavior.' % (results_type, results))\n+    elif not isinstance(results, collections.Iterable):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTU2Ng==", "bodyText": "This should say \"only supported with portable runners (including the direct runner).\"", "url": "https://github.com/apache/beam/pull/12352#discussion_r464675566", "createdAt": "2020-08-03T21:37:26Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -466,6 +466,13 @@ def _add_argparse_args(cls, parser):\n         help='Enable type checking at pipeline execution '\n         'time. NOTE: only supported with the '\n         'DirectRunner')\n+    parser.add_argument(\n+        '--performance_runtime_type_check',\n+        default=False,\n+        action='store_true',\n+        help='Enable faster type checking via sampling at pipeline execution '\n+        'time. NOTE: only supported with the '", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NzMzMQ==", "bodyText": "Generally it's preferable not to pass something big like self, but rather just the subset of information that's required here (e.g. the dict of type hint sources to type hints). This will also be needed for the cases that different outputs have different types.", "url": "https://github.com/apache/beam/pull/12352#discussion_r464677331", "createdAt": "2020-08-03T21:41:41Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -188,7 +188,8 @@ def __init__(self,\n             self.name_context.step_name,\n             0,\n             next(iter(itervalues(consumers))),\n-            self.windowed_coder)\n+            self.windowed_coder,\n+            self)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3OTEwNg==", "bodyText": "Where is this used?", "url": "https://github.com/apache/beam/pull/12352#discussion_r464679106", "createdAt": "2020-08-03T21:46:12Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/operations.py", "diffHunk": "@@ -238,6 +247,7 @@ def __init__(self,\n     self.execution_context = None  # type: Optional[ExecutionContext]\n     self.consumers = collections.defaultdict(\n         list)  # type: DefaultDict[int, List[Operation]]\n+    self.producer = None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MDY0NA==", "bodyText": "What if this transform has a type hint and the DoFn itself has a type hint? Will we check both?\nI would probably create the dictionary of {type hint source string: type hint} right here, pre-packaged and ready to be used directly from the worker.", "url": "https://github.com/apache/beam/pull/12352#discussion_r464680644", "createdAt": "2020-08-03T21:50:04Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,71 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo):\n+      if not self._in_combine:\n+        transform.fn._full_label = applied_transform.full_label\n+        self.store_type_hints(transform)\n+\n+  def store_type_hints(self, transform):\n+    type_hints = transform.get_type_hints()\n+\n+    input_types = None\n+    if type_hints.input_types:\n+      normal_hints, kwarg_hints = type_hints.input_types\n+\n+      if kwarg_hints:\n+        input_types = kwarg_hints\n+      if normal_hints:\n+        input_types = normal_hints\n+\n+    output_types = None\n+    if type_hints.output_types:\n+      normal_hints, kwarg_hints = type_hints.output_types\n+\n+      if kwarg_hints:\n+        output_types = kwarg_hints\n+      if normal_hints:\n+        output_types = normal_hints\n+\n+    try:\n+      argspec = inspect.getfullargspec(transform.fn._process_argspec_fn())\n+      if len(argspec.args):\n+        arg_index = 0\n+        if argspec.args[0] == 'self':\n+          arg_index = 1\n+        transform.fn._runtime_parameter_name = argspec.args[arg_index]\n+        if isinstance(input_types, dict):\n+          input_types = (input_types[argspec.args[arg_index]], )\n+    except TypeError:\n+      pass\n+\n+    if input_types and len(input_types):\n+      input_types = input_types[0]\n+\n+    if output_types and len(output_types):\n+      output_types = output_types[0]\n+\n+    transform.fn._runtime_type_hints = type_hints._replace(\n+        input_types=input_types, output_types=output_types)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MTA1Ng==", "bodyText": "Why is this Python 3 only? (Not that Python 2 is going to be around for long...)", "url": "https://github.com/apache/beam/pull/12352#discussion_r464681056", "createdAt": "2020-08-03T21:51:04Z", "author": {"login": "robertwb"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -210,7 +210,21 @@ However, if you enable runtime type checking, the code is guaranteed to fail at\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test.py\" type_hints_runtime_on >}}\n {{< /highlight >}}\n \n-Note that because runtime type checks are done for each `PCollection` element, enabling this feature may incur a significant performance penalty. It is therefore recommended that runtime type checks are disabled for production pipelines.\n+Note that because runtime type checks are done for each `PCollection` element, enabling this feature may incur a significant performance penalty. It is therefore recommended that runtime type checks are disabled for production pipelines. See the following section for a quicker, production-friendly alternative.\n+\n+### Faster Runtime Type Checking\n+You can enable faster, sampling-based runtime type checking by setting the pipeline option `performance_runtime_type_check` to `True`.\n+\n+The is a Python 3 only feature that works by runtime type checking a small subset of values, called a sample, using optimized Cython code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MTMwOA==", "bodyText": "Rather than enumerating the transforms here, I would just say that it doesn't run on combining operations.", "url": "https://github.com/apache/beam/pull/12352#discussion_r464681308", "createdAt": "2020-08-03T21:51:41Z", "author": {"login": "robertwb"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -210,7 +210,21 @@ However, if you enable runtime type checking, the code is guaranteed to fail at\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test.py\" type_hints_runtime_on >}}\n {{< /highlight >}}\n \n-Note that because runtime type checks are done for each `PCollection` element, enabling this feature may incur a significant performance penalty. It is therefore recommended that runtime type checks are disabled for production pipelines.\n+Note that because runtime type checks are done for each `PCollection` element, enabling this feature may incur a significant performance penalty. It is therefore recommended that runtime type checks are disabled for production pipelines. See the following section for a quicker, production-friendly alternative.\n+\n+### Faster Runtime Type Checking\n+You can enable faster, sampling-based runtime type checking by setting the pipeline option `performance_runtime_type_check` to `True`.\n+\n+The is a Python 3 only feature that works by runtime type checking a small subset of values, called a sample, using optimized Cython code.\n+\n+Currently, this feature does not support runtime type checking for side inputs or combine operations. Specifically, this feature will not runtime type check the following transforms:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MTc3MA==", "bodyText": "Why not?", "url": "https://github.com/apache/beam/pull/12352#discussion_r464681770", "createdAt": "2020-08-03T21:52:49Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -520,10 +520,26 @@ def run(self, test_runner_api='AUTO'):\n             self._options,\n             allow_proto_holders=True).run(False)\n \n+      if (self._options.view_as(TypeOptions).runtime_type_check and\n+          self._options.view_as(TypeOptions).performance_runtime_type_check):\n+        raise RuntimeError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MzMzNg==", "bodyText": "Move this logic into the visitor, rather than doing graph inspection on the workers. This will also allow us to consolidate all type checks into a single dict, rather than having redundant code for producer/consumer.", "url": "https://github.com/apache/beam/pull/12352#discussion_r464683336", "createdAt": "2020-08-03T21:56:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -202,6 +209,37 @@ def __init__(\n     self._sample_counter = 0\n     self._next_sample = 0\n \n+    self.producer_type_hints = None\n+    self.producer_full_label = None\n+    self.producer_parameter_name = None\n+\n+    if producer and hasattr(producer, 'spec') and hasattr(producer.spec,\n+                                                          'serialized_fn'):\n+      fns = pickler.loads(producer.spec.serialized_fn)\n+      if fns:\n+        if hasattr(fns[0], '_runtime_type_hints'):\n+          self.producer_type_hints = fns[0]._runtime_type_hints\n+        if hasattr(fns[0], '_full_label'):\n+          self.producer_full_label = fns[0]._full_label\n+        if hasattr(fns[0], '_runtime_parameter_name'):\n+          self.producer_parameter_name = fns[0]._runtime_parameter_name\n+\n+    self.consumer_type_hints = []\n+    self.consumer_full_labels = []\n+    self.consumer_parameter_names = []\n+\n+    if consumers:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MzYxNA==", "bodyText": "This logic belongs in the ParDoOperator (which I think already has a deserialized fn in hand).", "url": "https://github.com/apache/beam/pull/12352#discussion_r464683614", "createdAt": "2020-08-03T21:57:30Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -202,6 +209,37 @@ def __init__(\n     self._sample_counter = 0\n     self._next_sample = 0\n \n+    self.producer_type_hints = None\n+    self.producer_full_label = None\n+    self.producer_parameter_name = None\n+\n+    if producer and hasattr(producer, 'spec') and hasattr(producer.spec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTI5ODgy", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-462929882", "createdAt": "2020-08-06T22:59:04Z", "commit": {"oid": "108e86960028af97e8b5d725e26593df77f0abc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1OTowNFrOG9G6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1OTowNFrOG9G6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyOTU5OQ==", "bodyText": "This should just be None (or better, omitted) for operations without specs. We should probably just have a method on ParDoOperation to extract the type hints  as this is the one case we support.", "url": "https://github.com/apache/beam/pull/12352#discussion_r466729599", "createdAt": "2020-08-06T22:59:04Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -188,7 +189,8 @@ def __init__(self,\n             self.name_context.step_name,\n             0,\n             next(iter(itervalues(consumers))),\n-            self.windowed_coder)\n+            self.windowed_coder,\n+            get_perf_runtime_type_hints(self))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "108e86960028af97e8b5d725e26593df77f0abc5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTUzMDEx", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-462953011", "createdAt": "2020-08-06T23:59:34Z", "commit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzo1OTozNFrOG9IBAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzo1OTozNFrOG9IBAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0NzY0OA==", "bodyText": "TODO: During graph construction, don't add any None constraints. This will allow us to remove this check", "url": "https://github.com/apache/beam/pull/12352#discussion_r466747648", "createdAt": "2020-08-06T23:59:34Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -224,8 +230,25 @@ def _observable_callback_inner(value, is_encoded=False):\n \n     return _observable_callback_inner\n \n+  def type_check(self, value):\n+    # type: (any, bool) -> None\n+    for transform_label, type_constraint_tuple in self.output_type_constraints.items():\n+      parameter_name, constraint = type_constraint_tuple\n+      if constraint is not None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDU3NDAz", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-464457403", "createdAt": "2020-08-10T18:05:06Z", "commit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowNTowNlrOG-Zmmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoxODowMFrOG-aBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NDM3OA==", "bodyText": "Not yet resolved?", "url": "https://github.com/apache/beam/pull/12352#discussion_r468084378", "createdAt": "2020-08-10T18:05:06Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -1340,6 +1342,17 @@ def process_outputs(\n         self.per_element_output_counter.add_input(0)\n       return\n \n+    if isinstance(results, (dict, str, unicode, bytes)):\n+      results_type = type(results).__name__\n+      raise TypeCheckError(\n+          'Returning a %s from a ParDo or FlatMap is '\n+          'discouraged. Please use list(\"%s\") if you really '\n+          'want this behavior.' % (results_type, results))\n+    elif not isinstance(results, collections.Iterable):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NDM0Mg=="}, "originalCommit": {"oid": "6177c9b164ec15879d34bb1f3236faa31a2edd0b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTU0Mw==", "bodyText": "I don't think we want to mess with this. (Also, if we do, let's push this logic up into the visitor where we decide the label.)", "url": "https://github.com/apache/beam/pull/12352#discussion_r468085543", "createdAt": "2020-08-10T18:07:11Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -224,8 +230,25 @@ def _observable_callback_inner(value, is_encoded=False):\n \n     return _observable_callback_inner\n \n+  def type_check(self, value):\n+    # type: (any, bool) -> None\n+    for transform_label, type_constraint_tuple in self.output_type_constraints.items():\n+      parameter_name, constraint = type_constraint_tuple\n+      if constraint is not None:\n+        try:\n+          _check_instance_type(constraint, value, parameter_name, verbose=True)\n+        except TypeCheckError as e:\n+          if not transform_label.startswith('ParDo'):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTcxOQ==", "bodyText": "Yes, please do that.", "url": "https://github.com/apache/beam/pull/12352#discussion_r468085719", "createdAt": "2020-08-10T18:07:32Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -224,8 +230,25 @@ def _observable_callback_inner(value, is_encoded=False):\n \n     return _observable_callback_inner\n \n+  def type_check(self, value):\n+    # type: (any, bool) -> None\n+    for transform_label, type_constraint_tuple in self.output_type_constraints.items():\n+      parameter_name, constraint = type_constraint_tuple\n+      if constraint is not None:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0NzY0OA=="}, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4ODkwMw==", "bodyText": "This isn't correct, these type hints should not be used for this counter. Make this an optional argument defaulting to None and don't pass it here.", "url": "https://github.com/apache/beam/pull/12352#discussion_r468088903", "createdAt": "2020-08-10T18:13:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/operations.py", "diffHunk": "@@ -600,7 +627,8 @@ def _read_side_inputs(self, tags_and_types):\n           self.name_context.step_name,\n           view_options['coder'],\n           i,\n-          suffix='side-input')\n+          suffix='side-input',\n+          producer_type_hints=get_perf_runtime_type_hints(self))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4OTk1MA==", "bodyText": "Why could this fail?", "url": "https://github.com/apache/beam/pull/12352#discussion_r468089950", "createdAt": "2020-08-10T18:15:31Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +269,95 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {\n+          applied_transform.full_label: self.get_output_type_hints(transform)\n+      }\n+\n+      # Store input type hints in producer transform\n+      producer = applied_transform.inputs[0].producer\n+      if (hasattr(producer, 'transform') and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MDcyOA==", "bodyText": "Cleaner to check isinstance(transform, core.ParDo).\nEven better would be to add a method like _add_producer_type_constraint to PTransform, default implementation empty, overridden in ParDo.", "url": "https://github.com/apache/beam/pull/12352#discussion_r468090728", "createdAt": "2020-08-10T18:16:55Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +269,95 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {\n+          applied_transform.full_label: self.get_output_type_hints(transform)\n+      }\n+\n+      # Store input type hints in producer transform\n+      producer = applied_transform.inputs[0].producer\n+      if (hasattr(producer, 'transform') and\n+          hasattr(producer.transform, 'fn') and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MDk4MQ==", "bodyText": "We would want to add this regardless of the dict already being present, right? Perhaps with the above method that'd be simpler.", "url": "https://github.com/apache/beam/pull/12352#discussion_r468090981", "createdAt": "2020-08-10T18:17:26Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +269,95 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {\n+          applied_transform.full_label: self.get_output_type_hints(transform)\n+      }\n+\n+      # Store input type hints in producer transform\n+      producer = applied_transform.inputs[0].producer\n+      if (hasattr(producer, 'transform') and\n+          hasattr(producer.transform, 'fn') and\n+          hasattr(producer.transform.fn, '_runtime_output_constraints')):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MTI2OA==", "bodyText": "Style: in Beam we avoid backslash line brakes. You can use yapf to break your lines for you. (If needed, add ()'s)>", "url": "https://github.com/apache/beam/pull/12352#discussion_r468091268", "createdAt": "2020-08-10T18:18:00Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +269,95 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {\n+          applied_transform.full_label: self.get_output_type_hints(transform)\n+      }\n+\n+      # Store input type hints in producer transform\n+      producer = applied_transform.inputs[0].producer\n+      if (hasattr(producer, 'transform') and\n+          hasattr(producer.transform, 'fn') and\n+          hasattr(producer.transform.fn, '_runtime_output_constraints')):\n+        producer = producer.transform.fn\n+        producer._runtime_output_constraints[applied_transform.full_label] \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e22b0a2685e29bc56d38d03c77808a52530e96"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTQ3NDk5", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-467947499", "createdAt": "2020-08-15T04:44:30Z", "commit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNDo0NDozMFrOHBHvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNToxMTo1MlrOHBH3Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNzM5Ng==", "bodyText": "Why this change? Is encoded actually a list sometimes? (In which case, how did it ever pass?)", "url": "https://github.com/apache/beam/pull/12352#discussion_r470937396", "createdAt": "2020-08-15T04:44:30Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/examples/snippets/snippets.py", "diffHunk": "@@ -689,8 +689,9 @@ def examples_wordcount_streaming(argv):\n \n     output = (\n         lines\n-        | 'DecodeUnicode' >>\n-        beam.FlatMap(lambda encoded: encoded.decode('utf-8'))\n+        | 'DecodeUnicode' >> beam.FlatMap(\n+            lambda encoded:\n+            (encoded if isinstance(encoded, list) else encoded.decode('utf-8')))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNzYwNg==", "bodyText": "This seems incorrect for Map(...) or Composite/ParDo(...). I don't think we should add a ParDo(...) if it's not already there (in which case we could drop this whole try-catch).", "url": "https://github.com/apache/beam/pull/12352#discussion_r470937606", "createdAt": "2020-08-15T04:47:21Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -224,8 +230,25 @@ def _observable_callback_inner(value, is_encoded=False):\n \n     return _observable_callback_inner\n \n+  def type_check(self, value):\n+    # type: (any, bool) -> None\n+    for transform_label, type_constraint_tuple in (\n+            self.output_type_constraints.items()):\n+      parameter_name, constraint = type_constraint_tuple\n+      try:\n+        _check_instance_type(constraint, value, parameter_name, verbose=True)\n+      except TypeCheckError as e:\n+        if not transform_label.startswith('ParDo'):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNzk2NQ==", "bodyText": "Omit this line. Different operations could choose to store them in different places (e.g. not all operations even have a serialized_fn).\nAlso, the line about \"This is only overridden by DoOperation's.\" is liable to go out of date (but unlikely to be updated) if we provide this anywhere else, and isn't important to this interface, so can be removed as well.\nWhat you might want to document, however, is the type of the return value.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470937965", "createdAt": "2020-08-15T04:52:23Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/operations.py", "diffHunk": "@@ -452,6 +476,14 @@ def str_internal(self, is_recursive=False):\n \n     return '<%s %s>' % (printable_name, ', '.join(printable_fields))\n \n+  def _get_runtime_performance_hints(self):\n+    \"\"\"Returns any type hints required for performance runtime type-checking.\n+    These type hints are stored in the operation's spec's serialized_fn.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzODMxOQ==", "bodyText": "Likewise, omit this comment about ParDo.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470938319", "createdAt": "2020-08-15T04:57:05Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/ptransform.py", "diffHunk": "@@ -702,6 +702,14 @@ def to_runner_api_pickled(self, unused_context):\n   def runner_api_requires_keyed_input(self):\n     return False\n \n+  def _add_type_constraint_from_consumer(self, full_label, input_type_hints):\n+    \"\"\"Adds a consumer transform's input type hints to our output type\n+    constraints, which is used during performance runtime type-checking.\n+\n+    This is only overridden by ParDo's.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzODUwMw==", "bodyText": "gettattr doesn't add the value if it's not present, you'll have to do\nif not hasattr(...):\n    self.fn._runtime_output_constraints = {}\nself.fn._runtime_output_constraints[...] = ...\n\n(I think this should be caught by tests, could you be sure you have a test that fails before fixing this?)", "url": "https://github.com/apache/beam/pull/12352#discussion_r470938503", "createdAt": "2020-08-15T04:59:32Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -1465,6 +1465,11 @@ def get_restriction_coder(self):\n     from apache_beam.runners.common import DoFnSignature\n     return DoFnSignature(self.fn).get_restriction_coder()\n \n+  def _add_type_constraint_from_consumer(self, full_label, input_type_hints):\n+    output_constraints = getattr(self.fn, '_runtime_output_constraints', {})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzODYwMQ==", "bodyText": "Oh, I see you do it here. I think the logic would be clearer as above.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470938601", "createdAt": "2020-08-15T05:00:35Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -1465,6 +1465,11 @@ def get_restriction_coder(self):\n     from apache_beam.runners.common import DoFnSignature\n     return DoFnSignature(self.fn).get_restriction_coder()\n \n+  def _add_type_constraint_from_consumer(self, full_label, input_type_hints):\n+    output_constraints = getattr(self.fn, '_runtime_output_constraints', {})\n+    output_constraints[full_label] = input_type_hints\n+    self.fn._runtime_output_constraints = output_constraints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzODY3OQ==", "bodyText": "You're recording that the type hint comes from this transform, but are you recording that it comes from the input of this transform? (E.g. if I get a failure about transform B's type hint being violated, it may not be clear if it was its input type or output type that was bad.)", "url": "https://github.com/apache/beam/pull/12352#discussion_r470938679", "createdAt": "2020-08-15T05:01:58Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -1465,6 +1465,11 @@ def get_restriction_coder(self):\n     from apache_beam.runners.common import DoFnSignature\n     return DoFnSignature(self.fn).get_restriction_coder()\n \n+  def _add_type_constraint_from_consumer(self, full_label, input_type_hints):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzODc2OA==", "bodyText": "This will overwrite any typehint constraints that may have been set earlier. Instead, use the same method.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470938768", "createdAt": "2020-08-15T05:03:00Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Prefix label with 'ParDo' if necessary\n+      full_label = applied_transform.full_label\n+      if not full_label.startswith('ParDo'):\n+        full_label = 'ParDo(%s)' % full_label\n+\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzODc5OQ==", "bodyText": "Don't add this prefix.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470938799", "createdAt": "2020-08-15T05:03:26Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Prefix label with 'ParDo' if necessary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzODg0Ng==", "bodyText": "Nit: move this line into the if block.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470938846", "createdAt": "2020-08-15T05:04:19Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Prefix label with 'ParDo' if necessary\n+      full_label = applied_transform.full_label\n+      if not full_label.startswith('ParDo'):\n+        full_label = 'ParDo(%s)' % full_label\n+\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {}\n+      output_type_hints = self.get_output_type_hints(transform)\n+      if output_type_hints:\n+        transform.fn._runtime_output_constraints[full_label] = (\n+            output_type_hints)\n+\n+      # Store input type hints in producer transform\n+      producer = applied_transform.inputs[0].producer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzOTIzMQ==", "bodyText": "This does not need to be guarded by if isinstance(transform, core.ParDo), we can do it for all transforms. (Actually, the same could be said of the output type hints if we eliminated the direct access to _runtime_output_constraints as mentioned above.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470939231", "createdAt": "2020-08-15T05:09:14Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Prefix label with 'ParDo' if necessary\n+      full_label = applied_transform.full_label\n+      if not full_label.startswith('ParDo'):\n+        full_label = 'ParDo(%s)' % full_label\n+\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {}\n+      output_type_hints = self.get_output_type_hints(transform)\n+      if output_type_hints:\n+        transform.fn._runtime_output_constraints[full_label] = (\n+            output_type_hints)\n+\n+      # Store input type hints in producer transform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzOTI4NQ==", "bodyText": "Also visit this transform to get its typehints, if any?", "url": "https://github.com/apache/beam/pull/12352#discussion_r470939285", "createdAt": "2020-08-15T05:09:47Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzOTM0Nw==", "bodyText": "If this results in test failures due to more (incorrect) type hints being applied, feel free to drop a TODO here for future work.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470939347", "createdAt": "2020-08-15T05:10:31Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Prefix label with 'ParDo' if necessary\n+      full_label = applied_transform.full_label\n+      if not full_label.startswith('ParDo'):\n+        full_label = 'ParDo(%s)' % full_label\n+\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {}\n+      output_type_hints = self.get_output_type_hints(transform)\n+      if output_type_hints:\n+        transform.fn._runtime_output_constraints[full_label] = (\n+            output_type_hints)\n+\n+      # Store input type hints in producer transform", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzOTIzMQ=="}, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzOTQyMg==", "bodyText": "This is the one bit that might need to be guarded by DoFn.", "url": "https://github.com/apache/beam/pull/12352#discussion_r470939422", "createdAt": "2020-08-15T05:11:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Prefix label with 'ParDo' if necessary\n+      full_label = applied_transform.full_label\n+      if not full_label.startswith('ParDo'):\n+        full_label = 'ParDo(%s)' % full_label\n+\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {}\n+      output_type_hints = self.get_output_type_hints(transform)\n+      if output_type_hints:\n+        transform.fn._runtime_output_constraints[full_label] = (\n+            output_type_hints)\n+\n+      # Store input type hints in producer transform\n+      producer = applied_transform.inputs[0].producer\n+      input_type_hints = self.get_input_type_hints(transform)\n+      if input_type_hints:\n+        producer.transform._add_type_constraint_from_consumer(\n+            full_label, input_type_hints)\n+\n+  def get_input_type_hints(self, transform):\n+    type_hints = transform.get_type_hints()\n+\n+    input_types = None\n+    if type_hints.input_types:\n+      normal_hints, kwarg_hints = type_hints.input_types\n+      if kwarg_hints:\n+        input_types = kwarg_hints\n+      if normal_hints:\n+        input_types = normal_hints\n+\n+    parameter_name = 'Unknown Parameter'\n+    try:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzOTQ1MQ==", "bodyText": "Why would TypeError be raised?", "url": "https://github.com/apache/beam/pull/12352#discussion_r470939451", "createdAt": "2020-08-15T05:11:52Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +268,89 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+\n+  _in_combine = False\n+  combine_classes = (\n+      core.CombineFn,\n+      core.CombinePerKey,\n+      core.CombineValuesDoFn,\n+      core.CombineValues,\n+      core.CombineGlobally)\n+\n+  def enter_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = True\n+\n+  def leave_composite_transform(self, applied_transform):\n+    if isinstance(applied_transform.transform, self.combine_classes):\n+      self._in_combine = False\n+\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    if isinstance(transform, core.ParDo) and not self._in_combine:\n+      # Prefix label with 'ParDo' if necessary\n+      full_label = applied_transform.full_label\n+      if not full_label.startswith('ParDo'):\n+        full_label = 'ParDo(%s)' % full_label\n+\n+      # Store output type hints in current transform\n+      transform.fn._runtime_output_constraints = {}\n+      output_type_hints = self.get_output_type_hints(transform)\n+      if output_type_hints:\n+        transform.fn._runtime_output_constraints[full_label] = (\n+            output_type_hints)\n+\n+      # Store input type hints in producer transform\n+      producer = applied_transform.inputs[0].producer\n+      input_type_hints = self.get_input_type_hints(transform)\n+      if input_type_hints:\n+        producer.transform._add_type_constraint_from_consumer(\n+            full_label, input_type_hints)\n+\n+  def get_input_type_hints(self, transform):\n+    type_hints = transform.get_type_hints()\n+\n+    input_types = None\n+    if type_hints.input_types:\n+      normal_hints, kwarg_hints = type_hints.input_types\n+      if kwarg_hints:\n+        input_types = kwarg_hints\n+      if normal_hints:\n+        input_types = normal_hints\n+\n+    parameter_name = 'Unknown Parameter'\n+    try:\n+      argspec = inspect.getfullargspec(transform.fn._process_argspec_fn())\n+      if len(argspec.args):\n+        arg_index = 0\n+        if argspec.args[0] == 'self':\n+          arg_index = 1\n+        parameter_name = argspec.args[arg_index]\n+        if isinstance(input_types, dict):\n+          input_types = (input_types[argspec.args[arg_index]], )\n+    except TypeError:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjk0MTk2", "url": "https://github.com/apache/beam/pull/12352#pullrequestreview-470694196", "createdAt": "2020-08-19T17:35:46Z", "commit": {"oid": "a1fd8352a7be42499dee0b03432926038926609e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozNTo0NlrOHDSVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoxNzoyOFrOHDTwTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwODEyNQ==", "bodyText": "What I'm really asking was why was the test wrong? Isn't a list the wrong thing to pass to the next operation, ExtractWords, which uses re.findall?", "url": "https://github.com/apache/beam/pull/12352#discussion_r473208125", "createdAt": "2020-08-19T17:35:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/examples/snippets/snippets.py", "diffHunk": "@@ -689,8 +689,9 @@ def examples_wordcount_streaming(argv):\n \n     output = (\n         lines\n-        | 'DecodeUnicode' >>\n-        beam.FlatMap(lambda encoded: encoded.decode('utf-8'))\n+        | 'DecodeUnicode' >> beam.FlatMap(\n+            lambda encoded:\n+            (encoded if isinstance(encoded, list) else encoded.decode('utf-8')))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNzM5Ng=="}, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMDAzOA==", "bodyText": "Use transform._add_type_constraint_from_consumer rather than direct access here as well. Then you can get rid of hasattr(transform, 'fn') and just write\noutput_type_hints = self.get_output_type_hints(transform)\nif output_type_hints:\n  transform._add_type_constraint_from_consumer(output_type_hints)", "url": "https://github.com/apache/beam/pull/12352#discussion_r473210038", "createdAt": "2020-08-19T17:39:11Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/typecheck.py", "diffHunk": "@@ -265,3 +269,74 @@ def visit_transform(self, applied_transform):\n                 transform.get_type_hints(),\n                 applied_transform.full_label),\n             applied_transform.full_label)\n+\n+\n+class PerformanceTypeCheckVisitor(pipeline.PipelineVisitor):\n+  def visit_transform(self, applied_transform):\n+    transform = applied_transform.transform\n+    full_label = applied_transform.full_label\n+\n+    # Store output type hints in current transform\n+    if hasattr(transform, 'fn'):\n+      if not hasattr(transform.fn, '_runtime_output_constraints'):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fd8352a7be42499dee0b03432926038926609e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMTQzNg==", "bodyText": "Drop a TODO(BEAM-10710) here as well.", "url": "https://github.com/apache/beam/pull/12352#discussion_r473231436", "createdAt": "2020-08-19T18:17:28Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/opcounters.py", "diffHunk": "@@ -224,8 +230,25 @@ def _observable_callback_inner(value, is_encoded=False):\n \n     return _observable_callback_inner\n \n+  def type_check(self, value):\n+    # type: (any, bool) -> None\n+    for transform_label, type_constraint_tuple in (\n+            self.output_type_constraints.items()):\n+      parameter_name, constraint = type_constraint_tuple\n+      try:\n+        _check_instance_type(constraint, value, parameter_name, verbose=True)\n+      except TypeCheckError as e:\n+        if not transform_label.startswith('ParDo'):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNzYwNg=="}, "originalCommit": {"oid": "8ba15de2bead40991f2fb16a56e0cd8b4f0171ba"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cea2f7c0823676f2329537f3a1bc7da13a723bf", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/9cea2f7c0823676f2329537f3a1bc7da13a723bf", "committedDate": "2020-08-19T20:28:21Z", "message": "Add performance runtime type check flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1610a818cb8ef90ad29c3c7f380d4fa44ca891f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a1610a818cb8ef90ad29c3c7f380d4fa44ca891f", "committedDate": "2020-08-19T20:28:21Z", "message": "Add PerformanceTypeCheckVisitor which stores type hints in DoFns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cb5ca1a4a938aacf8f75f7221799dad67650b37", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/4cb5ca1a4a938aacf8f75f7221799dad67650b37", "committedDate": "2020-08-19T20:28:21Z", "message": "Store the type hints in the OperationCounters class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59daa2d6401dfbe13efc860075ab95028497bd8f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/59daa2d6401dfbe13efc860075ab95028497bd8f", "committedDate": "2020-08-19T20:28:21Z", "message": "Runtime type checking works with input values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c44258fa936afe49717a0203fa2d8ac7b84f806", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/8c44258fa936afe49717a0203fa2d8ac7b84f806", "committedDate": "2020-08-19T20:28:21Z", "message": "Runtime type checking works with output values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f600d97b79d81df0e6e4db5680a89553919726e", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/1f600d97b79d81df0e6e4db5680a89553919726e", "committedDate": "2020-08-19T20:28:21Z", "message": "Declare type_check function in cython and reduce error handling code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f708d1d59193b6e7faa3e73bea4ad3b5a881f97c", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f708d1d59193b6e7faa3e73bea4ad3b5a881f97c", "committedDate": "2020-08-19T20:28:21Z", "message": "Throw error if both flags are on"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413d8fe13cd96112fb3e2a4698df275f7f0d81ea", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/413d8fe13cd96112fb3e2a4698df275f7f0d81ea", "committedDate": "2020-08-19T20:28:21Z", "message": "Use producer and consumer Operations' type hints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9fee8b6222d00cd8a694ef741d3b27c359fd837", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e9fee8b6222d00cd8a694ef741d3b27c359fd837", "committedDate": "2020-08-19T20:28:21Z", "message": "Store in _runtime_type_hints instead of _type_hints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fede55b748d1534b6e559f97e9fd28a56405feb4", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/fede55b748d1534b6e559f97e9fd28a56405feb4", "committedDate": "2020-08-19T20:28:21Z", "message": "Simplify extraction process of type hints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645b6c20f71e9d3131d7822a0ecfa47b36609a7c", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/645b6c20f71e9d3131d7822a0ecfa47b36609a7c", "committedDate": "2020-08-19T20:28:21Z", "message": "Rename variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d0e67d3265c79c42781624748074c99410afd69", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/6d0e67d3265c79c42781624748074c99410afd69", "committedDate": "2020-08-19T20:28:21Z", "message": "Use correct type hints in broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26add2a587efa7eb66fb8b7c7ee2bb6b9da4593e", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/26add2a587efa7eb66fb8b7c7ee2bb6b9da4593e", "committedDate": "2020-08-19T20:40:35Z", "message": "Add equivalent tests for both runtime type checking flags without duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8113343ba32e9beddbfda703c563ac3685ccf01d", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/8113343ba32e9beddbfda703c563ac3685ccf01d", "committedDate": "2020-08-19T20:40:35Z", "message": "Remove accidental changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31963339acc890e021a882619ae01146191f4e42", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/31963339acc890e021a882619ae01146191f4e42", "committedDate": "2020-08-19T20:40:35Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca9c0b698aa36236ec2d174849cc38acd1f39ad", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/2ca9c0b698aa36236ec2d174849cc38acd1f39ad", "committedDate": "2020-08-19T20:40:35Z", "message": "Remove redundant test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31d17961161d1c72e028572bf563f78ad86103b4", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/31d17961161d1c72e028572bf563f78ad86103b4", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix cython error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db06489a999f81ffcd6f96867fd92938f36f99b6", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/db06489a999f81ffcd6f96867fd92938f36f99b6", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix cython error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "793e5740aa425c3daea7d5525c7dbc846b23564f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/793e5740aa425c3daea7d5525c7dbc846b23564f", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix cython error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ccba4d7d1d7cd4bb57c04a4efe7e79c1bb69d6e", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0ccba4d7d1d7cd4bb57c04a4efe7e79c1bb69d6e", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix update_counters_finish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de195b3e9a648b4cd2fc8bab555b84d57e8b71af", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/de195b3e9a648b4cd2fc8bab555b84d57e8b71af", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix bugs, and py2 incompatability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41ae22605ce78e691bd08cc1b86b22775b0cddc4", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/41ae22605ce78e691bd08cc1b86b22775b0cddc4", "committedDate": "2020-08-19T20:40:35Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f7b6e8aa2ab7b02d7415ff6a93934c7e2df53c4", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3f7b6e8aa2ab7b02d7415ff6a93934c7e2df53c4", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix line-too-long error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7958f85f121d9ae21699a9c76d907f1bec05110c", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/7958f85f121d9ae21699a9c76d907f1bec05110c", "committedDate": "2020-08-19T20:40:35Z", "message": "For testing purposes, default to performance_runtime_type_check when both flags are on"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c671e527e1e1c8d3bb36bdbd9dc17e036141a3", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/25c671e527e1e1c8d3bb36bdbd9dc17e036141a3", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix import order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba766c75628c893adc14aa5da38a7f0fa031a470", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/ba766c75628c893adc14aa5da38a7f0fa031a470", "committedDate": "2020-08-19T20:40:35Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152507f538a59fee7a608e7bb90ffdfd8d00d3bf", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/152507f538a59fee7a608e7bb90ffdfd8d00d3bf", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix bug where CombineFns could get type hints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51fc98cb154339b8ed4f897c5ec1dd1aee45209f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/51fc98cb154339b8ed4f897c5ec1dd1aee45209f", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix ConsumerSet init bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f80be2b5ddb2328a4b7844d901e47331435b67f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0f80be2b5ddb2328a4b7844d901e47331435b67f", "committedDate": "2020-08-19T20:40:35Z", "message": "Ignore all combine classes, and fix iteration bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73b82de151fe3e6e0d5098112750f221d3716f3c", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/73b82de151fe3e6e0d5098112750f221d3716f3c", "committedDate": "2020-08-19T20:40:35Z", "message": "Add full labels to transforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3272eb893badcdd4b31658aaea72ddbc9cd90a7b", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3272eb893badcdd4b31658aaea72ddbc9cd90a7b", "committedDate": "2020-08-19T20:40:35Z", "message": "Provide more descriptive error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05fc03844b7acd323c66b2a2bed89406d4799534", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/05fc03844b7acd323c66b2a2bed89406d4799534", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix bug where non-iterables wouldn't be type-checked"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b7d325b3b117bcc182573ff54cd1e59e99b57ec", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/4b7d325b3b117bcc182573ff54cd1e59e99b57ec", "committedDate": "2020-08-19T20:40:35Z", "message": "Store argspec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31ec0a993f075d514bfad91bdc3ff15ca954d101", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/31ec0a993f075d514bfad91bdc3ff15ca954d101", "committedDate": "2020-08-19T20:40:35Z", "message": "Compute type hints in visitor instead of opcounters for perf gains, and to get the main input kwarg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f75affa637aefd1aadb450f7fd6e08a395dd9509", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f75affa637aefd1aadb450f7fd6e08a395dd9509", "committedDate": "2020-08-19T20:40:35Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1addd024d567b212b739aeb82b7daa1c57518b87", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/1addd024d567b212b739aeb82b7daa1c57518b87", "committedDate": "2020-08-19T20:40:35Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8e63c38c5946dc597bc01db7b516e6a4e716d64", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a8e63c38c5946dc597bc01db7b516e6a4e716d64", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix import order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3b72dd95a3d8ff1ccc59cd6a689401188e5092", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/ab3b72dd95a3d8ff1ccc59cd6a689401188e5092", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07ffd608d336023c9c2aeaecef5d570298485fd3", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/07ffd608d336023c9c2aeaecef5d570298485fd3", "committedDate": "2020-08-19T20:40:35Z", "message": "Use param name in error string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7617bfe7ff61888f156eb8486700ea816d54b6b", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a7617bfe7ff61888f156eb8486700ea816d54b6b", "committedDate": "2020-08-19T20:40:35Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af1dc8066463c1a1e52f3ae9ae9c39f0395b470", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/9af1dc8066463c1a1e52f3ae9ae9c39f0395b470", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e81888c9470c98c592b156febacac39d06e798", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e7e81888c9470c98c592b156febacac39d06e798", "committedDate": "2020-08-19T20:40:35Z", "message": "Fix bug where inspect can fail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7412cf08f709bf31df8715d0d5ed58a126de8e26", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/7412cf08f709bf31df8715d0d5ed58a126de8e26", "committedDate": "2020-08-19T20:40:35Z", "message": "Check for dict, str, unicode, bytes types in OutputProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "755186be5e70aaa877811d0d6a4fc6f01d11389a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/755186be5e70aaa877811d0d6a4fc6f01d11389a", "committedDate": "2020-08-19T20:40:35Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a52486c29184ab33656511c06f0436e934ef461b", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a52486c29184ab33656511c06f0436e934ef461b", "committedDate": "2020-08-19T20:40:35Z", "message": "Make feature Python 3 only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d644a7caac56a8a71ef2001c2f609fa3f9a43b20", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/d644a7caac56a8a71ef2001c2f609fa3f9a43b20", "committedDate": "2020-08-19T20:40:35Z", "message": "Update tests to be compatible with both flags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ae9cf2d00cfad8cb0226e69174ef11d0d21958", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e3ae9cf2d00cfad8cb0226e69174ef11d0d21958", "committedDate": "2020-08-19T20:49:42Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c935b923cd5539074d003bba41cdea4d6e290c", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f7c935b923cd5539074d003bba41cdea4d6e290c", "committedDate": "2020-08-19T20:49:42Z", "message": "Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5dcd4e9cbf329fb34b44d24ff2b208e028843b", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/2c5dcd4e9cbf329fb34b44d24ff2b208e028843b", "committedDate": "2020-08-19T20:50:35Z", "message": "Fix lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd7f0c23ba636f1b2343225e33cb371ce65fdfa", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/1cd7f0c23ba636f1b2343225e33cb371ce65fdfa", "committedDate": "2020-08-19T20:50:53Z", "message": "Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5af07710c4e4ec5fcf3756e096a477c52a2fd808", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/5af07710c4e4ec5fcf3756e096a477c52a2fd808", "committedDate": "2020-08-19T20:50:53Z", "message": "Leave performance_runtime_type_check off by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0507c58252e14c527ae99bdf42fe10006349c68", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/d0507c58252e14c527ae99bdf42fe10006349c68", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2bfd9f950baa31bff2786f34469ddd42737f06", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/ac2bfd9f950baa31bff2786f34469ddd42737f06", "committedDate": "2020-08-19T20:51:12Z", "message": "Add website documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4be7cdbfa33d1144fbdc289e036062879479a046", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/4be7cdbfa33d1144fbdc289e036062879479a046", "committedDate": "2020-08-19T20:51:12Z", "message": "Use the same value in tests because sampling is non-deterministic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc8224e452c7d014fae9fea2a10e896fe77801ad", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/dc8224e452c7d014fae9fea2a10e896fe77801ad", "committedDate": "2020-08-19T20:51:12Z", "message": "Update a test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2df2aa64475a475613dd51f6e9b902d9aeb2e7d4", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/2df2aa64475a475613dd51f6e9b902d9aeb2e7d4", "committedDate": "2020-08-19T20:51:12Z", "message": "Remove accidental changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdf38303dc7e911044df662da2f30df880612d9f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/fdf38303dc7e911044df662da2f30df880612d9f", "committedDate": "2020-08-19T20:51:12Z", "message": "PR Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a43744a9986ff7b8fd834da8da7e5430fc15de1", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/8a43744a9986ff7b8fd834da8da7e5430fc15de1", "committedDate": "2020-08-19T20:51:12Z", "message": "Stage 1 Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23a394f2e8d5f6ec6c0eb266c360313b0e165cf", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f23a394f2e8d5f6ec6c0eb266c360313b0e165cf", "committedDate": "2020-08-19T20:51:12Z", "message": "Refactor Stage 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beceef2cf5db1ef30d33854b7a225dd2b36ab3a5", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/beceef2cf5db1ef30d33854b7a225dd2b36ab3a5", "committedDate": "2020-08-19T20:51:12Z", "message": "Refactor Stage 3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e8d57de838eb09462fcbc34f0e3bf7f13a9641", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/85e8d57de838eb09462fcbc34f0e3bf7f13a9641", "committedDate": "2020-08-19T20:51:12Z", "message": "Refactor Stage 4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce8209c4819d9eb05b28e2807a97ee4cf7a9bdea", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/ce8209c4819d9eb05b28e2807a97ee4cf7a9bdea", "committedDate": "2020-08-19T20:51:12Z", "message": "Refactor Stage 5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47fdb8db2bf96241df9eae71fbf8b54eb60dedb5", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/47fdb8db2bf96241df9eae71fbf8b54eb60dedb5", "committedDate": "2020-08-19T20:51:12Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51c5a00aa59e52f718ce5b88089a433f7ccd24e6", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/51c5a00aa59e52f718ce5b88089a433f7ccd24e6", "committedDate": "2020-08-19T20:51:12Z", "message": "Add comments for how to type-check side inputs, and lint fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c50cedd93e9ae4c3f036b428291f0cdafdcebea", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/6c50cedd93e9ae4c3f036b428291f0cdafdcebea", "committedDate": "2020-08-19T20:51:12Z", "message": "Use mega type hint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507d57498dcf286088b15cdcf3b5da4b1bec7cfb", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/507d57498dcf286088b15cdcf3b5da4b1bec7cfb", "committedDate": "2020-08-19T20:51:12Z", "message": "PR Fixes: fix None bug, empty type hints, and move label transformation to visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d56b828b7ae033bd1dd45cd2b9f6f3d3f840ac8", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3d56b828b7ae033bd1dd45cd2b9f6f3d3f840ac8", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix some PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ac071d7b48457303f503cded4ceb9bb9a48e6a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/18ac071d7b48457303f503cded4ceb9bb9a48e6a", "committedDate": "2020-08-19T20:51:12Z", "message": "Add new method to PTransform: _add_type_constraint_from_consumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e513b390553f1bf0c76efdd448c59ccc76596b9d", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e513b390553f1bf0c76efdd448c59ccc76596b9d", "committedDate": "2020-08-19T20:51:12Z", "message": "Get runtime type hints only from DoOperation instead of all operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e33d30a1731c6a396ef93819df32d7cd3b54ecb9", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e33d30a1731c6a396ef93819df32d7cd3b54ecb9", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eff003890a1cd4ee192ae2fba42fc1dfb1017891", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/eff003890a1cd4ee192ae2fba42fc1dfb1017891", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix lint and cython error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d453db4282e6ffd1efb9bffcfc264131c6d9932", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0d453db4282e6ffd1efb9bffcfc264131c6d9932", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix test that was written incorrectly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09a4893d1e03b3536331e87eeda158d9dbd14030", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/09a4893d1e03b3536331e87eeda158d9dbd14030", "committedDate": "2020-08-19T20:51:12Z", "message": "Add microbenchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a03b617ccbaac3568a92e43e93d6d003955b91a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/7a03b617ccbaac3568a92e43e93d6d003955b91a", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix benchmark & lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ea7c08fb5038138c29cceeb8b9317bd770bce4a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/8ea7c08fb5038138c29cceeb8b9317bd770bce4a", "committedDate": "2020-08-19T20:51:12Z", "message": "Use averaging in benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59817a29ad348d18af214a31f1c6aa5558ecb53", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/d59817a29ad348d18af214a31f1c6aa5558ecb53", "committedDate": "2020-08-19T20:51:12Z", "message": "Remove iterable check in common.py for performance concerns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a8eeaf732df59687adcbea7c162165749fe002", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/68a8eeaf732df59687adcbea7c162165749fe002", "committedDate": "2020-08-19T20:51:12Z", "message": "Add TODO for fixing error message strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6799bc4324789a1baa4edfad9f31cd35d8c5d23a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/6799bc4324789a1baa4edfad9f31cd35d8c5d23a", "committedDate": "2020-08-19T20:51:12Z", "message": "Update documentation strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f93f2a7a768cd2bb6c5d9041a9052e207867098", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0f93f2a7a768cd2bb6c5d9041a9052e207867098", "committedDate": "2020-08-19T20:51:12Z", "message": "Update test and move annotations to a comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9488b45d76a8a479160194ee854a9d2a1c272406", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/9488b45d76a8a479160194ee854a9d2a1c272406", "committedDate": "2020-08-19T20:51:12Z", "message": "Make logic easier to read and document type hints for _add_type_constraint_from_consumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd6dcdfe7b9c071118e265de0d6e451ee074c3c8", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/fd6dcdfe7b9c071118e265de0d6e451ee074c3c8", "committedDate": "2020-08-19T20:51:12Z", "message": "Remove ParDo prefix and fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ea454e708d2812a1e5bba003f7c0540d3e480f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/55ea454e708d2812a1e5bba003f7c0540d3e480f", "committedDate": "2020-08-19T20:51:12Z", "message": "Remove unnecessary try/except and optimize a selector statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0644a4da04f76d558f47588c42060dccf6bca9a8", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0644a4da04f76d558f47588c42060dccf6bca9a8", "committedDate": "2020-08-19T20:51:12Z", "message": "Use type hints for combine functions and add a TODO for removing the isinstance(transform, ParDo) check in the visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c9f742793924d8e964cae12aae2c6d1a877f6f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f8c9f742793924d8e964cae12aae2c6d1a877f6f", "committedDate": "2020-08-19T20:51:12Z", "message": "Extract type hints for all transform types, not just ParDo's"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4aa1cae5310c97a4615f279c51a352c801a6b2", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/cb4aa1cae5310c97a4615f279c51a352c801a6b2", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a6af1c4c1ddab3d1fd752bdee90ad0c4950c636", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/2a6af1c4c1ddab3d1fd752bdee90ad0c4950c636", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix type hint annotation docstrings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aecf610fa5375d24e71d679752aa93b1b1817fc", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/8aecf610fa5375d24e71d679752aa93b1b1817fc", "committedDate": "2020-08-19T20:51:12Z", "message": "Add test and fix type hint docstring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6a261d2cc5b8ebd22ee8a766b284c6684faa33", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/7f6a261d2cc5b8ebd22ee8a766b284c6684faa33", "committedDate": "2020-08-19T20:51:12Z", "message": "Turn the perf RTC flag on for testing purposes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd12f83a6b87418a296cebd390fdd98c20ea4c97", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/dd12f83a6b87418a296cebd390fdd98c20ea4c97", "committedDate": "2020-08-19T20:51:12Z", "message": "Add try/catch for getfullargspec error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcca2f0a0565244b2afc7162278fb8aed8a0fd7c", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/dcca2f0a0565244b2afc7162278fb8aed8a0fd7c", "committedDate": "2020-08-19T20:51:12Z", "message": "Fix IndexError"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfafa0d97256034f23ae51bcb8672372621b5796", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/cfafa0d97256034f23ae51bcb8672372621b5796", "committedDate": "2020-08-19T20:51:12Z", "message": "Turn flag off"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f39c47e6120f2baa6abedd1235dcde7d89bbca4e", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f39c47e6120f2baa6abedd1235dcde7d89bbca4e", "committedDate": "2020-08-19T20:51:12Z", "message": "Use cleaner syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68b4ce8c8ed13fa446036a0b520e871ff0739c33", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/68b4ce8c8ed13fa446036a0b520e871ff0739c33", "committedDate": "2020-08-19T20:55:23Z", "message": "Rebase onto master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3902, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}