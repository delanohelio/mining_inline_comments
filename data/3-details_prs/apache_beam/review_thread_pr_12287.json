{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNjA2OTQ4", "number": 12287, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0MDoyNlrOEPWqfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzowOToyNlrOEPYRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM1NDIyOnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0MDoyN1rOGzBeHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0MDoyN1rOGzBeHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDY1NA==", "bodyText": "This should only handle splits if the mainOutputConsumers has only one value.", "url": "https://github.com/apache/beam/pull/12287#discussion_r456154654", "createdAt": "2020-07-17T00:40:27Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -488,90 +493,77 @@\n             || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n             || !sideInputMapping.isEmpty()) {\n           mainInputConsumer = this::processElementForWindowObservingSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new WindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentWindow,\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+\n         } else {\n           mainInputConsumer = this::processElementForSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new NonWindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentElement.getWindows(),\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionNonWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN:\n+        if ((doFnSignature.truncateRestriction() != null\n+                && doFnSignature.truncateRestriction().observesWindow())\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM1NTExOnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0MTowMVrOGzBeng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0MTowMVrOGzBeng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDc4Mg==", "bodyText": "ditto for handling splits if there is only one output consumer", "url": "https://github.com/apache/beam/pull/12287#discussion_r456154782", "createdAt": "2020-07-17T00:41:01Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -488,90 +493,77 @@\n             || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n             || !sideInputMapping.isEmpty()) {\n           mainInputConsumer = this::processElementForWindowObservingSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new WindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentWindow,\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+\n         } else {\n           mainInputConsumer = this::processElementForSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new NonWindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentElement.getWindows(),\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionNonWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN:\n+        if ((doFnSignature.truncateRestriction() != null\n+                && doFnSignature.truncateRestriction().observesWindow())\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {\n+            mainInputConsumer =\n+                new SplittableFnDataReceiver() {\n+                  @Override\n+                  public void accept(WindowedValue input) throws Exception {\n+                    processElementForWindowObservingTruncateRestriction(input);\n+                  }\n+\n+                  // TODO(BEAM-10303): Split should work with window observing optimization.\n+                  @Override\n+                  public SplitResult trySplit(double fractionOfRemainder) {\n+                    return null;\n+                  }\n+\n+                  // TODO(BEAM-10303): Progress should work with window observing optimization.\n+                  @Override\n+                  public double getProgress() {\n+                    return 0;\n+                  }\n+                };\n+          } else {\n+            mainInputConsumer = this::processElementForWindowObservingTruncateRestriction;\n+          }\n+          this.processContext =\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN);\n+        } else {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTYxODQxOnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzowOToyNlrOGzD1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzoyMjo1NlrOGzECTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MzUyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *\n          \n          \n            \n               * .", "url": "https://github.com/apache/beam/pull/12287#discussion_r456193528", "createdAt": "2020-07-17T03:09:26Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -69,6 +69,31 @@ public static TransformReplacement createSizedReplacement() {\n     return SizedReplacement.INSTANCE;\n   }\n \n+  /**\n+   * Returns a transform replacement in drain mode which expands a splittable ParDo from:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\\n+   * sideInputB ---------V\n+   * mainInput ---> SplittableParDo --> outputA\n+   *                                \\-> outputB\n+   * }</pre>\n+   *\n+   * into:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\---------------------\\----------------------\\--------------------------\\\n+   * sideInputB ---------V---------------------V----------------------V--------------------------V\n+   * mainInput ---> PairWithRestriction --> SplitAndSize --> TruncateAndSize --> ProcessSizedElementsAndRestriction --> outputA\n+   *                                                                                                                \\-> outputB\n+   * }</pre>\n+   *\n+   * .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf02dad217048a21f2527d4eed7bcf07331caec1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NjY4Ng==", "bodyText": "This required by checkstyleMain: The first sentence should be ended with a period.", "url": "https://github.com/apache/beam/pull/12287#discussion_r456196686", "createdAt": "2020-07-17T03:22:56Z", "author": {"login": "boyuanzz"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -69,6 +69,31 @@ public static TransformReplacement createSizedReplacement() {\n     return SizedReplacement.INSTANCE;\n   }\n \n+  /**\n+   * Returns a transform replacement in drain mode which expands a splittable ParDo from:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\\n+   * sideInputB ---------V\n+   * mainInput ---> SplittableParDo --> outputA\n+   *                                \\-> outputB\n+   * }</pre>\n+   *\n+   * into:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\---------------------\\----------------------\\--------------------------\\\n+   * sideInputB ---------V---------------------V----------------------V--------------------------V\n+   * mainInput ---> PairWithRestriction --> SplitAndSize --> TruncateAndSize --> ProcessSizedElementsAndRestriction --> outputA\n+   *                                                                                                                \\-> outputB\n+   * }</pre>\n+   *\n+   * .", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MzUyOA=="}, "originalCommit": {"oid": "cf02dad217048a21f2527d4eed7bcf07331caec1"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1074, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}