{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzgzMDg5", "number": 11189, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOToyMzoyMVrODqSzUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozODozMlrODr-EDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njc0ODM0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/options/pipeline_options.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOToyMzoyMVrOF58zyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0NDozOVrOF6TS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwOTQ0OA==", "bodyText": "What about the --arg=value format?", "url": "https://github.com/apache/beam/pull/11189#discussion_r396309448", "createdAt": "2020-03-23T09:23:21Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,25 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('--'):\n+          parser.add_argument(unknown_args[i], action='store_true')\n+          i += 1\n+        else:\n+          parser.add_argument(unknown_args[i], type=str)\n+          i += 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65e28965d3db5140444a23e65bede7a07074161"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3Nzg3MA==", "bodyText": "Good catch. I will have to add additional logic to handle that.", "url": "https://github.com/apache/beam/pull/11189#discussion_r396677870", "createdAt": "2020-03-23T18:44:39Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,25 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('--'):\n+          parser.add_argument(unknown_args[i], action='store_true')\n+          i += 1\n+        else:\n+          parser.add_argument(unknown_args[i], type=str)\n+          i += 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwOTQ0OA=="}, "originalCommit": {"oid": "e65e28965d3db5140444a23e65bede7a07074161"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njc1MjgzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/options/pipeline_options.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOToyNDo0MlrOF582vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1OTowNFrOF66HQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMDIwNA==", "bodyText": "Should we always check a parameter name starts with --, like done here for boolean flags?", "url": "https://github.com/apache/beam/pull/11189#discussion_r396310204", "createdAt": "2020-03-23T09:24:42Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,25 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('--'):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e65e28965d3db5140444a23e65bede7a07074161"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDQ4Ng==", "bodyText": "I guess I should change it to -, not --. - is the default prefix for argparse, and AFAICT that is true for Beam as well, even though most (all?) pipeline options use --.\nhttps://docs.python.org/3/library/argparse.html#prefix-chars\nSo then the question becomes \"Should we always check a parameter name starts with -?\" And the answer is we don't have to, because the call to parse_args will do that for us. test_retain_unknown_options_unary_missing_prefix tests that.", "url": "https://github.com/apache/beam/pull/11189#discussion_r396684486", "createdAt": "2020-03-23T18:55:55Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,25 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('--'):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMDIwNA=="}, "originalCommit": {"oid": "e65e28965d3db5140444a23e65bede7a07074161"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMzg1OQ==", "bodyText": "That sounds good :)", "url": "https://github.com/apache/beam/pull/11189#discussion_r397313859", "createdAt": "2020-03-24T16:59:04Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,25 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('--'):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMDIwNA=="}, "originalCommit": {"oid": "e65e28965d3db5140444a23e65bede7a07074161"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDMyMjA3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/options/pipeline_options.py", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozODozMlrOF8nlwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDozMzozM1rOF97H8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzUyMQ==", "bodyText": "Why rsplit? Shouldn't this be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      split = unknown_args[i].rsplit('=')\n          \n          \n            \n                      split = unknown_args[i].split('=', 1)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/apache/beam/pull/11189#discussion_r399107521", "createdAt": "2020-03-27T08:38:32Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,29 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('-'):\n+          split = unknown_args[i].rsplit('=')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b07d111db9644fc645b4eda7b100ea5cc56056"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwODIwNA==", "bodyText": "Otherwise this will break options like experiments=state_cache_size=1.", "url": "https://github.com/apache/beam/pull/11189#discussion_r399108204", "createdAt": "2020-03-27T08:39:50Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,29 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('-'):\n+          split = unknown_args[i].rsplit('=')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzUyMQ=="}, "originalCommit": {"oid": "47b07d111db9644fc645b4eda7b100ea5cc56056"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNTA2NA==", "bodyText": "The split is only used to get the argument name, and the rest of the split isn't used.", "url": "https://github.com/apache/beam/pull/11189#discussion_r399405064", "createdAt": "2020-03-27T16:52:21Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,29 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('-'):\n+          split = unknown_args[i].rsplit('=')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzUyMQ=="}, "originalCommit": {"oid": "47b07d111db9644fc645b4eda7b100ea5cc56056"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzODQ2OQ==", "bodyText": "Comment still applies. Splitting should be performed from the left, not the right. At most one split has to be performed.", "url": "https://github.com/apache/beam/pull/11189#discussion_r399538469", "createdAt": "2020-03-27T21:07:53Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,29 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('-'):\n+          split = unknown_args[i].rsplit('=')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzUyMQ=="}, "originalCommit": {"oid": "47b07d111db9644fc645b4eda7b100ea5cc56056"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwNDg0OA==", "bodyText": "Oh, I see what you mean now. I will commit your suggestion to avoid confusion. However, I don't think we should support unrecognized append arguments. I don't want to have to infer complex argument types. As for the specific case of experiments, that will not be a problem because experiments is already recognized by the parser.", "url": "https://github.com/apache/beam/pull/11189#discussion_r399604848", "createdAt": "2020-03-28T01:54:55Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,29 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('-'):\n+          split = unknown_args[i].rsplit('=')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzUyMQ=="}, "originalCommit": {"oid": "47b07d111db9644fc645b4eda7b100ea5cc56056"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ0ODQ4Mg==", "bodyText": "I will merge this now. If we need to support append arguments for some reason, we should be able to add that later.", "url": "https://github.com/apache/beam/pull/11189#discussion_r400448482", "createdAt": "2020-03-30T19:43:06Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,29 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('-'):\n+          split = unknown_args[i].rsplit('=')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzUyMQ=="}, "originalCommit": {"oid": "47b07d111db9644fc645b4eda7b100ea5cc56056"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3NjE0NA==", "bodyText": "I was only referring to options values containing = which can be the case independently of append options. That is fixed now. So all good.", "url": "https://github.com/apache/beam/pull/11189#discussion_r400476144", "createdAt": "2020-03-30T20:33:33Z", "author": {"login": "mxm"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -285,10 +289,29 @@ def get_all_options(\n       cls._add_argparse_args(parser)  # pylint: disable=protected-access\n     if add_extra_args_fn:\n       add_extra_args_fn(parser)\n+\n     known_args, unknown_args = parser.parse_known_args(self._flags)\n-    if unknown_args:\n-      _LOGGER.warning(\"Discarding unparseable args: %s\", unknown_args)\n-    result = vars(known_args)\n+    if retain_unknown_options:\n+      i = 0\n+      while i < len(unknown_args):\n+        # Treat all unary flags as booleans, and all binary argument values as\n+        # strings.\n+        if i + 1 >= len(unknown_args) or unknown_args[i + 1].startswith('-'):\n+          split = unknown_args[i].rsplit('=')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzUyMQ=="}, "originalCommit": {"oid": "47b07d111db9644fc645b4eda7b100ea5cc56056"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1729, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}