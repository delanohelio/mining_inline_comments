{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjI0OTUx", "number": 11607, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxMTowN1rOD6cGXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjoxMzoyMlrOD8TFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA0MzgxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxMTowN1rOGSSG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoyMDowMFrOGSrQBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNDI0OA==", "bodyText": "The bounds are wrong, they should be BoundedWindow.TIMESTAMP_MIN_VALUE and BoundedWindow.TIMESTAMP_MAX_VALUE. This could have been the issue with the timestamp being out of range. If that is the case then I would rather keep the bounds as they were and make setWatermark more restrictive. We should also update the javadoc for setWatermark/currentWatermark (on the interfaces) saying that the value must always be within these bounds.\nI think it makes more sense keep the restriction here and also make the restriction within setWatermark as well so the user gets an error when setting it.", "url": "https://github.com/apache/beam/pull/11607#discussion_r421824248", "createdAt": "2020-05-07T22:11:07Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "diffHunk": "@@ -37,14 +37,16 @@\n     private Instant lastReportedWatermark;\n \n     public Manual(Instant watermark) {\n-      this.watermark = checkNotNull(watermark, \"watermark must not be null.\");\n-      if (watermark.isBefore(GlobalWindow.TIMESTAMP_MIN_VALUE)\n-          || watermark.isAfter(GlobalWindow.TIMESTAMP_MAX_VALUE)) {\n-        throw new IllegalArgumentException(\n-            String.format(\n-                \"Provided watermark %s must be within bounds [%s, %s].\",\n-                watermark, GlobalWindow.TIMESTAMP_MIN_VALUE, GlobalWindow.TIMESTAMP_MAX_VALUE));\n+      checkNotNull(watermark, \"watermark must not be null.\");\n+\n+      // Making sure that the watermark is within bounds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479c875704d575c488de252ee7d3f370171064b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNjg5Ng==", "bodyText": "What's the difference between those values. Seems like GlobalWindow get's these constants from the super class BoundedWindow ?", "url": "https://github.com/apache/beam/pull/11607#discussion_r421826896", "createdAt": "2020-05-07T22:18:06Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "diffHunk": "@@ -37,14 +37,16 @@\n     private Instant lastReportedWatermark;\n \n     public Manual(Instant watermark) {\n-      this.watermark = checkNotNull(watermark, \"watermark must not be null.\");\n-      if (watermark.isBefore(GlobalWindow.TIMESTAMP_MIN_VALUE)\n-          || watermark.isAfter(GlobalWindow.TIMESTAMP_MAX_VALUE)) {\n-        throw new IllegalArgumentException(\n-            String.format(\n-                \"Provided watermark %s must be within bounds [%s, %s].\",\n-                watermark, GlobalWindow.TIMESTAMP_MIN_VALUE, GlobalWindow.TIMESTAMP_MAX_VALUE));\n+      checkNotNull(watermark, \"watermark must not be null.\");\n+\n+      // Making sure that the watermark is within bounds.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNDI0OA=="}, "originalCommit": {"oid": "479c875704d575c488de252ee7d3f370171064b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNzQ0Mw==", "bodyText": "MIN is the same but GlobalWindow.MAX = BoundedWindow.MAX - 1 day as can be seen here: \n  \n    \n      beam/model/pipeline/src/main/proto/beam_runner_api.proto\n    \n    \n         Line 38\n      in\n      25b4ebc\n    \n    \n    \n    \n\n        \n          \n           enum Constants {", "url": "https://github.com/apache/beam/pull/11607#discussion_r421827443", "createdAt": "2020-05-07T22:19:33Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "diffHunk": "@@ -37,14 +37,16 @@\n     private Instant lastReportedWatermark;\n \n     public Manual(Instant watermark) {\n-      this.watermark = checkNotNull(watermark, \"watermark must not be null.\");\n-      if (watermark.isBefore(GlobalWindow.TIMESTAMP_MIN_VALUE)\n-          || watermark.isAfter(GlobalWindow.TIMESTAMP_MAX_VALUE)) {\n-        throw new IllegalArgumentException(\n-            String.format(\n-                \"Provided watermark %s must be within bounds [%s, %s].\",\n-                watermark, GlobalWindow.TIMESTAMP_MIN_VALUE, GlobalWindow.TIMESTAMP_MAX_VALUE));\n+      checkNotNull(watermark, \"watermark must not be null.\");\n+\n+      // Making sure that the watermark is within bounds.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNDI0OA=="}, "originalCommit": {"oid": "479c875704d575c488de252ee7d3f370171064b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDkyMg==", "bodyText": "Right, but we are using the constant from the super class here (TIMESTAMP_MAX_VALUE) not END_OF_GLOBAL_WINDOW.\n\n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/windowing/GlobalWindow.java\n    \n    \n         Line 39\n      in\n      25b4ebc\n    \n    \n    \n    \n\n        \n          \n           private static final Instant END_OF_GLOBAL_WINDOW = extractMaxTimestampFromProto(); \n        \n    \n  \n\n\nAlso, the error we saw was following which points to min value being off, not max value.\njava.lang.IllegalArgumentException: Provided watermark -290308-12-21T19:59:05.224Z must be within bounds [-290308-12-21T19:59:05.225Z, 294247-01-10T04:00:54.775Z].", "url": "https://github.com/apache/beam/pull/11607#discussion_r421830922", "createdAt": "2020-05-07T22:28:33Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "diffHunk": "@@ -37,14 +37,16 @@\n     private Instant lastReportedWatermark;\n \n     public Manual(Instant watermark) {\n-      this.watermark = checkNotNull(watermark, \"watermark must not be null.\");\n-      if (watermark.isBefore(GlobalWindow.TIMESTAMP_MIN_VALUE)\n-          || watermark.isAfter(GlobalWindow.TIMESTAMP_MAX_VALUE)) {\n-        throw new IllegalArgumentException(\n-            String.format(\n-                \"Provided watermark %s must be within bounds [%s, %s].\",\n-                watermark, GlobalWindow.TIMESTAMP_MIN_VALUE, GlobalWindow.TIMESTAMP_MAX_VALUE));\n+      checkNotNull(watermark, \"watermark must not be null.\");\n+\n+      // Making sure that the watermark is within bounds.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNDI0OA=="}, "originalCommit": {"oid": "479c875704d575c488de252ee7d3f370171064b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNjE2Nw==", "bodyText": "Your right, it would be good to migrate to use BoundedWindow as the import for the static though.\nI think it makes sense to make the constructor validate the bounds and have setWatermark ensure that the value is within the range as expected. We can fix the UnboundedSource SDF wrapper to clamp the watermark value that is being reported from UnboundedReader instead.", "url": "https://github.com/apache/beam/pull/11607#discussion_r422236167", "createdAt": "2020-05-08T16:20:00Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "diffHunk": "@@ -37,14 +37,16 @@\n     private Instant lastReportedWatermark;\n \n     public Manual(Instant watermark) {\n-      this.watermark = checkNotNull(watermark, \"watermark must not be null.\");\n-      if (watermark.isBefore(GlobalWindow.TIMESTAMP_MIN_VALUE)\n-          || watermark.isAfter(GlobalWindow.TIMESTAMP_MAX_VALUE)) {\n-        throw new IllegalArgumentException(\n-            String.format(\n-                \"Provided watermark %s must be within bounds [%s, %s].\",\n-                watermark, GlobalWindow.TIMESTAMP_MIN_VALUE, GlobalWindow.TIMESTAMP_MAX_VALUE));\n+      checkNotNull(watermark, \"watermark must not be null.\");\n+\n+      // Making sure that the watermark is within bounds.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNDI0OA=="}, "originalCommit": {"oid": "479c875704d575c488de252ee7d3f370171064b7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTM5NDUxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo0NTowNFrOGVIT2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTowNjo0NlrOGVIpWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwOTQzNQ==", "bodyText": "How about moving to parent scope and making static so we can share this method in all three estimators?", "url": "https://github.com/apache/beam/pull/11607#discussion_r424809435", "createdAt": "2020-05-14T00:45:04Z", "author": {"login": "ihji"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "diffHunk": "@@ -37,18 +37,23 @@\n     private Instant lastReportedWatermark;\n \n     public Manual(Instant watermark) {\n+      validateWatermark(watermark);\n       this.watermark = checkNotNull(watermark, \"watermark must not be null.\");\n-      if (watermark.isBefore(GlobalWindow.TIMESTAMP_MIN_VALUE)\n-          || watermark.isAfter(GlobalWindow.TIMESTAMP_MAX_VALUE)) {\n+    }\n+\n+    private void validateWatermark(Instant watermark) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27353436387d03116dd682da4a75f25854bfae56"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxNDkzNg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11607#discussion_r424814936", "createdAt": "2020-05-14T01:06:46Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.java", "diffHunk": "@@ -37,18 +37,23 @@\n     private Instant lastReportedWatermark;\n \n     public Manual(Instant watermark) {\n+      validateWatermark(watermark);\n       this.watermark = checkNotNull(watermark, \"watermark must not be null.\");\n-      if (watermark.isBefore(GlobalWindow.TIMESTAMP_MIN_VALUE)\n-          || watermark.isAfter(GlobalWindow.TIMESTAMP_MAX_VALUE)) {\n+    }\n+\n+    private void validateWatermark(Instant watermark) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwOTQzNQ=="}, "originalCommit": {"oid": "27353436387d03116dd682da4a75f25854bfae56"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTUyNzc2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjowNjoyMVrOGVJlFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjo0NzozOVrOGVlR9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMDIyOA==", "bodyText": "I was thinking that this logic would be where we call setWatermark above on line 510\nNote that the initial watermark estimate state is current element timestamp which is always between MIN and MAX timestamp values.", "url": "https://github.com/apache/beam/pull/11607#discussion_r424830228", "createdAt": "2020-05-14T02:06:21Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -537,6 +538,12 @@ public Instant getInitialWatermarkEstimatorState(@Timestamp Instant currentEleme\n     @NewWatermarkEstimator\n     public WatermarkEstimators.Manual newWatermarkEstimator(\n         @WatermarkEstimatorState Instant watermarkEstimatorState) {\n+      // Making sure that the watermark is within bounds.\n+      if (watermarkEstimatorState.isBefore(BoundedWindow.TIMESTAMP_MIN_VALUE)) {\n+        watermarkEstimatorState = BoundedWindow.TIMESTAMP_MIN_VALUE;\n+      } else if (watermarkEstimatorState.isAfter(BoundedWindow.TIMESTAMP_MAX_VALUE)) {\n+        watermarkEstimatorState = BoundedWindow.TIMESTAMP_MAX_VALUE;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c4eb0dfb8f91c1020a85ba2ef514a240beaa9c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4NDA4NQ==", "bodyText": "Added to both.", "url": "https://github.com/apache/beam/pull/11607#discussion_r425284085", "createdAt": "2020-05-14T16:47:39Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -537,6 +538,12 @@ public Instant getInitialWatermarkEstimatorState(@Timestamp Instant currentEleme\n     @NewWatermarkEstimator\n     public WatermarkEstimators.Manual newWatermarkEstimator(\n         @WatermarkEstimatorState Instant watermarkEstimatorState) {\n+      // Making sure that the watermark is within bounds.\n+      if (watermarkEstimatorState.isBefore(BoundedWindow.TIMESTAMP_MIN_VALUE)) {\n+        watermarkEstimatorState = BoundedWindow.TIMESTAMP_MIN_VALUE;\n+      } else if (watermarkEstimatorState.isAfter(BoundedWindow.TIMESTAMP_MAX_VALUE)) {\n+        watermarkEstimatorState = BoundedWindow.TIMESTAMP_MAX_VALUE;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMDIyOA=="}, "originalCommit": {"oid": "78c4eb0dfb8f91c1020a85ba2ef514a240beaa9c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTUzODgzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjoxMzoyMlrOGVJr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjo0NzowMVrOGVlQbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMTk5OA==", "bodyText": "It makes more sense to add this method to BoundedWindow as it should apply to a lot more places then just WatermarkEstimators.", "url": "https://github.com/apache/beam/pull/11607#discussion_r424831998", "createdAt": "2020-05-14T02:13:22Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.java", "diffHunk": "@@ -44,4 +45,19 @@\n    * <p>The state returned must not be mutated.\n    */\n   WatermarkEstimatorStateT getState();\n+\n+  /**\n+   * Validates that a given watermark is within timestamp min and max bounds.\n+   *\n+   * @param watermark watermark to validate\n+   */\n+  static void ensureWatermarkWithinBounds(Instant watermark) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78c4eb0dfb8f91c1020a85ba2ef514a240beaa9c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4MzY5NA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11607#discussion_r425283694", "createdAt": "2020-05-14T16:47:01Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.java", "diffHunk": "@@ -44,4 +45,19 @@\n    * <p>The state returned must not be mutated.\n    */\n   WatermarkEstimatorStateT getState();\n+\n+  /**\n+   * Validates that a given watermark is within timestamp min and max bounds.\n+   *\n+   * @param watermark watermark to validate\n+   */\n+  static void ensureWatermarkWithinBounds(Instant watermark) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMTk5OA=="}, "originalCommit": {"oid": "78c4eb0dfb8f91c1020a85ba2ef514a240beaa9c"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3863, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}