{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjY1NzM2", "number": 11851, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODo1MTozMFrOEAocgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODo1MTozMFrOEAocgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDk4MTEzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/snippets/snippets.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODo1MTozMFrOGcCOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODo1MTozMFrOGcCOFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA0OTY4NQ==", "bodyText": "Note: This is commented out because if we leave it uncommented, even if it doesn't do anything, it makes the test fail with an error. But I still wanted it here for reference.\nsubprocess.CalledProcessError: Command '['/Users/dcavazos/src/beam/env/bin/python', '-m', 'pip', 'download', '--dest', '/var/folders/z2/zp_k4l5n2cq84fsn4y633mg400dsyy/T/tmpdv09ddqk', 'apache-beam==2.22.0.dev0', '--no-deps', '--no-binary', ':all:']' returned non-zero exit status 1.\n\nPip install failed for package: apache-beam==2.22.0.dev0           \nOutput from execution of subprocess: b''\n\nERROR: Could not find a version that satisfies the requirement apache-beam==2.22.0.dev0 (from versions: 0.6.0, 2.0.0, 2.1.0, 2.1.1, 2.2.0, 2.11.0, 2.12.0, 2.13.0, 2.14.0, 2.15.0, 2.16.0, 2.17.0, 2.18.0, 2.19.0, 2.20.0, 2.21.0)\nERROR: No matching distribution found for apache-beam==2.22.0.dev0", "url": "https://github.com/apache/beam/pull/11851#discussion_r432049685", "createdAt": "2020-05-28T18:51:30Z", "author": {"login": "davidcavazos"}, "path": "sdks/python/apache_beam/examples/snippets/snippets.py", "diffHunk": "@@ -226,35 +227,33 @@ def _add_argparse_args(cls, parser):\n \n   # [END pipeline_options_define_custom]\n \n-  from apache_beam.options.pipeline_options import GoogleCloudOptions\n-  from apache_beam.options.pipeline_options import StandardOptions\n-\n   # [START pipeline_options_dataflow_service]\n-  # Create and set your PipelineOptions.\n-  options = PipelineOptions(flags=argv)\n+  import apache_beam as beam\n+  from apache_beam.options.pipeline_options import PipelineOptions\n \n+  # Create and set your PipelineOptions.\n   # For Cloud execution, specify DataflowRunner and set the Cloud Platform\n-  # project, job name, staging file location, temp file location, and region.\n-  options.view_as(StandardOptions).runner = 'DataflowRunner'\n-  google_cloud_options = options.view_as(GoogleCloudOptions)\n-  google_cloud_options.project = 'my-project-id'\n-  google_cloud_options.job_name = 'myjob'\n-  google_cloud_options.staging_location = 'gs://my-bucket/binaries'\n-  google_cloud_options.temp_location = 'gs://my-bucket/temp'\n-  google_cloud_options.region = 'us-central1'\n+  # project, job name, temporary files location, and region.\n+  # For more information about regions, check:\n+  # https://cloud.google.com/dataflow/docs/concepts/regional-endpoints\n+  options = PipelineOptions(\n+      flags=argv,\n+      runner='DataflowRunner',\n+      project='my-project-id',\n+      job_name='unique-job-name',\n+      temp_location='gs://my-bucket/temp',\n+      region='us-central1')\n \n   # Create the Pipeline with the specified options.\n-  p = Pipeline(options=options)\n+  # with beam.Pipeline(options=options) as pipeline:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87df7a41ae2d751d66b9d87476408902e073f441"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3725, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}