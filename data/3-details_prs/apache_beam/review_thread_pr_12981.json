{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODMwNDA0", "number": 12981, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzowOToyNVrOEpPDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMzowN1rOEpPGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjczNjg2OnYy", "diffSide": "RIGHT", "path": "runners/portability/java/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzowOToyNVrOHayWEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzowOToyNVrOHayWEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0OTg3Mw==", "bodyText": "Noting that my previous approach did not work. The property was always set by the time the conditional was checked. I had only verified it against a job service that I launched externally so did not catch that the logic was flawed. This approach does work, by setting needsLocalJobService earlier.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497849873", "createdAt": "2020-09-30T23:09:25Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -50,27 +50,32 @@ dependencies {\n   validatesRunner project(path: project.path, configuration: \"testRuntime\")\n }\n \n-\n project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":sdks:python\")\n project.evaluationDependsOn(\":runners:core-java\")\n \n-ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.pythonSdkDir = project.findProject(\":sdks:python\").getProjectDir().getAbsoluteFile().toString()\n+\n+// If this is set via -P then we assume it is already running and will not start it\n+def needsLocalJobService = !project.hasProperty(\"localJobServicePortFile\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjczOTAyOnYy", "diffSide": "RIGHT", "path": "runners/portability/java/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMDoyMlrOHayXWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMDoyMlrOHayXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDIwMA==", "bodyText": "The prior reference to pythonSdkDir was actually an unbound variable.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850200", "createdAt": "2020-09-30T23:10:22Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -50,27 +50,32 @@ dependencies {\n   validatesRunner project(path: project.path, configuration: \"testRuntime\")\n }\n \n-\n project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":sdks:python\")\n project.evaluationDependsOn(\":runners:core-java\")\n \n-ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.pythonSdkDir = project.findProject(\":sdks:python\").getProjectDir().getAbsoluteFile().toString()\n+\n+// If this is set via -P then we assume it is already running and will not start it\n+def needsLocalJobService = !project.hasProperty(\"localJobServicePortFile\")\n+\n ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+\n ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n \n void execInVirtualenv(String... args) {\n   String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n   exec {\n-    workingDir pythonSdkDir\n+    workingDir project.ext.pythonSdkDir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjczOTUzOnYy", "diffSide": "LEFT", "path": "runners/portability/java/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMDozOFrOHayXqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMDozOFrOHayXqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDI4MQ==", "bodyText": "Left in accidentally ;_;", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850281", "createdAt": "2020-09-30T23:10:38Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -50,27 +50,32 @@ dependencies {\n   validatesRunner project(path: project.path, configuration: \"testRuntime\")\n }\n \n-\n project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":sdks:python\")\n project.evaluationDependsOn(\":runners:core-java\")\n \n-ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.pythonSdkDir = project.findProject(\":sdks:python\").getProjectDir().getAbsoluteFile().toString()\n+\n+// If this is set via -P then we assume it is already running and will not start it\n+def needsLocalJobService = !project.hasProperty(\"localJobServicePortFile\")\n+\n ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+\n ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n \n void execInVirtualenv(String... args) {\n   String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n   exec {\n-    workingDir pythonSdkDir\n+    workingDir project.ext.pythonSdkDir\n     commandLine \"sh\", \"-c\", shellCommand\n   }\n }\n \n // Does not background the process, but allows the process to daemonize itself\n void execBackgroundInVirtualenv(String... args) {\n   String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n-  println \"execBackgroundInVirtualEnv: ${shellCommand}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjc0MDkyOnYy", "diffSide": "RIGHT", "path": "runners/portability/java/build.gradle", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMToxN1rOHayYcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1ODowNVrOHazNpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDQ4MQ==", "bodyText": "I did not understand previously that the Beam SDK and requirements were not installed into the virtualenv. Again, masked by the fact that I only ran it with -PlocalJobServicePortFile hence did not test the virtualenv setup properly.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850481", "createdAt": "2020-09-30T23:11:17Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -82,8 +87,15 @@ void execBackgroundInVirtualenv(String... args) {\n   proc.waitFor();\n }\n \n-task startLocalJobService {\n+task installBeamPythonInVirtualenv {\n   dependsOn setupVirtualenv\n+  doLast {\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NDAxMQ==", "bodyText": "We had issues in the past with installing SDK in developer mode in tests. Not sure if this still relevant. If you want to install from tarball, you can consider using \n  \n    \n      beam/buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy\n    \n    \n         Line 1999\n      in\n      943a948\n    \n    \n    \n    \n\n        \n          \n           project.task('installGcpTest')  { \n        \n    \n  \n\n\n(nameing is for that target is not very mnemonic..)", "url": "https://github.com/apache/beam/pull/12981#discussion_r497854011", "createdAt": "2020-09-30T23:22:52Z", "author": {"login": "tvalentyn"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -82,8 +87,15 @@ void execBackgroundInVirtualenv(String... args) {\n   proc.waitFor();\n }\n \n-task startLocalJobService {\n+task installBeamPythonInVirtualenv {\n   dependsOn setupVirtualenv\n+  doLast {\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDQ4MQ=="}, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NTg4NQ==", "bodyText": "I did not use that because I read the name and it seemed tied to GCP.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497855885", "createdAt": "2020-09-30T23:29:00Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -82,8 +87,15 @@ void execBackgroundInVirtualenv(String... args) {\n   proc.waitFor();\n }\n \n-task startLocalJobService {\n+task installBeamPythonInVirtualenv {\n   dependsOn setupVirtualenv\n+  doLast {\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDQ4MQ=="}, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NjI4Ng==", "bodyText": "So you mean more of an approach like this?\n       dependsOn ':sdks:python:sdist'\n        doLast {\n          def distTarBall = \"${pythonRootDir}/build/apache-beam.tar.gz\"\n          execInVirtualenv \"pip\", \"install\", \"--retries\", \"10\", distTarBall\n          }\n        }\n      }\n\nI am not familiar with the install variants. For ValidatesRunner we should not need any cloud-specific things. I do not know what [test] changes.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497856286", "createdAt": "2020-09-30T23:30:16Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -82,8 +87,15 @@ void execBackgroundInVirtualenv(String... args) {\n   proc.waitFor();\n }\n \n-task startLocalJobService {\n+task installBeamPythonInVirtualenv {\n   dependsOn setupVirtualenv\n+  doLast {\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDQ4MQ=="}, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NjU5Mg==", "bodyText": "it currently installs all extra dependencies (test deps + deps for all of the supported clouds)", "url": "https://github.com/apache/beam/pull/12981#discussion_r497856592", "createdAt": "2020-09-30T23:31:11Z", "author": {"login": "tvalentyn"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -82,8 +87,15 @@ void execBackgroundInVirtualenv(String... args) {\n   proc.waitFor();\n }\n \n-task startLocalJobService {\n+task installBeamPythonInVirtualenv {\n   dependsOn setupVirtualenv\n+  doLast {\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDQ4MQ=="}, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NDEwMw==", "bodyText": "Race condition between comment updates, did not see your prior comments.\n[test] installs additional dependencies mentioned in \n  \n    \n      beam/sdks/python/setup.py\n    \n    \n         Line 176\n      in\n      e6b3cf1\n    \n    \n    \n    \n\n        \n          \n           REQUIRED_TEST_PACKAGES = [ \n        \n    \n  \n\n\nSame applies for other 'extra' dependencies.\nYour proposal sounds good to me. I would  move :\ninstallBeamPythonInVirtualenv into BeamModulePlugin.groovy -> installBeamPython, but feel free to keep here if you feel strongly about it.\nIn a future change we can rename installGcpTest to installBeamPythonWithAllExtraDeps", "url": "https://github.com/apache/beam/pull/12981#discussion_r497864103", "createdAt": "2020-09-30T23:58:05Z", "author": {"login": "tvalentyn"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -82,8 +87,15 @@ void execBackgroundInVirtualenv(String... args) {\n   proc.waitFor();\n }\n \n-task startLocalJobService {\n+task installBeamPythonInVirtualenv {\n   dependsOn setupVirtualenv\n+  doLast {\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDQ4MQ=="}, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjc0MjY0OnYy", "diffSide": "RIGHT", "path": "runners/portability/java/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMjowOFrOHayZcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMjowOFrOHayZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDczNw==", "bodyText": "Previously, only a special case of UsesTestStreamWithMultipleStages was sickbayed. But I got a failure of being unable to understand the URN beam:transforms:teststream:v1 so I interpret that to mean it is not supported at all.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850737", "createdAt": "2020-09-30T23:12:08Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesMapState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesSetState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOrderedListState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesTestStream'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjc0MzI2OnYy", "diffSide": "RIGHT", "path": "runners/portability/java/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMjozMVrOHayZ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoyODozMFrOHaytDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDg0Ng==", "bodyText": "UsesBundleFinalizer is also new since the initial setup of the VR gradle task.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497850846", "createdAt": "2020-09-30T23:12:31Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NDkzMg==", "bodyText": "Do we need a TODO for any of these exclusions?", "url": "https://github.com/apache/beam/pull/12981#discussion_r497854932", "createdAt": "2020-09-30T23:25:34Z", "author": {"login": "tvalentyn"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDg0Ng=="}, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NTc1OQ==", "bodyText": "I don't believe so. I think all excluded categories are essentially feature enhancements for the roadmap. For individual test cases that do not correspond to a category they each have a Jira, since we should aim to support features entirely or not at all. We should also avoid adding fine-grained categories if they do not correspond to real general concepts.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497855759", "createdAt": "2020-09-30T23:28:30Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MDg0Ng=="}, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjc0NDc5OnYy", "diffSide": "RIGHT", "path": "runners/portability/java/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMzowOFrOHayatw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzoxMzowOFrOHayatw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MTA2Mw==", "bodyText": "This failure is new and seems problematic. It is an elementary test from the very beginning of Beam. It was not failing before.", "url": "https://github.com/apache/beam/pull/12981#discussion_r497851063", "createdAt": "2020-09-30T23:13:08Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -108,95 +120,113 @@ startLocalJobService.finalizedBy stopLocalJobService\n \n /**\n  * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n- * with subprocess SDK harness environments.\n+ * with the specified environment type.\n  */\n-task ulrValidatesRunnerTests(type: Test) {\n-  dependsOn \":sdks:java:container:docker\"\n-\n-  if (!project.hasProperty(\"localJobServicePortFile\")) {\n-    dependsOn startLocalJobService\n+def createUlrValidatesRunnerTask = { name, environmentType ->\n+  Task vrTask = tasks.create(name: name, type: Test, group: \"Verification\") {\n+    description \"PortableRunner Java docker ValidatesRunner suite\"\n+    classpath = configurations.validatesRunner\n+    systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+        \"--runner=TestUniversalRunner\",\n+        \"--experiments=beam_fn_api\",\n+        \"--defaultEnvironmentType=${environmentType}\",\n+        \"--localJobServicePortFile=${localJobServicePortFile}\"\n+    ])\n+    testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+    useJUnit {\n+      includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesBundleFinalizer'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesMapState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesSetState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesOrderedListState'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesTestStream'\n+      excludeCategories 'org.apache.beam.sdk.testing.UsesTimersInParDo'\n+    }\n+    filter {\n+      // There is not currently a category for excluding these _only_ in committed mode\n+      // https://issues.apache.org/jira/browse/BEAM-10445\n+      excludeTestsMatching 'org.apache.beam.sdk.metrics.MetricsTest$CommittedMetricTests.testCommittedCounterMetrics'\n+      // https://issues.apache.org/jira/browse/BEAM-10446\n+      excludeTestsMatching 'org.apache.beam.sdk.metrics.MetricsTest$CommittedMetricTests.testCommittedDistributionMetrics'\n+  \n+      // This test seems erroneously labeled ValidatesRunner\n+      excludeTestsMatching 'org.apache.beam.sdk.schemas.AvroSchemaTest.testAvroPipelineGroupBy'\n+  \n+      // Teardown not called in exceptions\n+      // https://issues.apache.org/jira/browse/BEAM-10447\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInFinishBundle'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInFinishBundleStateful'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInProcessElement'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInProcessElementStateful'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInSetup'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInSetupStateful'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInStartBundle'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ParDoLifecycleTest.testTeardownCalledAfterExceptionInStartBundleStateful'\n+  \n+      // Only known window fns supported, not general window merging\n+      // https://issues.apache.org/jira/browse/BEAM-10448\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowTest.testMergingCustomWindows'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowTest.testMergingCustomWindowsKeyedCollection'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowingTest.testMergingWindowing'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowingTest.testNonPartitioningWindowing'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.GroupByKeyTest$WindowTests.testGroupByKeyMergingWindows'\n+\n+      // Flatten with empty PCollections hangs\n+      // https://issues.apache.org/jira/browse/BEAM-10450\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.FlattenTest.testEmptyFlattenAsSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.FlattenTest.testFlattenPCollectionsEmpty'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.FlattenTest.testFlattenPCollectionsEmptyThenParDo'\n+  \n+      // Empty side inputs hang\n+      // https://issues.apache.org/jira/browse/BEAM-10449\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testWindowedSideInputFixedToFixedWithDefault'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyIterableSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptySingletonSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyListSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMultimapSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMultimapSideInputWithNonDeterministicKeyCoder'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMapSideInput'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ViewTest.testEmptyMapSideInputWithNonDeterministicKeyCoder'\n+  \n+      // Misc failures\n+      // https://issues.apache.org/jira/browse/BEAM-10451\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$WindowingTests.testGlobalCombineWithDefaultsAndTriggers'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$WindowingTests.testSessionsCombine'\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$WindowingTests.testSessionsCombineWithContext'\n+  \n+      // https://issues.apache.org/jira/browse/BEAM-10454\n+      excludeTestsMatching 'org.apache.beam.sdk.testing.PAssertTest.testWindowedIsEqualTo'\n+  \n+      // https://issues.apache.org/jira/browse/BEAM-10453\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.ReshuffleTest.testReshuffleWithTimestampsStreaming'\n+  \n+      // https://issues.apache.org/jira/browse/BEAM-10452\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.CombineTest$BasicTests.testHotKeyCombiningWithAccumulationMode'\n+\n+      // https://issues.apache.org/jira/browse/BEAM-10995\n+      excludeTestsMatching 'org.apache.beam.sdk.transforms.windowing.WindowingTest.testWindowPreservation'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1508919b98866c15c6b3d9ea949f18f6665a5c38"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3068, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}