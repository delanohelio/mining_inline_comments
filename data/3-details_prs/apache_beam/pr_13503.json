{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MTMyMDI5", "number": 13503, "title": "[BEAM-11415] In-progress Go ValidatesRunner framework.", "bodyText": "This PR includes everything I've worked on in the Go ValidatesRunner framework so far, for initial review. Note that it includes the contents of PR #13502 as the first commit since it's a required for this code to work, but that should be reviewed in its own PR. This PR only covers the second commit.\nThis PR creates a new subdirectory, test/validatesrunner, that is intended to just contain a bunch of tests that run and validate lightweight pipelines. It also contains a script that handles starting job servers and expansion services, similar to run_integration_tests.sh, and one initially tested gradle build rule for running it with Flink. Running with the direct runner also works fine, with the command \"go test validatesrunner/... --runner=direct\". Currently, the script has only been confirmed to work with Flink and the direct runner, but it should theoretically work with the Portable runner and Spark as well, once appropriate gradle build rules are figured out.\nMost of the contents here are likely to be transient, chances are this will be merged to be an update to the existing integration directory rather than a whole new directory, and will just replace the existing driver approach to the tests. However, this is still valuable to commit as a starting point to the work.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-08T05:28:54Z", "url": "https://github.com/apache/beam/pull/13503", "merged": true, "mergeCommit": {"oid": "d009fe97db9075a27a4aa8d074f98ca1f9ae9fc4"}, "closed": true, "closedAt": "2020-12-10T00:31:32Z", "author": {"login": "youngoli"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkYdybAFqTU0Nzg2MTcxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkoGtBABqjQwOTI1Nzc3MTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3ODYxNzEz", "url": "https://github.com/apache/beam/pull/13503#pullrequestreview-547861713", "createdAt": "2020-12-09T05:56:19Z", "commit": {"oid": "c39910d82aaa4eff675cdf9c68b0c76b57dd7baa"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo1NjoxOVrOICDzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjowMzo1MFrOICD_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMDQyNw==", "bodyText": "For now, could we use flinkXlangValidatesRunner which at least covers what is in particularly new coverage about this set up. This comment driven by seeing too many vestigial \"new\" implementations that don't get fully migrated.\nTangent, it's generally preferable to rename older implementations to \"old\" than new ones to \"new\" when possible.\nFeel free to disregard if you've already gotten far enough in the consolidation in later commits.", "url": "https://github.com/apache/beam/pull/13503#discussion_r539030427", "createdAt": "2020-12-09T05:56:19Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/build.gradle", "diffHunk": "@@ -50,6 +50,25 @@ golang {\n   }\n }\n \n+// A temporary build rule using the newer, under-construction ValidatesRunner\n+// framework rather than the existing one in the integration directory.\n+// TODO(BEAM-11415): Merge this into existing ValidatesRunner gradle rules.\n+task flinkNewValidatesRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39910d82aaa4eff675cdf9c68b0c76b57dd7baa"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzQwMg==", "bodyText": "Deduplicate w/the socket script higher up please.", "url": "https://github.com/apache/beam/pull/13503#discussion_r539033402", "createdAt": "2020-12-09T06:03:50Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/run_validatesrunner_tests.sh", "diffHunk": "@@ -0,0 +1,174 @@\n+#!/bin/bash\n+#\n+#    Licensed to the Apache Software Foundation (ASF) under one or more\n+#    contributor license agreements.  See the NOTICE file distributed with\n+#    this work for additional information regarding copyright ownership.\n+#    The ASF licenses this file to You under the Apache License, Version 2.0\n+#    (the \"License\"); you may not use this file except in compliance with\n+#    the License.  You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#    Unless required by applicable law or agreed to in writing, software\n+#    distributed under the License is distributed on an \"AS IS\" BASIS,\n+#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#    See the License for the specific language governing permissions and\n+#    limitations under the License.\n+\n+# This script executes ValidatesRunner tests including launching any additional\n+# services needed, such as job services or expansion services. The following\n+# runners are supported, and selected via a flag:\n+#\n+# --runner {portable|direct|flink} (default: portable)\n+#  Select which runner to execute tests on. This flag also determines which\n+#  services to start up and which tests may be skipped.\n+#    direct   - Go SDK Direct Runner\n+#    portable - (default) Python Portable Runner (aka. Reference Runner or FnAPI Runner)\n+#    flink    - Java Flink Runner (local mode)\n+#    spark    - Java Spark Runner (local mode)\n+#\n+# --flink_job_server_jar -> Filepath to jar, used if runner is Flink.\n+# --spark_job_server_jar -> Filepath to jar, used if runner is Spark.\n+# --endpoint -> Replaces jar filepath with existing job server endpoint.\n+#\n+# --expansion_service_jar -> Filepath to jar for expansion service.\n+# --expansion_addr -> Replaces jar filepath with existing expansion service endpoint.\n+#\n+# Execute from the root of the repository. This script requires that necessary\n+# services can be built from the repository.\n+\n+set -e\n+set -v\n+\n+RUNNER=portable\n+\n+exit_background_processes () {\n+  if [[ -n \"$JOBSERVER_PID\" ]]; then\n+    kill -s SIGKILL $JOBSERVER_PID\n+  fi\n+  if [[ -n \"$EXPANSION_PID\" ]]; then\n+    kill -s SIGKILL $EXPANSION_PID\n+  fi\n+}\n+trap exit_background_processes SIGINT SIGTERM EXIT\n+\n+while [[ $# -gt 0 ]]\n+do\n+key=\"$1\"\n+case $key in\n+    --runner)\n+        RUNNER=\"$2\"\n+        shift # past argument\n+        shift # past value\n+        ;;\n+    --flink_job_server_jar)\n+        FLINK_JOB_SERVER_JAR=\"$2\"\n+        shift # past argument\n+        shift # past value\n+        ;;\n+    --spark_job_server_jar)\n+        SPARK_JOB_SERVER_JAR=\"$2\"\n+        shift # past argument\n+        shift # past value\n+        ;;\n+    --endpoint)\n+        ENDPOINT=\"$2\"\n+        shift # past argument\n+        shift # past value\n+        ;;\n+    --expansion_service_jar)\n+        EXPANSION_SERVICE_JAR=\"$2\"\n+        shift # past argument\n+        shift # past value\n+        ;;\n+    --expansion_addr)\n+        EXPANSION_ADDR=\"$2\"\n+        shift # past argument\n+        shift # past value\n+        ;;\n+    *)    # unknown option\n+        echo \"Unknown option: $1\"\n+        exit 1\n+        ;;\n+esac\n+done\n+\n+# Go to the root of the repository\n+cd $(git rev-parse --show-toplevel)\n+\n+# Verify in the root of the repository\n+test -d sdks/go/test\n+\n+# Set up environment based on runner.\n+ARGS=--runner=$RUNNER\n+if [[ \"$RUNNER\" == \"flink\" || \"$RUNNER\" == \"spark\" || \"$RUNNER\" == \"portable\" ]]; then\n+  if [[ -z \"$ENDPOINT\" ]]; then\n+    # Hacky python script to find a free port. Note there is a small chance the chosen port could\n+    # get taken before being claimed by the job server.\n+    SOCKET_SCRIPT=\"\n+import socket\n+s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n+s.bind(('localhost', 0))\n+print(s.getsockname()[1])\n+s.close()\n+    \"\n+    JOB_PORT=$(python -c \"$SOCKET_SCRIPT\")\n+    ENDPOINT=\"localhost:$JOB_PORT\"\n+    echo \"No endpoint specified; starting a new $RUNNER job server on $ENDPOINT\"\n+    if [[ \"$RUNNER\" == \"flink\" ]]; then\n+      java \\\n+          -jar $FLINK_JOB_SERVER_JAR \\\n+          --flink-master [local] \\\n+          --job-port $JOB_PORT \\\n+          --expansion-port 0 \\\n+          --artifact-port 0 &\n+    elif [[ \"$RUNNER\" == \"spark\" ]]; then\n+      java \\\n+          -jar $SPARK_JOB_SERVER_JAR \\\n+          --spark-master-url local \\\n+          --job-port $JOB_PORT \\\n+          --expansion-port 0 \\\n+          --artifact-port 0 &\n+    elif [[ \"$RUNNER\" == \"portable\" ]]; then\n+      python \\\n+          -m apache_beam.runners.portability.local_job_service_main \\\n+          --port $JOB_PORT &\n+    else\n+      echo \"Unknown runner: $RUNNER\"\n+      exit 1;\n+    fi\n+    JOBSERVER_PID=$!\n+  fi\n+\n+  if [[ -z \"$EXPANSION_ADDR\" ]]; then\n+    SOCKET_SCRIPT=\"\n+import socket\n+s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n+s.bind(('localhost', 0))\n+print(s.getsockname()[1])\n+s.close()\n+    \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39910d82aaa4eff675cdf9c68b0c76b57dd7baa"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8a9c7be322fe247b0163b6f08d30ac2807a708a", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/e8a9c7be322fe247b0163b6f08d30ac2807a708a", "committedDate": "2020-12-10T00:21:28Z", "message": "[BEAM-11415] In-progress Go ValidatesRunner framework.\n\nThis commit includes everything I've worked on in the Go ValidatesRunner framework so far, for initial review.\n\nThis creates a new subdirectory, test/validatesrunner, that is intended to just contain a bunch of tests that run and validate lightweight pipelines. It also contains a script that handles starting job servers and expansion services, similar to run_integration_tests.sh, and one initially tested gradle build rule for running it with Flink. Running with the direct runner also works fine, with the command \"go test validatesrunner/... --runner=direct\". Currently, the script has only been confirmed to work with Flink and the direct runner, but it should theoretically work with the Portable runner and Spark as well, once appropriate gradle build rules are figured out.\n\nMost of the contents here are likely to be transient, chances are this will be merged to be an update to the existing integration directory rather than a whole new directory, and will just replace the existing driver approach to the tests. However, this is still valuable to commit as a starting point to the work."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c39910d82aaa4eff675cdf9c68b0c76b57dd7baa", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/c39910d82aaa4eff675cdf9c68b0c76b57dd7baa", "committedDate": "2020-12-08T05:25:07Z", "message": "[BEAM-11415] In-progress Go ValidatesRunner framework.\n\nThis commit includes everything I've worked on in the Go ValidatesRunner framework so far, for initial review.\n\nThis creates a new subdirectory, test/validatesrunner, that is intended to just contain a bunch of tests that run and validate lightweight pipelines. It also contains a script that handles starting job servers and expansion services, similar to run_integration_tests.sh, and one initially tested gradle build rule for running it with Flink. Running with the direct runner also works fine, with the command \"go test validatesrunner/... --runner=direct\". Currently, the script has only been confirmed to work with Flink and the direct runner, but it should theoretically work with the Portable runner and Spark as well, once appropriate gradle build rules are figured out.\n\nMost of the contents here are likely to be transient, chances are this will be merged to be an update to the existing integration directory rather than a whole new directory, and will just replace the existing driver approach to the tests. However, this is still valuable to commit as a starting point to the work."}, "afterCommit": {"oid": "e8a9c7be322fe247b0163b6f08d30ac2807a708a", "author": {"user": {"login": "youngoli", "name": "Daniel Oliveira"}}, "url": "https://github.com/apache/beam/commit/e8a9c7be322fe247b0163b6f08d30ac2807a708a", "committedDate": "2020-12-10T00:21:28Z", "message": "[BEAM-11415] In-progress Go ValidatesRunner framework.\n\nThis commit includes everything I've worked on in the Go ValidatesRunner framework so far, for initial review.\n\nThis creates a new subdirectory, test/validatesrunner, that is intended to just contain a bunch of tests that run and validate lightweight pipelines. It also contains a script that handles starting job servers and expansion services, similar to run_integration_tests.sh, and one initially tested gradle build rule for running it with Flink. Running with the direct runner also works fine, with the command \"go test validatesrunner/... --runner=direct\". Currently, the script has only been confirmed to work with Flink and the direct runner, but it should theoretically work with the Portable runner and Spark as well, once appropriate gradle build rules are figured out.\n\nMost of the contents here are likely to be transient, chances are this will be merged to be an update to the existing integration directory rather than a whole new directory, and will just replace the existing driver approach to the tests. However, this is still valuable to commit as a starting point to the work."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4363, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}