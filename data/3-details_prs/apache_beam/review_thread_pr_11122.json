{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NzgzODg2", "number": 11122, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDozMTozNVrODpuGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNjoyMlrODpvF1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDczNTEzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDozMTozNVrOF5Ewww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoxMToyOFrOGEB1vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ==", "bodyText": "Seems like this was applied to all file-based IO not just TFRecordIO as mentioned in the PR description. Have we done enough experiments to make sure this won't have unintended adverse performance consequences in batch/streaming ? For example, what if the list does not fit in memory ?\nApologies if this was already discussed in the dev list.\ncc: @robertwb @lukecwik @iemejia", "url": "https://github.com/apache/beam/pull/11122#discussion_r395391171", "createdAt": "2020-03-20T00:31:35Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNDI4Ng==", "bodyText": "I believe this could be a regression based upon the above comment a few lines higher then where the code was changed:\n// Pass results via a side input rather than reshuffle, because we need to get an empty\n// iterable to finalize if there are no results.\n\nThe combine globally in the global window will produce a default output in the global window but will throw an exception if used against non-global window PCollections.\nPerformance wise this is likely an improvement overall since runners typically do a better job with GBK then with side inputs. So we could keep this change as an optimization in the global window case and keep the existing behavior for non global windows.", "url": "https://github.com/apache/beam/pull/11122#discussion_r395414286", "createdAt": "2020-03-20T02:28:18Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY1ODkzOA==", "bodyText": "Thanks. Agree with Luke. Combine globally has shuffle (GBK) inside hence breaks above statements. This could be a regression at least for Dataflow when there are no outputs. We should try following cases.\n(1) Dataflow (and possibly other runners may have similar regressions ?) with an empty output.\n(2) Writing using a non-global window while WriteFiles.withWindowedWrites() not set.\nLuke, does that make sense ? Anything else to try out to make sure there's no regression here ?", "url": "https://github.com/apache/beam/pull/11122#discussion_r395658938", "createdAt": "2020-03-20T14:06:21Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3ODMzNA==", "bodyText": "What's the verdict here ? I suggest we revert this and introduce as an optional change since this is a potential regression for Dataflow runner.", "url": "https://github.com/apache/beam/pull/11122#discussion_r406478334", "createdAt": "2020-04-09T21:08:14Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTc3Mw==", "bodyText": "Created https://issues.apache.org/jira/browse/BEAM-9734 to make sure that this does not get into 2.21.0", "url": "https://github.com/apache/beam/pull/11122#discussion_r406479773", "createdAt": "2020-04-09T21:11:16Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2ODYzMg==", "bodyText": "Imo just a revert would be better - giving an option to something that is not validated and can have unexpected adverse effects would result in user's confusion", "url": "https://github.com/apache/beam/pull/11122#discussion_r406668632", "createdAt": "2020-04-10T08:53:30Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjg3OA==", "bodyText": "I'm not sure what's the verdict right now. I think we should revert this and discuss further steps with repo free of regressions. Tagging @lukecwik for input about leaving the optimization for global windows. @chamikaramj how do you think the optional change could be applied? A runtime flag for the runner?", "url": "https://github.com/apache/beam/pull/11122#discussion_r406672878", "createdAt": "2020-04-10T09:04:29Z", "author": {"login": "mwalenia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NTIzMg==", "bodyText": "You could always apply the trigger if it is guaranteed to produce output by checking what the trigger definition is. I don't think you need a flag.\nI'm not sure how much of a holistic picture of the whole WriteFiles transform was done to see if there is a better way to structure the transforms but that will likely be much harder because WriteFiles isn't a trivial transform.", "url": "https://github.com/apache/beam/pull/11122#discussion_r406875232", "createdAt": "2020-04-10T18:05:28Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NzYzMA==", "bodyText": "Thanks for reverting.\nMy suggestion was to fork the transform expansion to use GlobalCombine when specifically requested through a transform parameter (for example see how we fork TextIO.Read expansion based on withHintMatchesManyFiles()).\nhttps://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TextIO.java#L371\nhttps://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TextIO.java#L401\nI agree that the more flags we add the more confusing it becomes for users. So we should make sure that there are significant advantages in adding this option through performance benchmarking.", "url": "https://github.com/apache/beam/pull/11122#discussion_r406877630", "createdAt": "2020-04-10T18:11:28Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTE3MQ=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDg5NzUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNjoyMlrOF5GQww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzo0MjoxN1rOF5J4QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTc0Nw==", "bodyText": "nit: This should have been private class since its an implementation detail and didn't need to expose this to users of the WriteFiles transform.", "url": "https://github.com/apache/beam/pull/11122#discussion_r395415747", "createdAt": "2020-03-20T02:36:22Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));\n       }\n     }\n   }\n \n+  public static class ToListCombineFn<ResultT>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NTAwOA==", "bodyText": "You're right, I just copy pasted the code from Jira. It was my first PR in Beam and I wanted to get the workflow without digging the code proposed.", "url": "https://github.com/apache/beam/pull/11122#discussion_r395475008", "createdAt": "2020-03-20T07:42:17Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/WriteFiles.java", "diffHunk": "@@ -410,13 +412,44 @@ private GatherResults(Coder<ResultT> resultCoder) {\n       } else {\n         // Pass results via a side input rather than reshuffle, because we need to get an empty\n         // iterable to finalize if there are no results.\n-        return input\n-            .getPipeline()\n-            .apply(Reify.viewInGlobalWindow(input.apply(View.asList()), ListCoder.of(resultCoder)));\n+        return input.apply(\"ToList\", Combine.globally(new ToListCombineFn<>()));\n       }\n     }\n   }\n \n+  public static class ToListCombineFn<ResultT>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTc0Nw=="}, "originalCommit": {"oid": "dfa0146a29a98ff926e01291f012abe4b58594be"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1639, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}