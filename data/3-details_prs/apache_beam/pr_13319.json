{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDY1MjI5", "number": 13319, "title": "[BEAM-11173] Add Bigtable table with read operation", "bodyText": "Added Bigtable table provider with simple read operation - filters and write will be done in another one in the near future.\nProblems:\nBeamSQL doesn't support ARRAY<ROW>. If you use\nCREATE TABLE test(\n  key VARCHAR,\n  family ROW<q1 ARRAY<ROW<val VARCHAR, timestampMicros BIGINT>>>\n)\n\nand then\nSELECT t.key, t.family.q1  FROM test t\nCalcite shouts that it couldn't parse the generated code.\nWhat is possible is of little value:\nSELECT t.key, t.family.q1[0] FROM test t\nSo it's blocked to select all cells with timestamp and labels for now, but as I read about Bigtable it's usually not the desired case (the schema advice is to have single value per cell and usually only the latest value is needed).\nI used val instead of value because value is a keyword in SQL and hence would need to be used with backslashes.\nFor the Flat approach I followed the Spark's approach [1]\nFor the Row schema I combined Flink's approach [2] (with only latest values) and Bigquery's approach [3] (with possibility of using ROW)\n[1] https://stackoverflow.com/questions/39530938/sparksql-on-hbase-tables\n[2] https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/connectors/hbase.html\n[3] https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#bigtableoptions\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-11-12T18:11:10Z", "url": "https://github.com/apache/beam/pull/13319", "merged": true, "mergeCommit": {"oid": "18f7a32f36ca3996fc71b64eb978ff44b4217e63"}, "closed": true, "closedAt": "2020-12-01T06:14:58Z", "author": {"login": "piotr-szuberski"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcKQ5IgBqjM5OTQ0MTY3MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf-qBXABqjQwMzgxNzMxNTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d494d8c0c0daabdc0906ce83dc2cf5e249d3a5db", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d494d8c0c0daabdc0906ce83dc2cf5e249d3a5db", "committedDate": "2020-11-12T17:57:46Z", "message": "[BEAM-11173] Add Bigtable table with read operation"}, "afterCommit": {"oid": "2e33eaa5bfb67d5add4a7948cdecfe63e7c6a219", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2e33eaa5bfb67d5add4a7948cdecfe63e7c6a219", "committedDate": "2020-11-13T17:04:27Z", "message": "[BEAM-11173] Add Bigtable table with read operation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDMzMzcz", "url": "https://github.com/apache/beam/pull/13319#pullrequestreview-530433373", "createdAt": "2020-11-13T21:41:02Z", "commit": {"oid": "2e33eaa5bfb67d5add4a7948cdecfe63e7c6a219"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0MTowM1rOHzAdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0Mzo0MVrOHzAhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NjkyMQ==", "bodyText": "Nit: it might be better to list the BigTable reference: https://cloud.google.com/bigtable/docs/reference/data/rpc/google.bigtable.v2", "url": "https://github.com/apache/beam/pull/13319#discussion_r523246921", "createdAt": "2020-11-13T21:41:03Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigtable/BigtableRowToBeamRow.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.bigtable;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.KEY;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.LABELS;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.TIMESTAMP_MICROS;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.VALUE;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.bigtable.v2.Cell;\n+import com.google.bigtable.v2.Column;\n+import com.google.bigtable.v2.Family;\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SimpleFunction;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.primitives.Longs;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})\n+public class BigtableRowToBeamRow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e33eaa5bfb67d5add4a7948cdecfe63e7c6a219"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Nzk2OQ==", "bodyText": "Can you add java doc here to give briefly design decision for mapping from bigtable row to Beam row.\nI see that bigtable row contains\nRow: Key, Family[]\nFamily: ... Column[]\nColumn: ... Cell[]\nCell:  ...Value\ndocument current mapping seems will be straightforward?", "url": "https://github.com/apache/beam/pull/13319#discussion_r523247969", "createdAt": "2020-11-13T21:43:41Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigtable/BigtableRowToBeamRow.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.bigtable;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.KEY;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.LABELS;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.TIMESTAMP_MICROS;\n+import static org.apache.beam.sdk.extensions.sql.meta.provider.bigtable.BigtableTable.VALUE;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.bigtable.v2.Cell;\n+import com.google.bigtable.v2.Column;\n+import com.google.bigtable.v2.Family;\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SimpleFunction;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.primitives.Longs;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})\n+public class BigtableRowToBeamRow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e33eaa5bfb67d5add4a7948cdecfe63e7c6a219"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10edfe1b5c05983f64a37d5a7531c32afcfef088", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/10edfe1b5c05983f64a37d5a7531c32afcfef088", "committedDate": "2020-11-17T10:30:15Z", "message": "Add support for Spark's hbase mapping approach with schema in TBLPROPERTIES"}, "afterCommit": {"oid": "eba3ffe002ef2e246ad0839351201c9d9265299a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eba3ffe002ef2e246ad0839351201c9d9265299a", "committedDate": "2020-11-17T10:35:39Z", "message": "Add support for Spark's hbase mapping approach with schema in TBLPROPERTIES"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eba3ffe002ef2e246ad0839351201c9d9265299a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eba3ffe002ef2e246ad0839351201c9d9265299a", "committedDate": "2020-11-17T10:35:39Z", "message": "Add support for Spark's hbase mapping approach with schema in TBLPROPERTIES"}, "afterCommit": {"oid": "b94877a49e6f59752209aab6ed10fca399f272b8", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b94877a49e6f59752209aab6ed10fca399f272b8", "committedDate": "2020-11-17T13:55:11Z", "message": "Add support for Spark's hbase mapping approach with schema in TBLPROPERTIES"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "530e548d68458d430070d8e683e47fc905558dfa", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/530e548d68458d430070d8e683e47fc905558dfa", "committedDate": "2020-11-17T14:15:01Z", "message": "Fight with checker - nullness"}, "afterCommit": {"oid": "77e077478bfe3e7ec7bfe773a09d252cc7e26f0d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/77e077478bfe3e7ec7bfe773a09d252cc7e26f0d", "committedDate": "2020-11-17T14:17:41Z", "message": "Fight with checker - nullness"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f72fe4962bfdb5709daf749af6e2ba435a8f5bb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/8f72fe4962bfdb5709daf749af6e2ba435a8f5bb", "committedDate": "2020-11-17T15:02:54Z", "message": "Fix test"}, "afterCommit": {"oid": "5472e116ea644d52a1d7a86da457bf05f4442918", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5472e116ea644d52a1d7a86da457bf05f4442918", "committedDate": "2020-11-17T15:06:59Z", "message": "Fix test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49b5503dcfbecf25caf0efd511d61a3a9a276077", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/49b5503dcfbecf25caf0efd511d61a3a9a276077", "committedDate": "2020-11-17T15:24:19Z", "message": "Fix whitespace and checkstyle"}, "afterCommit": {"oid": "ae0ff9c1bf3d5b77a4313cc6ab4dabf2dd7403d3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ae0ff9c1bf3d5b77a4313cc6ab4dabf2dd7403d3", "committedDate": "2020-11-18T07:51:32Z", "message": "Add support for Spark's hbase mapping approach with schema in TBLPROPERTIES"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "091cdf1f1ca8eadf55622488f3d06dcd27dfc483", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/091cdf1f1ca8eadf55622488f3d06dcd27dfc483", "committedDate": "2020-11-18T12:26:11Z", "message": "Move transforms to io/bigtable module"}, "afterCommit": {"oid": "ff234c6cea73577ec63b867faecd2671dc649610", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ff234c6cea73577ec63b867faecd2671dc649610", "committedDate": "2020-11-18T12:55:20Z", "message": "Move transforms to io/bigtable module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODExMzgx", "url": "https://github.com/apache/beam/pull/13319#pullrequestreview-536811381", "createdAt": "2020-11-23T20:13:58Z", "commit": {"oid": "ff234c6cea73577ec63b867faecd2671dc649610"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxMzo1OFrOH4dtjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyMjowMVrOH4f38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2OTEwMg==", "bodyText": "for this functions and other functions below, as they are already private functions, maybe should remove the static?", "url": "https://github.com/apache/beam/pull/13319#discussion_r528969102", "createdAt": "2020-11-23T20:13:58Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigtable/BigtableTable.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.bigtable;\n+\n+import static java.util.stream.Collectors.toSet;\n+import static org.apache.beam.sdk.io.gcp.bigtable.RowUtils.COLUMNS_MAPPING;\n+import static org.apache.beam.sdk.io.gcp.bigtable.RowUtils.KEY;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists.newArrayList;\n+\n+import com.alibaba.fastjson.JSONObject;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.extensions.sql.impl.BeamTableStatistics;\n+import org.apache.beam.sdk.extensions.sql.meta.SchemaBaseBeamTable;\n+import org.apache.beam.sdk.extensions.sql.meta.Table;\n+import org.apache.beam.sdk.extensions.sql.meta.provider.InvalidTableException;\n+import org.apache.beam.sdk.io.gcp.bigtable.BigtableIO;\n+import org.apache.beam.sdk.io.gcp.bigtable.BigtableRowToBeamRow;\n+import org.apache.beam.sdk.io.gcp.bigtable.BigtableRowToBeamRowFlat;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Splitter;\n+\n+@Experimental\n+public class BigtableTable extends SchemaBaseBeamTable implements Serializable {\n+  // Should match:\n+  // googleapis.com/bigtable/projects/projectId/instances/instanceId/tables/tableId\"\n+  private static final Pattern locationPattern =\n+      Pattern.compile(\n+          \"(?<host>.+)/bigtable/projects/(?<projectId>.+)/instances/(?<instanceId>.+)/tables/(?<tableId>.+)\");\n+\n+  private final String projectId;\n+  private final String instanceId;\n+  private final String tableId;\n+  private String emulatorHost = \"\";\n+\n+  private boolean useFlatSchema = false;\n+\n+  private Map<String, List<String>> columnsMapping = new HashMap<>();\n+\n+  BigtableTable(Table table) {\n+    super(table.getSchema());\n+    validateSchema(schema);\n+\n+    String location = table.getLocation();\n+    if (location == null) {\n+      throw new IllegalStateException(\"LOCATION is required\");\n+    }\n+    Matcher matcher = locationPattern.matcher(location);\n+    validateMatcher(matcher, location);\n+\n+    this.projectId = getMatcherValue(matcher, \"projectId\");\n+    this.instanceId = getMatcherValue(matcher, \"instanceId\");\n+    this.tableId = getMatcherValue(matcher, \"tableId\");\n+    String host = getMatcherValue(matcher, \"host\"); // googleapis.com or localhost:<PORT>\n+    if (!\"googleapis.com\".equals(host)) {\n+      this.emulatorHost = host;\n+    }\n+\n+    JSONObject properties = table.getProperties();\n+    if (properties.containsKey(COLUMNS_MAPPING)) {\n+      columnsMapping = parseColumnsMapping(properties.getString(COLUMNS_MAPPING));\n+      validateColumnsMapping(columnsMapping, schema);\n+      useFlatSchema = true;\n+    }\n+  }\n+\n+  @Override\n+  public PCollection<Row> buildIOReader(PBegin begin) {\n+    BigtableIO.Read readTransform =\n+        BigtableIO.read().withProjectId(projectId).withInstanceId(instanceId).withTableId(tableId);\n+    if (!emulatorHost.isEmpty()) {\n+      readTransform = readTransform.withEmulator(emulatorHost);\n+    }\n+    return readTransform\n+        .expand(begin)\n+        .apply(\n+            \"BigtableRowToBeamRow\",\n+            useFlatSchema\n+                ? new BigtableRowToBeamRowFlat(schema, columnsMapping)\n+                : new BigtableRowToBeamRow(schema))\n+        .setRowSchema(schema);\n+  }\n+\n+  @Override\n+  public POutput buildIOWriter(PCollection<Row> input) {\n+    throw new UnsupportedOperationException(\"Write to Cloud Bigtable is not yet supported\");\n+  }\n+\n+  @Override\n+  public PCollection.IsBounded isBounded() {\n+    return PCollection.IsBounded.BOUNDED;\n+  }\n+\n+  @Override\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+    return BeamTableStatistics.BOUNDED_UNKNOWN;\n+  }\n+\n+  private static Map<String, List<String>> parseColumnsMapping(String commaSeparatedMapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff234c6cea73577ec63b867faecd2671dc649610"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMDg3Ng==", "bodyText": "Add a test to hit\n  private static void validateMatcher(Matcher matcher, String location) {\n    if (!matcher.matches()) {\n      throw new InvalidTableException(\n          \"Bigtable location must be in the following format:\"\n              + \" 'googleapis.com/bigtable/projects/projectId/instances/instanceId/tables/tableId'\"\n              + \" but was: \"\n              + location);\n    }\n  }\n\n?", "url": "https://github.com/apache/beam/pull/13319#discussion_r529000876", "createdAt": "2020-11-23T21:16:37Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigtable/BigtableTableCreationFailuresTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.bigtable;\n+\n+import static org.apache.beam.sdk.io.gcp.testing.BigtableTestUtils.checkMessage;\n+import static org.junit.Assert.assertThrows;\n+\n+import org.apache.beam.sdk.extensions.sql.BeamSqlCli;\n+import org.apache.beam.sdk.extensions.sql.impl.ParseException;\n+import org.apache.beam.sdk.extensions.sql.meta.Table;\n+import org.apache.beam.sdk.extensions.sql.meta.provider.TableProvider;\n+import org.apache.beam.sdk.extensions.sql.meta.store.InMemoryMetaStore;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})\n+public class BigtableTableCreationFailuresTest {\n+\n+  private final InMemoryMetaStore metaStore = new InMemoryMetaStore();\n+  private final TableProvider tableProvider = new BigtableTableProvider();\n+  private BeamSqlCli cli;\n+\n+  @Before\n+  public void setUp() {\n+    metaStore.registerProvider(tableProvider);\n+    cli = new BeamSqlCli().metaStore(metaStore);\n+  }\n+\n+  @Test\n+  public void testCreateWithoutTypeFails() {\n+    String createTable = \"CREATE EXTERNAL TABLE failure(something VARCHAR)\";\n+    ParseException e = assertThrows(ParseException.class, () -> cli.execute(createTable));\n+    checkMessage(e.getMessage(), \"Unable to parse query\");\n+  }\n+\n+  @Test\n+  public void testCreateWithoutLocationFails() {\n+    String createTable =\n+        \"CREATE EXTERNAL TABLE fail(key VARCHAR, something VARCHAR) \\n\" + \"TYPE bigtable \\n\";\n+    cli.execute(createTable);\n+    Table table = metaStore.getTables().get(\"fail\");\n+\n+    IllegalStateException e =\n+        assertThrows(IllegalStateException.class, () -> tableProvider.buildBeamSqlTable(table));\n+    checkMessage(e.getMessage(), \"LOCATION\");\n+  }\n+\n+  @Test\n+  public void testCreateWithoutKeyFails() {\n+    String createTable =\n+        \"CREATE EXTERNAL TABLE fail(something VARCHAR) \\n\"\n+            + \"TYPE bigtable \\n\"\n+            + \"LOCATION '\"\n+            + location()\n+            + \"'\";\n+    cli.execute(createTable);\n+    Table table = metaStore.getTables().get(\"fail\");\n+    IllegalStateException e =\n+        assertThrows(IllegalStateException.class, () -> tableProvider.buildBeamSqlTable(table));\n+    checkMessage(e.getMessage(), \"Schema has to contain 'key' field\");\n+  }\n+\n+  @Test\n+  public void testCreateWrongKeyTypeFails() {\n+    String createTable =\n+        \"CREATE EXTERNAL TABLE fail(key FLOAT) \\n\"\n+            + \"TYPE bigtable \\n\"\n+            + \"LOCATION '\"\n+            + location()\n+            + \"'\";\n+    cli.execute(createTable);\n+    Table table = metaStore.getTables().get(\"fail\");\n+    IllegalArgumentException e =\n+        assertThrows(IllegalArgumentException.class, () -> tableProvider.buildBeamSqlTable(table));\n+    checkMessage(e.getMessage(), \"key field type should be STRING but was FLOAT\");\n+  }\n+\n+  @Test\n+  public void testCreatePropertiesDontMatchSchema() {\n+    String createTable =\n+        \"CREATE EXTERNAL TABLE fail(key VARCHAR, q BIGINT, qq BINARY) \\n\"\n+            + \"TYPE bigtable \\n\"\n+            + \"LOCATION '\"\n+            + location()\n+            + \"' \\n\"\n+            + \"TBLPROPERTIES '{\\\"columnsMapping\\\": \\\"f:b,f:c\\\"}'\";\n+    cli.execute(createTable);\n+    Table table = metaStore.getTables().get(\"fail\");\n+    IllegalStateException e =\n+        assertThrows(IllegalStateException.class, () -> tableProvider.buildBeamSqlTable(table));\n+    checkMessage(e.getMessage(), \"does not fit to schema field names\");\n+  }\n+\n+  @Test\n+  public void testCreatePropertiesCountNotEqualSchemaFields() {\n+    String createTable =\n+        \"CREATE EXTERNAL TABLE fail(key VARCHAR, q BIGINT, qq BINARY) \\n\"\n+            + \"TYPE bigtable \\n\"\n+            + \"LOCATION '\"\n+            + location()\n+            + \"' \\n\"\n+            + \"TBLPROPERTIES '{\\\"columnsMapping\\\": \\\"f:q\\\"}'\";\n+    cli.execute(createTable);\n+    Table table = metaStore.getTables().get(\"fail\");\n+    IllegalStateException e =\n+        assertThrows(IllegalStateException.class, () -> tableProvider.buildBeamSqlTable(table));\n+    checkMessage(e.getMessage(), \"Schema fields count: '2' does not fit columnsMapping count: '1'\");\n+  }\n+\n+  private static String location() {\n+    return \"googleapis.com/bigtable/projects/fakeProject/instances/fakeInstance/tables/beamTable\";\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff234c6cea73577ec63b867faecd2671dc649610"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwNDUyOA==", "bodyText": "So what is the reason that single type only supports these 5 types (i.e. not include other SQL types like TIMESTAMP)?", "url": "https://github.com/apache/beam/pull/13319#discussion_r529004528", "createdAt": "2020-11-23T21:22:01Z", "author": {"login": "amaliujia"}, "path": "website/www/site/content/en/documentation/dsls/sql/extensions/create-external-table.md", "diffHunk": "@@ -204,6 +205,131 @@ TYPE bigquery\n LOCATION 'testing-integration:apache.users'\n ```\n \n+## Cloud Bigtable\n+\n+### Syntax\n+\n+```\n+CREATE EXTERNAL TABLE [ IF NOT EXISTS ] tableName (\n+    key VARCHAR NOT NULL,\n+    family ROW<qualifier cells [, qualifier cells ]* >\n+    [, family ROW< qualifier cells [, qualifier cells ]* > ]*\n+)\n+TYPE bigtable\n+LOCATION 'googleapis.com/bigtable/projects/[PROJECT_ID]/instances/[INSTANCE_ID]/tables/[TABLE]'\n+```\n+\n+*   `key`: key of the Bigtable row\n+*   `family`: name of the column family\n+*   `qualifier`: the column qualifier\n+*   `cells`: Either of each value:\n+    *   `TYPE`\n+    *   `ARRAY<SIMPLE_TYPE>`\n+*   `LOCATION`:\n+    *   `PROJECT_ID`: ID of the Google Cloud Project.\n+    *   `INSTANCE_ID`: Bigtable instance ID.\n+    *   `TABLE`: Bigtable Table ID.\n+*   `TYPE`: `SIMPLE_TYPE` or `CELL_ROW`\n+*   `CELL_ROW`: `ROW<val SIMPLE_TYPE [, timestampMicros BIGINT [NOT NULL]] [, labels ARRAY<VARCHAR> [NOT NULL]]`\n+*   `SIMPLE_TYPE`: on of the following:\n+    *   `BINARY`\n+    *   `VARCHAR`\n+    *   `BIGINT`\n+    *   `DOUBLE`\n+    *   `BOOLEAN`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff234c6cea73577ec63b867faecd2671dc649610"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff234c6cea73577ec63b867faecd2671dc649610", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ff234c6cea73577ec63b867faecd2671dc649610", "committedDate": "2020-11-18T12:55:20Z", "message": "Move transforms to io/bigtable module"}, "afterCommit": {"oid": "24860f3e3fad5e01d43161b2b84fe30b05078c3a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/24860f3e3fad5e01d43161b2b84fe30b05078c3a", "committedDate": "2020-11-24T10:30:23Z", "message": "Add test for invalid location"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24860f3e3fad5e01d43161b2b84fe30b05078c3a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/24860f3e3fad5e01d43161b2b84fe30b05078c3a", "committedDate": "2020-11-24T10:30:23Z", "message": "Add test for invalid location"}, "afterCommit": {"oid": "eeb888fba9e80a5be23d65357dcbcfd0e1cd4b8e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eeb888fba9e80a5be23d65357dcbcfd0e1cd4b8e", "committedDate": "2020-11-24T12:49:23Z", "message": "Add test for invalid location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1dfa1caae8ae4a53d00aad0de64b63186fb6859", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c1dfa1caae8ae4a53d00aad0de64b63186fb6859", "committedDate": "2020-11-25T13:48:03Z", "message": "[BEAM-11173] Add Bigtable table with read operation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eeb888fba9e80a5be23d65357dcbcfd0e1cd4b8e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eeb888fba9e80a5be23d65357dcbcfd0e1cd4b8e", "committedDate": "2020-11-24T12:49:23Z", "message": "Add test for invalid location"}, "afterCommit": {"oid": "c1dfa1caae8ae4a53d00aad0de64b63186fb6859", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c1dfa1caae8ae4a53d00aad0de64b63186fb6859", "committedDate": "2020-11-25T13:48:03Z", "message": "[BEAM-11173] Add Bigtable table with read operation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4832, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}