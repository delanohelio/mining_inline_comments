{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTM4MTk3", "number": 10795, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo1NToxMFrODfdnFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo1Nzo1MFrODfdqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzE3NTg5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo1NToxMFrOFpLfBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NTozOFrOFpQz8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNDEwMg==", "bodyText": "900 remaining elements?", "url": "https://github.com/apache/beam/pull/10795#discussion_r378724102", "createdAt": "2020-02-13T08:55:10Z", "author": {"login": "dmvk"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -2409,6 +2410,39 @@ public void testRequiresTimeSortedInputWithTestStream() {\n       testTimeSortedInput(numElements, pipeline.apply(stream.advanceWatermarkToInfinity()));\n     }\n \n+    @Test\n+    @Category({\n+      ValidatesRunner.class,\n+      UsesStatefulParDo.class,\n+      UsesRequiresTimeSortedInput.class,\n+      UsesStrictTimerOrdering.class,\n+      UsesTestStream.class\n+    })\n+    public void testRequiresTimeSortedInputWithLateDataAndAllowedLateness() {\n+      // generate list long enough to rule out random shuffle in sorted order\n+      int numElements = 1000;\n+      List<Long> eventStamps =\n+          LongStream.range(0, numElements)\n+              .mapToObj(i -> numElements - i)\n+              .collect(Collectors.toList());\n+      TestStream.Builder<Long> input = TestStream.create(VarLongCoder.of());\n+      for (Long stamp : eventStamps) {\n+        input = input.addElements(TimestampedValue.of(stamp, Instant.ofEpochMilli(stamp)));\n+        if (stamp == 100) {\n+          // advance watermark when we have 100 remaining elements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744b9909fb985b3c84ab8cb98dbdd3450183ad0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1MzA1MQ==", "bodyText": "100 because the stamp is descending. The watermark advances past the last 100 elements which should get dropped.", "url": "https://github.com/apache/beam/pull/10795#discussion_r378753051", "createdAt": "2020-02-13T09:49:43Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -2409,6 +2410,39 @@ public void testRequiresTimeSortedInputWithTestStream() {\n       testTimeSortedInput(numElements, pipeline.apply(stream.advanceWatermarkToInfinity()));\n     }\n \n+    @Test\n+    @Category({\n+      ValidatesRunner.class,\n+      UsesStatefulParDo.class,\n+      UsesRequiresTimeSortedInput.class,\n+      UsesStrictTimerOrdering.class,\n+      UsesTestStream.class\n+    })\n+    public void testRequiresTimeSortedInputWithLateDataAndAllowedLateness() {\n+      // generate list long enough to rule out random shuffle in sorted order\n+      int numElements = 1000;\n+      List<Long> eventStamps =\n+          LongStream.range(0, numElements)\n+              .mapToObj(i -> numElements - i)\n+              .collect(Collectors.toList());\n+      TestStream.Builder<Long> input = TestStream.create(VarLongCoder.of());\n+      for (Long stamp : eventStamps) {\n+        input = input.addElements(TimestampedValue.of(stamp, Instant.ofEpochMilli(stamp)));\n+        if (stamp == 100) {\n+          // advance watermark when we have 100 remaining elements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNDEwMg=="}, "originalCommit": {"oid": "d744b9909fb985b3c84ab8cb98dbdd3450183ad0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMTM3Nw==", "bodyText": "\ud83e\udd26\u200d\u2642 makes sense, thanks for clarification", "url": "https://github.com/apache/beam/pull/10795#discussion_r378811377", "createdAt": "2020-02-13T11:45:38Z", "author": {"login": "dmvk"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -2409,6 +2410,39 @@ public void testRequiresTimeSortedInputWithTestStream() {\n       testTimeSortedInput(numElements, pipeline.apply(stream.advanceWatermarkToInfinity()));\n     }\n \n+    @Test\n+    @Category({\n+      ValidatesRunner.class,\n+      UsesStatefulParDo.class,\n+      UsesRequiresTimeSortedInput.class,\n+      UsesStrictTimerOrdering.class,\n+      UsesTestStream.class\n+    })\n+    public void testRequiresTimeSortedInputWithLateDataAndAllowedLateness() {\n+      // generate list long enough to rule out random shuffle in sorted order\n+      int numElements = 1000;\n+      List<Long> eventStamps =\n+          LongStream.range(0, numElements)\n+              .mapToObj(i -> numElements - i)\n+              .collect(Collectors.toList());\n+      TestStream.Builder<Long> input = TestStream.create(VarLongCoder.of());\n+      for (Long stamp : eventStamps) {\n+        input = input.addElements(TimestampedValue.of(stamp, Instant.ofEpochMilli(stamp)));\n+        if (stamp == 100) {\n+          // advance watermark when we have 100 remaining elements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNDEwMg=="}, "originalCommit": {"oid": "d744b9909fb985b3c84ab8cb98dbdd3450183ad0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzE4NDE5OnYy", "diffSide": "RIGHT", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/StatefulDoFnRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo1Nzo1MFrOFpLkJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODo1Nzo1MFrOFpLkJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNTQxMw==", "bodyText": "Can you add a javadoc for this method?", "url": "https://github.com/apache/beam/pull/10795#discussion_r378725413", "createdAt": "2020-02-13T08:57:50Z", "author": {"login": "dmvk"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/StatefulDoFnRunner.java", "diffHunk": "@@ -252,18 +255,29 @@ private void onSortFlushTimer(BoundedWindow window, Instant timestamp) {\n     keep.forEach(sortBuffer::add);\n     minStampState.write(newMinStamp);\n     if (newMinStamp.isBefore(BoundedWindow.TIMESTAMP_MAX_VALUE)) {\n-      setupFlushTimerAndWatermarkHold(namespace, newMinStamp);\n+      setupFlushTimerAndWatermarkHold(namespace, window, newMinStamp);\n     } else {\n       clearWatermarkHold(namespace);\n     }\n   }\n \n-  private void setupFlushTimerAndWatermarkHold(StateNamespace namespace, Instant flush) {\n+  private void setupFlushTimerAndWatermarkHold(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d744b9909fb985b3c84ab8cb98dbdd3450183ad0"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2174, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}