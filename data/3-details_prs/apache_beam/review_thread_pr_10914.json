{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODgyNDA1", "number": 10914, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MjozM1rODjklAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxMjozOVrODqfy4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjI2MDQ5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MjozM1rOFvdH7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjozMToyMlrOFv7DiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU1Nw==", "bodyText": "Note that this change will make timestamp unpredictable would likely result in flaky tests.", "url": "https://github.com/apache/beam/pull/10914#discussion_r385304557", "createdAt": "2020-02-27T18:52:33Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "diffHunk": "@@ -71,16 +72,14 @@ def process(\n class AddTimestampFn(beam.DoFn):\n   \"\"\"A DoFn that attaches timestamps to its elements.\n \n-  It takes a string of integers and it attaches to each of them\n-  a timestamp of its same value.\n+  It just takes an element and adds a current timestamp.\n \n-  For example, [120, 225, 312] will result in:\n-  [(120, Timestamp(120)), (225, Timestamp(225)), (312, Timestamp(312))].\n+  For example, Sometext will result in:\n+  (Sometext, Timestamp(1234567890).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ff251fe26241924cf62e845419aa9bd53d74e5b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMzI1OA==", "bodyText": "Fair point. The reason of that change is to make it work not only with int values, as an example is called wordcount. Will it be ok if we will use the positive hashed value of \"Sometext\" as a base for timestamp?", "url": "https://github.com/apache/beam/pull/10914#discussion_r385313258", "createdAt": "2020-02-27T19:08:49Z", "author": {"login": "Tesio"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "diffHunk": "@@ -71,16 +72,14 @@ def process(\n class AddTimestampFn(beam.DoFn):\n   \"\"\"A DoFn that attaches timestamps to its elements.\n \n-  It takes a string of integers and it attaches to each of them\n-  a timestamp of its same value.\n+  It just takes an element and adds a current timestamp.\n \n-  For example, [120, 225, 312] will result in:\n-  [(120, Timestamp(120)), (225, Timestamp(225)), (312, Timestamp(312))].\n+  For example, Sometext will result in:\n+  (Sometext, Timestamp(1234567890).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU1Nw=="}, "originalCommit": {"oid": "7ff251fe26241924cf62e845419aa9bd53d74e5b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MzI0NQ==", "bodyText": "That will be better by making tests reproducible. That will result in elements with timestamps across a wide range. Testers would not be able to predict what element will be in which window.\nwe change the input to be a tuple , with a comma separation.", "url": "https://github.com/apache/beam/pull/10914#discussion_r385343245", "createdAt": "2020-02-27T20:06:12Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "diffHunk": "@@ -71,16 +72,14 @@ def process(\n class AddTimestampFn(beam.DoFn):\n   \"\"\"A DoFn that attaches timestamps to its elements.\n \n-  It takes a string of integers and it attaches to each of them\n-  a timestamp of its same value.\n+  It just takes an element and adds a current timestamp.\n \n-  For example, [120, 225, 312] will result in:\n-  [(120, Timestamp(120)), (225, Timestamp(225)), (312, Timestamp(312))].\n+  For example, Sometext will result in:\n+  (Sometext, Timestamp(1234567890).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU1Nw=="}, "originalCommit": {"oid": "7ff251fe26241924cf62e845419aa9bd53d74e5b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Mjc2MA==", "bodyText": "Well, as this is an example of debugging functionality - more complicated logic could be added during real-time development. Just to keep it simple for windowing and applicable for strings as well - what about basing on string's length to keep it predictable. And keeping int-base for int values?", "url": "https://github.com/apache/beam/pull/10914#discussion_r385392760", "createdAt": "2020-02-27T21:52:28Z", "author": {"login": "Tesio"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "diffHunk": "@@ -71,16 +72,14 @@ def process(\n class AddTimestampFn(beam.DoFn):\n   \"\"\"A DoFn that attaches timestamps to its elements.\n \n-  It takes a string of integers and it attaches to each of them\n-  a timestamp of its same value.\n+  It just takes an element and adds a current timestamp.\n \n-  For example, [120, 225, 312] will result in:\n-  [(120, Timestamp(120)), (225, Timestamp(225)), (312, Timestamp(312))].\n+  For example, Sometext will result in:\n+  (Sometext, Timestamp(1234567890).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU1Nw=="}, "originalCommit": {"oid": "7ff251fe26241924cf62e845419aa9bd53d74e5b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMDExNA==", "bodyText": "I think it is fair to use int() conversion wherever possible and if it does not work do something else. Maybe default to time() as at least it will be more meaningful than length of a string for the example.", "url": "https://github.com/apache/beam/pull/10914#discussion_r385430114", "createdAt": "2020-02-27T23:29:36Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "diffHunk": "@@ -71,16 +72,14 @@ def process(\n class AddTimestampFn(beam.DoFn):\n   \"\"\"A DoFn that attaches timestamps to its elements.\n \n-  It takes a string of integers and it attaches to each of them\n-  a timestamp of its same value.\n+  It just takes an element and adds a current timestamp.\n \n-  For example, [120, 225, 312] will result in:\n-  [(120, Timestamp(120)), (225, Timestamp(225)), (312, Timestamp(312))].\n+  For example, Sometext will result in:\n+  (Sometext, Timestamp(1234567890).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU1Nw=="}, "originalCommit": {"oid": "7ff251fe26241924cf62e845419aa9bd53d74e5b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0ODQ1Mw==", "bodyText": "Fixed that as per comment", "url": "https://github.com/apache/beam/pull/10914#discussion_r385648453", "createdAt": "2020-02-28T11:35:07Z", "author": {"login": "Tesio"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "diffHunk": "@@ -71,16 +72,14 @@ def process(\n class AddTimestampFn(beam.DoFn):\n   \"\"\"A DoFn that attaches timestamps to its elements.\n \n-  It takes a string of integers and it attaches to each of them\n-  a timestamp of its same value.\n+  It just takes an element and adds a current timestamp.\n \n-  For example, [120, 225, 312] will result in:\n-  [(120, Timestamp(120)), (225, Timestamp(225)), (312, Timestamp(312))].\n+  For example, Sometext will result in:\n+  (Sometext, Timestamp(1234567890).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU1Nw=="}, "originalCommit": {"oid": "7ff251fe26241924cf62e845419aa9bd53d74e5b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NDk1Mw==", "bodyText": "Thank you.", "url": "https://github.com/apache/beam/pull/10914#discussion_r385794953", "createdAt": "2020-02-28T16:31:22Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging.py", "diffHunk": "@@ -71,16 +72,14 @@ def process(\n class AddTimestampFn(beam.DoFn):\n   \"\"\"A DoFn that attaches timestamps to its elements.\n \n-  It takes a string of integers and it attaches to each of them\n-  a timestamp of its same value.\n+  It just takes an element and adds a current timestamp.\n \n-  For example, [120, 225, 312] will result in:\n-  [(120, Timestamp(120)), (225, Timestamp(225)), (312, Timestamp(312))].\n+  For example, Sometext will result in:\n+  (Sometext, Timestamp(1234567890).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU1Nw=="}, "originalCommit": {"oid": "7ff251fe26241924cf62e845419aa9bd53d74e5b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODg3NzEyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging_it_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxMjozOVrOF6R_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxNDoxM1rOF6SDRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NjUyOQ==", "bodyText": "This keyword is missing from run(), but it is required (for a future migration from the nose test framework to pytest). Please add support for this in run(). You can follow what the other wordcounts do.", "url": "https://github.com/apache/beam/pull/10914#discussion_r396656529", "createdAt": "2020-03-23T18:12:39Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging_it_test.py", "diffHunk": "@@ -0,0 +1,115 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"End-to-end test for the streaming wordcount example with debug.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+import unittest\n+import uuid\n+from builtins import range\n+\n+from hamcrest.core.core.allof import all_of\n+from nose.plugins.attrib import attr\n+\n+from apache_beam.examples import streaming_wordcount_debugging\n+from apache_beam.io.gcp.tests.pubsub_matcher import PubSubMessageMatcher\n+from apache_beam.runners.runner import PipelineState\n+from apache_beam.testing import test_utils\n+from apache_beam.testing.pipeline_verifiers import PipelineStateMatcher\n+from apache_beam.testing.test_pipeline import TestPipeline\n+\n+INPUT_TOPIC = 'wc_topic_input'\n+OUTPUT_TOPIC = 'wc_topic_output'\n+INPUT_SUB = 'wc_subscription_input'\n+OUTPUT_SUB = 'wc_subscription_output'\n+\n+DEFAULT_INPUT_NUMBERS = 100\n+WAIT_UNTIL_FINISH_DURATION = 6 * 60 * 1000  # in milliseconds\n+\n+\n+class StreamingWordcountDebuggingIT(unittest.TestCase):\n+  def setUp(self):\n+    self.test_pipeline = TestPipeline(is_integration_test=True)\n+    self.project = self.test_pipeline.get_option('project')\n+    self.setup_pubsub()\n+\n+  def setup_pubsub(self):\n+    self.uuid = str(uuid.uuid4())\n+\n+    # Set up PubSub environment.\n+    from google.cloud import pubsub\n+    self.pub_client = pubsub.PublisherClient()\n+    self.input_topic = self.pub_client.create_topic(\n+        self.pub_client.topic_path(self.project, INPUT_TOPIC + self.uuid))\n+    self.output_topic = self.pub_client.create_topic(\n+        self.pub_client.topic_path(self.project, OUTPUT_TOPIC + self.uuid))\n+\n+    self.sub_client = pubsub.SubscriberClient()\n+    self.input_sub = self.sub_client.create_subscription(\n+        self.sub_client.subscription_path(self.project, INPUT_SUB + self.uuid),\n+        self.input_topic.name)\n+    self.output_sub = self.sub_client.create_subscription(\n+        self.sub_client.subscription_path(self.project, OUTPUT_SUB + self.uuid),\n+        self.output_topic.name,\n+        ack_deadline_seconds=60)\n+\n+  def _inject_numbers(self, topic, num_messages):\n+    \"\"\"Inject numbers as test data to PubSub.\"\"\"\n+    logging.debug('Injecting %d numbers to topic %s', num_messages, topic.name)\n+    for n in range(num_messages):\n+      self.pub_client.publish(self.input_topic.name, str(n).encode('utf-8'))\n+\n+  def tearDown(self):\n+    test_utils.cleanup_subscriptions(\n+        self.sub_client, [self.input_sub, self.output_sub])\n+    test_utils.cleanup_topics(\n+        self.pub_client, [self.input_topic, self.output_topic])\n+\n+  @attr('IT')\n+  def test_streaming_wordcount_it(self):\n+    # Build expected dataset.\n+    expected_msg = [('%d: 1' % num).encode('utf-8')\n+                    for num in range(DEFAULT_INPUT_NUMBERS)]\n+\n+    # Set extra options to the pipeline for test purpose\n+    state_verifier = PipelineStateMatcher(PipelineState.RUNNING)\n+    pubsub_msg_verifier = PubSubMessageMatcher(\n+        self.project, self.output_sub.name, expected_msg, timeout=400)\n+    extra_opts = {\n+        'input_subscription': self.input_sub.name,\n+        'output_topic': self.output_topic.name,\n+        'wait_until_finish_duration': WAIT_UNTIL_FINISH_DURATION,\n+        'on_success_matcher': all_of(state_verifier, pubsub_msg_verifier)\n+    }\n+\n+    # Generate input data and inject to PubSub.\n+    self._inject_numbers(self.input_topic, DEFAULT_INPUT_NUMBERS)\n+\n+    # Get pipeline options from command argument: --test-pipeline-options,\n+    # and start pipeline job by calling pipeline main function.\n+    streaming_wordcount_debugging.run(\n+        self.test_pipeline.get_full_options_as_args(**extra_opts),\n+        save_main_session=False)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f69b5802286e79571729cd0dc4f6e1941c73b7"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NzQ3Nw==", "bodyText": "Fixed", "url": "https://github.com/apache/beam/pull/10914#discussion_r396657477", "createdAt": "2020-03-23T18:14:13Z", "author": {"login": "Tesio"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging_it_test.py", "diffHunk": "@@ -0,0 +1,115 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"End-to-end test for the streaming wordcount example with debug.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+import unittest\n+import uuid\n+from builtins import range\n+\n+from hamcrest.core.core.allof import all_of\n+from nose.plugins.attrib import attr\n+\n+from apache_beam.examples import streaming_wordcount_debugging\n+from apache_beam.io.gcp.tests.pubsub_matcher import PubSubMessageMatcher\n+from apache_beam.runners.runner import PipelineState\n+from apache_beam.testing import test_utils\n+from apache_beam.testing.pipeline_verifiers import PipelineStateMatcher\n+from apache_beam.testing.test_pipeline import TestPipeline\n+\n+INPUT_TOPIC = 'wc_topic_input'\n+OUTPUT_TOPIC = 'wc_topic_output'\n+INPUT_SUB = 'wc_subscription_input'\n+OUTPUT_SUB = 'wc_subscription_output'\n+\n+DEFAULT_INPUT_NUMBERS = 100\n+WAIT_UNTIL_FINISH_DURATION = 6 * 60 * 1000  # in milliseconds\n+\n+\n+class StreamingWordcountDebuggingIT(unittest.TestCase):\n+  def setUp(self):\n+    self.test_pipeline = TestPipeline(is_integration_test=True)\n+    self.project = self.test_pipeline.get_option('project')\n+    self.setup_pubsub()\n+\n+  def setup_pubsub(self):\n+    self.uuid = str(uuid.uuid4())\n+\n+    # Set up PubSub environment.\n+    from google.cloud import pubsub\n+    self.pub_client = pubsub.PublisherClient()\n+    self.input_topic = self.pub_client.create_topic(\n+        self.pub_client.topic_path(self.project, INPUT_TOPIC + self.uuid))\n+    self.output_topic = self.pub_client.create_topic(\n+        self.pub_client.topic_path(self.project, OUTPUT_TOPIC + self.uuid))\n+\n+    self.sub_client = pubsub.SubscriberClient()\n+    self.input_sub = self.sub_client.create_subscription(\n+        self.sub_client.subscription_path(self.project, INPUT_SUB + self.uuid),\n+        self.input_topic.name)\n+    self.output_sub = self.sub_client.create_subscription(\n+        self.sub_client.subscription_path(self.project, OUTPUT_SUB + self.uuid),\n+        self.output_topic.name,\n+        ack_deadline_seconds=60)\n+\n+  def _inject_numbers(self, topic, num_messages):\n+    \"\"\"Inject numbers as test data to PubSub.\"\"\"\n+    logging.debug('Injecting %d numbers to topic %s', num_messages, topic.name)\n+    for n in range(num_messages):\n+      self.pub_client.publish(self.input_topic.name, str(n).encode('utf-8'))\n+\n+  def tearDown(self):\n+    test_utils.cleanup_subscriptions(\n+        self.sub_client, [self.input_sub, self.output_sub])\n+    test_utils.cleanup_topics(\n+        self.pub_client, [self.input_topic, self.output_topic])\n+\n+  @attr('IT')\n+  def test_streaming_wordcount_it(self):\n+    # Build expected dataset.\n+    expected_msg = [('%d: 1' % num).encode('utf-8')\n+                    for num in range(DEFAULT_INPUT_NUMBERS)]\n+\n+    # Set extra options to the pipeline for test purpose\n+    state_verifier = PipelineStateMatcher(PipelineState.RUNNING)\n+    pubsub_msg_verifier = PubSubMessageMatcher(\n+        self.project, self.output_sub.name, expected_msg, timeout=400)\n+    extra_opts = {\n+        'input_subscription': self.input_sub.name,\n+        'output_topic': self.output_topic.name,\n+        'wait_until_finish_duration': WAIT_UNTIL_FINISH_DURATION,\n+        'on_success_matcher': all_of(state_verifier, pubsub_msg_verifier)\n+    }\n+\n+    # Generate input data and inject to PubSub.\n+    self._inject_numbers(self.input_topic, DEFAULT_INPUT_NUMBERS)\n+\n+    # Get pipeline options from command argument: --test-pipeline-options,\n+    # and start pipeline job by calling pipeline main function.\n+    streaming_wordcount_debugging.run(\n+        self.test_pipeline.get_full_options_as_args(**extra_opts),\n+        save_main_session=False)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NjUyOQ=="}, "originalCommit": {"oid": "e8f69b5802286e79571729cd0dc4f6e1941c73b7"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1853, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}