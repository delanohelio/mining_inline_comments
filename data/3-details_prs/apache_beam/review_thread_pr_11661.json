{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTE0MzY2", "number": 11661, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxOTo1MFrOD9346w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDozMzo0N1rOEAqnSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjA1NDE5OnYy", "diffSide": "RIGHT", "path": "sdks/python/test-suites/dataflow/py2/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxOTo1MFrOGXoTAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoyOTozOFrOGZNZ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMDY1Nw==", "bodyText": "Can we import this from common.gradle?", "url": "https://github.com/apache/beam/pull/11661#discussion_r427430657", "createdAt": "2020-05-19T16:19:50Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/test-suites/dataflow/py2/build.gradle", "diffHunk": "@@ -205,3 +205,20 @@ task chicagoTaxiExample {\n     }\n   }\n }\n+\n+task runPerformanceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NzIxOQ==", "bodyText": "Sure, there can even be more code moved to common.gradle", "url": "https://github.com/apache/beam/pull/11661#discussion_r429087219", "createdAt": "2020-05-22T07:29:38Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/test-suites/dataflow/py2/build.gradle", "diffHunk": "@@ -205,3 +205,20 @@ task chicagoTaxiExample {\n     }\n   }\n }\n+\n+task runPerformanceTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMDY1Nw=="}, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjU4OTcwOnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODozNzozNVrOGXtn_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozMTozMFrOGZNdBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzk1MA==", "bodyText": "I don't think there is significant value to run across all Python version. We can keep Py 27 and Py37 for now, and then switch to one of \"high-priority\"[1] versions once we introduce that concept. cc: @lazylynx\n[1] https://lists.apache.org/thread.html/re621331e10896ac65f487c1a83cc4a91152e2fd6d7e363c115b1857f%40%3Cdev.beam.apache.org%3E", "url": "https://github.com/apache/beam/pull/11661#discussion_r427517950", "createdAt": "2020-05-19T18:37:35Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "diffHunk": "@@ -58,117 +26,59 @@ def dataflowPipelineArgs = [\n     temp_location   : 'gs://temp-storage-for-end-to-end-tests/temp-it',\n ]\n \n-\n-// Configurations of each Jenkins job.\n-def testConfigurations = [\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py27',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py27 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python27 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py27_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py2',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py35',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py35 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python35 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py35_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py35',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py36',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py36 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python36 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py36_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py36',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py37',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py37 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python37 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py37_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py37',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-]\n-\n+testConfigurations = []\n+pythonVersions = ['27', '35', '36', '37']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4ODAwNA==", "bodyText": "I tried to keep the effect of the job as close to original as possible. I agree that 2 versions of python sound sufficient.", "url": "https://github.com/apache/beam/pull/11661#discussion_r429088004", "createdAt": "2020-05-22T07:31:30Z", "author": {"login": "piotr-szuberski"}, "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "diffHunk": "@@ -58,117 +26,59 @@ def dataflowPipelineArgs = [\n     temp_location   : 'gs://temp-storage-for-end-to-end-tests/temp-it',\n ]\n \n-\n-// Configurations of each Jenkins job.\n-def testConfigurations = [\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py27',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py27 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python27 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py27_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py2',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py35',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py35 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python35 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py35_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py35',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py36',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py36 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python36 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py36_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py36',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py37',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py37 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python37 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py37_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py37',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-]\n-\n+testConfigurations = []\n+pythonVersions = ['27', '35', '36', '37']", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzk1MA=="}, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjU5MjY5OnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODozODoyM1rOGXtp4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowMzo1MlrOGaqISg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxODQzNA==", "bodyText": "Where do we configure the dashboards for these tests? Do we need to configure python version bit in the dashboard configuration as well?", "url": "https://github.com/apache/beam/pull/11661#discussion_r427518434", "createdAt": "2020-05-19T18:38:23Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "diffHunk": "@@ -58,117 +26,59 @@ def dataflowPipelineArgs = [\n     temp_location   : 'gs://temp-storage-for-end-to-end-tests/temp-it',\n ]\n \n-\n-// Configurations of each Jenkins job.\n-def testConfigurations = [\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py27',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py27 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python27 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py27_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py2',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py35',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py35 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python35 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py35_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py35',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py36',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py36 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python36 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py36_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py36',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py37',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py37 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python37 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py37_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py37',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-]\n-\n+testConfigurations = []\n+pythonVersions = ['27', '35', '36', '37']\n+\n+for (pythonVersion in pythonVersions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4ODc2NQ==", "bodyText": "I'm not sure if I understand meaning of \"dashboards\" correctly here, but we are running tasks via proper python modules that have pythonVersion variable already set up, so there is no need to set -PpythonVersion manually.\nEdit: As far as I know there is no dashboard for those tests yet, we just publish the metrics results in BQ. I could add reporting to InfluxDB and draw grafana dashboards for this test, WDYT?\nEdit2: I made changes to publish the results on the grafana dashboards", "url": "https://github.com/apache/beam/pull/11661#discussion_r429088765", "createdAt": "2020-05-22T07:33:24Z", "author": {"login": "piotr-szuberski"}, "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "diffHunk": "@@ -58,117 +26,59 @@ def dataflowPipelineArgs = [\n     temp_location   : 'gs://temp-storage-for-end-to-end-tests/temp-it',\n ]\n \n-\n-// Configurations of each Jenkins job.\n-def testConfigurations = [\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py27',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py27 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python27 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py27_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py2',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py35',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py35 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python35 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py35_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py35',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py36',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py36 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python36 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py36_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py36',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py37',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py37 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python37 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py37_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py37',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-]\n-\n+testConfigurations = []\n+pythonVersions = ['27', '35', '36', '37']\n+\n+for (pythonVersion in pythonVersions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxODQzNA=="}, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwNjQxMA==", "bodyText": "Thanks @piotr-szuberski , I think you understood the meaning correctly, left a few minor comments.", "url": "https://github.com/apache/beam/pull/11661#discussion_r430606410", "createdAt": "2020-05-26T18:03:52Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "diffHunk": "@@ -58,117 +26,59 @@ def dataflowPipelineArgs = [\n     temp_location   : 'gs://temp-storage-for-end-to-end-tests/temp-it',\n ]\n \n-\n-// Configurations of each Jenkins job.\n-def testConfigurations = [\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py27',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py27 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python27 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py27_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py2',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py35',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py35 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python35 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py35_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py35',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py36',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py36 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python36 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py36_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py36',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py37',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py37 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python37 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py37_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py37',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-]\n-\n+testConfigurations = []\n+pythonVersions = ['27', '35', '36', '37']\n+\n+for (pythonVersion in pythonVersions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxODQzNA=="}, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjU5NzE4OnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODozOTo0MVrOGXts1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODozOTo0MVrOGXts1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxOTE5MA==", "bodyText": "fyi, @lazylynx - I think this stanza would be useful to configure low priority jobs.", "url": "https://github.com/apache/beam/pull/11661#discussion_r427519190", "createdAt": "2020-05-19T18:39:41Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/jenkins/job_PerformanceTests_Python.groovy", "diffHunk": "@@ -58,117 +26,59 @@ def dataflowPipelineArgs = [\n     temp_location   : 'gs://temp-storage-for-end-to-end-tests/temp-it',\n ]\n \n-\n-// Configurations of each Jenkins job.\n-def testConfigurations = [\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py27',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py27 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python27 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py27_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py2',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py35',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py35 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python35 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py35_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py35',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py36',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py36 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python36 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py36_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py36',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-    new PerformanceTestConfigurations(\n-        jobName           : 'beam_PerformanceTests_WordCountIT_Py37',\n-        jobDescription    : 'Python SDK Performance Test - Run WordCountIT in Py37 with 1Gb files',\n-        jobTriggerPhrase  : 'Run Python37 WordCountIT Performance Test',\n-        resultTable       : 'beam_performance.wordcount_py37_pkb_results',\n-        test              : 'apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it',\n-        itModule          : ':sdks:python:test-suites:dataflow:py37',\n-        extraPipelineArgs : dataflowPipelineArgs + [\n-            input: 'gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*', // 1Gb\n-            output: 'gs://temp-storage-for-end-to-end-tests/py-it-cloud/output',\n-            expect_checksum: 'ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710',\n-            num_workers: '10',\n-            autoscaling_algorithm: 'NONE',  // Disable autoscale the worker pool.\n-        ],\n-    ),\n-]\n-\n+testConfigurations = []\n+pythonVersions = ['27', '35', '36', '37']\n+\n+for (pythonVersion in pythonVersions) {\n+    def taskVersion = pythonVersion == '27' ? '2' : pythonVersion\n+    testConfigurations.add([\n+            jobName           : \"beam_PerformanceTests_WordCountIT_Py${pythonVersion}\",\n+            jobDescription    : \"Python SDK Performance Test - Run WordCountIT in Py${pythonVersion} with 1Gb files\",\n+            jobTriggerPhrase  : \"Run Python${pythonVersion} WordCountIT Performance Test\",\n+            test              : \"apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it\",\n+            gradleTaskName    : \":sdks:python:test-suites:dataflow:py${taskVersion}:runPerformanceTest\",\n+            pipelineOptions   : dataflowPipelineArgs + [\n+                    runner               : 'TestDataflowRunner',\n+                    publish_to_big_query : true,\n+                    metrics_dataset      : 'beam_performance',\n+                    metrics_table        : \"wordcount_py${pythonVersion}_pkb_results\",\n+                    input                : \"gs://apache-beam-samples/input_small_files/ascii_sort_1MB_input.0000*\", // 1Gb\n+                    output               : \"gs://temp-storage-for-end-to-end-tests/py-it-cloud/output\",\n+                    expect_checksum      : \"ea0ca2e5ee4ea5f218790f28d0b9fe7d09d8d710\",\n+                    num_workers          : '10',\n+                    autoscaling_algorithm: \"NONE\",  // Disable autoscale the worker pool.\n+            ]\n+    ])\n+}\n \n for (testConfig in testConfigurations) {\n   createPythonPerformanceTestJob(testConfig)\n }\n \n-\n-private void createPythonPerformanceTestJob(PerformanceTestConfigurations testConfig) {\n-  // This job runs the Beam Python performance tests on PerfKit Benchmarker.\n+private void createPythonPerformanceTestJob(Map testConfig) {\n+  // This job runs the Beam Python performance tests\n   job(testConfig.jobName) {\n     // Set default Beam job properties.\n     commonJobProperties.setTopLevelMainJobProperties(delegate)\n \n     // Run job in postcommit, don't trigger every push.\n-    commonJobProperties.setAutoJob(\n-        delegate,\n-        testConfig.buildSchedule)\n+    commonJobProperties.setAutoJob(delegate, 'H */6 * * *')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjczMjkxOnYy", "diffSide": "RIGHT", "path": "sdks/python/test-suites/dataflow/common.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToxNzowOVrOGXvCfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0NzoxOVrOGZN2-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MTExOA==", "bodyText": "Please make sure these tests export the xml logs that can be inspected in Jenkins in case of test failure:\nRelevant bits are:\n\n\n  \n    \n      beam/.test-infra/jenkins/job_PostCommit_Python37.groovy\n    \n    \n         Line 32\n      in\n      03d99df\n    \n    \n    \n    \n\n        \n          \n           publishers { \n        \n    \n  \n\n\n\n  \n    \n      beam/sdks/python/scripts/run_integration_test.sh\n    \n    \n         Line 276\n      in\n      03d99df\n    \n    \n    \n    \n\n        \n          \n           --with-xunitmp --xunitmp-file=$XUNIT_FILE \\ \n        \n    \n  \n\n\n\ncc: @udim who may have additional feedback on this. Udi, would it make sense to use pytest here instead of nose?", "url": "https://github.com/apache/beam/pull/11661#discussion_r427541118", "createdAt": "2020-05-19T19:17:09Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/test-suites/dataflow/common.gradle", "diffHunk": "@@ -109,4 +109,21 @@ task validatesRunnerStreamingTests {\n       args '-c', \". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $cmdArgs\"\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+task runPerformanceTest {\n+    dependsOn 'installGcpTest'\n+    dependsOn ':sdks:python:sdist'\n+\n+    def test = project.findProperty('test')\n+    def testOpts = project.findProperty('test-pipeline-options')\n+    testOpts += \" --sdk_location=${files(configurations.distTarBall.files).singleFile}\"\n+\n+  doLast {\n+    exec {\n+      workingDir \"${project.rootDir}/sdks/python\"\n+      executable 'sh'\n+      args '-c', \". ${envdir}/bin/activate && ${envdir}/bin/python setup.py nosetests --tests=${test}  --test-pipeline-options=\\\"${testOpts}\\\" --ignore-files \\'.*py3\\\\d?\\\\.py\\$\\'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODQ4NA==", "bodyText": "I don't believe we have --test-pipeline-options support yet in pytest, so nose is the solution for now.", "url": "https://github.com/apache/beam/pull/11661#discussion_r428838484", "createdAt": "2020-05-21T18:35:36Z", "author": {"login": "udim"}, "path": "sdks/python/test-suites/dataflow/common.gradle", "diffHunk": "@@ -109,4 +109,21 @@ task validatesRunnerStreamingTests {\n       args '-c', \". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $cmdArgs\"\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+task runPerformanceTest {\n+    dependsOn 'installGcpTest'\n+    dependsOn ':sdks:python:sdist'\n+\n+    def test = project.findProperty('test')\n+    def testOpts = project.findProperty('test-pipeline-options')\n+    testOpts += \" --sdk_location=${files(configurations.distTarBall.files).singleFile}\"\n+\n+  doLast {\n+    exec {\n+      workingDir \"${project.rootDir}/sdks/python\"\n+      executable 'sh'\n+      args '-c', \". ${envdir}/bin/activate && ${envdir}/bin/python setup.py nosetests --tests=${test}  --test-pipeline-options=\\\"${testOpts}\\\" --ignore-files \\'.*py3\\\\d?\\\\.py\\$\\'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MTExOA=="}, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NDY0OA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11661#discussion_r429094648", "createdAt": "2020-05-22T07:47:19Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/test-suites/dataflow/common.gradle", "diffHunk": "@@ -109,4 +109,21 @@ task validatesRunnerStreamingTests {\n       args '-c', \". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $cmdArgs\"\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+task runPerformanceTest {\n+    dependsOn 'installGcpTest'\n+    dependsOn ':sdks:python:sdist'\n+\n+    def test = project.findProperty('test')\n+    def testOpts = project.findProperty('test-pipeline-options')\n+    testOpts += \" --sdk_location=${files(configurations.distTarBall.files).singleFile}\"\n+\n+  doLast {\n+    exec {\n+      workingDir \"${project.rootDir}/sdks/python\"\n+      executable 'sh'\n+      args '-c', \". ${envdir}/bin/activate && ${envdir}/bin/python setup.py nosetests --tests=${test}  --test-pipeline-options=\\\"${testOpts}\\\" --ignore-files \\'.*py3\\\\d?\\\\.py\\$\\'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MTExOA=="}, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjc1MDY2OnYy", "diffSide": "RIGHT", "path": "sdks/python/test-suites/dataflow/common.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToyMjowOFrOGXvNaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0OTozNlrOGZN7Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzkxMw==", "bodyText": "Do we need to pass --ignore-files given that we control which tests to run?", "url": "https://github.com/apache/beam/pull/11661#discussion_r427543913", "createdAt": "2020-05-19T19:22:08Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/test-suites/dataflow/common.gradle", "diffHunk": "@@ -109,4 +109,21 @@ task validatesRunnerStreamingTests {\n       args '-c', \". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $cmdArgs\"\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+task runPerformanceTest {\n+    dependsOn 'installGcpTest'\n+    dependsOn ':sdks:python:sdist'\n+\n+    def test = project.findProperty('test')\n+    def testOpts = project.findProperty('test-pipeline-options')\n+    testOpts += \" --sdk_location=${files(configurations.distTarBall.files).singleFile}\"\n+\n+  doLast {\n+    exec {\n+      workingDir \"${project.rootDir}/sdks/python\"\n+      executable 'sh'\n+      args '-c', \". ${envdir}/bin/activate && ${envdir}/bin/python setup.py nosetests --tests=${test}  --test-pipeline-options=\\\"${testOpts}\\\" --ignore-files \\'.*py3\\\\d?\\\\.py\\$\\'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NTcxNA==", "bodyText": "I wanted to be on the safe side because in most places (not only in the bash scripts) it is added. But when I think about it we absolutely don't need to ignore anything, we run just one test. I'll remove it.", "url": "https://github.com/apache/beam/pull/11661#discussion_r429095714", "createdAt": "2020-05-22T07:49:36Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/test-suites/dataflow/common.gradle", "diffHunk": "@@ -109,4 +109,21 @@ task validatesRunnerStreamingTests {\n       args '-c', \". ${envdir}/bin/activate && ${runScriptsDir}/run_integration_test.sh $cmdArgs\"\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+task runPerformanceTest {\n+    dependsOn 'installGcpTest'\n+    dependsOn ':sdks:python:sdist'\n+\n+    def test = project.findProperty('test')\n+    def testOpts = project.findProperty('test-pipeline-options')\n+    testOpts += \" --sdk_location=${files(configurations.distTarBall.files).singleFile}\"\n+\n+  doLast {\n+    exec {\n+      workingDir \"${project.rootDir}/sdks/python\"\n+      executable 'sh'\n+      args '-c', \". ${envdir}/bin/activate && ${envdir}/bin/python setup.py nosetests --tests=${test}  --test-pipeline-options=\\\"${testOpts}\\\" --ignore-files \\'.*py3\\\\d?\\\\.py\\$\\'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzkxMw=="}, "originalCommit": {"oid": "ca6200110135814a90bfcdf9f24e53d01f83ea0e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjA0NzQ5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo0Mjo1NlrOGapSlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NToxNFrOGbK2dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjY2MQ==", "bodyText": "Sounds like this code can be reused across other performance tests, is there a module shared across perf tests that we can move it to? cc: @kamilwu", "url": "https://github.com/apache/beam/pull/11661#discussion_r430592661", "createdAt": "2020-05-26T17:42:56Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -104,18 +107,33 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     run_time = end_time - start_time\n \n     if publish_to_bq:\n-      bq_publisher = BigQueryMetricsPublisher(\n-          project_name=test_pipeline.get_option('project'),\n-          table=test_pipeline.get_option('metrics_table'),\n-          dataset=test_pipeline.get_option('metrics_dataset'),\n-      )\n-      result = Metric(\n-          submit_timestamp=time.time(),\n-          metric_id=uuid.uuid4().hex,\n-          value=run_time,\n-          label='Python performance test',\n-      )\n-      bq_publisher.publish([result.as_dict()])\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5Mjg1OQ==", "bodyText": "Looks like we have  apache_beam.testing.load_tests.load_test_metrics_utils. Should we move it there?", "url": "https://github.com/apache/beam/pull/11661#discussion_r430592859", "createdAt": "2020-05-26T17:43:15Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -104,18 +107,33 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     run_time = end_time - start_time\n \n     if publish_to_bq:\n-      bq_publisher = BigQueryMetricsPublisher(\n-          project_name=test_pipeline.get_option('project'),\n-          table=test_pipeline.get_option('metrics_table'),\n-          dataset=test_pipeline.get_option('metrics_dataset'),\n-      )\n-      result = Metric(\n-          submit_timestamp=time.time(),\n-          metric_id=uuid.uuid4().hex,\n-          value=run_time,\n-          label='Python performance test',\n-      )\n-      bq_publisher.publish([result.as_dict()])\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjY2MQ=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTQ3NA==", "bodyText": "I can add something like \"publish_single_value_(bq/influx/console)\" for each publisher", "url": "https://github.com/apache/beam/pull/11661#discussion_r430935474", "createdAt": "2020-05-27T08:12:26Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -104,18 +107,33 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     run_time = end_time - start_time\n \n     if publish_to_bq:\n-      bq_publisher = BigQueryMetricsPublisher(\n-          project_name=test_pipeline.get_option('project'),\n-          table=test_pipeline.get_option('metrics_table'),\n-          dataset=test_pipeline.get_option('metrics_dataset'),\n-      )\n-      result = Metric(\n-          submit_timestamp=time.time(),\n-          metric_id=uuid.uuid4().hex,\n-          value=run_time,\n-          label='Python performance test',\n-      )\n-      bq_publisher.publish([result.as_dict()])\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjY2MQ=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MTY2MQ==", "bodyText": "MetricsReader from load_test_metrics_utils module has a publish_metrics method. This method takes a pipeline result as an input, extracts metrics from it and calls all publishers. I think we could add a similar method, e.g. publish_value, which would take a list of kv pairs. @piotr-szuberski Does it make sense?", "url": "https://github.com/apache/beam/pull/11661#discussion_r431061661", "createdAt": "2020-05-27T11:58:33Z", "author": {"login": "kamilwu"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -104,18 +107,33 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     run_time = end_time - start_time\n \n     if publish_to_bq:\n-      bq_publisher = BigQueryMetricsPublisher(\n-          project_name=test_pipeline.get_option('project'),\n-          table=test_pipeline.get_option('metrics_table'),\n-          dataset=test_pipeline.get_option('metrics_dataset'),\n-      )\n-      result = Metric(\n-          submit_timestamp=time.time(),\n-          metric_id=uuid.uuid4().hex,\n-          value=run_time,\n-          label='Python performance test',\n-      )\n-      bq_publisher.publish([result.as_dict()])\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjY2MQ=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MjUxNw==", "bodyText": "I think that's a very good idea to add a method to the MetricsReader.", "url": "https://github.com/apache/beam/pull/11661#discussion_r431142517", "createdAt": "2020-05-27T13:45:14Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -104,18 +107,33 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     run_time = end_time - start_time\n \n     if publish_to_bq:\n-      bq_publisher = BigQueryMetricsPublisher(\n-          project_name=test_pipeline.get_option('project'),\n-          table=test_pipeline.get_option('metrics_table'),\n-          dataset=test_pipeline.get_option('metrics_dataset'),\n-      )\n-      result = Metric(\n-          submit_timestamp=time.time(),\n-          metric_id=uuid.uuid4().hex,\n-          value=run_time,\n-          label='Python performance test',\n-      )\n-      bq_publisher.publish([result.as_dict()])\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjY2MQ=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjA3Nzc1OnYy", "diffSide": "RIGHT", "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MToxNFrOGaplsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNjo0MVrOGdFjBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw==", "bodyText": "@kamilwu , could you please review the dashboard config?\nSome questions:\nIs there a way to visualize the dashboard on an in-progress PR?\nIs it possible to reduce duplication in the configs? We can do it in a separate change. For example: most settings for Python 2.7, and 3.7 are similar.  Have we considered  auto-generating  the final config from a smaller set of settings?", "url": "https://github.com/apache/beam/pull/11661#discussion_r430597553", "createdAt": "2020-05-26T17:51:14Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1Mjk5OA==", "bodyText": "@tvalentyn\n\nIs there a way to visualize the dashboard on an in-progress PR?\n\nCurrently, the best way is to: pull branch, deploy metrics stack locally (docker-compose build; docker-compose up), open web browser and go to localhost:3000.\n\nIs it possible to reduce duplication in the configs?\n\nThere's a concept called Scripted Dashboards, but we didn't implement it. So, if we want to create two charts next to each other, we have to provide two configs for them (even if they are very similar).\nApart from that, we can also consider another question: is having those .json files version-controlled profitable? Diffs are often very large, so the standard review process does not apply here.", "url": "https://github.com/apache/beam/pull/11661#discussion_r431052998", "createdAt": "2020-05-27T11:41:33Z", "author": {"login": "kamilwu"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1NTIzNA==", "bodyText": "@piotr-szuberski\nCould you rename your dashboard and charts? Python Performance Tests and Python27/37 Performance Tests | 1GB doesn't say much. How about using Python WordCount IT Benchmarks from the old Perfkit? [1]\n[1] https://apache-beam-testing.appspot.com/explore?dashboard=5691127080419328", "url": "https://github.com/apache/beam/pull/11661#discussion_r431055234", "createdAt": "2020-05-27T11:45:51Z", "author": {"login": "kamilwu"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0Mzg4NA==", "bodyText": "Python WordCount IT Benchmarks definitely sounds better.\nBTW, there was a typo WorldCount instead of WordCount :D", "url": "https://github.com/apache/beam/pull/11661#discussion_r431143884", "createdAt": "2020-05-27T13:47:11Z", "author": {"login": "piotr-szuberski"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNDA0NQ==", "bodyText": "Good catch.\nRe:\n\nApart from that, we can also consider another question: is having those .json files version-controlled profitable? Diffs are often very large, so the standard review process does not apply here.\n\nI agree that those files are hard to review - I was thinking that perhaps we can autogenerate the final configs from a much smaller config that just captures the minimal necessary information (name of the benchmark to display,  table/row name in the database that has the datapoints). The idea is that final configs are not edited manually. It would make sense for the visualization tool to provide a capability to generate the dashboard based on a common template + required minimal config. Is that what Scripted Dashboards is? The webpage page says this feature is deprecated.", "url": "https://github.com/apache/beam/pull/11661#discussion_r431314045", "createdAt": "2020-05-27T17:23:03Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NjQ0Mw==", "bodyText": "The idea is that final configs are not edited manually.\n\nLet me explain: the configs are not edited manually. At least they shouldn't be. The current solution involves creating a local instance of Grafana, exporting a new dashboard to JSON file, and pasting that file into the git repo. I found an interesting discussion on Grafana's repo: grafana/grafana#13823. It looks like this workflow is quite popular among users.\n\nIs that what Scripted Dashboards is?\n\nProbably. But I guess we'd rather avoid using deprecated features.", "url": "https://github.com/apache/beam/pull/11661#discussion_r431866443", "createdAt": "2020-05-28T14:12:50Z", "author": {"login": "kamilwu"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwMTI4OQ==", "bodyText": "exporting a new dashboard to JSON file\n\nThanks, does this mean: creating a new dashboard manually via UI?", "url": "https://github.com/apache/beam/pull/11661#discussion_r432101289", "createdAt": "2020-05-28T20:22:05Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2MTA3NQ==", "bodyText": "Yes, you're right.", "url": "https://github.com/apache/beam/pull/11661#discussion_r432361075", "createdAt": "2020-05-29T09:19:18Z", "author": {"login": "kamilwu"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NDA2OA==", "bodyText": "Thanks - is this workflow documented somewhere on Beam's website? It could be a few pointers to Grafana's documentation,  maybe screenshots.", "url": "https://github.com/apache/beam/pull/11661#discussion_r432654068", "createdAt": "2020-05-29T18:10:17Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1Mjc3Mw==", "bodyText": "There's an instruction on wiki: https://cwiki.apache.org/confluence/display/BEAM/Community+Metrics#CommunityMetrics-UpdatingDashboards.", "url": "https://github.com/apache/beam/pull/11661#discussion_r433152773", "createdAt": "2020-06-01T10:16:41Z", "author": {"login": "kamilwu"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -0,0 +1,297 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzU1Mw=="}, "originalCommit": {"oid": "1516e9728ba502fdd9304fc1657b639a855c25a0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQ4MTQxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzozMToxOFrOGbVoeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDozMToyMlrOGcFqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxOTE2MQ==", "bodyText": "I think the metric name should be 'Runtime', or something like that, not the test suite name.\nAlso, it may be more common to pass (Key,Value) pairs instead of (Value, Key)", "url": "https://github.com/apache/beam/pull/11661#discussion_r431319161", "createdAt": "2020-05-27T17:31:18Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -84,11 +87,45 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     # Register clean up before pipeline execution\n     self.addCleanup(delete_files, [test_output + '*'])\n \n+    publish_to_bq = bool(\n+        test_pipeline.get_option('publish_to_big_query') or False)\n+\n+    # Start measure time for performance test\n+    start_time = time.time()\n+\n     # Get pipeline options from command argument: --test-pipeline-options,\n     # and start pipeline job by calling pipeline main function.\n     run_wordcount(\n         test_pipeline.get_full_options_as_args(**extra_opts),\n-        save_main_session=False)\n+        save_main_session=False,\n+    )\n+\n+    end_time = time.time()\n+    run_time = end_time - start_time\n+\n+    if publish_to_bq:\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):\n+    influx_options = InfluxDBMetricsPublisherOptions(\n+        pipeline.get_option('influx_measurement'),\n+        pipeline.get_option('influx_db_name'),\n+        pipeline.get_option('influx_hostname'),\n+        os.getenv('INFLUXDB_USER'),\n+        os.getenv('INFLUXDB_USER_PASSWORD'),\n+    )\n+    metric_reader = MetricsReader(\n+        project_name=pipeline.get_option('project'),\n+        bq_table=pipeline.get_option('metrics_table'),\n+        bq_dataset=pipeline.get_option('metrics_dataset'),\n+        publish_to_bq=True,\n+        influxdb_options=influx_options,\n+    )\n+\n+    metric_reader.publish_values((\n+        metric_value,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f84ff0d04a3abbf0568f5fab0ecdbd6eb2133c55"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MTgwOQ==", "bodyText": "Good point, I changed it to wordcount_it_runtime and the order of key, value.", "url": "https://github.com/apache/beam/pull/11661#discussion_r432061809", "createdAt": "2020-05-28T19:13:42Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -84,11 +87,45 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     # Register clean up before pipeline execution\n     self.addCleanup(delete_files, [test_output + '*'])\n \n+    publish_to_bq = bool(\n+        test_pipeline.get_option('publish_to_big_query') or False)\n+\n+    # Start measure time for performance test\n+    start_time = time.time()\n+\n     # Get pipeline options from command argument: --test-pipeline-options,\n     # and start pipeline job by calling pipeline main function.\n     run_wordcount(\n         test_pipeline.get_full_options_as_args(**extra_opts),\n-        save_main_session=False)\n+        save_main_session=False,\n+    )\n+\n+    end_time = time.time()\n+    run_time = end_time - start_time\n+\n+    if publish_to_bq:\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):\n+    influx_options = InfluxDBMetricsPublisherOptions(\n+        pipeline.get_option('influx_measurement'),\n+        pipeline.get_option('influx_db_name'),\n+        pipeline.get_option('influx_hostname'),\n+        os.getenv('INFLUXDB_USER'),\n+        os.getenv('INFLUXDB_USER_PASSWORD'),\n+    )\n+    metric_reader = MetricsReader(\n+        project_name=pipeline.get_option('project'),\n+        bq_table=pipeline.get_option('metrics_table'),\n+        bq_dataset=pipeline.get_option('metrics_dataset'),\n+        publish_to_bq=True,\n+        influxdb_options=influx_options,\n+    )\n+\n+    metric_reader.publish_values((\n+        metric_value,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxOTE2MQ=="}, "originalCommit": {"oid": "f84ff0d04a3abbf0568f5fab0ecdbd6eb2133c55"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNjA5Mw==", "bodyText": "Do we need \"wordcount_it\" in the metric name? It depends on how these metrics will be stored, if they are already associated in the database with a test suite that launches the pipeline  Python WordCount IT Benchmarks, then this information is captured and perhaps we don't need to repeat it in two different places. Leaving this up to you and @kamilwu.", "url": "https://github.com/apache/beam/pull/11661#discussion_r432106093", "createdAt": "2020-05-28T20:31:22Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -84,11 +87,45 @@ def _run_wordcount_it(self, run_wordcount, **opts):\n     # Register clean up before pipeline execution\n     self.addCleanup(delete_files, [test_output + '*'])\n \n+    publish_to_bq = bool(\n+        test_pipeline.get_option('publish_to_big_query') or False)\n+\n+    # Start measure time for performance test\n+    start_time = time.time()\n+\n     # Get pipeline options from command argument: --test-pipeline-options,\n     # and start pipeline job by calling pipeline main function.\n     run_wordcount(\n         test_pipeline.get_full_options_as_args(**extra_opts),\n-        save_main_session=False)\n+        save_main_session=False,\n+    )\n+\n+    end_time = time.time()\n+    run_time = end_time - start_time\n+\n+    if publish_to_bq:\n+      self._publish_metrics(test_pipeline, run_time)\n+\n+  def _publish_metrics(self, pipeline, metric_value):\n+    influx_options = InfluxDBMetricsPublisherOptions(\n+        pipeline.get_option('influx_measurement'),\n+        pipeline.get_option('influx_db_name'),\n+        pipeline.get_option('influx_hostname'),\n+        os.getenv('INFLUXDB_USER'),\n+        os.getenv('INFLUXDB_USER_PASSWORD'),\n+    )\n+    metric_reader = MetricsReader(\n+        project_name=pipeline.get_option('project'),\n+        bq_table=pipeline.get_option('metrics_table'),\n+        bq_dataset=pipeline.get_option('metrics_dataset'),\n+        publish_to_bq=True,\n+        influxdb_options=influx_options,\n+    )\n+\n+    metric_reader.publish_values((\n+        metric_value,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxOTE2MQ=="}, "originalCommit": {"oid": "f84ff0d04a3abbf0568f5fab0ecdbd6eb2133c55"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTMzNjQyOnYy", "diffSide": "RIGHT", "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDozMzo0N1rOGcFu8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo1ODowOVrOGcYLiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNzI1MQ==", "bodyText": "Seeing this query now - yes, I wound just keep the metric 'runtime', since we already know it is wordcount_py27_results, and it would be simpler that pipeline does not need to know the name of the suite. In the future we might add different metrics like 'cost' or total cputime consumed by other workers as opposed to runtime.", "url": "https://github.com/apache/beam/pull/11661#discussion_r432107251", "createdAt": "2020-05-28T20:33:47Z", "author": {"login": "tvalentyn"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -77,7 +77,7 @@\n           ],\n           \"orderByTime\": \"ASC\",\n           \"policy\": \"default\",\n-          \"query\": \"SELECT mean(\\\"value\\\") FROM \\\"wordcount_py27_results\\\" WHERE metric = 'Python performance test' AND $timeFilter GROUP BY time($__interval),  \\\"metric\\\"\",\n+          \"query\": \"SELECT mean(\\\"value\\\") FROM \\\"wordcount_py27_results\\\" WHERE metric = 'wordcount_it_runtime' AND $timeFilter GROUP BY time($__interval),  \\\"metric\\\"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee636005a74c112286b7c66663ed5cb82ceeddd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NDgyNw==", "bodyText": "I agree, runtime will be enough.", "url": "https://github.com/apache/beam/pull/11661#discussion_r432364827", "createdAt": "2020-05-29T09:26:19Z", "author": {"login": "kamilwu"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -77,7 +77,7 @@\n           ],\n           \"orderByTime\": \"ASC\",\n           \"policy\": \"default\",\n-          \"query\": \"SELECT mean(\\\"value\\\") FROM \\\"wordcount_py27_results\\\" WHERE metric = 'Python performance test' AND $timeFilter GROUP BY time($__interval),  \\\"metric\\\"\",\n+          \"query\": \"SELECT mean(\\\"value\\\") FROM \\\"wordcount_py27_results\\\" WHERE metric = 'wordcount_it_runtime' AND $timeFilter GROUP BY time($__interval),  \\\"metric\\\"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNzI1MQ=="}, "originalCommit": {"oid": "3ee636005a74c112286b7c66663ed5cb82ceeddd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwOTQ4MA==", "bodyText": "I changed it to 'runtime'", "url": "https://github.com/apache/beam/pull/11661#discussion_r432409480", "createdAt": "2020-05-29T10:58:09Z", "author": {"login": "piotr-szuberski"}, "path": ".test-infra/metrics/grafana/dashboards/perftests_metrics/Python_Performance_Tests.json", "diffHunk": "@@ -77,7 +77,7 @@\n           ],\n           \"orderByTime\": \"ASC\",\n           \"policy\": \"default\",\n-          \"query\": \"SELECT mean(\\\"value\\\") FROM \\\"wordcount_py27_results\\\" WHERE metric = 'Python performance test' AND $timeFilter GROUP BY time($__interval),  \\\"metric\\\"\",\n+          \"query\": \"SELECT mean(\\\"value\\\") FROM \\\"wordcount_py27_results\\\" WHERE metric = 'wordcount_it_runtime' AND $timeFilter GROUP BY time($__interval),  \\\"metric\\\"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNzI1MQ=="}, "originalCommit": {"oid": "3ee636005a74c112286b7c66663ed5cb82ceeddd"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3896, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}