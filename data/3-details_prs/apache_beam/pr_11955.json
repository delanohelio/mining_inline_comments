{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTUxNTgx", "number": 11955, "title": "[BEAM-10220] add support for implicit nulls for converting between beam rows and json", "bodyText": "Currently,  RowJson.java doesn't have support for deserialising JSON with fields missing - it fails, even if the beam schema is nullable. This is often a problem for reading JSON as nulls are very commonly represented by omitting the field. Additionally, for this reason, not writing nulls is a reasonable when converting from Beam rows to JSON.\nThis would help to allow https://issues.apache.org/jira/browse/BEAM-7624 to be implemented.\nThis commit attempts to add support for this type of implicit nulls.\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\n--\nR: @TheNeuralBit", "createdAt": "2020-06-09T05:46:14Z", "url": "https://github.com/apache/beam/pull/11955", "merged": true, "mergeCommit": {"oid": "b4d5e07acaeee002d43bf207cedca796f38bf273"}, "closed": true, "closedAt": "2020-06-17T15:26:44Z", "author": {"login": "reubenvanammers"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpeayHgH2gAyNDMxNTUxNTgxOjk0ZWQ1OGE4YzhjYjA1Y2M1MzA5MmRmODM0ZWU5NGQ5MmI3MjA5ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrlNyDAFqTQzMDg5OTYzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "94ed58a8c8cb05cc53092df834ee94d92b720984", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/94ed58a8c8cb05cc53092df834ee94d92b720984", "committedDate": "2020-06-09T05:43:23Z", "message": "[BEAM-10220] add support for implicit nulls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "committedDate": "2020-06-09T07:40:02Z", "message": "[BEAM-10220] fixed tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjE3ODgy", "url": "https://github.com/apache/beam/pull/11955#pullrequestreview-427617882", "createdAt": "2020-06-09T23:42:25Z", "commit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo0MjoyNlrOGhgDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDowODoxNlrOGhghXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTQzOA==", "bodyText": "nit: could you change this to withAllowMissingFields?\nAlso please add a docstring", "url": "https://github.com/apache/beam/pull/11955#discussion_r437781438", "createdAt": "2020-06-09T23:42:26Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDQxMg==", "bodyText": "Similar comment here, withIgnoreNullsOnWrite and add a docstring. (I think checkstyle will complain without the docstring anyway).", "url": "https://github.com/apache/beam/pull/11955#discussion_r437784412", "createdAt": "2020-06-09T23:52:23Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -362,6 +382,11 @@ private RowJsonSerializer(Schema schema) {\n       super(Row.class);\n       this.schema = schema;\n     }\n+  \n+    public RowJsonSerializer ignoreNullsOnWrite(Boolean ignoreNullsOnWrite) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw==", "bodyText": "I think you could just check this.allowMissingFields here rather than passing it into all the FieldValue instances, no?", "url": "https://github.com/apache/beam/pull/11955#discussion_r437785493", "createdAt": "2020-06-09T23:55:57Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n+      this.allowMissingFields = allowMissing;\n+      return this;\n+  }\n+\n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n         throws IOException {\n \n       // Parse and convert the root object to Row as if it's a nested field with name 'root'\n       return (Row)\n           extractJsonNodeValue(\n-              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree()));\n+              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree(), allowMissingFields));\n     }\n \n+  \n+\n     private static Object extractJsonNodeValue(FieldValue fieldValue) {\n-      if (!fieldValue.isJsonValuePresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NjMyNw==", "bodyText": "I might call it \"DropNullsOnWrite\" instead of ignore, but I don't feel strongly about it", "url": "https://github.com/apache/beam/pull/11955#discussion_r437786327", "createdAt": "2020-06-09T23:58:54Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -362,6 +382,11 @@ private RowJsonSerializer(Schema schema) {\n       super(Row.class);\n       this.schema = schema;\n     }\n+  \n+    public RowJsonSerializer ignoreNullsOnWrite(Boolean ignoreNullsOnWrite) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDQxMg=="}, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NzgwMA==", "bodyText": "This should also check field.getType().getNullable() like the other conditional. If we get a null for a non-nullable field we should fail loudly rather than silently dropping it.", "url": "https://github.com/apache/beam/pull/11955#discussion_r437787800", "createdAt": "2020-06-10T00:04:04Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -375,6 +400,9 @@ private void writeRow(Row row, Schema schema, JsonGenerator gen) throws IOExcept\n       for (int i = 0; i < schema.getFieldCount(); ++i) {\n         Field field = schema.getField(i);\n         Object value = row.getValue(i);\n+        if (ignoreNullsOnWrite && value == null){\n+          continue;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4OTAyMw==", "bodyText": "We might want to make this an enum so in the future there could be a third mode where nulls must be encoded with a missing field, and having a null field value would be considered an error. The mode you've added here is a permissive middle ground where we allow either one.", "url": "https://github.com/apache/beam/pull/11955#discussion_r437789023", "createdAt": "2020-06-10T00:08:16Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTQzOA=="}, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "committedDate": "2020-06-10T02:47:27Z", "message": "[BEAM-10220] updated docstrings, methodnames and slight logic changes in response to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "789b9f7bceec57e1df8c86b477743495966b520e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/789b9f7bceec57e1df8c86b477743495966b520e", "committedDate": "2020-06-10T02:53:40Z", "message": "[BEAM-10220] updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f78fc8786373e6c836d8c77467452f3788772a47", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f78fc8786373e6c836d8c77467452f3788772a47", "committedDate": "2020-06-10T03:55:12Z", "message": "removed docstring for reverted code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d76806aea4bec0bab2e56892a875a044ac6e5c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/32d76806aea4bec0bab2e56892a875a044ac6e5c", "committedDate": "2020-06-14T13:52:15Z", "message": "Updated docstring to comply with spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODk5NjMz", "url": "https://github.com/apache/beam/pull/11955#pullrequestreview-430899633", "createdAt": "2020-06-15T18:40:46Z", "commit": {"oid": "32d76806aea4bec0bab2e56892a875a044ac6e5c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0MDo0NlrOGj-NBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0MDo0NlrOGj-NBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MjQ4NQ==", "bodyText": "Ah yeah I didn't notice it was static. I think making it non-static is the right call, thanks!", "url": "https://github.com/apache/beam/pull/11955#discussion_r440372485", "createdAt": "2020-06-15T18:40:46Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n+      this.allowMissingFields = allowMissing;\n+      return this;\n+  }\n+\n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n         throws IOException {\n \n       // Parse and convert the root object to Row as if it's a nested field with name 'root'\n       return (Row)\n           extractJsonNodeValue(\n-              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree()));\n+              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree(), allowMissingFields));\n     }\n \n+  \n+\n     private static Object extractJsonNodeValue(FieldValue fieldValue) {\n-      if (!fieldValue.isJsonValuePresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw=="}, "originalCommit": {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4162, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}