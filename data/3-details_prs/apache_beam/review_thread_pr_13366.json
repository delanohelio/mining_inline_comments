{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjI4MzE1", "number": 13366, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzozNDoyMVrOE6W8rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo1NDoyOFrOE6XmSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjI4ODQ2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzozNDoyMVrOH1YhUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzozNDoyMVrOH1YhUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTczODMyMg==", "bodyText": "Is this godoc-related or just something accidentally left in?", "url": "https://github.com/apache/beam/pull/13366#discussion_r525738322", "createdAt": "2020-11-18T03:34:21Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}\n+)\n+\n+// LogicalType is an interface between custom Go types, and schema storage types.\n+//\n+// A LogicalType is a way to define a new type that can be stored in a schema field\n+// using a known underlying type for storage. The storage type must be comprised of\n+// known schema field types, or pre-registered LogicalTypes. LogicalTypes may not be\n+// mutually recursive at any level of indirection.\n+//End", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjMyOTg0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo0MTo1NVrOH1Y9Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMTo1NjoxNVrOH2D49g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTQ4Mg==", "bodyText": "I don't understand the reason to have the ID layer between logicalIdentifiers and logicalTypes. Is there a reason not to just have this?:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tlogicalTypes       = map[string]LogicalType{}\n          \n          \n            \n            \tlogicalIdentifiers = map[reflect.Type]string{}\n          \n          \n            \n            \tlogicalTypes       = map[reflect.Type]LogicalType{}", "url": "https://github.com/apache/beam/pull/13366#discussion_r525745482", "createdAt": "2020-11-18T03:41:55Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NzI4NA==", "bodyText": "Good question: the string lookup is because that's all we have from the Schema proto direction. We need a mapping to the Logical part regardless, and then we need a mapping from the reflect.Type to that identifier. There's no guarantee or reason that a logical type's identifier will actually be related to the reflect.Type information unfortunately.", "url": "https://github.com/apache/beam/pull/13366#discussion_r526267284", "createdAt": "2020-11-18T17:21:46Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTQ4Mg=="}, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0ODg4Ng==", "bodyText": "Ack, that makes sense. I hadn't considered what to do when coming from the proto direction.", "url": "https://github.com/apache/beam/pull/13366#discussion_r526448886", "createdAt": "2020-11-18T21:56:15Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTQ4Mg=="}, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjM5NDk2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/schema.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo1NDoyOFrOH1Zrpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzozNjoxNFrOH1528g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1NzM1MA==", "bodyText": "Nit: This line can just be part of the previous line.", "url": "https://github.com/apache/beam/pull/13366#discussion_r525757350", "createdAt": "2020-11-18T03:54:28Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/schema.go", "diffHunk": "@@ -412,12 +382,18 @@ func fieldTypeToReflectType(sft *pipepb.FieldType, opts []*pipepb.Option) (refle\n \t// case *pipepb.FieldType_IterableType:\n \t// TODO(BEAM-9615): handle IterableTypes.\n \n-\t//case *pipepb.FieldType_LogicalType:\n-\t// TODO(BEAM-9615): handle LogicalTypes types.\n-\t//sft.GetLogicalType().\n+\tcase *pipepb.FieldType_LogicalType:\n+\t\tlst := sft.GetLogicalType()\n+\t\tidentifier := lst.GetUrn()\n+\t\tlt, ok := logicalTypes[identifier]\n+\t\tif !ok {\n+\t\t\treturn nil, errors.Errorf(\"unknown logical type: %v\", identifier)\n+\t\t}\n+\t\tt = lt.GoType()\n \n \t// Logical Types are for things that have more specialized user representation already, or\n-\t// things like Time or protocol buffers.\n+\t// things like Time or protocol buffers, or int.\n+\t// Or specifically formatted integers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI4NDUzMA==", "bodyText": "The whole block is not necessary now that there's an entire file for the types. removed.", "url": "https://github.com/apache/beam/pull/13366#discussion_r526284530", "createdAt": "2020-11-18T17:36:14Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/schema.go", "diffHunk": "@@ -412,12 +382,18 @@ func fieldTypeToReflectType(sft *pipepb.FieldType, opts []*pipepb.Option) (refle\n \t// case *pipepb.FieldType_IterableType:\n \t// TODO(BEAM-9615): handle IterableTypes.\n \n-\t//case *pipepb.FieldType_LogicalType:\n-\t// TODO(BEAM-9615): handle LogicalTypes types.\n-\t//sft.GetLogicalType().\n+\tcase *pipepb.FieldType_LogicalType:\n+\t\tlst := sft.GetLogicalType()\n+\t\tidentifier := lst.GetUrn()\n+\t\tlt, ok := logicalTypes[identifier]\n+\t\tif !ok {\n+\t\t\treturn nil, errors.Errorf(\"unknown logical type: %v\", identifier)\n+\t\t}\n+\t\tt = lt.GoType()\n \n \t// Logical Types are for things that have more specialized user representation already, or\n-\t// things like Time or protocol buffers.\n+\t// things like Time or protocol buffers, or int.\n+\t// Or specifically formatted integers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1NzM1MA=="}, "originalCommit": {"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413"}, "originalPosition": 224}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2594, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}