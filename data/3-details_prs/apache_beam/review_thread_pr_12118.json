{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTc2NTU2", "number": 12118, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODo1MTo1M1rOEJyZRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NzoyN1rOEScpQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Njk4MzExOnYy", "diffSide": "RIGHT", "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryWriteToTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODo1MTo1M1rOGqd2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODo1MTo1M1rOGqd2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4MjMzOQ==", "bodyText": "It would be great to clarify in comments if this is streaming write or a load job.  I vaguely recall BigQueryIO picks the mechanism based on whether the pipeline is streaming or batch, but I don't see references to this in the javadoc for BigQueryIO.", "url": "https://github.com/apache/beam/pull/12118#discussion_r447182339", "createdAt": "2020-06-29T18:51:53Z", "author": {"login": "shollyman"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryWriteToTable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.examples.snippets.transforms.io.gcp.bigquery;\n+\n+// [START bigquery_write_to_table]\n+\n+import com.google.api.services.bigquery.model.TableRow;\n+import com.google.api.services.bigquery.model.TableSchema;\n+import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO;\n+import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO.Write.CreateDisposition;\n+import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO.Write.WriteDisposition;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+class BigQueryWriteToTable {\n+  public static void writeToTable(\n+      String project,\n+      String dataset,\n+      String table,\n+      TableSchema schema,\n+      PCollection<TableRow> rows) {\n+\n+    // String project = \"my-project-id\";\n+    // String dataset = \"my_bigquery_dataset_id\";\n+    // String table = \"my_bigquery_table_id\";\n+\n+    // TableSchema schema = new TableSchema().setFields(Arrays.asList(...));\n+\n+    // Pipeline pipeline = Pipeline.create();\n+    // PCollection<TableRow> rows = ...\n+\n+    rows.apply(\n+        \"Write to BigQuery\",\n+        BigQueryIO.writeTableRows()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bdaea1578286ccd572baeb60eca11bf9b50fabb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc4MjU3OnYy", "diffSide": "RIGHT", "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NToyM1rOG3obnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowMzowOVrOG3pKeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NzI5Mg==", "bodyText": "My recollection was that sometimes floats come back as strings. I think it depends on whether it is JSON or Avro export.", "url": "https://github.com/apache/beam/pull/12118#discussion_r460987292", "createdAt": "2020-07-27T15:45:23Z", "author": {"login": "kennknowles"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.examples.snippets.transforms.io.gcp.bigquery;\n+\n+// [START bigquery_my_data]\n+\n+import com.google.api.services.bigquery.model.TableRow;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.coders.AvroCoder;\n+import org.apache.beam.sdk.coders.DefaultCoder;\n+\n+class BigQueryMyData {\n+\n+  static class MyStruct {\n+    String stringValue;\n+    Long int64Value;\n+  }\n+\n+  @DefaultCoder(AvroCoder.class)\n+  static class MyData {\n+    String myString;\n+    Long myInt64;\n+    Double myFloat64;\n+    BigDecimal myNumeric;\n+    Boolean myBoolean;\n+    byte[] myBytes;\n+    String myDate;\n+    String myDateTime;\n+    String myTime;\n+    String myTimestamp;\n+    String myGeography;\n+    List<Long> myArray;\n+    MyStruct myStruct;\n+\n+    public static MyData fromTableRow(TableRow row) {\n+      MyData data = new MyData();\n+\n+      data.myString = (String) row.get(\"string_field\");\n+      data.myInt64 = Long.parseLong((String) row.get(\"int64_field\"));\n+      data.myFloat64 = (Double) row.get(\"float64_field\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5032a73946a4b2742b295b168e9ad7c5f301a1e7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5OTI4OA==", "bodyText": "In my tests it always returned as a Double, but if it's also possible to return as a String, is there a way you would recommend to handle both or should we stick with one?", "url": "https://github.com/apache/beam/pull/12118#discussion_r460999288", "createdAt": "2020-07-27T16:03:09Z", "author": {"login": "davidcavazos"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.examples.snippets.transforms.io.gcp.bigquery;\n+\n+// [START bigquery_my_data]\n+\n+import com.google.api.services.bigquery.model.TableRow;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.coders.AvroCoder;\n+import org.apache.beam.sdk.coders.DefaultCoder;\n+\n+class BigQueryMyData {\n+\n+  static class MyStruct {\n+    String stringValue;\n+    Long int64Value;\n+  }\n+\n+  @DefaultCoder(AvroCoder.class)\n+  static class MyData {\n+    String myString;\n+    Long myInt64;\n+    Double myFloat64;\n+    BigDecimal myNumeric;\n+    Boolean myBoolean;\n+    byte[] myBytes;\n+    String myDate;\n+    String myDateTime;\n+    String myTime;\n+    String myTimestamp;\n+    String myGeography;\n+    List<Long> myArray;\n+    MyStruct myStruct;\n+\n+    public static MyData fromTableRow(TableRow row) {\n+      MyData data = new MyData();\n+\n+      data.myString = (String) row.get(\"string_field\");\n+      data.myInt64 = Long.parseLong((String) row.get(\"int64_field\"));\n+      data.myFloat64 = (Double) row.get(\"float64_field\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NzI5Mg=="}, "originalCommit": {"oid": "5032a73946a4b2742b295b168e9ad7c5f301a1e7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc5MTM3OnYy", "diffSide": "RIGHT", "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NzoyN1rOG3og5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMToyOFrOG4aVkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODY0Ng==", "bodyText": "You can add @SuppressWarnings(\"unused\"). I also know that annotations and I think being public would do it. It is possible that Javadoc might cause it to be \"used\".", "url": "https://github.com/apache/beam/pull/12118#discussion_r460988646", "createdAt": "2020-07-27T15:47:27Z", "author": {"login": "kennknowles"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.examples.snippets.transforms.io.gcp.bigquery;\n+\n+// [START bigquery_my_data]\n+\n+import com.google.api.services.bigquery.model.TableRow;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.coders.AvroCoder;\n+import org.apache.beam.sdk.coders.DefaultCoder;\n+\n+class BigQueryMyData {\n+\n+  static class MyStruct {\n+    String stringValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5032a73946a4b2742b295b168e9ad7c5f301a1e7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxMjM0MA==", "bodyText": "I tried the @SuppressWarnings(\"unused\") annotation on both the fields and the MyStruct class, as well as making everything public and adding Javadocs, but I'm still getting the error from :examples:java:spotbugsMain.\n> ./gradlew :examples:java:spotbugsMain\nConfiguration on demand is an incubating feature.\n\n> Task :examples:java:compileJava\nNote: /Users/dcavazos/src/beam/examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n[main] INFO org.gradle.internal.nativeintegration.services.NativeServices - Initialized native services in: /Users/dcavazos/.gradle/native\n\n> Task :examples:java:spotbugsMain\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n\n> Task :examples:java:spotbugsMain FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':examples:java:spotbugsMain'.\n> SpotBugs rule violations were found. See the report at: file:///Users/dcavazos/src/beam/examples/java/build/reports/spotbugs/main.html\n\nIt now has a note that it's using unchecked or unsafe operations, but the error report still mentions the fields being unused.", "url": "https://github.com/apache/beam/pull/12118#discussion_r461012340", "createdAt": "2020-07-27T16:23:47Z", "author": {"login": "davidcavazos"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.examples.snippets.transforms.io.gcp.bigquery;\n+\n+// [START bigquery_my_data]\n+\n+import com.google.api.services.bigquery.model.TableRow;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.coders.AvroCoder;\n+import org.apache.beam.sdk.coders.DefaultCoder;\n+\n+class BigQueryMyData {\n+\n+  static class MyStruct {\n+    String stringValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODY0Ng=="}, "originalCommit": {"oid": "5032a73946a4b2742b295b168e9ad7c5f301a1e7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3Nzk5Nw==", "bodyText": "Ah, yes. It is (slightly) different for spotbugs. For that you would use @SuppressFBWarnings(\"URF_UNREAD_FIELD\") (just guessing at the bug code - you can see which one in the report)", "url": "https://github.com/apache/beam/pull/12118#discussion_r461277997", "createdAt": "2020-07-28T02:21:47Z", "author": {"login": "kennknowles"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.examples.snippets.transforms.io.gcp.bigquery;\n+\n+// [START bigquery_my_data]\n+\n+import com.google.api.services.bigquery.model.TableRow;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.coders.AvroCoder;\n+import org.apache.beam.sdk.coders.DefaultCoder;\n+\n+class BigQueryMyData {\n+\n+  static class MyStruct {\n+    String stringValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODY0Ng=="}, "originalCommit": {"oid": "5032a73946a4b2742b295b168e9ad7c5f301a1e7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNDk0NQ==", "bodyText": "Thank you! That finally fixed it", "url": "https://github.com/apache/beam/pull/12118#discussion_r461804945", "createdAt": "2020-07-28T19:01:28Z", "author": {"login": "davidcavazos"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/transforms/io/gcp/bigquery/BigQueryMyData.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.examples.snippets.transforms.io.gcp.bigquery;\n+\n+// [START bigquery_my_data]\n+\n+import com.google.api.services.bigquery.model.TableRow;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.coders.AvroCoder;\n+import org.apache.beam.sdk.coders.DefaultCoder;\n+\n+class BigQueryMyData {\n+\n+  static class MyStruct {\n+    String stringValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODY0Ng=="}, "originalCommit": {"oid": "5032a73946a4b2742b295b168e9ad7c5f301a1e7"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3377, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}