{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDA4MzQ2", "number": 10826, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1NDoyMlrODeqLWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToyMDo1NVrODfTVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc0OTA3OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1NDoyMlrOFn62Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxODoxMlrOFpj32A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjk1NA==", "bodyText": "Don't think this is worth duplicating information already present on existing test stream events.", "url": "https://github.com/apache/beam/pull/10826#discussion_r377402954", "createdAt": "2020-02-11T00:54:22Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -525,6 +525,11 @@ message TestStreamPayload {\n   // used to retrieve events.\n   ApiServiceDescriptor endpoint = 3;\n \n+  // (Optional) The PCollection tags this TestStream will be outputting to. If\n+  // empty, this will assume it will be outputting to the single main\n+  // output PCollection.\n+  repeated string output_tags = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMDU5Nw==", "bodyText": "Without this field of \"output_tags\" it is impossible to recreate a TestStream from the TestStreamPayload without also giving the events.", "url": "https://github.com/apache/beam/pull/10826#discussion_r377800597", "createdAt": "2020-02-11T17:56:46Z", "author": {"login": "rohdesamuel"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -525,6 +525,11 @@ message TestStreamPayload {\n   // used to retrieve events.\n   ApiServiceDescriptor endpoint = 3;\n \n+  // (Optional) The PCollection tags this TestStream will be outputting to. If\n+  // empty, this will assume it will be outputting to the single main\n+  // output PCollection.\n+  repeated string output_tags = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjk1NA=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NzU3Mw==", "bodyText": "This information duplicates the \"output\" map keys on the PTransform that contains the TestStreamPayload.", "url": "https://github.com/apache/beam/pull/10826#discussion_r378457573", "createdAt": "2020-02-12T19:14:42Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -525,6 +525,11 @@ message TestStreamPayload {\n   // used to retrieve events.\n   ApiServiceDescriptor endpoint = 3;\n \n+  // (Optional) The PCollection tags this TestStream will be outputting to. If\n+  // empty, this will assume it will be outputting to the single main\n+  // output PCollection.\n+  repeated string output_tags = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjk1NA=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMzY3Mg==", "bodyText": "Cool, got rid the of the output_tags.", "url": "https://github.com/apache/beam/pull/10826#discussion_r379123672", "createdAt": "2020-02-13T21:18:12Z", "author": {"login": "rohdesamuel"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -525,6 +525,11 @@ message TestStreamPayload {\n   // used to retrieve events.\n   ApiServiceDescriptor endpoint = 3;\n \n+  // (Optional) The PCollection tags this TestStream will be outputting to. If\n+  // empty, this will assume it will be outputting to the single main\n+  // output PCollection.\n+  repeated string output_tags = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjk1NA=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc1MjQ5OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1NjoxOFrOFn64Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoxMToyNFrOFoTlVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzQ2Mw==", "bodyText": "Can you provide more context as to why this is needed?\nIs this the pcollection id, or the output name or the ptransform id representing the test stream?", "url": "https://github.com/apache/beam/pull/10826#discussion_r377403463", "createdAt": "2020-02-11T00:56:18Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -576,7 +581,12 @@ service TestStreamService {\n   // A TestStream will request for events using this RPC.\n   rpc Events(EventsRequest) returns (stream TestStreamPayload.Event) {}\n }\n-message EventsRequest {}\n+\n+message EventsRequest {\n+  // The set of keys to read from. The keys are the specific PCollections to\n+  // read.\n+  repeated string keys = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwODIxNA==", "bodyText": "Changed to comment to: The set of tags to read from. These tags are a subset of the TestStreamPayload's output_tags. This allows Interactive Beam to cache many PCollections from a pipeline then replay a subset of them.", "url": "https://github.com/apache/beam/pull/10826#discussion_r377808214", "createdAt": "2020-02-11T18:11:24Z", "author": {"login": "rohdesamuel"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -576,7 +581,12 @@ service TestStreamService {\n   // A TestStream will request for events using this RPC.\n   rpc Events(EventsRequest) returns (stream TestStreamPayload.Event) {}\n }\n-message EventsRequest {}\n+\n+message EventsRequest {\n+  // The set of keys to read from. The keys are the specific PCollections to\n+  // read.\n+  repeated string keys = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzQ2Mw=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc1NTQ0OnYy", "diffSide": "RIGHT", "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1Nzo0N1rOFn66FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToyMTo0OFrOFpj-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzkyNQ==", "bodyText": "Why do the recorded events not have AdvanceProcessingTime events?", "url": "https://github.com/apache/beam/pull/10826#discussion_r377403925", "createdAt": "2020-02-11T00:57:47Z", "author": {"login": "lukecwik"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;\n }\n \n // A record is a recorded element that a source produced. Its function is to\n // give enough information to create a faithful recreation of the original\n // stream of data.\n message TestStreamFileRecord {\n   oneof recorded_event {\n-    // The recorded element with its event timestamp (when it was produced).\n-    org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;\n+    // The recorded bundle with its event timestamp (when it was produced).\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements element_event = 1;\n \n     // Indicating the output watermark of the source changed.\n-    google.protobuf.Timestamp watermark = 2;\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark watermark_event = 2;\n   }\n \n   // The wall-time timestamp of either the new element or watermark change.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwOTA4Nw==", "bodyText": "It's an optimization. This way if there are no elements or watermark events for a long time, we don't have to record every time the clock advanced forward.", "url": "https://github.com/apache/beam/pull/10826#discussion_r377809087", "createdAt": "2020-02-11T18:13:08Z", "author": {"login": "rohdesamuel"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;\n }\n \n // A record is a recorded element that a source produced. Its function is to\n // give enough information to create a faithful recreation of the original\n // stream of data.\n message TestStreamFileRecord {\n   oneof recorded_event {\n-    // The recorded element with its event timestamp (when it was produced).\n-    org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;\n+    // The recorded bundle with its event timestamp (when it was produced).\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements element_event = 1;\n \n     // Indicating the output watermark of the source changed.\n-    google.protobuf.Timestamp watermark = 2;\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark watermark_event = 2;\n   }\n \n   // The wall-time timestamp of either the new element or watermark change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzkyNQ=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1OTQ0MA==", "bodyText": "You would still be able to do that \"compression\" yourself and only add a single AdvanceProcessingTime yet still have the flexibility to record multiple AdvanceProcessingTime events if they were ever necessary.", "url": "https://github.com/apache/beam/pull/10826#discussion_r378459440", "createdAt": "2020-02-12T19:18:03Z", "author": {"login": "lukecwik"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;\n }\n \n // A record is a recorded element that a source produced. Its function is to\n // give enough information to create a faithful recreation of the original\n // stream of data.\n message TestStreamFileRecord {\n   oneof recorded_event {\n-    // The recorded element with its event timestamp (when it was produced).\n-    org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;\n+    // The recorded bundle with its event timestamp (when it was produced).\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements element_event = 1;\n \n     // Indicating the output watermark of the source changed.\n-    google.protobuf.Timestamp watermark = 2;\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark watermark_event = 2;\n   }\n \n   // The wall-time timestamp of either the new element or watermark change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzkyNQ=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNTQwNQ==", "bodyText": "Turned into a single proto with the TestStreamPayload.Event.", "url": "https://github.com/apache/beam/pull/10826#discussion_r379125405", "createdAt": "2020-02-13T21:21:48Z", "author": {"login": "rohdesamuel"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;\n }\n \n // A record is a recorded element that a source produced. Its function is to\n // give enough information to create a faithful recreation of the original\n // stream of data.\n message TestStreamFileRecord {\n   oneof recorded_event {\n-    // The recorded element with its event timestamp (when it was produced).\n-    org.apache.beam.model.pipeline.v1.TestStreamPayload.TimestampedElement element = 1;\n+    // The recorded bundle with its event timestamp (when it was produced).\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AddElements element_event = 1;\n \n     // Indicating the output watermark of the source changed.\n-    google.protobuf.Timestamp watermark = 2;\n+    org.apache.beam.model.pipeline.v1.TestStreamPayload.Event.AdvanceWatermark watermark_event = 2;\n   }\n \n   // The wall-time timestamp of either the new element or watermark change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzkyNQ=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc1NjQ0OnYy", "diffSide": "RIGHT", "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1ODoxNlrOFn66qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoxMzoxOVrOFoTpCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNDA3Mg==", "bodyText": "Shouldn't proto versioning handle this?", "url": "https://github.com/apache/beam/pull/10826#discussion_r377404072", "createdAt": "2020-02-11T00:58:16Z", "author": {"login": "lukecwik"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwOTE2Mg==", "bodyText": "Ack, deleted.", "url": "https://github.com/apache/beam/pull/10826#discussion_r377809162", "createdAt": "2020-02-11T18:13:19Z", "author": {"login": "rohdesamuel"}, "path": "model/interactive/src/main/proto/beam_interactive_api.proto", "diffHunk": "@@ -40,18 +40,22 @@ import \"google/protobuf/timestamp.proto\";\n message TestStreamFileHeader {\n   // The PCollection tag this stream is associated with.\n   string tag = 1;\n+\n+  // The file format version. This is used to ensure backwards compatibility\n+  // when decoding from file.\n+  int32 version = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNDA3Mg=="}, "originalCommit": {"oid": "571c49e734ce5a4ed686a8795ebce1e9c5a89947"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQ5MjcyOnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToyMDo1NVrOFo7a-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToyNjozMFrOFpkHJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2MDkyMw==", "bodyText": "The usage of tag and tags is a poor name choice. I would suggest replacing them with output_id and output_ids and please update the comments to refer to the PTransform outputs local names.", "url": "https://github.com/apache/beam/pull/10826#discussion_r378460923", "createdAt": "2020-02-12T19:20:55Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -576,7 +581,13 @@ service TestStreamService {\n   // A TestStream will request for events using this RPC.\n   rpc Events(EventsRequest) returns (stream TestStreamPayload.Event) {}\n }\n-message EventsRequest {}\n+\n+message EventsRequest {\n+  // The set of tags to read from. These tags are a subset of the\n+  // TestStreamPayload's output_tags. This allows Interactive Beam to cache\n+  // many PCollections from a pipeline then replay a subset of them.\n+  repeated string tags = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6c043477459a9fa267e02881feb42db4230d60"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNzU5MA==", "bodyText": "Updated to output_ids and modified the comment.", "url": "https://github.com/apache/beam/pull/10826#discussion_r379127590", "createdAt": "2020-02-13T21:26:30Z", "author": {"login": "rohdesamuel"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -576,7 +581,13 @@ service TestStreamService {\n   // A TestStream will request for events using this RPC.\n   rpc Events(EventsRequest) returns (stream TestStreamPayload.Event) {}\n }\n-message EventsRequest {}\n+\n+message EventsRequest {\n+  // The set of tags to read from. These tags are a subset of the\n+  // TestStreamPayload's output_tags. This allows Interactive Beam to cache\n+  // many PCollections from a pipeline then replay a subset of them.\n+  repeated string tags = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2MDkyMw=="}, "originalCommit": {"oid": "2b6c043477459a9fa267e02881feb42db4230d60"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1980, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}