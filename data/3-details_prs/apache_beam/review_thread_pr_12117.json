{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjg3MTY4", "number": 12117, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo1ODo1M1rOEK_BMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1OToxMlrOELAPIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTUzNzEyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo1ODo1NFrOGsWEWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozOToyMVrOGtKigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MjA4OQ==", "bodyText": "Rename toTable() method to to()? Seems more consistent with other ios, eg. BigQueryIO and you already specify String table argument and the docs tells what's the subject of this operation so it's all clear. :)", "url": "https://github.com/apache/beam/pull/12117#discussion_r449152089", "createdAt": "2020-07-02T16:58:54Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -593,7 +606,7 @@ public void populateDisplayData(DisplayData.Builder builder) {\n      *\n      * @param table - String with the name of the table.\n      */\n-    public Write<T> withTable(String table) {\n+    public Write<T> toTable(String table) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMTc3OQ==", "bodyText": "Sounds reasonable. I will change to to()", "url": "https://github.com/apache/beam/pull/12117#discussion_r450011779", "createdAt": "2020-07-06T06:39:21Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -593,7 +606,7 @@ public void populateDisplayData(DisplayData.Builder builder) {\n      *\n      * @param table - String with the name of the table.\n      */\n-    public Write<T> withTable(String table) {\n+    public Write<T> toTable(String table) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MjA4OQ=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTU0MDA5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo1OTo0NlrOGsWGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozNzo1NVrOGtKgkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MjU4Mw==", "bodyText": "nit: could you move this toTable() call below all with... calls?", "url": "https://github.com/apache/beam/pull/12117#discussion_r449152583", "createdAt": "2020-07-02T16:59:46Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -155,7 +157,7 @@\n  * items.apply(\n  *     SnowflakeIO.<KV<Integer, String>>write()\n  *         .withDataSourceConfiguration(dataSourceConfiguration)\n- *         .withTable(table)\n+ *         .toTable(table)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMTI4Mg==", "bodyText": "Sure :)", "url": "https://github.com/apache/beam/pull/12117#discussion_r450011282", "createdAt": "2020-07-06T06:37:55Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -155,7 +157,7 @@\n  * items.apply(\n  *     SnowflakeIO.<KV<Integer, String>>write()\n  *         .withDataSourceConfiguration(dataSourceConfiguration)\n- *         .withTable(table)\n+ *         .toTable(table)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MjU4Mw=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTY1MjUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/data/SnowflakeBooleanTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzozMzoyNlrOGsXMTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyNjozMFrOGtXLRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDUxMQ==", "bodyText": "I wonder if there's a way of testing all the Snowflake data types in one test/one testing SnowflakeDataTypeTest class  (parametrized test?). \ud83e\udd14 Worth trying imho but I didn't check this.", "url": "https://github.com/apache/beam/pull/12117#discussion_r449170511", "createdAt": "2020-07-02T17:33:26Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/data/SnowflakeBooleanTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.test.unit.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.beam.sdk.io.snowflake.data.logical.SnowflakeBoolean;\n+import org.junit.Test;\n+\n+public class SnowflakeBooleanTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxODgyMw==", "bodyText": "Thanks for this idea. I created parametrized test.\nhttps://github.com/apache/beam/blob/b68646ffab38774864e421c6d4a704af5fd6a668/sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/data/SnowflakeDataTypeValidTest.java", "url": "https://github.com/apache/beam/pull/12117#discussion_r450218823", "createdAt": "2020-07-06T13:26:30Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/data/SnowflakeBooleanTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.test.unit.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.beam.sdk.io.snowflake.data.logical.SnowflakeBoolean;\n+import org.junit.Test;\n+\n+public class SnowflakeBooleanTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDUxMQ=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcwMTkyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo0ODo0NVrOGsXqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0MTo0MlrOGtKmDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3ODI0Nw==", "bodyText": "Are the double spaces needed here?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"SELECT EXISTS (SELECT 1 FROM  information_schema.tables  WHERE  table_name = '%s');\",\n          \n          \n            \n                        \"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '%s');\",", "url": "https://github.com/apache/beam/pull/12117#discussion_r449178247", "createdAt": "2020-07-02T17:48:45Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -169,6 +191,54 @@ private void prepareTableAccordingWriteDisposition(\n     }\n   }\n \n+  private void createTableIfNotExists(\n+      DataSource dataSource, String table, SnowflakeTableSchema tableSchema) throws SQLException {\n+    String query =\n+        String.format(\n+            \"SELECT EXISTS (SELECT 1 FROM  information_schema.tables  WHERE  table_name = '%s');\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMjY4Nw==", "bodyText": "Totally not. Thanks for spotting this .", "url": "https://github.com/apache/beam/pull/12117#discussion_r450012687", "createdAt": "2020-07-06T06:41:42Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -169,6 +191,54 @@ private void prepareTableAccordingWriteDisposition(\n     }\n   }\n \n+  private void createTableIfNotExists(\n+      DataSource dataSource, String table, SnowflakeTableSchema tableSchema) throws SQLException {\n+    String query =\n+        String.format(\n+            \"SELECT EXISTS (SELECT 1 FROM  information_schema.tables  WHERE  table_name = '%s');\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3ODI0Nw=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTcxNDQ0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1Mjo0M1rOGsXyZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNTozMzo1OVrOGvCQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDI2MQ==", "bodyText": "CloudProvider is used only in SnowflakeServiceImpl. I think it makes sense to keep it inside the serviceImpl as a private enum, wdyt?", "url": "https://github.com/apache/beam/pull/12117#discussion_r449180261", "createdAt": "2020-07-02T17:52:43Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -25,7 +27,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import javax.sql.DataSource;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeTableSchema;\n import org.apache.beam.sdk.io.snowflake.enums.CloudProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNTI2Nw==", "bodyText": "For now, I would keep it outside of serviceImpl as its easier to see which cloud providers currently are supported by IO.", "url": "https://github.com/apache/beam/pull/12117#discussion_r450015267", "createdAt": "2020-07-06T06:48:38Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -25,7 +27,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import javax.sql.DataSource;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeTableSchema;\n import org.apache.beam.sdk.io.snowflake.enums.CloudProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDI2MQ=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY3NzkzOQ==", "bodyText": "I'm not sure, to be honest. Users should look for that information in the docs. Note that technically (not that I'd wish for this) there are ways of providing support to other cloud providers without extending that enum so looking at the endpoint is not the ultimate proof that only gcs is supported. If there's no docs or it's out of date regarding cloud providers support, the devs will still need to dig into the IO implementation details to really find out. So having this enum public is not much help imho.\nOn the other hand, what we do now is that we leave an implementation detail (noise) that is not useful for the users in any way in code in the public API. I'd suggest hiding it and maybe expose it later if there is a good reason to do so. :)", "url": "https://github.com/apache/beam/pull/12117#discussion_r451677939", "createdAt": "2020-07-08T16:35:05Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -25,7 +27,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import javax.sql.DataSource;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeTableSchema;\n import org.apache.beam.sdk.io.snowflake.enums.CloudProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDI2MQ=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk3MzM3NA==", "bodyText": "I see your point. I even removed this enum and add following variable to the Service file:\nprivate static final String GCS_PREFIX = \"gs://\";", "url": "https://github.com/apache/beam/pull/12117#discussion_r451973374", "createdAt": "2020-07-09T05:33:59Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -25,7 +27,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import javax.sql.DataSource;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeTableSchema;\n import org.apache.beam.sdk.io.snowflake.enums.CloudProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDI2MQ=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTczMzU2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeBinary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1ODozNlrOGsX-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo1Njo1M1rOGtK9mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzI2Nw==", "bodyText": "Does it make sense to add a message for the exception? Something like \"Snowflake binary maximum size exceeded.\".", "url": "https://github.com/apache/beam/pull/12117#discussion_r449183267", "createdAt": "2020-07-02T17:58:36Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeBinary.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.data.text;\n+\n+import java.io.Serializable;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeDataType;\n+\n+public class SnowflakeBinary implements SnowflakeDataType, Serializable {\n+\n+  private static final Long MAX_SIZE = 8388608L;\n+\n+  private Long size; // bytes\n+\n+  public SnowflakeBinary() {}\n+\n+  public static SnowflakeBinary of() {\n+    return new SnowflakeBinary();\n+  }\n+\n+  public static SnowflakeBinary of(long size) {\n+    return new SnowflakeBinary(size);\n+  }\n+\n+  public SnowflakeBinary(long size) {\n+    if (size > MAX_SIZE) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODcxNQ==", "bodyText": "I added message. Thanks", "url": "https://github.com/apache/beam/pull/12117#discussion_r450018715", "createdAt": "2020-07-06T06:56:53Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeBinary.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.data.text;\n+\n+import java.io.Serializable;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeDataType;\n+\n+public class SnowflakeBinary implements SnowflakeDataType, Serializable {\n+\n+  private static final Long MAX_SIZE = 8388608L;\n+\n+  private Long size; // bytes\n+\n+  public SnowflakeBinary() {}\n+\n+  public static SnowflakeBinary of() {\n+    return new SnowflakeBinary();\n+  }\n+\n+  public static SnowflakeBinary of(long size) {\n+    return new SnowflakeBinary(size);\n+  }\n+\n+  public SnowflakeBinary(long size) {\n+    if (size > MAX_SIZE) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzI2Nw=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTczNjY2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeVarchar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1OToxMlrOGsYAJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo1NzowOVrOGtK-Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4Mzc4Mg==", "bodyText": "(Same as above)", "url": "https://github.com/apache/beam/pull/12117#discussion_r449183782", "createdAt": "2020-07-02T17:59:12Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeVarchar.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.data.text;\n+\n+import java.io.Serializable;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeDataType;\n+\n+public class SnowflakeVarchar implements SnowflakeDataType, Serializable {\n+  private static final Long MAX_LENGTH = 16777216L;\n+  private Long length;\n+\n+  public static SnowflakeVarchar of() {\n+    return new SnowflakeVarchar();\n+  }\n+\n+  public static SnowflakeVarchar of(long length) {\n+    return new SnowflakeVarchar(length);\n+  }\n+\n+  public SnowflakeVarchar() {}\n+\n+  public SnowflakeVarchar(long length) {\n+    if (length > MAX_LENGTH) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODgzOA==", "bodyText": "I added message. Thanks", "url": "https://github.com/apache/beam/pull/12117#discussion_r450018838", "createdAt": "2020-07-06T06:57:09Z", "author": {"login": "purbanow"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeVarchar.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.data.text;\n+\n+import java.io.Serializable;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeDataType;\n+\n+public class SnowflakeVarchar implements SnowflakeDataType, Serializable {\n+  private static final Long MAX_LENGTH = 16777216L;\n+  private Long length;\n+\n+  public static SnowflakeVarchar of() {\n+    return new SnowflakeVarchar();\n+  }\n+\n+  public static SnowflakeVarchar of(long length) {\n+    return new SnowflakeVarchar(length);\n+  }\n+\n+  public SnowflakeVarchar() {}\n+\n+  public SnowflakeVarchar(long length) {\n+    if (length > MAX_LENGTH) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4Mzc4Mg=="}, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3374, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}