{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzk4NzQ2", "number": 13593, "title": "[BEAM-10925] Convert ScalarFn to Method.", "bodyText": "The Method will be passed to createUdfOperator in a future PR.\nR: @amaliujia @apilloud\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-22T00:31:25Z", "url": "https://github.com/apache/beam/pull/13593", "merged": true, "mergeCommit": {"oid": "c2e07fbaddcbbd5e595e7f62e74c6c8b2714b710"}, "closed": true, "closedAt": "2020-12-23T00:54:31Z", "author": {"login": "ibzib"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdofZtugH2gAyNTQzNzk4NzQ2OmIyZTEwNTQyOTdkZjU3NzM4NWFkOTNjOWYzOTI4MTgzMzM1NDYwMGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoz5c5gBqjQxNDIxOTg4OTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b2e1054297df577385ad93c9f39281833354600b", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/b2e1054297df577385ad93c9f39281833354600b", "committedDate": "2020-12-22T00:29:21Z", "message": "[BEAM-10925] Convert ScalarFn to Method.\n\nThe Method will be passed to createUdfOperator in a future PR."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2Nzg5ODIx", "url": "https://github.com/apache/beam/pull/13593#pullrequestreview-556789821", "createdAt": "2020-12-22T03:04:29Z", "commit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzowNDozMFrOIJsvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzowNDozMFrOIJsvkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ==", "bodyText": "Why is this in zetasql? How will it work for the calcite dialect?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547041171", "createdAt": "2020-12-22T03:04:30Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODM5NjQ4", "url": "https://github.com/apache/beam/pull/13593#pullrequestreview-556839648", "createdAt": "2020-12-22T06:07:14Z", "commit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowNzoxNFrOIJvhQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowNzo1MVrOIJvh1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NjY1OA==", "bodyText": "Makes sense that it has to be public, but why cannot be static? (is it because that implementation overwrites the interface function which is not static)?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547086658", "createdAt": "2020-12-22T06:07:14Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Implementation logic for {@link ScalarFn}. */\n+public class ScalarFnImpl {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public and\n+   * non-static.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match\n+    // or it should be an extension of the other matches (which came from parent\n+    // classes).\n+    Method first = matches.iterator().next();\n+    for (Method other : matches) {\n+      if (!first.getName().equals(other.getName())\n+          || !Arrays.equals(first.getParameterTypes(), other.getParameterTypes())) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Found multiple methods annotated with @%s. [%s] and [%s]\",\n+                ScalarFn.ApplyMethod.class.getSimpleName(),\n+                ReflectHelpers.formatMethod(first),\n+                ReflectHelpers.formatMethod(other)));\n+      }\n+    }\n+\n+    // Method must be public and non-static.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NjgwNQ==", "bodyText": "What will happen if we choose one to execute (can print which is chosen and other methods into log)?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547086805", "createdAt": "2020-12-22T06:07:51Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Implementation logic for {@link ScalarFn}. */\n+public class ScalarFnImpl {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public and\n+   * non-static.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match\n+    // or it should be an extension of the other matches (which came from parent\n+    // classes).\n+    Method first = matches.iterator().next();\n+    for (Method other : matches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3885d47025a41cba05e0becc91090d3bafc4bd68", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/3885d47025a41cba05e0becc91090d3bafc4bd68", "committedDate": "2020-12-22T18:41:24Z", "message": "Allow ApplyMethod to be static."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b593dcf66081d836876d48d67ac3d68340a8940", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/3b593dcf66081d836876d48d67ac3d68340a8940", "committedDate": "2020-12-22T18:41:29Z", "message": "Rename ScalarFnImpl to ScalarFnReflector and move out of ZetaSQL."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjkzNjM4", "url": "https://github.com/apache/beam/pull/13593#pullrequestreview-557293638", "createdAt": "2020-12-22T18:49:46Z", "commit": {"oid": "3b593dcf66081d836876d48d67ac3d68340a8940"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzE3Mjg1", "url": "https://github.com/apache/beam/pull/13593#pullrequestreview-557317285", "createdAt": "2020-12-22T19:29:27Z", "commit": {"oid": "3b593dcf66081d836876d48d67ac3d68340a8940"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToyOToyN1rOIKGxiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToyOToyN1rOIKGxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzY1OQ==", "bodyText": "Is there a test you could add to validate inheritance works as expected here? (Will the outer most class always be first?)", "url": "https://github.com/apache/beam/pull/13593#discussion_r547467659", "createdAt": "2020-12-22T19:29:27Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/ScalarFnReflector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Reflection-based implementation logic for {@link ScalarFn}. */\n+public class ScalarFnReflector {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b593dcf66081d836876d48d67ac3d68340a8940"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d62044adc5ed1d3f159b9f9677ecf7ee4233df", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/b8d62044adc5ed1d3f159b9f9677ecf7ee4233df", "committedDate": "2020-12-23T00:21:54Z", "message": "Add tests for inherited ScalarFn subclasses."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54126950a3e3d11fd11f5c11e3b1050dbbe5fa58", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/54126950a3e3d11fd11f5c11e3b1050dbbe5fa58", "committedDate": "2020-12-23T00:09:09Z", "message": "Add tests for inherited ScalarFn subclasses."}, "afterCommit": {"oid": "b8d62044adc5ed1d3f159b9f9677ecf7ee4233df", "author": {"user": {"login": "ibzib", "name": "Kyle Weaver"}}, "url": "https://github.com/apache/beam/commit/b8d62044adc5ed1d3f159b9f9677ecf7ee4233df", "committedDate": "2020-12-23T00:21:54Z", "message": "Add tests for inherited ScalarFn subclasses."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4224, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}