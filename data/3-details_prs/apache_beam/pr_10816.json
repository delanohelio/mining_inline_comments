{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDgyMjY2", "number": 10816, "title": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners", "bodyText": "Fixes [BEAM-9273]\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-10T11:26:47Z", "url": "https://github.com/apache/beam/pull/10816", "merged": true, "mergeCommit": {"oid": "a149b6b040e9573e53cd41b6bd69b7e7603ac2a2"}, "closed": true, "closedAt": "2020-02-14T21:39:59Z", "author": {"login": "je-ik"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC7edcABqjMwMjIzNDE3ODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEWOYeAFqTM1OTIyMjk5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7916641910966364cc9a30576a816c05ab57310", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/e7916641910966364cc9a30576a816c05ab57310", "committedDate": "2020-02-10T11:25:44Z", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners"}, "afterCommit": {"oid": "097beb2998460dc2eb627b16c63751a818b4507e", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/097beb2998460dc2eb627b16c63751a818b4507e", "committedDate": "2020-02-10T11:31:22Z", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "097beb2998460dc2eb627b16c63751a818b4507e", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/097beb2998460dc2eb627b16c63751a818b4507e", "committedDate": "2020-02-10T11:31:22Z", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners"}, "afterCommit": {"oid": "b754e17f309af0c11abef41bae0d47a9c293a7cc", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/b754e17f309af0c11abef41bae0d47a9c293a7cc", "committedDate": "2020-02-10T12:34:36Z", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/85eeb10ff1f788e52028aafce42f80b2731dc8b8", "committedDate": "2020-02-10T15:52:57Z", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b754e17f309af0c11abef41bae0d47a9c293a7cc", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/b754e17f309af0c11abef41bae0d47a9c293a7cc", "committedDate": "2020-02-10T12:34:36Z", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners"}, "afterCommit": {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/85eeb10ff1f788e52028aafce42f80b2731dc8b8", "committedDate": "2020-02-10T15:52:57Z", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Mzg4ODE0", "url": "https://github.com/apache/beam/pull/10816#pullrequestreview-356388814", "createdAt": "2020-02-11T02:18:20Z", "commit": {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjoxODoyMFrOFn78pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjoyMzoxNVrOFn8AJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk2Ng==", "bodyText": "The DoFnSignature is precisely the list of features already, no? It is OK to have helper methods anyhow.\nStyle point: for a given class, utility static methods usually go in a companion class like DoFnSignature (class) & DoFnSignatures (utility methods)", "url": "https://github.com/apache/beam/pull/10816#discussion_r377420966", "createdAt": "2020-02-11T02:18:20Z", "author": {"login": "kennknowles"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DoFnFeatures.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.MapState;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.State;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.state.WatermarkHoldState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.reflect.DoFnSignatures;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+/**\n+ * Features a {@link DoFn} can posses. Each runner might implement a different (sub)set of this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTA0MQ==", "bodyText": "Ditto DoFnSignaturesTest (utility methods tests)", "url": "https://github.com/apache/beam/pull/10816#discussion_r377421041", "createdAt": "2020-02-11T02:18:43Z", "author": {"login": "kennknowles"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/DoFnFeaturesTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import static org.apache.beam.sdk.testing.SerializableMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.List;\n+import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.state.MapState;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.state.WatermarkHoldState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n+import org.apache.beam.sdk.transforms.windowing.TimestampCombiner;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.junit.Test;\n+\n+/** Test suite for {@link DoFnFeatures}. */\n+public class DoFnFeaturesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTQ1Ng==", "bodyText": "Passing a raw bool into a function call is not very readable. I suggest splitting into verifyDoFnSupportedForStreaming and verifyDoFnSupportedForBatch. These can each call the common code.", "url": "https://github.com/apache/beam/pull/10816#discussion_r377421456", "createdAt": "2020-02-11T02:21:10Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/BatchStatefulParDoOverrides.java", "diffHunk": "@@ -176,7 +176,7 @@ private MultiOutputOverrideFactory(boolean isFnApi) {\n     public PCollection<OutputT> expand(PCollection<KV<K, InputT>> input) {\n       DoFn<KV<K, InputT>, OutputT> fn = originalParDo.getFn();\n       verifyFnIsStateful(fn);\n-      DataflowRunner.verifyStateSupported(fn);\n+      DataflowRunner.verifyDoFnSupported(fn, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTg2Mg==", "bodyText": "This is a good example of DoFnFeatures being useful: since \"stateful ParDo\" is really a totally separate primitive, it makes sense to just have a single boolean indicating it. Eventually moving so the different primitives are more clearly split with different URNs would be good.\n(no action for you here - just a positive comment)", "url": "https://github.com/apache/beam/pull/10816#discussion_r377421862", "createdAt": "2020-02-11T02:23:15Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowPipelineTranslator.java", "diffHunk": "@@ -1224,10 +1225,10 @@ private static void translateFn(\n       Map<TupleTag<?>, Coder<?>> outputCoders,\n       DoFnSchemaInformation doFnSchemaInformation,\n       Map<String, PCollectionView<?>> sideInputMapping) {\n-    DoFnSignature signature = DoFnSignatures.getSignature(fn.getClass());\n \n-    if (signature.usesState() || signature.usesTimers()) {\n-      DataflowRunner.verifyStateSupported(fn);\n+    boolean isStateful = DoFnFeatures.isStateful(fn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e45f9d8693366d3cf47e26bb031eccef5e2b598", "author": {"user": {"login": "je-ik", "name": "Jan Lukavsk\u00fd"}}, "url": "https://github.com/apache/beam/commit/9e45f9d8693366d3cf47e26bb031eccef5e2b598", "committedDate": "2020-02-12T21:03:59Z", "message": "[BEAM-9273] code review - to be squashed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzg3MDA2", "url": "https://github.com/apache/beam/pull/10816#pullrequestreview-357787006", "createdAt": "2020-02-12T21:06:40Z", "commit": {"oid": "9e45f9d8693366d3cf47e26bb031eccef5e2b598"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjIyMzQ0", "url": "https://github.com/apache/beam/pull/10816#pullrequestreview-359222344", "createdAt": "2020-02-14T21:13:58Z", "commit": {"oid": "9e45f9d8693366d3cf47e26bb031eccef5e2b598"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMToxMzo1OFrOFqD0Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMToxMzo1OFrOFqD0Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0Njk4Mg==", "bodyText": "Nit: there's a lot of logic in this test class. See https://testing.googleblog.com/2014/07/testing-on-toilet-dont-put-logic-in.html\nIt would be better to simply write out the boilerplate for each test, so each test can be read in a straight line with no context needed.", "url": "https://github.com/apache/beam/pull/10816#discussion_r379646982", "createdAt": "2020-02-14T21:13:58Z", "author": {"login": "kennknowles"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/reflect/DoFnSignaturesTest.java", "diffHunk": "@@ -1192,6 +1199,239 @@ public void bar(\n     assertThat(params.get(4), instanceOf(TaggedOutputReceiverParameter.class));\n   }\n \n+  private interface FeatureTest {\n+    void test();\n+  }\n+\n+  private static class StatelessDoFn extends DoFn<String, String> implements FeatureTest {\n+    @ProcessElement\n+    public void process(@Element String input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithValueState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<ValueState<String>> state = StateSpecs.value();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithTimers extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @TimerId(\"timer\")\n+    private final TimerSpec spec = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+\n+    @OnTimer(\"timer\")\n+    public void onTimer() {}\n+  }\n+\n+  private static class StatefulWithTimersAndValueState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @TimerId(\"timer\")\n+    private final TimerSpec timer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+    @StateId(\"state\")\n+    private final StateSpec<SetState<String>> state = StateSpecs.set();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+\n+    @OnTimer(\"timer\")\n+    public void onTimer() {}\n+  }\n+\n+  private static class StatefulWithSetState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<SetState<String>> spec = StateSpecs.set();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithMapState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<MapState<String, String>> spec = StateSpecs.map();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithWatermarkHoldState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<WatermarkHoldState> spec =\n+        StateSpecs.watermarkStateInternal(TimestampCombiner.LATEST);\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class RequiresTimeSortedInput extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @ProcessElement\n+    @RequiresTimeSortedInput\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(true));\n+    }\n+  }\n+\n+  private static class Splittable extends DoFn<KV<String, Long>, String> implements FeatureTest {\n+    @ProcessElement\n+    public void process(ProcessContext c, RestrictionTracker<OffsetRange, ?> tracker) {}\n+\n+    @GetInitialRestriction\n+    public OffsetRange getInitialRange(@Element KV<String, Long> element) {\n+      return new OffsetRange(0L, element.getValue());\n+    }\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private final List<FeatureTest> tests =\n+      Lists.newArrayList(\n+          new StatelessDoFn(),\n+          new StatefulWithValueState(),\n+          new StatefulWithTimers(),\n+          new StatefulWithTimersAndValueState(),\n+          new StatefulWithSetState(),\n+          new StatefulWithMapState(),\n+          new StatefulWithWatermarkHoldState(),\n+          new RequiresTimeSortedInput(),\n+          new Splittable());\n+\n+  @Test\n+  public void testAllDoFnFeatures() {\n+    tests.forEach(FeatureTest::test);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e45f9d8693366d3cf47e26bb031eccef5e2b598"}, "originalPosition": 272}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjIyOTk2", "url": "https://github.com/apache/beam/pull/10816#pullrequestreview-359222996", "createdAt": "2020-02-14T21:15:24Z", "commit": {"oid": "9e45f9d8693366d3cf47e26bb031eccef5e2b598"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3034, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}