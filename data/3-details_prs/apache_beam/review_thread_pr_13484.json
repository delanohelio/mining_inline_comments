{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDQzMDIz", "number": 13484, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMzoxOTowMlrOFBD3SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMzoxOTozOFrOFBD3qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjU2MjAwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/runners/universal/runnerlib/execute.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMzoxOTowMlrOH_o9LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1NjoxOFrOIAhE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MzM1Ng==", "bodyText": "In Go, there's no reason to try to have a single return, or maintain an else.\nIn Go, prefer having the happiest path have the least indentation, and strive to return to that lowest level. Simply return, and avoid the extra indentation of an else.\nAn if else block implies that either clause can be executed and those possibilities need to be kept in mind when reading later code. If the if returns (or continues, or breaks, as appropriate), there's no need for an else, as the code in the If never interacts with anything after it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tres, presultErr := newUniversalPipelineResult(ctx, jobID, client)\n          \n          \n            \n            \tif presultErr != nil {\n          \n          \n            \n            \t\tif err != nil {\n          \n          \n            \n            \t\t\treturn presult, errors.Wrap(err, presultErr.Error())\n          \n          \n            \n            \t\t} else {\n          \n          \n            \n            \t\t\treturn presult, presultErr\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t} else {\n          \n          \n            \n            \t\tpresult = res\n          \n          \n            \n            \t}\n          \n          \n            \n            \tres, presultErr := newUniversalPipelineResult(ctx, jobID, client)\n          \n          \n            \n            \tif presultErr != nil {\n          \n          \n            \n            \t\tif err != nil {\n          \n          \n            \n            \t\t\treturn presult, errors.Wrap(err, presultErr.Error())\n          \n          \n            \n            \t\t} \n          \n          \n            \n            \t\treturn presult, presultErr\n          \n          \n            \n            \t} \n          \n          \n            \n            \treturn res, err\n          \n      \n    \n    \n  \n\nThis in combination with my other suggestion below to remove the other line.", "url": "https://github.com/apache/beam/pull/13484#discussion_r536493356", "createdAt": "2020-12-05T03:19:02Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/universal/runnerlib/execute.go", "diffHunk": "@@ -94,11 +94,16 @@ func Execute(ctx context.Context, p *pipepb.Pipeline, endpoint string, opt *JobO\n \t}\n \terr = WaitForCompletion(ctx, client, jobID)\n \n-\tres, err := newUniversalPipelineResult(ctx, jobID, client)\n-\tif err != nil {\n-\t\treturn presult, err\n+\tres, presultErr := newUniversalPipelineResult(ctx, jobID, client)\n+\tif presultErr != nil {\n+\t\tif err != nil {\n+\t\t\treturn presult, errors.Wrap(err, presultErr.Error())\n+\t\t} else {\n+\t\t\treturn presult, presultErr\n+\t\t}\n+\t} else {\n+\t\tpresult = res\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8159279df29c73c669bff95d57d831ffd78599"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMjg0NQ==", "bodyText": "Thanks, this definitely looks better. I pushed fixes.", "url": "https://github.com/apache/beam/pull/13484#discussion_r537412845", "createdAt": "2020-12-07T10:56:18Z", "author": {"login": "kamilwu"}, "path": "sdks/go/pkg/beam/runners/universal/runnerlib/execute.go", "diffHunk": "@@ -94,11 +94,16 @@ func Execute(ctx context.Context, p *pipepb.Pipeline, endpoint string, opt *JobO\n \t}\n \terr = WaitForCompletion(ctx, client, jobID)\n \n-\tres, err := newUniversalPipelineResult(ctx, jobID, client)\n-\tif err != nil {\n-\t\treturn presult, err\n+\tres, presultErr := newUniversalPipelineResult(ctx, jobID, client)\n+\tif presultErr != nil {\n+\t\tif err != nil {\n+\t\t\treturn presult, errors.Wrap(err, presultErr.Error())\n+\t\t} else {\n+\t\t\treturn presult, presultErr\n+\t\t}\n+\t} else {\n+\t\tpresult = res\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MzM1Ng=="}, "originalCommit": {"oid": "1d8159279df29c73c669bff95d57d831ffd78599"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjU2Mjk4OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/runners/universal/runnerlib/execute.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMzoxOTozOFrOH_o9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMzoxOTozOFrOH_o9lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MzQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \treturn presult, err\n          \n          \n            \n            }\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\ncleanup of the old return that doesn't need to be preserved.", "url": "https://github.com/apache/beam/pull/13484#discussion_r536493460", "createdAt": "2020-12-05T03:19:38Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/universal/runnerlib/execute.go", "diffHunk": "@@ -94,11 +94,16 @@ func Execute(ctx context.Context, p *pipepb.Pipeline, endpoint string, opt *JobO\n \t}\n \terr = WaitForCompletion(ctx, client, jobID)\n \n-\tres, err := newUniversalPipelineResult(ctx, jobID, client)\n-\tif err != nil {\n-\t\treturn presult, err\n+\tres, presultErr := newUniversalPipelineResult(ctx, jobID, client)\n+\tif presultErr != nil {\n+\t\tif err != nil {\n+\t\t\treturn presult, errors.Wrap(err, presultErr.Error())\n+\t\t} else {\n+\t\t\treturn presult, presultErr\n+\t\t}\n+\t} else {\n+\t\tpresult = res\n \t}\n-\tpresult = res\n \n \treturn presult, err\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8159279df29c73c669bff95d57d831ffd78599"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2498, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}