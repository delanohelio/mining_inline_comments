{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTI1NzEy", "number": 11141, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzoyMVrODohemw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0NTozMlrODohouA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODE4MTM5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/utils_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzoyMVrOF3H_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzoyMVrOF3H_vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzAwNQ==", "bodyText": "This test was flaky because the dataframe columns can be built in arbitrary orders. This option makes sure it doesn't take column positioning into consideration since we only care about the equivalence of data.", "url": "https://github.com/apache/beam/pull/11141#discussion_r393347005", "createdAt": "2020-03-16T22:33:21Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/utils_test.py", "diffHunk": "@@ -56,7 +56,7 @@ def test_parse_windowedvalue_with_window_info(self):\n         [['a', 2, int(1e6), els[0].windows, els[0].pane_info],\n          ['b', 3, int(1e6), els[1].windows, els[1].pane_info]],\n         columns=[0, 1, 'event_time', 'windows', 'pane_info'])\n-    pd.testing.assert_frame_equal(actual_df, expected_df)\n+    pd.testing.assert_frame_equal(actual_df, expected_df, check_like=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODIwNzI4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0NTozMlrOF3IPpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo1MDo1OVrOF3IWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTA3Ng==", "bodyText": "Do you want to track, mark side effects differently? Does users want to specifically track these pcollections?", "url": "https://github.com/apache/beam/pull/11141#discussion_r393351076", "createdAt": "2020-03-16T22:45:32Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -418,10 +420,16 @@ def visit_transform(self, transform_node):\n                       tuple(ie.current_env().options.capturable_sources)):\n           unbounded_source_pcolls.update(transform_node.outputs.values())\n         cacheable_inputs.update(self._pin._cacheable_inputs(transform_node))\n+        ins, outs = self._pin._all_inputs_outputs(transform_node)\n+        all_inputs.update(ins)\n+        all_outputs.update(outs)\n \n     v = InstrumentVisitor(self)\n     self._pipeline.visit(v)\n \n+    # Every output PCollection that is never used as an input PCollection is\n+    # considered as a side effect of the pipeline run and should be included.\n+    self._extended_targets.update(all_outputs.difference(all_inputs))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1Mjc2OA==", "bodyText": "It's not necessary. The intended behavior is not ambiguous: When the user uses show, head, collect APIs, these PCollections are excluded completely as the user explicitly wishes. And when the user invokes p.run(), all transforms in the pipeline should be executed as expected.\nThis change is only to make sure that the prune logic doesn't affect the above intended behavior.", "url": "https://github.com/apache/beam/pull/11141#discussion_r393352768", "createdAt": "2020-03-16T22:50:59Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -418,10 +420,16 @@ def visit_transform(self, transform_node):\n                       tuple(ie.current_env().options.capturable_sources)):\n           unbounded_source_pcolls.update(transform_node.outputs.values())\n         cacheable_inputs.update(self._pin._cacheable_inputs(transform_node))\n+        ins, outs = self._pin._all_inputs_outputs(transform_node)\n+        all_inputs.update(ins)\n+        all_outputs.update(outs)\n \n     v = InstrumentVisitor(self)\n     self._pipeline.visit(v)\n \n+    # Every output PCollection that is never used as an input PCollection is\n+    # considered as a side effect of the pipeline run and should be included.\n+    self._extended_targets.update(all_outputs.difference(all_inputs))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTA3Ng=="}, "originalCommit": {"oid": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1657, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}