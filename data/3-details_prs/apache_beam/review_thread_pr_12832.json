{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTMzNTA2", "number": 12832, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTo1MzowMlrOEj2yog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTo1NToxMFrOEj20Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDMzMzE0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/core.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTo1MzowM1rOHSdK2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1OTozNlrOHS3zXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDMyOQ==", "bodyText": "Nit: For simplicity I'd only support the kwargs format.\n(My personal preference would be to always use kwargs so it's clear what's being mapped to what.)", "url": "https://github.com/apache/beam/pull/12832#discussion_r489114329", "createdAt": "2020-09-16T01:53:03Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -2519,6 +2520,45 @@ def expand(self, pcoll):\n             (*(key + value))))\n \n \n+class ToRows(PTransform):\n+  \"\"\"Converts the elements of a PCollection into a schema'd PCollection of Rows.\n+\n+  `ToRow(...)` is roughly equivalent to `Map(lambda x: Row(...))` where each\n+  argument (which may be a string or callable) of `ToRow` is applied to `x`.\n+  For example,\n+\n+      pcoll | beam.ToRow('a', b=lambda x: foo(x))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e92ffc9fb8c58579d9d3aa450cb1eea12f57fcf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1MDY4NA==", "bodyText": "Good call. Done.", "url": "https://github.com/apache/beam/pull/12832#discussion_r489550684", "createdAt": "2020-09-16T15:59:36Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -2519,6 +2520,45 @@ def expand(self, pcoll):\n             (*(key + value))))\n \n \n+class ToRows(PTransform):\n+  \"\"\"Converts the elements of a PCollection into a schema'd PCollection of Rows.\n+\n+  `ToRow(...)` is roughly equivalent to `Map(lambda x: Row(...))` where each\n+  argument (which may be a string or callable) of `ToRow` is applied to `x`.\n+  For example,\n+\n+      pcoll | beam.ToRow('a', b=lambda x: foo(x))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDMyOQ=="}, "originalCommit": {"oid": "0e92ffc9fb8c58579d9d3aa450cb1eea12f57fcf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDMzNjc5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTo1NToxMFrOHSdM8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1OTowNVrOHS3yFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDg2Nw==", "bodyText": "I recommend testing internally since this may break some tests.", "url": "https://github.com/apache/beam/pull/12832#discussion_r489114867", "createdAt": "2020-09-16T01:55:10Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -320,6 +325,10 @@ def infer_return_type(c, input_types, debug=False, depth=5):\n             dict: typehints.Dict[Any, Any]\n         }[c]\n       return c\n+    elif (c == getattr and len(input_types) == 2 and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e92ffc9fb8c58579d9d3aa450cb1eea12f57fcf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1MDM1Ng==", "bodyText": "Done. All looks well.", "url": "https://github.com/apache/beam/pull/12832#discussion_r489550356", "createdAt": "2020-09-16T15:59:05Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/typehints/trivial_inference.py", "diffHunk": "@@ -320,6 +325,10 @@ def infer_return_type(c, input_types, debug=False, depth=5):\n             dict: typehints.Dict[Any, Any]\n         }[c]\n       return c\n+    elif (c == getattr and len(input_types) == 2 and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNDg2Nw=="}, "originalCommit": {"oid": "0e92ffc9fb8c58579d9d3aa450cb1eea12f57fcf"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3310, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}