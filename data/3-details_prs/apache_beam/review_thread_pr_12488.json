{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mjk0MDU2", "number": 12488, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjowNzo1MVrOEWYFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1NTo0M1rOEWZGWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODk4NjM0OnYy", "diffSide": "RIGHT", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjowNzo1MVrOG9qKNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzozMDoxNlrOG9rXVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzA2MQ==", "bodyText": "Why do we need to trigger the callbacks here?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467307061", "createdAt": "2020-08-07T22:07:51Z", "author": {"login": "ibzib"}, "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :\n+        bundleFinalizer.getAndClearFinalizations()) {\n+      finalization.getCallback().onBundleSuccess();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNjgwNA==", "bodyText": "We don't. I originally thought we did for some reason since I was changing this code together. I removed it and instead throw if it is ever accessed.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467326804", "createdAt": "2020-08-07T23:30:16Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :\n+        bundleFinalizer.getAndClearFinalizations()) {\n+      finalization.getCallback().onBundleSuccess();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzA2MQ=="}, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODk5MTQ4OnYy", "diffSide": "RIGHT", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoxMDo1MVrOG9qNYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzozMDoyNlrOG9rXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzg3Mw==", "bodyText": "Can we make any assertions about the finalizations? ie Can we expect that they're not empty?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467307873", "createdAt": "2020-08-07T22:10:51Z", "author": {"login": "ibzib"}, "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNjg0MQ==", "bodyText": "Not relevant anymore.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467326841", "createdAt": "2020-08-07T23:30:26Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzg3Mw=="}, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODk5NDc3OnYy", "diffSide": "RIGHT", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectExecutionContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoxMjo1N1rOG9qPfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo0OTo1OVrOG9rmJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODQxMw==", "bodyText": "Why lazy-initialize? Is this just to save memory?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467308413", "createdAt": "2020-08-07T22:12:57Z", "author": {"login": "ibzib"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectExecutionContext.java", "diffHunk": "@@ -81,6 +89,22 @@ public DirectTimerInternals timerInternals() {\n       return timerInternals;\n     }\n \n+    @Override\n+    public BundleFinalizer bundleFinalizer() {\n+      if (bundleFinalizer == null) {\n+        bundleFinalizer = new InMemoryBundleFinalizer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNDIwMg==", "bodyText": "yup since most transforms won't use the bundle finalizer", "url": "https://github.com/apache/beam/pull/12488#discussion_r467324202", "createdAt": "2020-08-07T23:18:05Z", "author": {"login": "lukecwik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectExecutionContext.java", "diffHunk": "@@ -81,6 +89,22 @@ public DirectTimerInternals timerInternals() {\n       return timerInternals;\n     }\n \n+    @Override\n+    public BundleFinalizer bundleFinalizer() {\n+      if (bundleFinalizer == null) {\n+        bundleFinalizer = new InMemoryBundleFinalizer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODQxMw=="}, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDU5OQ==", "bodyText": "Line#37 says the implementation is not thread-safe. So I assume there is no need to consider concurrent access to this initialization, right?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467330599", "createdAt": "2020-08-07T23:49:59Z", "author": {"login": "amaliujia"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectExecutionContext.java", "diffHunk": "@@ -81,6 +89,22 @@ public DirectTimerInternals timerInternals() {\n       return timerInternals;\n     }\n \n+    @Override\n+    public BundleFinalizer bundleFinalizer() {\n+      if (bundleFinalizer == null) {\n+        bundleFinalizer = new InMemoryBundleFinalizer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODQxMw=="}, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTAwMTgwOnYy", "diffSide": "RIGHT", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoxNzowMVrOG9qT4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzozODo0NlrOG9rdmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwOTUzOQ==", "bodyText": "I don't think logging only the finalization tells us enough. Can we log more information about the bundle itself?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467309539", "createdAt": "2020-08-07T22:17:01Z", "author": {"login": "ibzib"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {\n+        LOG.warn(\"Failed to finalize requested bundle {}\", finalization, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyODQxMQ==", "bodyText": "Added the completed bundle to the output.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467328411", "createdAt": "2020-08-07T23:38:46Z", "author": {"login": "lukecwik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {\n+        LOG.warn(\"Failed to finalize requested bundle {}\", finalization, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwOTUzOQ=="}, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTAxODI2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyNzowOVrOG9qd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxODoyMVrOG9rNYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjExNA==", "bodyText": "Multiple callbacks are allowed, right? (If so, please reword this as \"at least one callback.\")", "url": "https://github.com/apache/beam/pull/12488#discussion_r467312114", "createdAt": "2020-08-07T22:27:09Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);\n+      }\n+    }\n+\n+    private static class BasicBundleFinalizingDoFn extends BundleFinalizingDoFn {\n+      @ProcessElement\n+      public void processElement(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        testFinalization(bundleFinalizer, output);\n+      }\n+    }\n+\n+    private static class BundleFinalizerOutputChecker\n+        implements SerializableFunction<Iterable<String>, Void> {\n+      @Override\n+      public Void apply(Iterable<String> input) {\n+        assertTrue(\n+            \"Expected to have received one callback enabling output to be produced but received none.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMzI5Mg==", "bodyText": "In other words, I'd like to clarify the assertion we're making about input and what it means.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467313292", "createdAt": "2020-08-07T22:31:47Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);\n+      }\n+    }\n+\n+    private static class BasicBundleFinalizingDoFn extends BundleFinalizingDoFn {\n+      @ProcessElement\n+      public void processElement(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        testFinalization(bundleFinalizer, output);\n+      }\n+    }\n+\n+    private static class BundleFinalizerOutputChecker\n+        implements SerializableFunction<Iterable<String>, Void> {\n+      @Override\n+      public Void apply(Iterable<String> input) {\n+        assertTrue(\n+            \"Expected to have received one callback enabling output to be produced but received none.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjExNA=="}, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNDI1OA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12488#discussion_r467324258", "createdAt": "2020-08-07T23:18:21Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);\n+      }\n+    }\n+\n+    private static class BasicBundleFinalizingDoFn extends BundleFinalizingDoFn {\n+      @ProcessElement\n+      public void processElement(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        testFinalization(bundleFinalizer, output);\n+      }\n+    }\n+\n+    private static class BundleFinalizerOutputChecker\n+        implements SerializableFunction<Iterable<String>, Void> {\n+      @Override\n+      public Void apply(Iterable<String> input) {\n+        assertTrue(\n+            \"Expected to have received one callback enabling output to be produced but received none.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjExNA=="}, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTE0NjkyOnYy", "diffSide": "RIGHT", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1MDo1NlrOG9rm4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDowNTowOVrOG9tSxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDc4Nw==", "bodyText": "Is is possible to make this Exception more specific? Or that does not add more values?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467330787", "createdAt": "2020-08-07T23:50:56Z", "author": {"login": "amaliujia"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODQwNQ==", "bodyText": "This exception is to catch user thrown exceptions since the bundle finalizing callback is user written code this is why its so wide and it can't be narrowed.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467358405", "createdAt": "2020-08-08T04:05:09Z", "author": {"login": "lukecwik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDc4Nw=="}, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTE1MjUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1NTowMlrOG9rp3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDowNjozNFrOG9tTNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTU1MQ==", "bodyText": "nit: I am not sure if there are other ways, but such sleep might be a source of flakiness. E.g. prior callbacks not finish after 100L.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467331551", "createdAt": "2020-08-07T23:55:02Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODUxNg==", "bodyText": "MAX_ATTEMPTS * timeout >= 300 seconds. I don't believe it should flake but if it does I'll have to figure out a different way to design this test.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467358516", "createdAt": "2020-08-08T04:06:34Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTU1MQ=="}, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTE1MzUzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/SplittableDoFnTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1NTo0M1rOG9rqXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDowNjo0OFrOG9tTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTY3OA==", "bodyText": "nit: same here.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467331678", "createdAt": "2020-08-07T23:55:43Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/SplittableDoFnTest.java", "diffHunk": "@@ -839,19 +845,20 @@ public ProcessContinuation process(\n         RestrictionTracker<OffsetRange, Long> tracker,\n         BundleFinalizer bundleFinalizer)\n         throws InterruptedException {\n-      if (wasFinalized.get()) {\n+      if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+        tracker.tryClaim(tracker.currentRestriction().getFrom() + 1);\n+        receiver.output(element);\n         // Claim beyond the end now that we know we have been finalized.\n         tracker.tryClaim(Long.MAX_VALUE);\n-        receiver.output(element);\n         return stop();\n       }\n       if (tracker.tryClaim(tracker.currentRestriction().getFrom() + 1)) {\n         bundleFinalizer.afterBundleCommit(\n             Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n-            () -> wasFinalized.set(true));\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n         // We sleep here instead of setting a resume time since the resume time doesn't need to\n         // be honored.\n-        sleep(1000L); // 1 second\n+        sleep(100L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODU0MA==", "bodyText": "We also have an effectively 300 second timeout here so I don't believe it should flake but if it does I'll have to figure out a different way to design this test.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467358540", "createdAt": "2020-08-08T04:06:48Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/SplittableDoFnTest.java", "diffHunk": "@@ -839,19 +845,20 @@ public ProcessContinuation process(\n         RestrictionTracker<OffsetRange, Long> tracker,\n         BundleFinalizer bundleFinalizer)\n         throws InterruptedException {\n-      if (wasFinalized.get()) {\n+      if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+        tracker.tryClaim(tracker.currentRestriction().getFrom() + 1);\n+        receiver.output(element);\n         // Claim beyond the end now that we know we have been finalized.\n         tracker.tryClaim(Long.MAX_VALUE);\n-        receiver.output(element);\n         return stop();\n       }\n       if (tracker.tryClaim(tracker.currentRestriction().getFrom() + 1)) {\n         bundleFinalizer.afterBundleCommit(\n             Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n-            () -> wasFinalized.set(true));\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n         // We sleep here instead of setting a resume time since the resume time doesn't need to\n         // be honored.\n-        sleep(1000L); // 1 second\n+        sleep(100L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTY3OA=="}, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 854, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}