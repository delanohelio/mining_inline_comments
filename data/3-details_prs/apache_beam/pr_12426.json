{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NDg1NDQ1", "number": 12426, "title": "[BEAM-7996] Add support for MapType and Nulls in container types for Python RowCoder", "bodyText": "This PR adds support for MapType in the Python RowCoder, as well as support for encoding nulls inside of container types (NullableCoder).\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-30T18:34:46Z", "url": "https://github.com/apache/beam/pull/12426", "merged": true, "mergeCommit": {"oid": "18503a642950cf109c52f6026730571aa41aeb2f"}, "closed": true, "closedAt": "2020-08-06T00:50:53Z", "author": {"login": "TheNeuralBit"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6D-mjgH2gAyNDU5NDg1NDQ1OmU4NTA5NTdhZTNiN2U2OTkwY2VhMzJmNzZjZTM2NDVmNTgzNGE1NWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8CV9YAH2gAyNDU5NDg1NDQ1OjMxZjI0NmU2MjA1NmVjZjljMWFjYjBhODE2YjJmZWVmNTU1MDIwYzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e850957ae3b7e6990cea32f76ce3645f5834a55e", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/e850957ae3b7e6990cea32f76ce3645f5834a55e", "committedDate": "2020-07-30T18:31:47Z", "message": "Add support for encoding Maps and Nulls (in container types) in Python RowCoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjU4NDkw", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-458658490", "createdAt": "2020-07-30T18:36:05Z", "commit": {"oid": "e850957ae3b7e6990cea32f76ce3645f5834a55e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNjowNVrOG5vJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNjowNVrOG5vJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NDUyNw==", "bodyText": "This change is necessary because ImmutableMap (as well as Collectors.toMap) does not allow null values, so it errors on the new test cases.", "url": "https://github.com/apache/beam/pull/12426#discussion_r463194527", "createdAt": "2020-07-30T18:36:05Z", "author": {"login": "TheNeuralBit"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/CommonCoderTest.java", "diffHunk": "@@ -366,12 +368,15 @@ private static Object parseField(Object value, Schema.FieldType fieldType) {\n                 .map((element) -> parseField(element, fieldType.getCollectionElementType()))\n                 .collect(toImmutableList());\n       case MAP:\n-        Map<Object, Object> kvMap = (Map<Object, Object>) value;\n-        return kvMap.entrySet().stream()\n-            .collect(\n-                toImmutableMap(\n-                    (pair) -> parseField(pair.getKey(), fieldType.getMapKeyType()),\n-                    (pair) -> parseField(pair.getValue(), fieldType.getMapValueType())));\n+        Map<Object, Object> kvMap = new HashMap<>();\n+        ((Map<Object, Object>) value)\n+            .entrySet().stream()\n+                .forEach(\n+                    (entry) ->\n+                        kvMap.put(\n+                            parseField(entry.getKey(), fieldType.getMapKeyType()),\n+                            parseField(entry.getValue(), fieldType.getMapValueType())));\n+        return kvMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e850957ae3b7e6990cea32f76ce3645f5834a55e"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjU4OTcx", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-458658971", "createdAt": "2020-07-30T18:36:51Z", "commit": {"oid": "e850957ae3b7e6990cea32f76ce3645f5834a55e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNjo1MVrOG5vLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozNjo1MVrOG5vLTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NDk1Nw==", "bodyText": "FYI @lostluck - previously the encoding for MapType and for nullable types within containers was not documented.", "url": "https://github.com/apache/beam/pull/12426#discussion_r463194957", "createdAt": "2020-07-30T18:36:51Z", "author": {"login": "TheNeuralBit"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -855,10 +855,21 @@ message StandardCoders {\n     //     BOOLEAN:   beam:coder:bool:v1\n     //     BYTES:     beam:coder:bytes:v1\n     //   ArrayType:   beam:coder:iterable:v1 (always has a known length)\n-    //   MapType:     not yet a standard coder (BEAM-7996)\n+    //   MapType:     not a standard coder, specification defined below.\n     //   RowType:     beam:coder:row:v1\n     //   LogicalType: Uses the coder for its representation.\n     //\n+    // The MapType is encoded by:\n+    //   - An INT32 representing the size of the map (N)\n+    //   - Followed by N interleaved keys and values, encoded with their\n+    //     corresponding coder.\n+    //\n+    // Nullable types in container types (ArrayType, MapType) are encoded by:\n+    //   - A one byte null indicator, 0x00 for null values, or 0x01 for present\n+    //     values.\n+    //   - For present values the null indicator is followed by the value\n+    //     encoded with it's corresponding coder.\n+    //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e850957ae3b7e6990cea32f76ce3645f5834a55e"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/587dde57cbb2b0095a1fa04b59798d1b62c66f18", "committedDate": "2020-07-30T21:05:47Z", "message": "fixup! Add support for encoding Maps and Nulls (in container types) in Python RowCoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzgwMzYw", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-458780360", "createdAt": "2020-07-30T21:49:00Z", "commit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTo0OTowMFrOG51CUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTo1Mzo1OFrOG51KrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MDk2MQ==", "bodyText": "Is this just the encoding of a nullable type? (Why does it have to be called out specially?)", "url": "https://github.com/apache/beam/pull/12426#discussion_r463290961", "createdAt": "2020-07-30T21:49:00Z", "author": {"login": "robertwb"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -855,10 +855,21 @@ message StandardCoders {\n     //     BOOLEAN:   beam:coder:bool:v1\n     //     BYTES:     beam:coder:bytes:v1\n     //   ArrayType:   beam:coder:iterable:v1 (always has a known length)\n-    //   MapType:     not yet a standard coder (BEAM-7996)\n+    //   MapType:     not a standard coder, specification defined below.\n     //   RowType:     beam:coder:row:v1\n     //   LogicalType: Uses the coder for its representation.\n     //\n+    // The MapType is encoded by:\n+    //   - An INT32 representing the size of the map (N)\n+    //   - Followed by N interleaved keys and values, encoded with their\n+    //     corresponding coder.\n+    //\n+    // Nullable types in container types (ArrayType, MapType) are encoded by:\n+    //   - A one byte null indicator, 0x00 for null values, or 0x01 for present\n+    //     values.\n+    //   - For present values the null indicator is followed by the value\n+    //     encoded with it's corresponding coder.\n+    //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NDk1Nw=="}, "originalCommit": {"oid": "e850957ae3b7e6990cea32f76ce3645f5834a55e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MTk2OA==", "bodyText": "For maps specifically, do we want to allow null keys? Is it valuable to have null values (as distinct from just not present)? I might lean towards disallowing nulls and then possibly allowing it in the future if we have good reason to, which will be forward compatible.", "url": "https://github.com/apache/beam/pull/12426#discussion_r463291968", "createdAt": "2020-07-30T21:51:25Z", "author": {"login": "robertwb"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -855,10 +855,21 @@ message StandardCoders {\n     //     BOOLEAN:   beam:coder:bool:v1\n     //     BYTES:     beam:coder:bytes:v1\n     //   ArrayType:   beam:coder:iterable:v1 (always has a known length)\n-    //   MapType:     not yet a standard coder (BEAM-7996)\n+    //   MapType:     not a standard coder, specification defined below.\n     //   RowType:     beam:coder:row:v1\n     //   LogicalType: Uses the coder for its representation.\n     //\n+    // The MapType is encoded by:\n+    //   - An INT32 representing the size of the map (N)\n+    //   - Followed by N interleaved keys and values, encoded with their\n+    //     corresponding coder.\n+    //\n+    // Nullable types in container types (ArrayType, MapType) are encoded by:\n+    //   - A one byte null indicator, 0x00 for null values, or 0x01 for present\n+    //     values.\n+    //   - For present values the null indicator is followed by the value\n+    //     encoded with it's corresponding coder.\n+    //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NDk1Nw=="}, "originalCommit": {"oid": "e850957ae3b7e6990cea32f76ce3645f5834a55e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MjY5NA==", "bodyText": "We don't care about larger maps? Also, why not varint? (If that's what's conventionally used elsewhere, I'm fine with that, but iterable coder uses varint64.)", "url": "https://github.com/apache/beam/pull/12426#discussion_r463292694", "createdAt": "2020-07-30T21:52:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -530,6 +530,88 @@ def estimate_size(self, unused_value, nested=False):\n     return 1\n \n \n+class MapCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for typing.Mapping objects.\"\"\"\n+  def __init__(\n+      self,\n+      key_coder,  # type: CoderImpl\n+      value_coder  # type: CoderImpl\n+  ):\n+    self._key_coder = key_coder\n+    self._value_coder = value_coder\n+\n+  def encode_to_stream(self, value, out, nested):\n+    size = len(value)\n+    out.write_bigendian_int32(size)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MzEwMQ==", "bodyText": "Just nest everything. That'll simplify the logic and the definition of the coder.", "url": "https://github.com/apache/beam/pull/12426#discussion_r463293101", "createdAt": "2020-07-30T21:53:58Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -530,6 +530,88 @@ def estimate_size(self, unused_value, nested=False):\n     return 1\n \n \n+class MapCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  A coder for typing.Mapping objects.\"\"\"\n+  def __init__(\n+      self,\n+      key_coder,  # type: CoderImpl\n+      value_coder  # type: CoderImpl\n+  ):\n+    self._key_coder = key_coder\n+    self._value_coder = value_coder\n+\n+  def encode_to_stream(self, value, out, nested):\n+    size = len(value)\n+    out.write_bigendian_int32(size)\n+    for i, kv in enumerate(value.items()):\n+      key, value = kv\n+      last = i == size - 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTcyODgz", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-460972883", "createdAt": "2020-08-04T16:23:14Z", "commit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoyMzoxNFrOG7n9ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoyMzoxNFrOG7n9ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3Mzg5OA==", "bodyText": "If schema coders are always used in a nested context, why is nested: false?", "url": "https://github.com/apache/beam/pull/12426#discussion_r465173898", "createdAt": "2020-08-04T16:23:14Z", "author": {"login": "lostluck"}, "path": "model/fn-execution/src/main/resources/org/apache/beam/model/fnexecution/v1/standard_coders.yaml", "diffHunk": "@@ -384,3 +384,31 @@ nested: false\n examples:\n   \"\\x02\\x01\\x02\\x01\": {f_bool: True, f_bytes: null}\n   \"\\x02\\x00\\x00\\x04ab\\x00c\": {f_bool: False, f_bytes: \"ab\\0c\"}\n+\n+---\n+\n+# Binary data generated with the python SDK:\n+#\n+# import typing\n+# import apache_beam as beam\n+# class Test(typing.NamedTuple):\n+#   f_map: typing.Mapping[str,int]\n+# schema = beam.typehints.schemas.named_tuple_to_schema(Test)\n+# coder = beam.coders.row_coder.RowCoder(schema)\n+# print(\"payload = %s\" % schema.SerializeToString())\n+# examples = (Test(f_map={}),\n+#             Test(f_map={\"foo\": 9001, \"bar\": 9223372036854775807}),\n+#             Test(f_map={\"everything\": None, \"is\": None, \"null!\": None, \"\u00af\\_(\u30c4)_/\u00af\": None}))\n+# for example in examples:\n+#   print(\"example = %s\" % coder.encode(example))\n+coder:\n+  urn: \"beam:coder:row:v1\"\n+  # f_map: map<str, nullable int64>\n+  payload: \"\\n\\x15\\n\\x05f_map\\x1a\\x0c*\\n\\n\\x02\\x10\\x07\\x12\\x04\\x08\\x01\\x10\\x04\\x12$d8c8f969-14e6-457f-a8b5-62a1aec7f1cd\"\n+  # map ordering is non-deterministic\n+  non_deterministic: True\n+nested: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfff978855e2e12087cd37f854eeffb6b2f2d91", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/0dfff978855e2e12087cd37f854eeffb6b2f2d91", "committedDate": "2020-08-04T16:56:00Z", "message": "fixup! Add support for encoding Maps and Nulls (in container types) in Python RowCoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDA2ODMx", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-461006831", "createdAt": "2020-08-04T17:07:22Z", "commit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzowNzoyMlrOG7pl6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzowNzoyMlrOG7pl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMDYxOQ==", "bodyText": "There needs to be a space between f_map: and {} in all three examples. Otherwise it doesn't parse as valid yaml.\nhttps://yaml.org/spec/1.2/spec.html#id2759963  Mappings use a colon and space  (\": \") to mark each key: value pair.\nI copied the example into my local working copy so I could get the code going, and the Go YAML parser I'm using is strict.", "url": "https://github.com/apache/beam/pull/12426#discussion_r465200619", "createdAt": "2020-08-04T17:07:22Z", "author": {"login": "lostluck"}, "path": "model/fn-execution/src/main/resources/org/apache/beam/model/fnexecution/v1/standard_coders.yaml", "diffHunk": "@@ -384,3 +384,31 @@ nested: false\n examples:\n   \"\\x02\\x01\\x02\\x01\": {f_bool: True, f_bytes: null}\n   \"\\x02\\x00\\x00\\x04ab\\x00c\": {f_bool: False, f_bytes: \"ab\\0c\"}\n+\n+---\n+\n+# Binary data generated with the python SDK:\n+#\n+# import typing\n+# import apache_beam as beam\n+# class Test(typing.NamedTuple):\n+#   f_map: typing.Mapping[str,int]\n+# schema = beam.typehints.schemas.named_tuple_to_schema(Test)\n+# coder = beam.coders.row_coder.RowCoder(schema)\n+# print(\"payload = %s\" % schema.SerializeToString())\n+# examples = (Test(f_map={}),\n+#             Test(f_map={\"foo\": 9001, \"bar\": 9223372036854775807}),\n+#             Test(f_map={\"everything\": None, \"is\": None, \"null!\": None, \"\u00af\\_(\u30c4)_/\u00af\": None}))\n+# for example in examples:\n+#   print(\"example = %s\" % coder.encode(example))\n+coder:\n+  urn: \"beam:coder:row:v1\"\n+  # f_map: map<str, nullable int64>\n+  payload: \"\\n\\x15\\n\\x05f_map\\x1a\\x0c*\\n\\n\\x02\\x10\\x07\\x12\\x04\\x08\\x01\\x10\\x04\\x12$d8c8f969-14e6-457f-a8b5-62a1aec7f1cd\"\n+  # map ordering is non-deterministic\n+  non_deterministic: True\n+nested: false\n+examples:\n+  \"\\x01\\x00\\x00\\x00\\x00\\x00\": {f_map:{}}\n+  \"\\x01\\x00\\x00\\x00\\x00\\x02\\x03foo\\x01\\xa9F\\x03bar\\x01\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x7f\": {f_map:{\"foo\": 9001, \"bar\": 9223372036854775807}}\n+  \"\\x01\\x00\\x00\\x00\\x00\\x04\\neverything\\x00\\x02is\\x00\\x05null!\\x00\\r\\xc2\\xaf\\\\_(\\xe3\\x83\\x84)_/\\xc2\\xaf\\x00\": {f_map:{\"everything\":null, \"is\": null, \"null!\": null, \"\u00af\\\\_(\u30c4)_/\u00af\": null}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587dde57cbb2b0095a1fa04b59798d1b62c66f18"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c06ea87222f3a35bb38dda66d71361722270d8", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/16c06ea87222f3a35bb38dda66d71361722270d8", "committedDate": "2020-08-04T18:07:30Z", "message": "Don't specify nested in row coder tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33354403a0e22dd20646175e34f12b379a5ef75e", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/33354403a0e22dd20646175e34f12b379a5ef75e", "committedDate": "2020-08-04T18:07:52Z", "message": "fixup! Add support for encoding Maps and Nulls (in container types) in Python RowCoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0416e2ed65e5e859c4db1466254758a30d2200b7", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/0416e2ed65e5e859c4db1466254758a30d2200b7", "committedDate": "2020-08-04T18:08:24Z", "message": "Don't mutate value when reading rows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb591d9a8238a87bd8e44a82f3be7a84ca4b4e7", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/9bb591d9a8238a87bd8e44a82f3be7a84ca4b4e7", "committedDate": "2020-08-04T18:11:07Z", "message": "fixup! Add support for encoding Maps and Nulls (in container types) in Python RowCoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f55982291aa23dd4ea2284ee74194dc65ec9cc", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/d4f55982291aa23dd4ea2284ee74194dc65ec9cc", "committedDate": "2020-08-04T22:21:25Z", "message": "fixup! Add support for encoding Maps and Nulls (in container types) in Python RowCoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73f5602c9eb2fc4a7971fdea12faa0badf0c26b0", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/73f5602c9eb2fc4a7971fdea12faa0badf0c26b0", "committedDate": "2020-08-04T22:22:10Z", "message": "Python: Don't mutate value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjYwNTIy", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-461260522", "createdAt": "2020-08-05T00:22:51Z", "commit": {"oid": "73f5602c9eb2fc4a7971fdea12faa0badf0c26b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMjo1MVrOG712mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoyMjo1MVrOG712mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTQ5OQ==", "bodyText": "nit: no need to make this a local", "url": "https://github.com/apache/beam/pull/12426#discussion_r465401499", "createdAt": "2020-08-05T00:22:51Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -530,6 +530,93 @@ def estimate_size(self, unused_value, nested=False):\n     return 1\n \n \n+class MapCoderImpl(StreamCoderImpl):\n+  \"\"\"For internal use only; no backwards-compatibility guarantees.\n+\n+  Note this implementation always uses nested context when encoding keys\n+  and values. This differs from Java's MapCoder, which uses\n+  nested=False if possible for the last value encoded.\n+\n+  This difference is acceptable because MapCoder is not standard. It is only\n+  used in a standard context by RowCoder which always uses nested context for\n+  attribute values.\n+\n+  A coder for typing.Mapping objects.\"\"\"\n+  def __init__(\n+      self,\n+      key_coder,  # type: CoderImpl\n+      value_coder  # type: CoderImpl\n+  ):\n+    self._key_coder = key_coder\n+    self._value_coder = value_coder\n+\n+  def encode_to_stream(self, dict_value, out, nested):\n+    size = len(dict_value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f5602c9eb2fc4a7971fdea12faa0badf0c26b0"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjYxNDAx", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-461261401", "createdAt": "2020-08-05T00:25:43Z", "commit": {"oid": "73f5602c9eb2fc4a7971fdea12faa0badf0c26b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODMyMzM0", "url": "https://github.com/apache/beam/pull/12426#pullrequestreview-461832334", "createdAt": "2020-08-05T16:31:46Z", "commit": {"oid": "73f5602c9eb2fc4a7971fdea12faa0badf0c26b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31f246e62056ecf9c1acb0a816b2feef555020c2", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/31f246e62056ecf9c1acb0a816b2feef555020c2", "committedDate": "2020-08-05T21:45:20Z", "message": "fixup! Add support for encoding Maps and Nulls (in container types) in Python RowCoder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3627, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}