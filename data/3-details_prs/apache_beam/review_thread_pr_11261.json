{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTUzMzkx", "number": 11261, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyNTowMVrODuH_gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyNzoxN1rODuIB8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjkyMDM0OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyNTowMVrOF_9EGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo1MTozM1rOGAQZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTA4MQ==", "bodyText": "This part is really hard to read. Would be good to add named methods or use similar approach.", "url": "https://github.com/apache/beam/pull/11261#discussion_r402605081", "createdAt": "2020-04-02T21:25:01Z", "author": {"login": "Ardagan"}, "path": "sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import static org.apache.beam.sdk.extensions.ml.VideoIntelligence.annotateFromURI;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class VideoIntelligenceIT {\n+  @Rule public TestPipeline testPipeline = TestPipeline.create();\n+  private static final String VIDEO_URI =\n+      \"gs://apache-beam-samples/advanced_analytics/video/gbikes_dinosaur.mp4\";\n+  private List<Feature> featureList = Collections.singletonList(Feature.LABEL_DETECTION);\n+\n+  @Test\n+  public void annotateVideoFromURINoContext() {\n+    PCollection<List<VideoAnnotationResults>> annotationResults =\n+        testPipeline\n+            .apply(Create.of(VIDEO_URI))\n+            .apply(\"Annotate video\", ParDo.of(annotateFromURI(featureList, null)));\n+    PAssert.that(annotationResults).satisfies(new VerifyVideoAnnotationResult());\n+    testPipeline.run().waitUntilFinish();\n+  }\n+\n+  private static class VerifyVideoAnnotationResult\n+      implements SerializableFunction<Iterable<List<VideoAnnotationResults>>, Void> {\n+\n+    @Override\n+    public Void apply(Iterable<List<VideoAnnotationResults>> input) {\n+      List<Boolean> labelEvaluations = new ArrayList<>();\n+      input.forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86744f5671b2b7b5022dcd775a25ae0175b90b97"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMTg0MQ==", "bodyText": "Ok, done. What do you think?", "url": "https://github.com/apache/beam/pull/11261#discussion_r402921841", "createdAt": "2020-04-03T10:51:33Z", "author": {"login": "mwalenia"}, "path": "sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import static org.apache.beam.sdk.extensions.ml.VideoIntelligence.annotateFromURI;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class VideoIntelligenceIT {\n+  @Rule public TestPipeline testPipeline = TestPipeline.create();\n+  private static final String VIDEO_URI =\n+      \"gs://apache-beam-samples/advanced_analytics/video/gbikes_dinosaur.mp4\";\n+  private List<Feature> featureList = Collections.singletonList(Feature.LABEL_DETECTION);\n+\n+  @Test\n+  public void annotateVideoFromURINoContext() {\n+    PCollection<List<VideoAnnotationResults>> annotationResults =\n+        testPipeline\n+            .apply(Create.of(VIDEO_URI))\n+            .apply(\"Annotate video\", ParDo.of(annotateFromURI(featureList, null)));\n+    PAssert.that(annotationResults).satisfies(new VerifyVideoAnnotationResult());\n+    testPipeline.run().waitUntilFinish();\n+  }\n+\n+  private static class VerifyVideoAnnotationResult\n+      implements SerializableFunction<Iterable<List<VideoAnnotationResults>>, Void> {\n+\n+    @Override\n+    public Void apply(Iterable<List<VideoAnnotationResults>> input) {\n+      List<Boolean> labelEvaluations = new ArrayList<>();\n+      input.forEach(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTA4MQ=="}, "originalCommit": {"oid": "86744f5671b2b7b5022dcd775a25ae0175b90b97"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjkyNjU3OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyNzoxN1rOF_9IDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo1MTozOFrOGAQZpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNjA5NA==", "bodyText": "move this up to the rest of extensions.", "url": "https://github.com/apache/beam/pull/11261#discussion_r402606094", "createdAt": "2020-04-02T21:27:17Z", "author": {"login": "Ardagan"}, "path": "settings.gradle", "diffHunk": "@@ -165,3 +165,6 @@ include \"beam-test-infra-metrics\"\n project(\":beam-test-infra-metrics\").dir = file(\".test-infra/metrics\")\n include \"beam-test-tools\"\n project(\":beam-test-tools\").dir = file(\".test-infra/tools\")\n+include 'sdks:java:extensions:ml'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86744f5671b2b7b5022dcd775a25ae0175b90b97"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMTg5Mw==", "bodyText": "Sure, fixed", "url": "https://github.com/apache/beam/pull/11261#discussion_r402921893", "createdAt": "2020-04-03T10:51:38Z", "author": {"login": "mwalenia"}, "path": "settings.gradle", "diffHunk": "@@ -165,3 +165,6 @@ include \"beam-test-infra-metrics\"\n project(\":beam-test-infra-metrics\").dir = file(\".test-infra/metrics\")\n include \"beam-test-tools\"\n project(\":beam-test-tools\").dir = file(\".test-infra/tools\")\n+include 'sdks:java:extensions:ml'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNjA5NA=="}, "originalCommit": {"oid": "86744f5671b2b7b5022dcd775a25ae0175b90b97"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1560, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}