{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzk3MDg2", "number": 12169, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowOTozNlrOELz3_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxOToxNlrOEL32Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE5NzExOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowOTozNlrOGtjy5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowOTozNlrOGtjy5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNTU3Mg==", "bodyText": "We should check set membership instead to make this more readable/scalable.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450425572", "createdAt": "2020-07-06T19:09:36Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "diffHunk": "@@ -156,7 +157,8 @@ ResolvedStatement analyzeNextStatement(\n                 \"Failed to define function %s\", String.join(\".\", createFunctionStmt.getNamePath())),\n             e);\n       }\n-    } else if (resolvedStatement.nodeKind() != RESOLVED_QUERY_STMT) {\n+    } else if (resolvedStatement.nodeKind() != RESOLVED_QUERY_STMT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODIwMzYzOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxMToyMVrOGtj2yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxMToyMVrOGtj2yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNjU2OQ==", "bodyText": "We should make this a constant so we can reference it above.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450426569", "createdAt": "2020-07-06T19:11:21Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "diffHunk": "@@ -177,12 +179,17 @@ static AnalyzerOptions initAnalyzerOptions() {\n                     LanguageFeature.FEATURE_DISALLOW_GROUP_BY_FLOAT,\n                     LanguageFeature.FEATURE_V_1_2_CIVIL_TIME,\n                     LanguageFeature.FEATURE_V_1_1_SELECT_STAR_EXCEPT_REPLACE,\n-                    LanguageFeature.FEATURE_TABLE_VALUED_FUNCTIONS)));\n+                    LanguageFeature.FEATURE_TABLE_VALUED_FUNCTIONS,\n+                    LanguageFeature.FEATURE_CREATE_TABLE_FUNCTION,\n+                    LanguageFeature.FEATURE_TEMPLATE_FUNCTIONS)));\n \n     options\n         .getLanguageOptions()\n         .setSupportedStatementKinds(\n-            ImmutableSet.of(RESOLVED_QUERY_STMT, RESOLVED_CREATE_FUNCTION_STMT));\n+            ImmutableSet.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODI2NTY2OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTozMTo0NlrOGtkcnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTozMTo0NlrOGtkcnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzNjI1Mw==", "bodyText": "A couple nits about this error message:\n\nRemove \"find.\"\nInstead of just \"in beam\" it should be \"in schema beam\" so it's clear what the name is referring to.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450436253", "createdAt": "2020-07-06T19:31:46Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2916,6 +2917,57 @@ public void testRecursiveUdfThrowsException() {\n     zetaSQLQueryPlanner.convertToBeamRel(sql);\n   }\n \n+  @Test\n+  public void testUDTVF() {\n+    String sql =\n+        \"CREATE TABLE FUNCTION CustomerRange(MinID INT64, MaxID INT64)\\n\"\n+            + \"  AS\\n\"\n+            + \"    SELECT *\\n\"\n+            + \"    FROM KeyValue\\n\"\n+            + \"    WHERE key >= MinId AND key <= MaxId; \\n\"\n+            + \" SELECT key FROM CustomerRange(10, 14)\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    Schema singleField = Schema.builder().addInt64Field(\"field1\").build();\n+    PAssert.that(stream).containsInAnyOrder(Row.withSchema(singleField).addValues(14L).build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testUDTVFTableNotFound() {\n+    String sql =\n+        \"CREATE TABLE FUNCTION CustomerRange(MinID INT64, MaxID INT64)\\n\"\n+            + \"  AS\\n\"\n+            + \"    SELECT *\\n\"\n+            + \"    FROM TableNotExist\\n\"\n+            + \"    WHERE key >= MinId AND key <= MaxId; \\n\"\n+            + \" SELECT key FROM CustomerRange(10, 14)\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(SqlConversionException.class);\n+    thrown.expectMessage(\"Wasn't able to find resolve the path [TableNotExist] in beam\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODI4NDE4OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTozODowOFrOGtkoKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoyMDozMFrOGtqByw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzOTIwOQ==", "bodyText": "Optional nit: addToFunctionArgumentRefMapping and clearFunctionArgumentRefMapping can be replaced by getFunctionArgumentRefMapping().put() and getFunctionArgumentRefMapping().clear().", "url": "https://github.com/apache/beam/pull/12169#discussion_r450439209", "createdAt": "2020-07-06T19:38:08Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "diffHunk": "@@ -62,4 +83,20 @@ RelOptCluster cluster() {\n   QueryTrait getTrait() {\n     return trait;\n   }\n+\n+  Map<List<String>, ResolvedNode> getSqlUDTVF() {\n+    return sqlUDTVF;\n+  }\n+\n+  Map<String, RexNode> getFunctionArgumentRefMapping() {\n+    return functionArgumentRefMapping;\n+  }\n+\n+  void addToFunctionArgumentRefMapping(String s, RexNode r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzY5MQ==", "bodyText": "I was suggesting removing addToFunctionArgumentRefMapping and clearFunctionArgumentRefMapping completely, and using only getFunctionArgumentRefMapping() in other classes. But it's up to you.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450527691", "createdAt": "2020-07-06T23:20:30Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "diffHunk": "@@ -62,4 +83,20 @@ RelOptCluster cluster() {\n   QueryTrait getTrait() {\n     return trait;\n   }\n+\n+  Map<List<String>, ResolvedNode> getSqlUDTVF() {\n+    return sqlUDTVF;\n+  }\n+\n+  Map<String, RexNode> getFunctionArgumentRefMapping() {\n+    return functionArgumentRefMapping;\n+  }\n+\n+  void addToFunctionArgumentRefMapping(String s, RexNode r) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzOTIwOQ=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODI5NDgzOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo0MTo0NFrOGtkutQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo0MTo0NFrOGtkutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0MDg4NQ==", "bodyText": "Please avoid abbreviation here. I recommend userDefinedTableValuedFunctions (sql is probably redundant in this case).\nAlso consider adding an explanatory comment.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450440885", "createdAt": "2020-07-06T19:41:44Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "diffHunk": "@@ -27,24 +33,39 @@\n   private final ExpressionConverter expressionConverter;\n   private final RelOptCluster cluster;\n   private final QueryTrait trait;\n+  private final Map<List<String>, ResolvedNode> sqlUDTVF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODM4ODM5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoxNDo0NlrOGtlpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxOTo1OVrOGtvddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NTgyMA==", "bodyText": "We add UDF to the catalog in SqlAnalyzer. It's probably fine to add to the catalog in either SqlAnalyzer or ZetaSQLPlannerImpl, but please keep it consistent.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450455820", "createdAt": "2020-07-06T20:14:46Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -171,6 +178,18 @@ public RelRoot rel(String sql, QueryParameters params) {\n                 SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n                 String.join(\".\", createFunctionStmt.getNamePath()));\n         udfBuilder.put(functionFullName, createFunctionStmt);\n+      } else if (statement.nodeKind() == RESOLVED_CREATE_TABLE_FUNCTION_STMT) {\n+        ResolvedCreateTableFunctionStmt createTableFunctionStmt =\n+            (ResolvedCreateTableFunctionStmt) statement;\n+        catalog.addTableValuedFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyMjcwNQ==", "bodyText": "Sorry I am not getting an action to address this comment.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450522705", "createdAt": "2020-07-06T23:03:31Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -171,6 +178,18 @@ public RelRoot rel(String sql, QueryParameters params) {\n                 SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n                 String.join(\".\", createFunctionStmt.getNamePath()));\n         udfBuilder.put(functionFullName, createFunctionStmt);\n+      } else if (statement.nodeKind() == RESOLVED_CREATE_TABLE_FUNCTION_STMT) {\n+        ResolvedCreateTableFunctionStmt createTableFunctionStmt =\n+            (ResolvedCreateTableFunctionStmt) statement;\n+        catalog.addTableValuedFunction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NTgyMA=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNjE4Ng==", "bodyText": "beam/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java\n    \n    \n         Line 152\n      in\n      103facb\n    \n    \n    \n    \n\n        \n          \n           catalog.addFunction(userFunction); \n        \n    \n  \n\n\nI suggest adding scalar functions and TVF to the catalog in the same file. So either move catalog.add(scalar function) to ZetaSQLPlannerImpl or move catalog.add(TVF) to SqlAnalyzer.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450526186", "createdAt": "2020-07-06T23:15:13Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -171,6 +178,18 @@ public RelRoot rel(String sql, QueryParameters params) {\n                 SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n                 String.join(\".\", createFunctionStmt.getNamePath()));\n         udfBuilder.put(functionFullName, createFunctionStmt);\n+      } else if (statement.nodeKind() == RESOLVED_CREATE_TABLE_FUNCTION_STMT) {\n+        ResolvedCreateTableFunctionStmt createTableFunctionStmt =\n+            (ResolvedCreateTableFunctionStmt) statement;\n+        catalog.addTableValuedFunction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NTgyMA=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNjY5NA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450616694", "createdAt": "2020-07-07T05:19:59Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -171,6 +178,18 @@ public RelRoot rel(String sql, QueryParameters params) {\n                 SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n                 String.join(\".\", createFunctionStmt.getNamePath()));\n         udfBuilder.put(functionFullName, createFunctionStmt);\n+      } else if (statement.nodeKind() == RESOLVED_CREATE_TABLE_FUNCTION_STMT) {\n+        ResolvedCreateTableFunctionStmt createTableFunctionStmt =\n+            (ResolvedCreateTableFunctionStmt) statement;\n+        catalog.addTableValuedFunction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NTgyMA=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQwODEyOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoyMToyOFrOGtl1Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo0ODoyMVrOGtpcfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODk2Nw==", "bodyText": "Why do we need to clear?", "url": "https://github.com/apache/beam/pull/12169#discussion_r450458967", "createdAt": "2020-07-06T20:21:28Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "diffHunk": "@@ -42,45 +42,57 @@\n   @Override\n   public RelNode convert(ResolvedTVFScan zetaNode, List<RelNode> inputs) {\n     RelNode input = inputs.get(0);\n+    RexCall call =\n+        getExpressionConverter()\n+            .convertTableValuedFunction(\n+                input,\n+                zetaNode.getTvf(),\n+                zetaNode.getArgumentList(),\n+                zetaNode.getArgumentList().get(0).getScan() != null\n+                    ? zetaNode.getArgumentList().get(0).getScan().getColumnList()\n+                    : Collections.emptyList());\n     RelNode tableFunctionScan =\n         LogicalTableFunctionScan.create(\n-            getCluster(),\n-            inputs,\n-            getExpressionConverter()\n-                .convertTableValuedFunction(\n-                    input,\n-                    zetaNode.getTvf(),\n-                    zetaNode.getArgumentList(),\n-                    zetaNode.getArgumentList().get(0).getScan().getColumnList()),\n-            null,\n-            createRowTypeWithWindowStartAndEnd(input.getRowType()),\n-            Collections.EMPTY_SET);\n+            getCluster(), inputs, call, null, call.getType(), Collections.EMPTY_SET);\n \n+    // Pure SQL UDF's language body is built bottom up, so FunctionArgumentRefMapping should be\n+    // already consumed thus it can be cleared now.\n+    context.clearFunctionArgumentRefMapping();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxNzE2Mg==", "bodyText": "The SQL plan building called from top, but built from bottom.\nIn this case, TVFScanConverter will be called first, where it knows what values of function parameters used in later SELECT, so we add those parameters to Context. Then it goes down to inputs of TVFScanConverter. For pure SQL UDTVF, per definition, inputs of TVFScanConverter are UDTVF's SQL language body, which are also ResolvedNode, and FuncitonArugmentRefMapping is consumed. After the conversion goes back to TVFScanConverter, which means its input has finished conversion (thus has consumed FuncitonArugmentRefMapping), thus FuncitonArugmentRefMapping can be cleared.\nThe current implementation in this PR is still fragile. For example, if there are more than one TVFScanConverter, I am thinking current implementation will break. So my nest step is to improve testing coverage and catch more complicated cases.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450517162", "createdAt": "2020-07-06T22:44:56Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "diffHunk": "@@ -42,45 +42,57 @@\n   @Override\n   public RelNode convert(ResolvedTVFScan zetaNode, List<RelNode> inputs) {\n     RelNode input = inputs.get(0);\n+    RexCall call =\n+        getExpressionConverter()\n+            .convertTableValuedFunction(\n+                input,\n+                zetaNode.getTvf(),\n+                zetaNode.getArgumentList(),\n+                zetaNode.getArgumentList().get(0).getScan() != null\n+                    ? zetaNode.getArgumentList().get(0).getScan().getColumnList()\n+                    : Collections.emptyList());\n     RelNode tableFunctionScan =\n         LogicalTableFunctionScan.create(\n-            getCluster(),\n-            inputs,\n-            getExpressionConverter()\n-                .convertTableValuedFunction(\n-                    input,\n-                    zetaNode.getTvf(),\n-                    zetaNode.getArgumentList(),\n-                    zetaNode.getArgumentList().get(0).getScan().getColumnList()),\n-            null,\n-            createRowTypeWithWindowStartAndEnd(input.getRowType()),\n-            Collections.EMPTY_SET);\n+            getCluster(), inputs, call, null, call.getType(), Collections.EMPTY_SET);\n \n+    // Pure SQL UDF's language body is built bottom up, so FunctionArgumentRefMapping should be\n+    // already consumed thus it can be cleared now.\n+    context.clearFunctionArgumentRefMapping();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODk2Nw=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxODE0Mg==", "bodyText": "There are a lot more to test, including JOIN and AGGREGATE in UDTVF.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450518142", "createdAt": "2020-07-06T22:48:21Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "diffHunk": "@@ -42,45 +42,57 @@\n   @Override\n   public RelNode convert(ResolvedTVFScan zetaNode, List<RelNode> inputs) {\n     RelNode input = inputs.get(0);\n+    RexCall call =\n+        getExpressionConverter()\n+            .convertTableValuedFunction(\n+                input,\n+                zetaNode.getTvf(),\n+                zetaNode.getArgumentList(),\n+                zetaNode.getArgumentList().get(0).getScan() != null\n+                    ? zetaNode.getArgumentList().get(0).getScan().getColumnList()\n+                    : Collections.emptyList());\n     RelNode tableFunctionScan =\n         LogicalTableFunctionScan.create(\n-            getCluster(),\n-            inputs,\n-            getExpressionConverter()\n-                .convertTableValuedFunction(\n-                    input,\n-                    zetaNode.getTvf(),\n-                    zetaNode.getArgumentList(),\n-                    zetaNode.getArgumentList().get(0).getScan().getColumnList()),\n-            null,\n-            createRowTypeWithWindowStartAndEnd(input.getRowType()),\n-            Collections.EMPTY_SET);\n+            getCluster(), inputs, call, null, call.getType(), Collections.EMPTY_SET);\n \n+    // Pure SQL UDF's language body is built bottom up, so FunctionArgumentRefMapping should be\n+    // already consumed thus it can be cleared now.\n+    context.clearFunctionArgumentRefMapping();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODk2Nw=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQxMTQ2OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/FilterScanConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoyMjozMlrOGtl3Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo0NTo1MVrOGtpZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1OTQ4Mg==", "bodyText": "Should we should change all converters to use getFunctionArgumentRefMapping?", "url": "https://github.com/apache/beam/pull/12169#discussion_r450459482", "createdAt": "2020-07-06T20:22:32Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/FilterScanConverter.java", "diffHunk": "@@ -47,7 +46,7 @@ public RelNode convert(ResolvedFilterScan zetaNode, List<RelNode> inputs) {\n                 zetaNode.getFilterExpr(),\n                 zetaNode.getInputScan().getColumnList(),\n                 input.getRowType().getFieldList(),\n-                ImmutableMap.of());\n+                context.getFunctionArgumentRefMapping());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxNzQ0OQ==", "bodyText": "I am planning to improve testing coverage in next steps and gradually make necessary converters to use getFunctionArgumentRefMapping. E.g. in project or join.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450517449", "createdAt": "2020-07-06T22:45:51Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/FilterScanConverter.java", "diffHunk": "@@ -47,7 +46,7 @@ public RelNode convert(ResolvedFilterScan zetaNode, List<RelNode> inputs) {\n                 zetaNode.getFilterExpr(),\n                 zetaNode.getInputScan().getColumnList(),\n                 input.getRowType().getFieldList(),\n-                ImmutableMap.of());\n+                context.getFunctionArgumentRefMapping());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1OTQ4Mg=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQyNDI3OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoyNjo1N1rOGtl_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo1Njo1M1rOGtpmdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2MTQ4OQ==", "bodyText": "I suppose I should have used getNamePath instead of getFullName...", "url": "https://github.com/apache/beam/pull/12169#discussion_r450461489", "createdAt": "2020-07-06T20:26:57Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -171,6 +178,18 @@ public RelRoot rel(String sql, QueryParameters params) {\n                 SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n                 String.join(\".\", createFunctionStmt.getNamePath()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyMDI5Mw==", "bodyText": "Ah you mean use a List<> than joined name? I think they are equivalent but have a common way to use function name is a good idea.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450520293", "createdAt": "2020-07-06T22:55:28Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -171,6 +178,18 @@ public RelRoot rel(String sql, QueryParameters params) {\n                 SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n                 String.join(\".\", createFunctionStmt.getNamePath()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2MTQ4OQ=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyMDY5NA==", "bodyText": "Yeah, I will do that as a follow-up to avoid merge conflicts.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450520694", "createdAt": "2020-07-06T22:56:53Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -171,6 +178,18 @@ public RelRoot rel(String sql, QueryParameters params) {\n                 SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n                 String.join(\".\", createFunctionStmt.getNamePath()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2MTQ4OQ=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODQyODQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/ZetaSqlUserDefinedPureSqlTableValuedFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoyODozMVrOGtmB7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo1MDoyNlrOGtpe9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2MjE4OQ==", "bodyText": "Nit: PureSql is probably not necessary, since we already have ZetaSql in the class name.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450462189", "createdAt": "2020-07-06T20:28:31Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/ZetaSqlUserDefinedPureSqlTableValuedFunction.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import java.util.List;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.schema.Function;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlOperandTypeChecker;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlOperandTypeInference;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlReturnTypeInference;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.validate.SqlUserDefinedFunction;\n+\n+/** This is a class to indicate that a TVF is a ZetaSQL pure SQL UDTVF. */\n+@Internal\n+public class ZetaSqlUserDefinedPureSqlTableValuedFunction extends SqlUserDefinedFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxODc3NQ==", "bodyText": "PureSql is used to differentiate Java and Python UDTVF, because right now I think the latter will hit different path.\nIf in the future they all turn into use the same path, I will change this class by removing PureSql", "url": "https://github.com/apache/beam/pull/12169#discussion_r450518775", "createdAt": "2020-07-06T22:50:26Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/ZetaSqlUserDefinedPureSqlTableValuedFunction.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import java.util.List;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.schema.Function;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlOperandTypeChecker;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlOperandTypeInference;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlReturnTypeInference;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.validate.SqlUserDefinedFunction;\n+\n+/** This is a class to indicate that a TVF is a ZetaSQL pure SQL UDTVF. */\n+@Internal\n+public class ZetaSqlUserDefinedPureSqlTableValuedFunction extends SqlUserDefinedFunction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2MjE4OQ=="}, "originalCommit": {"oid": "48d355d1ced8f83c3cfd26ac39d6358110cf8fb4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODg0MzUyOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxNjo1NFrOGtp90w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxOTo1MFrOGtvdSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNjY3NQ==", "bodyText": "This should probably be debug level.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450526675", "createdAt": "2020-07-06T23:16:54Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -211,7 +212,7 @@ public RelRoot rel(String sql, QueryParameters params) {\n \n     RelNode convertedNode =\n         QueryStatementConverter.convertRootQuery(context, (ResolvedQueryStmt) statement);\n-\n+    LOG.info(\"SQLPlan>\\n\" + RelOptUtil.toString(convertedNode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9092efe67e0b2c906dac50623737acf4955a80"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNjY1MQ==", "bodyText": "oops. This is a line that was not added intentionally. Have removed it.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450616651", "createdAt": "2020-07-07T05:19:50Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -211,7 +212,7 @@ public RelRoot rel(String sql, QueryParameters params) {\n \n     RelNode convertedNode =\n         QueryStatementConverter.convertRootQuery(context, (ResolvedQueryStmt) statement);\n-\n+    LOG.info(\"SQLPlan>\\n\" + RelOptUtil.toString(convertedNode));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNjY3NQ=="}, "originalCommit": {"oid": "1d9092efe67e0b2c906dac50623737acf4955a80"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODg0Nzc5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxOToxN1rOGtqAZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxOToxMFrOGtvcmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzMzNQ==", "bodyText": "I'm guessing the meaning of Pure-sql might not be clear to those who are unfamiliar with our plans to add cross-language UDF.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450527335", "createdAt": "2020-07-06T23:19:17Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "diffHunk": "@@ -33,7 +33,16 @@\n   private final ExpressionConverter expressionConverter;\n   private final RelOptCluster cluster;\n   private final QueryTrait trait;\n-  private final Map<List<String>, ResolvedNode> sqlUDTVF;\n+  // Pure-sql user-defined table-valued function can be resolved by Analyzer. Keeping the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9092efe67e0b2c906dac50623737acf4955a80"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyOTYzNA==", "bodyText": "The comments here are all about \"pure-sql\" UDF (it won't apply to java/python UDF). Is there a better naming in your mind (or you are prefer to add a link some where to explain what is \"pure-sql\" UDF?)", "url": "https://github.com/apache/beam/pull/12169#discussion_r450529634", "createdAt": "2020-07-06T23:26:50Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "diffHunk": "@@ -33,7 +33,16 @@\n   private final ExpressionConverter expressionConverter;\n   private final RelOptCluster cluster;\n   private final QueryTrait trait;\n-  private final Map<List<String>, ResolvedNode> sqlUDTVF;\n+  // Pure-sql user-defined table-valued function can be resolved by Analyzer. Keeping the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzMzNQ=="}, "originalCommit": {"oid": "1d9092efe67e0b2c906dac50623737acf4955a80"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1MzA4Nw==", "bodyText": "Perhaps \"native SQL\"/\"SQL native\" functions is a more apt terminology.", "url": "https://github.com/apache/beam/pull/12169#discussion_r450553087", "createdAt": "2020-07-07T00:54:26Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "diffHunk": "@@ -33,7 +33,16 @@\n   private final ExpressionConverter expressionConverter;\n   private final RelOptCluster cluster;\n   private final QueryTrait trait;\n-  private final Map<List<String>, ResolvedNode> sqlUDTVF;\n+  // Pure-sql user-defined table-valued function can be resolved by Analyzer. Keeping the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzMzNQ=="}, "originalCommit": {"oid": "1d9092efe67e0b2c906dac50623737acf4955a80"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNjQ3Mg==", "bodyText": "Adopted \"SQL native\".", "url": "https://github.com/apache/beam/pull/12169#discussion_r450616472", "createdAt": "2020-07-07T05:19:10Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ConversionContext.java", "diffHunk": "@@ -33,7 +33,16 @@\n   private final ExpressionConverter expressionConverter;\n   private final RelOptCluster cluster;\n   private final QueryTrait trait;\n-  private final Map<List<String>, ResolvedNode> sqlUDTVF;\n+  // Pure-sql user-defined table-valued function can be resolved by Analyzer. Keeping the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzMzNQ=="}, "originalCommit": {"oid": "1d9092efe67e0b2c906dac50623737acf4955a80"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}