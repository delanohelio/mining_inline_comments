{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMzUzODA5", "number": 11609, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo1ODoyNVrOD5iZTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTowMDowN1rOD5ibig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjU4OTU2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo1ODoyNVrOGQ3Upw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNTozMVrOGRAd7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjgwNw==", "bodyText": "Could you add a test like this but with addValues?", "url": "https://github.com/apache/beam/pull/11609#discussion_r420336807", "createdAt": "2020-05-05T18:58:25Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "diffHunk": "@@ -97,4 +99,19 @@ public void testNanosDuration() {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFixedBytesIllegalArgument() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5687c878cd7d6285446f7c914ab2bfdce12d8061"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjYzNg==", "bodyText": "Added RowTest.testLogicalTypeWithInvalidInputValueByFieldIndex", "url": "https://github.com/apache/beam/pull/11609#discussion_r420486636", "createdAt": "2020-05-06T00:35:31Z", "author": {"login": "rahul8383"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "diffHunk": "@@ -97,4 +99,19 @@ public void testNanosDuration() {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFixedBytesIllegalArgument() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjgwNw=="}, "originalCommit": {"oid": "5687c878cd7d6285446f7c914ab2bfdce12d8061"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjU5NTMwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTowMDowN1rOGQ3YSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MDo0MVrOGRAjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzczNw==", "bodyText": "Since these tests are really checking Row's verification, I think they would be better in RowTest. Could you move them there?", "url": "https://github.com/apache/beam/pull/11609#discussion_r420337737", "createdAt": "2020-05-05T19:00:07Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "diffHunk": "@@ -97,4 +99,19 @@ public void testNanosDuration() {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFixedBytesIllegalArgument() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n+  }\n+\n+  @Test\n+  public void testFixedBytes() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArray).build();\n+    assertTrue(Arrays.equals(byteArray, row.getLogicalTypeValue(\"char\", byte[].class)));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5687c878cd7d6285446f7c914ab2bfdce12d8061"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4Nzk1MQ==", "bodyText": "Moved the tests to RowTest.java\ncase in point!\nHow can I write FixedBytes test which tests the behaviour of appending zeros? To test this behaviour, the input value should have length < expectedLength. But, if the input value's length is less than expected length, an IllegalArgumentException is thrown while building the Row.", "url": "https://github.com/apache/beam/pull/11609#discussion_r420487951", "createdAt": "2020-05-06T00:40:41Z", "author": {"login": "rahul8383"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "diffHunk": "@@ -97,4 +99,19 @@ public void testNanosDuration() {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFixedBytesIllegalArgument() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n+  }\n+\n+  @Test\n+  public void testFixedBytes() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArray).build();\n+    assertTrue(Arrays.equals(byteArray, row.getLogicalTypeValue(\"char\", byte[].class)));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzczNw=="}, "originalCommit": {"oid": "5687c878cd7d6285446f7c914ab2bfdce12d8061"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3865, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}