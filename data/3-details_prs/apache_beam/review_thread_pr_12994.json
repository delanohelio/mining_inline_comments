{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTk3MTMx", "number": 12994, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjozMjoxNlrOEpreKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjozMTozNFrOErsd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTM5MzA1OnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjozMjoxNlrOHbf3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjo1MDo1N1rOHbgEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NTYxOA==", "bodyText": "It would be nice for the next person if there is a diagnostic error message attached to this failure, lest we get a failure that says \"false is not true\".", "url": "https://github.com/apache/beam/pull/12994#discussion_r498595618", "createdAt": "2020-10-02T02:32:16Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "diffHunk": "@@ -483,4 +483,29 @@ public void testExceptionInAbortSuppressed() throws Exception {\n       assertThat(e.getSuppressed()[0].getMessage(), equalTo(\"suppressed in abort\"));\n     }\n   }\n+\n+  @Test\n+  public void testAbort() throws Exception {\n+    // Operation must be an instance of ReadOperation or ReceivingOperation per preconditions\n+    // in MapTaskExecutor.\n+    Operation o = Mockito.mock(ReadOperation.class);\n+\n+    ExecutionStateTracker stateTracker = ExecutionStateTracker.newForTest();\n+    try (MapTaskExecutor executor =\n+        new MapTaskExecutor(Arrays.<Operation>asList(o), counterSet, stateTracker)) {\n+      Mockito.doAnswer(\n+              invocation -> {\n+                executor.abort();\n+                return null;\n+              })\n+          .when(o)\n+          .start();\n+      executor.execute();\n+      fail(\"Should have aborted\");\n+    } catch (Exception e) {\n+      Assert.assertTrue(e instanceof InterruptedException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5ODk5Mg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12994#discussion_r498598992", "createdAt": "2020-10-02T02:50:57Z", "author": {"login": "tudorm"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "diffHunk": "@@ -483,4 +483,29 @@ public void testExceptionInAbortSuppressed() throws Exception {\n       assertThat(e.getSuppressed()[0].getMessage(), equalTo(\"suppressed in abort\"));\n     }\n   }\n+\n+  @Test\n+  public void testAbort() throws Exception {\n+    // Operation must be an instance of ReadOperation or ReceivingOperation per preconditions\n+    // in MapTaskExecutor.\n+    Operation o = Mockito.mock(ReadOperation.class);\n+\n+    ExecutionStateTracker stateTracker = ExecutionStateTracker.newForTest();\n+    try (MapTaskExecutor executor =\n+        new MapTaskExecutor(Arrays.<Operation>asList(o), counterSet, stateTracker)) {\n+      Mockito.doAnswer(\n+              invocation -> {\n+                executor.abort();\n+                return null;\n+              })\n+          .when(o)\n+          .start();\n+      executor.execute();\n+      fail(\"Should have aborted\");\n+    } catch (Exception e) {\n+      Assert.assertTrue(e instanceof InterruptedException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NTYxOA=="}, "originalCommit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTM5MzE3OnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjozMjoyMlrOHbf3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjo1MTowMFrOHbgEVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NTYzNQ==", "bodyText": "Same", "url": "https://github.com/apache/beam/pull/12994#discussion_r498595635", "createdAt": "2020-10-02T02:32:22Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "diffHunk": "@@ -483,4 +483,29 @@ public void testExceptionInAbortSuppressed() throws Exception {\n       assertThat(e.getSuppressed()[0].getMessage(), equalTo(\"suppressed in abort\"));\n     }\n   }\n+\n+  @Test\n+  public void testAbort() throws Exception {\n+    // Operation must be an instance of ReadOperation or ReceivingOperation per preconditions\n+    // in MapTaskExecutor.\n+    Operation o = Mockito.mock(ReadOperation.class);\n+\n+    ExecutionStateTracker stateTracker = ExecutionStateTracker.newForTest();\n+    try (MapTaskExecutor executor =\n+        new MapTaskExecutor(Arrays.<Operation>asList(o), counterSet, stateTracker)) {\n+      Mockito.doAnswer(\n+              invocation -> {\n+                executor.abort();\n+                return null;\n+              })\n+          .when(o)\n+          .start();\n+      executor.execute();\n+      fail(\"Should have aborted\");\n+    } catch (Exception e) {\n+      Assert.assertTrue(e instanceof InterruptedException);\n+      Mockito.verify(o).abort();\n+    }\n+    Assert.assertTrue(Thread.currentThread().isInterrupted());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5ODk5Ng==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12994#discussion_r498598996", "createdAt": "2020-10-02T02:51:00Z", "author": {"login": "tudorm"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "diffHunk": "@@ -483,4 +483,29 @@ public void testExceptionInAbortSuppressed() throws Exception {\n       assertThat(e.getSuppressed()[0].getMessage(), equalTo(\"suppressed in abort\"));\n     }\n   }\n+\n+  @Test\n+  public void testAbort() throws Exception {\n+    // Operation must be an instance of ReadOperation or ReceivingOperation per preconditions\n+    // in MapTaskExecutor.\n+    Operation o = Mockito.mock(ReadOperation.class);\n+\n+    ExecutionStateTracker stateTracker = ExecutionStateTracker.newForTest();\n+    try (MapTaskExecutor executor =\n+        new MapTaskExecutor(Arrays.<Operation>asList(o), counterSet, stateTracker)) {\n+      Mockito.doAnswer(\n+              invocation -> {\n+                executor.abort();\n+                return null;\n+              })\n+          .when(o)\n+          .start();\n+      executor.execute();\n+      fail(\"Should have aborted\");\n+    } catch (Exception e) {\n+      Assert.assertTrue(e instanceof InterruptedException);\n+      Mockito.verify(o).abort();\n+    }\n+    Assert.assertTrue(Thread.currentThread().isInterrupted());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NTYzNQ=="}, "originalCommit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI1NjYyOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMDowM1rOHbyE8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1OTowMVrOHb4c0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw==", "bodyText": "There is no requirement for user code to handle being interrupted arbitrarily and there are enough instances that I have seen where this would not be handled gracefully by the user.", "url": "https://github.com/apache/beam/pull/12994#discussion_r498894067", "createdAt": "2020-10-02T15:30:03Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzMzQ2Nw==", "bodyText": "Can you give an example to consider here?", "url": "https://github.com/apache/beam/pull/12994#discussion_r498933467", "createdAt": "2020-10-02T16:45:01Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw=="}, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNDkzMw==", "bodyText": "My understanding of this change is that user code will typically finish a callback and the abort will occur when control returns to the worker. To a user it should be transparently like other failures. Is that not the case?", "url": "https://github.com/apache/beam/pull/12994#discussion_r498934933", "createdAt": "2020-10-02T16:48:11Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw=="}, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNTc3OQ==", "bodyText": "Interrupting the GCS writer has caused issues with how the pipe that is used to transfer data is not gracefully shutdown leaving a blocked thread sitting around indefinitely.", "url": "https://github.com/apache/beam/pull/12994#discussion_r498935779", "createdAt": "2020-10-02T16:49:57Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw=="}, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNzM1Mw==", "bodyText": "Internally within Flume we saw with the C++ worker where user code didn't handle thread::cancel correctly and were relying on process crash to not get stuck.\nI would generally love for us to be able to interrupt random code arbitrarily as it would be the best and cleanest way to do this and if we want to do this we should really have a way for users to opt-out incase it doesn't work for them. We can watch how many people opt-out and find out why and possibly make this the default forever or choose to make this the default in portable execution as that will require a migration.", "url": "https://github.com/apache/beam/pull/12994#discussion_r498937353", "createdAt": "2020-10-02T16:53:14Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw=="}, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NDc3Ng==", "bodyText": "I may be misunderstanding, but this is a cooperative interrupt. The interrupt only happens when the user code return control.", "url": "https://github.com/apache/beam/pull/12994#discussion_r498944776", "createdAt": "2020-10-02T17:08:31Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw=="}, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5ODQ4Mw==", "bodyText": "Discussed offline: \"user\" code can mean many things, and there are some common Java errors that this change could trigger:\n\nUser's (who usually won't check the bit) doing catch-all error handling without separating out InterruptedException.\nIO libraries (which may often check the bit) doing incomplete or incorrect cleanup and being left in an inconsistent state or leaking resources.\n\nThese would ideally both be noticed and handled by higher-level mechanisms since in both cases something should be notably unhealthy about the thread, process, or VM. For now just aborting without interrupting the thread is safer.", "url": "https://github.com/apache/beam/pull/12994#discussion_r498998483", "createdAt": "2020-10-02T18:59:01Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw=="}, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjUyNzU4OnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/GroupingShuffleReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjozMTozNFrOHem14Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjozMTozNFrOHem14Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1NTcxMw==", "bodyText": "Checking atFirstValue and aborted will likely perform worse then just checking aborted all the time. It may seem redundant but the abort happens asynchronously so we may have gotten past the check in the ReadOperation already.", "url": "https://github.com/apache/beam/pull/12994#discussion_r501855713", "createdAt": "2020-10-08T16:31:34Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/GroupingShuffleReader.java", "diffHunk": "@@ -402,6 +432,14 @@ public boolean hasNext() {\n \n       @Override\n       public V next() {\n+        // Given that the underlying ReadOperation already checks the abort status after every\n+        // record it advances over (i.e., for every distinct key), we skip the check when at\n+        // the first value as that is redundant. Signal by thread interruption may be better, but\n+        // it may also have unintended side-effects.\n+        if (!atFirstValue && aborted.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba6498d3e6dad52bb0a1ef099471c20b32d2dbd"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3095, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}