{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzg1NTE5", "number": 10576, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTowMjoyMFrODYbmtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDo0OTo0NVrODe9MuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTQ0NjkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTowMjoyMFrOFeSOBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzoxMjoyNFrOFn5BNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw==", "bodyText": "Does that mean we can remove \n  \n    \n      beam/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableRunner.java\n    \n    \n         Line 154\n      in\n      e1852ca\n    \n    \n    \n    \n\n        \n          \n           pipeline.replaceAll(ImmutableList.of(JavaReadViaImpulse.boundedOverride())); \n        \n    \n  \n\n ?", "url": "https://github.com/apache/beam/pull/10576#discussion_r367300103", "createdAt": "2020-01-16T09:02:20Z", "author": {"login": "mxm"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -94,6 +106,20 @@ private Bounded(@Nullable String name, BoundedSource<T> source) {\n     public final PCollection<T> expand(PBegin input) {\n       source.validate();\n \n+      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a38048d070cb708ed5f8cdd088b895c846e199"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzMjc0MQ==", "bodyText": "Eventually yes but for now we could exclude the override if \"beam_fn_api\" was used as an experiment.", "url": "https://github.com/apache/beam/pull/10576#discussion_r367532741", "createdAt": "2020-01-16T16:50:42Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -94,6 +106,20 @@ private Bounded(@Nullable String name, BoundedSource<T> source) {\n     public final PCollection<T> expand(PBegin input) {\n       source.validate();\n \n+      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}, "originalCommit": {"oid": "10a38048d070cb708ed5f8cdd088b895c846e199"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1ODI3Nw==", "bodyText": "I thought the only application of this override is with the beam_fn_api flag enabled. The legacy translation does not support Impulse.", "url": "https://github.com/apache/beam/pull/10576#discussion_r367558277", "createdAt": "2020-01-16T17:41:30Z", "author": {"login": "mxm"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -94,6 +106,20 @@ private Bounded(@Nullable String name, BoundedSource<T> source) {\n     public final PCollection<T> expand(PBegin input) {\n       source.validate();\n \n+      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}, "originalCommit": {"oid": "10a38048d070cb708ed5f8cdd088b895c846e199"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1NDY5Ng==", "bodyText": "Users/framework will need to ensure that the beam_fn_api experiment is always used.", "url": "https://github.com/apache/beam/pull/10576#discussion_r369754696", "createdAt": "2020-01-22T19:21:29Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -94,6 +106,20 @@ private Bounded(@Nullable String name, BoundedSource<T> source) {\n     public final PCollection<T> expand(PBegin input) {\n       source.validate();\n \n+      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}, "originalCommit": {"oid": "10a38048d070cb708ed5f8cdd088b895c846e199"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3Mjk4MQ==", "bodyText": "I was able to remove JavaReadViaImpulse. It required fixing up some tests that weren't setting the beam_fn_api experiment.", "url": "https://github.com/apache/beam/pull/10576#discussion_r377372981", "createdAt": "2020-02-10T23:12:24Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -94,6 +106,20 @@ private Bounded(@Nullable String name, BoundedSource<T> source) {\n     public final PCollection<T> expand(PBegin input) {\n       source.validate();\n \n+      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}, "originalCommit": {"oid": "10a38048d070cb708ed5f8cdd088b895c846e199"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzU5OTQ5OnYy", "diffSide": "LEFT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/JavaReadViaImpulse.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyMzozM1rOFoV-yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0NzowMlrOFob-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NzQ5OQ==", "bodyText": "Just to make sure I'm understanding correctly: This transform was only used for portable pipelines, right? So it isn't needed anymore now that we execute bounded reads by wrapping them in an SDF?", "url": "https://github.com/apache/beam/pull/10576#discussion_r377847499", "createdAt": "2020-02-11T19:23:33Z", "author": {"login": "youngoli"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/JavaReadViaImpulse.java", "diffHunk": "@@ -1,176 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "970e914fa1ca509e8104c9922d389915d0d488be"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5MjgyOQ==", "bodyText": "Yes", "url": "https://github.com/apache/beam/pull/10576#discussion_r377892829", "createdAt": "2020-02-11T20:55:39Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/JavaReadViaImpulse.java", "diffHunk": "@@ -1,176 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NzQ5OQ=="}, "originalCommit": {"oid": "970e914fa1ca509e8104c9922d389915d0d488be"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTY4MA==", "bodyText": "Gotcha.\nI already approved this, but consider it double-approved.", "url": "https://github.com/apache/beam/pull/10576#discussion_r377945680", "createdAt": "2020-02-11T22:47:02Z", "author": {"login": "youngoli"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/JavaReadViaImpulse.java", "diffHunk": "@@ -1,176 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NzQ5OQ=="}, "originalCommit": {"oid": "970e914fa1ca509e8104c9922d389915d0d488be"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzg2NTUyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDo0OTo0NVrOFoYkzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDo0OTo0NVrOFoYkzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4OTk5OQ==", "bodyText": "\ud83d\udc4f", "url": "https://github.com/apache/beam/pull/10576#discussion_r377889999", "createdAt": "2020-02-11T20:49:45Z", "author": {"login": "iemejia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -177,4 +205,128 @@ public void populateDisplayData(DisplayData.Builder builder) {\n           .include(\"source\", source);\n     }\n   }\n+\n+  /**\n+   * A splittable {@link DoFn} which executes a {@link BoundedSource}.\n+   *\n+   * <p>We model the element as the original source and the restriction as the sub-source. This\n+   * allows us to split the sub-source over and over yet still receive \"source\" objects as inputs.\n+   */\n+  static class BoundedSourceAsSDFWrapperFn<T> extends DoFn<BoundedSource<T>, T> {\n+    private static final long DEFAULT_DESIRED_BUNDLE_SIZE_BYTES = 64 * (1 << 20);\n+\n+    @GetInitialRestriction\n+    public BoundedSource<T> initialRestriction(@Element BoundedSource<T> element) {\n+      return element;\n+    }\n+\n+    @GetSize\n+    public double getSize(\n+        @Restriction BoundedSource<T> restriction, PipelineOptions pipelineOptions)\n+        throws Exception {\n+      return restriction.getEstimatedSizeBytes(pipelineOptions);\n+    }\n+\n+    @SplitRestriction\n+    public void splitRestriction(\n+        @Restriction BoundedSource<T> restriction,\n+        OutputReceiver<BoundedSource<T>> receiver,\n+        PipelineOptions pipelineOptions)\n+        throws Exception {\n+      for (BoundedSource<T> split :\n+          restriction.split(DEFAULT_DESIRED_BUNDLE_SIZE_BYTES, pipelineOptions)) {\n+        receiver.output(split);\n+      }\n+    }\n+\n+    @NewTracker\n+    public RestrictionTracker<BoundedSource<T>, Object[]> restrictionTracker(\n+        @Restriction BoundedSource<T> restriction, PipelineOptions pipelineOptions) {\n+      return new BoundedSourceAsSDFRestrictionTracker<>(restriction, pipelineOptions);\n+    }\n+\n+    @ProcessElement\n+    public void processElement(\n+        RestrictionTracker<BoundedSource<T>, Object[]> tracker, OutputReceiver<T> receiver)\n+        throws IOException {\n+      Object[] out = new Object[1];\n+      while (tracker.tryClaim(out)) {\n+        receiver.output((T) out[0]);\n+      }\n+    }\n+\n+    @GetRestrictionCoder\n+    public Coder<BoundedSource<T>> restrictionCoder() {\n+      return SerializableCoder.of(new TypeDescriptor<BoundedSource<T>>() {});\n+    }\n+\n+    /**\n+     * A fake restriction tracker which adapts to the {@link BoundedSource} API. The restriction\n+     * object is used to advance the underlying source and to \"return\" the current element.\n+     */\n+    private static class BoundedSourceAsSDFRestrictionTracker<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "970e914fa1ca509e8104c9922d389915d0d488be"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2348, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}