{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTY0MDA4", "number": 11397, "title": "[BEAM-9743] Fix TFRecordCodec to try harder to read/write", "bodyText": "ReadableByteChannel/WritableByteChannel specifies that a single read/write request might be ignored, and read/write from 0 bytes to n bytes, where n is buffer.remaining(), even if there's more contents/space left in the channel.\nA similar issue has been pointed out and dealt with once. https://issues.apache.org/jira/browse/BEAM-5412?jql=text%20~%20%22tfrecord%22\nBut the same issue can happen for header and footer as well, and when writing data.\nI recently encountered this issue when trying to switch from GZIP compression to ZSTD compression.\nMake it try harder to read/write header/footer/data.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n[ R: @lukecwik ] Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-11T09:17:44Z", "url": "https://github.com/apache/beam/pull/11397", "merged": true, "mergeCommit": {"oid": "b6acaef54f3e7b1d551c71ed8ef7d52e0072a6e8"}, "closed": true, "closedAt": "2020-04-17T22:00:46Z", "author": {"login": "lukemin89"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWhvTWgH2gAyNDAyMTY0MDA4OjZkNmMxM2VjNzEyNWJhNWIwMTVhNjg0OGM4NmU4MGNkNDE4MTk0MGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYX-KpgFqTM5NTEyMzEzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6d6c13ec7125ba5b015a6848c86e80cd4181940c", "committedDate": "2020-04-11T08:50:57Z", "message": "[BEAM-9743] Fix TFRecordCodec to try harder to read/write"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzUxNTg5", "url": "https://github.com/apache/beam/pull/11397#pullrequestreview-391751589", "createdAt": "2020-04-11T09:33:07Z", "commit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTozMzowOFrOGEL2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTozMzowOFrOGEL2EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg==", "bodyText": "I'm not sure if I can/should make these better.\nIf the channel does not follow Javadoc description and keeps returning 0 without throwing,\nit might have an infinite loop.\nThat might be channel's problem, but not sure if I have to add something like hard limit on the number of retry.", "url": "https://github.com/apache/beam/pull/11397#discussion_r407041552", "createdAt": "2020-04-11T09:33:08Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +715,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }\n+\n+    @VisibleForTesting\n+    static void writeFully(WritableByteChannel channel, ByteBuffer buffer) throws IOException {\n+      while (buffer.hasRemaining()) {\n+        channel.write(buffer);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c15a4af1c18512d2b90a59c4b7326d4428bc80b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6c15a4af1c18512d2b90a59c4b7326d4428bc80b", "committedDate": "2020-04-12T00:06:21Z", "message": "[BEAM-9743] reverted header byte length check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f3f75399c000f0c45d399d02194e6db1546a6757", "committedDate": "2020-04-12T03:00:43Z", "message": "[BEAM-9743] fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTQwOTkz", "url": "https://github.com/apache/beam/pull/11397#pullrequestreview-393940993", "createdAt": "2020-04-15T16:30:27Z", "commit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo1MTo0MVrOGGCvXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjowM1rOGGDgoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTUzMg==", "bodyText": "This will only become a busy loop on async channels but will still make progress successfully. If this becomes an issue, the code can be expanded to correctly handle the busy loop.", "url": "https://github.com/apache/beam/pull/11397#discussion_r408989532", "createdAt": "2020-04-15T16:51:41Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +715,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }\n+\n+    @VisibleForTesting\n+    static void writeFully(WritableByteChannel channel, ByteBuffer buffer) throws IOException {\n+      while (buffer.hasRemaining()) {\n+        channel.write(buffer);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg=="}, "originalCommit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjUyMA==", "bodyText": "You want to ensure that the exception is because of having a truncated read so it is useful to check that the message contains a part of what you think it should have such as expected and but got. Check out https://junit.org/junit4/javadoc/4.12/org/junit/rules/ExpectedException.html or anything like it.", "url": "https://github.com/apache/beam/pull/11397#discussion_r408996520", "createdAt": "2020-04-15T17:02:50Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "diffHunk": "@@ -440,4 +456,115 @@ public void processElement(ProcessContext c) {\n       c.output(c.element().getBytes(Charsets.UTF_8));\n     }\n   }\n+\n+  static boolean maybeThisTime() {\n+    return ThreadLocalRandom.current().nextBoolean();\n+  }\n+\n+  static class PickyReadChannel extends FilterInputStream implements ReadableByteChannel {\n+    protected PickyReadChannel(InputStream in) {\n+      super(in);\n+    }\n+\n+    @Override\n+    public int read(byte[] b, int off, int len) {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int read(ByteBuffer dst) throws IOException {\n+      if (!maybeThisTime() || !dst.hasRemaining()) {\n+        return 0;\n+      }\n+      int n = read();\n+      if (n == -1) {\n+        return -1;\n+      }\n+      dst.put((byte) n);\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  static class PickyWriteChannel extends FilterOutputStream implements WritableByteChannel {\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    public PickyWriteChannel(OutputStream out) {\n+      super(out);\n+    }\n+\n+    @Override\n+    public int write(ByteBuffer src) throws IOException {\n+      if (!maybeThisTime() || !src.hasRemaining()) {\n+        return 0;\n+      }\n+      write(src.get());\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  @Test\n+  public void testReadFully() throws IOException {\n+    byte[] data = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n+    ReadableByteChannel chan = new PickyReadChannel(new ByteArrayInputStream(data));\n+\n+    ByteBuffer buffer = ByteBuffer.allocate(data.length);\n+    TFRecordCodec.readFully(chan, buffer);\n+\n+    assertArrayEquals(data, buffer.array());\n+  }\n+\n+  @Test(expected = IOException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjE0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n          \n          \n            \n                  int n, read = 0;\n          \n          \n            \n                  while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n          \n          \n            \n                    read += n;\n          \n          \n            \n                  }\n          \n          \n            \n                  return read;\n          \n          \n            \n                }\n          \n          \n            \n                private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n          \n          \n            \n                  int expected = bb.remaining();\n          \n          \n            \n                  while (bb.hasRemaining() && in.read(bb) >= 0) {\n          \n          \n            \n                  }\n          \n          \n            \n                  return expected - bb.remaining();\n          \n          \n            \n                }", "url": "https://github.com/apache/beam/pull/11397#discussion_r409002145", "createdAt": "2020-04-15T17:12:03Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +716,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, actual));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06fcb8428508afd7bd85b4845266a64bd174a47f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/06fcb8428508afd7bd85b4845266a64bd174a47f", "committedDate": "2020-04-17T02:10:48Z", "message": "[BEAM-9743] reflect comment : fix test + reformat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTIzMTMw", "url": "https://github.com/apache/beam/pull/11397#pullrequestreview-395123130", "createdAt": "2020-04-17T02:35:59Z", "commit": {"oid": "06fcb8428508afd7bd85b4845266a64bd174a47f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4181, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}