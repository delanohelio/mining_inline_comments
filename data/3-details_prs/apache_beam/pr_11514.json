{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjUwMTM5", "number": 11514, "title": "[BEAM-9488] Ensure we pass through PCollection ids instead of attempting to fix them up.", "bodyText": "Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-23T23:26:51Z", "url": "https://github.com/apache/beam/pull/11514", "merged": true, "mergeCommit": {"oid": "4a52fb44393b771daefe96d6eb4a440309447f5b"}, "closed": true, "closedAt": "2020-04-26T04:52:21Z", "author": {"login": "lukecwik"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcalfdpAH2gAyNDA4MjUwMTM5Ojk2Y2M2MTFkYTRlMTcyMTNlNjQ1OGIxMTExMmU5YzczNDNiYTI1MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca6VrSgFqTQwMDMyNjkyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/96cc611da4e17213e6458b11112e9c7343ba2509", "committedDate": "2020-04-23T23:28:58Z", "message": "[BEAM-9488] Ensure we pass through PCollection ids instead of attempting to fix them up."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79cd39d659a8b57a88d59fce9219f80e6f0a4b80", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/79cd39d659a8b57a88d59fce9219f80e6f0a4b80", "committedDate": "2020-04-23T23:26:14Z", "message": "[BEAM-9488] Ensure we pass through PCollection ids instead of attempting to fix them up."}, "afterCommit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/96cc611da4e17213e6458b11112e9c7343ba2509", "committedDate": "2020-04-23T23:28:58Z", "message": "[BEAM-9488] Ensure we pass through PCollection ids instead of attempting to fix them up."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTQ4Mzk1", "url": "https://github.com/apache/beam/pull/11514#pullrequestreview-399548395", "createdAt": "2020-04-23T23:36:50Z", "commit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozNjo1MFrOGLAXTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozNjo1MFrOGLAXTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MzQ4NA==", "bodyText": "I believe the id order aligns with the receiver order since transform_consumers built above iterates the outputs map in the same order and this gets plumbed down through to Operation.", "url": "https://github.com/apache/beam/pull/11514#discussion_r414193484", "createdAt": "2020-04-23T23:36:50Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1035,59 +1035,12 @@ def monitoring_infos(self):\n     # Construct a new dict first to remove duplicates.\n     all_monitoring_infos_dict = {}\n     for transform_id, op in self.ops.items():\n-      for mi in op.monitoring_infos(transform_id).values():\n-        fixed_mi = self._fix_output_tags_monitoring_info(transform_id, mi)\n-        all_monitoring_infos_dict[monitoring_infos.to_key(fixed_mi)] = fixed_mi\n-\n-    infos_list = list(all_monitoring_infos_dict.values())\n-\n-    def inject_pcollection(monitoring_info):\n-      \"\"\"\n-      If provided metric is element count metric:\n-      Finds relevant transform output info in current process_bundle_descriptor\n-      and adds tag with PCOLLECTION_LABEL and pcollection_id into monitoring\n-      info.\n-      \"\"\"\n-      if monitoring_info.urn in URNS_NEEDING_PCOLLECTIONS:\n-        if not monitoring_infos.PTRANSFORM_LABEL in monitoring_info.labels:\n-          return\n-        ptransform_label = monitoring_info.labels[\n-            monitoring_infos.PTRANSFORM_LABEL]\n-        if not monitoring_infos.TAG_LABEL in monitoring_info.labels:\n-          return\n-        tag_label = monitoring_info.labels[monitoring_infos.TAG_LABEL]\n-\n-        if not ptransform_label in self.process_bundle_descriptor.transforms:\n-          return\n-        if not tag_label in self.process_bundle_descriptor.transforms[\n-            ptransform_label].outputs:\n-          return\n-\n-        pcollection_name = (\n-            self.process_bundle_descriptor.transforms[ptransform_label].\n-            outputs[tag_label])\n-\n-        monitoring_info.labels[\n-            monitoring_infos.PCOLLECTION_LABEL] = pcollection_name\n-\n-        # Cleaning up labels that are not in specification.\n-        monitoring_info.labels.pop(monitoring_infos.PTRANSFORM_LABEL)\n-        monitoring_info.labels.pop(monitoring_infos.TAG_LABEL)\n-\n-    for mi in infos_list:\n-      inject_pcollection(mi)\n-\n-    return infos_list\n+      pcollection_ids = self.process_bundle_descriptor.transforms[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTU4MzI4", "url": "https://github.com/apache/beam/pull/11514#pullrequestreview-399558328", "createdAt": "2020-04-24T00:06:37Z", "commit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNjozN1rOGLBB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyMTowNlrOGLBWAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDM3NQ==", "bodyText": "This will change if you use a mapping, but zip would be the idiom to use here.", "url": "https://github.com/apache/beam/pull/11514#discussion_r414204375", "createdAt": "2020-04-24T00:06:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/operations.py", "diffHunk": "@@ -337,43 +337,48 @@ def add_receiver(self, operation, output_index=0):\n     \"\"\"Adds a receiver operation for the specified output.\"\"\"\n     self.consumers[output_index].append(operation)\n \n-  def monitoring_infos(self, transform_id):\n-    # type: (str) -> Dict[FrozenSet, metrics_pb2.MonitoringInfo]\n+  def monitoring_infos(self, transform_id, pcollection_ids):\n+    # type: (str, list(str)) -> Dict[FrozenSet, metrics_pb2.MonitoringInfo]\n \n     \"\"\"Returns the list of MonitoringInfos collected by this operation.\"\"\"\n     all_monitoring_infos = self.execution_time_monitoring_infos(transform_id)\n     all_monitoring_infos.update(\n-        self.pcollection_count_monitoring_infos(transform_id))\n+        self.pcollection_count_monitoring_infos(pcollection_ids))\n     all_monitoring_infos.update(self.user_monitoring_infos(transform_id))\n     return all_monitoring_infos\n \n-  def pcollection_count_monitoring_infos(self, transform_id):\n+  def pcollection_count_monitoring_infos(self, pcollection_ids):\n     \"\"\"Returns the element count MonitoringInfo collected by this operation.\"\"\"\n-    if len(self.receivers) == 1:\n-      # If there is exactly one output, we can unambiguously\n-      # fix its name later, which we do.\n-      # TODO(robertwb): Plumb the actual name here.\n+    if len(self.receivers) != len(pcollection_ids):\n+      raise RuntimeError(\n+          'Unexpected number of receivers for number of pcollections %s %s' %\n+          (self.receivers, pcollection_ids))\n+\n+    all_monitoring_infos = {}\n+    for i in range(len(self.receivers)):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNjU1Mw==", "bodyText": "In practice this might be OK (dicts have undefined, but I think when modified deterministic, iteration order), but seems rather brittle to me. Could we instead passed the tag -> pcollection_id mapping here?", "url": "https://github.com/apache/beam/pull/11514#discussion_r414206553", "createdAt": "2020-04-24T00:12:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1035,59 +1035,12 @@ def monitoring_infos(self):\n     # Construct a new dict first to remove duplicates.\n     all_monitoring_infos_dict = {}\n     for transform_id, op in self.ops.items():\n-      for mi in op.monitoring_infos(transform_id).values():\n-        fixed_mi = self._fix_output_tags_monitoring_info(transform_id, mi)\n-        all_monitoring_infos_dict[monitoring_infos.to_key(fixed_mi)] = fixed_mi\n-\n-    infos_list = list(all_monitoring_infos_dict.values())\n-\n-    def inject_pcollection(monitoring_info):\n-      \"\"\"\n-      If provided metric is element count metric:\n-      Finds relevant transform output info in current process_bundle_descriptor\n-      and adds tag with PCOLLECTION_LABEL and pcollection_id into monitoring\n-      info.\n-      \"\"\"\n-      if monitoring_info.urn in URNS_NEEDING_PCOLLECTIONS:\n-        if not monitoring_infos.PTRANSFORM_LABEL in monitoring_info.labels:\n-          return\n-        ptransform_label = monitoring_info.labels[\n-            monitoring_infos.PTRANSFORM_LABEL]\n-        if not monitoring_infos.TAG_LABEL in monitoring_info.labels:\n-          return\n-        tag_label = monitoring_info.labels[monitoring_infos.TAG_LABEL]\n-\n-        if not ptransform_label in self.process_bundle_descriptor.transforms:\n-          return\n-        if not tag_label in self.process_bundle_descriptor.transforms[\n-            ptransform_label].outputs:\n-          return\n-\n-        pcollection_name = (\n-            self.process_bundle_descriptor.transforms[ptransform_label].\n-            outputs[tag_label])\n-\n-        monitoring_info.labels[\n-            monitoring_infos.PCOLLECTION_LABEL] = pcollection_name\n-\n-        # Cleaning up labels that are not in specification.\n-        monitoring_info.labels.pop(monitoring_infos.PTRANSFORM_LABEL)\n-        monitoring_info.labels.pop(monitoring_infos.TAG_LABEL)\n-\n-    for mi in infos_list:\n-      inject_pcollection(mi)\n-\n-    return infos_list\n+      pcollection_ids = self.process_bundle_descriptor.transforms[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MzQ4NA=="}, "originalCommit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODY0Mg==", "bodyText": "This would be a bug, right?", "url": "https://github.com/apache/beam/pull/11514#discussion_r414208642", "createdAt": "2020-04-24T00:18:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1035,59 +1035,12 @@ def monitoring_infos(self):\n     # Construct a new dict first to remove duplicates.\n     all_monitoring_infos_dict = {}\n     for transform_id, op in self.ops.items():\n-      for mi in op.monitoring_infos(transform_id).values():\n-        fixed_mi = self._fix_output_tags_monitoring_info(transform_id, mi)\n-        all_monitoring_infos_dict[monitoring_infos.to_key(fixed_mi)] = fixed_mi\n-\n-    infos_list = list(all_monitoring_infos_dict.values())\n-\n-    def inject_pcollection(monitoring_info):\n-      \"\"\"\n-      If provided metric is element count metric:\n-      Finds relevant transform output info in current process_bundle_descriptor\n-      and adds tag with PCOLLECTION_LABEL and pcollection_id into monitoring\n-      info.\n-      \"\"\"\n-      if monitoring_info.urn in URNS_NEEDING_PCOLLECTIONS:\n-        if not monitoring_infos.PTRANSFORM_LABEL in monitoring_info.labels:\n-          return\n-        ptransform_label = monitoring_info.labels[\n-            monitoring_infos.PTRANSFORM_LABEL]\n-        if not monitoring_infos.TAG_LABEL in monitoring_info.labels:\n-          return\n-        tag_label = monitoring_info.labels[monitoring_infos.TAG_LABEL]\n-\n-        if not ptransform_label in self.process_bundle_descriptor.transforms:\n-          return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODk2MA==", "bodyText": "Likewise this.", "url": "https://github.com/apache/beam/pull/11514#discussion_r414208960", "createdAt": "2020-04-24T00:19:33Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1035,59 +1035,12 @@ def monitoring_infos(self):\n     # Construct a new dict first to remove duplicates.\n     all_monitoring_infos_dict = {}\n     for transform_id, op in self.ops.items():\n-      for mi in op.monitoring_infos(transform_id).values():\n-        fixed_mi = self._fix_output_tags_monitoring_info(transform_id, mi)\n-        all_monitoring_infos_dict[monitoring_infos.to_key(fixed_mi)] = fixed_mi\n-\n-    infos_list = list(all_monitoring_infos_dict.values())\n-\n-    def inject_pcollection(monitoring_info):\n-      \"\"\"\n-      If provided metric is element count metric:\n-      Finds relevant transform output info in current process_bundle_descriptor\n-      and adds tag with PCOLLECTION_LABEL and pcollection_id into monitoring\n-      info.\n-      \"\"\"\n-      if monitoring_info.urn in URNS_NEEDING_PCOLLECTIONS:\n-        if not monitoring_infos.PTRANSFORM_LABEL in monitoring_info.labels:\n-          return\n-        ptransform_label = monitoring_info.labels[\n-            monitoring_infos.PTRANSFORM_LABEL]\n-        if not monitoring_infos.TAG_LABEL in monitoring_info.labels:\n-          return\n-        tag_label = monitoring_info.labels[monitoring_infos.TAG_LABEL]\n-\n-        if not ptransform_label in self.process_bundle_descriptor.transforms:\n-          return\n-        if not tag_label in self.process_bundle_descriptor.transforms[\n-            ptransform_label].outputs:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTUzOQ==", "bodyText": "Actually, this can happen, and might be what's happening here. There is no PCollection for this tag, but the user outputted a value to this tag. It would make sense to record this output even if we didn't use it. This is another downside of attaching these counters to PCollections themselves rather than to PTransform outputs.", "url": "https://github.com/apache/beam/pull/11514#discussion_r414209539", "createdAt": "2020-04-24T00:21:06Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1035,59 +1035,12 @@ def monitoring_infos(self):\n     # Construct a new dict first to remove duplicates.\n     all_monitoring_infos_dict = {}\n     for transform_id, op in self.ops.items():\n-      for mi in op.monitoring_infos(transform_id).values():\n-        fixed_mi = self._fix_output_tags_monitoring_info(transform_id, mi)\n-        all_monitoring_infos_dict[monitoring_infos.to_key(fixed_mi)] = fixed_mi\n-\n-    infos_list = list(all_monitoring_infos_dict.values())\n-\n-    def inject_pcollection(monitoring_info):\n-      \"\"\"\n-      If provided metric is element count metric:\n-      Finds relevant transform output info in current process_bundle_descriptor\n-      and adds tag with PCOLLECTION_LABEL and pcollection_id into monitoring\n-      info.\n-      \"\"\"\n-      if monitoring_info.urn in URNS_NEEDING_PCOLLECTIONS:\n-        if not monitoring_infos.PTRANSFORM_LABEL in monitoring_info.labels:\n-          return\n-        ptransform_label = monitoring_info.labels[\n-            monitoring_infos.PTRANSFORM_LABEL]\n-        if not monitoring_infos.TAG_LABEL in monitoring_info.labels:\n-          return\n-        tag_label = monitoring_info.labels[monitoring_infos.TAG_LABEL]\n-\n-        if not ptransform_label in self.process_bundle_descriptor.transforms:\n-          return\n-        if not tag_label in self.process_bundle_descriptor.transforms[\n-            ptransform_label].outputs:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODk2MA=="}, "originalCommit": {"oid": "96cc611da4e17213e6458b11112e9c7343ba2509"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "808b4b9984c294da65852c104ee8a5cb23c0a691", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/808b4b9984c294da65852c104ee8a5cb23c0a691", "committedDate": "2020-04-24T03:31:01Z", "message": "fixup! Convert to list since values() isn't subscriptable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjYzMzk1", "url": "https://github.com/apache/beam/pull/11514#pullrequestreview-400263395", "createdAt": "2020-04-24T20:53:06Z", "commit": {"oid": "808b4b9984c294da65852c104ee8a5cb23c0a691"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04c6334dd00b881b223dd5c0196c7c3bcd530233", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/04c6334dd00b881b223dd5c0196c7c3bcd530233", "committedDate": "2020-04-24T21:01:36Z", "message": "fixup! Use zip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051c094e307d049210d7db025758f3c7efbc9ae7", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/051c094e307d049210d7db025758f3c7efbc9ae7", "committedDate": "2020-04-24T21:43:35Z", "message": "fixup! Migrate to use tag -> pcollection id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c03658498142beebeb950bb9464ecad2cea11a5", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/4c03658498142beebeb950bb9464ecad2cea11a5", "committedDate": "2020-04-24T22:47:25Z", "message": "fixup! lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1297a0b76162771c409f040af6ea48f680be3586", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/1297a0b76162771c409f040af6ea48f680be3586", "committedDate": "2020-04-24T23:24:06Z", "message": "fixup! Fix comparison"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzI2OTI0", "url": "https://github.com/apache/beam/pull/11514#pullrequestreview-400326924", "createdAt": "2020-04-24T23:46:17Z", "commit": {"oid": "1297a0b76162771c409f040af6ea48f680be3586"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3932, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}