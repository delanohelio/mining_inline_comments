{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzI0NTIw", "number": 11976, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxNjo1M1rOEEgA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowODowMVrOEFn3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU0Mjg0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxNjo1M1rOGiKZxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTowODo0OVrOGjWmBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NTIwNw==", "bodyText": "Conventionally, if there are multiple cases for a given test, they should be combined into the same function, and run as a loop.\nSee https://gobyexample.com/testing for an excellent example.\nOtherwise, this function should be named TestFunctionOutputSize_2", "url": "https://github.com/apache/beam/pull/11976#discussion_r438475207", "createdAt": "2020-06-11T00:16:53Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMzUyNw==", "bodyText": "I had a look at the go by example, was very helpful. Changes in a4d5083 .", "url": "https://github.com/apache/beam/pull/11976#discussion_r439723527", "createdAt": "2020-06-13T09:08:49Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NTIwNw=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU1MjMwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMjoxOFrOGiKfbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMjoxOFrOGiKfbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjY1NQ==", "bodyText": "In Go, Identifiers that start with a capital letter are Exported and accessible by code importing the package. As such Exported functions form the packages external API. Not that doesn't prevent the function from being unit tested in the associated _test.go file.\nWe don't want this function as part of the Beam API surface, as it's an internal implementation detail, that isn't necessary for users to invoke directly.\nFurther, the \"er\" bit idiomatically implies that it's an interface. Eg. Closer, Writer, Reader which are interfaces for values with a Close, Write, and Read methods respectively.\nSo with all that together, consider renaming it formatParDoError.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438476655", "createdAt": "2020-06-11T00:22:18Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU1ODE3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNTo0NlrOGiKi6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTo1ODo0OFrOGjWyGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzU0NA==", "bodyText": "Same comment here, WRT exported functions being part of the external API. Please rename this to recommendParDo.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438477544", "createdAt": "2020-06-11T00:25:46Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNjYxNw==", "bodyText": "db99bf4", "url": "https://github.com/apache/beam/pull/11976#discussion_r439726617", "createdAt": "2020-06-13T09:58:48Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzU0NA=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU2MDkzOnYy", "diffSide": "RIGHT", "path": "sdks/go/test/regression/pardo_test.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNzoyMlrOGiKkiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNzoyMlrOGiKkiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3Nzk2MA==", "bodyText": "Following from the comment I made before, if this test remains stand alone, TestRecommendParDo_OneOutput is the idiomatic name.  The general form is  Test<Func/struct under test>_", "url": "https://github.com/apache/beam/pull/11976#discussion_r438477960", "createdAt": "2020-06-11T00:27:22Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/regression/pardo_test.go", "diffHunk": "@@ -56,3 +58,39 @@ func TestEmitParDoAfterGBK(t *testing.T) {\n \t\tt.Error(err)\n \t}\n }\n+\n+// Keep the ParDo misalignment messages concise.\n+// FIXME: Review\n+// [beam-10169] identified that the error message returned to the user when the\n+// DoFn output is misaligned with the ParDo output was unclear. in order to\n+// make the user debug experience shorter, a more concise error message is\n+// required.\n+//\n+// This suite of brittle tests are to ensure that the returned errors are adhere\n+// to the ParDo API provided by the go sdk.\n+\n+func TestRecommendParDoWithOneOutput(t *testing.T) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU3MTIzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDozMzozMlrOGiKqvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTo1ODozNlrOGjWyCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTU0OQ==", "bodyText": "Switch statements in Go can accept a value, so this can be rewritten as\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tswitch {\n          \n          \n            \n            \tcase emitDim == 0:\n          \n          \n            \n            \t\treturn ParDo0\n          \n          \n            \n            \tcase emitDim == 1:\n          \n          \n            \n            \t\treturn ParDo\n          \n          \n            \n            \tcase emitDim == 2:\n          \n          \n            \n            \t\treturn ParDo2\n          \n          \n            \n            \tcase emitDim == 3:\n          \n          \n            \n            \t\treturn ParDo3\n          \n          \n            \n            \tcase emitDim == 4:\n          \n          \n            \n            \t\treturn ParDo4\n          \n          \n            \n            \tcase emitDim == 5:\n          \n          \n            \n            \t\treturn ParDo5\n          \n          \n            \n            \tcase emitDim == 6:\n          \n          \n            \n            \t\treturn ParDo6\n          \n          \n            \n            \tcase emitDim == 7:\n          \n          \n            \n            \t\treturn ParDo7\n          \n          \n            \n            \t}\n          \n          \n            \n            \treturn ParDoN\n          \n          \n            \n            }\n          \n          \n            \n            \tswitch emitDim {\n          \n          \n            \n            \tcase 0:\n          \n          \n            \n            \t\treturn ParDo0\n          \n          \n            \n            \tcase 1:\n          \n          \n            \n            \t\treturn ParDo\n          \n          \n            \n            \tcase 2:\n          \n          \n            \n            \t\treturn ParDo2\n          \n          \n            \n            \tcase 3:\n          \n          \n            \n            \t\treturn ParDo3\n          \n          \n            \n            \tcase  4:\n          \n          \n            \n            \t\treturn ParDo4\n          \n          \n            \n            \tcase 5:\n          \n          \n            \n            \t\treturn ParDo5\n          \n          \n            \n            \tcase 6:\n          \n          \n            \n            \t\treturn ParDo6\n          \n          \n            \n            \tcase 7:\n          \n          \n            \n            \t\treturn ParDo7\n          \n          \n            \n            \t}\n          \n          \n            \n            \treturn ParDoN\n          \n          \n            \n            }", "url": "https://github.com/apache/beam/pull/11976#discussion_r438479549", "createdAt": "2020-06-11T00:33:32Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {\n+\tswitch {\n+\tcase emitDim == 0:\n+\t\treturn ParDo0\n+\tcase emitDim == 1:\n+\t\treturn ParDo\n+\tcase emitDim == 2:\n+\t\treturn ParDo2\n+\tcase emitDim == 3:\n+\t\treturn ParDo3\n+\tcase emitDim == 4:\n+\t\treturn ParDo4\n+\tcase emitDim == 5:\n+\t\treturn ParDo5\n+\tcase emitDim == 6:\n+\t\treturn ParDo6\n+\tcase emitDim == 7:\n+\t\treturn ParDo7\n+\t}\n+\treturn ParDoN\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDEzMg==", "bodyText": "What I'd recommend here instead though is to return a string instead of the function.\nswitch emitDim {\n case 0,2,3,4,5,6,7:\n  return fmt.Sprintf(\"ParDo%d\", emitDim)\ncase 1:\n  return \"ParDo\"  \ndefault:\n  return \"ParDoN\"\n}\n\nEasier to read, and see if it's correct. Read Effective Go for more about Switches", "url": "https://github.com/apache/beam/pull/11976#discussion_r438534132", "createdAt": "2020-06-11T04:20:13Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {\n+\tswitch {\n+\tcase emitDim == 0:\n+\t\treturn ParDo0\n+\tcase emitDim == 1:\n+\t\treturn ParDo\n+\tcase emitDim == 2:\n+\t\treturn ParDo2\n+\tcase emitDim == 3:\n+\t\treturn ParDo3\n+\tcase emitDim == 4:\n+\t\treturn ParDo4\n+\tcase emitDim == 5:\n+\t\treturn ParDo5\n+\tcase emitDim == 6:\n+\t\treturn ParDo6\n+\tcase emitDim == 7:\n+\t\treturn ParDo7\n+\t}\n+\treturn ParDoN\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTU0OQ=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNjYwMg==", "bodyText": "db99bf4", "url": "https://github.com/apache/beam/pull/11976#discussion_r439726602", "createdAt": "2020-06-13T09:58:36Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {\n+\tswitch {\n+\tcase emitDim == 0:\n+\t\treturn ParDo0\n+\tcase emitDim == 1:\n+\t\treturn ParDo\n+\tcase emitDim == 2:\n+\t\treturn ParDo2\n+\tcase emitDim == 3:\n+\t\treturn ParDo3\n+\tcase emitDim == 4:\n+\t\treturn ParDo4\n+\tcase emitDim == 5:\n+\t\treturn ParDo5\n+\tcase emitDim == 6:\n+\t\treturn ParDo6\n+\tcase emitDim == 7:\n+\t\treturn ParDo7\n+\t}\n+\treturn ParDoN\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTU0OQ=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkyMDQ5OnYy", "diffSide": "RIGHT", "path": "sdks/go/test/regression/pardo_test.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMTo0N1rOGiOBUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoyMTo0N1rOGiOBUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDQ4MQ==", "bodyText": "Consider putting this into the beam_test package rather than in the go regression test package. This package is intended for bugs when interacting with runners, which is harder to test independantly in the Go unit tests.\nIn particular, I recommend adding a new test file:\n.../sdks/go/pkg/beam/pardo_test.go\nThe main \"gotcha\" is you should copy the License header to the top of the file, as that's a requirement for the project.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438534481", "createdAt": "2020-06-11T04:21:47Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/regression/pardo_test.go", "diffHunk": "@@ -16,6 +16,8 @@\n package regression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2MTEzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo0OTozMVrOGiOaQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo0OTozMVrOGiOaQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MDg2Nw==", "bodyText": "Note that regardless of the DoFn we need to check the expectations for every value against a given constant.\nConsider wrapping the whole if block in the new function instead, and passing in the DoFn (so we can get the name), ret for the number of outputs, and the expected number of outputs from the constant. The function can be called mustHaveOutputs() . This way we can avoid specifying the expected number of outputs twice (in the if condition, and in the message) because it'll be in a function parameter.\n(In Go, a Must prefix indicates the function will panic if the operation fails, rather than return an error. Usually they're discouraged, but in this case we have no choice but to panic. The ParDo functions could be described as Must functions, but that would get tiring WRT pipeline construction very quickly, so the shorter version without must, but with a Try prefix variant for the one Error handling version (TryParDo) was chosen instead.)", "url": "https://github.com/apache/beam/pull/11976#discussion_r438540867", "createdAt": "2020-06-11T04:49:31Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2MzU3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1MDo1MlrOGiObmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1MDo1MlrOGiObmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTIwOQ==", "bodyText": "Style wise, you should have a space after the // and before the function name.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541209", "createdAt": "2020-06-11T04:50:52Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "diffHunk": "@@ -45,3 +45,13 @@ func LoadFunction(ptr uintptr, t reflect.Type) interface{} {\n \t*(*unsafe.Pointer)(unsafe.Pointer(v.Addr().Pointer())) = unsafe.Pointer(p)\n \treturn v.Interface()\n }\n+\n+//FunctionOutputSize returns the dimensions of the output of a function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2NTA1OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1MTo1MFrOGiOcfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozMDoxNFrOGjuNOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTQzNw==", "bodyText": "Per other comments, I don't think this function is necessary, as fun and cool reflection is, using it should be avoided unless impossible because it complicates maintenance.\n\nDoFns can be structs instead, with a ProcessElement method.\nDoFn outputs in a function signature aren't directly related to the function outputs, so this is incorrect.\n\nDoFns can have \"emitter functions\" as parameters, which are used to output 0 or more values to the Nth PCollection of the ParDo. The main return (if one exists) is always the first PCollection, and they proceed from there. Similarly\neg. a function with the signature\nfunc(K,V string, e1, e2, e3 func(string)) (string, string) would require a ParDo4 since it takes a PCollection<KV<string,string>> as an input, and has 4 outputs.\nThe first output is a KV<string,string>, and then there are 3 PCollection as well.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541437", "createdAt": "2020-06-11T04:51:50Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "diffHunk": "@@ -45,3 +45,13 @@ func LoadFunction(ptr uintptr, t reflect.Type) interface{} {\n \t*(*unsafe.Pointer)(unsafe.Pointer(v.Addr().Pointer())) = unsafe.Pointer(p)\n \treturn v.Interface()\n }\n+\n+//FunctionOutputSize returns the dimensions of the output of a function.\n+// Panics if the type is not a function.\n+func FunctionOutputSize(fn interface{}) int {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxMDA2Mw==", "bodyText": "Hmm I see, perhaps I've gone down a wrong path here then, let me have another review of the code and see what existing tooling is there to resolve this.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438710063", "createdAt": "2020-06-11T11:11:00Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "diffHunk": "@@ -45,3 +45,13 @@ func LoadFunction(ptr uintptr, t reflect.Type) interface{} {\n \t*(*unsafe.Pointer)(unsafe.Pointer(v.Addr().Pointer())) = unsafe.Pointer(p)\n \treturn v.Interface()\n }\n+\n+//FunctionOutputSize returns the dimensions of the output of a function.\n+// Panics if the type is not a function.\n+func FunctionOutputSize(fn interface{}) int {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTQzNw=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMDM5Mg==", "bodyText": "8c9e030", "url": "https://github.com/apache/beam/pull/11976#discussion_r440110392", "createdAt": "2020-06-15T11:30:14Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "diffHunk": "@@ -45,3 +45,13 @@ func LoadFunction(ptr uintptr, t reflect.Type) interface{} {\n \t*(*unsafe.Pointer)(unsafe.Pointer(v.Addr().Pointer())) = unsafe.Pointer(p)\n \treturn v.Interface()\n }\n+\n+//FunctionOutputSize returns the dimensions of the output of a function.\n+// Panics if the type is not a function.\n+func FunctionOutputSize(fn interface{}) int {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTQzNw=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2NjMwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1MjozOFrOGiOdNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToyMjoyNFrOGjt-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTYyMw==", "bodyText": "DoFns in the Go SDK can be Structs instead of funcs, which means these functions will panic with less helpful error messages since they won't be functions.\nHowever, we know about this already, so we have a suite of Go SDK internal functions to handle this. In this case You want graph.Fn which returns a graph.Fn which has a Name() method which can be used to get the DoFn's name.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541623", "createdAt": "2020-06-11T04:52:38Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTMyMw==", "bodyText": "@lostluck , do we cast it from interface{} to graph.Fn type? Is that safe to do so?", "url": "https://github.com/apache/beam/pull/11976#discussion_r439729323", "createdAt": "2020-06-13T10:43:08Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTYyMw=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTg4Nw==", "bodyText": "I used the FunctionName from the reflectx package because what's passed through to ParDo is a interface{} type.", "url": "https://github.com/apache/beam/pull/11976#discussion_r439729887", "createdAt": "2020-06-13T10:52:09Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTYyMw=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NTExOA==", "bodyText": "I see where the confusion is coming in. What I meant was to call graph.NewFn(doFn) which will return the graph.Fn value which you can then call Name() on.\nhttps://github.com/apache/beam/blob/master/sdks/go/pkg/beam/core/graph/fn.go#L78\nAt the point you're calling it, you already know it's going to be valid (since it was called by the TryParDo earlier).  Go isn't magic, and won't change the type of an interface{} value unless assigned explicitly (which won't happen in this scope). interface{} values are passed by value, so even if you change the type them they'll remain the same in the outer scope: See an example here https://play.golang.org/p/A5QDrGyRwUu", "url": "https://github.com/apache/beam/pull/11976#discussion_r439765118", "createdAt": "2020-06-13T19:59:09Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTYyMw=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNjY2Ng==", "bodyText": "45f4a84", "url": "https://github.com/apache/beam/pull/11976#discussion_r440106666", "createdAt": "2020-06-15T11:22:24Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTYyMw=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk2NzIwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDo1MzowOVrOGiOdzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToyNDoyNFrOGjuCHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTc3NA==", "bodyText": "typo: outputs\nThe \"Use\" should be \"use\",", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541774", "createdAt": "2020-06-11T04:53:09Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzU1MQ==", "bodyText": "45f4a84", "url": "https://github.com/apache/beam/pull/11976#discussion_r440107551", "createdAt": "2020-06-15T11:24:24Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTc3NA=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk3OTQ0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTowMTo0M1rOGiOlaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDowMjoxOFrOGjWy_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MzcyMA==", "bodyText": "Idiomatically, Go uses \"got and want\" as the variables, as well as in the test error output.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438543720", "createdAt": "2020-06-11T05:01:43Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {\n+\texpected := 2\n+\treceived := FunctionOutputSize(testFunction2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNjg0NA==", "bodyText": "a4d5083", "url": "https://github.com/apache/beam/pull/11976#discussion_r439726844", "createdAt": "2020-06-13T10:02:18Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {\n+\texpected := 2\n+\treceived := FunctionOutputSize(testFunction2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MzcyMA=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTk4MTczOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTowMzoyMlrOGiOm5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDozMToyMlrOGjW5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NDEwMg==", "bodyText": "It should be possible for a user to not look at the test code to understand what happened for this test.\nSo a better test output would be:\nt.Errorf(\"FunctionOutputSize(%v) =  %d, want %d\", <testfunctionname/signature>,received, expected)", "url": "https://github.com/apache/beam/pull/11976#discussion_r438544102", "createdAt": "2020-06-11T05:03:22Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {\n+\texpected := 2\n+\treceived := FunctionOutputSize(testFunction2)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyODU3Mw==", "bodyText": "945dc7a", "url": "https://github.com/apache/beam/pull/11976#discussion_r439728573", "createdAt": "2020-06-13T10:31:22Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {\n+\texpected := 2\n+\treceived := FunctionOutputSize(testFunction2)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NDEwMg=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTY0NjMwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDowMDo1NlrOGjZI8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToyNDozM1rOGjuCWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NTIzNA==", "bodyText": "Note that now that you've changed the return type of recommendParDo, you don't need to call reflectx.FunctionName anymore.", "url": "https://github.com/apache/beam/pull/11976#discussion_r439765234", "createdAt": "2020-06-13T20:00:56Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -428,31 +428,20 @@ func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n \tparDoName := reflectx.FunctionName(parDo)\n \tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n \n-\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\tuseParDo := reflectx.FunctionName(recommendParDo(doFnOutSize))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzYxMQ==", "bodyText": "45f4a84", "url": "https://github.com/apache/beam/pull/11976#discussion_r440107611", "createdAt": "2020-06-15T11:24:33Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -428,31 +428,20 @@ func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n \tparDoName := reflectx.FunctionName(parDo)\n \tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n \n-\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\tuseParDo := reflectx.FunctionName(recommendParDo(doFnOutSize))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NTIzNA=="}, "originalCommit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTY0NzE2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo_test.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDowMjozNlrOGjZJWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToyNToyMFrOGjuDyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NTMzOQ==", "bodyText": "The name needs to be updated here: recommendParDo", "url": "https://github.com/apache/beam/pull/11976#discussion_r439765339", "createdAt": "2020-06-13T20:02:36Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import \"testing\"\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzk3OA==", "bodyText": "db99bf4", "url": "https://github.com/apache/beam/pull/11976#discussion_r440107978", "createdAt": "2020-06-15T11:25:20Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import \"testing\"\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NTMzOQ=="}, "originalCommit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI1MTk1OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo0OToyOVrOGj6fcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0Nzo0MFrOGkTxYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMTY2Ng==", "bodyText": "Ah clever! But not in the hard to debug way. :D I like it.\nOptional Nit: It's no longer really recommending, but naming the appropriate DoFn for the size in this use. parDoForSize might be a more accurate name, but, honestly, either is fine.\nHad there only been the one call, I'd have suggested inlining it since the switch isn't that large.\nEither way, since it's being used twice, that justifies that switch being in it's own function.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440311666", "createdAt": "2020-06-15T16:49:29Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +412,36 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(formatParDoError(dofn, len(ret), 7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//formatParDoError is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+//\n+// We construct a new graph.Fn using the doFn which is passed. We explicitly\n+// ignore the error since we already know that its already a DoFn type as\n+// TryParDo would have panicked otherwise.\n+func formatParDoError(doFn interface{}, emitSize int, parDoSize int) string {\n+\tdoFun, _ := graph.NewFn(doFn)\n+\tdoFnName := doFun.Name()\n+\n+\tthisParDo := recommendParDo(parDoSize) // Conveniently keeps the API slim.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzMTY3NA==", "bodyText": "I like brevity, I will implement this.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440531674", "createdAt": "2020-06-16T01:17:15Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +412,36 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(formatParDoError(dofn, len(ret), 7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//formatParDoError is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+//\n+// We construct a new graph.Fn using the doFn which is passed. We explicitly\n+// ignore the error since we already know that its already a DoFn type as\n+// TryParDo would have panicked otherwise.\n+func formatParDoError(doFn interface{}, emitSize int, parDoSize int) string {\n+\tdoFun, _ := graph.NewFn(doFn)\n+\tdoFnName := doFun.Name()\n+\n+\tthisParDo := recommendParDo(parDoSize) // Conveniently keeps the API slim.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMTY2Ng=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTg1OA==", "bodyText": "b31ab3a", "url": "https://github.com/apache/beam/pull/11976#discussion_r440725858", "createdAt": "2020-06-16T09:47:40Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +412,36 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(formatParDoError(dofn, len(ret), 7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//formatParDoError is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+//\n+// We construct a new graph.Fn using the doFn which is passed. We explicitly\n+// ignore the error since we already know that its already a DoFn type as\n+// TryParDo would have panicked otherwise.\n+func formatParDoError(doFn interface{}, emitSize int, parDoSize int) string {\n+\tdoFun, _ := graph.NewFn(doFn)\n+\tdoFnName := doFun.Name()\n+\n+\tthisParDo := recommendParDo(parDoSize) // Conveniently keeps the API slim.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMTY2Ng=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI4MjY3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo_test.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1ODoxMlrOGj6zew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NzozNFrOGkTxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjc5NQ==", "bodyText": "It might be worth commenting here that this function is just to validate that the name is sourced properly in TestFormatParDoError since the number of errors don't match.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440316795", "createdAt": "2020-06-15T16:58:12Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzMTgxOA==", "bodyText": "Good idea, I will implement this. Thanks.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440531818", "createdAt": "2020-06-16T01:17:52Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjc5NQ=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTc5Nw==", "bodyText": "0affb73", "url": "https://github.com/apache/beam/pull/11976#discussion_r440725797", "createdAt": "2020-06-16T09:47:34Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjc5NQ=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzMwMzUyOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo_test.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowNDoxOFrOGj7A7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1NDoyM1rOGkUA6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMDIzNg==", "bodyText": "Please add  3 more test cases here for 2 and 7,8 to cover those boundary conditions.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440320236", "createdAt": "2020-06-15T17:04:18Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzMTkxOA==", "bodyText": "Will do. Cheers.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440531918", "createdAt": "2020-06-16T01:18:14Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMDIzNg=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyOTgzMw==", "bodyText": "d9b5ef0", "url": "https://github.com/apache/beam/pull/11976#discussion_r440729833", "createdAt": "2020-06-16T09:54:23Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMDIzNg=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzMxMzExOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo_test.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowNzoxNVrOGj7HLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozODozMVrOGkuGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTgzNw==", "bodyText": "Since the \"complicated\" bit for this is in the recommendParDo code, which is already being tested very well, this test should be sufficient for the parts in formatParDoError. I don't expect the formatting to change any time soon.\nWe do have the english grammar nit (\"1 outputs\"), but handling that grammar correction isn't worth the extra code to resolve it.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440321837", "createdAt": "2020-06-15T17:07:15Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {\n+\treturn 42\n+}\n+\n+func TestFormatParDoError(t *testing.T) {\n+\tgot := formatParDoError(testFunction, 2, 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzMjUzOQ==", "bodyText": "I'm open to spend a bit more time to do this, or would you like me to remove the test here?\nI agree, covering the the recommendParDo function is more important. Happy to defer to your decision here.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440532539", "createdAt": "2020-06-16T01:20:32Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {\n+\treturn 42\n+}\n+\n+func TestFormatParDoError(t *testing.T) {\n+\tgot := formatParDoError(testFunction, 2, 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTgzNw=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NzIwMg==", "bodyText": "Please do keep the test! My comment was that because the logic that's unique to formatParDoError is so small, the test can also be small.", "url": "https://github.com/apache/beam/pull/11976#discussion_r441157202", "createdAt": "2020-06-16T21:38:31Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {\n+\treturn 42\n+}\n+\n+func TestFormatParDoError(t *testing.T) {\n+\tgot := formatParDoError(testFunction, 2, 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTgzNw=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzMxNTgzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pardo.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowODowMVrOGj7I2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMToyNzoyMFrOGkIFQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMjI2NA==", "bodyText": "Nit: add a space between // and formatParDoError", "url": "https://github.com/apache/beam/pull/11976#discussion_r440322264", "createdAt": "2020-06-15T17:08:01Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +412,36 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(formatParDoError(dofn, len(ret), 7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//formatParDoError is a helper function to provide a more concise error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzNDMzOQ==", "bodyText": "7c612c9", "url": "https://github.com/apache/beam/pull/11976#discussion_r440534339", "createdAt": "2020-06-16T01:27:20Z", "author": {"login": "codeBehindMe"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +412,36 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(formatParDoError(dofn, len(ret), 7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//formatParDoError is a helper function to provide a more concise error", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMjI2NA=="}, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3665, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}