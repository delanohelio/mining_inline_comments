{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODMwOTU4", "number": 10946, "title": "[BEAM-9363] TUMBLE as TVF", "bodyText": "Relevant doc: https://s.apache.org/streaming-beam-sql\nSupport\n\"select * from TUMBLE((select * from KeyValue), descriptor(ts), 'INTERVAL 1 SECOND')\n\nNote that ZetaSQL needs an improvement to fully support TVF windowing. This PR adds a skeleton as a starter for moving streaming windowing to FROM clause by using TVF.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-24T06:34:09Z", "url": "https://github.com/apache/beam/pull/10946", "merged": true, "mergeCommit": {"oid": "bd4523b76d1c481aa8a03a7f3694d6f2c0be99c7"}, "closed": true, "closedAt": "2020-05-19T04:44:32Z", "author": {"login": "amaliujia"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXnrnugBqjMyMzIzNDEyODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciph1JAH2gAyMzc4ODMwOTU4OmQwMzAxNTlkYmQ5MTU5ZDVlYjlmY2M5ZWZjODM4Y2I0MTIyMjYyNGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0705337917680ca0674378ac4594ce49b67f8367", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/0705337917680ca0674378ac4594ce49b67f8367", "committedDate": "2020-02-24T06:49:11Z", "message": "fixup! fix styles"}, "afterCommit": {"oid": "f8daf25aede8eb76e80352a48e31c0e72775f8a5", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/f8daf25aede8eb76e80352a48e31c0e72775f8a5", "committedDate": "2020-04-14T18:19:53Z", "message": "[BEAM-9363] TUMBLE as TVF."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8daf25aede8eb76e80352a48e31c0e72775f8a5", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/f8daf25aede8eb76e80352a48e31c0e72775f8a5", "committedDate": "2020-04-14T18:19:53Z", "message": "[BEAM-9363] TUMBLE as TVF."}, "afterCommit": {"oid": "0a3eadfacf14ffd8fd5355cfca1d8c346951e20c", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/0a3eadfacf14ffd8fd5355cfca1d8c346951e20c", "committedDate": "2020-04-14T18:21:50Z", "message": "[BEAM-9363] TUMBLE as TVF."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a3eadfacf14ffd8fd5355cfca1d8c346951e20c", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/0a3eadfacf14ffd8fd5355cfca1d8c346951e20c", "committedDate": "2020-04-14T18:21:50Z", "message": "[BEAM-9363] TUMBLE as TVF."}, "afterCommit": {"oid": "999b44ca918f355cba37d11533a05751eebbd9bf", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/999b44ca918f355cba37d11533a05751eebbd9bf", "committedDate": "2020-04-14T18:24:33Z", "message": "[BEAM-9363] TUMBLE as TVF."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/0d1f235d3d4fb647027ad5ec625973802a15c7d0", "committedDate": "2020-04-14T18:27:09Z", "message": "[BEAM-9363] TUMBLE as TVF."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "999b44ca918f355cba37d11533a05751eebbd9bf", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/999b44ca918f355cba37d11533a05751eebbd9bf", "committedDate": "2020-04-14T18:24:33Z", "message": "[BEAM-9363] TUMBLE as TVF."}, "afterCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/0d1f235d3d4fb647027ad5ec625973802a15c7d0", "committedDate": "2020-04-14T18:27:09Z", "message": "[BEAM-9363] TUMBLE as TVF."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTg5MDY5", "url": "https://github.com/apache/beam/pull/10946#pullrequestreview-393189069", "createdAt": "2020-04-14T18:29:52Z", "commit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoyOTo1MlrOGFbmPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoyOTo1MlrOGFbmPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0ODIyMQ==", "bodyText": "This is named like it is a generic table function scan, but it seems to implement just a very specialized table function. Shouldn't the function be a parameter to the rel?", "url": "https://github.com/apache/beam/pull/10946#discussion_r408348221", "createdAt": "2020-04-14T18:29:52Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef7f2b0dfded87b4a2df7f3ecc52b491104a169", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/cef7f2b0dfded87b4a2df7f3ecc52b491104a169", "committedDate": "2020-04-14T20:14:05Z", "message": "fixup! add missing java import."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjU2MTA2", "url": "https://github.com/apache/beam/pull/10946#pullrequestreview-407656106", "createdAt": "2020-05-07T16:49:41Z", "commit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0OTo0MVrOGSHZaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0OTo0MVrOGSHZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0ODc0NA==", "bodyText": "Can you add a class comment please?", "url": "https://github.com/apache/beam/pull/10946#discussion_r421648744", "createdAt": "2020-05-07T16:49:41Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjU3MjU2", "url": "https://github.com/apache/beam/pull/10946#pullrequestreview-407657256", "createdAt": "2020-05-07T16:51:08Z", "commit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1MTowOFrOGSHc5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1MTowOFrOGSHc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0OTYzOQ==", "bodyText": "This is now closed. Maybe it is worth cleaning up the comment now?", "url": "https://github.com/apache/beam/pull/10946#discussion_r421649639", "createdAt": "2020-05-07T16:51:08Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/planner/BeamRuleSets.java", "diffHunk": "@@ -133,7 +134,7 @@\n           // remove unnecessary sort rule\n           // https://issues.apache.org/jira/browse/BEAM-5073", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjY1ODIx", "url": "https://github.com/apache/beam/pull/10946#pullrequestreview-407665821", "createdAt": "2020-05-07T17:02:19Z", "commit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzowMjoyMFrOGSH4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo0Mzo1NlrOGSJYNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NjYwNw==", "bodyText": "I don't know checkArgument too well, does it output the expected size? E.g. it would be nice if this error message said something like,\n%s expected 1 input but received %s", "url": "https://github.com/apache/beam/pull/10946#discussion_r421656607", "createdAt": "2020-05-07T17:02:20Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {\n+  public BeamTableFunctionScanRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      List<RelNode> inputs,\n+      RexNode rexCall,\n+      Type elementType,\n+      RelDataType rowType,\n+      Set<RelColumnMapping> columnMappings) {\n+    super(cluster, traitSet, inputs, rexCall, elementType, rowType, columnMappings);\n+  }\n+\n+  @Override\n+  public TableFunctionScan copy(\n+      RelTraitSet traitSet,\n+      List<RelNode> list,\n+      RexNode rexNode,\n+      Type type,\n+      RelDataType relDataType,\n+      Set<RelColumnMapping> set) {\n+    return new BeamTableFunctionScanRel(\n+        getCluster(), traitSet, list, rexNode, type, relDataType, columnMappings);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    return new Transform();\n+  }\n+\n+  private class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      checkArgument(\n+          input.size() == 1,\n+          \"Wrong number of inputs for %s: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1ODIzNA==", "bodyText": "Here too. It would be nice if the error message included the offending operator name.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421658234", "createdAt": "2020-05-07T17:05:02Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {\n+  public BeamTableFunctionScanRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      List<RelNode> inputs,\n+      RexNode rexCall,\n+      Type elementType,\n+      RelDataType rowType,\n+      Set<RelColumnMapping> columnMappings) {\n+    super(cluster, traitSet, inputs, rexCall, elementType, rowType, columnMappings);\n+  }\n+\n+  @Override\n+  public TableFunctionScan copy(\n+      RelTraitSet traitSet,\n+      List<RelNode> list,\n+      RexNode rexNode,\n+      Type type,\n+      RelDataType relDataType,\n+      Set<RelColumnMapping> set) {\n+    return new BeamTableFunctionScanRel(\n+        getCluster(), traitSet, list, rexNode, type, relDataType, columnMappings);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    return new Transform();\n+  }\n+\n+  private class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      checkArgument(\n+          input.size() == 1,\n+          \"Wrong number of inputs for %s: %s\",\n+          BeamTableFunctionScanRel.class.getSimpleName(),\n+          input);\n+      checkArgument(\n+          ((RexCall) getCall()).getOperator().getName().equals(\"TUMBLE\"),\n+          \"Only support TUMBLE table-valued function\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2MTY4NA==", "bodyText": "If this isn't to be resolved in this PR, would having an associated Jira be appropriate?\nOr... is this TODO out of date? I see window start and end are used below.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421661684", "createdAt": "2020-05-07T17:10:59Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {\n+  public BeamTableFunctionScanRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      List<RelNode> inputs,\n+      RexNode rexCall,\n+      Type elementType,\n+      RelDataType rowType,\n+      Set<RelColumnMapping> columnMappings) {\n+    super(cluster, traitSet, inputs, rexCall, elementType, rowType, columnMappings);\n+  }\n+\n+  @Override\n+  public TableFunctionScan copy(\n+      RelTraitSet traitSet,\n+      List<RelNode> list,\n+      RexNode rexNode,\n+      Type type,\n+      RelDataType relDataType,\n+      Set<RelColumnMapping> set) {\n+    return new BeamTableFunctionScanRel(\n+        getCluster(), traitSet, list, rexNode, type, relDataType, columnMappings);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    return new Transform();\n+  }\n+\n+  private class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      checkArgument(\n+          input.size() == 1,\n+          \"Wrong number of inputs for %s: %s\",\n+          BeamTableFunctionScanRel.class.getSimpleName(),\n+          input);\n+      checkArgument(\n+          ((RexCall) getCall()).getOperator().getName().equals(\"TUMBLE\"),\n+          \"Only support TUMBLE table-valued function\");\n+      RexCall call = ((RexCall) getCall());\n+      RexInputRef wmCol = (RexInputRef) call.getOperands().get(1);\n+      PCollection<Row> upstream = input.get(0);\n+      Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+      return upstream\n+          .apply(\n+              ParDo.of(\n+                  new FixedWindowDoFn(\n+                      FixedWindows.of(durationParameter(call.getOperands().get(2))),\n+                      wmCol.getIndex(),\n+                      outputSchema)))\n+          .setRowSchema(outputSchema);\n+    }\n+  }\n+\n+  private Duration durationParameter(RexNode node) {\n+    return Duration.millis(longValue(node));\n+  }\n+\n+  private long longValue(RexNode operand) {\n+    if (operand instanceof RexLiteral) {\n+      return ((Number) RexLiteral.value(operand)).longValue();\n+    } else {\n+      throw new IllegalArgumentException(String.format(\"[%s] is not valid.\", operand));\n+    }\n+  }\n+\n+  private static class FixedWindowDoFn extends DoFn<Row, Row> {\n+    private int windowFieldIndex;\n+    private FixedWindows windowFn;\n+    private Schema outputSchema;\n+\n+    public FixedWindowDoFn(FixedWindows windowFn, int windowFieldIndex, Schema schema) {\n+      this.windowFn = windowFn;\n+      this.windowFieldIndex = windowFieldIndex;\n+      this.outputSchema = schema;\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext c) {\n+      Row row = c.element();\n+      IntervalWindow window = windowFn.assignWindow(row.getDateTime(windowFieldIndex).toInstant());\n+      Row.Builder builder = Row.withSchema(outputSchema);\n+      builder.addValues(row.getValues());\n+      // TODO: add window_start and window_end;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NDgxNg==", "bodyText": "Can you explain the logic here? It may be worth adding a comment to describe the calculation.\nFor example, how does cpu = row_count^2 * row_size ? It isn't obvious to me.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421664816", "createdAt": "2020-05-07T17:16:25Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {\n+  public BeamTableFunctionScanRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      List<RelNode> inputs,\n+      RexNode rexCall,\n+      Type elementType,\n+      RelDataType rowType,\n+      Set<RelColumnMapping> columnMappings) {\n+    super(cluster, traitSet, inputs, rexCall, elementType, rowType, columnMappings);\n+  }\n+\n+  @Override\n+  public TableFunctionScan copy(\n+      RelTraitSet traitSet,\n+      List<RelNode> list,\n+      RexNode rexNode,\n+      Type type,\n+      RelDataType relDataType,\n+      Set<RelColumnMapping> set) {\n+    return new BeamTableFunctionScanRel(\n+        getCluster(), traitSet, list, rexNode, type, relDataType, columnMappings);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    return new Transform();\n+  }\n+\n+  private class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      checkArgument(\n+          input.size() == 1,\n+          \"Wrong number of inputs for %s: %s\",\n+          BeamTableFunctionScanRel.class.getSimpleName(),\n+          input);\n+      checkArgument(\n+          ((RexCall) getCall()).getOperator().getName().equals(\"TUMBLE\"),\n+          \"Only support TUMBLE table-valued function\");\n+      RexCall call = ((RexCall) getCall());\n+      RexInputRef wmCol = (RexInputRef) call.getOperands().get(1);\n+      PCollection<Row> upstream = input.get(0);\n+      Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+      return upstream\n+          .apply(\n+              ParDo.of(\n+                  new FixedWindowDoFn(\n+                      FixedWindows.of(durationParameter(call.getOperands().get(2))),\n+                      wmCol.getIndex(),\n+                      outputSchema)))\n+          .setRowSchema(outputSchema);\n+    }\n+  }\n+\n+  private Duration durationParameter(RexNode node) {\n+    return Duration.millis(longValue(node));\n+  }\n+\n+  private long longValue(RexNode operand) {\n+    if (operand instanceof RexLiteral) {\n+      return ((Number) RexLiteral.value(operand)).longValue();\n+    } else {\n+      throw new IllegalArgumentException(String.format(\"[%s] is not valid.\", operand));\n+    }\n+  }\n+\n+  private static class FixedWindowDoFn extends DoFn<Row, Row> {\n+    private int windowFieldIndex;\n+    private FixedWindows windowFn;\n+    private Schema outputSchema;\n+\n+    public FixedWindowDoFn(FixedWindows windowFn, int windowFieldIndex, Schema schema) {\n+      this.windowFn = windowFn;\n+      this.windowFieldIndex = windowFieldIndex;\n+      this.outputSchema = schema;\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext c) {\n+      Row row = c.element();\n+      IntervalWindow window = windowFn.assignWindow(row.getDateTime(windowFieldIndex).toInstant());\n+      Row.Builder builder = Row.withSchema(outputSchema);\n+      builder.addValues(row.getValues());\n+      // TODO: add window_start and window_end;\n+      builder.addValue(window.start());\n+      builder.addValue(window.end());\n+      c.output(builder.build());\n+    }\n+  }\n+\n+  @Override\n+  public NodeStats estimateNodeStats(RelMetadataQuery mq) {\n+    return BeamSqlRelUtils.getNodeStats(getInput(0), mq);\n+  }\n+\n+  @Override\n+  public BeamCostModel beamComputeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    NodeStats inputEstimates = BeamSqlRelUtils.getNodeStats(getInput(0), mq);\n+\n+    final double rowSize = getRowType().getFieldCount();\n+    final double cpu = inputEstimates.getRowCount() * inputEstimates.getRowCount() * rowSize;\n+    final double cpuRate = inputEstimates.getRate() * inputEstimates.getWindow() * rowSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NTg4OA==", "bodyText": "Please add a class comment.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421665888", "createdAt": "2020-05-07T17:18:15Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rule/BeamTableFunctionScanRule.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rule;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamLogicalConvention;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamTableFunctionScanRel;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.Convention;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.convert.ConverterRule;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalTableFunctionScan;\n+\n+public class BeamTableFunctionScanRule extends ConverterRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NjQzOQ==", "bodyText": "Should this be a checkArgument?", "url": "https://github.com/apache/beam/pull/10946#discussion_r421666439", "createdAt": "2020-05-07T17:19:09Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rule/BeamTableFunctionScanRule.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rule;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamLogicalConvention;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamTableFunctionScanRel;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.Convention;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.convert.ConverterRule;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalTableFunctionScan;\n+\n+public class BeamTableFunctionScanRule extends ConverterRule {\n+  public static final BeamTableFunctionScanRule INSTANCE = new BeamTableFunctionScanRule();\n+\n+  private BeamTableFunctionScanRule() {\n+    super(\n+        LogicalTableFunctionScan.class,\n+        Convention.NONE,\n+        BeamLogicalConvention.INSTANCE,\n+        \"BeamTableFunctionScanRule\");\n+  }\n+\n+  @Override\n+  public RelNode convert(RelNode relNode) {\n+    TableFunctionScan tableFunctionScan = (TableFunctionScan) relNode;\n+    // only support one input for table function scan.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDIwMA==", "bodyText": "Please add class comment.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421670200", "createdAt": "2020-05-07T17:25:37Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlWindowTableFunction.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlFunction;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlFunctionCategory;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlKind;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlReturnTypeInference;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.validate.SqlValidator;\n+\n+public class SqlWindowTableFunction extends SqlFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MjUzNA==", "bodyText": "For my own understanding, where are they checked?", "url": "https://github.com/apache/beam/pull/10946#discussion_r421672534", "createdAt": "2020-05-07T17:29:17Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlWindowTableFunction.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlFunction;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlFunctionCategory;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlKind;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlReturnTypeInference;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.validate.SqlValidator;\n+\n+public class SqlWindowTableFunction extends SqlFunction {\n+  public SqlWindowTableFunction(String name) {\n+    super(\n+        name,\n+        SqlKind.OTHER_FUNCTION,\n+        ARG0_TABLE_FUNCTION_WINDOWING,\n+        null,\n+        null,\n+        SqlFunctionCategory.SYSTEM);\n+  }\n+\n+  @Override\n+  public SqlOperandCountRange getOperandCountRange() {\n+    return SqlOperandCountRanges.of(3);\n+  }\n+\n+  @Override\n+  public boolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure) {\n+    // There should only be three operands, and number of operands are checked before\n+    // this call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NTczMw==", "bodyText": "Please add a method comment since it is public and not 'simple' like a getter or setter.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421675733", "createdAt": "2020-05-07T17:34:39Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -551,6 +561,60 @@ public RexNode convertResolvedLiteral(ResolvedLiteral resolvedLiteral) {\n     return ret;\n   }\n \n+  public RexCall convertTableValuedFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODA3OA==", "bodyText": "Can you do wmCol.getName() or is this different?", "url": "https://github.com/apache/beam/pull/10946#discussion_r421678078", "createdAt": "2020-05-07T17:38:38Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -551,6 +561,60 @@ public RexNode convertResolvedLiteral(ResolvedLiteral resolvedLiteral) {\n     return ret;\n   }\n \n+  public RexCall convertTableValuedFunction(\n+      RelNode input,\n+      TableValuedFunction tvf,\n+      List<ResolvedNodes.ResolvedTVFArgument> argumentList,\n+      List<ResolvedColumn> inputTableColumns) {\n+    switch (tvf.getName()) {\n+      case \"TUMBLE\":\n+        // TUMBLE tvf's second argument is descriptor.\n+        ResolvedColumn wmCol =\n+            extractWatermarkColumnFromDescriptor(argumentList.get(1).getDescriptorArg());\n+        if (wmCol.getType().getKind() != TYPE_TIMESTAMP) {\n+          throw new IllegalArgumentException(\n+              \"Watermarked column should be TIMESTAMP type: \"\n+                  + extractWatermarkColumnNameFromDescriptor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3OTM2OQ==", "bodyText": "Would this be more descriptive as an IllegalStateException? Either way having a message would be useful here.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421679369", "createdAt": "2020-05-07T17:40:49Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -551,6 +561,60 @@ public RexNode convertResolvedLiteral(ResolvedLiteral resolvedLiteral) {\n     return ret;\n   }\n \n+  public RexCall convertTableValuedFunction(\n+      RelNode input,\n+      TableValuedFunction tvf,\n+      List<ResolvedNodes.ResolvedTVFArgument> argumentList,\n+      List<ResolvedColumn> inputTableColumns) {\n+    switch (tvf.getName()) {\n+      case \"TUMBLE\":\n+        // TUMBLE tvf's second argument is descriptor.\n+        ResolvedColumn wmCol =\n+            extractWatermarkColumnFromDescriptor(argumentList.get(1).getDescriptorArg());\n+        if (wmCol.getType().getKind() != TYPE_TIMESTAMP) {\n+          throw new IllegalArgumentException(\n+              \"Watermarked column should be TIMESTAMP type: \"\n+                  + extractWatermarkColumnNameFromDescriptor(\n+                      argumentList.get(1).getDescriptorArg()));\n+        }\n+        return (RexCall)\n+            rexBuilder()\n+                .makeCall(\n+                    new SqlWindowTableFunction(SqlKind.TUMBLE.name()),\n+                    convertRelNodeToRexRangeRef(input),\n+                    convertWatermarkedResolvedColumnToRexInputRef(wmCol, inputTableColumns),\n+                    convertIntervalToRexIntervalLiteral(\n+                        (ResolvedLiteral) argumentList.get(2).getExpr()));\n+      default:\n+        throw new UnsupportedOperationException(\n+            \"Does not support table-valued function: \" + tvf.getName());\n+    }\n+  }\n+\n+  private RexInputRef convertWatermarkedResolvedColumnToRexInputRef(\n+      ResolvedColumn wmCol, List<ResolvedColumn> inputTableColumns) {\n+    for (int i = 0; i < inputTableColumns.size(); i++) {\n+      if (inputTableColumns.get(i).equals(wmCol)) {\n+        return rexBuilder()\n+            .makeInputRef(TypeUtils.toRelDataType(rexBuilder(), wmCol.getType(), false), i);\n+      }\n+    }\n+\n+    // ZetaSQL parser guarantees that wmCol can be found from inputTableColumns.\n+    // so it shouldn't reach here.\n+    throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3OTkxMA==", "bodyText": "Please add a class comment. They're really useful and should be on all classes and non-trivial public methods.", "url": "https://github.com/apache/beam/pull/10946#discussion_r421679910", "createdAt": "2020-05-07T17:41:40Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation;\n+\n+import com.google.zetasql.resolvedast.ResolvedNode;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFArgument;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFScan;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalTableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n+\n+class TVFScanConverter extends RelConverter<ResolvedTVFScan> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MTIwNA==", "bodyText": "I've seen window_start and window_end come up a few times in this PR. Is there a reasonable place to have these as constants and would it make sense to do this?", "url": "https://github.com/apache/beam/pull/10946#discussion_r421681204", "createdAt": "2020-05-07T17:43:56Z", "author": {"login": "tysonjh"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation;\n+\n+import com.google.zetasql.resolvedast.ResolvedNode;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFArgument;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFScan;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalTableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n+\n+class TVFScanConverter extends RelConverter<ResolvedTVFScan> {\n+\n+  TVFScanConverter(ConversionContext context) {\n+    super(context);\n+  }\n+\n+  @Override\n+  public RelNode convert(ResolvedTVFScan zetaNode, List<RelNode> inputs) {\n+    RelNode input = inputs.get(0);\n+    RelNode tableFunctionScan =\n+        LogicalTableFunctionScan.create(\n+            getCluster(),\n+            inputs,\n+            getExpressionConverter()\n+                .convertTableValuedFunction(\n+                    input,\n+                    zetaNode.getTvf(),\n+                    zetaNode.getArgumentList(),\n+                    zetaNode.getArgumentList().get(0).getScan().getColumnList()),\n+            null,\n+            createRowTypeWithWindowStartAndEnd(input.getRowType()),\n+            Collections.EMPTY_SET);\n+\n+    return tableFunctionScan;\n+  }\n+\n+  @Override\n+  public List<ResolvedNode> getInputs(ResolvedTVFScan zetaNode) {\n+    List<ResolvedNode> inputs = new ArrayList();\n+    for (ResolvedTVFArgument argument : zetaNode.getArgumentList()) {\n+      if (argument.getScan() != null) {\n+        inputs.add(argument.getScan());\n+      }\n+    }\n+    return inputs;\n+  }\n+\n+  private RelDataType createRowTypeWithWindowStartAndEnd(RelDataType inputRowType) {\n+    List<RelDataTypeField> newFields = new ArrayList<>(inputRowType.getFieldList());\n+    RelDataType timestampType = getCluster().getTypeFactory().createSqlType(SqlTypeName.TIMESTAMP);\n+\n+    RelDataTypeField windowStartField =\n+        new RelDataTypeFieldImpl(\"window_start\", newFields.size(), timestampType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f15f14ce180ba8da11de613f54d432c91ec276f2", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/f15f14ce180ba8da11de613f54d432c91ec276f2", "committedDate": "2020-05-08T20:01:48Z", "message": "fixup! address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDgwMzky", "url": "https://github.com/apache/beam/pull/10946#pullrequestreview-409480392", "createdAt": "2020-05-11T19:50:52Z", "commit": {"oid": "f15f14ce180ba8da11de613f54d432c91ec276f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo1MDo1MlrOGTq8_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo1MDo1MlrOGTq8_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3OTg2OQ==", "bodyText": "This still appears to actually be a \"FixedWindowsTableFunctionRel\".", "url": "https://github.com/apache/beam/pull/10946#discussion_r423279869", "createdAt": "2020-05-11T19:50:52Z", "author": {"login": "kennknowles"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+/**\n+ * BeamRelNode to replace {@code TableFunctionScan}. Currently this class limits to support\n+ * table-valued function for streaming windowing.\n+ */\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {\n+  public BeamTableFunctionScanRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      List<RelNode> inputs,\n+      RexNode rexCall,\n+      Type elementType,\n+      RelDataType rowType,\n+      Set<RelColumnMapping> columnMappings) {\n+    super(cluster, traitSet, inputs, rexCall, elementType, rowType, columnMappings);\n+  }\n+\n+  @Override\n+  public TableFunctionScan copy(\n+      RelTraitSet traitSet,\n+      List<RelNode> list,\n+      RexNode rexNode,\n+      Type type,\n+      RelDataType relDataType,\n+      Set<RelColumnMapping> set) {\n+    return new BeamTableFunctionScanRel(\n+        getCluster(), traitSet, list, rexNode, type, relDataType, columnMappings);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    return new Transform();\n+  }\n+\n+  private class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      checkArgument(\n+          input.size() == 1,\n+          \"Wrong number of inputs for %s, expected 1 input but received: %s\",\n+          BeamTableFunctionScanRel.class.getSimpleName(),\n+          input);\n+      String operatorName = ((RexCall) getCall()).getOperator().getName();\n+      checkArgument(\n+          operatorName.equals(\"TUMBLE\"),\n+          \"Only support TUMBLE table-valued function. Current operator: %s\",\n+          operatorName);\n+      RexCall call = ((RexCall) getCall());\n+      RexInputRef wmCol = (RexInputRef) call.getOperands().get(1);\n+      PCollection<Row> upstream = input.get(0);\n+      Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+      return upstream\n+          .apply(\n+              ParDo.of(\n+                  new FixedWindowDoFn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15f14ce180ba8da11de613f54d432c91ec276f2"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8", "committedDate": "2020-05-13T20:04:05Z", "message": "fixup! update Rel cost computation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjI5NzE5", "url": "https://github.com/apache/beam/pull/10946#pullrequestreview-412229719", "createdAt": "2020-05-14T22:30:05Z", "commit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MDAzNjc0", "url": "https://github.com/apache/beam/pull/10946#pullrequestreview-414003674", "createdAt": "2020-05-18T23:29:34Z", "commit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzoyOTozNFrOGXKv2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0Mzo0NFrOGXK_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0NjUyMg==", "bodyText": "Shouldn't columnMappings here be set? This is discarding the value provided as an argument to copy.", "url": "https://github.com/apache/beam/pull/10946#discussion_r426946522", "createdAt": "2020-05-18T23:29:34Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+/**\n+ * BeamRelNode to replace {@code TableFunctionScan}. Currently this class limits to support\n+ * table-valued function for streaming windowing.\n+ */\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {\n+  public BeamTableFunctionScanRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      List<RelNode> inputs,\n+      RexNode rexCall,\n+      Type elementType,\n+      RelDataType rowType,\n+      Set<RelColumnMapping> columnMappings) {\n+    super(cluster, traitSet, inputs, rexCall, elementType, rowType, columnMappings);\n+  }\n+\n+  @Override\n+  public TableFunctionScan copy(\n+      RelTraitSet traitSet,\n+      List<RelNode> list,\n+      RexNode rexNode,\n+      Type type,\n+      RelDataType relDataType,\n+      Set<RelColumnMapping> set) {\n+    return new BeamTableFunctionScanRel(\n+        getCluster(), traitSet, list, rexNode, type, relDataType, columnMappings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0ODQ4Ng==", "bodyText": "all three of these should be final.", "url": "https://github.com/apache/beam/pull/10946#discussion_r426948486", "createdAt": "2020-05-18T23:36:20Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamTableFunctionScanRel.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static org.apache.beam.vendor.calcite.v1_20_0.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.windowing.FixedWindows;\n+import org.apache.beam.sdk.transforms.windowing.IntervalWindow;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.TableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelColumnMapping;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexNode;\n+import org.joda.time.Duration;\n+\n+/**\n+ * BeamRelNode to replace {@code TableFunctionScan}. Currently this class limits to support\n+ * table-valued function for streaming windowing.\n+ */\n+public class BeamTableFunctionScanRel extends TableFunctionScan implements BeamRelNode {\n+  public BeamTableFunctionScanRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      List<RelNode> inputs,\n+      RexNode rexCall,\n+      Type elementType,\n+      RelDataType rowType,\n+      Set<RelColumnMapping> columnMappings) {\n+    super(cluster, traitSet, inputs, rexCall, elementType, rowType, columnMappings);\n+  }\n+\n+  @Override\n+  public TableFunctionScan copy(\n+      RelTraitSet traitSet,\n+      List<RelNode> list,\n+      RexNode rexNode,\n+      Type type,\n+      RelDataType relDataType,\n+      Set<RelColumnMapping> set) {\n+    return new BeamTableFunctionScanRel(\n+        getCluster(), traitSet, list, rexNode, type, relDataType, columnMappings);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    return new Transform();\n+  }\n+\n+  private class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      checkArgument(\n+          input.size() == 1,\n+          \"Wrong number of inputs for %s, expected 1 input but received: %s\",\n+          BeamTableFunctionScanRel.class.getSimpleName(),\n+          input);\n+      String operatorName = ((RexCall) getCall()).getOperator().getName();\n+      checkArgument(\n+          operatorName.equals(\"TUMBLE\"),\n+          \"Only support TUMBLE table-valued function. Current operator: %s\",\n+          operatorName);\n+      RexCall call = ((RexCall) getCall());\n+      RexInputRef wmCol = (RexInputRef) call.getOperands().get(1);\n+      PCollection<Row> upstream = input.get(0);\n+      Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+      return upstream\n+          .apply(\n+              ParDo.of(\n+                  new FixedWindowDoFn(\n+                      FixedWindows.of(durationParameter(call.getOperands().get(2))),\n+                      wmCol.getIndex(),\n+                      outputSchema)))\n+          .setRowSchema(outputSchema);\n+    }\n+  }\n+\n+  private Duration durationParameter(RexNode node) {\n+    return Duration.millis(longValue(node));\n+  }\n+\n+  private long longValue(RexNode operand) {\n+    if (operand instanceof RexLiteral) {\n+      return ((Number) RexLiteral.value(operand)).longValue();\n+    } else {\n+      throw new IllegalArgumentException(String.format(\"[%s] is not valid.\", operand));\n+    }\n+  }\n+\n+  private static class FixedWindowDoFn extends DoFn<Row, Row> {\n+    private int windowFieldIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTY3Mg==", "bodyText": "Nit: This seems like stuff that should go in SqlWindowTableFunction. Do these constants really need their own class?", "url": "https://github.com/apache/beam/pull/10946#discussion_r426949672", "createdAt": "2020-05-18T23:40:21Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/TVFStreamingUtils.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.utils;\n+\n+/** Provides static constants or utils for TVF streaming. */\n+public class TVFStreamingUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTgxOA==", "bodyText": "Use the constant?", "url": "https://github.com/apache/beam/pull/10946#discussion_r426949818", "createdAt": "2020-05-18T23:40:51Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation;\n+\n+import com.google.zetasql.resolvedast.ResolvedNode;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFArgument;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFScan;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalTableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n+\n+class TVFScanConverter extends RelConverter<ResolvedTVFScan> {\n+\n+  TVFScanConverter(ConversionContext context) {\n+    super(context);\n+  }\n+\n+  @Override\n+  public RelNode convert(ResolvedTVFScan zetaNode, List<RelNode> inputs) {\n+    RelNode input = inputs.get(0);\n+    RelNode tableFunctionScan =\n+        LogicalTableFunctionScan.create(\n+            getCluster(),\n+            inputs,\n+            getExpressionConverter()\n+                .convertTableValuedFunction(\n+                    input,\n+                    zetaNode.getTvf(),\n+                    zetaNode.getArgumentList(),\n+                    zetaNode.getArgumentList().get(0).getScan().getColumnList()),\n+            null,\n+            createRowTypeWithWindowStartAndEnd(input.getRowType()),\n+            Collections.EMPTY_SET);\n+\n+    return tableFunctionScan;\n+  }\n+\n+  @Override\n+  public List<ResolvedNode> getInputs(ResolvedTVFScan zetaNode) {\n+    List<ResolvedNode> inputs = new ArrayList();\n+    for (ResolvedTVFArgument argument : zetaNode.getArgumentList()) {\n+      if (argument.getScan() != null) {\n+        inputs.add(argument.getScan());\n+      }\n+    }\n+    return inputs;\n+  }\n+\n+  private RelDataType createRowTypeWithWindowStartAndEnd(RelDataType inputRowType) {\n+    List<RelDataTypeField> newFields = new ArrayList<>(inputRowType.getFieldList());\n+    RelDataType timestampType = getCluster().getTypeFactory().createSqlType(SqlTypeName.TIMESTAMP);\n+\n+    RelDataTypeField windowStartField =\n+        new RelDataTypeFieldImpl(\"window_start\", newFields.size(), timestampType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MTIwNA=="}, "originalCommit": {"oid": "0d1f235d3d4fb647027ad5ec625973802a15c7d0"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTg2Nw==", "bodyText": "Use the constant?", "url": "https://github.com/apache/beam/pull/10946#discussion_r426949867", "createdAt": "2020-05-18T23:41:01Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/TVFScanConverter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation;\n+\n+import com.google.zetasql.resolvedast.ResolvedNode;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFArgument;\n+import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedTVFScan;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalTableFunctionScan;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n+\n+/** Converts TVFScan. */\n+class TVFScanConverter extends RelConverter<ResolvedTVFScan> {\n+\n+  TVFScanConverter(ConversionContext context) {\n+    super(context);\n+  }\n+\n+  @Override\n+  public RelNode convert(ResolvedTVFScan zetaNode, List<RelNode> inputs) {\n+    RelNode input = inputs.get(0);\n+    RelNode tableFunctionScan =\n+        LogicalTableFunctionScan.create(\n+            getCluster(),\n+            inputs,\n+            getExpressionConverter()\n+                .convertTableValuedFunction(\n+                    input,\n+                    zetaNode.getTvf(),\n+                    zetaNode.getArgumentList(),\n+                    zetaNode.getArgumentList().get(0).getScan().getColumnList()),\n+            null,\n+            createRowTypeWithWindowStartAndEnd(input.getRowType()),\n+            Collections.EMPTY_SET);\n+\n+    return tableFunctionScan;\n+  }\n+\n+  @Override\n+  public List<ResolvedNode> getInputs(ResolvedTVFScan zetaNode) {\n+    List<ResolvedNode> inputs = new ArrayList();\n+    for (ResolvedTVFArgument argument : zetaNode.getArgumentList()) {\n+      if (argument.getScan() != null) {\n+        inputs.add(argument.getScan());\n+      }\n+    }\n+    return inputs;\n+  }\n+\n+  private RelDataType createRowTypeWithWindowStartAndEnd(RelDataType inputRowType) {\n+    List<RelDataTypeField> newFields = new ArrayList<>(inputRowType.getFieldList());\n+    RelDataType timestampType = getCluster().getTypeFactory().createSqlType(SqlTypeName.TIMESTAMP);\n+\n+    RelDataTypeField windowStartField =\n+        new RelDataTypeFieldImpl(\"window_start\", newFields.size(), timestampType);\n+    newFields.add(windowStartField);\n+    RelDataTypeField windowEndField =\n+        new RelDataTypeFieldImpl(\"window_end\", newFields.size(), timestampType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDYxMQ==", "bodyText": "I really hope you got a badge for that function name...", "url": "https://github.com/apache/beam/pull/10946#discussion_r426950611", "createdAt": "2020-05-18T23:43:44Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "diffHunk": "@@ -175,6 +185,37 @@ private void addBuiltinFunctionsToCatalog(SimpleCatalog catalog, AnalyzerOptions\n                     Mode.SCALAR,\n                     ImmutableList.of(resolvedFunc.getSignature())))\n         .forEach(catalog::addFunction);\n+\n+    FunctionArgumentType retType =\n+        new FunctionArgumentType(SignatureArgumentKind.ARG_TYPE_RELATION);\n+\n+    FunctionArgumentType inputTableType =\n+        new FunctionArgumentType(SignatureArgumentKind.ARG_TYPE_RELATION);\n+\n+    FunctionArgumentType descriptorType =\n+        new FunctionArgumentType(\n+            SignatureArgumentKind.ARG_TYPE_DESCRIPTOR,\n+            FunctionArgumentTypeOptionsProto.newBuilder()\n+                .setDescriptorResolutionTableOffset(0)\n+                .build(),\n+            1);\n+\n+    FunctionArgumentType stringType =\n+        new FunctionArgumentType(TypeFactory.createSimpleType(TypeKind.TYPE_STRING));\n+\n+    // TUMBLE\n+    catalog.addTableValuedFunction(\n+        new TableValuedFunction.ForwardInputSchemaToOutputSchemaWithAppendedColumnTVF(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d98f20b1c0c248f5d6b1f1a72b61f50054e16c8"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d030159dbd9159d5eb9fcc9efc838cb41222624b", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/d030159dbd9159d5eb9fcc9efc838cb41222624b", "committedDate": "2020-05-19T00:42:34Z", "message": "fixup! address comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2877, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}