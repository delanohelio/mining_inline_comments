{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjg3MTY4", "number": 12117, "title": "[BEAM-10343] Add dispositions for SnowflakeIO.write", "bodyText": "This PR is part of adding SnowflakeIO to Java SDK BEAM-9893. Precisely this PR is adding following dispositions for write operation(BEAM-10343):\n\nCREATE_IF_NEEDED - default behaviour. The write operation checks whether the specified target table exists; if it does not, the write operation attempts to create the table Specify the schema for the target table using the .withTableSchema() option.\nCREATE_NEVER -  The write operation fails if the target table does not exist.\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-29T08:37:34Z", "url": "https://github.com/apache/beam/pull/12117", "merged": true, "mergeCommit": {"oid": "daca13c48befac0795eeb5e9b90449b79a7c6ffe"}, "closed": true, "closedAt": "2020-07-09T16:07:37Z", "author": {"login": "purbanow"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcv9BY9gBqjM0OTE5MjU0Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczRUkEAFqTQ0NTc2Mjc4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44fc98ec80f1f18e030c1f99833eaf3b02a542b6", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/44fc98ec80f1f18e030c1f99833eaf3b02a542b6", "committedDate": "2020-06-29T08:35:33Z", "message": "[BEAM-10343] feat: add CreateDispostion support for write method"}, "afterCommit": {"oid": "fdb94ae4ad4438772220340dcb152c012df4088c", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/fdb94ae4ad4438772220340dcb152c012df4088c", "committedDate": "2020-06-29T08:46:00Z", "message": "[BEAM-10343] feat: add CreateDispostion support for write method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdb94ae4ad4438772220340dcb152c012df4088c", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/fdb94ae4ad4438772220340dcb152c012df4088c", "committedDate": "2020-06-29T08:46:00Z", "message": "[BEAM-10343] feat: add CreateDispostion support for write method"}, "afterCommit": {"oid": "73df569be3a0fcff7edf6b1abd86f3d3df4e3cb3", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/73df569be3a0fcff7edf6b1abd86f3d3df4e3cb3", "committedDate": "2020-06-29T08:49:15Z", "message": "[BEAM-10343] feat: add CreateDispostion support for write method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODcyNjQz", "url": "https://github.com/apache/beam/pull/12117#pullrequestreview-441872643", "createdAt": "2020-07-02T16:58:53Z", "commit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjo1ODo1NFrOGsWEWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1OToxMlrOGsYAJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MjA4OQ==", "bodyText": "Rename toTable() method to to()? Seems more consistent with other ios, eg. BigQueryIO and you already specify String table argument and the docs tells what's the subject of this operation so it's all clear. :)", "url": "https://github.com/apache/beam/pull/12117#discussion_r449152089", "createdAt": "2020-07-02T16:58:54Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -593,7 +606,7 @@ public void populateDisplayData(DisplayData.Builder builder) {\n      *\n      * @param table - String with the name of the table.\n      */\n-    public Write<T> withTable(String table) {\n+    public Write<T> toTable(String table) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1MjU4Mw==", "bodyText": "nit: could you move this toTable() call below all with... calls?", "url": "https://github.com/apache/beam/pull/12117#discussion_r449152583", "createdAt": "2020-07-02T16:59:46Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -155,7 +157,7 @@\n  * items.apply(\n  *     SnowflakeIO.<KV<Integer, String>>write()\n  *         .withDataSourceConfiguration(dataSourceConfiguration)\n- *         .withTable(table)\n+ *         .toTable(table)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3MDUxMQ==", "bodyText": "I wonder if there's a way of testing all the Snowflake data types in one test/one testing SnowflakeDataTypeTest class  (parametrized test?). \ud83e\udd14 Worth trying imho but I didn't check this.", "url": "https://github.com/apache/beam/pull/12117#discussion_r449170511", "createdAt": "2020-07-02T17:33:26Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/test/java/org/apache/beam/sdk/io/snowflake/test/unit/data/SnowflakeBooleanTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.test.unit.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.beam.sdk.io.snowflake.data.logical.SnowflakeBoolean;\n+import org.junit.Test;\n+\n+public class SnowflakeBooleanTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3ODI0Nw==", "bodyText": "Are the double spaces needed here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"SELECT EXISTS (SELECT 1 FROM  information_schema.tables  WHERE  table_name = '%s');\",\n          \n          \n            \n                        \"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '%s');\",", "url": "https://github.com/apache/beam/pull/12117#discussion_r449178247", "createdAt": "2020-07-02T17:48:45Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -169,6 +191,54 @@ private void prepareTableAccordingWriteDisposition(\n     }\n   }\n \n+  private void createTableIfNotExists(\n+      DataSource dataSource, String table, SnowflakeTableSchema tableSchema) throws SQLException {\n+    String query =\n+        String.format(\n+            \"SELECT EXISTS (SELECT 1 FROM  information_schema.tables  WHERE  table_name = '%s');\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDI2MQ==", "bodyText": "CloudProvider is used only in SnowflakeServiceImpl. I think it makes sense to keep it inside the serviceImpl as a private enum, wdyt?", "url": "https://github.com/apache/beam/pull/12117#discussion_r449180261", "createdAt": "2020-07-02T17:52:43Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/services/SnowflakeServiceImpl.java", "diffHunk": "@@ -25,7 +27,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import javax.sql.DataSource;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeTableSchema;\n import org.apache.beam.sdk.io.snowflake.enums.CloudProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzI2Nw==", "bodyText": "Does it make sense to add a message for the exception? Something like \"Snowflake binary maximum size exceeded.\".", "url": "https://github.com/apache/beam/pull/12117#discussion_r449183267", "createdAt": "2020-07-02T17:58:36Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeBinary.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.data.text;\n+\n+import java.io.Serializable;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeDataType;\n+\n+public class SnowflakeBinary implements SnowflakeDataType, Serializable {\n+\n+  private static final Long MAX_SIZE = 8388608L;\n+\n+  private Long size; // bytes\n+\n+  public SnowflakeBinary() {}\n+\n+  public static SnowflakeBinary of() {\n+    return new SnowflakeBinary();\n+  }\n+\n+  public static SnowflakeBinary of(long size) {\n+    return new SnowflakeBinary(size);\n+  }\n+\n+  public SnowflakeBinary(long size) {\n+    if (size > MAX_SIZE) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4Mzc4Mg==", "bodyText": "(Same as above)", "url": "https://github.com/apache/beam/pull/12117#discussion_r449183782", "createdAt": "2020-07-02T17:59:12Z", "author": {"login": "lgajowy"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/data/text/SnowflakeVarchar.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.data.text;\n+\n+import java.io.Serializable;\n+import org.apache.beam.sdk.io.snowflake.data.SnowflakeDataType;\n+\n+public class SnowflakeVarchar implements SnowflakeDataType, Serializable {\n+  private static final Long MAX_LENGTH = 16777216L;\n+  private Long length;\n+\n+  public static SnowflakeVarchar of() {\n+    return new SnowflakeVarchar();\n+  }\n+\n+  public static SnowflakeVarchar of(long length) {\n+    return new SnowflakeVarchar(length);\n+  }\n+\n+  public SnowflakeVarchar() {}\n+\n+  public SnowflakeVarchar(long length) {\n+    if (length > MAX_LENGTH) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09123d8acff73569512f92a5bafddd6c97cf3a0"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b68646ffab38774864e421c6d4a704af5fd6a668", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/b68646ffab38774864e421c6d4a704af5fd6a668", "committedDate": "2020-07-06T13:23:19Z", "message": "refactor: introduce parametrized test for data types"}, "afterCommit": {"oid": "84c535f11dc5d2dcb5d32cbf5088cb58f0ee0dc5", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/84c535f11dc5d2dcb5d32cbf5088cb58f0ee0dc5", "committedDate": "2020-07-06T13:35:01Z", "message": "refactor: introduce parametrized test for data types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af61ee29f8ca2ee96889760cd0bc6c1e05bc4954", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/af61ee29f8ca2ee96889760cd0bc6c1e05bc4954", "committedDate": "2020-07-06T13:41:58Z", "message": "[BEAM-10343] feat: add CreateDispostion support for write method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aecf5e5b092145103e33b644ef70f8b310cf3978", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/aecf5e5b092145103e33b644ef70f8b310cf3978", "committedDate": "2020-07-06T13:41:58Z", "message": "fix: add missing licenses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5f50851a97fffaaabe0b98050a7adc9203edfd3", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/b5f50851a97fffaaabe0b98050a7adc9203edfd3", "committedDate": "2020-07-06T13:41:58Z", "message": "fix: remove external keyword from tests and change output* to output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7032b0503dc604d3fe1d3906968239ce095442c", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/c7032b0503dc604d3fe1d3906968239ce095442c", "committedDate": "2020-07-06T13:41:59Z", "message": "Small improvments after code-review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1244ff9bf9c1aaf659ee043d10be394f427420f", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/c1244ff9bf9c1aaf659ee043d10be394f427420f", "committedDate": "2020-07-06T13:46:32Z", "message": "refactor: introduce parametrized test for data types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84c535f11dc5d2dcb5d32cbf5088cb58f0ee0dc5", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/84c535f11dc5d2dcb5d32cbf5088cb58f0ee0dc5", "committedDate": "2020-07-06T13:35:01Z", "message": "refactor: introduce parametrized test for data types"}, "afterCommit": {"oid": "c1244ff9bf9c1aaf659ee043d10be394f427420f", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/c1244ff9bf9c1aaf659ee043d10be394f427420f", "committedDate": "2020-07-06T13:46:32Z", "message": "refactor: introduce parametrized test for data types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4a8de671e4d1b7f71492361d0eb386bab1b7b00", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/a4a8de671e4d1b7f71492361d0eb386bab1b7b00", "committedDate": "2020-07-09T05:30:58Z", "message": "feat: remove CloudProvider enum"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzYyNzg0", "url": "https://github.com/apache/beam/pull/12117#pullrequestreview-445762784", "createdAt": "2020-07-09T16:07:04Z", "commit": {"oid": "a4a8de671e4d1b7f71492361d0eb386bab1b7b00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3202, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}