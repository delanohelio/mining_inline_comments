{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTk1NTc5", "number": 11477, "title": "[BEAM-9650] Add PeriodicSequence generator.", "bodyText": "BEAM-9650 Add java snippet for slowly updating side inputs.\nPlease add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-21T10:51:20Z", "url": "https://github.com/apache/beam/pull/11477", "merged": true, "mergeCommit": {"oid": "45a6fc687effdf76f7e1c4f9302885a394d0814d"}, "closed": true, "closedAt": "2020-05-05T17:44:36Z", "author": {"login": "Ardagan"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca3XN1gFqTQwMDIxMjM3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdII8rAH2gAyNDA2NTk1NTc5Ojk3YTJlZGM0ZDhkNGE1OTEyZTY0MGQzYmIwNTQ4ZGNiOWRkMWQzYjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjEyMzc4", "url": "https://github.com/apache/beam/pull/11477#pullrequestreview-400212378", "createdAt": "2020-04-24T19:23:26Z", "commit": {"oid": "da8f2f3731bd43df95d0ee27f680b68a4aa0c24f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyMzoyNlrOGLl9Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxMzozMlrOGLnk8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwOTM4Mw==", "bodyText": "Does the element type need to be a list? What about defining a type for it like:\nclass SequenceDefinition {\n  Instant first;\n  Instant last;\n  Duration interval;\n  ...\n}", "url": "https://github.com/apache/beam/pull/11477#discussion_r414809383", "createdAt": "2020-04-24T19:23:26Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/PeriodicSequence.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n+import org.apache.beam.sdk.transforms.splittabledofn.Sizes;\n+import org.apache.beam.sdk.transforms.splittabledofn.SplitResult;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link PTransform} which generates a sequence of timestamped elements at given interval in\n+ * runtime.\n+ *\n+ * <p>Receives a PCollection<List<Long>> where each element triggers the generation of sequence and\n+ * has following elements: 0: first element timestamp 1: last element timestamp 2: interval", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8f2f3731bd43df95d0ee27f680b68a4aa0c24f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjIxNA==", "bodyText": "This should be clear that past and future are determined by the system clock on the worker machine (can we just call that \"processing time\"?)", "url": "https://github.com/apache/beam/pull/11477#discussion_r414822214", "createdAt": "2020-04-24T19:47:25Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/PeriodicSequence.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n+import org.apache.beam.sdk.transforms.splittabledofn.Sizes;\n+import org.apache.beam.sdk.transforms.splittabledofn.SplitResult;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link PTransform} which generates a sequence of timestamped elements at given interval in\n+ * runtime.\n+ *\n+ * <p>Receives a PCollection<List<Long>> where each element triggers the generation of sequence and\n+ * has following elements: 0: first element timestamp 1: last element timestamp 2: interval\n+ *\n+ * <p>All elements that have timestamp in the past will be output right away. Elements that have\n+ * timestamp in the future will be delayed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8f2f3731bd43df95d0ee27f680b68a4aa0c24f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMTkzNQ==", "bodyText": "It would be good to add a test to verify PeriodicImpulse delays elements with timestamps in the future. One way could be to just set a startTime far in the future and verify nothing is output after some delay. But then the delay would have to be long enough to make sure the pipeline actually started for every runner, which isn't ideal.", "url": "https://github.com/apache/beam/pull/11477#discussion_r414831935", "createdAt": "2020-04-24T20:05:46Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/PeriodicImpulseTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import java.util.ArrayList;\n+import org.apache.beam.sdk.testing.NeedsRunner;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.testing.UsesImpulse;\n+import org.apache.beam.sdk.testing.UsesStatefulParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for PeriodicImpulse. */\n+@RunWith(JUnit4.class)\n+public class PeriodicImpulseTest {\n+  @Rule public transient TestPipeline p = TestPipeline.create();\n+\n+  public static class ExtractTsDoFn<InputT> extends DoFn<InputT, KV<InputT, Instant>> {\n+    @ProcessElement\n+    public void processElement(DoFn<InputT, KV<InputT, Instant>>.ProcessContext c)\n+        throws Exception {\n+      c.output(KV.of(c.element(), c.timestamp()));\n+    }\n+  }\n+\n+  @Test\n+  @Category({\n+    NeedsRunner.class,\n+    UsesImpulse.class,\n+    UsesStatefulParDo.class,\n+  })\n+  public void testOutputsProperElements() {\n+    Instant instant = Instant.now();\n+\n+    Instant startTime = instant.minus(Duration.standardHours(100));\n+    long duration = 500;\n+    Duration interval = Duration.millis(250);\n+    long intervalMillis = interval.getMillis();\n+    Instant stopTime = startTime.plus(duration);\n+\n+    PCollection<KV<Instant, Instant>> result =\n+        p.apply(PeriodicImpulse.create().startAt(startTime).stopAt(stopTime).withInterval(interval))\n+            .apply(ParDo.of(new ExtractTsDoFn<>()));\n+\n+    ArrayList<KV<Instant, Instant>> expectedResults =\n+        new ArrayList<>((int) (duration / intervalMillis + 1));\n+    for (long i = 0; i <= duration; i += intervalMillis) {\n+      Instant el = startTime.plus(i);\n+      expectedResults.add(KV.of(el, el));\n+    }\n+\n+    PAssert.that(result).containsInAnyOrder(expectedResults);\n+\n+    p.run().waitUntilFinish();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8f2f3731bd43df95d0ee27f680b68a4aa0c24f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMjY4OQ==", "bodyText": "It would be a lot easier to verify many different situations if there were some way to mock the clock, but that's pretty challenging when the clock might be on a remote worker. Have we solved that problem anywhere else?", "url": "https://github.com/apache/beam/pull/11477#discussion_r414832689", "createdAt": "2020-04-24T20:07:04Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/PeriodicImpulseTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import java.util.ArrayList;\n+import org.apache.beam.sdk.testing.NeedsRunner;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.testing.UsesImpulse;\n+import org.apache.beam.sdk.testing.UsesStatefulParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for PeriodicImpulse. */\n+@RunWith(JUnit4.class)\n+public class PeriodicImpulseTest {\n+  @Rule public transient TestPipeline p = TestPipeline.create();\n+\n+  public static class ExtractTsDoFn<InputT> extends DoFn<InputT, KV<InputT, Instant>> {\n+    @ProcessElement\n+    public void processElement(DoFn<InputT, KV<InputT, Instant>>.ProcessContext c)\n+        throws Exception {\n+      c.output(KV.of(c.element(), c.timestamp()));\n+    }\n+  }\n+\n+  @Test\n+  @Category({\n+    NeedsRunner.class,\n+    UsesImpulse.class,\n+    UsesStatefulParDo.class,\n+  })\n+  public void testOutputsProperElements() {\n+    Instant instant = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8f2f3731bd43df95d0ee27f680b68a4aa0c24f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNDU5Ng==", "bodyText": "I'm not sure I understand what this means, could you clarify? It looks like maybe it's re-stating the previous paragraph in a different way?", "url": "https://github.com/apache/beam/pull/11477#discussion_r414834596", "createdAt": "2020-04-24T20:10:54Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/PeriodicSequence.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n+import org.apache.beam.sdk.transforms.splittabledofn.Sizes;\n+import org.apache.beam.sdk.transforms.splittabledofn.SplitResult;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link PTransform} which generates a sequence of timestamped elements at given interval in\n+ * runtime.\n+ *\n+ * <p>Receives a PCollection<List<Long>> where each element triggers the generation of sequence and\n+ * has following elements: 0: first element timestamp 1: last element timestamp 2: interval\n+ *\n+ * <p>All elements that have timestamp in the past will be output right away. Elements that have\n+ * timestamp in the future will be delayed.\n+ *\n+ * <p>Transform will not output elements prior to target timestamp. Transform can output elements at\n+ * any time after target timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8f2f3731bd43df95d0ee27f680b68a4aa0c24f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNTk1Mw==", "bodyText": "Does this need to be public? If so, should it have a test as well?", "url": "https://github.com/apache/beam/pull/11477#discussion_r414835953", "createdAt": "2020-04-24T20:13:32Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/PeriodicSequence.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n+import org.apache.beam.sdk.transforms.splittabledofn.Sizes;\n+import org.apache.beam.sdk.transforms.splittabledofn.SplitResult;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link PTransform} which generates a sequence of timestamped elements at given interval in\n+ * runtime.\n+ *\n+ * <p>Receives a PCollection<List<Long>> where each element triggers the generation of sequence and\n+ * has following elements: 0: first element timestamp 1: last element timestamp 2: interval\n+ *\n+ * <p>All elements that have timestamp in the past will be output right away. Elements that have\n+ * timestamp in the future will be delayed.\n+ *\n+ * <p>Transform will not output elements prior to target timestamp. Transform can output elements at\n+ * any time after target timestamp.\n+ */\n+@Experimental(Experimental.Kind.SPLITTABLE_DO_FN)\n+public class PeriodicSequence extends PTransform<PCollection<List<Long>>, PCollection<Instant>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8f2f3731bd43df95d0ee27f680b68a4aa0c24f"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a9e911f6bcf1979ee134f6e4f9ff7b16557cc1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b0a9e911f6bcf1979ee134f6e4f9ff7b16557cc1", "committedDate": "2020-04-28T16:22:27Z", "message": "Add PeriodicSequence generator.\nAdd java snippet for slowly updating side inputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6482c289b1fa9284915722b60ab402c1cd43db3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d6482c289b1fa9284915722b60ab402c1cd43db3", "committedDate": "2020-04-28T16:22:27Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2682865ed629ffc267153dc20f5fcd065528fb78", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2682865ed629ffc267153dc20f5fcd065528fb78", "committedDate": "2020-04-28T16:35:49Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9729ee6103f523271e0ba9d4cf3798d920cd2d79", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/9729ee6103f523271e0ba9d4cf3798d920cd2d79", "committedDate": "2020-04-28T05:55:53Z", "message": "address comments"}, "afterCommit": {"oid": "2682865ed629ffc267153dc20f5fcd065528fb78", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2682865ed629ffc267153dc20f5fcd065528fb78", "committedDate": "2020-04-28T16:35:49Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78eec989987c74d5418c35b5743b2d2665f4c1fa", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/78eec989987c74d5418c35b5743b2d2665f4c1fa", "committedDate": "2020-04-28T16:53:10Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDkyOTM5", "url": "https://github.com/apache/beam/pull/11477#pullrequestreview-403092939", "createdAt": "2020-04-29T22:46:50Z", "commit": {"oid": "2682865ed629ffc267153dc20f5fcd065528fb78"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjo0Njo1MVrOGOTvZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyNDo0M1rOGOUhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjY3Nw==", "bodyText": "Can you add a comment here that the reason you put the Instant into a KV is so you can verify the timestamp? It took me a while to realize that.\n(Also if we don't already have some general purpose way to verify timestamps in PCollections maybe we should?)", "url": "https://github.com/apache/beam/pull/11477#discussion_r417656677", "createdAt": "2020-04-29T22:46:51Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/PeriodicSequenceTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import java.util.ArrayList;\n+import org.apache.beam.sdk.testing.NeedsRunner;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.testing.UsesImpulse;\n+import org.apache.beam.sdk.testing.UsesStatefulParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Tests for PeriodicSequence. */\n+@RunWith(JUnit4.class)\n+public class PeriodicSequenceTest {\n+  @Rule public transient TestPipeline p = TestPipeline.create();\n+\n+  public static class ExtractTsDoFn<InputT> extends DoFn<InputT, KV<InputT, Instant>> {\n+    @ProcessElement\n+    public void processElement(DoFn<InputT, KV<InputT, Instant>>.ProcessContext c)\n+        throws Exception {\n+      c.output(KV.of(c.element(), c.timestamp()));\n+    }\n+  }\n+\n+  @Test\n+  @Category({\n+    NeedsRunner.class,\n+    UsesImpulse.class,\n+    UsesStatefulParDo.class,\n+  })\n+  public void testOutputsProperElements() {\n+    Instant instant = Instant.now();\n+\n+    Instant startTime = instant.minus(Duration.standardHours(100));\n+    long duration = 500;\n+    Duration interval = Duration.millis(250);\n+    long intervalMillis = interval.getMillis();\n+    Instant stopTime = startTime.plus(duration);\n+\n+    PCollection<KV<Instant, Instant>> result =\n+        p.apply(\n+                Create.<PeriodicSequence.SequenceDefinition>of(\n+                    new PeriodicSequence.SequenceDefinition(startTime, stopTime, interval)))\n+            .apply(PeriodicSequence.create())\n+            .apply(ParDo.of(new ExtractTsDoFn<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2682865ed629ffc267153dc20f5fcd065528fb78"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MjY0Nw==", "bodyText": "nit: Consider using AutoValue (and AutoValueSchemaProvider if you use schemas) so you don't have to implement these. Up to you though.", "url": "https://github.com/apache/beam/pull/11477#discussion_r417662647", "createdAt": "2020-04-29T23:04:17Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/PeriodicSequence.java", "diffHunk": "@@ -21,33 +21,69 @@\n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n \n-import java.util.List;\n+import java.util.Objects;\n import javax.annotation.Nullable;\n import org.apache.beam.sdk.annotations.Experimental;\n import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.schemas.JavaFieldSchema;\n+import org.apache.beam.sdk.schemas.annotations.DefaultSchema;\n import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n-import org.apache.beam.sdk.transforms.splittabledofn.Sizes;\n import org.apache.beam.sdk.transforms.splittabledofn.SplitResult;\n import org.apache.beam.sdk.values.PCollection;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n \n /**\n- * A {@link PTransform} which generates a sequence of timestamped elements at given interval in\n- * runtime.\n+ * A {@link PTransform} which generates a sequence of timestamped elements at given runtime\n+ * interval.\n  *\n- * <p>Receives a PCollection<List<Long>> where each element triggers the generation of sequence and\n- * has following elements: 0: first element timestamp 1: last element timestamp 2: interval\n+ * <p>Transform will not output elements prior to target time. Transform can output elements at any\n+ * time after target time.\n  *\n- * <p>All elements that have timestamp in the past will be output right away. Elements that have\n- * timestamp in the future will be delayed.\n- *\n- * <p>Transform will not output elements prior to target timestamp. Transform can output elements at\n- * any time after target timestamp.\n+ * <p>Multiple elements can be output at given moment if their timestamp is earlier than current\n+ * time.\n  */\n @Experimental(Experimental.Kind.SPLITTABLE_DO_FN)\n-public class PeriodicSequence extends PTransform<PCollection<List<Long>>, PCollection<Instant>> {\n+public class PeriodicSequence\n+    extends PTransform<PCollection<PeriodicSequence.SequenceDefinition>, PCollection<Instant>> {\n+\n+  @DefaultSchema(JavaFieldSchema.class)\n+  public static class SequenceDefinition {\n+    public Instant first;\n+    public Instant last;\n+    public Long durationMilliSec;\n+\n+    public SequenceDefinition() {}\n+\n+    public SequenceDefinition(Instant first, Instant last, Duration duration) {\n+      this.first = first;\n+      this.last = last;\n+      this.durationMilliSec = duration.getMillis();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+      if (this == obj) {\n+        return true;\n+      }\n+\n+      if (obj == null || obj.getClass() != this.getClass()) {\n+        return false;\n+      }\n+\n+      SequenceDefinition src = (SequenceDefinition) obj;\n+      return src.first.equals(this.first)\n+          && src.last.equals(this.last)\n+          && src.durationMilliSec.equals(this.durationMilliSec);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      int result = Objects.hash(first, last, durationMilliSec);\n+      return result;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2682865ed629ffc267153dc20f5fcd065528fb78"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NjA1Mw==", "bodyText": "We really should have support for Duration in beam schemas... filed BEAM-9859 for this.\nIn the meantime, couldn't you just use @DefaultCoder(SerializableCoder.class) so you could store this as a Duration?", "url": "https://github.com/apache/beam/pull/11477#discussion_r417666053", "createdAt": "2020-04-29T23:14:20Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/PeriodicSequence.java", "diffHunk": "@@ -21,33 +21,69 @@\n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n \n-import java.util.List;\n+import java.util.Objects;\n import javax.annotation.Nullable;\n import org.apache.beam.sdk.annotations.Experimental;\n import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.schemas.JavaFieldSchema;\n+import org.apache.beam.sdk.schemas.annotations.DefaultSchema;\n import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n-import org.apache.beam.sdk.transforms.splittabledofn.Sizes;\n import org.apache.beam.sdk.transforms.splittabledofn.SplitResult;\n import org.apache.beam.sdk.values.PCollection;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n \n /**\n- * A {@link PTransform} which generates a sequence of timestamped elements at given interval in\n- * runtime.\n+ * A {@link PTransform} which generates a sequence of timestamped elements at given runtime\n+ * interval.\n  *\n- * <p>Receives a PCollection<List<Long>> where each element triggers the generation of sequence and\n- * has following elements: 0: first element timestamp 1: last element timestamp 2: interval\n+ * <p>Transform will not output elements prior to target time. Transform can output elements at any\n+ * time after target time.\n  *\n- * <p>All elements that have timestamp in the past will be output right away. Elements that have\n- * timestamp in the future will be delayed.\n- *\n- * <p>Transform will not output elements prior to target timestamp. Transform can output elements at\n- * any time after target timestamp.\n+ * <p>Multiple elements can be output at given moment if their timestamp is earlier than current\n+ * time.\n  */\n @Experimental(Experimental.Kind.SPLITTABLE_DO_FN)\n-public class PeriodicSequence extends PTransform<PCollection<List<Long>>, PCollection<Instant>> {\n+public class PeriodicSequence\n+    extends PTransform<PCollection<PeriodicSequence.SequenceDefinition>, PCollection<Instant>> {\n+\n+  @DefaultSchema(JavaFieldSchema.class)\n+  public static class SequenceDefinition {\n+    public Instant first;\n+    public Instant last;\n+    public Long durationMilliSec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2682865ed629ffc267153dc20f5fcd065528fb78"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2OTQwMA==", "bodyText": "Can you add a note that this is according to the clock on the worker node?", "url": "https://github.com/apache/beam/pull/11477#discussion_r417669400", "createdAt": "2020-04-29T23:24:43Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/PeriodicSequence.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.schemas.JavaFieldSchema;\n+import org.apache.beam.sdk.schemas.annotations.DefaultSchema;\n+import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n+import org.apache.beam.sdk.transforms.splittabledofn.SplitResult;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link PTransform} which generates a sequence of timestamped elements at given runtime\n+ * interval.\n+ *\n+ * <p>Transform will not output elements prior to target time. Transform can output elements at any\n+ * time after target time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78eec989987c74d5418c35b5743b2d2665f4c1fa"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869c7fb0c93735cbd28c117379e10ab0d045e49d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/869c7fb0c93735cbd28c117379e10ab0d045e49d", "committedDate": "2020-05-01T18:25:12Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Mzg0NTE5", "url": "https://github.com/apache/beam/pull/11477#pullrequestreview-404384519", "createdAt": "2020-05-01T20:30:03Z", "commit": {"oid": "869c7fb0c93735cbd28c117379e10ab0d045e49d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDozMDowNFrOGPU5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDozMDowNFrOGPU5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyNDM1MQ==", "bodyText": "Sorry just noticed this. Can you replace it with a log statement?", "url": "https://github.com/apache/beam/pull/11477#discussion_r418724351", "createdAt": "2020-05-01T20:30:04Z", "author": {"login": "TheNeuralBit"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java", "diffHunk": "@@ -785,4 +787,73 @@ public static void main(String[] args) {\n \n     }\n   }\n+\n+  public static class PeriodicallyUpdatingSideInputs {\n+\n+    public static PCollection<Long> main(\n+        Pipeline p,\n+        Instant startAt,\n+        Instant stopAt,\n+        Duration interval1,\n+        Duration interval2,\n+        String fileToRead) {\n+      // [START PeriodicallyUpdatingSideInputs]\n+      PCollectionView<List<Long>> sideInput =\n+          p.apply(\n+                  \"SIImpulse\",\n+                  PeriodicImpulse.create()\n+                      .startAt(startAt)\n+                      .stopAt(stopAt)\n+                      .withInterval(interval1)\n+                      .applyWindowing())\n+              .apply(\n+                  \"FileToRead\",\n+                  ParDo.of(\n+                      new DoFn<Instant, String>() {\n+                        @DoFn.ProcessElement\n+                        public void process(@Element Instant notUsed, OutputReceiver<String> o) {\n+                          o.output(fileToRead);\n+                        }\n+                      }))\n+              .apply(FileIO.matchAll())\n+              .apply(FileIO.readMatches())\n+              .apply(TextIO.readFiles())\n+              .apply(\n+                  ParDo.of(\n+                      new DoFn<String, String>() {\n+                        @ProcessElement\n+                        public void process(@Element String src, OutputReceiver<String> o) {\n+                          System.out.println(src);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869c7fb0c93735cbd28c117379e10ab0d045e49d"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Mzg0NjI3", "url": "https://github.com/apache/beam/pull/11477#pullrequestreview-404384627", "createdAt": "2020-05-01T20:30:18Z", "commit": {"oid": "869c7fb0c93735cbd28c117379e10ab0d045e49d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a2edc4d8d4a5912e640d3bb0548dcb9dd1d3b0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/97a2edc4d8d4a5912e640d3bb0548dcb9dd1d3b0", "committedDate": "2020-05-01T20:58:54Z", "message": "remove println"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4352, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}