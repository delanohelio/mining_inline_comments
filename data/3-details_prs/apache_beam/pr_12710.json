{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA1MDE2", "number": 12710, "title": "[BEAM-10303] Refactor split logic to reuse common logic.", "bodyText": "Please add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-27T23:37:34Z", "url": "https://github.com/apache/beam/pull/12710", "merged": true, "mergeCommit": {"oid": "b0abce2033573cf07cf5920344462b6e6d6507c6"}, "closed": true, "closedAt": "2020-09-02T19:32:26Z", "author": {"login": "boyuanzz"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEdm8bgBqjM3MTI0MzI2MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFAtUAgBqjM3MjEzMTM3MDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f3f2d9550a48b4ed4d5d21bf9245901b79a5bbc", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/3f3f2d9550a48b4ed4d5d21bf9245901b79a5bbc", "committedDate": "2020-08-27T23:36:55Z", "message": "Refactor split logic to reuse common logic."}, "afterCommit": {"oid": "297c179954c5042ae9c5d12f82361a10f8338545", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/297c179954c5042ae9c5d12f82361a10f8338545", "committedDate": "2020-09-01T02:02:27Z", "message": "Refactor split logic to reuse common logic."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "297c179954c5042ae9c5d12f82361a10f8338545", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/297c179954c5042ae9c5d12f82361a10f8338545", "committedDate": "2020-09-01T02:02:27Z", "message": "Refactor split logic to reuse common logic."}, "afterCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b6c85d1dc017a86690d927c463438dba5de08906", "committedDate": "2020-09-01T02:04:37Z", "message": "Refactor split logic to reuse common logic."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNDIwNTA3", "url": "https://github.com/apache/beam/pull/12710#pullrequestreview-480420507", "createdAt": "2020-09-02T02:59:48Z", "commit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjo1OTo0OVrOHLRp4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzozNDozM1rOHLTOmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NTYzNQ==", "bodyText": "it seems that the whole if-else branch could be simplified to just\nwindowedSplitResult =\n              computeWindowSplitResult(\n                  currentElement,\n                  currentRestriction,\n                  currentWindow,\n                  windows,\n                  currentWatermarkEstimatorState,\n                  (elementSplit == null && downstreamSplitResult == null) ? currentWindowIndex : newWindowStopIndex,\n                  newWindowStopIndex,\n                  stopWindowIndex,\n                  elementSplit,\n                  watermarkAndState);\n\nor maybe I missed something.", "url": "https://github.com/apache/beam/pull/12710#discussion_r481585635", "createdAt": "2020-09-02T02:59:49Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1514,6 +1409,19 @@ public Object restriction() {\n                   stopWindowIndex,\n                   elementSplit,\n                   watermarkAndState);\n+        } else if (downstreamSplitResult != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU5NDI1Mw==", "bodyText": "can both windowedSplitResult and downstreamElementSplit be null? if not should the check expressed with xor ^", "url": "https://github.com/apache/beam/pull/12710#discussion_r481594253", "createdAt": "2020-09-02T03:13:17Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1546,50 +1459,32 @@ public Object restriction() {\n               currentWindowIndex,\n               stopWindowIndex,\n               stopWindowIndex,\n-              splitResult,\n+              elementSplitResult,\n               watermarkAndState);\n     }\n-    return KV.of(windowedSplitResult, newWindowStopIndex);\n+    return SplitResultsWithStopIndex.of(\n+        windowedSplitResult, downstreamSplitResult, newWindowStopIndex);\n   }\n \n-  private HandlesSplits.SplitResult trySplitForElementAndRestriction(\n-      double fractionOfRemainder, Duration resumeDelay) {\n-    KV<Instant, WatermarkEstimatorStateT> watermarkAndState;\n-    WindowedSplitResult windowedSplitResult = null;\n-    synchronized (splitLock) {\n-      // There is nothing to split if we are between element and restriction processing calls.\n-      if (currentTracker == null) {\n-        return null;\n-      }\n-      // Make sure to get the output watermark before we split to ensure that the lower bound\n-      // applies to the residual.\n-      watermarkAndState = currentWatermarkEstimator.getWatermarkAndState();\n-      KV<WindowedSplitResult, Integer> splitResult =\n-          trySplitForProcess(\n-              currentElement,\n-              currentRestriction,\n-              currentWindow,\n-              currentWindows,\n-              currentWatermarkEstimatorState,\n-              fractionOfRemainder,\n-              currentTracker,\n-              watermarkAndState,\n-              windowCurrentIndex,\n-              windowStopIndex);\n-      if (splitResult == null) {\n-        return null;\n-      }\n-      windowStopIndex = splitResult.getValue();\n-      windowedSplitResult =\n-          calculateRestrictionSize(\n-              splitResult.getKey(),\n-              PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN\n-                  + \"/GetSize\");\n-    }\n-\n+  @VisibleForTesting\n+  static <WatermarkEstimatorStateT> HandlesSplits.SplitResult constructSplitResult(\n+      WindowedSplitResult windowedSplitResult,\n+      HandlesSplits.SplitResult downstreamElementSplit,\n+      Coder fullInputCoder,\n+      Instant initialWatermark,\n+      KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n+      String pTransformId,\n+      String mainInputId,\n+      Collection<String> outputIds,\n+      Duration resumeDelay) {\n+    // The element split cannot from both windowedSplitResult and downstreamElementSplit.\n+    checkArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 404}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjAxMA==", "bodyText": "(currentTracker == null) ^ (splitDelegate == null) ?", "url": "https://github.com/apache/beam/pull/12710#discussion_r481606010", "createdAt": "2020-09-02T03:28:51Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1444,28 +1317,44 @@ public Object restriction() {\n   }\n \n   @VisibleForTesting\n-  static <WatermarkEstimatorStateT> KV<WindowedSplitResult, Integer> trySplitForProcess(\n+  static <WatermarkEstimatorStateT> SplitResultsWithStopIndex computeSplitForProcessOrTruncate(\n       WindowedValue currentElement,\n       Object currentRestriction,\n       BoundedWindow currentWindow,\n       List<BoundedWindow> windows,\n       WatermarkEstimatorStateT currentWatermarkEstimatorState,\n       double fractionOfRemainder,\n       RestrictionTracker currentTracker,\n+      HandlesSplits splitDelegate,\n       KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n       int currentWindowIndex,\n       int stopWindowIndex) {\n+    // We should only have currentTracker or splitDelegate.\n+    checkArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYxMTQxOQ==", "bodyText": "I'm curious why we are not throwing another exception with reason instead?", "url": "https://github.com/apache/beam/pull/12710#discussion_r481611419", "createdAt": "2020-09-02T03:34:33Z", "author": {"login": "y1chi"}, "path": "sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java", "diffHunk": "@@ -3858,156 +3924,225 @@ public void testScaleProgress() throws Exception {\n       assertEquals(8, scaledResult.getWorkRemaining(), 0.0);\n     }\n \n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNullTrackerAndSplitDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          null,\n+          null,\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNotNullTrackerAndDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          new OffsetRangeTracker(currentRestriction),\n+          createSplitDelegate(0.3, 0.0, null),\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithInvalidWatermarkAndState()\n+        throws Exception {\n+      expected.expect(NullPointerException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c85d1dc017a86690d927c463438dba5de08906"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTczOTI4", "url": "https://github.com/apache/beam/pull/12710#pullrequestreview-481173928", "createdAt": "2020-09-02T18:52:22Z", "commit": {"oid": "5f8273120afbd438c3100de0c7c48f852f736f14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "committedDate": "2020-09-02T18:55:51Z", "message": "Refactor split logic to reuse common logic."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f8273120afbd438c3100de0c7c48f852f736f14", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5f8273120afbd438c3100de0c7c48f852f736f14", "committedDate": "2020-09-02T18:35:02Z", "message": "Address comments"}, "afterCommit": {"oid": "02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "committedDate": "2020-09-02T18:55:51Z", "message": "Refactor split logic to reuse common logic."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4532, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}