{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNzcyOTM0", "number": 13571, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDo1MToyOVrOFGpTjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowNDozNFrOFGpqRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTEyNTI1OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDo1MToyOVrOIHvywQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDozMToyOVrOIIdf_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5Mzk4NQ==", "bodyText": "can you please add this as a message for IllegalStateException?", "url": "https://github.com/apache/beam/pull/13571#discussion_r544993985", "createdAt": "2020-12-17T10:51:29Z", "author": {"login": "dmvk"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -992,7 +997,23 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     fireTimer(timerData);\n+    emitWatermarkIfHoldChanged(oldHold);\n+  }\n+\n+  void emitWatermarkIfHoldChanged(long currentWatermarkHold) {\n+    if (keyCoder != null) {\n+      long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n+      if (newWatermarkHold > currentWatermarkHold) {\n+        try {\n+          processInputWatermark(false);\n+        } catch (Exception ex) {\n+          // should not happen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTExNDkyNg==", "bodyText": "Isn't IllegalStateException meant to be used for an illegal state, which is a state that should not happen? :)", "url": "https://github.com/apache/beam/pull/13571#discussion_r545114926", "createdAt": "2020-12-17T14:06:05Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -992,7 +997,23 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     fireTimer(timerData);\n+    emitWatermarkIfHoldChanged(oldHold);\n+  }\n+\n+  void emitWatermarkIfHoldChanged(long currentWatermarkHold) {\n+    if (keyCoder != null) {\n+      long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n+      if (newWatermarkHold > currentWatermarkHold) {\n+        try {\n+          processInputWatermark(false);\n+        } catch (Exception ex) {\n+          // should not happen", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5Mzk4NQ=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0Mjg0NA==", "bodyText": "I just love seeing \"This should never happen\" messages in logs when debugging ;)", "url": "https://github.com/apache/beam/pull/13571#discussion_r545742844", "createdAt": "2020-12-18T10:31:29Z", "author": {"login": "dmvk"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -992,7 +997,23 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     fireTimer(timerData);\n+    emitWatermarkIfHoldChanged(oldHold);\n+  }\n+\n+  void emitWatermarkIfHoldChanged(long currentWatermarkHold) {\n+    if (keyCoder != null) {\n+      long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n+      if (newWatermarkHold > currentWatermarkHold) {\n+        try {\n+          processInputWatermark(false);\n+        } catch (Exception ex) {\n+          // should not happen", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5Mzk4NQ=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE2MjI1OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDo1OTo0OVrOIHwIEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo0OToyNFrOIH0HgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTQ0MQ==", "bodyText": "We remove the private modifier?", "url": "https://github.com/apache/beam/pull/13571#discussion_r544999441", "createdAt": "2020-12-17T10:59:49Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -784,7 +789,7 @@ private long computeOutputWatermark(long inputWatermarkHold) {\n     return potentialOutputWatermark;\n   }\n \n-  private void maybeEmitWatermark(long watermark) {\n+  void maybeEmitWatermark(long watermark) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NDgzMw==", "bodyText": "Part of experiments, can be reverted.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545064833", "createdAt": "2020-12-17T12:49:24Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -784,7 +789,7 @@ private long computeOutputWatermark(long inputWatermarkHold) {\n     return potentialOutputWatermark;\n   }\n \n-  private void maybeEmitWatermark(long watermark) {\n+  void maybeEmitWatermark(long watermark) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTQ0MQ=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE2ODAyOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowMToxMVrOIHwLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo1MDo0OVrOIH0K-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDI4OQ==", "bodyText": "This logic should be removed. All logic which deals with watermark emission should be handled through processWatermark.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545000289", "createdAt": "2020-12-17T11:01:11Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -992,7 +997,23 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     fireTimer(timerData);\n+    emitWatermarkIfHoldChanged(oldHold);\n+  }\n+\n+  void emitWatermarkIfHoldChanged(long currentWatermarkHold) {\n+    if (keyCoder != null) {\n+      long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n+      if (newWatermarkHold > currentWatermarkHold) {\n+        try {\n+          processInputWatermark(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NTcyMQ==", "bodyText": "I disagree - handling watermark emission in processWatermark only is what causes the issues.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545065721", "createdAt": "2020-12-17T12:50:49Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -992,7 +997,23 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     fireTimer(timerData);\n+    emitWatermarkIfHoldChanged(oldHold);\n+  }\n+\n+  void emitWatermarkIfHoldChanged(long currentWatermarkHold) {\n+    if (keyCoder != null) {\n+      long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n+      if (newWatermarkHold > currentWatermarkHold) {\n+        try {\n+          processInputWatermark(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDI4OQ=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE3MzA1OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowMjoxNVrOIHwOQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjo0OToxOVrOIIhnjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ==", "bodyText": "We need the following to generalize watermark emission to be able to call this method from other places.\nif (mark.getTimestamp > currentInputWatermark) {\n  currentInputWatermark = mark.getTimestamp();\n}", "url": "https://github.com/apache/beam/pull/13571#discussion_r545001025", "createdAt": "2020-12-17T11:02:15Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NzA1Mg==", "bodyText": "Input watermark is not what is concerned by this PR. That logic did not change, we only need to be able to progress output watermark when watermark hold changes.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545067052", "createdAt": "2020-12-17T12:52:47Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwODY2Mw==", "bodyText": "You would need this change in order to go through the regular watermark emission code without changing the latest seen input watermark.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545808663", "createdAt": "2020-12-18T12:46:07Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxMDMxOA==", "bodyText": "I would like to generalize the existing code, instead of adding code paths for every exception which is bound to be error-prone.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545810318", "createdAt": "2020-12-18T12:49:19Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE3NjQ5OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowMjo1NlrOIHwQJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo1Nzo1NFrOIH0cpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTUxMA==", "bodyText": "Please remove if we don't want to scatter the logic about watermark advancement.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545001510", "createdAt": "2020-12-17T11:02:56Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();\n+    processInputWatermark(true);\n+  }\n \n+  private void processInputWatermark(boolean advanceInputWatermark) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3MDI0Nw==", "bodyText": "I think that is what we must do. We could call processWatermark from processElement, but the call does stuff not necessary to do in processElement. That's why I simply wrapped what is needed to be done in processInputWatermark (maybe we could find a better name to make it clearer).", "url": "https://github.com/apache/beam/pull/13571#discussion_r545070247", "createdAt": "2020-12-17T12:57:54Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();\n+    processInputWatermark(true);\n+  }\n \n+  private void processInputWatermark(boolean advanceInputWatermark) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTUxMA=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTE4MzQzOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMTowNDozNFrOIHwUJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo1NDowN1rOIH0TVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMjUzMw==", "bodyText": "Is this required on every element? I'd rather trigger this only if we set / remove a hold.", "url": "https://github.com/apache/beam/pull/13571#discussion_r545002533", "createdAt": "2020-12-17T11:04:34Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -641,8 +641,10 @@ protected final void setBundleFinishedCallback(Runnable callback) {\n   @Override\n   public final void processElement(StreamRecord<WindowedValue<InputT>> streamRecord) {\n     checkInvokeStartBundle();\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     doFnRunner.processElement(streamRecord.getValue());\n     checkInvokeFinishBundleByCount();\n+    emitWatermarkIfHoldChanged(oldHold);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2Nzg2MQ==", "bodyText": "This is very cheap call and actually tests exactly if hold was set (actually reset).", "url": "https://github.com/apache/beam/pull/13571#discussion_r545067861", "createdAt": "2020-12-17T12:54:07Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -641,8 +641,10 @@ protected final void setBundleFinishedCallback(Runnable callback) {\n   @Override\n   public final void processElement(StreamRecord<WindowedValue<InputT>> streamRecord) {\n     checkInvokeStartBundle();\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     doFnRunner.processElement(streamRecord.getValue());\n     checkInvokeFinishBundleByCount();\n+    emitWatermarkIfHoldChanged(oldHold);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMjUzMw=="}, "originalCommit": {"oid": "02f132676cc5318a853567897da2fc16972cb47a"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2406, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}