{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4OTExMDc1", "number": 13298, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0MDo0OFrOE3jRtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0MDo0OFrOE3jRtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg1MTEwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_metrics.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0MDo0OFrOHw96lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1Mzo0M1rOHw_JoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwODExNw==", "bodyText": "Is this also valid for non-portable job submission paths? (just to make sure we don't break backwards-compatibility when users specify runner_v2, but not portable job submission).", "url": "https://github.com/apache/beam/pull/13298#discussion_r521108117", "createdAt": "2020-11-11T04:40:48Z", "author": {"login": "ananvay"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_metrics.py", "diffHunk": "@@ -101,18 +101,13 @@ def _translate_step_name(self, internal_name):\n           'Could not translate the internal step name %r since job graph is '\n           'not available.' % internal_name)\n     user_step_name = None\n-    # pylint: disable=wrong-import-order, wrong-import-position\n-    from apache_beam.runners.dataflow.internal import apiclient\n-    if apiclient._use_unified_worker_portable_job(self._job_graph.options):\n+    if (self._job_graph and internal_name\n+        in self._job_graph.proto_pipeline.components.transforms.keys()):\n       # Dataflow Runner v2 with portable job submission uses proto transform map\n       # IDs for step names. Also PTransform.unique_name maps to user step names.\n       # Hence we lookup user step names based on the proto.\n-      proto_pipeline = self._job_graph.proto_pipeline\n-      for transform_id in proto_pipeline.components.transforms.keys():\n-        if internal_name == transform_id:\n-          user_step_name = proto_pipeline.components.transforms[\n-              transform_id].unique_name\n-          break\n+      user_step_name = self._job_graph.proto_pipeline.components.transforms[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5930823cff706e34a19b543dd755123abb51c207"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODM1Mw==", "bodyText": "Yeah, we'll only enter this block if service chooses to use portable submission and use transform IDs as step names.", "url": "https://github.com/apache/beam/pull/13298#discussion_r521128353", "createdAt": "2020-11-11T05:53:43Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_metrics.py", "diffHunk": "@@ -101,18 +101,13 @@ def _translate_step_name(self, internal_name):\n           'Could not translate the internal step name %r since job graph is '\n           'not available.' % internal_name)\n     user_step_name = None\n-    # pylint: disable=wrong-import-order, wrong-import-position\n-    from apache_beam.runners.dataflow.internal import apiclient\n-    if apiclient._use_unified_worker_portable_job(self._job_graph.options):\n+    if (self._job_graph and internal_name\n+        in self._job_graph.proto_pipeline.components.transforms.keys()):\n       # Dataflow Runner v2 with portable job submission uses proto transform map\n       # IDs for step names. Also PTransform.unique_name maps to user step names.\n       # Hence we lookup user step names based on the proto.\n-      proto_pipeline = self._job_graph.proto_pipeline\n-      for transform_id in proto_pipeline.components.transforms.keys():\n-        if internal_name == transform_id:\n-          user_step_name = proto_pipeline.components.transforms[\n-              transform_id].unique_name\n-          break\n+      user_step_name = self._job_graph.proto_pipeline.components.transforms[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwODExNw=="}, "originalCommit": {"oid": "5930823cff706e34a19b543dd755123abb51c207"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2745, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}