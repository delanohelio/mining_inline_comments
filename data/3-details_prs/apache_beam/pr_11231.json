{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODkzNTM0", "number": 11231, "title": "[BEAM-4374] Shortids for the Go SDK", "bodyText": "A quick unblocker for current proto changes. Adds Short ID handling for the Go SDK.\nThere are likely some performance improvements that can go in around the single lock, either moving them to a RW lock or a sync.Map, but this should be fine for Batch cases at present, until we measure differently.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-26T00:29:53Z", "url": "https://github.com/apache/beam/pull/11231", "merged": true, "mergeCommit": {"oid": "65c84264440091102f412bb092d6bda0b5052716"}, "closed": true, "closedAt": "2020-03-30T19:44:54Z", "author": {"login": "lostluck"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRfrhDgFqTM4MjI0NTczMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTgVsXAFqTM4NjAxODE4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjQ1NzMz", "url": "https://github.com/apache/beam/pull/11231#pullrequestreview-382245733", "createdAt": "2020-03-26T17:32:54Z", "commit": {"oid": "d0acbc58a3ef4ce722f52accbcd2032d44010fc3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozMjo1NFrOF8SZ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozMzo1MlrOF8Scow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MDQzMQ==", "bodyText": "This won't be enough as the key. There are things that have the same labels but different URNs, e.g start/process/finish msecs\nI would suggest using the MonitoringInfo with the payload field \"blanked\" as the key of the map.", "url": "https://github.com/apache/beam/pull/11231#discussion_r398760431", "createdAt": "2020-03-26T17:32:54Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -16,20 +16,71 @@\n package harness\n \n import (\n+\t\"bytes\"\n+\t\"strconv\"\n+\t\"sync\"\n+\t\"sync/atomic\"\n \t\"time\"\n \n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/coder\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/mtime\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n \tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n \tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n \t\"github.com/golang/protobuf/ptypes\"\n )\n \n-func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+// TODO: 2020/03/26 - measure mutex overhead vs sync.Map for this case.\n+// sync.Map might have lower contention for this read heavy load.\n+var (\n+\tshortMu         sync.Mutex\n+\tlabels2ShortIds map[metrics.Labels]string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0acbc58a3ef4ce722f52accbcd2032d44010fc3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MTEyMw==", "bodyText": "+1", "url": "https://github.com/apache/beam/pull/11231#discussion_r398761123", "createdAt": "2020-03-26T17:33:52Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -16,20 +16,71 @@\n package harness\n \n import (\n+\t\"bytes\"\n+\t\"strconv\"\n+\t\"sync\"\n+\t\"sync/atomic\"\n \t\"time\"\n \n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/coder\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/mtime\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n \tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n \tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n \t\"github.com/golang/protobuf/ptypes\"\n )\n \n-func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+// TODO: 2020/03/26 - measure mutex overhead vs sync.Map for this case.\n+// sync.Map might have lower contention for this read heavy load.\n+var (\n+\tshortMu         sync.Mutex\n+\tlabels2ShortIds map[metrics.Labels]string\n+\tshortIds2Infos  map[string]*ppb.MonitoringInfo\n+\n+\tlastShortID int64\n+)\n+\n+func getNextShortID() string {\n+\tid := atomic.AddInt64(&lastShortID, 1)\n+\t// No reason not to use the smallest string short ids possible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0acbc58a3ef4ce722f52accbcd2032d44010fc3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDg0OTYw", "url": "https://github.com/apache/beam/pull/11231#pullrequestreview-382484960", "createdAt": "2020-03-26T23:18:48Z", "commit": {"oid": "59ebb380724411bdc5c5f7c35cf90aac50540809"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoxODo0OFrOF8d3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzoyMzowOFrOF8d9Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0ODE5OA==", "bodyText": "heads up that this has now been exploded so that each MonitoringInfoSpec has a unique urn meaning that you'll see:\nbeam:metric:user:sum_int64:v1, beam:metric:user:sum_double:v1, ...", "url": "https://github.com/apache/beam/pull/11231#discussion_r398948198", "createdAt": "2020-03-26T23:18:48Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -16,20 +16,165 @@\n package harness\n \n import (\n+\t\"bytes\"\n+\t\"strconv\"\n+\t\"sync\"\n+\t\"sync/atomic\"\n \t\"time\"\n \n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/coder\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/mtime\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n \tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n \tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n \t\"github.com/golang/protobuf/ptypes\"\n )\n \n-func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+type mUrn uint32\n+type mType uint32\n+\n+// TODO: Pull these from the protos.\n+var sUrns = []string{\n+\t\"beam:metric:user:v1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ebb380724411bdc5c5f7c35cf90aac50540809"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0ODYwNA==", "bodyText": "Since the urns uniquely identify the type now, you don't need this anymore and a monitoring info is uniquely described by urn + labels.", "url": "https://github.com/apache/beam/pull/11231#discussion_r398948604", "createdAt": "2020-03-26T23:19:56Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -16,20 +16,165 @@\n package harness\n \n import (\n+\t\"bytes\"\n+\t\"strconv\"\n+\t\"sync\"\n+\t\"sync/atomic\"\n \t\"time\"\n \n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/coder\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph/mtime\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n \tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n \tppb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n \t\"github.com/golang/protobuf/ptypes\"\n )\n \n-func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+type mUrn uint32\n+type mType uint32\n+\n+// TODO: Pull these from the protos.\n+var sUrns = []string{\n+\t\"beam:metric:user:v1\",\n+\t\"beam:metric:element_count:v1\",\n+\t\"beam:metric:pardo_execution_time:start_bundle_msecs:v1\",\n+\t\"beam:metric:pardo_execution_time:process_bundle_msecs:v1\",\n+\t\"beam:metric:pardo_execution_time:finish_bundle_msecs:v1\",\n+\t\"beam:metric:ptransform_progress:remaining:v1\",\n+\t\"beam:metric:ptransform_progress:completed:v1\",\n+\n+\t\"TestingSentinelUrn\", // Must remain last.\n+}\n+\n+const (\n+\turnUser mUrn = iota\n+\turnElementCount\n+\turnStartBundle\n+\turnProcessBundle\n+\turnFinishBundle\n+\turnProgressRemaining\n+\turnProgressCompleted\n+\n+\turnTestSentinel // Must remain last.\n+)\n+\n+var sTypes = []string{\n+\t\"beam:metrics:sum_int64:v1\",\n+\t\"beam:metrics:sum_double:v1\",\n+\t\"beam:metrics:distribution_int64:v1\",\n+\t\"beam:metrics:distribution_double:v1\",\n+\t\"beam:metrics:latest_int64:v1\",\n+\t\"beam:metrics:latest_double:v1\",\n+\t\"beam:metrics:top_n_int64:v1\",\n+\t\"beam:metrics:top_n_double:v1\",\n+\t\"beam:metrics:bottom_n_int64:v1\",\n+\t\"beam:metrics:bottom_n_double:v1\",\n+\t\"beam:metrics:monitoring_table:v1\",\n+\t\"beam:metrics:progress:v1\",\n+\n+\t\"TestingSentinelType\", // Must remain last.\n+}\n+\n+const (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ebb380724411bdc5c5f7c35cf90aac50540809"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0OTY5MA==", "bodyText": "Can you add the case where the same urn but unique labels are used gets a different short id?", "url": "https://github.com/apache/beam/pull/11231#discussion_r398949690", "createdAt": "2020-03-26T23:23:08Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring_test.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package harness\n+\n+import (\n+\t\"testing\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+func TestGetShortID(t *testing.T) {\n+\ttests := []struct {\n+\t\tid           string\n+\t\turn          mUrn\n+\t\ttyp          mType\n+\t\texpectedUrn  string\n+\t\texpectedType string\n+\t}{\n+\t\t{\n+\t\t\tid:           \"1\",\n+\t\t\turn:          urnUser,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ebb380724411bdc5c5f7c35cf90aac50540809"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59ebb380724411bdc5c5f7c35cf90aac50540809", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/59ebb380724411bdc5c5f7c35cf90aac50540809", "committedDate": "2020-03-26T20:52:18Z", "message": "[BEAM-4374] use urns as part of shortid lookup"}, "afterCommit": {"oid": "bcce0ea6ff8c7d344af24105bd210431d2af589e", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/bcce0ea6ff8c7d344af24105bd210431d2af589e", "committedDate": "2020-03-28T01:26:49Z", "message": "accept generated metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26064992766a1f1c001f97dc523b1580998f841f", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/26064992766a1f1c001f97dc523b1580998f841f", "committedDate": "2020-03-28T01:28:27Z", "message": "accept generated metrics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcce0ea6ff8c7d344af24105bd210431d2af589e", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/bcce0ea6ff8c7d344af24105bd210431d2af589e", "committedDate": "2020-03-28T01:26:49Z", "message": "accept generated metrics"}, "afterCommit": {"oid": "26064992766a1f1c001f97dc523b1580998f841f", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/26064992766a1f1c001f97dc523b1580998f841f", "committedDate": "2020-03-28T01:28:27Z", "message": "accept generated metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a66b380b9c481574183811de03067c3132e459c0", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/a66b380b9c481574183811de03067c3132e459c0", "committedDate": "2020-03-28T04:30:16Z", "message": "Remove mType and move type urns to urnToType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046e2f835cbda3614129f59786f2c9180d4c0a88", "author": {"user": {"login": "lostluck", "name": "Robert Burke"}}, "url": "https://github.com/apache/beam/commit/046e2f835cbda3614129f59786f2c9180d4c0a88", "committedDate": "2020-03-28T04:51:43Z", "message": "add missing pcollection payload"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTc0NTUx", "url": "https://github.com/apache/beam/pull/11231#pullrequestreview-384174551", "createdAt": "2020-03-30T19:44:47Z", "commit": {"oid": "046e2f835cbda3614129f59786f2c9180d4c0a88"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDE4MTg1", "url": "https://github.com/apache/beam/pull/11231#pullrequestreview-386018185", "createdAt": "2020-04-01T23:31:18Z", "commit": {"oid": "046e2f835cbda3614129f59786f2c9180d4c0a88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozMToxOFrOF_WPlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozMToxOFrOF_WPlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2OTA0NA==", "bodyText": "Is the locking correct here? I'd think you'd want to acquire the lock in getShortId since that's where the race condition could occur. This function is only reading shortIds2Infos which should only gain more entries over time and entries are never modified, so I'd think it would be thread-safe even without acquiring the lock. Am I missing something?", "url": "https://github.com/apache/beam/pull/11231#discussion_r401969044", "createdAt": "2020-04-01T23:31:18Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -28,10 +31,180 @@ import (\n \t\"github.com/golang/protobuf/ptypes\"\n )\n \n-func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n+type mUrn uint32\n+\n+// TODO: Pull these from the protos.\n+var sUrns = [...]string{\n+\t\"beam:metric:user:sum_int64:v1\",\n+\t\"beam:metric:user:sum_double:v1\",\n+\t\"beam:metric:user:distribution_int64:v1\",\n+\t\"beam:metric:user:distribution_double:v1\",\n+\t\"beam:metric:user:latest_int64:v1\",\n+\t\"beam:metric:user:latest_double:v1\",\n+\t\"beam:metric:user:top_n_int64:v1\",\n+\t\"beam:metric:user:top_n_double:v1\",\n+\t\"beam:metric:user:bottom_n_int64:v1\",\n+\t\"beam:metric:user:bottom_n_double:v1\",\n+\n+\t\"beam:metric:element_count:v1\",\n+\t\"beam:metric:sampled_byte_size:v1\",\n+\n+\t\"beam:metric:pardo_execution_time:start_bundle_msecs:v1\",\n+\t\"beam:metric:pardo_execution_time:process_bundle_msecs:v1\",\n+\t\"beam:metric:pardo_execution_time:finish_bundle_msecs:v1\",\n+\t\"beam:metric:ptransform_execution_time:total_msecs:v1\",\n+\n+\t\"beam:metric:ptransform_progress:remaining:v1\",\n+\t\"beam:metric:ptransform_progress:completed:v1\",\n+\n+\t\"TestingSentinelUrn\", // Must remain last.\n+}\n+\n+const (\n+\turnUserSumInt64 mUrn = iota\n+\turnUserSumFloat64\n+\turnUserDistInt64\n+\turnUserDistFloat64\n+\turnUserLatestMsInt64\n+\turnUserLatestMsFloat64\n+\turnUserTopNInt64\n+\turnUserTopNFloat64\n+\turnUserBottomNInt64\n+\turnUserBottomNFloat64\n+\n+\turnElementCount\n+\turnSampledByteSize\n+\n+\turnStartBundle\n+\turnProcessBundle\n+\turnFinishBundle\n+\turnTransformTotalTime\n+\n+\turnProgressRemaining\n+\turnProgressCompleted\n+\n+\turnTestSentinel // Must remain last.\n+)\n+\n+// urnToType maps the urn to it's encoding type.\n+// This function is written to be inlinable by the compiler.\n+func urnToType(u mUrn) string {\n+\tswitch u {\n+\tcase urnUserSumInt64, urnElementCount, urnStartBundle, urnProcessBundle, urnFinishBundle, urnTransformTotalTime:\n+\t\treturn \"beam:metrics:sum_int64:v1\"\n+\tcase urnUserSumFloat64:\n+\t\treturn \"beam:metrics:sum_double:v1\"\n+\tcase urnUserDistInt64, urnSampledByteSize:\n+\t\treturn \"beam:metrics:distribution_int64:v1\"\n+\tcase urnUserDistFloat64:\n+\t\treturn \"beam:metrics:distribution_double:v1\"\n+\tcase urnUserLatestMsInt64:\n+\t\treturn \"beam:metrics:latest_int64:v1\"\n+\tcase urnUserLatestMsFloat64:\n+\t\treturn \"beam:metrics:latest_double:v1\"\n+\tcase urnUserTopNInt64:\n+\t\treturn \"beam:metrics:top_n_int64:v1\"\n+\tcase urnUserTopNFloat64:\n+\t\treturn \"beam:metrics:top_n_double:v1\"\n+\tcase urnUserBottomNInt64:\n+\t\treturn \"beam:metrics:bottom_n_int64:v1\"\n+\tcase urnUserBottomNFloat64:\n+\t\treturn \"beam:metrics:bottom_n_double:v1\"\n+\n+\tcase urnProgressRemaining, urnProgressCompleted:\n+\t\treturn \"beam:metrics:progress:v1\"\n+\n+\t// Monitoring Table isn't currently in the protos.\n+\t// case ???:\n+\t//\treturn \"beam:metrics:monitoring_table:v1\"\n+\n+\tcase urnTestSentinel:\n+\t\treturn \"TestingSentinelType\"\n+\n+\tdefault:\n+\t\tpanic(\"metric urn without specified type\" + sUrns[u])\n+\t}\n+}\n+\n+type shortKey struct {\n+\tmetrics.Labels\n+\tUrn mUrn // Urns fully specify their type.\n+}\n+\n+// shortIDCache retains lookup caches for short ids to the full monitoring\n+// info metadata.\n+//\n+// TODO: 2020/03/26 - measure mutex overhead vs sync.Map for this case.\n+// sync.Map might have lower contention for this read heavy load.\n+type shortIDCache struct {\n+\tmu              sync.Mutex\n+\tlabels2ShortIds map[shortKey]string\n+\tshortIds2Infos  map[string]*ppb.MonitoringInfo\n+\n+\tlastShortID int64\n+}\n+\n+func newShortIDCache() *shortIDCache {\n+\treturn &shortIDCache{\n+\t\tlabels2ShortIds: make(map[shortKey]string),\n+\t\tshortIds2Infos:  make(map[string]*ppb.MonitoringInfo),\n+\t}\n+}\n+\n+func (c *shortIDCache) getNextShortID() string {\n+\tid := atomic.AddInt64(&c.lastShortID, 1)\n+\t// No reason not to use the smallest string short ids possible.\n+\treturn strconv.FormatInt(id, 36)\n+}\n+\n+// getShortID returns the short id for the given metric, and if\n+// it doesn't exist yet, stores the metadata.\n+// Assumes c.mu lock is held.\n+func (c *shortIDCache) getShortID(l metrics.Labels, urn mUrn) string {\n+\tk := shortKey{l, urn}\n+\ts, ok := c.labels2ShortIds[k]\n+\tif ok {\n+\t\treturn s\n+\t}\n+\ts = c.getNextShortID()\n+\tc.labels2ShortIds[k] = s\n+\tc.shortIds2Infos[s] = &ppb.MonitoringInfo{\n+\t\tUrn:    sUrns[urn],\n+\t\tType:   urnToType(urn),\n+\t\tLabels: userLabels(l),\n+\t}\n+\treturn s\n+}\n+\n+func (c *shortIDCache) shortIdsToInfos(shortids []string) map[string]*ppb.MonitoringInfo {\n+\tc.mu.Lock()\n+\tdefer c.mu.Unlock()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "046e2f835cbda3614129f59786f2c9180d4c0a88"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4716, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}