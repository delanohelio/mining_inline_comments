{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzOTAyNTE5", "number": 11232, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMjoyNTo0OVrODrd9vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1MTowMFrODsPOUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTA2MzAyOnYy", "diffSide": "RIGHT", "path": "website/src/documentation/sdks/python-type-safety.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMjoyNTo0OVrOF71LsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozOTozMVrOF8SsIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI4MTY0OA==", "bodyText": "Is this also added to the changes.md ?", "url": "https://github.com/apache/beam/pull/11232#discussion_r398281648", "createdAt": "2020-03-26T02:25:49Z", "author": {"login": "aaltay"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -64,22 +84,75 @@ To specify type hints as properties of a `DoFn` or `PTransform`, use the decorat\n \n The following code declares an `int` type hint on `FilterEvensDoFn`, using the decorator `@with_input_types()`.\n \n+```py\n+{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}\n ```\n-{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}```\n \n Decorators receive an arbitrary number of positional and/or keyword arguments, typically interpreted in the context of the function they're wrapping. Generally the first argument is a type hint for the main input, and additional arguments are type hints for side inputs.\n \n-### Defining Generic Types\n+### Declaring Type Hints Using Annotations\n+\n+_New in version 2.21.0._", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NTA5MA==", "bodyText": "Yes: https://github.com/apache/beam/pull/10717/files#diff-8b1c3fd0d4a6765c16dfd18509182f9d", "url": "https://github.com/apache/beam/pull/11232#discussion_r398765090", "createdAt": "2020-03-26T17:39:31Z", "author": {"login": "udim"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -64,22 +84,75 @@ To specify type hints as properties of a `DoFn` or `PTransform`, use the decorat\n \n The following code declares an `int` type hint on `FilterEvensDoFn`, using the decorator `@with_input_types()`.\n \n+```py\n+{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}\n ```\n-{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}```\n \n Decorators receive an arbitrary number of positional and/or keyword arguments, typically interpreted in the context of the function they're wrapping. Generally the first argument is a type hint for the main input, and additional arguments are type hints for side inputs.\n \n-### Defining Generic Types\n+### Declaring Type Hints Using Annotations\n+\n+_New in version 2.21.0._", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI4MTY0OA=="}, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzEyNzQ4OnYy", "diffSide": "RIGHT", "path": "website/src/documentation/sdks/python-type-safety.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo0ODoyNlrOF9C03A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowNzoxM1rOGC65fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1Mzc1Ng==", "bodyText": "I might lead with this paragraph, maybe even giving a very concrete example (\"for example, giving an error when trying to apply a PTransform that expects a PCollection of strings to a PCollection of ints\"). Then put the other paragraph about Beam not always being able to infer types next.", "url": "https://github.com/apache/beam/pull/11232#discussion_r399553756", "createdAt": "2020-03-27T21:48:26Z", "author": {"login": "robertwb"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -23,38 +23,58 @@ Python is a dynamically-typed language with no static type checking. Because of\n \n The Apache Beam SDK for Python uses **type hints** during pipeline construction and runtime to try to emulate the correctness guarantees achieved by true static typing. Additionally, using type hints lays some groundwork that allows the backend service to perform efficient type deduction and registration of `Coder` objects.\n \n-Python version 3.5 introduces a module called **typing** to provide hints for type validators in the language. The Beam SDK for Python, based on Python version 2.7, implements a subset of [PEP 484](https://www.python.org/dev/peps/pep-0484/) and aims to follow it as closely as possible in its own typehints module.\n+Python version 3.5 introduces a module called **typing** to provide hints for type validators in the language.\n+The Beam SDK for Python implements a subset of [PEP 484](https://www.python.org/dev/peps/pep-0484/) and aims to follow it as closely as possible in its own typehints module.\n+\n+These flags control Beam type safety:\n+- `--no_pipeline_type_check`\n+\n+  Disables type checking during pipeline construction.\n+  Default is to perform these checks.\n+- `--runtime_type_check`\n+\n+  Enables runtime type checking of every element.\n+  This may affect pipeline performance, so the default is to skip these checks.\n \n ## Benefits of Type Hints\n \n-The Beam SDK for Python includes some automatic type checking: for example, some `PTransform`s, such as `Create` and simple `ParDo` transforms, attempt to deduce their output type given their input. However, the Beam cannot infer types in all cases. Therefore, the recommendation is that you declare type hints to aid you in performing your own type checks if necessary.\n+The Beam SDK for Python includes some automatic type checking: for example, some `PTransforms`, such as `Create` and simple `ParDo` transforms, attempt to deduce their output type given their input. However, the Beam cannot infer types in all cases. Therefore, the recommendation is that you declare type hints to aid you in performing your own type checks if necessary.\n \n-When you use type hints, the runner raises exceptions during pipeline construction time, rather than runtime. For example, the runner generates an exception if it detects that your pipeline applies mismatched `PTransforms` (where the expected outputs of one transform do not match the expected inputs of the following transform). These exceptions are raised at pipeline construction time, regardless of where your pipeline will execute. Introducing type hints for the `PTransform`s you define allows you to catch potential bugs up front in the local runner, rather than after minutes of execution into a deep, complex pipeline.\n+When you use type hints, the runner raises exceptions during pipeline construction time, rather than runtime. For example, the runner generates an exception if it detects that your pipeline applies mismatched `PTransforms` (where the expected outputs of one transform do not match the expected inputs of the following transform). These exceptions are raised at pipeline construction time, regardless of where your pipeline will execute. Introducing type hints for the `PTransforms` you define allows you to catch potential bugs up front in the local runner, rather than after minutes of execution into a deep, complex pipeline.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNTMyNg==", "bodyText": "Done. Also reworded this paragraph a bit.", "url": "https://github.com/apache/beam/pull/11232#discussion_r405715326", "createdAt": "2020-04-08T18:07:13Z", "author": {"login": "udim"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -23,38 +23,58 @@ Python is a dynamically-typed language with no static type checking. Because of\n \n The Apache Beam SDK for Python uses **type hints** during pipeline construction and runtime to try to emulate the correctness guarantees achieved by true static typing. Additionally, using type hints lays some groundwork that allows the backend service to perform efficient type deduction and registration of `Coder` objects.\n \n-Python version 3.5 introduces a module called **typing** to provide hints for type validators in the language. The Beam SDK for Python, based on Python version 2.7, implements a subset of [PEP 484](https://www.python.org/dev/peps/pep-0484/) and aims to follow it as closely as possible in its own typehints module.\n+Python version 3.5 introduces a module called **typing** to provide hints for type validators in the language.\n+The Beam SDK for Python implements a subset of [PEP 484](https://www.python.org/dev/peps/pep-0484/) and aims to follow it as closely as possible in its own typehints module.\n+\n+These flags control Beam type safety:\n+- `--no_pipeline_type_check`\n+\n+  Disables type checking during pipeline construction.\n+  Default is to perform these checks.\n+- `--runtime_type_check`\n+\n+  Enables runtime type checking of every element.\n+  This may affect pipeline performance, so the default is to skip these checks.\n \n ## Benefits of Type Hints\n \n-The Beam SDK for Python includes some automatic type checking: for example, some `PTransform`s, such as `Create` and simple `ParDo` transforms, attempt to deduce their output type given their input. However, the Beam cannot infer types in all cases. Therefore, the recommendation is that you declare type hints to aid you in performing your own type checks if necessary.\n+The Beam SDK for Python includes some automatic type checking: for example, some `PTransforms`, such as `Create` and simple `ParDo` transforms, attempt to deduce their output type given their input. However, the Beam cannot infer types in all cases. Therefore, the recommendation is that you declare type hints to aid you in performing your own type checks if necessary.\n \n-When you use type hints, the runner raises exceptions during pipeline construction time, rather than runtime. For example, the runner generates an exception if it detects that your pipeline applies mismatched `PTransforms` (where the expected outputs of one transform do not match the expected inputs of the following transform). These exceptions are raised at pipeline construction time, regardless of where your pipeline will execute. Introducing type hints for the `PTransform`s you define allows you to catch potential bugs up front in the local runner, rather than after minutes of execution into a deep, complex pipeline.\n+When you use type hints, the runner raises exceptions during pipeline construction time, rather than runtime. For example, the runner generates an exception if it detects that your pipeline applies mismatched `PTransforms` (where the expected outputs of one transform do not match the expected inputs of the following transform). These exceptions are raised at pipeline construction time, regardless of where your pipeline will execute. Introducing type hints for the `PTransforms` you define allows you to catch potential bugs up front in the local runner, rather than after minutes of execution into a deep, complex pipeline.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1Mzc1Ng=="}, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzEzMjgwOnYy", "diffSide": "RIGHT", "path": "website/src/documentation/sdks/python-type-safety.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1MDozMlrOF9C3-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxOToyOVrOGC7WMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NDU1NA==", "bodyText": "This should be the preferred way; put it first.", "url": "https://github.com/apache/beam/pull/11232#discussion_r399554554", "createdAt": "2020-03-27T21:50:32Z", "author": {"login": "robertwb"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -64,22 +84,75 @@ To specify type hints as properties of a `DoFn` or `PTransform`, use the decorat\n \n The following code declares an `int` type hint on `FilterEvensDoFn`, using the decorator `@with_input_types()`.\n \n+```py\n+{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}\n ```\n-{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}```\n \n Decorators receive an arbitrary number of positional and/or keyword arguments, typically interpreted in the context of the function they're wrapping. Generally the first argument is a type hint for the main input, and additional arguments are type hints for side inputs.\n \n-### Defining Generic Types\n+### Declaring Type Hints Using Annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyMjY3NA==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/11232#discussion_r405722674", "createdAt": "2020-04-08T18:19:29Z", "author": {"login": "udim"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -64,22 +84,75 @@ To specify type hints as properties of a `DoFn` or `PTransform`, use the decorat\n \n The following code declares an `int` type hint on `FilterEvensDoFn`, using the decorator `@with_input_types()`.\n \n+```py\n+{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}\n ```\n-{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}```\n \n Decorators receive an arbitrary number of positional and/or keyword arguments, typically interpreted in the context of the function they're wrapping. Generally the first argument is a type hint for the main input, and additional arguments are type hints for side inputs.\n \n-### Defining Generic Types\n+### Declaring Type Hints Using Annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NDU1NA=="}, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzEzMzYzOnYy", "diffSide": "RIGHT", "path": "website/src/documentation/sdks/python-type-safety.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1MTowMVrOF9C4jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyMDowOVrOGC7XtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NDcwMA==", "bodyText": "\"Declaring Type Hints Using Type Annotations\" (might be a bit redundant, but is clearer).", "url": "https://github.com/apache/beam/pull/11232#discussion_r399554700", "createdAt": "2020-03-27T21:51:01Z", "author": {"login": "robertwb"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -64,22 +84,75 @@ To specify type hints as properties of a `DoFn` or `PTransform`, use the decorat\n \n The following code declares an `int` type hint on `FilterEvensDoFn`, using the decorator `@with_input_types()`.\n \n+```py\n+{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}\n ```\n-{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}```\n \n Decorators receive an arbitrary number of positional and/or keyword arguments, typically interpreted in the context of the function they're wrapping. Generally the first argument is a type hint for the main input, and additional arguments are type hints for side inputs.\n \n-### Defining Generic Types\n+### Declaring Type Hints Using Annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyMzA2MQ==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/11232#discussion_r405723061", "createdAt": "2020-04-08T18:20:09Z", "author": {"login": "udim"}, "path": "website/src/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -64,22 +84,75 @@ To specify type hints as properties of a `DoFn` or `PTransform`, use the decorat\n \n The following code declares an `int` type hint on `FilterEvensDoFn`, using the decorator `@with_input_types()`.\n \n+```py\n+{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}\n ```\n-{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets_test.py tag:type_hints_do_fn %}```\n \n Decorators receive an arbitrary number of positional and/or keyword arguments, typically interpreted in the context of the function they're wrapping. Generally the first argument is a type hint for the main input, and additional arguments are type hints for side inputs.\n \n-### Defining Generic Types\n+### Declaring Type Hints Using Annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NDcwMA=="}, "originalCommit": {"oid": "dcdaf65e44a293f0c27612bb14f025d2c68020b1"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1539, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}