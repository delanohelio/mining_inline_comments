{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjA5NDIw", "number": 13326, "title": "[BEAM-10480] Update SDF programming guide", "bodyText": "r: @pabloem @rosetn\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-11-12T23:00:18Z", "url": "https://github.com/apache/beam/pull/13326", "merged": true, "mergeCommit": {"oid": "774185b9cb3b8732a635d1267c638a4adbe35e17"}, "closed": true, "closedAt": "2020-11-18T23:48:27Z", "author": {"login": "boyuanzz"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb6wz-AFqTUyOTU3MDgwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd2qf-ABqjQwMTMyMjY1NDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTcwODA4", "url": "https://github.com/apache/beam/pull/13326#pullrequestreview-529570808", "createdAt": "2020-11-12T23:01:00Z", "commit": {"oid": "4867d1b773dd95c18933bb8491d282d0ec5a7bb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzowMTowMFrOHySPog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzowMTowMFrOHySPog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4OTc2Mg==", "bodyText": "Do we have a way to always link to the latest released java/py doc? @rosetn", "url": "https://github.com/apache/beam/pull/13326#discussion_r522489762", "createdAt": "2020-11-12T23:01:00Z", "author": {"login": "boyuanzz"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/2.25.0/org/apache/beam/sdk/io/range/OffsetRange.html) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4867d1b773dd95c18933bb8491d282d0ec5a7bb7"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNDc2MzIz", "url": "https://github.com/apache/beam/pull/13326#pullrequestreview-531476323", "createdAt": "2020-11-16T16:15:09Z", "commit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxNTowOVrOH0GLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo0MjowNVrOH0HaPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4OTIyNA==", "bodyText": "I'd remove \"properly\" and add a comma after \"watermark\"", "url": "https://github.com/apache/beam/pull/13326#discussion_r524389224", "createdAt": "2020-11-16T16:15:09Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4OTkxNg==", "bodyText": "Replace \"which\" with \"that\"", "url": "https://github.com/apache/beam/pull/13326#discussion_r524389916", "createdAt": "2020-11-16T16:16:02Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MTE2OA==", "bodyText": "Make OffsetRange in code font by adding backticks. Can you change all of the instances of class names into code font? More information here: https://developers.google.com/style/code-in-text#some-specific-items-to-put-in-code-font\nOffsetRange", "url": "https://github.com/apache/beam/pull/13326#discussion_r524391168", "createdAt": "2020-11-16T16:17:43Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NTIwMg==", "bodyText": "I'd remove \"and so forth.\" https://developers.google.com/style/word-list#etc\nThe restriction provider lets SDF authors override default implementations, including the ones for splitting and sizing.", "url": "https://github.com/apache/beam/pull/13326#discussion_r524395202", "createdAt": "2020-11-16T16:23:23Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NjY3NQ==", "bodyText": "Replace \"what\" with \"which\"", "url": "https://github.com/apache/beam/pull/13326#discussion_r524396675", "createdAt": "2020-11-16T16:25:15Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwMTM4Mw==", "bodyText": "I recommend rewording this to be more specific\nFor APIs details, read the Java and Python reference documentation.", "url": "https://github.com/apache/beam/pull/13326#discussion_r524401383", "createdAt": "2020-11-16T16:31:42Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwMzYzMQ==", "bodyText": "I think this is missing a noun. WDYT about the following?:\nThere are some built-in RestrictionTracker implementations defined in Java:", "url": "https://github.com/apache/beam/pull/13326#discussion_r524403631", "createdAt": "2020-11-16T16:34:38Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+documentations.\n+There are some built-in RestrictionTracker defined in Java:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNDEwNA==", "bodyText": "Maybe \"SDFs also have a built-in RestrictionTracker implementation in Python:\"", "url": "https://github.com/apache/beam/pull/13326#discussion_r524404104", "createdAt": "2020-11-16T16:35:11Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+documentations.\n+There are some built-in RestrictionTracker defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+We also have built-in RestrictionTracker in Python:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNDcxMw==", "bodyText": "\"The watermark estimator provider lets SDF authors define how to initialize the watermark\nstate and create a watermark estimator.\"", "url": "https://github.com/apache/beam/pull/13326#discussion_r524404713", "createdAt": "2020-11-16T16:35:58Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+documentations.\n+There are some built-in RestrictionTracker defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+We also have built-in RestrictionTracker in Python:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRestrictionTracker)\n+\n+The watermark state is a user-defined object which is used to create a `WatermarkEstimator` from a\n+`WatermarkEstimatorProvider`. The simplest watermark state could be a `timestamp`.\n+\n+The watermark estimator provider lets SDF authors to define the way of initializing the watermark", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNTA2MA==", "bodyText": "The watermark estimator tracks the watermark when an element-restriction pair is in progress.", "url": "https://github.com/apache/beam/pull/13326#discussion_r524405060", "createdAt": "2020-11-16T16:36:26Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+documentations.\n+There are some built-in RestrictionTracker defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+We also have built-in RestrictionTracker in Python:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRestrictionTracker)\n+\n+The watermark state is a user-defined object which is used to create a `WatermarkEstimator` from a\n+`WatermarkEstimatorProvider`. The simplest watermark state could be a `timestamp`.\n+\n+The watermark estimator provider lets SDF authors to define the way of initializing the watermark\n+state and creating a watermark estimator. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.WatermarkEstimatorProvider)\n+has a dedicated WatermarkEstimatorProvider type.\n+\n+The watermark estimator is for tracking watermark when an element-restriction pair is in progress.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNTc1Mg==", "bodyText": "For APIs details, read the Java and Python reference documentation.", "url": "https://github.com/apache/beam/pull/13326#discussion_r524405752", "createdAt": "2020-11-16T16:37:19Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+documentations.\n+There are some built-in RestrictionTracker defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+We also have built-in RestrictionTracker in Python:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRestrictionTracker)\n+\n+The watermark state is a user-defined object which is used to create a `WatermarkEstimator` from a\n+`WatermarkEstimatorProvider`. The simplest watermark state could be a `timestamp`.\n+\n+The watermark estimator provider lets SDF authors to define the way of initializing the watermark\n+state and creating a watermark estimator. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.WatermarkEstimatorProvider)\n+has a dedicated WatermarkEstimatorProvider type.\n+\n+The watermark estimator is for tracking watermark when an element-restriction pair is in progress.\n+For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.html)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNjE4Ng==", "bodyText": "add  \"implementations\"", "url": "https://github.com/apache/beam/pull/13326#discussion_r524406186", "createdAt": "2020-11-16T16:37:49Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+documentations.\n+There are some built-in RestrictionTracker defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+We also have built-in RestrictionTracker in Python:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRestrictionTracker)\n+\n+The watermark state is a user-defined object which is used to create a `WatermarkEstimator` from a\n+`WatermarkEstimatorProvider`. The simplest watermark state could be a `timestamp`.\n+\n+The watermark estimator provider lets SDF authors to define the way of initializing the watermark\n+state and creating a watermark estimator. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.WatermarkEstimatorProvider)\n+has a dedicated WatermarkEstimatorProvider type.\n+\n+The watermark estimator is for tracking watermark when an element-restriction pair is in progress.\n+For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.html)\n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.WatermarkEstimator)\n+documentations.\n+There are some built-in `WatermarkEstimator` defined in Java:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNjc3Ng==", "bodyText": "Along with the default WatermarkEstimatorProvider, there are the same set of built-in WatermarkEstimator implementations in Python:", "url": "https://github.com/apache/beam/pull/13326#discussion_r524406776", "createdAt": "2020-11-16T16:38:36Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,60 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark properly especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object which is used to represent a subset of\n+work for a given element. For example, we defined OffsetRange as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations\n+for splitting, sizing, and so forth. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated RestrictionProvider type.\n+\n+The restriction tracker is responsible for tracking what subset of the restriction has been\n+completed during processing. For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+documentations.\n+There are some built-in RestrictionTracker defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+We also have built-in RestrictionTracker in Python:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRestrictionTracker)\n+\n+The watermark state is a user-defined object which is used to create a `WatermarkEstimator` from a\n+`WatermarkEstimatorProvider`. The simplest watermark state could be a `timestamp`.\n+\n+The watermark estimator provider lets SDF authors to define the way of initializing the watermark\n+state and creating a watermark estimator. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.WatermarkEstimatorProvider)\n+has a dedicated WatermarkEstimatorProvider type.\n+\n+The watermark estimator is for tracking watermark when an element-restriction pair is in progress.\n+For APIs details, please refer to [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.html)\n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.WatermarkEstimator)\n+documentations.\n+There are some built-in `WatermarkEstimator` defined in Java:\n+1. [Manual](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.Manual.html)\n+2. [MonotonicallyIncreasing](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.MonotonicallyIncreasing.html)\n+3. [WallTime](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.WallTime.html)\n+\n+There are the same set of built-in `WatermarkEstimator` in Python along with default `WatermarkEstimatorProvider` as well:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNzMwOQ==", "bodyText": "Different\nrunners (e.g., Dataflow, Flink, Spark) have different strategies to issue splits under batch and\nstreaming execution.", "url": "https://github.com/apache/beam/pull/13326#discussion_r524407309", "createdAt": "2020-11-16T16:39:18Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5324,10 +5368,15 @@ resource utilization.\n A runner at any time may attempt to split a restriction while it is being processed. This allows the\n runner to either pause processing of the restriction so that other work may be done (common for\n unbounded restrictions to limit the amount of output and/or improve latency) or split the restriction\n-into two pieces, increasing the available parallelism within the system. It is important to author a\n-SDF with this in mind since the end of the restriction may change. Thus when writing the\n-processing loop, it is important to use the result from trying to claim a piece of the restriction\n-instead of assuming one can process till the end.\n+into two pieces, increasing the available parallelism within the system. Please note that different", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwODUzNg==", "bodyText": "Replace \"bad\" with \"incorrect.\" Does this still have the same meaning?", "url": "https://github.com/apache/beam/pull/13326#discussion_r524408536", "createdAt": "2020-11-16T16:40:51Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5324,10 +5368,15 @@ resource utilization.\n A runner at any time may attempt to split a restriction while it is being processed. This allows the\n runner to either pause processing of the restriction so that other work may be done (common for\n unbounded restrictions to limit the amount of output and/or improve latency) or split the restriction\n-into two pieces, increasing the available parallelism within the system. It is important to author a\n-SDF with this in mind since the end of the restriction may change. Thus when writing the\n-processing loop, it is important to use the result from trying to claim a piece of the restriction\n-instead of assuming one can process till the end.\n+into two pieces, increasing the available parallelism within the system. Please note that different\n+runners(e.g., Dataflow, Flink, Spark) have different strategies to issue splits under batch and\n+streaming execution.\n+\n+It is important to author an SDF with this in mind since the end of the restriction may change. Thus\n+when writing the processing loop, it is important to use the result from trying to claim a piece of\n+the restriction instead of assuming one can process till the end.\n+\n+One bad example could be:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwOTQwNg==", "bodyText": "Cleaning up a little. WDYT about this?:\nAuthor an SDF with this in mind since the end of the restriction may change. When writing the processing loop, use the result from trying to claim a piece of the restriction instead of assuming you can process until the end.", "url": "https://github.com/apache/beam/pull/13326#discussion_r524409406", "createdAt": "2020-11-16T16:42:05Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5324,10 +5368,15 @@ resource utilization.\n A runner at any time may attempt to split a restriction while it is being processed. This allows the\n runner to either pause processing of the restriction so that other work may be done (common for\n unbounded restrictions to limit the amount of output and/or improve latency) or split the restriction\n-into two pieces, increasing the available parallelism within the system. It is important to author a\n-SDF with this in mind since the end of the restriction may change. Thus when writing the\n-processing loop, it is important to use the result from trying to claim a piece of the restriction\n-instead of assuming one can process till the end.\n+into two pieces, increasing the available parallelism within the system. Please note that different\n+runners(e.g., Dataflow, Flink, Spark) have different strategies to issue splits under batch and\n+streaming execution.\n+\n+It is important to author an SDF with this in mind since the end of the restriction may change. Thus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6e693a79ea5a56f7f4d416317391815d77b9c9"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzMxMjA4", "url": "https://github.com/apache/beam/pull/13326#pullrequestreview-533731208", "createdAt": "2020-11-18T17:57:58Z", "commit": {"oid": "1796dc49a378a0cfd7b7e488c416961dfc0d94cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzo1Nzo1OVrOH17KYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzo1Nzo1OVrOH17KYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwNTg4OQ==", "bodyText": "Perhaps you can explain how does one know if it's bounded / unbounded?\nI took a stab at it here, but feel free to write your own if you think this is not good:\nBounded DoFns are those where the work represented by an element is well known a priori, and that \nit has an end. Unbounded are those where the amount of work does not have a specific end, or the \namount of work is not known a priori. The boundedness/unboundedness of your SDF has implications\n for Bundle Finalization(link).\n\nPerhaps it's useful to mention examples?\nAn example of an unbounded element would be a Kafka or a PubSub topic; while a bounded element \nmay represent a file, or group of files.", "url": "https://github.com/apache/beam/pull/13326#discussion_r526305889", "createdAt": "2020-11-18T17:57:59Z", "author": {"login": "pabloem"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,63 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark, especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object that is used to represent a subset of\n+work for a given element. For example, we defined `OffsetRange` as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations, including the ones for\n+splitting and sizing. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated `RestrictionProvider` type.\n+\n+The restriction tracker is responsible for tracking which subset of the restriction has been\n+completed during processing. For APIs details, read the [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+reference documentation.\n+\n+There are some built-in `RestrictionTracker` implementations defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+The SDF also has a built-in `RestrictionTracker` implementation in Python:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRestrictionTracker)\n+\n+The watermark state is a user-defined object which is used to create a `WatermarkEstimator` from a\n+`WatermarkEstimatorProvider`. The simplest watermark state could be a `timestamp`.\n+\n+The watermark estimator provider lets SDF authors define how to initialize the watermark state and\n+create a watermark estimator. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.WatermarkEstimatorProvider)\n+has a dedicated `WatermarkEstimatorProvider` type.\n+\n+The watermark estimator tracks the watermark when an element-restriction pair is in progress.\n+For APIs details, read the [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.html)\n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.WatermarkEstimator)\n+reference documentation.\n+\n+There are some built-in `WatermarkEstimator` implementations in Java:\n+1. [Manual](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.Manual.html)\n+2. [MonotonicallyIncreasing](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.MonotonicallyIncreasing.html)\n+3. [WallTime](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.WallTime.html)\n+\n+Along with the default `WatermarkEstimatorProvider`, there are the same set of built-in\n+`WatermarkEstimator` implementations in Python:\n+1. [ManualWatermarkEstimator](https://beam.apache.org/releases/pydoc/current/apache_beam.io.watermark_estimators.html#apache_beam.io.watermark_estimators.ManualWatermarkEstimator)\n+2. [MonotonicWatermarkEstimator](https://beam.apache.org/releases/pydoc/current/apache_beam.io.watermark_estimators.html#apache_beam.io.watermark_estimators.MonotonicWatermarkEstimator)\n+3. [WalltimeWatermarkEstimator](https://beam.apache.org/releases/pydoc/current/apache_beam.io.watermark_estimators.html#apache_beam.io.watermark_estimators.WalltimeWatermarkEstimator)\n \n To define an SDF, you must choose whether the SDF is bounded (default) or\n unbounded and define a way to initialize an initial restriction for an element.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1796dc49a378a0cfd7b7e488c416961dfc0d94cc"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODI1Nzkz", "url": "https://github.com/apache/beam/pull/13326#pullrequestreview-533825793", "createdAt": "2020-11-18T19:58:31Z", "commit": {"oid": "1796dc49a378a0cfd7b7e488c416961dfc0d94cc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo1ODozMlrOH1_usA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo1ODozMlrOH1_usA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4MDcyMA==", "bodyText": "WDYT about this?\nThe boundedness and unboundedness of your SDF has implications for Bundle Finalization(link). The distinction is based on how the amount of work is represented:\n\nBounded DoFns are those where the work represented by an element is well-known beforehand and has an end. Examples of bounded elements include a file or group of files.\nUnbounded DoFns are those where the amount of work does not have a specific end or the\namount of work is not known befrehand.  Examples of unbounded elements include a Kafka or a PubSub topic.", "url": "https://github.com/apache/beam/pull/13326#discussion_r526380720", "createdAt": "2020-11-18T19:58:32Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -5188,16 +5188,63 @@ restriction pairs.\n #### 12.1.1. A basic SDF {#a-basic-sdf}\n \n A basic SDF is composed of three parts: a restriction, a restriction provider, and a\n-restriction tracker. The restriction is used to represent a subset of work for a given element.\n-The restriction provider lets SDF authors override default implementations for splitting, sizing,\n-watermark estimation, and so forth. In [Java](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L92)\n+restriction tracker. If you want to control the watermark, especially in a streaming\n+pipeline, two more components are needed: a watermark estimator provider and a watermark estimator.\n+\n+The restriction is a user-defined object that is used to represent a subset of\n+work for a given element. For example, we defined `OffsetRange` as a restriction to represent offset\n+positions in [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/range/OffsetRange.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRange).\n+\n+The restriction provider lets SDF authors override default implementations, including the ones for\n+splitting and sizing. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n and [Go](https://github.com/apache/beam/blob/0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8/sdks/go/pkg/beam/pardo.go#L226),\n-this is the `DoFn`. [Python](https://github.com/apache/beam/blob/f4c2734261396858e388ebef2eef50e7d48231a8/sdks/python/apache_beam/transforms/core.py#L213)\n-has a dedicated RestrictionProvider type. The restriction tracker is responsible for tracking\n-what subset of the restriction has been completed during processing.\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.RestrictionProvider)\n+has a dedicated `RestrictionProvider` type.\n+\n+The restriction tracker is responsible for tracking which subset of the restriction has been\n+completed during processing. For APIs details, read the [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.html) \n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.RestrictionTracker)\n+reference documentation.\n+\n+There are some built-in `RestrictionTracker` implementations defined in Java:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.html)\n+2. [GrowableOffsetRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/GrowableOffsetRangeTracker.html)\n+3. [ByteKeyRangeTracker](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.html)\n+\n+The SDF also has a built-in `RestrictionTracker` implementation in Python:\n+1. [OffsetRangeTracker](https://beam.apache.org/releases/pydoc/current/apache_beam.io.restriction_trackers.html#apache_beam.io.restriction_trackers.OffsetRestrictionTracker)\n+\n+The watermark state is a user-defined object which is used to create a `WatermarkEstimator` from a\n+`WatermarkEstimatorProvider`. The simplest watermark state could be a `timestamp`.\n+\n+The watermark estimator provider lets SDF authors define how to initialize the watermark state and\n+create a watermark estimator. In [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/DoFn.ProcessElement.html)\n+this is the `DoFn`. [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.WatermarkEstimatorProvider)\n+has a dedicated `WatermarkEstimatorProvider` type.\n+\n+The watermark estimator tracks the watermark when an element-restriction pair is in progress.\n+For APIs details, read the [Java](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimator.html)\n+and [Python](https://beam.apache.org/releases/pydoc/current/apache_beam.io.iobase.html#apache_beam.io.iobase.WatermarkEstimator)\n+reference documentation.\n+\n+There are some built-in `WatermarkEstimator` implementations in Java:\n+1. [Manual](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.Manual.html)\n+2. [MonotonicallyIncreasing](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.MonotonicallyIncreasing.html)\n+3. [WallTime](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/transforms/splittabledofn/WatermarkEstimators.WallTime.html)\n+\n+Along with the default `WatermarkEstimatorProvider`, there are the same set of built-in\n+`WatermarkEstimator` implementations in Python:\n+1. [ManualWatermarkEstimator](https://beam.apache.org/releases/pydoc/current/apache_beam.io.watermark_estimators.html#apache_beam.io.watermark_estimators.ManualWatermarkEstimator)\n+2. [MonotonicWatermarkEstimator](https://beam.apache.org/releases/pydoc/current/apache_beam.io.watermark_estimators.html#apache_beam.io.watermark_estimators.MonotonicWatermarkEstimator)\n+3. [WalltimeWatermarkEstimator](https://beam.apache.org/releases/pydoc/current/apache_beam.io.watermark_estimators.html#apache_beam.io.watermark_estimators.WalltimeWatermarkEstimator)\n \n To define an SDF, you must choose whether the SDF is bounded (default) or\n unbounded and define a way to initialize an initial restriction for an element.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwNTg4OQ=="}, "originalCommit": {"oid": "1796dc49a378a0cfd7b7e488c416961dfc0d94cc"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc52b633a2c1fe58d98290d131dd9dcb373165a8", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/fc52b633a2c1fe58d98290d131dd9dcb373165a8", "committedDate": "2020-11-18T23:15:44Z", "message": "Update SDF programming guide."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1aa4f9b91996143f07ba435bcad715a4d855423b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1aa4f9b91996143f07ba435bcad715a4d855423b", "committedDate": "2020-11-18T23:11:23Z", "message": "Add explanation of bounded/unbounded"}, "afterCommit": {"oid": "fc52b633a2c1fe58d98290d131dd9dcb373165a8", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/fc52b633a2c1fe58d98290d131dd9dcb373165a8", "committedDate": "2020-11-18T23:15:44Z", "message": "Update SDF programming guide."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4843, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}