{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyODExOTY2", "number": 11405, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1ODowOVrOEFo50Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1ODowOVrOEFo50Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzQ4NDk3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/redis/src/main/java/org/apache/beam/sdk/io/redis/RedisIO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo1ODowOVrOGj80FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyODo1NlrOGrQphQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0OTcxNw==", "bodyText": "There is API breakage here since some users could rely on the fact that readAll() returns ReadAll. I think we should keep the same signature for now but just deprecate it. Then remove it after 3 releases or change it to make consistent with all other ReadAll patterns that take PCollection<Read> as an input.\nIn the same time, we still can add a new transform ReadKeyPatterns, available through readKeyPatterns(), and ask users to use it instead.", "url": "https://github.com/apache/beam/pull/11405#discussion_r440349717", "createdAt": "2020-06-15T17:58:09Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/redis/src/main/java/org/apache/beam/sdk/io/redis/RedisIO.java", "diffHunk": "@@ -123,8 +123,24 @@ public static Read read() {\n    * Like {@link #read()} but executes multiple instances of the Redis query substituting each\n    * element of a {@link PCollection} as key pattern.\n    */\n-  public static ReadAll readAll() {\n-    return new AutoValue_RedisIO_ReadAll.Builder()\n+  public static ReadKeyPatterns readKeyPatterns() {\n+    return new AutoValue_RedisIO_ReadKeyPatterns.Builder()\n+        .setConnectionConfiguration(RedisConnectionConfiguration.create())\n+        .setBatchSize(1000)\n+        .setOutputParallelization(true)\n+        .build();\n+  }\n+\n+  /**\n+   * Like {@link #read()} but executes multiple instances of the Redis query substituting each\n+   * element of a {@link PCollection} as key pattern.\n+   *\n+   * @deprecated This method is not consistent with the readAll pattern of other transforms and will\n+   *     be remove soon. Please update you code to use {@link #readKeyPatterns()} instead.\n+   */\n+  @Deprecated\n+  public static ReadKeyPatterns readAll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff459eaaf30b706f07a09d95f58ed154afffe47"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNjI1OQ==", "bodyText": "Yes I will adjust it. Thanks", "url": "https://github.com/apache/beam/pull/11405#discussion_r440936259", "createdAt": "2020-06-16T15:20:37Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/redis/src/main/java/org/apache/beam/sdk/io/redis/RedisIO.java", "diffHunk": "@@ -123,8 +123,24 @@ public static Read read() {\n    * Like {@link #read()} but executes multiple instances of the Redis query substituting each\n    * element of a {@link PCollection} as key pattern.\n    */\n-  public static ReadAll readAll() {\n-    return new AutoValue_RedisIO_ReadAll.Builder()\n+  public static ReadKeyPatterns readKeyPatterns() {\n+    return new AutoValue_RedisIO_ReadKeyPatterns.Builder()\n+        .setConnectionConfiguration(RedisConnectionConfiguration.create())\n+        .setBatchSize(1000)\n+        .setOutputParallelization(true)\n+        .build();\n+  }\n+\n+  /**\n+   * Like {@link #read()} but executes multiple instances of the Redis query substituting each\n+   * element of a {@link PCollection} as key pattern.\n+   *\n+   * @deprecated This method is not consistent with the readAll pattern of other transforms and will\n+   *     be remove soon. Please update you code to use {@link #readKeyPatterns()} instead.\n+   */\n+  @Deprecated\n+  public static ReadKeyPatterns readAll() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0OTcxNw=="}, "originalCommit": {"oid": "8ff459eaaf30b706f07a09d95f58ed154afffe47"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDcyNQ==", "bodyText": "Hello! how can I to use this version ?? I cant' see how to compile and to use with an development which I have problems using RedisIO.readAll(), as I see this versi\u00f3n solved this issue. Please your help, All the best!", "url": "https://github.com/apache/beam/pull/11405#discussion_r448014725", "createdAt": "2020-06-30T22:28:56Z", "author": {"login": "n3lsok"}, "path": "sdks/java/io/redis/src/main/java/org/apache/beam/sdk/io/redis/RedisIO.java", "diffHunk": "@@ -123,8 +123,24 @@ public static Read read() {\n    * Like {@link #read()} but executes multiple instances of the Redis query substituting each\n    * element of a {@link PCollection} as key pattern.\n    */\n-  public static ReadAll readAll() {\n-    return new AutoValue_RedisIO_ReadAll.Builder()\n+  public static ReadKeyPatterns readKeyPatterns() {\n+    return new AutoValue_RedisIO_ReadKeyPatterns.Builder()\n+        .setConnectionConfiguration(RedisConnectionConfiguration.create())\n+        .setBatchSize(1000)\n+        .setOutputParallelization(true)\n+        .build();\n+  }\n+\n+  /**\n+   * Like {@link #read()} but executes multiple instances of the Redis query substituting each\n+   * element of a {@link PCollection} as key pattern.\n+   *\n+   * @deprecated This method is not consistent with the readAll pattern of other transforms and will\n+   *     be remove soon. Please update you code to use {@link #readKeyPatterns()} instead.\n+   */\n+  @Deprecated\n+  public static ReadKeyPatterns readAll() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0OTcxNw=="}, "originalCommit": {"oid": "8ff459eaaf30b706f07a09d95f58ed154afffe47"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1253, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}