{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTk5Nzc4", "number": 13116, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTo1Mjo1NFrOEu2s2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODowMDowNlrOEwpNrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTY2MTY5OnYy", "diffSide": "RIGHT", "path": "runners/flink/flink_runner.gradle", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTo1Mjo1NFrOHjgFbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDozNjowM1rOHwffFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA==", "bodyText": "Just wanted to confirm that dependency won't be baked into the job server as it is already part of the Flink dist.", "url": "https://github.com/apache/beam/pull/13116#discussion_r506987884", "createdAt": "2020-10-17T21:52:54Z", "author": {"login": "tweise"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NTAwNg==", "bodyText": "Is that true? AFAIK RocksDB is an optional dependency. We can change the scope to provided and add a separate dependency with testCompile.", "url": "https://github.com/apache/beam/pull/13116#discussion_r507675006", "createdAt": "2020-10-19T11:34:03Z", "author": {"login": "mxm"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjczNg==", "bodyText": "I checked and the dependency does not seem to be part of the default Flink distribution (quite surprising for me btw). However the way of instantiation makes the dependency needed, making it provided will solve it but it is a bit less user-friendly.", "url": "https://github.com/apache/beam/pull/13116#discussion_r509326736", "createdAt": "2020-10-21T14:17:22Z", "author": {"login": "iemejia"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNTUxNw==", "bodyText": "The dependency is part of the flink distribution:\n$ tar -tf flink-dist_2.12-1.11.2.jar | grep RocksDBStateBackend\norg/apache/flink/contrib/streaming/state/RocksDBStateBackend.class\norg/apache/flink/contrib/streaming/state/RocksDBStateBackendFactory.class\norg/apache/flink/contrib/streaming/state/RocksDBStateBackend$PriorityQueueStateType.class\n\nIf it wasn't, you could not configure the default state backend:\nhttps://ci.apache.org/projects/flink/flink-docs-stable/ops/state/state_backends.html#setting-default-state-backend", "url": "https://github.com/apache/beam/pull/13116#discussion_r512415517", "createdAt": "2020-10-27T04:52:10Z", "author": {"login": "tweise"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0NTI4OQ==", "bodyText": "RocksDB used to be not included in the dist. Good point, we can set it to provided then.", "url": "https://github.com/apache/beam/pull/13116#discussion_r519345289", "createdAt": "2020-11-08T10:45:35Z", "author": {"login": "mxm"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwOTU1Ng==", "bodyText": "I've verified that RocksDB is not included in any of the to-be-released jars.", "url": "https://github.com/apache/beam/pull/13116#discussion_r520609556", "createdAt": "2020-11-10T14:36:03Z", "author": {"login": "mxm"}, "path": "runners/flink/flink_runner.gradle", "diffHunk": "@@ -148,6 +148,8 @@ dependencies {\n   compile \"org.apache.flink:flink-java:$flink_version\"\n   compile \"org.apache.flink:flink-runtime_2.11:$flink_version\"\n   compile \"org.apache.flink:flink-streaming-java_2.11:$flink_version\"\n+  // RocksDB state backend\n+  compile \"org.apache.flink:flink-statebackend-rocksdb_2.11:$flink_version\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzg4NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTY2NTA1OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTo1ODowNVrOHjgG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDo0NjozMFrOHvSVlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA==", "bodyText": "Flink is headed in the direction where everything that is set on an environment becomes configurable (including the executor, FLIP-73). This change kind of goes in the opposite direction, increasing the amount of Flink pipeline options further. Should we look into the generic configuration mechanism instead, where it is really easy for the user to supply the Flink configuration (optionally inline, instead of via a separate file)?", "url": "https://github.com/apache/beam/pull/13116#discussion_r506988274", "createdAt": "2020-10-17T21:58:05Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NzI5OA==", "bodyText": "I think that's a great idea. We can start thinking about that on the mailing list and handle this via separate JIRA issue. This pipeline option can then be replaced by the generic configuration option.\nFor now, this pipeline option will fulfill a common request by Beam users to directly set the state backend without having to change the Flink configuration.", "url": "https://github.com/apache/beam/pull/13116#discussion_r507677298", "createdAt": "2020-10-19T11:38:19Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3Nzk2MQ==", "bodyText": "Plus, we want to be able to easily run Nexmark with RocksDB.", "url": "https://github.com/apache/beam/pull/13116#discussion_r507677961", "createdAt": "2020-10-19T11:39:38Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1ODgzOA==", "bodyText": "Is the intention of supporting this to be able to configure new Backends too? I mean like the new one by the RISE team? Is this the intended Nexmark use?", "url": "https://github.com/apache/beam/pull/13116#discussion_r509958838", "createdAt": "2020-10-22T08:03:30Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NTY2NQ==", "bodyText": "Yes, new state backends can be added as needed.", "url": "https://github.com/apache/beam/pull/13116#discussion_r511985665", "createdAt": "2020-10-26T14:06:21Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNTk2MQ==", "bodyText": "@iemejia why does Nexmark need the rocksdb state backend? That backend is required when state does not fit into the heap, otherwise it is almost always better to use filesystem.", "url": "https://github.com/apache/beam/pull/13116#discussion_r512415961", "createdAt": "2020-10-27T04:54:09Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0NTU1Nw==", "bodyText": "We may want to experiment with different state backends.", "url": "https://github.com/apache/beam/pull/13116#discussion_r519345557", "createdAt": "2020-11-08T10:46:30Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODI3NA=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQxMzY1OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/FlinkExecutionEnvironmentsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MDoyNFrOHltYPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MDoyNFrOHltYPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwMjg0NA==", "bodyText": "s/unkown/unknown", "url": "https://github.com/apache/beam/pull/13116#discussion_r509302844", "createdAt": "2020-10-21T13:50:24Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/FlinkExecutionEnvironmentsTest.java", "diffHunk": "@@ -464,6 +467,63 @@ public void shouldSetSavepointRestoreForRemoteStreaming() {\n     assertThat(getSavepointPath(sev), is(path));\n   }\n \n+  @Test\n+  public void shouldFailOnUnknownStateBackend() {\n+    FlinkPipelineOptions options = PipelineOptionsFactory.as(FlinkPipelineOptions.class);\n+    options.setStreaming(true);\n+    options.setStateBackend(\"unknown\");\n+    options.setStateBackendStoragePath(\"/path\");\n+\n+    assertThrows(\n+        \"State backend was set to 'unkown' but no storage path was provided.\",\n+        IllegalArgumentException.class,\n+        () ->\n+            FlinkExecutionEnvironments.createStreamExecutionEnvironment(\n+                options, Collections.emptyList()));\n+  }\n+\n+  @Test\n+  public void shouldFailOnNoStoragePathProvided() {\n+    FlinkPipelineOptions options = PipelineOptionsFactory.as(FlinkPipelineOptions.class);\n+    options.setStreaming(true);\n+    options.setStateBackend(\"unknown\");\n+\n+    assertThrows(\n+        \"State backend was set to 'unkown' but no storage path was provided.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQxOTQzOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/FlinkExecutionEnvironmentsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MToxM1rOHltb3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MToxM1rOHltb3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwMzc3NQ==", "bodyText": "s/unkown/unknown", "url": "https://github.com/apache/beam/pull/13116#discussion_r509303775", "createdAt": "2020-10-21T13:51:13Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/FlinkExecutionEnvironmentsTest.java", "diffHunk": "@@ -464,6 +467,63 @@ public void shouldSetSavepointRestoreForRemoteStreaming() {\n     assertThat(getSavepointPath(sev), is(path));\n   }\n \n+  @Test\n+  public void shouldFailOnUnknownStateBackend() {\n+    FlinkPipelineOptions options = PipelineOptionsFactory.as(FlinkPipelineOptions.class);\n+    options.setStreaming(true);\n+    options.setStateBackend(\"unknown\");\n+    options.setStateBackendStoragePath(\"/path\");\n+\n+    assertThrows(\n+        \"State backend was set to 'unkown' but no storage path was provided.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQ5NzI5OnYy", "diffSide": "RIGHT", "path": "website/www/site/layouts/shortcodes/flink_java_pipeline_options.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDowNDo0NFrOHluL8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDowNDo0NFrOHluL8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxNjA4Mw==", "bodyText": "ignorable nit: I will probably set the explicit values there as examples 'rocksdb' or 'filesystem' (or the classnames if we decide to change this).", "url": "https://github.com/apache/beam/pull/13116#discussion_r509316083", "createdAt": "2020-10-21T14:04:44Z", "author": {"login": "iemejia"}, "path": "website/www/site/layouts/shortcodes/flink_java_pipeline_options.html", "diffHunk": "@@ -157,9 +157,19 @@\n   <td>Shuts down sources which have been idle for the configured time of milliseconds. Once a source has been shut down, checkpointing is not possible anymore. Shutting down the sources eventually leads to pipeline shutdown (=Flink job finishes) once all input has been processed. Unless explicitly set, this will default to Long.MAX_VALUE when checkpointing is enabled and to 0 when checkpointing is disabled. See https://issues.apache.org/jira/browse/FLINK-2491 for progress on this issue.</td>\n   <td>Default: <code>-1</code></td>\n </tr>\n+<tr>\n+  <td><code>stateBackend</code></td>\n+  <td>State backend to store Beam's state. Use RocksDB or Filesystem. Defaults to heap.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDUxMDE4OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDowNzoxMFrOHluTxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDo0OTowN1rOHvSYpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxODA4NQ==", "bodyText": "We can do this env.setStateBackend out of the if/else block.", "url": "https://github.com/apache/beam/pull/13116#discussion_r509318085", "createdAt": "2020-10-21T14:07:10Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(\n+      FlinkPipelineOptions options, StreamExecutionEnvironment env) {\n+    if (options.getStateBackend() != null) {\n+      final String storagePath = options.getStateBackendStoragePath();\n+      Preconditions.checkArgument(\n+          storagePath != null,\n+          \"State backend was set to '%s' but no storage path was provided.\",\n+          options.getStateBackend());\n+\n+      final StateBackend stateBackend;\n+      if (options.getStateBackend().equalsIgnoreCase(\"rocksdb\")) {\n+        try {\n+          stateBackend = new RocksDBStateBackend(storagePath);\n+        } catch (IOException e) {\n+          throw new RuntimeException(\"Could not create RocksDB state backend.\", e);\n+        }\n+      } else if (options.getStateBackend().equalsIgnoreCase(\"filesystem\")) {\n+        stateBackend = new FsStateBackend(storagePath);\n+      } else {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Unknown state backend '%s'. Use 'rocksdb' or 'filesystem' or configure via Flink config file.\",\n+                options.getStateBackend()));\n+      }\n+      env.setStateBackend(stateBackend);\n+    } else if (options.getStateBackendFactory() != null) {\n+      // Legacy way of setting the state backend\n       final StateBackend stateBackend =\n           InstanceBuilder.ofType(FlinkStateBackendFactory.class)\n               .fromClass(options.getStateBackendFactory())\n               .build()\n               .createStateBackend(options);\n-      flinkStreamEnv.setStateBackend(stateBackend);\n+      env.setStateBackend(stateBackend);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0NjM0MQ==", "bodyText": "Actually we can't because the if blocks are non-exhaustive. If nothing is configured, we don't want to call `setStateBackend\u00b4.", "url": "https://github.com/apache/beam/pull/13116#discussion_r519346341", "createdAt": "2020-11-08T10:49:07Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(\n+      FlinkPipelineOptions options, StreamExecutionEnvironment env) {\n+    if (options.getStateBackend() != null) {\n+      final String storagePath = options.getStateBackendStoragePath();\n+      Preconditions.checkArgument(\n+          storagePath != null,\n+          \"State backend was set to '%s' but no storage path was provided.\",\n+          options.getStateBackend());\n+\n+      final StateBackend stateBackend;\n+      if (options.getStateBackend().equalsIgnoreCase(\"rocksdb\")) {\n+        try {\n+          stateBackend = new RocksDBStateBackend(storagePath);\n+        } catch (IOException e) {\n+          throw new RuntimeException(\"Could not create RocksDB state backend.\", e);\n+        }\n+      } else if (options.getStateBackend().equalsIgnoreCase(\"filesystem\")) {\n+        stateBackend = new FsStateBackend(storagePath);\n+      } else {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Unknown state backend '%s'. Use 'rocksdb' or 'filesystem' or configure via Flink config file.\",\n+                options.getStateBackend()));\n+      }\n+      env.setStateBackend(stateBackend);\n+    } else if (options.getStateBackendFactory() != null) {\n+      // Legacy way of setting the state backend\n       final StateBackend stateBackend =\n           InstanceBuilder.ofType(FlinkStateBackendFactory.class)\n               .fromClass(options.getStateBackendFactory())\n               .build()\n               .createStateBackend(options);\n-      flinkStreamEnv.setStateBackend(stateBackend);\n+      env.setStateBackend(stateBackend);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxODA4NQ=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDQyMzQ4OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODowMDowNlrOHmVStQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjowMDoxNlrOHvT-Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1Njc4OQ==", "bodyText": "Should not this be the classname of the backend? I am assuming that what we want to achieve here is to allow new backends (not available in Flink) to be configured too (see comment above)", "url": "https://github.com/apache/beam/pull/13116#discussion_r509956789", "createdAt": "2020-10-22T08:00:06Z", "author": {"login": "iemejia"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(\n+      FlinkPipelineOptions options, StreamExecutionEnvironment env) {\n+    if (options.getStateBackend() != null) {\n+      final String storagePath = options.getStateBackendStoragePath();\n+      Preconditions.checkArgument(\n+          storagePath != null,\n+          \"State backend was set to '%s' but no storage path was provided.\",\n+          options.getStateBackend());\n+\n+      final StateBackend stateBackend;\n+      if (options.getStateBackend().equalsIgnoreCase(\"rocksdb\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NTMzNw==", "bodyText": "There is no factory method available for state backends, they all have different constructors. We can't use the class name.", "url": "https://github.com/apache/beam/pull/13116#discussion_r511985337", "createdAt": "2020-10-26T14:05:54Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(\n+      FlinkPipelineOptions options, StreamExecutionEnvironment env) {\n+    if (options.getStateBackend() != null) {\n+      final String storagePath = options.getStateBackendStoragePath();\n+      Preconditions.checkArgument(\n+          storagePath != null,\n+          \"State backend was set to '%s' but no storage path was provided.\",\n+          options.getStateBackend());\n+\n+      final StateBackend stateBackend;\n+      if (options.getStateBackend().equalsIgnoreCase(\"rocksdb\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1Njc4OQ=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM3MjMxMA==", "bodyText": "I've reduced this to one call by adding a null check.", "url": "https://github.com/apache/beam/pull/13116#discussion_r519372310", "createdAt": "2020-11-08T12:00:16Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkExecutionEnvironments.java", "diffHunk": "@@ -259,28 +278,44 @@ static StreamExecutionEnvironment createStreamExecutionEnvironment(\n         options.setShutdownSourcesAfterIdleMs(0L);\n       }\n     }\n+  }\n \n-    applyLatencyTrackingInterval(flinkStreamEnv.getConfig(), options);\n-\n-    if (options.getAutoWatermarkInterval() != null) {\n-      flinkStreamEnv.getConfig().setAutoWatermarkInterval(options.getAutoWatermarkInterval());\n-    }\n-\n-    // State backend\n-    if (options.getStateBackendFactory() != null) {\n+  private static void configureStateBackend(\n+      FlinkPipelineOptions options, StreamExecutionEnvironment env) {\n+    if (options.getStateBackend() != null) {\n+      final String storagePath = options.getStateBackendStoragePath();\n+      Preconditions.checkArgument(\n+          storagePath != null,\n+          \"State backend was set to '%s' but no storage path was provided.\",\n+          options.getStateBackend());\n+\n+      final StateBackend stateBackend;\n+      if (options.getStateBackend().equalsIgnoreCase(\"rocksdb\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1Njc4OQ=="}, "originalCommit": {"oid": "760137709a9aa930fa9bec297db14917e2cc2e78"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2989, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}