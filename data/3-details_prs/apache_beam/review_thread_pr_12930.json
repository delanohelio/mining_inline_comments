{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTIxODM1", "number": 12930, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MDoyOVrOEvdUTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoyMDoxNlrOE60iRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4ODYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MDoyOVrOHkdDCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MDoyOVrOHkdDCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NjY5Nw==", "bodyText": "It seems like constructing ReadFromPubSub doesn't ask for with_context. Why do we add a new one here?", "url": "https://github.com/apache/beam/pull/12930#discussion_r507986697", "createdAt": "2020-10-19T18:50:29Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk5MjExOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MToxOVrOHkdFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MToxOVrOHkdFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NzIxNw==", "bodyText": "It also seems like there is no certain consumer for these additional kwargs. Why do we want them here?", "url": "https://github.com/apache/beam/pull/12930#discussion_r507987217", "createdAt": "2020-10-19T18:51:19Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool\n+      id_label=None,  # type: Optional[Union[List[str], str]]\n+      with_attributes=False,  # type: bool\n+      timestamp_attribute=None,  # type: Optional[Union[List[str], str]]\n+      **kwargs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjAwMDMzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MzoyN1rOHkdKGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1MzoyN1rOHkdKGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4ODUwNA==", "bodyText": "PubSubSource has the similar checking logic as here. We should be able to move this check.", "url": "https://github.com/apache/beam/pull/12930#discussion_r507988504", "createdAt": "2020-10-19T18:53:27Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool\n+      id_label=None,  # type: Optional[Union[List[str], str]]\n+      with_attributes=False,  # type: bool\n+      timestamp_attribute=None,  # type: Optional[Union[List[str], str]]\n+      **kwargs\n+  ):\n+    \"\"\"Initializes ``PubSubMultipleReader``.\n+\n+    Args:\n+      source_list: List of Cloud Pub/Sub topics or subscriptions. Topics in\n+        form \"projects/<project>/topics/<topic>\" and subscriptions in form\n+        \"projects/<project>/subscriptions/<subscription>\".\n+      with_context:\n+        True - output elements will be key-value pairs with the source as the\n+        key and the message as the value.\n+        False - output elements will be the messages.\n+      with_attributes:\n+        True - input elements will be :class:`~PubsubMessage` objects.\n+        False - input elements will be of type ``bytes`` (message data only).\n+      id_label: If set, will set an attribute for each Cloud Pub/Sub message\n+        with the given name and a unique value. This attribute can then be\n+        used in a ReadFromPubSub PTransform to deduplicate messages. If type\n+        is string, all sources will share the same value; if type is\n+        ``List``, each source will use the value of its index.\n+      timestamp_attribute: If set, will set an attribute for each Cloud\n+        Pub/Sub message with the given name and the message's publish time as\n+        the value. If type is ``string``, all sources will share the same\n+        value; if type List, each source will use the value of its index.\n+    \"\"\"\n+    self.source_list = source_list\n+    self.with_context = with_context\n+    self.with_attributes = with_attributes\n+    self._kwargs = kwargs\n+\n+    self._total_sources = len(source_list)\n+\n+    if isinstance(id_label, str) or id_label is None:\n+      self.id_label = [id_label] * self._total_sources\n+    else:\n+      if len(id_label) != self._total_sources:\n+        raise ValueError(\n+            'Length of \"id_label\" (%d) is not the same as length of '\n+            '\"sources\" (%d)' % (len(id_label), self._total_sources))\n+      self.id_label = id_label\n+\n+    if isinstance(timestamp_attribute, str) or timestamp_attribute is None:\n+      self.timestamp_attribute = [timestamp_attribute] * self._total_sources\n+    else:\n+      if len(timestamp_attribute) != self._total_sources:\n+        raise ValueError(\n+            'Length of \"timestamp_attribute\" (%d) is not the same as length of '\n+            '\"sources\" (%d)' % (len(timestamp_attribute), self._total_sources))\n+      self.timestamp_attribute = timestamp_attribute\n+\n+    for source in self.source_list:\n+      match_topic = re.match(TOPIC_REGEXP, source)\n+      match_subscription = re.match(SUBSCRIPTION_REGEXP, source)\n+\n+      if not (match_topic or match_subscription):\n+        raise ValueError(\n+            'PubSub source must be in the form \"projects/<project>/topics'\n+            '/<topic>\" or \"projects/<project>/subscription'\n+            '/<subscription>\" (got %r).' % source)\n+\n+    if 'topic' in self._kwargs:\n+      raise ValueError(\n+          'Topics and subscriptions should be in \"source_list\". '\n+          'Found topic %s' % self._kwargs['topic'])\n+\n+    if 'subscription' in self._kwargs:\n+      raise ValueError(\n+          'Subscriptions and topics should be in \"source_list\". '\n+          'Found subscription %s' % self._kwargs['subscription'])\n+\n+  def expand(self, pcol):\n+    sources_pcol = []\n+    for i, source in enumerate(self.source_list):\n+      id_label = self.id_label[i]\n+      timestamp_attribute = self.timestamp_attribute[i]\n+\n+      source_split = source.split('/')\n+      source_project = source_split[1]\n+      source_type = source_split[2]\n+      source_name = source_split[-1]\n+\n+      step_name_base = 'PubSub %s/project:%s' % (source_type, source_project)\n+      read_step_name = '%s/Read %s' % (step_name_base, source_name)\n+\n+      if source_type == 'topics':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjAxNTUzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1NzowMVrOHkdTNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo1NzowMVrOHkdTNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk5MDgzOA==", "bodyText": "Lots of logic here is checking input arguments, which we can get rid of by using a NamedTuple to represent a reading PubSub configuration instead of using a list for each configurable attributes.", "url": "https://github.com/apache/beam/pull/12930#discussion_r507990838", "createdAt": "2020-10-19T18:57:01Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool\n+      id_label=None,  # type: Optional[Union[List[str], str]]\n+      with_attributes=False,  # type: bool\n+      timestamp_attribute=None,  # type: Optional[Union[List[str], str]]\n+      **kwargs\n+  ):\n+    \"\"\"Initializes ``PubSubMultipleReader``.\n+\n+    Args:\n+      source_list: List of Cloud Pub/Sub topics or subscriptions. Topics in\n+        form \"projects/<project>/topics/<topic>\" and subscriptions in form\n+        \"projects/<project>/subscriptions/<subscription>\".\n+      with_context:\n+        True - output elements will be key-value pairs with the source as the\n+        key and the message as the value.\n+        False - output elements will be the messages.\n+      with_attributes:\n+        True - input elements will be :class:`~PubsubMessage` objects.\n+        False - input elements will be of type ``bytes`` (message data only).\n+      id_label: If set, will set an attribute for each Cloud Pub/Sub message\n+        with the given name and a unique value. This attribute can then be\n+        used in a ReadFromPubSub PTransform to deduplicate messages. If type\n+        is string, all sources will share the same value; if type is\n+        ``List``, each source will use the value of its index.\n+      timestamp_attribute: If set, will set an attribute for each Cloud\n+        Pub/Sub message with the given name and the message's publish time as\n+        the value. If type is ``string``, all sources will share the same\n+        value; if type List, each source will use the value of its index.\n+    \"\"\"\n+    self.source_list = source_list\n+    self.with_context = with_context\n+    self.with_attributes = with_attributes\n+    self._kwargs = kwargs\n+\n+    self._total_sources = len(source_list)\n+\n+    if isinstance(id_label, str) or id_label is None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg1NzMyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNDoyN1rOHyUAlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxMzoyOVrOH1ykKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxODY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  source_list,  # type: List[PubSubSourceDescriptor]\n          \n          \n            \n                 pubsub_source_descriptors,  # type: List[PubSubSourceDescriptor]", "url": "https://github.com/apache/beam/pull/12930#discussion_r522518679", "createdAt": "2020-11-13T00:04:27Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[PubSubSourceDescriptor]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660cdf58791da53c08fd723042351ebee469ec74"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2NTAzNA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12930#discussion_r526165034", "createdAt": "2020-11-18T15:13:29Z", "author": {"login": "InigoSJ"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[PubSubSourceDescriptor]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxODY3OQ=="}, "originalCommit": {"oid": "660cdf58791da53c08fd723042351ebee469ec74"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2MDM3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNTo1OVrOHyUCag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNTo1OVrOHyUCag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTE0Ng==", "bodyText": "It seems like the source here will be the full path to the topic/subscriptions. Please add more pydoc to describe what the source str should be.", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519146", "createdAt": "2020-11-13T00:05:59Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660cdf58791da53c08fd723042351ebee469ec74"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2MTEyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNjozMVrOHyUC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNjozMVrOHyUC-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTI4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              subscriptions and/or topics.\"\"\"\n          \n          \n            \n              ``PubSubSourceDescriptor``.\"\"\"", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519288", "createdAt": "2020-11-13T00:06:31Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660cdf58791da53c08fd723042351ebee469ec74"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2MjY5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNzowOVrOHyUD1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowNzowOVrOHyUD1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTUwOA==", "bodyText": "Please add a code snippet about how to use this transform and highlight the benefit of using this transform compared to the ReadFromPubSub.", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519508", "createdAt": "2020-11-13T00:07:09Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660cdf58791da53c08fd723042351ebee469ec74"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2NTA5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDowODo0NVrOHyUFWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxNDo1MlrOH1yoqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTg5OQ==", "bodyText": "Instead of using split, can we use re.match(TOPIC_REGEXP, source.source) and re.match(SUBSCRIPTION_REGEXP, source.source) as well?", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519899", "createdAt": "2020-11-13T00:08:45Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[PubSubSourceDescriptor]\n+      with_attributes=False,  # type: bool\n+  ):\n+    \"\"\"Initializes ``PubSubMultipleReader``.\n+\n+    Args:\n+      source_list: List of Cloud Pub/Sub topics or subscriptions of type\n+      `~PubSubSourceDescriptor`.\n+      with_attributes:\n+        True - input elements will be :class:`~PubsubMessage` objects.\n+        False - input elements will be of type ``bytes`` (message data only).\n+    \"\"\"\n+    self.source_list = source_list\n+    self.with_attributes = with_attributes\n+\n+    for source in self.source_list:\n+      match_topic = re.match(TOPIC_REGEXP, source.source)\n+      match_subscription = re.match(SUBSCRIPTION_REGEXP, source.source)\n+\n+      if not (match_topic or match_subscription):\n+        raise ValueError(\n+            'PubSub source must be in the form \"projects/<project>/topics'\n+            '/<topic>\" or \"projects/<project>/subscription'\n+            '/<subscription>\" (got %r).' % source.source)\n+\n+  def expand(self, pcol):\n+    sources_pcol = []\n+    for source in self.source_list:\n+      source_split = source.source.split('/')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660cdf58791da53c08fd723042351ebee469ec74"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2NjE4NA==", "bodyText": "I used a new regex (PUBSUB_DESCRIPTOR_REGEXP) that is valid for both, so I could use match.group to check if topic or subscription, let me know what you think.", "url": "https://github.com/apache/beam/pull/12930#discussion_r526166184", "createdAt": "2020-11-18T15:14:52Z", "author": {"login": "InigoSJ"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[PubSubSourceDescriptor]\n+      with_attributes=False,  # type: bool\n+  ):\n+    \"\"\"Initializes ``PubSubMultipleReader``.\n+\n+    Args:\n+      source_list: List of Cloud Pub/Sub topics or subscriptions of type\n+      `~PubSubSourceDescriptor`.\n+      with_attributes:\n+        True - input elements will be :class:`~PubsubMessage` objects.\n+        False - input elements will be of type ``bytes`` (message data only).\n+    \"\"\"\n+    self.source_list = source_list\n+    self.with_attributes = with_attributes\n+\n+    for source in self.source_list:\n+      match_topic = re.match(TOPIC_REGEXP, source.source)\n+      match_subscription = re.match(SUBSCRIPTION_REGEXP, source.source)\n+\n+      if not (match_topic or match_subscription):\n+        raise ValueError(\n+            'PubSub source must be in the form \"projects/<project>/topics'\n+            '/<topic>\" or \"projects/<project>/subscription'\n+            '/<subscription>\" (got %r).' % source.source)\n+\n+  def expand(self, pcol):\n+    sources_pcol = []\n+    for source in self.source_list:\n+      source_split = source.source.split('/')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTg5OQ=="}, "originalCommit": {"oid": "660cdf58791da53c08fd723042351ebee469ec74"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTEzNjA2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoyMDoxNlrOH2Hl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDoyMDoxNlrOH2Hl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwOTUzNQ==", "bodyText": "Please move this into the MultipleReadFromPubSub  class py doc.", "url": "https://github.com/apache/beam/pull/12930#discussion_r526509535", "createdAt": "2020-11-19T00:20:16Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -20,6 +20,27 @@\n Cloud Pub/Sub sources and sinks are currently supported only in streaming\n pipelines, during remote execution.\n \n+Multiple Read from Pub/Sub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c33e97f16dd378fc93dfe745b439a22066b4d51a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3242, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}