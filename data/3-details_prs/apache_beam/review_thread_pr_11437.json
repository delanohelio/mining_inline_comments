{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTc4OTMz", "number": 11437, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjowNDowOVrODy9VMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjowODo0MlrODy9b4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzYwMjQzOnYy", "diffSide": "RIGHT", "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjowNDowOVrOGHT-jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMTowNjoyN1rOGH_jSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMDUyNw==", "bodyText": "Probably change to \"retryTransientErrors\" ? I'm afraid many users will just copy and use this pipeline as a template and will keep this entry in their production pipelines.", "url": "https://github.com/apache/beam/pull/11437#discussion_r410320527", "createdAt": "2020-04-17T16:04:09Z", "author": {"login": "chamikaramj"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java", "diffHunk": "@@ -753,35 +750,93 @@ public static void main(String[] args) {\n       // [START CustomSessionWindow5]\n \n       PCollection<TableRow> p =\n-          Pipeline.create()\n-              .apply(\n-                  \"Create data\",\n-                  Create.timestamped(\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 12).set(\"gap\", 5),\n-                          new Instant()),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"desktop\").set(\"score\", 4), new Instant()),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", -3).set(\"gap\", 5),\n-                          new Instant().plus(2000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 2).set(\"gap\", 5),\n-                          new Instant().plus(9000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 7).set(\"gap\", 5),\n-                          new Instant().plus(12000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"desktop\").set(\"score\", 10),\n-                          new Instant().plus(12000))));\n+              Pipeline.create()\n+                      .apply(\n+                              \"Create data\",\n+                              Create.timestamped(\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 12).set(\"gap\", 5),\n+                                              new Instant()),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"desktop\").set(\"score\", 4), new Instant()),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", -3).set(\"gap\", 5),\n+                                              new Instant().plus(2000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 2).set(\"gap\", 5),\n+                                              new Instant().plus(9000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 7).set(\"gap\", 5),\n+                                              new Instant().plus(12000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"desktop\").set(\"score\", 10),\n+                                              new Instant().plus(12000))));\n       // [END CustomSessionWindow5]\n \n       // [START CustomSessionWindow6]\n       p.apply(\n-          \"Window into sessions\",\n-          Window.<TableRow>into(\n-              DynamicSessions.withDefaultGapDuration(Duration.standardSeconds(10))));\n+              \"Window into sessions\",\n+              Window.<TableRow>into(\n+                      DynamicSessions.withDefaultGapDuration(Duration.standardSeconds(10))));\n       // [END CustomSessionWindow6]\n+    }\n+\n+    public static class DeadLetterBigQuery {\n+      public static void deadletter(String[] args) {\n+        // [START BigQueryIODeadLetter]\n+        // Create pipeline\n+        PipelineOptions options =\n+                PipelineOptionsFactory.fromArgs(args).withValidation().as(BigQueryOptions.class);\n+\n+        Pipeline p = Pipeline.create(options);\n+\n+        // Create a bug by writing the 2nd value as null. The API will correctly\n+        // throw an error when trying to insert a null value into a REQUIRED field.\n+        WriteResult result =\n+                p.apply(Create.of(1, 2))\n+                        .apply(\n+                                BigQueryIO.<Integer>write()\n+                                        .withSchema(\n+                                                new TableSchema()\n+                                                        .setFields(\n+                                                                com.google.common.collect.ImmutableList.of(\n+                                                                        new TableFieldSchema()\n+                                                                                .setName(\"num\")\n+                                                                                .setType(\"INTEGER\")\n+                                                                                .setMode(\"REQUIRED\"))))\n+                                        .to(\"Test.dummyTable\")\n+                                        .withFormatFunction(x -> new TableRow().set(\"num\", (x == 2) ? null : x))\n+                                        .withFailedInsertRetryPolicy(InsertRetryPolicy.neverRetry())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e15b7e6dc32f02e92cd721875fa6b18fe593afd"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzNDQ0Mg==", "bodyText": "Fixed.", "url": "https://github.com/apache/beam/pull/11437#discussion_r411034442", "createdAt": "2020-04-20T01:06:27Z", "author": {"login": "rezarokni"}, "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java", "diffHunk": "@@ -753,35 +750,93 @@ public static void main(String[] args) {\n       // [START CustomSessionWindow5]\n \n       PCollection<TableRow> p =\n-          Pipeline.create()\n-              .apply(\n-                  \"Create data\",\n-                  Create.timestamped(\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 12).set(\"gap\", 5),\n-                          new Instant()),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"desktop\").set(\"score\", 4), new Instant()),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", -3).set(\"gap\", 5),\n-                          new Instant().plus(2000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 2).set(\"gap\", 5),\n-                          new Instant().plus(9000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 7).set(\"gap\", 5),\n-                          new Instant().plus(12000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"desktop\").set(\"score\", 10),\n-                          new Instant().plus(12000))));\n+              Pipeline.create()\n+                      .apply(\n+                              \"Create data\",\n+                              Create.timestamped(\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 12).set(\"gap\", 5),\n+                                              new Instant()),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"desktop\").set(\"score\", 4), new Instant()),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", -3).set(\"gap\", 5),\n+                                              new Instant().plus(2000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 2).set(\"gap\", 5),\n+                                              new Instant().plus(9000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 7).set(\"gap\", 5),\n+                                              new Instant().plus(12000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"desktop\").set(\"score\", 10),\n+                                              new Instant().plus(12000))));\n       // [END CustomSessionWindow5]\n \n       // [START CustomSessionWindow6]\n       p.apply(\n-          \"Window into sessions\",\n-          Window.<TableRow>into(\n-              DynamicSessions.withDefaultGapDuration(Duration.standardSeconds(10))));\n+              \"Window into sessions\",\n+              Window.<TableRow>into(\n+                      DynamicSessions.withDefaultGapDuration(Duration.standardSeconds(10))));\n       // [END CustomSessionWindow6]\n+    }\n+\n+    public static class DeadLetterBigQuery {\n+      public static void deadletter(String[] args) {\n+        // [START BigQueryIODeadLetter]\n+        // Create pipeline\n+        PipelineOptions options =\n+                PipelineOptionsFactory.fromArgs(args).withValidation().as(BigQueryOptions.class);\n+\n+        Pipeline p = Pipeline.create(options);\n+\n+        // Create a bug by writing the 2nd value as null. The API will correctly\n+        // throw an error when trying to insert a null value into a REQUIRED field.\n+        WriteResult result =\n+                p.apply(Create.of(1, 2))\n+                        .apply(\n+                                BigQueryIO.<Integer>write()\n+                                        .withSchema(\n+                                                new TableSchema()\n+                                                        .setFields(\n+                                                                com.google.common.collect.ImmutableList.of(\n+                                                                        new TableFieldSchema()\n+                                                                                .setName(\"num\")\n+                                                                                .setType(\"INTEGER\")\n+                                                                                .setMode(\"REQUIRED\"))))\n+                                        .to(\"Test.dummyTable\")\n+                                        .withFormatFunction(x -> new TableRow().set(\"num\", (x == 2) ? null : x))\n+                                        .withFailedInsertRetryPolicy(InsertRetryPolicy.neverRetry())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMDUyNw=="}, "originalCommit": {"oid": "3e15b7e6dc32f02e92cd721875fa6b18fe593afd"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzYxOTU0OnYy", "diffSide": "RIGHT", "path": "website/src/documentation/patterns/bigqueryio.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjowODo0MlrOGHUJSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMTowNjozNFrOGH_jWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMzI3NQ==", "bodyText": "Let's mention retry policies here and mention that that dictates which failures will be added to the deadletter queue and whether we will retry.", "url": "https://github.com/apache/beam/pull/11437#discussion_r410323275", "createdAt": "2020-04-17T16:08:42Z", "author": {"login": "chamikaramj"}, "path": "website/src/documentation/patterns/bigqueryio.md", "diffHunk": "@@ -0,0 +1,37 @@\n+---\n+layout: section\n+title: \"BigQuery patterns\"\n+section_menu: section-menu/documentation.html\n+permalink: /documentation/patterns/bigqueryio/\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Google BigQuery patterns\n+\n+The samples on this page show you common patterns for use with BigQueryIO.\n+\n+## BigQueryIO deadletter pattern\n+In production systems, it is useful to implement the deadletter pattern with BigQueryIO outputting any elements which had errors during processing by BigQueryIO into another PCollection for further processing. \n+\n+When using `STREAMING_INSERTS`  you can use the `WriteResult` object to access a `PCollection` with the `TableRows` that failed to be inserted into BigQuery. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e15b7e6dc32f02e92cd721875fa6b18fe593afd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzNDQ1Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/beam/pull/11437#discussion_r411034456", "createdAt": "2020-04-20T01:06:34Z", "author": {"login": "rezarokni"}, "path": "website/src/documentation/patterns/bigqueryio.md", "diffHunk": "@@ -0,0 +1,37 @@\n+---\n+layout: section\n+title: \"BigQuery patterns\"\n+section_menu: section-menu/documentation.html\n+permalink: /documentation/patterns/bigqueryio/\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Google BigQuery patterns\n+\n+The samples on this page show you common patterns for use with BigQueryIO.\n+\n+## BigQueryIO deadletter pattern\n+In production systems, it is useful to implement the deadletter pattern with BigQueryIO outputting any elements which had errors during processing by BigQueryIO into another PCollection for further processing. \n+\n+When using `STREAMING_INSERTS`  you can use the `WriteResult` object to access a `PCollection` with the `TableRows` that failed to be inserted into BigQuery. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMzI3NQ=="}, "originalCommit": {"oid": "3e15b7e6dc32f02e92cd721875fa6b18fe593afd"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1286, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}