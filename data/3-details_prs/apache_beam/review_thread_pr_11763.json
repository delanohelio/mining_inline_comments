{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTY1NjQ1", "number": 11763, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTowMjo1NVrOD-Y_Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToxNDozMlrOD-ZL0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzQ3Njc4OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTowMjo1NVrOGYdtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzozNTo1OVrOGZJqZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwNTc3OA==", "bodyText": "Stylistically, I'd move this inline into the if instread of putting into the variable.", "url": "https://github.com/apache/beam/pull/11763#discussion_r428305778", "createdAt": "2020-05-20T21:02:55Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -0,0 +1,212 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package offsetrange\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"testing\"\n+)\n+\n+// TestRestriction_EvenSplits tests various splits and checks that they all\n+// follow the contract for EvenSplits. This means that all restrictions are\n+// evenly split, that each restriction has at least one element, and that each\n+// element is present in the split restrictions.\n+func TestRestriction_EvenSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tnum  int64\n+\t}{\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: 4},\n+\t\t{rest: Restriction{Start: 21, End: 42}, num: 4},\n+\t\t{rest: Restriction{Start: 0, End: 5}, num: 10},\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: -1},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], splits = %v)\",\n+\t\t\ttest.rest.Start, test.rest.End, test.num), func(t *testing.T) {\n+\t\t\tr := test.rest\n+\n+\t\t\t// Get the minimum size that a split restriction can be. Max size\n+\t\t\t// should be min + 1. This way we can check the size of each split.\n+\t\t\tnum := test.num\n+\t\t\tif num <= 1 {\n+\t\t\t\tnum = 1\n+\t\t\t}\n+\t\t\tmin := (r.End - r.Start) / num\n+\n+\t\t\tsplits := r.EvenSplits(test.num)\n+\t\t\tprevEnd := r.Start\n+\t\t\tfor _, split := range splits {\n+\t\t\t\tsize := split.End - split.Start\n+\t\t\t\t// Check: Each restriction has at least 1 element.\n+\t\t\t\tif size == 0 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] is empty, size must be greater than 0.\",\n+\t\t\t\t\t\tsplit.Start, split.End)\n+\t\t\t\t}\n+\t\t\t\t// Check: Restrictions are evenly split.\n+\t\t\t\tif size != min && size != min+1 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n+\t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n+\t\t\t\t}\n+\t\t\t\t// Check: All elements are still in a split restrictions. This\n+\t\t\t\t// logic assumes that the splits are returned in order which\n+\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n+\t\t\t\t// with the assumption.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestTracker_TryClaim validates both success and failure cases for TryClaim.\n+func TestTracker_TryClaim(t *testing.T) {\n+\t// Test that TryClaim works as expected when called correctly.\n+\tt.Run(\"Correctness\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 1, 2, 3}},\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{15, 20, 50}},\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af92f3adc2024eb8f4421d0223602e23236add9b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNTg5NQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11763#discussion_r429025895", "createdAt": "2020-05-22T03:35:59Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -0,0 +1,212 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package offsetrange\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"testing\"\n+)\n+\n+// TestRestriction_EvenSplits tests various splits and checks that they all\n+// follow the contract for EvenSplits. This means that all restrictions are\n+// evenly split, that each restriction has at least one element, and that each\n+// element is present in the split restrictions.\n+func TestRestriction_EvenSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tnum  int64\n+\t}{\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: 4},\n+\t\t{rest: Restriction{Start: 21, End: 42}, num: 4},\n+\t\t{rest: Restriction{Start: 0, End: 5}, num: 10},\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: -1},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], splits = %v)\",\n+\t\t\ttest.rest.Start, test.rest.End, test.num), func(t *testing.T) {\n+\t\t\tr := test.rest\n+\n+\t\t\t// Get the minimum size that a split restriction can be. Max size\n+\t\t\t// should be min + 1. This way we can check the size of each split.\n+\t\t\tnum := test.num\n+\t\t\tif num <= 1 {\n+\t\t\t\tnum = 1\n+\t\t\t}\n+\t\t\tmin := (r.End - r.Start) / num\n+\n+\t\t\tsplits := r.EvenSplits(test.num)\n+\t\t\tprevEnd := r.Start\n+\t\t\tfor _, split := range splits {\n+\t\t\t\tsize := split.End - split.Start\n+\t\t\t\t// Check: Each restriction has at least 1 element.\n+\t\t\t\tif size == 0 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] is empty, size must be greater than 0.\",\n+\t\t\t\t\t\tsplit.Start, split.End)\n+\t\t\t\t}\n+\t\t\t\t// Check: Restrictions are evenly split.\n+\t\t\t\tif size != min && size != min+1 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n+\t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n+\t\t\t\t}\n+\t\t\t\t// Check: All elements are still in a split restrictions. This\n+\t\t\t\t// logic assumes that the splits are returned in order which\n+\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n+\t\t\t\t// with the assumption.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestTracker_TryClaim validates both success and failure cases for TryClaim.\n+func TestTracker_TryClaim(t *testing.T) {\n+\t// Test that TryClaim works as expected when called correctly.\n+\tt.Run(\"Correctness\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 1, 2, 3}},\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{15, 20, 50}},\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwNTc3OA=="}, "originalCommit": {"oid": "af92f3adc2024eb8f4421d0223602e23236add9b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzUwMzg2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToxMjozMlrOGYd-vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzozNjowMlrOGZJqcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMDIwNg==", "bodyText": "Same comment here.", "url": "https://github.com/apache/beam/pull/11763#discussion_r428310206", "createdAt": "2020-05-20T21:12:32Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -0,0 +1,212 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package offsetrange\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"testing\"\n+)\n+\n+// TestRestriction_EvenSplits tests various splits and checks that they all\n+// follow the contract for EvenSplits. This means that all restrictions are\n+// evenly split, that each restriction has at least one element, and that each\n+// element is present in the split restrictions.\n+func TestRestriction_EvenSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tnum  int64\n+\t}{\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: 4},\n+\t\t{rest: Restriction{Start: 21, End: 42}, num: 4},\n+\t\t{rest: Restriction{Start: 0, End: 5}, num: 10},\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: -1},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], splits = %v)\",\n+\t\t\ttest.rest.Start, test.rest.End, test.num), func(t *testing.T) {\n+\t\t\tr := test.rest\n+\n+\t\t\t// Get the minimum size that a split restriction can be. Max size\n+\t\t\t// should be min + 1. This way we can check the size of each split.\n+\t\t\tnum := test.num\n+\t\t\tif num <= 1 {\n+\t\t\t\tnum = 1\n+\t\t\t}\n+\t\t\tmin := (r.End - r.Start) / num\n+\n+\t\t\tsplits := r.EvenSplits(test.num)\n+\t\t\tprevEnd := r.Start\n+\t\t\tfor _, split := range splits {\n+\t\t\t\tsize := split.End - split.Start\n+\t\t\t\t// Check: Each restriction has at least 1 element.\n+\t\t\t\tif size == 0 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] is empty, size must be greater than 0.\",\n+\t\t\t\t\t\tsplit.Start, split.End)\n+\t\t\t\t}\n+\t\t\t\t// Check: Restrictions are evenly split.\n+\t\t\t\tif size != min && size != min+1 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n+\t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n+\t\t\t\t}\n+\t\t\t\t// Check: All elements are still in a split restrictions. This\n+\t\t\t\t// logic assumes that the splits are returned in order which\n+\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n+\t\t\t\t// with the assumption.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestTracker_TryClaim validates both success and failure cases for TryClaim.\n+func TestTracker_TryClaim(t *testing.T) {\n+\t// Test that TryClaim works as expected when called correctly.\n+\tt.Run(\"Correctness\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 1, 2, 3}},\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{15, 20, 50}},\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// If TryClaim returns false, check if there was an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() {\n+\t\t\t\t\t\tt.Fatalf(\"tracker claiming %v failed, error: %v\", pos, rt.GetError())\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t})\n+\t\t}\n+\t})\n+\n+\t// Test that each invalid error case actually results in an error.\n+\tt.Run(\"Errors\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t// Claiming backwards.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 2, 1}},\n+\t\t\t// Claiming before start of restriction.\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{8}},\n+\t\t\t// Claiming after tracker signalled to stop.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4, 5}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// Finish successfully if we got an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() && rt.GetError() != nil {\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tt.Fatal(\"tracker did not fail on invalid claim\")\n+\t\t\t})\n+\t\t}\n+\t})\n+}\n+\n+// TestTracker_TrySplit tests that TrySplit follows its contract, meaning that\n+// splits don't lose any elements, split fractions are clamped to 0 or 1, and\n+// that TrySplit always splits at the nearest integer greater than the given\n+// fraction.\n+func TestTracker_TrySplit(t *testing.T) {\n+\ttests := []struct {\n+\t\trest     Restriction\n+\t\tclaimed  int64\n+\t\tfraction float64\n+\t\tsplitPt  int64 // Index where we want the split to happen.\n+\t}{\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 1},\n+\t\t\tclaimed:  0,\n+\t\t\tfraction: 0.5,\n+\t\t\tsplitPt:  1,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 5},\n+\t\t\tclaimed:  0,\n+\t\t\tfraction: 0.5,\n+\t\t\tsplitPt:  3,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 10},\n+\t\t\tclaimed:  5,\n+\t\t\tfraction: 0.5,\n+\t\t\tsplitPt:  8,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 10},\n+\t\t\tclaimed:  5,\n+\t\t\tfraction: -0.5,\n+\t\t\tsplitPt:  5,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 10},\n+\t\t\tclaimed:  5,\n+\t\t\tfraction: 1.5,\n+\t\t\tsplitPt:  10,\n+\t\t},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(split at %v of [%v, %v])\",\n+\t\t\ttest.fraction, test.claimed, test.rest.End), func(t *testing.T) {\n+\t\t\trt := NewTracker(test.rest)\n+\t\t\tok := rt.TryClaim(test.claimed)\n+\t\t\tif !ok {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af92f3adc2024eb8f4421d0223602e23236add9b"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNTkwNw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11763#discussion_r429025907", "createdAt": "2020-05-22T03:36:02Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -0,0 +1,212 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package offsetrange\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"testing\"\n+)\n+\n+// TestRestriction_EvenSplits tests various splits and checks that they all\n+// follow the contract for EvenSplits. This means that all restrictions are\n+// evenly split, that each restriction has at least one element, and that each\n+// element is present in the split restrictions.\n+func TestRestriction_EvenSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tnum  int64\n+\t}{\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: 4},\n+\t\t{rest: Restriction{Start: 21, End: 42}, num: 4},\n+\t\t{rest: Restriction{Start: 0, End: 5}, num: 10},\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: -1},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], splits = %v)\",\n+\t\t\ttest.rest.Start, test.rest.End, test.num), func(t *testing.T) {\n+\t\t\tr := test.rest\n+\n+\t\t\t// Get the minimum size that a split restriction can be. Max size\n+\t\t\t// should be min + 1. This way we can check the size of each split.\n+\t\t\tnum := test.num\n+\t\t\tif num <= 1 {\n+\t\t\t\tnum = 1\n+\t\t\t}\n+\t\t\tmin := (r.End - r.Start) / num\n+\n+\t\t\tsplits := r.EvenSplits(test.num)\n+\t\t\tprevEnd := r.Start\n+\t\t\tfor _, split := range splits {\n+\t\t\t\tsize := split.End - split.Start\n+\t\t\t\t// Check: Each restriction has at least 1 element.\n+\t\t\t\tif size == 0 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] is empty, size must be greater than 0.\",\n+\t\t\t\t\t\tsplit.Start, split.End)\n+\t\t\t\t}\n+\t\t\t\t// Check: Restrictions are evenly split.\n+\t\t\t\tif size != min && size != min+1 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n+\t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n+\t\t\t\t}\n+\t\t\t\t// Check: All elements are still in a split restrictions. This\n+\t\t\t\t// logic assumes that the splits are returned in order which\n+\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n+\t\t\t\t// with the assumption.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestTracker_TryClaim validates both success and failure cases for TryClaim.\n+func TestTracker_TryClaim(t *testing.T) {\n+\t// Test that TryClaim works as expected when called correctly.\n+\tt.Run(\"Correctness\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 1, 2, 3}},\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{15, 20, 50}},\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// If TryClaim returns false, check if there was an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() {\n+\t\t\t\t\t\tt.Fatalf(\"tracker claiming %v failed, error: %v\", pos, rt.GetError())\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t})\n+\t\t}\n+\t})\n+\n+\t// Test that each invalid error case actually results in an error.\n+\tt.Run(\"Errors\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t// Claiming backwards.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 2, 1}},\n+\t\t\t// Claiming before start of restriction.\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{8}},\n+\t\t\t// Claiming after tracker signalled to stop.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4, 5}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// Finish successfully if we got an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() && rt.GetError() != nil {\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tt.Fatal(\"tracker did not fail on invalid claim\")\n+\t\t\t})\n+\t\t}\n+\t})\n+}\n+\n+// TestTracker_TrySplit tests that TrySplit follows its contract, meaning that\n+// splits don't lose any elements, split fractions are clamped to 0 or 1, and\n+// that TrySplit always splits at the nearest integer greater than the given\n+// fraction.\n+func TestTracker_TrySplit(t *testing.T) {\n+\ttests := []struct {\n+\t\trest     Restriction\n+\t\tclaimed  int64\n+\t\tfraction float64\n+\t\tsplitPt  int64 // Index where we want the split to happen.\n+\t}{\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 1},\n+\t\t\tclaimed:  0,\n+\t\t\tfraction: 0.5,\n+\t\t\tsplitPt:  1,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 5},\n+\t\t\tclaimed:  0,\n+\t\t\tfraction: 0.5,\n+\t\t\tsplitPt:  3,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 10},\n+\t\t\tclaimed:  5,\n+\t\t\tfraction: 0.5,\n+\t\t\tsplitPt:  8,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 10},\n+\t\t\tclaimed:  5,\n+\t\t\tfraction: -0.5,\n+\t\t\tsplitPt:  5,\n+\t\t},\n+\t\t{\n+\t\t\trest:     Restriction{Start: 0, End: 10},\n+\t\t\tclaimed:  5,\n+\t\t\tfraction: 1.5,\n+\t\t\tsplitPt:  10,\n+\t\t},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(split at %v of [%v, %v])\",\n+\t\t\ttest.fraction, test.claimed, test.rest.End), func(t *testing.T) {\n+\t\t\trt := NewTracker(test.rest)\n+\t\t\tok := rt.TryClaim(test.claimed)\n+\t\t\tif !ok {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMDIwNg=="}, "originalCommit": {"oid": "af92f3adc2024eb8f4421d0223602e23236add9b"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzUwOTI5OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMToxNDozMlrOGYeCWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzozNjo1OVrOGZJrHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMTEyOA==", "bodyText": "Is the splitPt here the \"last element that should be processed\" or \"the first element that shouldn't be processed?\"\nSaid another way, is the index represented by splitPt part of the Primary or part of the Residual?", "url": "https://github.com/apache/beam/pull/11763#discussion_r428311128", "createdAt": "2020-05-20T21:14:32Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -0,0 +1,212 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package offsetrange\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"testing\"\n+)\n+\n+// TestRestriction_EvenSplits tests various splits and checks that they all\n+// follow the contract for EvenSplits. This means that all restrictions are\n+// evenly split, that each restriction has at least one element, and that each\n+// element is present in the split restrictions.\n+func TestRestriction_EvenSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tnum  int64\n+\t}{\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: 4},\n+\t\t{rest: Restriction{Start: 21, End: 42}, num: 4},\n+\t\t{rest: Restriction{Start: 0, End: 5}, num: 10},\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: -1},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], splits = %v)\",\n+\t\t\ttest.rest.Start, test.rest.End, test.num), func(t *testing.T) {\n+\t\t\tr := test.rest\n+\n+\t\t\t// Get the minimum size that a split restriction can be. Max size\n+\t\t\t// should be min + 1. This way we can check the size of each split.\n+\t\t\tnum := test.num\n+\t\t\tif num <= 1 {\n+\t\t\t\tnum = 1\n+\t\t\t}\n+\t\t\tmin := (r.End - r.Start) / num\n+\n+\t\t\tsplits := r.EvenSplits(test.num)\n+\t\t\tprevEnd := r.Start\n+\t\t\tfor _, split := range splits {\n+\t\t\t\tsize := split.End - split.Start\n+\t\t\t\t// Check: Each restriction has at least 1 element.\n+\t\t\t\tif size == 0 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] is empty, size must be greater than 0.\",\n+\t\t\t\t\t\tsplit.Start, split.End)\n+\t\t\t\t}\n+\t\t\t\t// Check: Restrictions are evenly split.\n+\t\t\t\tif size != min && size != min+1 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n+\t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n+\t\t\t\t}\n+\t\t\t\t// Check: All elements are still in a split restrictions. This\n+\t\t\t\t// logic assumes that the splits are returned in order which\n+\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n+\t\t\t\t// with the assumption.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestTracker_TryClaim validates both success and failure cases for TryClaim.\n+func TestTracker_TryClaim(t *testing.T) {\n+\t// Test that TryClaim works as expected when called correctly.\n+\tt.Run(\"Correctness\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 1, 2, 3}},\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{15, 20, 50}},\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// If TryClaim returns false, check if there was an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() {\n+\t\t\t\t\t\tt.Fatalf(\"tracker claiming %v failed, error: %v\", pos, rt.GetError())\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t})\n+\t\t}\n+\t})\n+\n+\t// Test that each invalid error case actually results in an error.\n+\tt.Run(\"Errors\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t// Claiming backwards.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 2, 1}},\n+\t\t\t// Claiming before start of restriction.\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{8}},\n+\t\t\t// Claiming after tracker signalled to stop.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4, 5}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// Finish successfully if we got an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() && rt.GetError() != nil {\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tt.Fatal(\"tracker did not fail on invalid claim\")\n+\t\t\t})\n+\t\t}\n+\t})\n+}\n+\n+// TestTracker_TrySplit tests that TrySplit follows its contract, meaning that\n+// splits don't lose any elements, split fractions are clamped to 0 or 1, and\n+// that TrySplit always splits at the nearest integer greater than the given\n+// fraction.\n+func TestTracker_TrySplit(t *testing.T) {\n+\ttests := []struct {\n+\t\trest     Restriction\n+\t\tclaimed  int64\n+\t\tfraction float64\n+\t\tsplitPt  int64 // Index where we want the split to happen.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af92f3adc2024eb8f4421d0223602e23236add9b"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMzExOA==", "bodyText": "Reading into the test further, it looks like \"last element of primary\" which I'm pretty sure is the correct thing, so this just means the comment should be updated to reflect that.", "url": "https://github.com/apache/beam/pull/11763#discussion_r428313118", "createdAt": "2020-05-20T21:18:59Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -0,0 +1,212 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package offsetrange\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"testing\"\n+)\n+\n+// TestRestriction_EvenSplits tests various splits and checks that they all\n+// follow the contract for EvenSplits. This means that all restrictions are\n+// evenly split, that each restriction has at least one element, and that each\n+// element is present in the split restrictions.\n+func TestRestriction_EvenSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tnum  int64\n+\t}{\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: 4},\n+\t\t{rest: Restriction{Start: 21, End: 42}, num: 4},\n+\t\t{rest: Restriction{Start: 0, End: 5}, num: 10},\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: -1},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], splits = %v)\",\n+\t\t\ttest.rest.Start, test.rest.End, test.num), func(t *testing.T) {\n+\t\t\tr := test.rest\n+\n+\t\t\t// Get the minimum size that a split restriction can be. Max size\n+\t\t\t// should be min + 1. This way we can check the size of each split.\n+\t\t\tnum := test.num\n+\t\t\tif num <= 1 {\n+\t\t\t\tnum = 1\n+\t\t\t}\n+\t\t\tmin := (r.End - r.Start) / num\n+\n+\t\t\tsplits := r.EvenSplits(test.num)\n+\t\t\tprevEnd := r.Start\n+\t\t\tfor _, split := range splits {\n+\t\t\t\tsize := split.End - split.Start\n+\t\t\t\t// Check: Each restriction has at least 1 element.\n+\t\t\t\tif size == 0 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] is empty, size must be greater than 0.\",\n+\t\t\t\t\t\tsplit.Start, split.End)\n+\t\t\t\t}\n+\t\t\t\t// Check: Restrictions are evenly split.\n+\t\t\t\tif size != min && size != min+1 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n+\t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n+\t\t\t\t}\n+\t\t\t\t// Check: All elements are still in a split restrictions. This\n+\t\t\t\t// logic assumes that the splits are returned in order which\n+\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n+\t\t\t\t// with the assumption.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestTracker_TryClaim validates both success and failure cases for TryClaim.\n+func TestTracker_TryClaim(t *testing.T) {\n+\t// Test that TryClaim works as expected when called correctly.\n+\tt.Run(\"Correctness\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 1, 2, 3}},\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{15, 20, 50}},\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// If TryClaim returns false, check if there was an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() {\n+\t\t\t\t\t\tt.Fatalf(\"tracker claiming %v failed, error: %v\", pos, rt.GetError())\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t})\n+\t\t}\n+\t})\n+\n+\t// Test that each invalid error case actually results in an error.\n+\tt.Run(\"Errors\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t// Claiming backwards.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 2, 1}},\n+\t\t\t// Claiming before start of restriction.\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{8}},\n+\t\t\t// Claiming after tracker signalled to stop.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4, 5}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// Finish successfully if we got an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() && rt.GetError() != nil {\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tt.Fatal(\"tracker did not fail on invalid claim\")\n+\t\t\t})\n+\t\t}\n+\t})\n+}\n+\n+// TestTracker_TrySplit tests that TrySplit follows its contract, meaning that\n+// splits don't lose any elements, split fractions are clamped to 0 or 1, and\n+// that TrySplit always splits at the nearest integer greater than the given\n+// fraction.\n+func TestTracker_TrySplit(t *testing.T) {\n+\ttests := []struct {\n+\t\trest     Restriction\n+\t\tclaimed  int64\n+\t\tfraction float64\n+\t\tsplitPt  int64 // Index where we want the split to happen.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMTEyOA=="}, "originalCommit": {"oid": "af92f3adc2024eb8f4421d0223602e23236add9b"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNjA3OQ==", "bodyText": "The range is actually half-closed range, so that split is the \"first element that shouldn't be processed\" of the primary, and the \"first element to process\" in the residual. But agreed, specified in the comment.", "url": "https://github.com/apache/beam/pull/11763#discussion_r429026079", "createdAt": "2020-05-22T03:36:59Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -0,0 +1,212 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package offsetrange\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"testing\"\n+)\n+\n+// TestRestriction_EvenSplits tests various splits and checks that they all\n+// follow the contract for EvenSplits. This means that all restrictions are\n+// evenly split, that each restriction has at least one element, and that each\n+// element is present in the split restrictions.\n+func TestRestriction_EvenSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tnum  int64\n+\t}{\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: 4},\n+\t\t{rest: Restriction{Start: 21, End: 42}, num: 4},\n+\t\t{rest: Restriction{Start: 0, End: 5}, num: 10},\n+\t\t{rest: Restriction{Start: 0, End: 21}, num: -1},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], splits = %v)\",\n+\t\t\ttest.rest.Start, test.rest.End, test.num), func(t *testing.T) {\n+\t\t\tr := test.rest\n+\n+\t\t\t// Get the minimum size that a split restriction can be. Max size\n+\t\t\t// should be min + 1. This way we can check the size of each split.\n+\t\t\tnum := test.num\n+\t\t\tif num <= 1 {\n+\t\t\t\tnum = 1\n+\t\t\t}\n+\t\t\tmin := (r.End - r.Start) / num\n+\n+\t\t\tsplits := r.EvenSplits(test.num)\n+\t\t\tprevEnd := r.Start\n+\t\t\tfor _, split := range splits {\n+\t\t\t\tsize := split.End - split.Start\n+\t\t\t\t// Check: Each restriction has at least 1 element.\n+\t\t\t\tif size == 0 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] is empty, size must be greater than 0.\",\n+\t\t\t\t\t\tsplit.Start, split.End)\n+\t\t\t\t}\n+\t\t\t\t// Check: Restrictions are evenly split.\n+\t\t\t\tif size != min && size != min+1 {\n+\t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n+\t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n+\t\t\t\t}\n+\t\t\t\t// Check: All elements are still in a split restrictions. This\n+\t\t\t\t// logic assumes that the splits are returned in order which\n+\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n+\t\t\t\t// with the assumption.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestTracker_TryClaim validates both success and failure cases for TryClaim.\n+func TestTracker_TryClaim(t *testing.T) {\n+\t// Test that TryClaim works as expected when called correctly.\n+\tt.Run(\"Correctness\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 1, 2, 3}},\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{15, 20, 50}},\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// If TryClaim returns false, check if there was an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() {\n+\t\t\t\t\t\tt.Fatalf(\"tracker claiming %v failed, error: %v\", pos, rt.GetError())\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t})\n+\t\t}\n+\t})\n+\n+\t// Test that each invalid error case actually results in an error.\n+\tt.Run(\"Errors\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\trest   Restriction\n+\t\t\tclaims []int64\n+\t\t}{\n+\t\t\t// Claiming backwards.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{0, 2, 1}},\n+\t\t\t// Claiming before start of restriction.\n+\t\t\t{rest: Restriction{Start: 10, End: 40}, claims: []int64{8}},\n+\t\t\t// Claiming after tracker signalled to stop.\n+\t\t\t{rest: Restriction{Start: 0, End: 3}, claims: []int64{4, 5}},\n+\t\t}\n+\t\tfor _, test := range tests {\n+\t\t\ttest := test\n+\t\t\tt.Run(fmt.Sprintf(\"(rest[%v, %v], claims = %v)\",\n+\t\t\t\ttest.rest.Start, test.rest.End, test.claims), func(t *testing.T) {\n+\t\t\t\trt := NewTracker(test.rest)\n+\t\t\t\tfor _, pos := range test.claims {\n+\t\t\t\t\tok := rt.TryClaim(pos)\n+\t\t\t\t\t// Finish successfully if we got an error.\n+\t\t\t\t\tif !ok && !rt.IsDone() && rt.GetError() != nil {\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tt.Fatal(\"tracker did not fail on invalid claim\")\n+\t\t\t})\n+\t\t}\n+\t})\n+}\n+\n+// TestTracker_TrySplit tests that TrySplit follows its contract, meaning that\n+// splits don't lose any elements, split fractions are clamped to 0 or 1, and\n+// that TrySplit always splits at the nearest integer greater than the given\n+// fraction.\n+func TestTracker_TrySplit(t *testing.T) {\n+\ttests := []struct {\n+\t\trest     Restriction\n+\t\tclaimed  int64\n+\t\tfraction float64\n+\t\tsplitPt  int64 // Index where we want the split to happen.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMTEyOA=="}, "originalCommit": {"oid": "af92f3adc2024eb8f4421d0223602e23236add9b"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3827, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}