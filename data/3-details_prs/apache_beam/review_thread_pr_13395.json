{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0ODUxMjQz", "number": 13395, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoyODoyMlrOE7s4LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNzoyNFrOE_uYUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDM2NzE2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoyODoyMlrOH3ftjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDowODo0M1rOH4O-0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MzI5NA==", "bodyText": "Should we pass the queries in as well, or is it part of fhirStore?", "url": "https://github.com/apache/beam/pull/13395#discussion_r527953294", "createdAt": "2020-11-20T20:28:22Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -215,6 +215,16 @@ public static Read readResources() {\n     return new Read();\n   }\n \n+  /**\n+   * Search resources from a PCollection\n+   *\n+   * @return the search\n+   * @see Search\n+   */\n+  public static Search searchResources(String fhirStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cedaed15134216b919b1ae5c42ba487b8faf421"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2MTQyNg==", "bodyText": "I just realized that your case is totally different from what I thought, I expect a single query is used to generate the input to the pipeline, while it looks like we are doing something in reverse here, the search parameters are from the input. Can you confirm this is indeed the use case you have in mind? Please feel free to reach out to me offline.", "url": "https://github.com/apache/beam/pull/13395#discussion_r527961426", "createdAt": "2020-11-20T20:46:55Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -215,6 +215,16 @@ public static Read readResources() {\n     return new Read();\n   }\n \n+  /**\n+   * Search resources from a PCollection\n+   *\n+   * @return the search\n+   * @see Search\n+   */\n+  public static Search searchResources(String fhirStore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MzI5NA=="}, "originalCommit": {"oid": "1cedaed15134216b919b1ae5c42ba487b8faf421"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcyNzc2Mg==", "bodyText": "I'll reply in an email offline.", "url": "https://github.com/apache/beam/pull/13395#discussion_r528727762", "createdAt": "2020-11-23T14:08:43Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -215,6 +215,16 @@ public static Read readResources() {\n     return new Read();\n   }\n \n+  /**\n+   * Search resources from a PCollection\n+   *\n+   * @return the search\n+   * @see Search\n+   */\n+  public static Search searchResources(String fhirStore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MzI5NA=="}, "originalCommit": {"oid": "1cedaed15134216b919b1ae5c42ba487b8faf421"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDM3NzUzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDozMTo0NVrOH3fzww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDowODoyMlrOH4O95g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NDg4Mw==", "bodyText": "nit: maybe remove this comment? Doesn't seem to be very informative.", "url": "https://github.com/apache/beam/pull/13395#discussion_r527954883", "createdAt": "2020-11-20T20:31:45Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1398,206 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, Object>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      /** The Pct. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cedaed15134216b919b1ae5c42ba487b8faf421"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcyNzUyNg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13395#discussion_r528727526", "createdAt": "2020-11-23T14:08:22Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1398,206 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, Object>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      /** The Pct. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NDg4Mw=="}, "originalCommit": {"oid": "1cedaed15134216b919b1ae5c42ba487b8faf421"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDQwOTAzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDo0MzowOVrOH3gG4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDowODoyOFrOH4O-Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTc3Ng==", "bodyText": "You will need to handle pagination here, see how this is handled for ListMessages: https://github.com/apache/beam/blob/master/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java#L682.", "url": "https://github.com/apache/beam/pull/13395#discussion_r527959776", "createdAt": "2020-11-20T20:43:09Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "diffHunk": "@@ -545,6 +529,26 @@ public HttpBody readFhirResource(String resourceId) throws IOException {\n     return client.projects().locations().datasets().fhirStores().fhir().read(resourceId).execute();\n   }\n \n+  @Override\n+  public HttpBody searchFhirResource(\n+          String fhirStore,\n+          String resourceType,\n+          @Nullable Map<String, Object> parameters)\n+          throws IOException {\n+    SearchResourcesRequest request = new SearchResourcesRequest().setResourceType(resourceType);\n+    Search search = client\n+            .projects()\n+            .locations()\n+            .datasets()\n+            .fhirStores()\n+            .fhir()\n+            .search(fhirStore, request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cedaed15134216b919b1ae5c42ba487b8faf421"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcyNzU5MA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13395#discussion_r528727590", "createdAt": "2020-11-23T14:08:28Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java", "diffHunk": "@@ -545,6 +529,26 @@ public HttpBody readFhirResource(String resourceId) throws IOException {\n     return client.projects().locations().datasets().fhirStores().fhir().read(resourceId).execute();\n   }\n \n+  @Override\n+  public HttpBody searchFhirResource(\n+          String fhirStore,\n+          String resourceType,\n+          @Nullable Map<String, Object> parameters)\n+          throws IOException {\n+    SearchResourcesRequest request = new SearchResourcesRequest().setResourceType(resourceType);\n+    Search search = client\n+            .projects()\n+            .locations()\n+            .datasets()\n+            .fhirStores()\n+            .fhir()\n+            .search(fhirStore, request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTc3Ng=="}, "originalCommit": {"oid": "1cedaed15134216b919b1ae5c42ba487b8faf421"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjcwOTI4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1NToxM1rOH5Q1zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo0Nzo0NlrOH5Spmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNjc5Nw==", "bodyText": "nit: end with a period.", "url": "https://github.com/apache/beam/pull/13395#discussion_r529806797", "createdAt": "2020-11-24T18:55:13Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -215,6 +227,16 @@ public static Read readResources() {\n     return new Read();\n   }\n \n+  /**\n+   * Search resources from a PCollection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzNjQ0Mg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13395#discussion_r529836442", "createdAt": "2020-11-24T19:47:46Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -215,6 +227,16 @@ public static Read readResources() {\n     return new Read();\n   }\n \n+  /**\n+   * Search resources from a PCollection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNjc5Nw=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjcxMTMzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1NTo0M1rOH5Q3CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo0Nzo1NVrOH5Sp2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNzExMw==", "bodyText": "nit: you can remove these if they are obvious. Same for other comments.", "url": "https://github.com/apache/beam/pull/13395#discussion_r529807113", "createdAt": "2020-11-24T18:55:43Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -215,6 +227,16 @@ public static Read readResources() {\n     return new Read();\n   }\n \n+  /**\n+   * Search resources from a PCollection\n+   *\n+   * @return the search", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzNjUwNA==", "bodyText": "Keeping this one for consistency with other methods, removed some other comments.", "url": "https://github.com/apache/beam/pull/13395#discussion_r529836504", "createdAt": "2020-11-24T19:47:55Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -215,6 +227,16 @@ public static Read readResources() {\n     return new Read();\n   }\n \n+  /**\n+   * Search resources from a PCollection\n+   *\n+   * @return the search", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNzExMw=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjcxNzQwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1NzoyMFrOH5Q63Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowODozNVrOH58yqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODA5Mw==", "bodyText": "nit: You can let IntelliJ format these long lines.", "url": "https://github.com/apache/beam/pull/13395#discussion_r529808093", "createdAt": "2020-11-24T18:57:20Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzNjY5Mw==", "bodyText": "I ran a reformat and it changed many lines other than the ones I'm touching, hope this is ok.", "url": "https://github.com/apache/beam/pull/13395#discussion_r529836693", "createdAt": "2020-11-24T19:48:14Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODA5Mw=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjg5MA==", "bodyText": "It should be OK.", "url": "https://github.com/apache/beam/pull/13395#discussion_r530526890", "createdAt": "2020-11-25T17:08:35Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODA5Mw=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjcyMDU3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1ODoxM1rOH5Q82w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1MzowOVrOH6ANhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODYwMw==", "bodyText": "Please only catch the exceptions you expect to handle.", "url": "https://github.com/apache/beam/pull/13395#discussion_r529808603", "createdAt": "2020-11-24T18:58:13Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzNjczMA==", "bodyText": "Would that mean that unhandled exceptions / errors won't be logged?", "url": "https://github.com/apache/beam/pull/13395#discussion_r529836730", "createdAt": "2020-11-24T19:48:19Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODYwMw=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNzY5Nw==", "bodyText": "They will be handled by code that knows how to handle them. For example, the code here probably should not be responsible for an OutOfMemoryError.", "url": "https://github.com/apache/beam/pull/13395#discussion_r530527697", "createdAt": "2020-11-25T17:09:45Z", "author": {"login": "lastomato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODYwMw=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MjkxOQ==", "bodyText": "Ah, makes sense, done. Sorry Java newbie here!", "url": "https://github.com/apache/beam/pull/13395#discussion_r530582919", "createdAt": "2020-11-25T18:53:09Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODYwMw=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTg3NDk3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIOTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1ODo1OFrOH9fB-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzo1ODowOVrOH9zMMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzMzU5NQ==", "bodyText": "Note that this test has failed (https://ci-beam.apache.org/job/beam_PreCommit_Java_Commit/14889/testReport/junit/org.apache.beam.sdk.io.gcp.healthcare/FhirIOTest/test_FhirIO_failedSearches/) - please fix", "url": "https://github.com/apache/beam/pull/13395#discussion_r534233595", "createdAt": "2020-12-02T14:58:58Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIOTest.java", "diffHunk": "@@ -58,6 +56,25 @@ public void test_FhirIO_failedReads() {\n     pipeline.run();\n   }\n \n+  @Test\n+  public void test_FhirIO_failedSearches() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ac2a19bcc94982d5813d6d03c318bb82a5228e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2Mzg4OQ==", "bodyText": "Done, looks like it's passing now (I'm not sure why Java PreCommit is marked as failed but there's no test failures when I open the details page, only warnings?)", "url": "https://github.com/apache/beam/pull/13395#discussion_r534563889", "createdAt": "2020-12-02T23:58:09Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIOTest.java", "diffHunk": "@@ -58,6 +56,25 @@ public void test_FhirIO_failedReads() {\n     pipeline.run();\n   }\n \n+  @Test\n+  public void test_FhirIO_failedSearches() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzMzU5NQ=="}, "originalCommit": {"oid": "f5ac2a19bcc94982d5813d6d03c318bb82a5228e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjU1NjM1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNzoyNFrOH9lpKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMTowOFrOH-kgPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MTkzMQ==", "bodyText": "I had recommended using async calls. In this case, I see that the calls happen within the iterator. I think this is fine as it is. I have a question though:\nUsually, will one element often produce one result from the iterator? Or usually more than one? I see that in lines 1608:1609, for the first iteration, there will be two calls to Fhir (one in hasNext, and one in next). Is it possible to try to reduce this to one?\nI expect your connector to have a bottleneck on IO. I would recommend you add a distribution-type metric to track time spent on IO.", "url": "https://github.com/apache/beam/pull/13395#discussion_r534341931", "createdAt": "2020-12-02T17:17:24Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {\n+            failedSearches.inc();\n+            LOG.warn(\n+                    String.format(\n+                            \"Error search FHIR messages writing to Dead Letter \"\n+                                    + \"Queue. Cause: %s Stack Trace: %s\",\n+                            e.getMessage(), Throwables.getStackTraceAsString(e)));\n+            context.output(FhirIO.Search.DEAD_LETTER, HealthcareIOError.of(this.fhirStore.toString(), e));\n+          }\n+        }\n+\n+        private String searchResources(HealthcareApiClient client, String fhirStore, String resourceType,\n+                                       @Nullable Map<String, String> parameters)\n+                throws IllegalArgumentException {\n+          long startTime = System.currentTimeMillis();\n+\n+          HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator iter =\n+                  new HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator(\n+                          client, fhirStore, resourceType, parameters);\n+          JsonArray result = new JsonArray();\n+          while (iter.hasNext()) {\n+            result.addAll(iter.next());\n+          }\n+          this.successfulSearches.inc();\n+          return result.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2MzkwMA==", "bodyText": "I think for our use case, usually only one result will be produced from the iterator. Definitely makes sense to avoid one of the two calls, done.\nI assume you are talking about adding metrics on our end, but lmk if I misunderstood and there's anything to be added here. Thanks!", "url": "https://github.com/apache/beam/pull/13395#discussion_r534563900", "createdAt": "2020-12-02T23:58:11Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {\n+            failedSearches.inc();\n+            LOG.warn(\n+                    String.format(\n+                            \"Error search FHIR messages writing to Dead Letter \"\n+                                    + \"Queue. Cause: %s Stack Trace: %s\",\n+                            e.getMessage(), Throwables.getStackTraceAsString(e)));\n+            context.output(FhirIO.Search.DEAD_LETTER, HealthcareIOError.of(this.fhirStore.toString(), e));\n+          }\n+        }\n+\n+        private String searchResources(HealthcareApiClient client, String fhirStore, String resourceType,\n+                                       @Nullable Map<String, String> parameters)\n+                throws IllegalArgumentException {\n+          long startTime = System.currentTimeMillis();\n+\n+          HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator iter =\n+                  new HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator(\n+                          client, fhirStore, resourceType, parameters);\n+          JsonArray result = new JsonArray();\n+          while (iter.hasNext()) {\n+            result.addAll(iter.next());\n+          }\n+          this.successfulSearches.inc();\n+          return result.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MTkzMQ=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1Nzg2NQ==", "bodyText": "in this case I mean something like:\nprivate Distribution searchLatency =\n            Metrics.distribution(SearchResourcesFn.class, \"search-latency-or-something-ms\");\n.....\n    long startTime = System.currentTimeMillis();\n    ...\n    result.addAll(iter.next());\n    while (iter.hasNext()) {\n      result.addAll(iter.next());\n    }\n    searchLatency.update(System.currentTimeMillis() - startTime);  // Report latency to Dataflow monitoring for later inspection", "url": "https://github.com/apache/beam/pull/13395#discussion_r535357865", "createdAt": "2020-12-03T15:53:47Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {\n+            failedSearches.inc();\n+            LOG.warn(\n+                    String.format(\n+                            \"Error search FHIR messages writing to Dead Letter \"\n+                                    + \"Queue. Cause: %s Stack Trace: %s\",\n+                            e.getMessage(), Throwables.getStackTraceAsString(e)));\n+            context.output(FhirIO.Search.DEAD_LETTER, HealthcareIOError.of(this.fhirStore.toString(), e));\n+          }\n+        }\n+\n+        private String searchResources(HealthcareApiClient client, String fhirStore, String resourceType,\n+                                       @Nullable Map<String, String> parameters)\n+                throws IllegalArgumentException {\n+          long startTime = System.currentTimeMillis();\n+\n+          HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator iter =\n+                  new HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator(\n+                          client, fhirStore, resourceType, parameters);\n+          JsonArray result = new JsonArray();\n+          while (iter.hasNext()) {\n+            result.addAll(iter.next());\n+          }\n+          this.successfulSearches.inc();\n+          return result.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MTkzMQ=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTgzOQ==", "bodyText": "Ah got it, thank you for the pointers! Done.", "url": "https://github.com/apache/beam/pull/13395#discussion_r535371839", "createdAt": "2020-12-03T16:11:08Z", "author": {"login": "janeliulwq"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/FhirIO.java", "diffHunk": "@@ -1388,4 +1410,208 @@ public void deidentify(ProcessContext context)\n       }\n     }\n   }\n+\n+  /** The type Search. */\n+  public static class Search extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+    private static final Logger LOG = LoggerFactory.getLogger(Search.class);\n+\n+    private final ValueProvider<String> fhirStore;\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(ValueProvider<String> fhirStore) {\n+      this.fhirStore = fhirStore;\n+    }\n+\n+    /**\n+     * Instantiates a new Search.\n+     *\n+     * @param fhirStore the fhir store\n+     */\n+    Search(String fhirStore) {\n+      this.fhirStore = StaticValueProvider.of(fhirStore);\n+    }\n+\n+    /** The type Result. */\n+    public static class Result implements POutput, PInput {\n+      private PCollection<String> resources;\n+\n+      private PCollection<HealthcareIOError<String>> failedSearches;\n+      PCollectionTuple pct;\n+\n+      /**\n+       * Create FhirIO.Search.Result form PCollectionTuple with OUT and DEAD_LETTER tags.\n+       *\n+       * @param pct the pct\n+       * @return the search result\n+       * @throws IllegalArgumentException the illegal argument exception\n+       */\n+      static FhirIO.Search.Result of(PCollectionTuple pct) throws IllegalArgumentException {\n+        if (pct.getAll()\n+                .keySet()\n+                .containsAll((Collection<?>) TupleTagList.of(OUT).and(DEAD_LETTER))) {\n+          return new FhirIO.Search.Result(pct);\n+        } else {\n+          throw new IllegalArgumentException(\n+                  \"The PCollection tuple must have the FhirIO.Search.OUT \"\n+                          + \"and FhirIO.Search.DEAD_LETTER tuple tags\");\n+        }\n+      }\n+\n+      private Result(PCollectionTuple pct) {\n+        this.pct = pct;\n+        this.resources = pct.get(OUT);\n+        this.failedSearches =\n+                pct.get(DEAD_LETTER).setCoder(HealthcareIOErrorCoder.of(StringUtf8Coder.of()));\n+      }\n+\n+      /**\n+       * Gets failed searches.\n+       *\n+       * @return the failed searches\n+       */\n+      public PCollection<HealthcareIOError<String>> getFailedSearches() {\n+        return failedSearches;\n+      }\n+\n+      /**\n+       * Gets resources.\n+       *\n+       * @return the resources\n+       */\n+      public PCollection<String> getResources() {\n+        return resources;\n+      }\n+\n+      @Override\n+      public Pipeline getPipeline() {\n+        return this.pct.getPipeline();\n+      }\n+\n+      @Override\n+      public Map<TupleTag<?>, PValue> expand() {\n+        return ImmutableMap.of(OUT, resources);\n+      }\n+\n+      @Override\n+      public void finishSpecifyingOutput(\n+              String transformName, PInput input, PTransform<?, ?> transform) {}\n+    }\n+\n+    /** The tag for the main output of Fhir Messages. */\n+    public static final TupleTag<String> OUT = new TupleTag<String>() {};\n+    /** The tag for the deadletter output of Fhir Messages. */\n+    public static final TupleTag<HealthcareIOError<String>> DEAD_LETTER =\n+            new TupleTag<HealthcareIOError<String>>() {};\n+\n+    @Override\n+    public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> input) {\n+      return input.apply(\"Fetch Fhir messages\", new SearchResourcesJsonString(this.fhirStore));\n+    }\n+\n+    /**\n+     * DoFn to fetch resources from an Google Cloud Healthcare FHIR store based on search request\n+     *\n+     * <p>This DoFn consumes a {@link PCollection} of search requests consisting of resource type\n+     * and search parameters, and fetches all matching resources based on the search criteria and\n+     * will output a {@link PCollectionTuple} which contains the output and dead-letter {@link\n+     * PCollection}*.\n+     *\n+     * <p>The {@link PCollectionTuple} output will contain the following {@link PCollection}:\n+     *\n+     * <ul>\n+     *   <li>{@link FhirIO.Search#OUT} - Contains all {@link PCollection} records successfully search\n+     *       from the Fhir store.\n+     *   <li>{@link FhirIO.Search#DEAD_LETTER} - Contains all {@link PCollection} of {@link\n+     *       HealthcareIOError}* of failed searches from the Fhir store, with\n+     *       error message and stacktrace.\n+     * </ul>\n+     */\n+    static class SearchResourcesJsonString\n+            extends PTransform<PCollection<KV<String, Map<String, String>>>, FhirIO.Search.Result> {\n+\n+      private final ValueProvider<String> fhirStore;\n+\n+      /** Instantiates a new Search Fhir resources DoFn. */\n+      public SearchResourcesJsonString(ValueProvider<String> fhirStore) {\n+        this.fhirStore = fhirStore;\n+      }\n+\n+      @Override\n+      public FhirIO.Search.Result expand(PCollection<KV<String, Map<String, String>>> resourceIds) {\n+        return new FhirIO.Search.Result(\n+                resourceIds.apply(\n+                        ParDo.of(new SearchResourcesFn(this.fhirStore))\n+                                .withOutputTags(FhirIO.Search.OUT, TupleTagList.of(FhirIO.Search.DEAD_LETTER))));\n+      }\n+\n+      /** DoFn for searching messages from the Fhir store with error handling. */\n+      static class SearchResourcesFn extends DoFn<KV<String, Map<String, String>>, String> {\n+\n+        private Counter failedSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"failed-fhir-searches\");\n+        private static final Logger LOG = LoggerFactory.getLogger(SearchResourcesFn.class);\n+        private final Counter successfulSearches =\n+                Metrics.counter(SearchResourcesFn.class, \"successful-fhir-searches\");\n+        private HealthcareApiClient client;\n+        private final ValueProvider<String> fhirStore;\n+\n+        /** Instantiates a new Fhir resources search fn. */\n+        SearchResourcesFn(ValueProvider<String> fhirStore) {\n+          this.fhirStore = fhirStore;\n+        }\n+\n+        /**\n+         * Instantiate healthcare client.\n+         *\n+         * @throws IOException the io exception\n+         */\n+        @Setup\n+        public void instantiateHealthcareClient() throws IOException {\n+          this.client = new HttpHealthcareApiClient();\n+        }\n+\n+        /**\n+         * Process element.\n+         *\n+         * @param context the context\n+         */\n+        @ProcessElement\n+        public void processElement(ProcessContext context) {\n+          KV<String, Map<String, String>> elementValues = context.element();\n+          try {\n+            context.output(searchResources(\n+                    this.client, this.fhirStore.toString(), elementValues.getKey(), elementValues.getValue()));\n+          } catch (Exception e) {\n+            failedSearches.inc();\n+            LOG.warn(\n+                    String.format(\n+                            \"Error search FHIR messages writing to Dead Letter \"\n+                                    + \"Queue. Cause: %s Stack Trace: %s\",\n+                            e.getMessage(), Throwables.getStackTraceAsString(e)));\n+            context.output(FhirIO.Search.DEAD_LETTER, HealthcareIOError.of(this.fhirStore.toString(), e));\n+          }\n+        }\n+\n+        private String searchResources(HealthcareApiClient client, String fhirStore, String resourceType,\n+                                       @Nullable Map<String, String> parameters)\n+                throws IllegalArgumentException {\n+          long startTime = System.currentTimeMillis();\n+\n+          HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator iter =\n+                  new HttpHealthcareApiClient.FhirResourcePages.FhirResourcePagesIterator(\n+                          client, fhirStore, resourceType, parameters);\n+          JsonArray result = new JsonArray();\n+          while (iter.hasNext()) {\n+            result.addAll(iter.next());\n+          }\n+          this.successfulSearches.inc();\n+          return result.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MTkzMQ=="}, "originalCommit": {"oid": "ba1ef19f6215ca496fae9003b17b55f027bf9e35"}, "originalPosition": 260}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2616, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}