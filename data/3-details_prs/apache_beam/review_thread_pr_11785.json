{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjQ4MDA5", "number": 11785, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo0MDozMlrOEBiWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzowMDowM1rOEBilHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDQ2NzQ5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/doctests.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo0MDozMlrOGdcY_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowMjoyOFrOGeCA4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNzAzNg==", "bodyText": "The doctest docs say that exc_msg != None indicates an example is expected to generate an exception matching the description. In practice I guess it really means the example is allowed to throw such an exception?", "url": "https://github.com/apache/beam/pull/11785#discussion_r433527036", "createdAt": "2020-06-01T22:40:32Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -242,6 +242,11 @@ def __init__(self, env, use_beam=True, **kwargs):\n         **kwargs)\n \n   def run(self, test, **kwargs):\n+    for example in test.examples:\n+      if example.exc_msg is None:\n+        # Don't fail doctests that raise this error.\n+        example.exc_msg = (\n+            'apache_beam.dataframe.frame_base.WontImplementError: ...')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587a18bdd5aa4f8b9b597d702fed94c74894660e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MzQ1Ng==", "bodyText": "Correct, but I only know that from reading the code. (The implementation doesn't have any ability to customize this, e.g. the OutputChecker doesn't get invoked on exceptional case.) I decided depending on this was preferable to copying and modifying the implementation.", "url": "https://github.com/apache/beam/pull/11785#discussion_r434143456", "createdAt": "2020-06-02T20:02:28Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -242,6 +242,11 @@ def __init__(self, env, use_beam=True, **kwargs):\n         **kwargs)\n \n   def run(self, test, **kwargs):\n+    for example in test.examples:\n+      if example.exc_msg is None:\n+        # Don't fail doctests that raise this error.\n+        example.exc_msg = (\n+            'apache_beam.dataframe.frame_base.WontImplementError: ...')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNzAzNg=="}, "originalCommit": {"oid": "587a18bdd5aa4f8b9b597d702fed94c74894660e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDUwNTkxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzowMDowM1rOGdcwsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzowMDowM1rOGdcwsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMzEwNA==", "bodyText": "Can you make this message more descriptive?", "url": "https://github.com/apache/beam/pull/11785#discussion_r433533104", "createdAt": "2020-06-01T23:00:03Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -24,7 +24,8 @@\n \n @frame_base.DeferredFrame._register_for(pd.Series)\n class DeferredSeries(frame_base.DeferredFrame):\n-  pass\n+  def __array__(self, dtype=None):\n+    raise frame_base.WontImplementError('non-deferred')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587a18bdd5aa4f8b9b597d702fed94c74894660e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3849, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}