{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDM2NTA1", "number": 11335, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjozMToxN1rODxaSaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjozNzozNFrODxaXtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTM3NTEzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjozMToxN1rOGE3kXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjowMDowNVrOGFihbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NzkxOA==", "bodyText": "Seems this one should happen after too...", "url": "https://github.com/apache/beam/pull/11335#discussion_r407757918", "createdAt": "2020-04-13T22:31:17Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -110,22 +110,27 @@ class DataflowRunner(PipelineRunner):\n \n   # Imported here to avoid circular dependencies.\n   # TODO: Remove the apache_beam.pipeline dependency in CreatePTransformOverride\n+  from apache_beam.runners.dataflow.ptransform_overrides import CombineValuesPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import CreatePTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import ReadPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import JrhReadPTransformOverride\n \n-  _PTRANSFORM_OVERRIDES = []  # type: List[PTransformOverride]\n+  # Thesse overrides should be applied before the proto representation of the\n+  # graph is created.\n+  _PTRANSFORM_OVERRIDES = [\n+      CombineValuesPTransformOverride()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MzA2NA==", "bodyText": "This override should place the pipeline object into the same state as if the runner had defined an apply_CombineValues, what am I missing? Looking at the code, is it because other overrides might also use a CombineValues transform so it might needed to be replaced again?", "url": "https://github.com/apache/beam/pull/11335#discussion_r407783064", "createdAt": "2020-04-13T23:46:58Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -110,22 +110,27 @@ class DataflowRunner(PipelineRunner):\n \n   # Imported here to avoid circular dependencies.\n   # TODO: Remove the apache_beam.pipeline dependency in CreatePTransformOverride\n+  from apache_beam.runners.dataflow.ptransform_overrides import CombineValuesPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import CreatePTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import ReadPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import JrhReadPTransformOverride\n \n-  _PTRANSFORM_OVERRIDES = []  # type: List[PTransformOverride]\n+  # Thesse overrides should be applied before the proto representation of the\n+  # graph is created.\n+  _PTRANSFORM_OVERRIDES = [\n+      CombineValuesPTransformOverride()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NzkxOA=="}, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTY3OQ==", "bodyText": "I suppose this is fine; it's just preserving an inconsistency in Dataflow vs. everything else.", "url": "https://github.com/apache/beam/pull/11335#discussion_r408461679", "createdAt": "2020-04-14T22:00:05Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -110,22 +110,27 @@ class DataflowRunner(PipelineRunner):\n \n   # Imported here to avoid circular dependencies.\n   # TODO: Remove the apache_beam.pipeline dependency in CreatePTransformOverride\n+  from apache_beam.runners.dataflow.ptransform_overrides import CombineValuesPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import CreatePTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import ReadPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import JrhReadPTransformOverride\n \n-  _PTRANSFORM_OVERRIDES = []  # type: List[PTransformOverride]\n+  # Thesse overrides should be applied before the proto representation of the\n+  # graph is created.\n+  _PTRANSFORM_OVERRIDES = [\n+      CombineValuesPTransformOverride()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NzkxOA=="}, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTM3OTEzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjozMjo1N1rOGE3mrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo1MDoyOVrOGGLDZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1ODUwOA==", "bodyText": "Asserting that it's the first step seems brittle, maybe just assert that there is some step that has this kind?", "url": "https://github.com/apache/beam/pull/11335#discussion_r407758508", "createdAt": "2020-04-13T22:32:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "diffHunk": "@@ -566,6 +566,19 @@ def test_get_default_gcp_region_ignores_error(\n     result = runner.get_default_gcp_region()\n     self.assertIsNone(result)\n \n+  def test_combine_values_translation(self):\n+    runner = DataflowRunner()\n+\n+    with beam.Pipeline(runner=runner,\n+                       options=PipelineOptions(self.default_properties)) as p:\n+      (  # pylint: disable=expression-not-assigned\n+          p\n+          | beam.Create([('a', [1, 2]), ('b', [3, 4])])\n+          | beam.CombineValues(lambda v, _: sum(v)))\n+\n+    job_dict = json.loads(str(runner.job))\n+    self.assertEqual(job_dict[u'steps'][1][u'kind'], u'CombineValues')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNTczNA==", "bodyText": "Done, changed to assertIn", "url": "https://github.com/apache/beam/pull/11335#discussion_r409125734", "createdAt": "2020-04-15T20:50:29Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "diffHunk": "@@ -566,6 +566,19 @@ def test_get_default_gcp_region_ignores_error(\n     result = runner.get_default_gcp_region()\n     self.assertIsNone(result)\n \n+  def test_combine_values_translation(self):\n+    runner = DataflowRunner()\n+\n+    with beam.Pipeline(runner=runner,\n+                       options=PipelineOptions(self.default_properties)) as p:\n+      (  # pylint: disable=expression-not-assigned\n+          p\n+          | beam.Create([('a', [1, 2]), ('b', [3, 4])])\n+          | beam.CombineValues(lambda v, _: sum(v)))\n+\n+    job_dict = json.loads(str(runner.job))\n+    self.assertEqual(job_dict[u'steps'][1][u'kind'], u'CombineValues')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1ODUwOA=="}, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTM4ODcwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/ptransform_overrides.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjozNzozNFrOGE3stw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo1OToyMFrOGFigGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MDA1NQ==", "bodyText": "It would be preferable to simply let try and find methods for composites as well, rather than using PTransformOverrides. This would likely help with the GBK one too.", "url": "https://github.com/apache/beam/pull/11335#discussion_r407760055", "createdAt": "2020-04-13T22:37:34Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/ptransform_overrides.py", "diffHunk": "@@ -111,3 +111,38 @@ def expand(self, pbegin):\n \n     return JrhRead().with_output_types(\n         ptransform.get_type_hints().simple_output_type('Read'))\n+\n+\n+class CombineValuesPTransformOverride(PTransformOverride):\n+  \"\"\"A ``PTransformOverride`` for ``CombineValues``.\n+\n+  The DataflowRunner expects that the CombineValues PTransform acts as a\n+  primitive. So this override replaces the CombineValues with a primitive.\n+  \"\"\"\n+  def matches(self, applied_ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import CombineValues\n+\n+    if isinstance(applied_ptransform.transform, CombineValues):\n+      self.transform = applied_ptransform.transform\n+      return True\n+    return False\n+\n+  def get_replacement_transform(self, ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import PTransform\n+    from apache_beam.pvalue import PCollection\n+\n+    # The DataflowRunner still needs access to the CombineValues members to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4OTc3OQ==", "bodyText": "Sorry, I don't understand what you mean. Can you elaborate? What does \"let try and find methods for composites as well\" mean? What would an alternative to PTransformOverrides be?", "url": "https://github.com/apache/beam/pull/11335#discussion_r408289779", "createdAt": "2020-04-14T16:55:02Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/dataflow/ptransform_overrides.py", "diffHunk": "@@ -111,3 +111,38 @@ def expand(self, pbegin):\n \n     return JrhRead().with_output_types(\n         ptransform.get_type_hints().simple_output_type('Read'))\n+\n+\n+class CombineValuesPTransformOverride(PTransformOverride):\n+  \"\"\"A ``PTransformOverride`` for ``CombineValues``.\n+\n+  The DataflowRunner expects that the CombineValues PTransform acts as a\n+  primitive. So this override replaces the CombineValues with a primitive.\n+  \"\"\"\n+  def matches(self, applied_ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import CombineValues\n+\n+    if isinstance(applied_ptransform.transform, CombineValues):\n+      self.transform = applied_ptransform.transform\n+      return True\n+    return False\n+\n+  def get_replacement_transform(self, ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import PTransform\n+    from apache_beam.pvalue import PCollection\n+\n+    # The DataflowRunner still needs access to the CombineValues members to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MDA1NQ=="}, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTMzNw==", "bodyText": "I was thinking that run_xxx could also be called for composites. That might, however, be a bigger change, so we can go with this approach.", "url": "https://github.com/apache/beam/pull/11335#discussion_r408461337", "createdAt": "2020-04-14T21:59:20Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/ptransform_overrides.py", "diffHunk": "@@ -111,3 +111,38 @@ def expand(self, pbegin):\n \n     return JrhRead().with_output_types(\n         ptransform.get_type_hints().simple_output_type('Read'))\n+\n+\n+class CombineValuesPTransformOverride(PTransformOverride):\n+  \"\"\"A ``PTransformOverride`` for ``CombineValues``.\n+\n+  The DataflowRunner expects that the CombineValues PTransform acts as a\n+  primitive. So this override replaces the CombineValues with a primitive.\n+  \"\"\"\n+  def matches(self, applied_ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import CombineValues\n+\n+    if isinstance(applied_ptransform.transform, CombineValues):\n+      self.transform = applied_ptransform.transform\n+      return True\n+    return False\n+\n+  def get_replacement_transform(self, ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import PTransform\n+    from apache_beam.pvalue import PCollection\n+\n+    # The DataflowRunner still needs access to the CombineValues members to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MDA1NQ=="}, "originalCommit": {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1404, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}