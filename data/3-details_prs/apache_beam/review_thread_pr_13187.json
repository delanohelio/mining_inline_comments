{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5Mjk5MTAy", "number": 13187, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMjoyNDoxOVrOExuubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozNDo0OVrOEzCmVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTgxMjMwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/shared.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMjoyNDoxOVrOHn_FXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDo0MzozNVrOHpV_Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5MDA3Ng==", "bodyText": "Be good to have a note why setup is best place to do the init.", "url": "https://github.com/apache/beam/pull/13187#discussion_r511690076", "createdAt": "2020-10-26T02:24:19Z", "author": {"login": "rezarokni"}, "path": "sdks/python/apache_beam/utils/shared.py", "diffHunk": "@@ -26,22 +26,30 @@\n \n To share a very large list across all threads of each worker in a DoFn::\n \n-  class GetNthStringFn(beam.DoFn):\n-    def __init__(self, shared_handle):\n-      self._shared_handle = shared_handle\n-\n-    def process(self, element):\n-      def initialize_list():\n-        # Build the giant initial list.\n-        return [str(i) for i in range(1000000)]\n-\n-      giant_list = self._shared_handle.acquire(initialize_list)\n-      yield giant_list[element]\n-\n-  p = beam.Pipeline()\n-  shared_handle = shared.Shared()\n-  (p | beam.Create([2, 4, 6, 8])\n-     | beam.ParDo(GetNthStringFn(shared_handle)))\n+# Several built-in types such as list and dict do not directly support weak\n+# references but can add support through subclassing:\n+# https://docs.python.org/3/library/weakref.html\n+class WeakRefList(list):\n+\tpass\n+\n+class GetNthStringFn(beam.DoFn):\n+  def __init__(self, shared_handle):\n+    self._shared_handle = shared_handle\n+\n+  def setup(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fcd77139ff53482db0253aeeb56eac154f8cf02"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExMzkyNg==", "bodyText": "done", "url": "https://github.com/apache/beam/pull/13187#discussion_r513113926", "createdAt": "2020-10-28T00:43:35Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/utils/shared.py", "diffHunk": "@@ -26,22 +26,30 @@\n \n To share a very large list across all threads of each worker in a DoFn::\n \n-  class GetNthStringFn(beam.DoFn):\n-    def __init__(self, shared_handle):\n-      self._shared_handle = shared_handle\n-\n-    def process(self, element):\n-      def initialize_list():\n-        # Build the giant initial list.\n-        return [str(i) for i in range(1000000)]\n-\n-      giant_list = self._shared_handle.acquire(initialize_list)\n-      yield giant_list[element]\n-\n-  p = beam.Pipeline()\n-  shared_handle = shared.Shared()\n-  (p | beam.Create([2, 4, 6, 8])\n-     | beam.ParDo(GetNthStringFn(shared_handle)))\n+# Several built-in types such as list and dict do not directly support weak\n+# references but can add support through subclassing:\n+# https://docs.python.org/3/library/weakref.html\n+class WeakRefList(list):\n+\tpass\n+\n+class GetNthStringFn(beam.DoFn):\n+  def __init__(self, shared_handle):\n+    self._shared_handle = shared_handle\n+\n+  def setup(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5MDA3Ng=="}, "originalCommit": {"oid": "4fcd77139ff53482db0253aeeb56eac154f8cf02"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTU1NDEyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/utils/shared.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozNDo0OVrOHqBSVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozNDo0OVrOHqBSVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyMzMxOA==", "bodyText": "Consider following wording for line 29 to prepare the reader for why weak references are discussed:\nShared is a helper class for managing a single instance of an object shared by multiple threads within the same process. Instances of Shared are serializable objects that can be shared by all threads of each worker process. A Shared object encapsulates a weak reference to a singleton instance of the shared resource. The singleton is lazily initialized by calls to Shared.acquire().", "url": "https://github.com/apache/beam/pull/13187#discussion_r513823318", "createdAt": "2020-10-28T23:34:49Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/utils/shared.py", "diffHunk": "@@ -26,22 +26,31 @@\n \n To share a very large list across all threads of each worker in a DoFn::\n \n-  class GetNthStringFn(beam.DoFn):\n-    def __init__(self, shared_handle):\n-      self._shared_handle = shared_handle\n-\n-    def process(self, element):\n-      def initialize_list():\n-        # Build the giant initial list.\n-        return [str(i) for i in range(1000000)]\n-\n-      giant_list = self._shared_handle.acquire(initialize_list)\n-      yield giant_list[element]\n-\n-  p = beam.Pipeline()\n-  shared_handle = shared.Shared()\n-  (p | beam.Create([2, 4, 6, 8])\n-     | beam.ParDo(GetNthStringFn(shared_handle)))\n+# Several built-in types such as list and dict do not directly support weak", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1febc064346d2f765d4758ff2e84f972b1c0f7"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2843, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}