{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODgxOTUx", "number": 13070, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMToxODo1NVrOEsO82Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MjoxM1rOEswYmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE3NzUzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMToxODo1NVrOHfcBcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDo1MzoyM1rOHgM1JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyNzAyNA==", "bodyText": "RM commented out line, OR swap the line below it with one that doesn't _ ignore the index. As far as I can read it,\nfor i, w := range elm.Windows {  should be identical and let you remove w := elm.Windows[i]", "url": "https://github.com/apache/beam/pull/13070#discussion_r502727024", "createdAt": "2020-10-10T01:18:55Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -338,12 +348,17 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(_ context.Context,\n \t\t// If we need to process the element in multiple windows, each one needs\n \t\t// its own RTracker and progress must be tracked among all windows by\n \t\t// currW updated between processing.\n-\t\tfor _, w := range elm.Windows {\n+\t\tn.numW = len(elm.Windows)\n+\n+\t\t//for _, w := range elm.Windows {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNjY5Mw==", "bodyText": "Removed the commented out line. It's actually not identical because a dynamic split can modify n.numW if some of the windows are split with the residual, which is why I loop using numW instead. I could theoretically loop based on len(elm.Windows) instead, avoiding the range keyword, and directly trim the windows slice in the current element, but I don't know if there's any advantage to doing it that way and this seems simpler.", "url": "https://github.com/apache/beam/pull/13070#discussion_r503526693", "createdAt": "2020-10-12T20:53:23Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf.go", "diffHunk": "@@ -338,12 +348,17 @@ func (n *ProcessSizedElementsAndRestrictions) ProcessElement(_ context.Context,\n \t\t// If we need to process the element in multiple windows, each one needs\n \t\t// its own RTracker and progress must be tracked among all windows by\n \t\t// currW updated between processing.\n-\t\tfor _, w := range elm.Windows {\n+\t\tn.numW = len(elm.Windows)\n+\n+\t\t//for _, w := range elm.Windows {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyNzAyNA=="}, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzU3Nzg5OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/datasource.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToxMzoyNFrOHgKQCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo0MjowOVrOHgPchA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4NDQyNA==", "bodyText": "Nit: nil seemed more explicit, why was this changed? (On that note, if one is empty must the other be empty as well, or is it OK to have one non-empty and treat that as an unsuccessful split?)", "url": "https://github.com/apache/beam/pull/13070#discussion_r503484424", "createdAt": "2020-10-12T19:13:24Z", "author": {"login": "robertwb"}, "path": "sdks/go/pkg/beam/core/runtime/exec/datasource.go", "diffHunk": "@@ -354,12 +354,12 @@ func (n *DataSource) Split(splits []int64, frac float64, bufSize int64) (SplitRe\n \t\treturn SplitResult{PI: s - 1, RI: s}, nil\n \t}\n \t// Otherwise, perform a sub-element split.\n-\tp, r, err := su.Split(fr)\n+\tps, rs, err := su.Split(fr)\n \tif err != nil {\n \t\treturn SplitResult{}, err\n \t}\n \n-\tif p == nil || r == nil { // Unsuccessful split.\n+\tif len(ps) == 0 || len(rs) == 0 { // Unsuccessful split.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMDIwNQ==", "bodyText": "Just because once I moved to slices, having an empty slice seemed to make more sense to indicate \"the function worked, but the result was empty\", rather than nil slices which is what gets returned for errors. I could switch it back to nil, since that was mostly a stylistic choice.\nChecking over the code, yeah it looks like if one is empty I always just return both empty. But I think I used an \"or\" here just to avoid relying on implementation details of the split. Basically, if even one of them is missing then then Datasource knows the split failed, and doesn't have to really know what exactly happened.", "url": "https://github.com/apache/beam/pull/13070#discussion_r503530205", "createdAt": "2020-10-12T21:01:32Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/datasource.go", "diffHunk": "@@ -354,12 +354,12 @@ func (n *DataSource) Split(splits []int64, frac float64, bufSize int64) (SplitRe\n \t\treturn SplitResult{PI: s - 1, RI: s}, nil\n \t}\n \t// Otherwise, perform a sub-element split.\n-\tp, r, err := su.Split(fr)\n+\tps, rs, err := su.Split(fr)\n \tif err != nil {\n \t\treturn SplitResult{}, err\n \t}\n \n-\tif p == nil || r == nil { // Unsuccessful split.\n+\tif len(ps) == 0 || len(rs) == 0 { // Unsuccessful split.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4NDQyNA=="}, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2OTU0MA==", "bodyText": "Idiomatically, if there's no intended semantic real difference between nil and empty, then checking the length is the correct way to handle that. nil slices are also 0 length.\nThis catches the error case that empty slices are generated, and hints to the compiler that there's at least 1 entry in the slices after this if block.", "url": "https://github.com/apache/beam/pull/13070#discussion_r503569540", "createdAt": "2020-10-12T22:42:09Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/datasource.go", "diffHunk": "@@ -354,12 +354,12 @@ func (n *DataSource) Split(splits []int64, frac float64, bufSize int64) (SplitRe\n \t\treturn SplitResult{PI: s - 1, RI: s}, nil\n \t}\n \t// Otherwise, perform a sub-element split.\n-\tp, r, err := su.Split(fr)\n+\tps, rs, err := su.Split(fr)\n \tif err != nil {\n \t\treturn SplitResult{}, err\n \t}\n \n-\tif p == nil || r == nil { // Unsuccessful split.\n+\tif len(ps) == 0 || len(rs) == 0 { // Unsuccessful split.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4NDQyNA=="}, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzY0NzA1OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/dynsplit_test.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTozOTowMFrOHgK5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo0NDoyMVrOHgPfKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NDk4Ng==", "bodyText": "Is there a convention here you could use to assert that there's only one element while getting it, rather than let any (unexpected?) other elements in the list be dropped?", "url": "https://github.com/apache/beam/pull/13070#discussion_r503494986", "createdAt": "2020-10-12T19:39:00Z", "author": {"login": "robertwb"}, "path": "sdks/go/pkg/beam/core/runtime/exec/dynsplit_test.go", "diffHunk": "@@ -103,11 +103,11 @@ func TestDynamicSplit(t *testing.T) {\n \t\t\t// with the input coder to the path.\n \t\t\t// TODO(BEAM-10579) Switch to using splittable unit's input coder\n \t\t\t// once that is implemented.\n-\t\t\tp, err := decodeDynSplitElm(splitRes.split.PS, cdr)\n+\t\t\tp, err := decodeDynSplitElm(splitRes.split.PS[0], cdr)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMDU3OQ==", "bodyText": "That would be useful. @lostluck , know of anything? If not I can just explicitly check that it only has a length of one, because that is an expectation of the test.", "url": "https://github.com/apache/beam/pull/13070#discussion_r503530579", "createdAt": "2020-10-12T21:02:27Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/dynsplit_test.go", "diffHunk": "@@ -103,11 +103,11 @@ func TestDynamicSplit(t *testing.T) {\n \t\t\t// with the input coder to the path.\n \t\t\t// TODO(BEAM-10579) Switch to using splittable unit's input coder\n \t\t\t// once that is implemented.\n-\t\t\tp, err := decodeDynSplitElm(splitRes.split.PS, cdr)\n+\t\t\tp, err := decodeDynSplitElm(splitRes.split.PS[0], cdr)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NDk4Ng=="}, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDIxNw==", "bodyText": "Go, being a simple language would have you put the if in there. It would be a waste to wrap it in a function unless the pattern is repeating. At least not until generics land and we can define a GetOnlyElement[T any](slice []T) { ... } helper.", "url": "https://github.com/apache/beam/pull/13070#discussion_r503570217", "createdAt": "2020-10-12T22:44:21Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/dynsplit_test.go", "diffHunk": "@@ -103,11 +103,11 @@ func TestDynamicSplit(t *testing.T) {\n \t\t\t// with the input coder to the path.\n \t\t\t// TODO(BEAM-10579) Switch to using splittable unit's input coder\n \t\t\t// once that is implemented.\n-\t\t\tp, err := decodeDynSplitElm(splitRes.split.PS, cdr)\n+\t\t\tp, err := decodeDynSplitElm(splitRes.split.PS[0], cdr)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NDk4Ng=="}, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzY1NTMwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTo0MjoxNFrOHgK-Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTowMzowNFrOHgNFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NjI0Mw==", "bodyText": "Ws his an existing bug?", "url": "https://github.com/apache/beam/pull/13070#discussion_r503496243", "createdAt": "2020-10-12T19:42:14Z", "author": {"login": "robertwb"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange.go", "diffHunk": "@@ -180,8 +180,8 @@ func (tracker *Tracker) TrySplit(fraction float64) (primary, residual interface{\n \n // GetProgress reports progress based on the claimed size and unclaimed sizes of the restriction.\n func (tracker *Tracker) GetProgress() (done, remaining float64) {\n-\tdone = float64(tracker.claimed - tracker.rest.Start)\n-\tremaining = float64(tracker.rest.End - tracker.claimed)\n+\tdone = float64((tracker.claimed + 1) - tracker.rest.Start)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMDgxNQ==", "bodyText": "Yeah, it's something I missed because I was only testing this code with large ranges, and it's most noticeable with small ranges.", "url": "https://github.com/apache/beam/pull/13070#discussion_r503530815", "createdAt": "2020-10-12T21:03:04Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange.go", "diffHunk": "@@ -180,8 +180,8 @@ func (tracker *Tracker) TrySplit(fraction float64) (primary, residual interface{\n \n // GetProgress reports progress based on the claimed size and unclaimed sizes of the restriction.\n func (tracker *Tracker) GetProgress() (done, remaining float64) {\n-\tdone = float64(tracker.claimed - tracker.rest.Start)\n-\tremaining = float64(tracker.rest.End - tracker.claimed)\n+\tdone = float64((tracker.claimed + 1) - tracker.rest.Start)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5NjI0Mw=="}, "originalCommit": {"oid": "fe29508cd852beb5de2c9e7670344ea39eaf1048"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2931, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}