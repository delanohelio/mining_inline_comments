{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDI2NDk2", "number": 12738, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoyMjoxNlrOEfAahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoyMjoxNlrOEfAahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTQ4MTAxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/jdbc/src/test/java/org/apache/beam/sdk/extensions/sql/jdbc/BeamSqlLineIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoyMjoxNlrOHLAzEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1NTowNlrOHMtKEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwOTQ1Nw==", "bodyText": "I think actually the appropriate fix here is to make inputStream @Nullable in runSqlLine. It looks like SqlLine handles a null here: https://github.com/julianhyde/sqlline/blob/sqlline-1.4.0/src/main/java/sqlline/SqlLine.java#L717-L722\nCould you try that instead?", "url": "https://github.com/apache/beam/pull/12738#discussion_r481309457", "createdAt": "2020-09-01T17:22:16Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/jdbc/src/test/java/org/apache/beam/sdk/extensions/sql/jdbc/BeamSqlLineIT.java", "diffHunk": "@@ -198,12 +202,15 @@ private String taxiRideJSON(\n     return objectNode.toString();\n   }\n \n+  /** Suppressing this due to https://github.com/typetools/checker-framework/issues/979. */\n+  @SuppressWarnings(\"return.type.incompatible\")\n   private Future<List<List<String>>> runQueryInBackground(String[] args) {\n     return pool.submit(\n         (Callable)\n             () -> {\n               ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-              BeamSqlLine.runSqlLine(args, null, outputStream, null);\n+              InputStream inputStream = new ByteArrayInputStream(new byte[0]);\n+              BeamSqlLine.runSqlLine(args, inputStream, outputStream, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c8ed6a7777ac8eb27db9222ad3265e5a1788ff"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4MTg4NQ==", "bodyText": "I got your point, but it would require to annotate the inputStream here in begin method with @Nullable, which is outside the project. What could be possible workaround here ?", "url": "https://github.com/apache/beam/pull/12738#discussion_r481581885", "createdAt": "2020-09-02T02:53:51Z", "author": {"login": "jayendra13"}, "path": "sdks/java/extensions/sql/jdbc/src/test/java/org/apache/beam/sdk/extensions/sql/jdbc/BeamSqlLineIT.java", "diffHunk": "@@ -198,12 +202,15 @@ private String taxiRideJSON(\n     return objectNode.toString();\n   }\n \n+  /** Suppressing this due to https://github.com/typetools/checker-framework/issues/979. */\n+  @SuppressWarnings(\"return.type.incompatible\")\n   private Future<List<List<String>>> runQueryInBackground(String[] args) {\n     return pool.submit(\n         (Callable)\n             () -> {\n               ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-              BeamSqlLine.runSqlLine(args, null, outputStream, null);\n+              InputStream inputStream = new ByteArrayInputStream(new byte[0]);\n+              BeamSqlLine.runSqlLine(args, inputStream, outputStream, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwOTQ1Nw=="}, "originalCommit": {"oid": "90c8ed6a7777ac8eb27db9222ad3265e5a1788ff"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwODY3Nw==", "bodyText": "Could we add an annotation to runSqlLine to suppress that warning? That seems preferable to creating InputStream instances that aren't actually used", "url": "https://github.com/apache/beam/pull/12738#discussion_r482608677", "createdAt": "2020-09-03T00:03:56Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/jdbc/src/test/java/org/apache/beam/sdk/extensions/sql/jdbc/BeamSqlLineIT.java", "diffHunk": "@@ -198,12 +202,15 @@ private String taxiRideJSON(\n     return objectNode.toString();\n   }\n \n+  /** Suppressing this due to https://github.com/typetools/checker-framework/issues/979. */\n+  @SuppressWarnings(\"return.type.incompatible\")\n   private Future<List<List<String>>> runQueryInBackground(String[] args) {\n     return pool.submit(\n         (Callable)\n             () -> {\n               ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-              BeamSqlLine.runSqlLine(args, null, outputStream, null);\n+              InputStream inputStream = new ByteArrayInputStream(new byte[0]);\n+              BeamSqlLine.runSqlLine(args, inputStream, outputStream, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwOTQ1Nw=="}, "originalCommit": {"oid": "90c8ed6a7777ac8eb27db9222ad3265e5a1788ff"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3NzcwNg==", "bodyText": "Done. This ubuntu-latest Unit-Test is not failing on my local machine.", "url": "https://github.com/apache/beam/pull/12738#discussion_r482677706", "createdAt": "2020-09-03T03:14:47Z", "author": {"login": "jayendra13"}, "path": "sdks/java/extensions/sql/jdbc/src/test/java/org/apache/beam/sdk/extensions/sql/jdbc/BeamSqlLineIT.java", "diffHunk": "@@ -198,12 +202,15 @@ private String taxiRideJSON(\n     return objectNode.toString();\n   }\n \n+  /** Suppressing this due to https://github.com/typetools/checker-framework/issues/979. */\n+  @SuppressWarnings(\"return.type.incompatible\")\n   private Future<List<List<String>>> runQueryInBackground(String[] args) {\n     return pool.submit(\n         (Callable)\n             () -> {\n               ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-              BeamSqlLine.runSqlLine(args, null, outputStream, null);\n+              InputStream inputStream = new ByteArrayInputStream(new byte[0]);\n+              BeamSqlLine.runSqlLine(args, inputStream, outputStream, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwOTQ1Nw=="}, "originalCommit": {"oid": "90c8ed6a7777ac8eb27db9222ad3265e5a1788ff"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4NDgxNg==", "bodyText": "Thank you! yeah the github actions tests on different targets seem to flake pretty often and I'm not sure how to re-run them. I think its safe to ignore.", "url": "https://github.com/apache/beam/pull/12738#discussion_r483084816", "createdAt": "2020-09-03T15:55:06Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/jdbc/src/test/java/org/apache/beam/sdk/extensions/sql/jdbc/BeamSqlLineIT.java", "diffHunk": "@@ -198,12 +202,15 @@ private String taxiRideJSON(\n     return objectNode.toString();\n   }\n \n+  /** Suppressing this due to https://github.com/typetools/checker-framework/issues/979. */\n+  @SuppressWarnings(\"return.type.incompatible\")\n   private Future<List<List<String>>> runQueryInBackground(String[] args) {\n     return pool.submit(\n         (Callable)\n             () -> {\n               ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-              BeamSqlLine.runSqlLine(args, null, outputStream, null);\n+              InputStream inputStream = new ByteArrayInputStream(new byte[0]);\n+              BeamSqlLine.runSqlLine(args, inputStream, outputStream, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwOTQ1Nw=="}, "originalCommit": {"oid": "90c8ed6a7777ac8eb27db9222ad3265e5a1788ff"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 415, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}