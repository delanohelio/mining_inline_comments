{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1Nzk3MzY0", "number": 11084, "title": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment", "bodyText": "The cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-09T20:19:02Z", "url": "https://github.com/apache/beam/pull/11084", "merged": true, "mergeCommit": {"oid": "d62521f69ead4b58924043f041978d49e9beeb62"}, "closed": true, "closedAt": "2020-03-11T23:43:47Z", "author": {"login": "mxm"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMFXSUAFqTM3MTU1MjQ2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMv7KcAFqTM3MzE5NzI4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTUyNDY3", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-371552467", "createdAt": "2020-03-09T21:48:28Z", "commit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0ODoyOFrOFz6itQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjowNzozN1rOFz7BbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDg1Mw==", "bodyText": "Since exception is null, this should just be exception = e", "url": "https://github.com/apache/beam/pull/11084#discussion_r389980853", "createdAt": "2020-03-09T21:48:28Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ProcessEnvironment.java", "diffHunk": "@@ -64,13 +63,32 @@ public InstructionRequestHandler getInstructionRequestHandler() {\n   }\n \n   @Override\n-  public void close() throws Exception {\n-    synchronized (lock) {\n-      if (!isClosed) {\n-        instructionHandler.close();\n-        processManager.stopProcess(workerId);\n-        isClosed = true;\n+  public synchronized void close() throws Exception {\n+    if (isClosed) {\n+      return;\n+    }\n+    Exception exception = null;\n+    try {\n+      processManager.stopProcess(workerId);\n+    } catch (Exception e) {\n+      if (exception != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4Mjk3OA==", "bodyText": "The outer try/catch isn't necessary since you already have it nested.", "url": "https://github.com/apache/beam/pull/11084#discussion_r389982978", "createdAt": "2020-03-09T21:53:34Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -252,14 +263,47 @@ public StageBundleFactory forStage(ExecutableStage executableStage) {\n   }\n \n   @Override\n-  public void close() throws Exception {\n-    // Clear the cache. This closes all active environments.\n-    // note this may cause open calls to be cancelled by the peer\n-    for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache : environmentCaches) {\n-      environmentCache.invalidateAll();\n-      environmentCache.cleanUp();\n+  public synchronized void close() throws Exception {\n+    if (closed) {\n+      return;\n+    }\n+    Exception exception = null;\n+    try {\n+      for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache :\n+          environmentCaches) {\n+        try {\n+          // Clear the cache. This closes all active environments.\n+          // note this may cause open calls to be cancelled by the peer\n+          environmentCache.invalidateAll();\n+          environmentCache.cleanUp();\n+        } catch (Exception e) {\n+          if (exception != null) {\n+            exception.addSuppressed(e);\n+          } else {\n+            exception = e;\n+          }\n+        }\n+      }\n+      try {\n+        executor.shutdown();\n+      } catch (Exception e) {\n+        if (exception != null) {\n+          exception.addSuppressed(e);\n+        } else {\n+          exception = e;\n+        }\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NDcwOA==", "bodyText": "Why is this needed (with the log statement above)?", "url": "https://github.com/apache/beam/pull/11084#discussion_r389984708", "createdAt": "2020-03-09T21:57:39Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -166,11 +168,20 @@ public static DefaultJobBundleFactory create(\n         CacheBuilder.newBuilder()\n             .removalListener(\n                 (RemovalNotification<Environment, WrappedSdkHarnessClient> notification) -> {\n-                  int refCount = notification.getValue().unref();\n-                  LOG.debug(\n-                      \"Removed environment {} with {} remaining bundle references.\",\n-                      notification.getKey(),\n-                      refCount);\n+                  WrappedSdkHarnessClient client = notification.getValue();\n+                  int refCount = client.unref();\n+                  // Double-check to trigger closing of all environments in case the \"refing\" does\n+                  // not clean them up during operator shutdown. This is necessary in some\n+                  // situations, e.g when the bundle cannot be closed and thus the ref cannot be\n+                  // released. All environment types ensure they can only be closed once.\n+                  if (refCount > 0) {\n+                    LOG.warn(\n+                        \"Clearing remaining {} bundle references from environment {} to ensure it shuts down.\",\n+                        refCount,\n+                        notification.getKey());\n+                    //noinspection StatementWithEmptyBody", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODcxNg==", "bodyText": "Having this as part of the removal listener would prematurely close an environment that is still referenced. The purpose of the refcount is to be able to remove the environment from the cache when it expires but close it only after all references are gone.", "url": "https://github.com/apache/beam/pull/11084#discussion_r389988716", "createdAt": "2020-03-09T22:07:37Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -166,11 +168,20 @@ public static DefaultJobBundleFactory create(\n         CacheBuilder.newBuilder()\n             .removalListener(\n                 (RemovalNotification<Environment, WrappedSdkHarnessClient> notification) -> {\n-                  int refCount = notification.getValue().unref();\n-                  LOG.debug(\n-                      \"Removed environment {} with {} remaining bundle references.\",\n-                      notification.getKey(),\n-                      refCount);\n+                  WrappedSdkHarnessClient client = notification.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTYzNTk4", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-371563598", "createdAt": "2020-03-09T22:11:08Z", "commit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxMTowOFrOFz7G1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxMTowOFrOFz7G1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw==", "bodyText": "Why the timeout change?", "url": "https://github.com/apache/beam/pull/11084#discussion_r389990103", "createdAt": "2020-03-09T22:11:08Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ProcessManager.java", "diffHunk": "@@ -186,31 +186,28 @@ private void stopProcess(String id, Process process) {\n       LOG.debug(\"Attempting to stop process with id {}\", id);\n       // first try to kill gracefully\n       process.destroy();\n-      long maxTimeToWait = 2000;\n-      if (waitForProcessToDie(process, maxTimeToWait)) {\n-        LOG.debug(\"Process for worker {} shut down gracefully.\", id);\n-      } else {\n-        LOG.info(\"Process for worker {} still running. Killing.\", id);\n-        process.destroyForcibly();\n+      long maxTimeToWait = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTY0NzIy", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-371564722", "createdAt": "2020-03-09T22:13:37Z", "commit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxMzozN1rOFz7K4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxMzozN1rOFz7K4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MTEzOQ==", "bodyText": "Add comment on why the exception is ignored.", "url": "https://github.com/apache/beam/pull/11084#discussion_r389991139", "createdAt": "2020-03-09T22:13:37Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ProcessManager.java", "diffHunk": "@@ -234,9 +231,7 @@ public void run() {\n               // Graceful shutdown period\n               Thread.sleep(200);\n               break;\n-            } catch (InterruptedException e) {\n-              Thread.currentThread().interrupt();\n-              throw new RuntimeException(e);\n+            } catch (InterruptedException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTY2NTc0", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-371566574", "createdAt": "2020-03-09T22:18:07Z", "commit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxODowN1rOFz7QrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxODowN1rOFz7QrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MjYyMA==", "bodyText": "It may be good to add an explanation here for the following elaborate cleanup logic as otherwise there is the danger it will be \"simplified\" in the future.", "url": "https://github.com/apache/beam/pull/11084#discussion_r389992620", "createdAt": "2020-03-09T22:18:07Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -252,14 +263,47 @@ public StageBundleFactory forStage(ExecutableStage executableStage) {\n   }\n \n   @Override\n-  public void close() throws Exception {\n-    // Clear the cache. This closes all active environments.\n-    // note this may cause open calls to be cancelled by the peer\n-    for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache : environmentCaches) {\n-      environmentCache.invalidateAll();\n-      environmentCache.cleanUp();\n+  public synchronized void close() throws Exception {\n+    if (closed) {\n+      return;\n+    }\n+    Exception exception = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c418d0681da40c33986879f91663d4c7311b14e5"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTU1NDMx", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-372155431", "createdAt": "2020-03-10T17:11:09Z", "commit": {"oid": "79848761b5f9898fd7094f94dc8bd59db0d98336"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxMToxMFrOF0YtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxMToxMFrOF0YtUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ==", "bodyText": "client.ref needs to remain here, the lines below rely on that and it is also more readable.", "url": "https://github.com/apache/beam/pull/11084#discussion_r390475089", "createdAt": "2020-03-10T17:11:10Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -352,20 +407,18 @@ public RemoteBundle getBundle(\n         // The blocking queue of caches for serving multiple bundles concurrently.\n         currentCache = availableCaches.take();\n         client = currentCache.getUnchecked(executableStage.getEnvironment());\n-        client.ref();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79848761b5f9898fd7094f94dc8bd59db0d98336"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTU4MzEw", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-372158310", "createdAt": "2020-03-10T17:14:32Z", "commit": {"oid": "79848761b5f9898fd7094f94dc8bd59db0d98336"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNDozMlrOF0Y2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNDozMlrOF0Y2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NzM2Mw==", "bodyText": "I'm not sure I like this in the path for every bundle. We could probably move it below line 416 (preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() <= 0);)", "url": "https://github.com/apache/beam/pull/11084#discussion_r390477363", "createdAt": "2020-03-10T17:14:32Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -375,6 +428,11 @@ public RemoteBundle getBundle(\n         }\n       }\n \n+      // Ensure client is referenced for this bundle, unref in close()\n+      client.ref();\n+      // Cleanup list of clients which were active during eviction but now do not hold references\n+      evictedActiveClients.removeIf(c -> c.bundleRefCount.get() <= 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79848761b5f9898fd7094f94dc8bd59db0d98336"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTU4OTU1", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-372158955", "createdAt": "2020-03-10T17:15:17Z", "commit": {"oid": "79848761b5f9898fd7094f94dc8bd59db0d98336"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNToxOFrOF0Y4Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNToxOFrOF0Y4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Nzg3NQ==", "bodyText": "Why the change from == to <=?", "url": "https://github.com/apache/beam/pull/11084#discussion_r390477875", "createdAt": "2020-03-10T17:15:18Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -352,20 +407,18 @@ public RemoteBundle getBundle(\n         // The blocking queue of caches for serving multiple bundles concurrently.\n         currentCache = availableCaches.take();\n         client = currentCache.getUnchecked(executableStage.getEnvironment());\n-        client.ref();\n \n         currentClient = preparedClients.get(client);\n         if (currentClient == null) {\n           // we are using this client for the first time\n           preparedClients.put(client, currentClient = prepare(client, executableStage));\n           // cleanup any expired clients\n-          preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() == 0);\n+          preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() <= 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79848761b5f9898fd7094f94dc8bd59db0d98336"}, "originalPosition": 147}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79848761b5f9898fd7094f94dc8bd59db0d98336", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/79848761b5f9898fd7094f94dc8bd59db0d98336", "committedDate": "2020-03-10T10:55:04Z", "message": "Ensure clients with pending references can be garbage collected during shutdown"}, "afterCommit": {"oid": "3e305c75cade7a74477b3f938cc756a10590a1ec", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/3e305c75cade7a74477b3f938cc756a10590a1ec", "committedDate": "2020-03-11T20:26:38Z", "message": "Ensure clients with pending references can be garbage collected during shutdown"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e305c75cade7a74477b3f938cc756a10590a1ec", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/3e305c75cade7a74477b3f938cc756a10590a1ec", "committedDate": "2020-03-11T20:26:38Z", "message": "Ensure clients with pending references can be garbage collected during shutdown"}, "afterCommit": {"oid": "5c04950af92fcbfcac2f62e7a3807f7ae91a304b", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/5c04950af92fcbfcac2f62e7a3807f7ae91a304b", "committedDate": "2020-03-11T20:27:08Z", "message": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment\n\nThe cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\n\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf219ba408a5ed184beb983f20fc5630d200ea70", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/cf219ba408a5ed184beb983f20fc5630d200ea70", "committedDate": "2020-03-11T20:44:34Z", "message": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment\n\nThe cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\n\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c04950af92fcbfcac2f62e7a3807f7ae91a304b", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/5c04950af92fcbfcac2f62e7a3807f7ae91a304b", "committedDate": "2020-03-11T20:27:08Z", "message": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment\n\nThe cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\n\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle."}, "afterCommit": {"oid": "cf219ba408a5ed184beb983f20fc5630d200ea70", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/cf219ba408a5ed184beb983f20fc5630d200ea70", "committedDate": "2020-03-11T20:44:34Z", "message": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment\n\nThe cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\n\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTEyNDQ2", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-373112446", "createdAt": "2020-03-11T20:45:29Z", "commit": {"oid": "cf219ba408a5ed184beb983f20fc5630d200ea70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0NToyOVrOF1IejQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0NToyOVrOF1IejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1Nzc0MQ==", "bodyText": "FYI, I've added this check instead to check for correct bounds.", "url": "https://github.com/apache/beam/pull/11084#discussion_r391257741", "createdAt": "2020-03-11T20:45:29Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -487,13 +553,14 @@ private int ref() {\n     }\n \n     private int unref() {\n-      int count = bundleRefCount.decrementAndGet();\n-      if (count == 0) {\n+      int refCount = bundleRefCount.decrementAndGet();\n+      Preconditions.checkState(refCount >= 0, \"Reference count must not be negative.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf219ba408a5ed184beb983f20fc5630d200ea70"}, "originalPosition": 183}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTk3Mjg0", "url": "https://github.com/apache/beam/pull/11084#pullrequestreview-373197284", "createdAt": "2020-03-11T23:43:20Z", "commit": {"oid": "cf219ba408a5ed184beb983f20fc5630d200ea70"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3116, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}