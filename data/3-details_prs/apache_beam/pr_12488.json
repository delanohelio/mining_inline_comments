{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mjk0MDU2", "number": 12488, "title": "[BEAM-10656] Enable bundle finalization within the Java direct runner.", "bodyText": "This is towards making all UnboundedSources execute as splittable dofns within the direct runner using the SDF unbounded source wrapper since it relies on bundle finalization to handle checkpoints.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-08-06T22:29:48Z", "url": "https://github.com/apache/beam/pull/12488", "merged": true, "mergeCommit": {"oid": "56ea002fac20a1ac5cfd8e811fb25d83dd2e3931"}, "closed": true, "closedAt": "2020-08-08T04:07:35Z", "author": {"login": "lukecwik"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8nSVsAH2gAyNDY0Mjk0MDU2OjJlYWUwOGZhNmQyNzNjNWViZjU1Njk2ZjRhOWVjN2QwOTcyOGQ3MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8taDBgFqTQ2MzY5Mjc1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "committedDate": "2020-08-07T16:47:52Z", "message": "[BEAM-10656] Enable bundle finalization within the Java direct runner.\n\nThis is towards making all UnboundedSources execute as splittable dofns within the direct runner using the SDF unbounded source wrapper since it relies on bundle finalization to handle checkpoints."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "086bc8199511a0cd9906cc7eeff963b0ddd52b34", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/086bc8199511a0cd9906cc7eeff963b0ddd52b34", "committedDate": "2020-08-06T22:29:15Z", "message": "[BEAM-10656] Enable bundle finalization within the Java direct runner.\n\nThis is towards making all UnboundedSources execute as splittable dofns within the direct runner using the SDF unbounded source wrapper since it relies on bundle finalization to handle checkpoints."}, "afterCommit": {"oid": "2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "committedDate": "2020-08-07T16:47:52Z", "message": "[BEAM-10656] Enable bundle finalization within the Java direct runner.\n\nThis is towards making all UnboundedSources execute as splittable dofns within the direct runner using the SDF unbounded source wrapper since it relies on bundle finalization to handle checkpoints."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "committedDate": "2020-08-07T20:33:45Z", "message": "fixup! checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjY0MzYw", "url": "https://github.com/apache/beam/pull/12488#pullrequestreview-463664360", "createdAt": "2020-08-07T22:07:51Z", "commit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjowNzo1MVrOG9qKNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyNzowOVrOG9qd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzA2MQ==", "bodyText": "Why do we need to trigger the callbacks here?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467307061", "createdAt": "2020-08-07T22:07:51Z", "author": {"login": "ibzib"}, "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :\n+        bundleFinalizer.getAndClearFinalizations()) {\n+      finalization.getCallback().onBundleSuccess();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzg3Mw==", "bodyText": "Can we make any assertions about the finalizations? ie Can we expect that they're not empty?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467307873", "createdAt": "2020-08-07T22:10:51Z", "author": {"login": "ibzib"}, "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODQxMw==", "bodyText": "Why lazy-initialize? Is this just to save memory?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467308413", "createdAt": "2020-08-07T22:12:57Z", "author": {"login": "ibzib"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectExecutionContext.java", "diffHunk": "@@ -81,6 +89,22 @@ public DirectTimerInternals timerInternals() {\n       return timerInternals;\n     }\n \n+    @Override\n+    public BundleFinalizer bundleFinalizer() {\n+      if (bundleFinalizer == null) {\n+        bundleFinalizer = new InMemoryBundleFinalizer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwOTUzOQ==", "bodyText": "I don't think logging only the finalization tells us enough. Can we log more information about the bundle itself?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467309539", "createdAt": "2020-08-07T22:17:01Z", "author": {"login": "ibzib"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {\n+        LOG.warn(\"Failed to finalize requested bundle {}\", finalization, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjExNA==", "bodyText": "Multiple callbacks are allowed, right? (If so, please reword this as \"at least one callback.\")", "url": "https://github.com/apache/beam/pull/12488#discussion_r467312114", "createdAt": "2020-08-07T22:27:09Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);\n+      }\n+    }\n+\n+    private static class BasicBundleFinalizingDoFn extends BundleFinalizingDoFn {\n+      @ProcessElement\n+      public void processElement(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        testFinalization(bundleFinalizer, output);\n+      }\n+    }\n+\n+    private static class BundleFinalizerOutputChecker\n+        implements SerializableFunction<Iterable<String>, Void> {\n+      @Override\n+      public Void apply(Iterable<String> input) {\n+        assertTrue(\n+            \"Expected to have received one callback enabling output to be produced but received none.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08cd3ae42508ecbf5dc1556d25993ae508396a38", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/08cd3ae42508ecbf5dc1556d25993ae508396a38", "committedDate": "2020-08-07T23:31:24Z", "message": "fixup! Address @ibzib PR comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88402d762d1c63b20b0f3ba68d074eb16c1ecc4", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/c88402d762d1c63b20b0f3ba68d074eb16c1ecc4", "committedDate": "2020-08-07T23:33:04Z", "message": "fixup! Address PR comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/5f1278ed2735f28fb7066156cb8fdceee412c786", "committedDate": "2020-08-07T23:38:57Z", "message": "fixup! Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjkwMDQ3", "url": "https://github.com/apache/beam/pull/12488#pullrequestreview-463690047", "createdAt": "2020-08-07T23:41:33Z", "commit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjkxODUw", "url": "https://github.com/apache/beam/pull/12488#pullrequestreview-463691850", "createdAt": "2020-08-07T23:50:56Z", "commit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1MDo1NlrOG9rm4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1MDo1NlrOG9rm4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDc4Nw==", "bodyText": "Is is possible to make this Exception more specific? Or that does not add more values?", "url": "https://github.com/apache/beam/pull/12488#discussion_r467330787", "createdAt": "2020-08-07T23:50:56Z", "author": {"login": "amaliujia"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjkyNjA5", "url": "https://github.com/apache/beam/pull/12488#pullrequestreview-463692609", "createdAt": "2020-08-07T23:55:01Z", "commit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1NTowMlrOG9rp3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1NTowMlrOG9rp3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTU1MQ==", "bodyText": "nit: I am not sure if there are other ways, but such sleep might be a source of flakiness. E.g. prior callbacks not finish after 100L.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467331551", "createdAt": "2020-08-07T23:55:02Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjkyNzU4", "url": "https://github.com/apache/beam/pull/12488#pullrequestreview-463692758", "createdAt": "2020-08-07T23:55:43Z", "commit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1NTo0M1rOG9rqXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1NTo0M1rOG9rqXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTY3OA==", "bodyText": "nit: same here.", "url": "https://github.com/apache/beam/pull/12488#discussion_r467331678", "createdAt": "2020-08-07T23:55:43Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/SplittableDoFnTest.java", "diffHunk": "@@ -839,19 +845,20 @@ public ProcessContinuation process(\n         RestrictionTracker<OffsetRange, Long> tracker,\n         BundleFinalizer bundleFinalizer)\n         throws InterruptedException {\n-      if (wasFinalized.get()) {\n+      if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+        tracker.tryClaim(tracker.currentRestriction().getFrom() + 1);\n+        receiver.output(element);\n         // Claim beyond the end now that we know we have been finalized.\n         tracker.tryClaim(Long.MAX_VALUE);\n-        receiver.output(element);\n         return stop();\n       }\n       if (tracker.tryClaim(tracker.currentRestriction().getFrom() + 1)) {\n         bundleFinalizer.afterBundleCommit(\n             Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n-            () -> wasFinalized.set(true));\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n         // We sleep here instead of setting a resume time since the resume time doesn't need to\n         // be honored.\n-        sleep(1000L); // 1 second\n+        sleep(100L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3776, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}