{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDMyODI5", "number": 11674, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMTozNTozMlrOD7ddfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowMjo1NFrOD9f-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjc1MjYzOnYy", "diffSide": "LEFT", "path": "sdks/java/build-tools/beam-linkage-check.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMTozNTozM1rOGTzEww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMTozNTozM1rOGTzEww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxMjkzMQ==", "bodyText": "No need to compare the output with diff command any more.", "url": "https://github.com/apache/beam/pull/11674#discussion_r423412931", "createdAt": "2020-05-12T01:35:33Z", "author": {"login": "suztomo"}, "path": "sdks/java/build-tools/beam-linkage-check.sh", "diffHunk": "@@ -66,51 +66,58 @@ if [ ! -z \"$(git diff)\" ]; then\n   exit 1\n fi\n \n+ACCUMULATED_RESULT=0\n+\n function runLinkageCheck () {\n   COMMIT=$1\n   BRANCH=$2\n+  MODE=$3 # baseline or validate\n   # An empty invocation so that the subsequent checkJavaLinkage does not\n   # contain garbage\n   echo \"`date`:\" \"Installing artifacts of ${BRANCH}(${COMMIT}) to Maven local repository.\"\n-  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core :checkJavaLinkage > /dev/null 2>&1\n+  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core -PjavaLinkageWriteBaseline=/dev/null :checkJavaLinkage > /dev/null 2>&1\n   for ARTIFACT in $ARTIFACTS; do\n-    echo \"`date`:\" \"Running linkage check for ${ARTIFACT} in ${BRANCH}\"\n-    # Removing time taken to have clean diff\n-    ./gradlew -Ppublishing -PjavaLinkageArtifactIds=$ARTIFACT :checkJavaLinkage |grep -v 'BUILD SUCCESSFUL in' | grep -v 'dependency paths' > ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\n-    echo \"`date`:\" \"Done: ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\"\n+    echo \"`date`:\" \"Running linkage check (${MODE}) for ${ARTIFACT} in ${BRANCH}\"\n+\n+    BASELINE_FILE=${OUTPUT_DIR}/baseline-${ARTIFACT}.xml\n+    if [ \"$MODE\" = \"baseline\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageWriteBaseline'\n+      echo \"`date`:\" \"to create a baseline (existing errors before change) $BASELINE_FILE\"\n+    elif [ \"$MODE\" = \"validate\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageReadBaseline'\n+      echo \"`date`:\" \"using baseline $BASELINE_FILE\"\n+    else\n+      echo \"invalid parameter for runLinkageCheck: ${MODE}\"\n+      exit 1\n+    fi\n+\n+    set +e\n+    ./gradlew -Ppublishing -PjavaLinkageArtifactIds=$ARTIFACT ${BASELINE_OPTION}=${BASELINE_FILE} :checkJavaLinkage\n+    RESULT=$?\n+    set -e\n+    if [ \"$MODE\" = \"validate\" ]; then\n+      echo \"`date`:\" \"Done: ${RESULT}\"\n+      ACCUMULATED_RESULT=$((ACCUMULATED_RESULT | RESULT))\n+    fi\n   done\n }\n \n+\n BRANCH_NAME=`git rev-parse --abbrev-ref HEAD`\n BRANCH_COMMIT=`git rev-parse --short=8 HEAD`\n-runLinkageCheck $BRANCH_COMMIT $BRANCH_NAME\n \n git fetch\n MASTER_COMMIT=`git rev-parse --short=8 origin/master`\n git -c advice.detachedHead=false checkout $MASTER_COMMIT\n-runLinkageCheck $MASTER_COMMIT master\n+runLinkageCheck $MASTER_COMMIT master baseline\n+\n \n # Restore original branch\n git checkout $BRANCH_NAME\n+runLinkageCheck $BRANCH_COMMIT $BRANCH_NAME validate\n \n-# Diff command can return non-zero status\n-set +e\n-\n-FOUND_DIFFERENCE=false\n-for ARTIFACT in $ARTIFACTS; do\n-  echo; echo\n-  echo \"Linkage Check difference on $ARTIFACT between master(${MASTER_COMMIT}) and ${BRANCH_NAME}(${BRANCH_COMMIT}):\"\n-  DIFF=$(diff ${OUTPUT_DIR}/${MASTER_COMMIT}-${ARTIFACT} ${OUTPUT_DIR}/${BRANCH_COMMIT}-${ARTIFACT})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d181899aeb182abd333841c8505154c8be199155"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODEzNTA0OnYy", "diffSide": "RIGHT", "path": "sdks/java/build-tools/beam-linkage-check.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowMjo1NFrOGXCBww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjozMjozM1rOGXJm3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwMzY1MQ==", "bodyText": "why is this invalid, it looks like the linkage checker supports running without specifying javaLinkageReadBaseline or javaLinkageWriteBaseline", "url": "https://github.com/apache/beam/pull/11674#discussion_r426803651", "createdAt": "2020-05-18T18:02:54Z", "author": {"login": "aaltay"}, "path": "sdks/java/build-tools/beam-linkage-check.sh", "diffHunk": "@@ -66,51 +66,61 @@ if [ ! -z \"$(git diff)\" ]; then\n   exit 1\n fi\n \n+ACCUMULATED_RESULT=0\n+\n function runLinkageCheck () {\n   COMMIT=$1\n   BRANCH=$2\n+  MODE=$3 # baseline or validate\n   # An empty invocation so that the subsequent checkJavaLinkage does not\n   # contain garbage\n   echo \"`date`:\" \"Installing artifacts of ${BRANCH}(${COMMIT}) to Maven local repository.\"\n-  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core :checkJavaLinkage > /dev/null 2>&1\n+  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core -PjavaLinkageWriteBaseline=/dev/null :checkJavaLinkage > /dev/null 2>&1\n   for ARTIFACT in $ARTIFACTS; do\n-    echo \"`date`:\" \"Running linkage check for ${ARTIFACT} in ${BRANCH}\"\n-    # Removing time taken to have clean diff\n-    ./gradlew -Ppublishing -PjavaLinkageArtifactIds=$ARTIFACT :checkJavaLinkage |grep -v 'BUILD SUCCESSFUL in' | grep -v 'dependency paths' > ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\n-    echo \"`date`:\" \"Done: ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\"\n+    echo \"`date`:\" \"Running linkage check (${MODE}) for ${ARTIFACT} in ${BRANCH}\"\n+\n+    BASELINE_FILE=${OUTPUT_DIR}/baseline-${ARTIFACT}.xml\n+    if [ \"$MODE\" = \"baseline\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageWriteBaseline'\n+      echo \"`date`:\" \"to create a baseline (existing errors before change) $BASELINE_FILE\"\n+    elif [ \"$MODE\" = \"validate\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageReadBaseline'\n+      echo \"`date`:\" \"using baseline $BASELINE_FILE\"\n+    else\n+      echo \"invalid parameter for runLinkageCheck: ${MODE}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d8e28d4d1c440c24e272e33a74c33d65b482bde"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3MTE5NA==", "bodyText": "Good point. Will fix that (I only thought about the use case from the shell script, but now I remember that directly running the task is also useful.)", "url": "https://github.com/apache/beam/pull/11674#discussion_r426871194", "createdAt": "2020-05-18T20:19:03Z", "author": {"login": "suztomo"}, "path": "sdks/java/build-tools/beam-linkage-check.sh", "diffHunk": "@@ -66,51 +66,61 @@ if [ ! -z \"$(git diff)\" ]; then\n   exit 1\n fi\n \n+ACCUMULATED_RESULT=0\n+\n function runLinkageCheck () {\n   COMMIT=$1\n   BRANCH=$2\n+  MODE=$3 # baseline or validate\n   # An empty invocation so that the subsequent checkJavaLinkage does not\n   # contain garbage\n   echo \"`date`:\" \"Installing artifacts of ${BRANCH}(${COMMIT}) to Maven local repository.\"\n-  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core :checkJavaLinkage > /dev/null 2>&1\n+  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core -PjavaLinkageWriteBaseline=/dev/null :checkJavaLinkage > /dev/null 2>&1\n   for ARTIFACT in $ARTIFACTS; do\n-    echo \"`date`:\" \"Running linkage check for ${ARTIFACT} in ${BRANCH}\"\n-    # Removing time taken to have clean diff\n-    ./gradlew -Ppublishing -PjavaLinkageArtifactIds=$ARTIFACT :checkJavaLinkage |grep -v 'BUILD SUCCESSFUL in' | grep -v 'dependency paths' > ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\n-    echo \"`date`:\" \"Done: ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\"\n+    echo \"`date`:\" \"Running linkage check (${MODE}) for ${ARTIFACT} in ${BRANCH}\"\n+\n+    BASELINE_FILE=${OUTPUT_DIR}/baseline-${ARTIFACT}.xml\n+    if [ \"$MODE\" = \"baseline\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageWriteBaseline'\n+      echo \"`date`:\" \"to create a baseline (existing errors before change) $BASELINE_FILE\"\n+    elif [ \"$MODE\" = \"validate\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageReadBaseline'\n+      echo \"`date`:\" \"using baseline $BASELINE_FILE\"\n+    else\n+      echo \"invalid parameter for runLinkageCheck: ${MODE}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwMzY1MQ=="}, "originalCommit": {"oid": "4d8e28d4d1c440c24e272e33a74c33d65b482bde"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNzgzOA==", "bodyText": "Fixed.", "url": "https://github.com/apache/beam/pull/11674#discussion_r426927838", "createdAt": "2020-05-18T22:32:33Z", "author": {"login": "suztomo"}, "path": "sdks/java/build-tools/beam-linkage-check.sh", "diffHunk": "@@ -66,51 +66,61 @@ if [ ! -z \"$(git diff)\" ]; then\n   exit 1\n fi\n \n+ACCUMULATED_RESULT=0\n+\n function runLinkageCheck () {\n   COMMIT=$1\n   BRANCH=$2\n+  MODE=$3 # baseline or validate\n   # An empty invocation so that the subsequent checkJavaLinkage does not\n   # contain garbage\n   echo \"`date`:\" \"Installing artifacts of ${BRANCH}(${COMMIT}) to Maven local repository.\"\n-  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core :checkJavaLinkage > /dev/null 2>&1\n+  ./gradlew -Ppublishing -PjavaLinkageArtifactIds=beam-sdks-java-core -PjavaLinkageWriteBaseline=/dev/null :checkJavaLinkage > /dev/null 2>&1\n   for ARTIFACT in $ARTIFACTS; do\n-    echo \"`date`:\" \"Running linkage check for ${ARTIFACT} in ${BRANCH}\"\n-    # Removing time taken to have clean diff\n-    ./gradlew -Ppublishing -PjavaLinkageArtifactIds=$ARTIFACT :checkJavaLinkage |grep -v 'BUILD SUCCESSFUL in' | grep -v 'dependency paths' > ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\n-    echo \"`date`:\" \"Done: ${OUTPUT_DIR}/${COMMIT}-${ARTIFACT}\"\n+    echo \"`date`:\" \"Running linkage check (${MODE}) for ${ARTIFACT} in ${BRANCH}\"\n+\n+    BASELINE_FILE=${OUTPUT_DIR}/baseline-${ARTIFACT}.xml\n+    if [ \"$MODE\" = \"baseline\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageWriteBaseline'\n+      echo \"`date`:\" \"to create a baseline (existing errors before change) $BASELINE_FILE\"\n+    elif [ \"$MODE\" = \"validate\" ]; then\n+      BASELINE_OPTION='-PjavaLinkageReadBaseline'\n+      echo \"`date`:\" \"using baseline $BASELINE_FILE\"\n+    else\n+      echo \"invalid parameter for runLinkageCheck: ${MODE}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwMzY1MQ=="}, "originalCommit": {"oid": "4d8e28d4d1c440c24e272e33a74c33d65b482bde"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3903, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}