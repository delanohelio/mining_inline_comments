{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzOTA2OTEz", "number": 10618, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMDoyNFrODan3EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMTo1MlrODan4Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQyNjQwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMDoyNFrOFhrmJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjozNDoxMlrOFhsOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTYwNw==", "bodyText": "Can you add this to SqlOperators.java and add the two calls above as a constant there instead?", "url": "https://github.com/apache/beam/pull/10618#discussion_r370861607", "createdAt": "2020-01-24T22:00:24Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -486,27 +489,38 @@ private RexNode convertRexNodeFromComputedColumnWithFieldList(\n         return rexBuilder()\n             .makeInputRef(fieldList.get(windowFieldIndex).getType(), windowFieldIndex);\n       case FIXED_WINDOW_END:\n-        // WINDOW END is a function call\n         operands.add(\n             rexBuilder().makeInputRef(fieldList.get(windowFieldIndex).getType(), windowFieldIndex));\n         // TODO: check window_end 's duration is the same as it's aggregate window.\n         operands.add(\n             convertIntervalToRexIntervalLiteral(\n                 (ResolvedLiteral) functionCall.getArgumentList().get(0)));\n-        return rexBuilder().makeCall(SqlStdOperatorTable.PLUS, operands);\n+        return rexBuilder()\n+            .makeCall(createSqlFunction(\"timestamp_add\", SqlTypeName.TIMESTAMP), operands);\n       case SLIDING_WINDOW_END:\n         operands.add(\n             rexBuilder().makeInputRef(fieldList.get(windowFieldIndex).getType(), windowFieldIndex));\n         operands.add(\n             convertIntervalToRexIntervalLiteral(\n                 (ResolvedLiteral) functionCall.getArgumentList().get(1)));\n-        return rexBuilder().makeCall(SqlStdOperatorTable.PLUS, operands);\n+        return rexBuilder()\n+            .makeCall(createSqlFunction(\"timestamp_add\", SqlTypeName.TIMESTAMP), operands);\n       default:\n         throw new RuntimeException(\n             \"Does not support window start/end: \" + functionCall.getFunction().getName());\n     }\n   }\n \n+  private SqlFunction createSqlFunction(String name, SqlTypeName returnType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfbfb44a3c08bc471a1a9bffb24bf8587d65481"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MTk5NQ==", "bodyText": "Done!", "url": "https://github.com/apache/beam/pull/10618#discussion_r370871995", "createdAt": "2020-01-24T22:34:12Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -486,27 +489,38 @@ private RexNode convertRexNodeFromComputedColumnWithFieldList(\n         return rexBuilder()\n             .makeInputRef(fieldList.get(windowFieldIndex).getType(), windowFieldIndex);\n       case FIXED_WINDOW_END:\n-        // WINDOW END is a function call\n         operands.add(\n             rexBuilder().makeInputRef(fieldList.get(windowFieldIndex).getType(), windowFieldIndex));\n         // TODO: check window_end 's duration is the same as it's aggregate window.\n         operands.add(\n             convertIntervalToRexIntervalLiteral(\n                 (ResolvedLiteral) functionCall.getArgumentList().get(0)));\n-        return rexBuilder().makeCall(SqlStdOperatorTable.PLUS, operands);\n+        return rexBuilder()\n+            .makeCall(createSqlFunction(\"timestamp_add\", SqlTypeName.TIMESTAMP), operands);\n       case SLIDING_WINDOW_END:\n         operands.add(\n             rexBuilder().makeInputRef(fieldList.get(windowFieldIndex).getType(), windowFieldIndex));\n         operands.add(\n             convertIntervalToRexIntervalLiteral(\n                 (ResolvedLiteral) functionCall.getArgumentList().get(1)));\n-        return rexBuilder().makeCall(SqlStdOperatorTable.PLUS, operands);\n+        return rexBuilder()\n+            .makeCall(createSqlFunction(\"timestamp_add\", SqlTypeName.TIMESTAMP), operands);\n       default:\n         throw new RuntimeException(\n             \"Does not support window start/end: \" + functionCall.getFunction().getName());\n     }\n   }\n \n+  private SqlFunction createSqlFunction(String name, SqlTypeName returnType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTYwNw=="}, "originalCommit": {"oid": "abfbfb44a3c08bc471a1a9bffb24bf8587d65481"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQyOTU5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SingleRowScanConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMTo1MlrOFhroPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjozNzoxNFrOFhsSCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjE0Mg==", "bodyText": "Does this actually do anything anymore? Can it be deleted?", "url": "https://github.com/apache/beam/pull/10618#discussion_r370862142", "createdAt": "2020-01-24T22:01:52Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SingleRowScanConverter.java", "diffHunk": "@@ -18,15 +18,8 @@\n package org.apache.beam.sdk.extensions.sql.zetasql.translation;\n \n import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedSingleRowScan;\n-import java.math.BigDecimal;\n import java.util.List;\n-import org.apache.beam.vendor.calcite.v1_20_0.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalValues;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n \n /** Converts a single row value. */\n class SingleRowScanConverter extends RelConverter<ResolvedSingleRowScan> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfbfb44a3c08bc471a1a9bffb24bf8587d65481"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NTg5Nw==", "bodyText": "You mean the entire SingleRowScanConverter class? This class is still used for generating a dummy single-row input to queries like SELECT \"hello\".", "url": "https://github.com/apache/beam/pull/10618#discussion_r370865897", "createdAt": "2020-01-24T22:13:35Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SingleRowScanConverter.java", "diffHunk": "@@ -18,15 +18,8 @@\n package org.apache.beam.sdk.extensions.sql.zetasql.translation;\n \n import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedSingleRowScan;\n-import java.math.BigDecimal;\n import java.util.List;\n-import org.apache.beam.vendor.calcite.v1_20_0.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalValues;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n \n /** Converts a single row value. */\n class SingleRowScanConverter extends RelConverter<ResolvedSingleRowScan> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjE0Mg=="}, "originalCommit": {"oid": "abfbfb44a3c08bc471a1a9bffb24bf8587d65481"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3Mjg0Mw==", "bodyText": "Yea, I think this whole class might be a no-op now, but we can worry about that later.", "url": "https://github.com/apache/beam/pull/10618#discussion_r370872843", "createdAt": "2020-01-24T22:37:14Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/SingleRowScanConverter.java", "diffHunk": "@@ -18,15 +18,8 @@\n package org.apache.beam.sdk.extensions.sql.zetasql.translation;\n \n import com.google.zetasql.resolvedast.ResolvedNodes.ResolvedSingleRowScan;\n-import java.math.BigDecimal;\n import java.util.List;\n-import org.apache.beam.vendor.calcite.v1_20_0.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalValues;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n-import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n \n /** Converts a single row value. */\n class SingleRowScanConverter extends RelConverter<ResolvedSingleRowScan> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjE0Mg=="}, "originalCommit": {"oid": "abfbfb44a3c08bc471a1a9bffb24bf8587d65481"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2198, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}