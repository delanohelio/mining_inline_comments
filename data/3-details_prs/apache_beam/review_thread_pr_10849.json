{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0Nzk4NTY0", "number": 10849, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1MjoyNlrODfnyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoyODo0OFrODf9q0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg0MzA1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1MjoyNlrOFpbk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1MjoyNlrOFpbk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4Nzc2Mg==", "bodyText": "Would it make sense to default to the project from gcp options?", "url": "https://github.com/apache/beam/pull/10849#discussion_r378987762", "createdAt": "2020-02-13T16:52:26Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg1MjI5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1NTowM1rOFpbqzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowOToxOVrOFpvyjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4OTI2MQ==", "bodyText": "Let's do more explicit imports here\ne.g.\nfrom apache_beam.transforms import ParDo\nfrom apache_beam.transforms import PTransform\nthen use them directly like PTransform instead of the beam.PTransform style.", "url": "https://github.com/apache/beam/pull/10849#discussion_r378989261", "createdAt": "2020-02-13T16:55:03Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxODkyNQ==", "bodyText": "Ok!", "url": "https://github.com/apache/beam/pull/10849#discussion_r379318925", "createdAt": "2020-02-14T09:09:19Z", "author": {"login": "mwalenia"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4OTI2MQ=="}, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg2MTk0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1NzozMVrOFpbwyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowODowOFrOFpvwrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MDc5NQ==", "bodyText": "Arg order is not consistent with the MaskDetectedDetails transform. MaskDetectedDetails has:\n      project=None,\n      deidentification_template_name=None,\n      deidentification_config=None,\n      inspection_template_name=None,\n      inspection_config=None,\n\nThis one is:\n      inspection_template_name=None,\n      inspection_config=None,\n      project=None,\n      timeout=None", "url": "https://github.com/apache/beam/pull/10849#discussion_r378990795", "createdAt": "2020-02-13T16:57:31Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxODQ0Ng==", "bodyText": "Yeah, I'll rearrange it", "url": "https://github.com/apache/beam/pull/10849#discussion_r379318446", "createdAt": "2020-02-14T09:08:08Z", "author": {"login": "mwalenia"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5MDc5NQ=="}, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg4NDYxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowMjo0MlrOFpb_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowNzo1NFrOFpvwWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NDQ5MQ==", "bodyText": "retry argument is defined as\nretry (Optional[google.api_core.retry.Retry]) \u2013 A retry object used to retry requests. If None is specified, requests will be retried using a default configuration.\n\n(https://googleapis.dev/python/dlp/latest/gapic/v2/api.html)\nI do not believe retry.with_exponential_backoff returns a object of type google.api_core.retry.Retry", "url": "https://github.com/apache/beam/pull/10849#discussion_r378994491", "createdAt": "2020-02-13T17:02:42Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      project=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`InspectForDetails` transform.\n+    Args:\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      project (str): Required. Name of GCP project in which the processing\n+        will take place.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.project = project\n+    self.timeout = timeout\n+    self.config = {}\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return pcoll | beam.ParDo(\n+        _InspectFn(self.config, self.timeout, self.project))\n+\n+\n+class _DeidentifyFn(beam.DoFn):\n+  def __init__(self, config=None, timeout=None, project=None, client=None):\n+    self.config = config\n+    self.timeout = timeout\n+    self.client = client\n+    self.project = project\n+\n+  def start_bundle(self):\n+    if self.client is None:\n+      self.client = dlp_v2.DlpServiceClient()\n+\n+  def process(self, element, **kwargs):\n+    params = {\n+        'timeout': self.timeout,\n+        'retry': retry.with_exponential_backoff(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxODM2MQ==", "bodyText": "You're right. Let's stick with the default here.", "url": "https://github.com/apache/beam/pull/10849#discussion_r379318361", "createdAt": "2020-02-14T09:07:54Z", "author": {"login": "mwalenia"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      project=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`InspectForDetails` transform.\n+    Args:\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      project (str): Required. Name of GCP project in which the processing\n+        will take place.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.project = project\n+    self.timeout = timeout\n+    self.config = {}\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return pcoll | beam.ParDo(\n+        _InspectFn(self.config, self.timeout, self.project))\n+\n+\n+class _DeidentifyFn(beam.DoFn):\n+  def __init__(self, config=None, timeout=None, project=None, client=None):\n+    self.config = config\n+    self.timeout = timeout\n+    self.client = client\n+    self.project = project\n+\n+  def start_bundle(self):\n+    if self.client is None:\n+      self.client = dlp_v2.DlpServiceClient()\n+\n+  def process(self, element, **kwargs):\n+    params = {\n+        'timeout': self.timeout,\n+        'retry': retry.with_exponential_backoff(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NDQ5MQ=="}, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDg4OTYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowMzozNFrOFpcCcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOToxODoyOVrOFpwCwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NTMxMw==", "bodyText": "params and params.update, could it move to start_bundle?", "url": "https://github.com/apache/beam/pull/10849#discussion_r378995313", "createdAt": "2020-02-13T17:03:34Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      project=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`InspectForDetails` transform.\n+    Args:\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      project (str): Required. Name of GCP project in which the processing\n+        will take place.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.project = project\n+    self.timeout = timeout\n+    self.config = {}\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return pcoll | beam.ParDo(\n+        _InspectFn(self.config, self.timeout, self.project))\n+\n+\n+class _DeidentifyFn(beam.DoFn):\n+  def __init__(self, config=None, timeout=None, project=None, client=None):\n+    self.config = config\n+    self.timeout = timeout\n+    self.client = client\n+    self.project = project\n+\n+  def start_bundle(self):\n+    if self.client is None:\n+      self.client = dlp_v2.DlpServiceClient()\n+\n+  def process(self, element, **kwargs):\n+    params = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyMzA3Mg==", "bodyText": "I moved it to setup(). Will that be OK?", "url": "https://github.com/apache/beam/pull/10849#discussion_r379323072", "createdAt": "2020-02-14T09:18:29Z", "author": {"login": "mwalenia"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,224 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+import apache_beam as beam\n+from apache_beam.utils import retry\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(beam.PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',\n+      deidentification_config={\n+          'info_type_transformations: {\n+              'transformations': [{\n+                  'primitive_transformation': {\n+                      'character_mask_config': {\n+                          'masking_character': '#'\n+                      }\n+                  }\n+              }]\n+          }\n+      }, inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      project=None,\n+      deidentification_template_name=None,\n+      deidentification_config=None,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`MaskDetectedDetails` transform.\n+    Args:\n+      project (str): Required. GCP project in which the data processing is\n+        to be done\n+      deidentification_template_name (str): Either this or\n+        `deidentification_config` required. Name of\n+        deidentification template to be used on detected sensitive information\n+        instances in text.\n+      deidentification_config\n+        (``Union[dict, google.cloud.dlp_v2.types.DeidentifyConfig]``):\n+        Configuration for the de-identification of the content item.\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.config = {}\n+    self.project = project\n+    self.timeout = timeout\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if deidentification_template_name is not None \\\n+        and deidentification_config is not None:\n+      raise ValueError(\n+          'Both deidentification_template_name and '\n+          'deidentification_config were specified.'\n+          ' Please specify only one of these.')\n+    elif deidentification_template_name is None \\\n+        and deidentification_config is None:\n+      raise ValueError(\n+          'deidentification_template_name or '\n+          'deidentification_config must be specified.')\n+    elif deidentification_template_name is not None:\n+      self.config['deidentify_template_name'] = deidentification_template_name\n+    else:\n+      self.config['deidentify_config'] = deidentification_config\n+\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return (\n+        pcoll\n+        | beam.ParDo(_DeidentifyFn(self.config, self.timeout, self.project)))\n+\n+\n+@experimental()\n+class InspectForDetails(beam.PTransform):\n+  \"\"\"Inspects input text for sensitive information.\n+  the ``PTransform`` returns a ``PCollection`` of\n+  ``List[google.cloud.dlp_v2.proto.dlp_pb2.Finding]``\n+  Example usage::\n+      pipeline | InspectForDetails(project='example-gcp-project',\n+                inspection_config={'info_types': [{'name': 'EMAIL_ADDRESS'}]})\n+  \"\"\"\n+  def __init__(\n+      self,\n+      inspection_template_name=None,\n+      inspection_config=None,\n+      project=None,\n+      timeout=None):\n+    \"\"\"Initializes a :class:`InspectForDetails` transform.\n+    Args:\n+      inspection_template_name (str): This or `inspection_config` required.\n+        Name of inspection template to be used\n+        to detect sensitive data in text.\n+      inspection_config\n+        (``Union[dict, google.cloud.dlp_v2.types.InspectConfig]``):\n+        Configuration for the inspector used to detect sensitive data in text.\n+      project (str): Required. Name of GCP project in which the processing\n+        will take place.\n+      timeout (float): Optional. The amount of time, in seconds, to wait for\n+        the request to complete.\n+    \"\"\"\n+    self.project = project\n+    self.timeout = timeout\n+    self.config = {}\n+    if project is None:\n+      raise ValueError(\n+          'GCP project name needs to be specified in \"project\" property')\n+    if inspection_template_name is not None and inspection_config is not None:\n+      raise ValueError(\n+          'Both inspection_template_name and '\n+          'inspection_template were specified.'\n+          ' Please specify ony one of these.')\n+    elif inspection_config is None and inspection_template_name is None:\n+      raise ValueError(\n+          'inspection_template_name or inspection_config must be specified')\n+    elif inspection_template_name is not None:\n+      self.config['inspect_template_name'] = inspection_template_name\n+    elif inspection_config is not None:\n+      self.config['inspect_config'] = inspection_config\n+\n+  def expand(self, pcoll):\n+    return pcoll | beam.ParDo(\n+        _InspectFn(self.config, self.timeout, self.project))\n+\n+\n+class _DeidentifyFn(beam.DoFn):\n+  def __init__(self, config=None, timeout=None, project=None, client=None):\n+    self.config = config\n+    self.timeout = timeout\n+    self.client = client\n+    self.project = project\n+\n+  def start_bundle(self):\n+    if self.client is None:\n+      self.client = dlp_v2.DlpServiceClient()\n+\n+  def process(self, element, **kwargs):\n+    params = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5NTMxMw=="}, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkxMTM4OnYy", "diffSide": "RIGHT", "path": "sdks/python/setup.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTo0NlrOFpcQVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzowOTo0NlrOFpcQVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5ODg2OQ==", "bodyText": "Version after 0.13 will not support py2. (notice at the top: https://googleapis.dev/python/dlp/latest/gapic/v2/api.html)\nI wonder if we need to add a comment note here for the person that will upgrade version ranges next?", "url": "https://github.com/apache/beam/pull/10849#discussion_r378998869", "createdAt": "2020-02-13T17:09:46Z", "author": {"login": "aaltay"}, "path": "sdks/python/setup.py", "diffHunk": "@@ -203,6 +203,7 @@ def get_version():\n     'google-cloud-bigquery>=1.6.0,<1.18.0',\n     'google-cloud-core>=0.28.1,<2',\n     'google-cloud-bigtable>=0.31.1,<1.1.0',\n+    'google-cloud-dlp >=0.12.0,<=0.13.0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1bdb3e5ce2979bc210da8270ca7047f08dc5e8c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODQyODMyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoyODo0OFrOFp-JaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoyODo0OFrOFp-JaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NDE1Mg==", "bodyText": "You may need to update this example for the project argument.", "url": "https://github.com/apache/beam/pull/10849#discussion_r379554152", "createdAt": "2020-02-14T17:28:48Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/ml/gcp/cloud_dlp.py", "diffHunk": "@@ -0,0 +1,214 @@\n+#  /*\n+#   * Licensed to the Apache Software Foundation (ASF) under one\n+#   * or more contributor license agreements.  See the NOTICE file\n+#   * distributed with this work for additional information\n+#   * regarding copyright ownership.  The ASF licenses this file\n+#   * to you under the Apache License, Version 2.0 (the\n+#   * \"License\"); you may not use this file except in compliance\n+#   * with the License.  You may obtain a copy of the License at\n+#   *\n+#   *     http://www.apache.org/licenses/LICENSE-2.0\n+#   *\n+#   * Unless required by applicable law or agreed to in writing, software\n+#   * distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   * See the License for the specific language governing permissions and\n+#   * limitations under the License.\n+#   */\n+\n+\"\"\"``PTransforms`` that implement Google Cloud Data Loss Prevention\n+    functionality.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import logging\n+\n+from google.cloud import dlp_v2\n+\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.transforms import DoFn\n+from apache_beam.transforms import ParDo\n+from apache_beam.transforms import PTransform\n+from apache_beam.utils.annotations import experimental\n+\n+__all__ = ['MaskDetectedDetails', 'InspectForDetails']\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+@experimental()\n+class MaskDetectedDetails(PTransform):\n+  \"\"\"Scrubs sensitive information detected in text.\n+  The ``PTransform`` returns a ``PCollection`` of ``str``\n+  Example usage::\n+    pipeline | MaskDetectedDetails(project='example-gcp-project',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6882fe8b681bf16cea0e8dd23b41f54580e3b636"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2001, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}