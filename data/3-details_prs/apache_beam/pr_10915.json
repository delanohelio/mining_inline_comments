{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTA1MDUz", "number": 10915, "title": "[BEAM-8335] Add PCollection to DataFrame logic for InteractiveRunner.", "bodyText": "This adds logic to convert materialized elements from a PCollection and a PCollection element_type into a Pandas DataFrame.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-20T18:18:42Z", "url": "https://github.com/apache/beam/pull/10915", "merged": true, "mergeCommit": {"oid": "a29fdff8c089cb5734019f373d0825ddd515befb"}, "closed": true, "closedAt": "2020-03-02T23:58:52Z", "author": {"login": "rohdesamuel"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGPiHYAFqTM2MjEzNTM1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ2v0HAFqTM2NzYxNjI0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTM1MzU3", "url": "https://github.com/apache/beam/pull/10915#pullrequestreview-362135357", "createdAt": "2020-02-20T18:32:19Z", "commit": {"oid": "302ce72f9bae5969bff837d209b62ca26a9fe5e2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozMjoyMFrOFsee7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozNToyNVrOFselLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MTEwMA==", "bodyText": "nit: remove extra space", "url": "https://github.com/apache/beam/pull/10915#discussion_r382181100", "createdAt": "2020-02-20T18:32:20Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,113 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "302ce72f9bae5969bff837d209b62ca26a9fe5e2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MjAxNw==", "bodyText": "nit: can this just be prefix?", "url": "https://github.com/apache/beam/pull/10915#discussion_r382182017", "createdAt": "2020-02-20T18:34:03Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,113 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):\n+  elements = []\n+  columns = []\n+\n+  # Recurse if there are a known length of columns to parse into.\n+  if isinstance(element_type, (th.TupleHint.TupleConstraint)):\n+    for index, t in enumerate(element_type._inner_types()):\n+      underlying_columns, underlying_elements = parse_row_(el[index], t,\n+                                                           depth + 1)\n+      column = '[{}]'.format(index)\n+      if underlying_columns:\n+        columns += [column + c for c in underlying_columns]\n+      else:\n+        columns += [column]\n+      elements += underlying_elements\n+\n+  # Don't make new columns for variable length types.\n+  elif isinstance(\n+      element_type,\n+      (th.ListHint.ListConstraint, th.TupleHint.TupleSequenceConstraint)):\n+    elements = [pd.array(el)]\n+\n+  # For any other types, try to parse as a namedtuple, otherwise pass element\n+  # through.\n+  else:\n+    fields = getattr(el, '_fields', None)\n+    if fields:\n+      columns = list(fields)\n+      if depth > 0:\n+        columns = ['[{}]'.format(f) for f in fields]\n+      elements = [el._asdict()[f] for f in fields]\n+    else:\n+      elements = [el]\n+  return columns, elements\n+\n+\n+def parse_row(el, element_type, include_window_info=True, prefix=COLUMN_PREFIX):\n+  # Reify the WindowedValue data to the Dataframe if asked.\n+  windowed = None\n+  if isinstance(el, WindowedValue):\n+    if include_window_info:\n+      windowed = el\n+    el = el.value\n+\n+  # Parse the elements with the given type.\n+  columns, elements = parse_row_(el, element_type, 0)\n+\n+  # If there are no columns returned, there is only a single column of a\n+  # primitive data type.\n+  if not columns:\n+    columns = ['']\n+\n+  # Add the prefix to the columns that have an index.\n+  for i in range(len(columns)):\n+    if columns[i] == '' or columns[i][0] == '[':\n+      columns[i] = prefix + columns[i]\n+\n+  # Reify the windowed columns and do a best-effort casting into Pandas DTypes.\n+  if windowed:\n+    columns += ['event_time', 'windows', 'pane_info']\n+    elements += [\n+        windowed.timestamp.micros, windowed.windows, windowed.pane_info\n+    ]\n+  return columns, elements\n+\n+\n+def pcoll_to_df(\n+    elements, element_type, include_window_info=False, prefix=COLUMN_PREFIX):\n+  \"\"\"Parses the given elements into a Dataframe.\n+\n+  Each column name will be prefixed with `prefix` concatenated with the nested\n+  index, e.g. for a Tuple[Tuple[int, str], int], the column names will be:\n+  [prefix[0][0], prefix[0][1], prefix[0]]. This is subject to change.\n+  \"\"\"\n+  rows = []\n+  columns = []\n+\n+  for e in elements:\n+    columns, row = parse_row(e, element_type, include_window_info,\n+                             prefix=prefix)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "302ce72f9bae5969bff837d209b62ca26a9fe5e2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MjcwMA==", "bodyText": "Can the tests be assigned meaningful names? Also test_parse_5 occurred twice.", "url": "https://github.com/apache/beam/pull/10915#discussion_r382182700", "createdAt": "2020-02-20T18:35:25Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/utils_test.py", "diffHunk": "@@ -0,0 +1,138 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import pandas as pd\n+\n+from apache_beam.runners.interactive import utils\n+from apache_beam.typehints.typehints import Any\n+from apache_beam.typehints.typehints import Dict\n+from apache_beam.typehints.typehints import List\n+from apache_beam.typehints.typehints import Tuple\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+\n+class ParseToDataframeTest(unittest.TestCase):\n+  def test_parse_1(self):\n+    el = (1, 'a')\n+    element_type = Tuple[int, str]\n+\n+    columns, elements = utils.parse_row(el, element_type)\n+    self.assertEqual(columns, ['el[0]', 'el[1]'])\n+    self.assertEqual(elements, [1, 'a'])\n+\n+  def test_parse_2(self):\n+    el = ((1, 2.0, 'a'), 'b')\n+    element_type = Tuple[Tuple[int, float, str], str]\n+\n+    columns, elements = utils.parse_row(el, element_type)\n+    self.assertEqual(columns, ['el[0][0]', 'el[0][1]', 'el[0][2]', 'el[1]'])\n+    self.assertEqual(elements, [1, 2.0, 'a', 'b'])\n+\n+  def test_parse_3(self):\n+    el = [1, 2, 3]\n+    element_type = List[int]\n+\n+    columns, elements = utils.parse_row(el, element_type)\n+    self.assertEqual(columns, ['el'])\n+    self.assertEqual(elements, [[1, 2, 3]])\n+\n+  def test_parse_4(self):\n+    el = ('k', [1, 2, 3])\n+    element_type = Tuple[str, List[int]]\n+\n+    columns, elements = utils.parse_row(el, element_type)\n+    self.assertEqual(columns, ['el[0]', 'el[1]'])\n+    self.assertEqual(elements, ['k', [1, 2, 3]])\n+\n+  def test_parse_5(self):\n+    el = (([1, 2, 3], {'b': 1, 'c': 2}), 'a')\n+    element_type = Tuple[Tuple[List[int], Dict[str, int]], str]\n+\n+    columns, elements = utils.parse_row(el, element_type)\n+    self.assertEqual(columns, ['el[0][0]', 'el[0][1]', 'el[1]'])\n+    self.assertEqual(elements, [[1, 2, 3], {'b': 1, 'c': 2}, 'a'])\n+\n+  def test_parse_5(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "302ce72f9bae5969bff837d209b62ca26a9fe5e2"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/083723a5b17fc3b24225d92d2b3e6cb9a9122606", "committedDate": "2020-02-20T18:38:17Z", "message": "[BEAM-8335] Add PCollection to Dataframe logic for InteractiveRunner.\n\nChange-Id: I180c5da914da3e7d5830d3272b2bb6587fd338b2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "302ce72f9bae5969bff837d209b62ca26a9fe5e2", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/302ce72f9bae5969bff837d209b62ca26a9fe5e2", "committedDate": "2020-02-20T18:12:19Z", "message": "[BEAM-8335] Add PCollection to Dataframe logic for InteractiveRunner.\n\nChange-Id: I180c5da914da3e7d5830d3272b2bb6587fd338b2"}, "afterCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/083723a5b17fc3b24225d92d2b3e6cb9a9122606", "committedDate": "2020-02-20T18:38:17Z", "message": "[BEAM-8335] Add PCollection to Dataframe logic for InteractiveRunner.\n\nChange-Id: I180c5da914da3e7d5830d3272b2bb6587fd338b2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Mzk4NzYw", "url": "https://github.com/apache/beam/pull/10915#pullrequestreview-364398760", "createdAt": "2020-02-25T19:45:16Z", "commit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo0NToxNlrOFuSxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowNzozOVrOFuTeqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NjI4MA==", "bodyText": "The convention in Python is to put the underscore before for a private method. Also, I'd call this \"_parse_row_internal\" or similar to make it easier to read. And at least a one-line docstring explaining what the intent of this function is.", "url": "https://github.com/apache/beam/pull/10915#discussion_r384086280", "createdAt": "2020-02-25T19:45:16Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4OTExOQ==", "bodyText": "We typically use e or elt for abbreviating element. el evokes either the letter L (making it hard to read aloud/talk about) or the hebrew Deity. This goes for the variable names below as well.", "url": "https://github.com/apache/beam/pull/10915#discussion_r384089119", "createdAt": "2020-02-25T19:50:34Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MDg4OA==", "bodyText": "https://engdoc.corp.google.com/eng/doc/devguide/py/totw/026.md?cl=head", "url": "https://github.com/apache/beam/pull/10915#discussion_r384090888", "createdAt": "2020-02-25T19:53:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):\n+  elements = []\n+  columns = []\n+\n+  # Recurse if there are a known length of columns to parse into.\n+  if isinstance(element_type, (th.TupleHint.TupleConstraint)):\n+    for index, t in enumerate(element_type._inner_types()):\n+      underlying_columns, underlying_elements = parse_row_(el[index], t,\n+                                                           depth + 1)\n+      column = '[{}]'.format(index)\n+      if underlying_columns:\n+        columns += [column + c for c in underlying_columns]\n+      else:\n+        columns += [column]\n+      elements += underlying_elements\n+\n+  # Don't make new columns for variable length types.\n+  elif isinstance(\n+      element_type,\n+      (th.ListHint.ListConstraint, th.TupleHint.TupleSequenceConstraint)):\n+    elements = [pd.array(el)]\n+\n+  # For any other types, try to parse as a namedtuple, otherwise pass element\n+  # through.\n+  else:\n+    fields = getattr(el, '_fields', None)\n+    if fields:\n+      columns = list(fields)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MzQ3Mw==", "bodyText": "Doing an isinstance check would be preferable to checking a private variable.", "url": "https://github.com/apache/beam/pull/10915#discussion_r384093473", "createdAt": "2020-02-25T19:58:24Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):\n+  elements = []\n+  columns = []\n+\n+  # Recurse if there are a known length of columns to parse into.\n+  if isinstance(element_type, (th.TupleHint.TupleConstraint)):\n+    for index, t in enumerate(element_type._inner_types()):\n+      underlying_columns, underlying_elements = parse_row_(el[index], t,\n+                                                           depth + 1)\n+      column = '[{}]'.format(index)\n+      if underlying_columns:\n+        columns += [column + c for c in underlying_columns]\n+      else:\n+        columns += [column]\n+      elements += underlying_elements\n+\n+  # Don't make new columns for variable length types.\n+  elif isinstance(\n+      element_type,\n+      (th.ListHint.ListConstraint, th.TupleHint.TupleSequenceConstraint)):\n+    elements = [pd.array(el)]\n+\n+  # For any other types, try to parse as a namedtuple, otherwise pass element\n+  # through.\n+  else:\n+    fields = getattr(el, '_fields', None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MzY2OA==", "bodyText": "getattr(el, f) would be more natural. Or just list(elt) as the fields should be in the proper order.", "url": "https://github.com/apache/beam/pull/10915#discussion_r384093668", "createdAt": "2020-02-25T19:58:47Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):\n+  elements = []\n+  columns = []\n+\n+  # Recurse if there are a known length of columns to parse into.\n+  if isinstance(element_type, (th.TupleHint.TupleConstraint)):\n+    for index, t in enumerate(element_type._inner_types()):\n+      underlying_columns, underlying_elements = parse_row_(el[index], t,\n+                                                           depth + 1)\n+      column = '[{}]'.format(index)\n+      if underlying_columns:\n+        columns += [column + c for c in underlying_columns]\n+      else:\n+        columns += [column]\n+      elements += underlying_elements\n+\n+  # Don't make new columns for variable length types.\n+  elif isinstance(\n+      element_type,\n+      (th.ListHint.ListConstraint, th.TupleHint.TupleSequenceConstraint)):\n+    elements = [pd.array(el)]\n+\n+  # For any other types, try to parse as a namedtuple, otherwise pass element\n+  # through.\n+  else:\n+    fields = getattr(el, '_fields', None)\n+    if fields:\n+      columns = list(fields)\n+      if depth > 0:\n+        columns = ['[{}]'.format(f) for f in fields]\n+      elements = [el._asdict()[f] for f in fields]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjA5Mg==", "bodyText": "I would suggest having a format column.field.0.1. I think this could simplify your code quite a bit (e.g. you could only have one parse_row that recursively calls itself with an increasingly longer prefix). (As a bonus, easier on the eyes.)", "url": "https://github.com/apache/beam/pull/10915#discussion_r384096092", "createdAt": "2020-02-25T20:03:41Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):\n+  elements = []\n+  columns = []\n+\n+  # Recurse if there are a known length of columns to parse into.\n+  if isinstance(element_type, (th.TupleHint.TupleConstraint)):\n+    for index, t in enumerate(element_type._inner_types()):\n+      underlying_columns, underlying_elements = parse_row_(el[index], t,\n+                                                           depth + 1)\n+      column = '[{}]'.format(index)\n+      if underlying_columns:\n+        columns += [column + c for c in underlying_columns]\n+      else:\n+        columns += [column]\n+      elements += underlying_elements\n+\n+  # Don't make new columns for variable length types.\n+  elif isinstance(\n+      element_type,\n+      (th.ListHint.ListConstraint, th.TupleHint.TupleSequenceConstraint)):\n+    elements = [pd.array(el)]\n+\n+  # For any other types, try to parse as a namedtuple, otherwise pass element\n+  # through.\n+  else:\n+    fields = getattr(el, '_fields', None)\n+    if fields:\n+      columns = list(fields)\n+      if depth > 0:\n+        columns = ['[{}]'.format(f) for f in fields]\n+      elements = [el._asdict()[f] for f in fields]\n+    else:\n+      elements = [el]\n+  return columns, elements\n+\n+\n+def parse_row(el, element_type, include_window_info=True, prefix=COLUMN_PREFIX):\n+  # Reify the WindowedValue data to the Dataframe if asked.\n+  windowed = None\n+  if isinstance(el, WindowedValue):\n+    if include_window_info:\n+      windowed = el\n+    el = el.value\n+\n+  # Parse the elements with the given type.\n+  columns, elements = parse_row_(el, element_type, 0)\n+\n+  # If there are no columns returned, there is only a single column of a\n+  # primitive data type.\n+  if not columns:\n+    columns = ['']\n+\n+  # Add the prefix to the columns that have an index.\n+  for i in range(len(columns)):\n+    if columns[i] == '' or columns[i][0] == '[':\n+      columns[i] = prefix + columns[i]\n+\n+  # Reify the windowed columns and do a best-effort casting into Pandas DTypes.\n+  if windowed:\n+    columns += ['event_time', 'windows', 'pane_info']\n+    elements += [\n+        windowed.timestamp.micros, windowed.windows, windowed.pane_info\n+    ]\n+  return columns, elements\n+\n+\n+def pcoll_to_df(\n+    elements, element_type, include_window_info=False, prefix=COLUMN_PREFIX):\n+  \"\"\"Parses the given elements into a Dataframe.\n+\n+  Each column name will be prefixed with `prefix` concatenated with the nested\n+  index, e.g. for a Tuple[Tuple[int, str], int], the column names will be:\n+  [prefix[0][0], prefix[0][1], prefix[0]]. This is subject to change.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NzUzNg==", "bodyText": "When can columns[i] be the empty string? Also, when would it not be []. There seems to be an off-by-one to have to handle the base case in both the caller and the callee.", "url": "https://github.com/apache/beam/pull/10915#discussion_r384097536", "createdAt": "2020-02-25T20:06:45Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):\n+  elements = []\n+  columns = []\n+\n+  # Recurse if there are a known length of columns to parse into.\n+  if isinstance(element_type, (th.TupleHint.TupleConstraint)):\n+    for index, t in enumerate(element_type._inner_types()):\n+      underlying_columns, underlying_elements = parse_row_(el[index], t,\n+                                                           depth + 1)\n+      column = '[{}]'.format(index)\n+      if underlying_columns:\n+        columns += [column + c for c in underlying_columns]\n+      else:\n+        columns += [column]\n+      elements += underlying_elements\n+\n+  # Don't make new columns for variable length types.\n+  elif isinstance(\n+      element_type,\n+      (th.ListHint.ListConstraint, th.TupleHint.TupleSequenceConstraint)):\n+    elements = [pd.array(el)]\n+\n+  # For any other types, try to parse as a namedtuple, otherwise pass element\n+  # through.\n+  else:\n+    fields = getattr(el, '_fields', None)\n+    if fields:\n+      columns = list(fields)\n+      if depth > 0:\n+        columns = ['[{}]'.format(f) for f in fields]\n+      elements = [el._asdict()[f] for f in fields]\n+    else:\n+      elements = [el]\n+  return columns, elements\n+\n+\n+def parse_row(el, element_type, include_window_info=True, prefix=COLUMN_PREFIX):\n+  # Reify the WindowedValue data to the Dataframe if asked.\n+  windowed = None\n+  if isinstance(el, WindowedValue):\n+    if include_window_info:\n+      windowed = el\n+    el = el.value\n+\n+  # Parse the elements with the given type.\n+  columns, elements = parse_row_(el, element_type, 0)\n+\n+  # If there are no columns returned, there is only a single column of a\n+  # primitive data type.\n+  if not columns:\n+    columns = ['']\n+\n+  # Add the prefix to the columns that have an index.\n+  for i in range(len(columns)):\n+    if columns[i] == '' or columns[i][0] == '[':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5Nzk2MA==", "bodyText": "Would it be better to infer the schema once, then apply all rows, rather than re-parse it for every element? (Also, that way you could correctly detect/handle if the schema is not consistent, e.g. tuples of varying length.)", "url": "https://github.com/apache/beam/pull/10915#discussion_r384097960", "createdAt": "2020-02-25T20:07:39Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,112 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.typehints import typehints as th\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+COLUMN_PREFIX = 'el'\n+\n+\n+def parse_row_(el, element_type, depth):\n+  elements = []\n+  columns = []\n+\n+  # Recurse if there are a known length of columns to parse into.\n+  if isinstance(element_type, (th.TupleHint.TupleConstraint)):\n+    for index, t in enumerate(element_type._inner_types()):\n+      underlying_columns, underlying_elements = parse_row_(el[index], t,\n+                                                           depth + 1)\n+      column = '[{}]'.format(index)\n+      if underlying_columns:\n+        columns += [column + c for c in underlying_columns]\n+      else:\n+        columns += [column]\n+      elements += underlying_elements\n+\n+  # Don't make new columns for variable length types.\n+  elif isinstance(\n+      element_type,\n+      (th.ListHint.ListConstraint, th.TupleHint.TupleSequenceConstraint)):\n+    elements = [pd.array(el)]\n+\n+  # For any other types, try to parse as a namedtuple, otherwise pass element\n+  # through.\n+  else:\n+    fields = getattr(el, '_fields', None)\n+    if fields:\n+      columns = list(fields)\n+      if depth > 0:\n+        columns = ['[{}]'.format(f) for f in fields]\n+      elements = [el._asdict()[f] for f in fields]\n+    else:\n+      elements = [el]\n+  return columns, elements\n+\n+\n+def parse_row(el, element_type, include_window_info=True, prefix=COLUMN_PREFIX):\n+  # Reify the WindowedValue data to the Dataframe if asked.\n+  windowed = None\n+  if isinstance(el, WindowedValue):\n+    if include_window_info:\n+      windowed = el\n+    el = el.value\n+\n+  # Parse the elements with the given type.\n+  columns, elements = parse_row_(el, element_type, 0)\n+\n+  # If there are no columns returned, there is only a single column of a\n+  # primitive data type.\n+  if not columns:\n+    columns = ['']\n+\n+  # Add the prefix to the columns that have an index.\n+  for i in range(len(columns)):\n+    if columns[i] == '' or columns[i][0] == '[':\n+      columns[i] = prefix + columns[i]\n+\n+  # Reify the windowed columns and do a best-effort casting into Pandas DTypes.\n+  if windowed:\n+    columns += ['event_time', 'windows', 'pane_info']\n+    elements += [\n+        windowed.timestamp.micros, windowed.windows, windowed.pane_info\n+    ]\n+  return columns, elements\n+\n+\n+def pcoll_to_df(\n+    elements, element_type, include_window_info=False, prefix=COLUMN_PREFIX):\n+  \"\"\"Parses the given elements into a Dataframe.\n+\n+  Each column name will be prefixed with `prefix` concatenated with the nested\n+  index, e.g. for a Tuple[Tuple[int, str], int], the column names will be:\n+  [prefix[0][0], prefix[0][1], prefix[0]]. This is subject to change.\n+  \"\"\"\n+  rows = []\n+  columns = []\n+\n+  for e in elements:\n+    columns, row = parse_row(e, element_type, include_window_info, prefix)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "083723a5b17fc3b24225d92d2b3e6cb9a9122606"}, "originalPosition": 109}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0081ff1d6355cf65865a54b6f6eaa5cad97a8cb2", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/0081ff1d6355cf65865a54b6f6eaa5cad97a8cb2", "committedDate": "2020-02-27T03:07:51Z", "message": "remove nested logic. Only create columns for tuples and named tuples that have known fixed lengths.\n\nChange-Id: I284ab4a2b4d097843fcdecddab432617d222837a"}, "afterCommit": {"oid": "10d1803d9349c23e9ec15c86b74c7600e7256851", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/10d1803d9349c23e9ec15c86b74c7600e7256851", "committedDate": "2020-02-28T18:21:52Z", "message": "remove nested logic. Only create columns for tuples and named tuples that have known fixed lengths.\n\nChange-Id: I284ab4a2b4d097843fcdecddab432617d222837a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDMyMjY5", "url": "https://github.com/apache/beam/pull/10915#pullrequestreview-367432269", "createdAt": "2020-03-02T18:38:48Z", "commit": {"oid": "10d1803d9349c23e9ec15c86b74c7600e7256851"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDUzNTE4", "url": "https://github.com/apache/beam/pull/10915#pullrequestreview-367453518", "createdAt": "2020-03-02T19:10:20Z", "commit": {"oid": "10d1803d9349c23e9ec15c86b74c7600e7256851"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxMDoyMFrOFwrsSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxMTowOFrOFwruCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTgxOA==", "bodyText": "Remove this case.", "url": "https://github.com/apache/beam/pull/10915#discussion_r386591818", "createdAt": "2020-03-02T19:10:20Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+\n+def elements_to_df(elements, include_window_info=False):\n+  \"\"\"Parses the given elements into a Dataframe.\n+\n+  If the elements are a list of `WindowedValue`s, then it will break out the\n+  elements into their own DataFrame and return it. If include_window_info is\n+  True, then it will concatenate the windowing information onto the elements\n+  DataFrame.\n+  \"\"\"\n+\n+  rows = []\n+  windowed_values = []\n+  for e in elements:\n+    if isinstance(e, WindowedValue):\n+      rows.append(e.value)\n+    else:\n+      rows.append(e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10d1803d9349c23e9ec15c86b74c7600e7256851"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MjAwNQ==", "bodyText": "windowing_info? (windowed_values sounds like it has the values themselves).", "url": "https://github.com/apache/beam/pull/10915#discussion_r386592005", "createdAt": "2020-03-02T19:10:43Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Utilities to be used in  Interactive Beam.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pandas as pd\n+\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+\n+def elements_to_df(elements, include_window_info=False):\n+  \"\"\"Parses the given elements into a Dataframe.\n+\n+  If the elements are a list of `WindowedValue`s, then it will break out the\n+  elements into their own DataFrame and return it. If include_window_info is\n+  True, then it will concatenate the windowing information onto the elements\n+  DataFrame.\n+  \"\"\"\n+\n+  rows = []\n+  windowed_values = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10d1803d9349c23e9ec15c86b74c7600e7256851"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MjI2NA==", "bodyText": "Remove tests that don't test our code.", "url": "https://github.com/apache/beam/pull/10915#discussion_r386592264", "createdAt": "2020-03-02T19:11:08Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/interactive/utils_test.py", "diffHunk": "@@ -0,0 +1,182 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#  http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import numpy as np\n+import pandas as pd\n+\n+from apache_beam.runners.interactive import utils\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+\n+class ParseToDataframeTest(unittest.TestCase):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10d1803d9349c23e9ec15c86b74c7600e7256851"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "124f6ecacba03d6aea775fc595e761b1d45e5919", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/124f6ecacba03d6aea775fc595e761b1d45e5919", "committedDate": "2020-03-02T20:58:47Z", "message": "remove nested logic. Only create columns for tuples and named tuples that have known fixed lengths.\n\nChange-Id: I284ab4a2b4d097843fcdecddab432617d222837a"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10d1803d9349c23e9ec15c86b74c7600e7256851", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/10d1803d9349c23e9ec15c86b74c7600e7256851", "committedDate": "2020-02-28T18:21:52Z", "message": "remove nested logic. Only create columns for tuples and named tuples that have known fixed lengths.\n\nChange-Id: I284ab4a2b4d097843fcdecddab432617d222837a"}, "afterCommit": {"oid": "124f6ecacba03d6aea775fc595e761b1d45e5919", "author": {"user": {"login": "rohdesamuel", "name": "Sam sam"}}, "url": "https://github.com/apache/beam/commit/124f6ecacba03d6aea775fc595e761b1d45e5919", "committedDate": "2020-03-02T20:58:47Z", "message": "remove nested logic. Only create columns for tuples and named tuples that have known fixed lengths.\n\nChange-Id: I284ab4a2b4d097843fcdecddab432617d222837a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjE2MjQw", "url": "https://github.com/apache/beam/pull/10915#pullrequestreview-367616240", "createdAt": "2020-03-02T23:58:30Z", "commit": {"oid": "124f6ecacba03d6aea775fc595e761b1d45e5919"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2812, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}