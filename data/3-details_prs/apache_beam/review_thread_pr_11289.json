{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzMzNjg4", "number": 11289, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1ODoxNlrODuCxRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1ODoxNlrODuCxRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjA2NDcxOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1ODoxNlrOF_0mdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTo1MjoyNlrOGACdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NjQyMQ==", "bodyText": "We still would prefer to send a truncation commit (from buildWorkItemTruncationRequest).  That reports the commit as too large but sends the necessary info to the backend to attempt to truncate the work item for reprocessing.", "url": "https://github.com/apache/beam/pull/11289#discussion_r402466421", "createdAt": "2020-04-02T16:58:16Z", "author": {"login": "scwhittle"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1372,11 +1372,13 @@ private void process(\n       WorkItemCommitRequest commitRequest = outputBuilder.build();\n       int byteLimit = maxWorkItemCommitBytes;\n       int commitSize = commitRequest.getSerializedSize();\n-      int estimatedCommitSize = commitSize < 0 ? Integer.MAX_VALUE : commitSize;\n-\n-      // Detect overflow of integer serialized size or if the byte limit was exceeded.\n-      windmillMaxObservedWorkItemCommitBytes.addValue(estimatedCommitSize);\n-      if (estimatedCommitSize > byteLimit) {\n+      // Detect overflow of integer serialized size.\n+      if (commitSize < 0) {\n+        throw KeyCommitTooLargeException.causedBy(computationId, byteLimit, commitRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426230a54744f9fb930b7d2bc28dbd0098a1ce10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MzM4MQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11289#discussion_r402693381", "createdAt": "2020-04-03T01:52:26Z", "author": {"login": "spoortikundargi"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1372,11 +1372,13 @@ private void process(\n       WorkItemCommitRequest commitRequest = outputBuilder.build();\n       int byteLimit = maxWorkItemCommitBytes;\n       int commitSize = commitRequest.getSerializedSize();\n-      int estimatedCommitSize = commitSize < 0 ? Integer.MAX_VALUE : commitSize;\n-\n-      // Detect overflow of integer serialized size or if the byte limit was exceeded.\n-      windmillMaxObservedWorkItemCommitBytes.addValue(estimatedCommitSize);\n-      if (estimatedCommitSize > byteLimit) {\n+      // Detect overflow of integer serialized size.\n+      if (commitSize < 0) {\n+        throw KeyCommitTooLargeException.causedBy(computationId, byteLimit, commitRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NjQyMQ=="}, "originalCommit": {"oid": "426230a54744f9fb930b7d2bc28dbd0098a1ce10"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1608, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}