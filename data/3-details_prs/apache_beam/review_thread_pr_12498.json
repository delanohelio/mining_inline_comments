{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjMzMTE5", "number": 12498, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNToyOToyM1rOEWQkDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1MDoxMFrOEYppeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc1NTAyOnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNToyOToyM1rOG9eRYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NDowOFrOG_AX3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMjI4OA==", "bodyText": "nit: can you move this up with the other :sdks:java entries and match the formatting", "url": "https://github.com/apache/beam/pull/12498#discussion_r467112288", "createdAt": "2020-08-07T15:29:23Z", "author": {"login": "TheNeuralBit"}, "path": "settings.gradle", "diffHunk": "@@ -181,3 +181,4 @@ include \"beam-test-tools\"\n project(\":beam-test-tools\").dir = file(\".test-infra/tools\")\n include \"beam-test-jenkins\"\n project(\":beam-test-jenkins\").dir = file(\".test-infra/jenkins\")\n+include 'sdks:java:extensions:schemaio-expansion-service'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e15cca9a29e8a72fe1aeeb192234504141bff58"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTU4MQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12498#discussion_r468719581", "createdAt": "2020-08-11T16:44:08Z", "author": {"login": "sclukas77"}, "path": "settings.gradle", "diffHunk": "@@ -181,3 +181,4 @@ include \"beam-test-tools\"\n project(\":beam-test-tools\").dir = file(\".test-infra/tools\")\n include \"beam-test-jenkins\"\n project(\":beam-test-jenkins\").dir = file(\".test-infra/jenkins\")\n+include 'sdks:java:extensions:schemaio-expansion-service'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMjI4OA=="}, "originalCommit": {"oid": "9e15cca9a29e8a72fe1aeeb192234504141bff58"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTE4NDE0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/jdbc.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDoyMToxOFrOG9r64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MTo1NlrOG_AS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNTkwNQ==", "bodyText": "I think the better analog for \"location\" would actually be the table name, and the JDBC URL would be part of the configuration. Unfortunately it looks like the typical use-case (i.e. what we have in xlang_jdbcio_it_test) just has the table name implicitly in the query: \n  \n    \n      beam/sdks/python/apache_beam/io/external/xlang_jdbcio_it_test.py\n    \n    \n         Line 151\n      in\n      84cbd9b\n    \n    \n    \n    \n\n        \n          \n           query='SELECT f_int FROM {}'.format(table_name), \n        \n    \n  \n\n\nand in the statement:\n\n  \n    \n      beam/sdks/python/apache_beam/io/external/xlang_jdbcio_it_test.py\n    \n    \n         Line 120\n      in\n      84cbd9b\n    \n    \n    \n    \n\n        \n          \n           statement='INSERT INTO {} VALUES(?, ?, ?)'.format(table_name), \n        \n    \n  \n\n\nMaybe what we should do here is require a table_name parameter that we will use for the location. Then, in the JdbcSchemaIOProvider, we can actually generate the query and statement. The user would still have the ability to override both query and statement if they prefer. WDYT?", "url": "https://github.com/apache/beam/pull/12498#discussion_r467335905", "createdAt": "2020-08-08T00:21:18Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -168,41 +182,33 @@ def __init__(\n     :param expansion_service: The address (host:port) of the ExpansionService.\n     \"\"\"\n \n-    super(WriteToJdbc, self).__init__(\n-        self.URN,\n-        NamedTupleBasedPayloadBuilder(\n-            WriteToJdbcSchema(\n-                driver_class_name=driver_class_name,\n-                jdbc_url=jdbc_url,\n-                username=username,\n-                password=password,\n-                statement=statement,\n-                connection_properties=connection_properties,\n-                connection_init_sqls=connection_init_sqls,\n+        super(WriteToJdbc, self).__init__(\n+            self.URN,\n+            NamedTupleBasedPayloadBuilder(\n+                ReadFromWriteToJdbcSchema(\n+                    location=jdbc_url,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTU2Mw==", "bodyText": "Also for the shared configuration object we should disambiguate query and statement, maybe as read_query and write_statement. The parameters for ReadFromJdbc and WriteToJdbc could remain \"query\" and \"statement\" though since there it's clear from context.", "url": "https://github.com/apache/beam/pull/12498#discussion_r467339563", "createdAt": "2020-08-08T00:47:06Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -168,41 +182,33 @@ def __init__(\n     :param expansion_service: The address (host:port) of the ExpansionService.\n     \"\"\"\n \n-    super(WriteToJdbc, self).__init__(\n-        self.URN,\n-        NamedTupleBasedPayloadBuilder(\n-            WriteToJdbcSchema(\n-                driver_class_name=driver_class_name,\n-                jdbc_url=jdbc_url,\n-                username=username,\n-                password=password,\n-                statement=statement,\n-                connection_properties=connection_properties,\n-                connection_init_sqls=connection_init_sqls,\n+        super(WriteToJdbc, self).__init__(\n+            self.URN,\n+            NamedTupleBasedPayloadBuilder(\n+                ReadFromWriteToJdbcSchema(\n+                    location=jdbc_url,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNTkwNQ=="}, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxODMxOQ==", "bodyText": "That makes sense to me. I added in the query/statement generator code and modified the existing test to use the default generated query/statement, but I think we should add in overriding query/statement tests too.", "url": "https://github.com/apache/beam/pull/12498#discussion_r468718319", "createdAt": "2020-08-11T16:41:56Z", "author": {"login": "sclukas77"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -168,41 +182,33 @@ def __init__(\n     :param expansion_service: The address (host:port) of the ExpansionService.\n     \"\"\"\n \n-    super(WriteToJdbc, self).__init__(\n-        self.URN,\n-        NamedTupleBasedPayloadBuilder(\n-            WriteToJdbcSchema(\n-                driver_class_name=driver_class_name,\n-                jdbc_url=jdbc_url,\n-                username=username,\n-                password=password,\n-                statement=statement,\n-                connection_properties=connection_properties,\n-                connection_init_sqls=connection_init_sqls,\n+        super(WriteToJdbc, self).__init__(\n+            self.URN,\n+            NamedTupleBasedPayloadBuilder(\n+                ReadFromWriteToJdbcSchema(\n+                    location=jdbc_url,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNTkwNQ=="}, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTE5Mjc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/package-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDoyOToyMFrOG9r_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MjoxOFrOG_ATwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzEwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.apache.beam.sdk.extensions.schemaio.expansion;\n          \n          \n            \n            @DefaultQualifier(NonNull.class)\n          \n          \n            \n            package org.apache.beam.sdk.extensions.schemaio.expansion;\n          \n          \n            \n            \n          \n          \n            \n            import org.checkerframework.framework.qual.DefaultQualifier;\n          \n          \n            \n            import org.checkerframework.checker.nullness.qual.NonNull;\n          \n      \n    \n    \n  \n\nWe should make everything default to NonNull. After you do this you'll likely get a lot of build errors from checker framework that will require you to add @Nullable on anything that can be null.\n(See https://checkerframework.org/manual/#default-qualifier)", "url": "https://github.com/apache/beam/pull/12498#discussion_r467337103", "createdAt": "2020-08-08T00:29:20Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** External Transform Registration for SchemaIOs. */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxODUyOQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12498#discussion_r468718529", "createdAt": "2020-08-11T16:42:18Z", "author": {"login": "sclukas77"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** External Transform Registration for SchemaIOs. */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzEwMw=="}, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTE5NDQxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDozMDo0NlrOG9sAcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MzozNlrOG_AWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzMzMQ==", "bodyText": "Let's make these URNs mention schemaio to distinguish them in case there are non-schemaio versions. Maybe beam:external:java:schemaio:<identifier>", "url": "https://github.com/apache/beam/pull/12498#discussion_r467337331", "createdAt": "2020-08-08T00:30:46Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTI5MA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12498#discussion_r468719290", "createdAt": "2020-08-11T16:43:36Z", "author": {"login": "sclukas77"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzMzMQ=="}, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTIwNDI0OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MDo0OFrOG9sFnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MzowM1rOG_AVfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODY1NQ==", "bodyText": "This isn't ideal since it will swallow up any other exception that occurs inside the try block, and when it does catch something from translateRow or translateSchema it's not clear where the problem is. Could you instead add a try-catch in translateRow and translateSchema that catches the specific exception(s) that might be thrown, and re-throws them with a RuntimeException?\nWhen you re-throw you should always reference the original exception as well, like throw new RuntimeException(\"Some additional context\", e)", "url": "https://github.com/apache/beam/pull/12498#discussion_r467338655", "createdAt": "2020-08-08T00:40:48Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",\n+            new WriterBuilder(schemaIOProvider));\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e.getMessage());\n+    }\n+    return builder.build();\n+  }\n+\n+  public static class Configuration {\n+    String location = \"\";\n+    byte[] config = new byte[0];\n+    @Nullable byte[] dataSchema = null;\n+\n+    public void setLocation(String location) {\n+      this.location = location;\n+    }\n+\n+    public void setConfig(byte[] config) {\n+      this.config = config;\n+    }\n+\n+    public void setDataSchema(byte[] dataSchema) {\n+      this.dataSchema = dataSchema;\n+    }\n+  }\n+\n+  @Nullable\n+  private static Schema translateSchema(@Nullable byte[] schemaBytes) throws Exception {\n+    if (schemaBytes == null) {\n+      return null;\n+    }\n+    SchemaApi.Schema protoSchema = SchemaApi.Schema.parseFrom(schemaBytes);\n+    return SchemaTranslation.schemaFromProto(protoSchema);\n+  }\n+\n+  private static Row translateRow(byte[] rowBytes, Schema configSchema) throws Exception {\n+    RowCoder rowCoder = RowCoder.of(configSchema);\n+    InputStream stream = new ByteArrayInputStream(rowBytes);\n+    return rowCoder.decode(stream);\n+  }\n+\n+  private static class ReaderBuilder\n+      implements ExternalTransformBuilder<Configuration, PBegin, PCollection<Row>> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    ReaderBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(Configuration configuration) {\n+      try {\n+        return schemaIOProvider\n+            .from(\n+                configuration.location,\n+                translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                translateSchema(configuration.dataSchema))\n+            .buildReader();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");\n+      }\n+    }\n+  }\n+\n+  private static class WriterBuilder\n+      implements ExternalTransformBuilder<Configuration, PCollection<Row>, PDone> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    WriterBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildExternal(Configuration configuration) {\n+      try {\n+        return (PTransform<PCollection<Row>, PDone>)\n+            schemaIOProvider\n+                .from(\n+                    configuration.location,\n+                    translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                    translateSchema(configuration.dataSchema))\n+                .buildWriter();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxODk3NQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12498#discussion_r468718975", "createdAt": "2020-08-11T16:43:03Z", "author": {"login": "sclukas77"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",\n+            new WriterBuilder(schemaIOProvider));\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e.getMessage());\n+    }\n+    return builder.build();\n+  }\n+\n+  public static class Configuration {\n+    String location = \"\";\n+    byte[] config = new byte[0];\n+    @Nullable byte[] dataSchema = null;\n+\n+    public void setLocation(String location) {\n+      this.location = location;\n+    }\n+\n+    public void setConfig(byte[] config) {\n+      this.config = config;\n+    }\n+\n+    public void setDataSchema(byte[] dataSchema) {\n+      this.dataSchema = dataSchema;\n+    }\n+  }\n+\n+  @Nullable\n+  private static Schema translateSchema(@Nullable byte[] schemaBytes) throws Exception {\n+    if (schemaBytes == null) {\n+      return null;\n+    }\n+    SchemaApi.Schema protoSchema = SchemaApi.Schema.parseFrom(schemaBytes);\n+    return SchemaTranslation.schemaFromProto(protoSchema);\n+  }\n+\n+  private static Row translateRow(byte[] rowBytes, Schema configSchema) throws Exception {\n+    RowCoder rowCoder = RowCoder.of(configSchema);\n+    InputStream stream = new ByteArrayInputStream(rowBytes);\n+    return rowCoder.decode(stream);\n+  }\n+\n+  private static class ReaderBuilder\n+      implements ExternalTransformBuilder<Configuration, PBegin, PCollection<Row>> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    ReaderBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(Configuration configuration) {\n+      try {\n+        return schemaIOProvider\n+            .from(\n+                configuration.location,\n+                translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                translateSchema(configuration.dataSchema))\n+            .buildReader();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");\n+      }\n+    }\n+  }\n+\n+  private static class WriterBuilder\n+      implements ExternalTransformBuilder<Configuration, PCollection<Row>, PDone> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    WriterBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildExternal(Configuration configuration) {\n+      try {\n+        return (PTransform<PCollection<Row>, PDone>)\n+            schemaIOProvider\n+                .from(\n+                    configuration.location,\n+                    translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                    translateSchema(configuration.dataSchema))\n+                .buildWriter();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODY1NQ=="}, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTIwNjg3OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MzowNVrOG9sG_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NTowMlrOG_AaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTAwNA==", "bodyText": "There should probably be some unit tests that exercise WriterBuilder and ReaderBuilder. You could create instances that reference a mock SchemaIOProvider and verify they do what we expect.", "url": "https://github.com/apache/beam/pull/12498#discussion_r467339004", "createdAt": "2020-08-08T00:43:05Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",\n+            new WriterBuilder(schemaIOProvider));\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e.getMessage());\n+    }\n+    return builder.build();\n+  }\n+\n+  public static class Configuration {\n+    String location = \"\";\n+    byte[] config = new byte[0];\n+    @Nullable byte[] dataSchema = null;\n+\n+    public void setLocation(String location) {\n+      this.location = location;\n+    }\n+\n+    public void setConfig(byte[] config) {\n+      this.config = config;\n+    }\n+\n+    public void setDataSchema(byte[] dataSchema) {\n+      this.dataSchema = dataSchema;\n+    }\n+  }\n+\n+  @Nullable\n+  private static Schema translateSchema(@Nullable byte[] schemaBytes) throws Exception {\n+    if (schemaBytes == null) {\n+      return null;\n+    }\n+    SchemaApi.Schema protoSchema = SchemaApi.Schema.parseFrom(schemaBytes);\n+    return SchemaTranslation.schemaFromProto(protoSchema);\n+  }\n+\n+  private static Row translateRow(byte[] rowBytes, Schema configSchema) throws Exception {\n+    RowCoder rowCoder = RowCoder.of(configSchema);\n+    InputStream stream = new ByteArrayInputStream(rowBytes);\n+    return rowCoder.decode(stream);\n+  }\n+\n+  private static class ReaderBuilder\n+      implements ExternalTransformBuilder<Configuration, PBegin, PCollection<Row>> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    ReaderBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(Configuration configuration) {\n+      try {\n+        return schemaIOProvider\n+            .from(\n+                configuration.location,\n+                translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                translateSchema(configuration.dataSchema))\n+            .buildReader();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");\n+      }\n+    }\n+  }\n+\n+  private static class WriterBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDEzNA==", "bodyText": "ACK, I will add these in.", "url": "https://github.com/apache/beam/pull/12498#discussion_r468720134", "createdAt": "2020-08-11T16:45:02Z", "author": {"login": "sclukas77"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",\n+            new WriterBuilder(schemaIOProvider));\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e.getMessage());\n+    }\n+    return builder.build();\n+  }\n+\n+  public static class Configuration {\n+    String location = \"\";\n+    byte[] config = new byte[0];\n+    @Nullable byte[] dataSchema = null;\n+\n+    public void setLocation(String location) {\n+      this.location = location;\n+    }\n+\n+    public void setConfig(byte[] config) {\n+      this.config = config;\n+    }\n+\n+    public void setDataSchema(byte[] dataSchema) {\n+      this.dataSchema = dataSchema;\n+    }\n+  }\n+\n+  @Nullable\n+  private static Schema translateSchema(@Nullable byte[] schemaBytes) throws Exception {\n+    if (schemaBytes == null) {\n+      return null;\n+    }\n+    SchemaApi.Schema protoSchema = SchemaApi.Schema.parseFrom(schemaBytes);\n+    return SchemaTranslation.schemaFromProto(protoSchema);\n+  }\n+\n+  private static Row translateRow(byte[] rowBytes, Schema configSchema) throws Exception {\n+    RowCoder rowCoder = RowCoder.of(configSchema);\n+    InputStream stream = new ByteArrayInputStream(rowBytes);\n+    return rowCoder.decode(stream);\n+  }\n+\n+  private static class ReaderBuilder\n+      implements ExternalTransformBuilder<Configuration, PBegin, PCollection<Row>> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    ReaderBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(Configuration configuration) {\n+      try {\n+        return schemaIOProvider\n+            .from(\n+                configuration.location,\n+                translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                translateSchema(configuration.dataSchema))\n+            .buildReader();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");\n+      }\n+    }\n+  }\n+\n+  private static class WriterBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTAwNA=="}, "originalCommit": {"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYzMzY5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0ODoyMlrOG_Ah-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowNjo0N1rOHBDVfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjE3MA==", "bodyText": "The number of ?s in this query should depend on the number of fields in the schema of the input PCollection. (?, ?, ?) will only work when writing exactly three fields. I'd suggest returning a PTransform that looks at the input PCollection in its expand method. Something like this:\nreturn new PTransform<PCollection<Row>, PDone>() {\n  public PDone expand(PCollection<Row> input) {\n    Schema schema = input.getSchema()\n    // Generate writeStatement based on input schema\n    \n    return input.apply(JdbcIO.<Row>write()...);\n  }\n}", "url": "https://github.com/apache/beam/pull/12498#discussion_r468722170", "createdAt": "2020-08-11T16:48:22Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing JSON payloads with {@link\n+ * JdbcIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class JdbcSchemaIOProvider implements SchemaIOProvider {\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"jdbc\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */\n+  @Override\n+  public Schema configurationSchema() {\n+    return Schema.builder()\n+        .addStringField(\"driverClassName\")\n+        .addStringField(\"jdbcUrl\")\n+        .addStringField(\"username\")\n+        .addStringField(\"password\")\n+        .addNullableField(\"connectionProperties\", FieldType.STRING)\n+        .addNullableField(\"connectionInitSqls\", FieldType.iterable(FieldType.STRING))\n+        .addNullableField(\"readQuery\", FieldType.STRING)\n+        .addNullableField(\"writeStatement\", FieldType.STRING)\n+        .addNullableField(\"fetchSize\", FieldType.INT16)\n+        .addNullableField(\"outputParallelization\", FieldType.BOOLEAN)\n+        .build();\n+  }\n+\n+  /**\n+   * Produce a SchemaIO given a String representing the data's location, the schema of the data that\n+   * resides there, and some IO-specific configuration object.\n+   */\n+  @Override\n+  public JdbcSchemaIO from(String location, Row configuration, Schema dataSchema) {\n+    return new JdbcSchemaIO(location, configuration);\n+  }\n+\n+  @Override\n+  public boolean requiresDataSchema() {\n+    return false;\n+  }\n+\n+  @Override\n+  public PCollection.IsBounded isBounded() {\n+    return PCollection.IsBounded.BOUNDED;\n+  }\n+\n+  /** An abstraction to create schema aware IOs. */\n+  static class JdbcSchemaIO implements SchemaIO, Serializable {\n+    protected final Row config;\n+    protected final String location;\n+\n+    JdbcSchemaIO(String location, Row config) {\n+      this.config = config;\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public Schema schema() {\n+      return null;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildReader() {\n+      String readQuery;\n+      if (config.getString(\"readQuery\") != null) {\n+        readQuery = config.getString(\"readQuery\");\n+      } else {\n+        readQuery = String.format(\"SELECT f_int FROM %s\", location);\n+      }\n+\n+      JdbcIO.DataSourceConfiguration dataSourceConfiguration = getDataSourceConfiguration();\n+\n+      JdbcIO.ReadRows readRows =\n+          JdbcIO.readRows()\n+              .withDataSourceConfiguration(dataSourceConfiguration)\n+              .withQuery(readQuery);\n+\n+      if (config.getInt16(\"fetchSize\") != null) {\n+        readRows = readRows.withFetchSize(config.getInt16(\"fetchSize\"));\n+      }\n+      if (config.getBoolean(\"outputParallelization\") != null) {\n+        readRows = readRows.withOutputParallelization(config.getBoolean(\"outputParallelization\"));\n+      }\n+      return readRows;\n+    }\n+\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildWriter() {\n+      String writeStatement;\n+      if (config.getString(\"writeStatement\") != null) {\n+        writeStatement = config.getString(\"writeStatement\");\n+      } else {\n+        writeStatement = String.format(\"INSERT INTO %s VALUES(?, ?, ?)\", location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4cbdca6d90d5f16fec0e9aea11cc78938579904"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2NTI3OQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12498#discussion_r470865279", "createdAt": "2020-08-14T21:06:47Z", "author": {"login": "sclukas77"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing JSON payloads with {@link\n+ * JdbcIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class JdbcSchemaIOProvider implements SchemaIOProvider {\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"jdbc\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */\n+  @Override\n+  public Schema configurationSchema() {\n+    return Schema.builder()\n+        .addStringField(\"driverClassName\")\n+        .addStringField(\"jdbcUrl\")\n+        .addStringField(\"username\")\n+        .addStringField(\"password\")\n+        .addNullableField(\"connectionProperties\", FieldType.STRING)\n+        .addNullableField(\"connectionInitSqls\", FieldType.iterable(FieldType.STRING))\n+        .addNullableField(\"readQuery\", FieldType.STRING)\n+        .addNullableField(\"writeStatement\", FieldType.STRING)\n+        .addNullableField(\"fetchSize\", FieldType.INT16)\n+        .addNullableField(\"outputParallelization\", FieldType.BOOLEAN)\n+        .build();\n+  }\n+\n+  /**\n+   * Produce a SchemaIO given a String representing the data's location, the schema of the data that\n+   * resides there, and some IO-specific configuration object.\n+   */\n+  @Override\n+  public JdbcSchemaIO from(String location, Row configuration, Schema dataSchema) {\n+    return new JdbcSchemaIO(location, configuration);\n+  }\n+\n+  @Override\n+  public boolean requiresDataSchema() {\n+    return false;\n+  }\n+\n+  @Override\n+  public PCollection.IsBounded isBounded() {\n+    return PCollection.IsBounded.BOUNDED;\n+  }\n+\n+  /** An abstraction to create schema aware IOs. */\n+  static class JdbcSchemaIO implements SchemaIO, Serializable {\n+    protected final Row config;\n+    protected final String location;\n+\n+    JdbcSchemaIO(String location, Row config) {\n+      this.config = config;\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public Schema schema() {\n+      return null;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildReader() {\n+      String readQuery;\n+      if (config.getString(\"readQuery\") != null) {\n+        readQuery = config.getString(\"readQuery\");\n+      } else {\n+        readQuery = String.format(\"SELECT f_int FROM %s\", location);\n+      }\n+\n+      JdbcIO.DataSourceConfiguration dataSourceConfiguration = getDataSourceConfiguration();\n+\n+      JdbcIO.ReadRows readRows =\n+          JdbcIO.readRows()\n+              .withDataSourceConfiguration(dataSourceConfiguration)\n+              .withQuery(readQuery);\n+\n+      if (config.getInt16(\"fetchSize\") != null) {\n+        readRows = readRows.withFetchSize(config.getInt16(\"fetchSize\"));\n+      }\n+      if (config.getBoolean(\"outputParallelization\") != null) {\n+        readRows = readRows.withOutputParallelization(config.getBoolean(\"outputParallelization\"));\n+      }\n+      return readRows;\n+    }\n+\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildWriter() {\n+      String writeStatement;\n+      if (config.getString(\"writeStatement\") != null) {\n+        writeStatement = config.getString(\"writeStatement\");\n+      } else {\n+        writeStatement = String.format(\"INSERT INTO %s VALUES(?, ?, ?)\", location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjE3MA=="}, "originalCommit": {"oid": "e4cbdca6d90d5f16fec0e9aea11cc78938579904"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYzNjQ5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0OTowOFrOG_AjvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowNjo1OVrOHBDV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjYyMA==", "bodyText": "Similarly this shouldn't mention specific field names. In this case I think we could just do SELECT * FROM %s", "url": "https://github.com/apache/beam/pull/12498#discussion_r468722620", "createdAt": "2020-08-11T16:49:08Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing JSON payloads with {@link\n+ * JdbcIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class JdbcSchemaIOProvider implements SchemaIOProvider {\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"jdbc\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */\n+  @Override\n+  public Schema configurationSchema() {\n+    return Schema.builder()\n+        .addStringField(\"driverClassName\")\n+        .addStringField(\"jdbcUrl\")\n+        .addStringField(\"username\")\n+        .addStringField(\"password\")\n+        .addNullableField(\"connectionProperties\", FieldType.STRING)\n+        .addNullableField(\"connectionInitSqls\", FieldType.iterable(FieldType.STRING))\n+        .addNullableField(\"readQuery\", FieldType.STRING)\n+        .addNullableField(\"writeStatement\", FieldType.STRING)\n+        .addNullableField(\"fetchSize\", FieldType.INT16)\n+        .addNullableField(\"outputParallelization\", FieldType.BOOLEAN)\n+        .build();\n+  }\n+\n+  /**\n+   * Produce a SchemaIO given a String representing the data's location, the schema of the data that\n+   * resides there, and some IO-specific configuration object.\n+   */\n+  @Override\n+  public JdbcSchemaIO from(String location, Row configuration, Schema dataSchema) {\n+    return new JdbcSchemaIO(location, configuration);\n+  }\n+\n+  @Override\n+  public boolean requiresDataSchema() {\n+    return false;\n+  }\n+\n+  @Override\n+  public PCollection.IsBounded isBounded() {\n+    return PCollection.IsBounded.BOUNDED;\n+  }\n+\n+  /** An abstraction to create schema aware IOs. */\n+  static class JdbcSchemaIO implements SchemaIO, Serializable {\n+    protected final Row config;\n+    protected final String location;\n+\n+    JdbcSchemaIO(String location, Row config) {\n+      this.config = config;\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public Schema schema() {\n+      return null;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildReader() {\n+      String readQuery;\n+      if (config.getString(\"readQuery\") != null) {\n+        readQuery = config.getString(\"readQuery\");\n+      } else {\n+        readQuery = String.format(\"SELECT f_int FROM %s\", location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4cbdca6d90d5f16fec0e9aea11cc78938579904"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2NTM2Mg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12498#discussion_r470865362", "createdAt": "2020-08-14T21:06:59Z", "author": {"login": "sclukas77"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing JSON payloads with {@link\n+ * JdbcIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class JdbcSchemaIOProvider implements SchemaIOProvider {\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"jdbc\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */\n+  @Override\n+  public Schema configurationSchema() {\n+    return Schema.builder()\n+        .addStringField(\"driverClassName\")\n+        .addStringField(\"jdbcUrl\")\n+        .addStringField(\"username\")\n+        .addStringField(\"password\")\n+        .addNullableField(\"connectionProperties\", FieldType.STRING)\n+        .addNullableField(\"connectionInitSqls\", FieldType.iterable(FieldType.STRING))\n+        .addNullableField(\"readQuery\", FieldType.STRING)\n+        .addNullableField(\"writeStatement\", FieldType.STRING)\n+        .addNullableField(\"fetchSize\", FieldType.INT16)\n+        .addNullableField(\"outputParallelization\", FieldType.BOOLEAN)\n+        .build();\n+  }\n+\n+  /**\n+   * Produce a SchemaIO given a String representing the data's location, the schema of the data that\n+   * resides there, and some IO-specific configuration object.\n+   */\n+  @Override\n+  public JdbcSchemaIO from(String location, Row configuration, Schema dataSchema) {\n+    return new JdbcSchemaIO(location, configuration);\n+  }\n+\n+  @Override\n+  public boolean requiresDataSchema() {\n+    return false;\n+  }\n+\n+  @Override\n+  public PCollection.IsBounded isBounded() {\n+    return PCollection.IsBounded.BOUNDED;\n+  }\n+\n+  /** An abstraction to create schema aware IOs. */\n+  static class JdbcSchemaIO implements SchemaIO, Serializable {\n+    protected final Row config;\n+    protected final String location;\n+\n+    JdbcSchemaIO(String location, Row config) {\n+      this.config = config;\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public Schema schema() {\n+      return null;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildReader() {\n+      String readQuery;\n+      if (config.getString(\"readQuery\") != null) {\n+        readQuery = config.getString(\"readQuery\");\n+      } else {\n+        readQuery = String.format(\"SELECT f_int FROM %s\", location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjYyMA=="}, "originalCommit": {"oid": "e4cbdca6d90d5f16fec0e9aea11cc78938579904"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc1MTI2OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/schemaio-expansion-service/src/test/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrarTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzozNDozOVrOHBFwgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzozNDozOVrOHBFwgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNDk2Mw==", "bodyText": "Nice :)", "url": "https://github.com/apache/beam/pull/12498#discussion_r470904963", "createdAt": "2020-08-14T23:34:39Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/schemaio-expansion-service/src/test/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrarTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.extensions.schemaio.expansion.ExternalSchemaIOTransformRegistrar.Configuration;\n+import org.apache.beam.sdk.extensions.schemaio.expansion.ExternalSchemaIOTransformRegistrar.ReaderBuilder;\n+import org.apache.beam.sdk.extensions.schemaio.expansion.ExternalSchemaIOTransformRegistrar.WriterBuilder;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mockito;\n+\n+/** Unit tests for {@link ExternalSchemaIOTransformRegistrar}. */\n+@RunWith(JUnit4.class)\n+public class ExternalSchemaIOTransformRegistrarTest {\n+  String location = \"test\";\n+  Schema validDataSchema = Schema.builder().addStringField(\"dataField\").build();\n+  Schema validConfigSchema = Schema.builder().addStringField(\"configField\").build();\n+  Row validConfigRow = Row.withSchema(validConfigSchema).addValue(\"value\").build();\n+\n+  byte[] validSchemaBytes = SchemaTranslation.schemaToProto(validDataSchema, true).toByteArray();\n+  byte[] invalidBytes = \"Nice try\".getBytes(Charset.defaultCharset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjgxNDc2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/xlang_jdbcio_it_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoyNjozNVrOHBGTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMTozN1rOHDRBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMzkwNw==", "bodyText": "Ideally we would keep both sets of tests, one that relies on just the table name, and one that sets the SELECT/INSERT statement. We can leave this for a follow-up though if you file a jira and add a TODO", "url": "https://github.com/apache/beam/pull/12498#discussion_r470913907", "createdAt": "2020-08-15T00:26:35Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/external/xlang_jdbcio_it_test.py", "diffHunk": "@@ -144,11 +144,11 @@ def test_xlang_jdbc_read(self):\n       result = (\n           p\n           | 'Read from jdbc' >> ReadFromJdbc(\n+              table_name=table_name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjYxMw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12498#discussion_r473186613", "createdAt": "2020-08-19T17:01:37Z", "author": {"login": "sclukas77"}, "path": "sdks/python/apache_beam/io/external/xlang_jdbcio_it_test.py", "diffHunk": "@@ -144,11 +144,11 @@ def test_xlang_jdbc_read(self):\n       result = (\n           p\n           | 'Read from jdbc' >> ReadFromJdbc(\n+              table_name=table_name,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMzkwNw=="}, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjgxNjg1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/jdbc.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoyODo1MFrOHBGUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMToxMVrOHDQ_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDIwMQ==", "bodyText": "nit: looks like there's an extraneous whitespace change here.\nPlease update this docstring (and the Read counterpart) based on our change to table_name/statement/query. It should point out that table_name is required and statement/query are optional, but can be overriden", "url": "https://github.com/apache/beam/pull/12498#discussion_r470914201", "createdAt": "2020-08-15T00:28:50Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -96,25 +98,37 @@\n \n \n def default_io_expansion_service():\n-  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+    return BeamJarExpansionService(\n+        ':sdks:java:extensions:schemaio-expansion-service:shadowJar')\n \n \n-WriteToJdbcSchema = typing.NamedTuple(\n-    'WriteToJdbcSchema',\n+ReadFromWriteToJdbcSchema = typing.NamedTuple(\n+    'ReadFromWriteToJdbcSchema',\n+    [\n+        ('location', unicode),\n+        ('config', bytes)\n+    ],\n+)\n+\n+Config = typing.NamedTuple(\n+    'Config',\n     [\n         ('driver_class_name', unicode),\n         ('jdbc_url', unicode),\n         ('username', unicode),\n         ('password', unicode),\n         ('connection_properties', typing.Optional[unicode]),\n         ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n-        ('statement', unicode),\n+        ('write_statement', typing.Optional[unicode]),\n+        ('read_query', typing.Optional[unicode]),\n+        ('fetch_size', typing.Optional[int]),\n+        ('output_parallelization', typing.Optional[bool]),\n     ],\n )\n \n \n class WriteToJdbc(ExternalTransform):\n-  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+    \"\"\"A PTransform which writes Rows to the specified database via JDBC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjE5MA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12498#discussion_r473186190", "createdAt": "2020-08-19T17:01:11Z", "author": {"login": "sclukas77"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -96,25 +98,37 @@\n \n \n def default_io_expansion_service():\n-  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+    return BeamJarExpansionService(\n+        ':sdks:java:extensions:schemaio-expansion-service:shadowJar')\n \n \n-WriteToJdbcSchema = typing.NamedTuple(\n-    'WriteToJdbcSchema',\n+ReadFromWriteToJdbcSchema = typing.NamedTuple(\n+    'ReadFromWriteToJdbcSchema',\n+    [\n+        ('location', unicode),\n+        ('config', bytes)\n+    ],\n+)\n+\n+Config = typing.NamedTuple(\n+    'Config',\n     [\n         ('driver_class_name', unicode),\n         ('jdbc_url', unicode),\n         ('username', unicode),\n         ('password', unicode),\n         ('connection_properties', typing.Optional[unicode]),\n         ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n-        ('statement', unicode),\n+        ('write_statement', typing.Optional[unicode]),\n+        ('read_query', typing.Optional[unicode]),\n+        ('fetch_size', typing.Optional[int]),\n+        ('output_parallelization', typing.Optional[bool]),\n     ],\n )\n \n \n class WriteToJdbc(ExternalTransform):\n-  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+    \"\"\"A PTransform which writes Rows to the specified database via JDBC.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDIwMQ=="}, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjgxNzQ4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/jdbc.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoyOToyOFrOHBGU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1OTozOVrOHDQ5Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDI4Ng==", "bodyText": "nit: WDYT about calling this JdbcConfigSchema?", "url": "https://github.com/apache/beam/pull/12498#discussion_r470914286", "createdAt": "2020-08-15T00:29:28Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -96,25 +98,37 @@\n \n \n def default_io_expansion_service():\n-  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+    return BeamJarExpansionService(\n+        ':sdks:java:extensions:schemaio-expansion-service:shadowJar')\n \n \n-WriteToJdbcSchema = typing.NamedTuple(\n-    'WriteToJdbcSchema',\n+ReadFromWriteToJdbcSchema = typing.NamedTuple(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjA5Ng==", "bodyText": "I think the next improvement to SchemaIO/Provider should be to formally differentiate read-only and write-only configuration, it's confusing to combine them this way when it's not needed. The only place its needed is in SQL, so we should do it there.\n(you don't need to do anything here, I'm just getting some thoughts out)", "url": "https://github.com/apache/beam/pull/12498#discussion_r470916096", "createdAt": "2020-08-15T00:43:21Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -96,25 +98,37 @@\n \n \n def default_io_expansion_service():\n-  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+    return BeamJarExpansionService(\n+        ':sdks:java:extensions:schemaio-expansion-service:shadowJar')\n \n \n-WriteToJdbcSchema = typing.NamedTuple(\n-    'WriteToJdbcSchema',\n+ReadFromWriteToJdbcSchema = typing.NamedTuple(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDI4Ng=="}, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjQzNw==", "bodyText": "Filed BEAM-10709 for this", "url": "https://github.com/apache/beam/pull/12498#discussion_r470916437", "createdAt": "2020-08-15T00:46:04Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -96,25 +98,37 @@\n \n \n def default_io_expansion_service():\n-  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+    return BeamJarExpansionService(\n+        ':sdks:java:extensions:schemaio-expansion-service:shadowJar')\n \n \n-WriteToJdbcSchema = typing.NamedTuple(\n-    'WriteToJdbcSchema',\n+ReadFromWriteToJdbcSchema = typing.NamedTuple(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDI4Ng=="}, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NDU4Mw==", "bodyText": "I agree it is a more concise way of calling it. I updated the name here.", "url": "https://github.com/apache/beam/pull/12498#discussion_r473184583", "createdAt": "2020-08-19T16:59:39Z", "author": {"login": "sclukas77"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -96,25 +98,37 @@\n \n \n def default_io_expansion_service():\n-  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+    return BeamJarExpansionService(\n+        ':sdks:java:extensions:schemaio-expansion-service:shadowJar')\n \n \n-WriteToJdbcSchema = typing.NamedTuple(\n-    'WriteToJdbcSchema',\n+ReadFromWriteToJdbcSchema = typing.NamedTuple(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDI4Ng=="}, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjgzNTY1OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/schemaio-expansion-service/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo0OToyMVrOHBGevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1Nzo0M1rOHDQxUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjc5OA==", "bodyText": "Assuming this is because of BEAM-10632? Let's add a TODO here so we remember to remove it later\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                testCompile library.java.mockito_core\n          \n          \n            \n                testCompile \"org.checkerframework:checker-qual:3.5.0\"\n          \n          \n            \n                testCompile library.java.mockito_core\n          \n          \n            \n                // TODO(BEAM-10632): remove this dependency\n          \n          \n            \n                testCompile \"org.checkerframework:checker-qual:3.5.0\"", "url": "https://github.com/apache/beam/pull/12498#discussion_r470916798", "createdAt": "2020-08-15T00:49:21Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/schemaio-expansion-service/build.gradle", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+plugins {\n+    id 'org.apache.beam.module'\n+}\n+\n+applyJavaNature(\n+        ignoreRawtypeErrors: true,\n+        automaticModuleName: 'org.apache.beam.sdk.extensions.schemaio.expansion',\n+        validateShadowJar: false,\n+        shadowClosure: {\n+            manifest {\n+                attributes \"Main-Class\": \"org.apache.beam.sdk.expansion.service.ExpansionService\"\n+            }\n+        }\n+)\n+\n+dependencies {\n+    compile project(path: \":sdks:java:expansion-service\")\n+    compile project(\":sdks:java:io:jdbc\")\n+    compile library.java.postgres\n+    testCompile library.java.junit\n+    testCompile library.java.powermock_mockito\n+    testCompile library.java.mockito_core\n+    testCompile \"org.checkerframework:checker-qual:3.5.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4MjU0Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12498#discussion_r473182547", "createdAt": "2020-08-19T16:57:43Z", "author": {"login": "sclukas77"}, "path": "sdks/java/extensions/schemaio-expansion-service/build.gradle", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+plugins {\n+    id 'org.apache.beam.module'\n+}\n+\n+applyJavaNature(\n+        ignoreRawtypeErrors: true,\n+        automaticModuleName: 'org.apache.beam.sdk.extensions.schemaio.expansion',\n+        validateShadowJar: false,\n+        shadowClosure: {\n+            manifest {\n+                attributes \"Main-Class\": \"org.apache.beam.sdk.expansion.service.ExpansionService\"\n+            }\n+        }\n+)\n+\n+dependencies {\n+    compile project(path: \":sdks:java:expansion-service\")\n+    compile project(\":sdks:java:io:jdbc\")\n+    compile library.java.postgres\n+    testCompile library.java.junit\n+    testCompile library.java.powermock_mockito\n+    testCompile library.java.mockito_core\n+    testCompile \"org.checkerframework:checker-qual:3.5.0\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjc5OA=="}, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjgzNjQxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/schemaio-expansion-service/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1MDoxMFrOHBGfJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1NzoyOVrOHDQwZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjkwMQ==", "bodyText": "I don't think we need this task, Python is responsible for running the expansion service from the compiled jar using subprocess.", "url": "https://github.com/apache/beam/pull/12498#discussion_r470916901", "createdAt": "2020-08-15T00:50:10Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/schemaio-expansion-service/build.gradle", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+plugins {\n+    id 'org.apache.beam.module'\n+}\n+\n+applyJavaNature(\n+        ignoreRawtypeErrors: true,\n+        automaticModuleName: 'org.apache.beam.sdk.extensions.schemaio.expansion',\n+        validateShadowJar: false,\n+        shadowClosure: {\n+            manifest {\n+                attributes \"Main-Class\": \"org.apache.beam.sdk.expansion.service.ExpansionService\"\n+            }\n+        }\n+)\n+\n+dependencies {\n+    compile project(path: \":sdks:java:expansion-service\")\n+    compile project(\":sdks:java:io:jdbc\")\n+    compile library.java.postgres\n+    testCompile library.java.junit\n+    testCompile library.java.powermock_mockito\n+    testCompile library.java.mockito_core\n+    testCompile \"org.checkerframework:checker-qual:3.5.0\"\n+}\n+\n+task runExpansionService (type: JavaExec) {\n+    main = \"org.apache.beam.sdk.expansion.service.ExpansionService\"\n+    classpath = sourceSets.main.runtimeClasspath\n+    args = [project.findProperty(\":constructionService.port\") ?: \"8097\"]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4MjMwOQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12498#discussion_r473182309", "createdAt": "2020-08-19T16:57:29Z", "author": {"login": "sclukas77"}, "path": "sdks/java/extensions/schemaio-expansion-service/build.gradle", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+plugins {\n+    id 'org.apache.beam.module'\n+}\n+\n+applyJavaNature(\n+        ignoreRawtypeErrors: true,\n+        automaticModuleName: 'org.apache.beam.sdk.extensions.schemaio.expansion',\n+        validateShadowJar: false,\n+        shadowClosure: {\n+            manifest {\n+                attributes \"Main-Class\": \"org.apache.beam.sdk.expansion.service.ExpansionService\"\n+            }\n+        }\n+)\n+\n+dependencies {\n+    compile project(path: \":sdks:java:expansion-service\")\n+    compile project(\":sdks:java:io:jdbc\")\n+    compile library.java.postgres\n+    testCompile library.java.junit\n+    testCompile library.java.powermock_mockito\n+    testCompile library.java.mockito_core\n+    testCompile \"org.checkerframework:checker-qual:3.5.0\"\n+}\n+\n+task runExpansionService (type: JavaExec) {\n+    main = \"org.apache.beam.sdk.expansion.service.ExpansionService\"\n+    classpath = sourceSets.main.runtimeClasspath\n+    args = [project.findProperty(\":constructionService.port\") ?: \"8097\"]\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjkwMQ=="}, "originalCommit": {"oid": "703905e73c61eea2d8d4ba2332bf35871658c40e"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 867, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}