{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzE1NTEw", "number": 11478, "title": "[BEAM-9794] Reduce state cells needed for BufferingDoFnRunner", "bodyText": "The BufferingDoFnRunner create a new state cell for buffering data during each\ncheckpoint. This led to the number of state cells to reach Short.MAX_VALUE, the\nmaximum of supported Flink states.\nThis change keeps a fixed number of state cells depending on the maximum\nconfigured parallelism for checkpoints. The state cells are reused after the\ncheckpoint has been acknowledged.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-21T14:34:27Z", "url": "https://github.com/apache/beam/pull/11478", "merged": true, "mergeCommit": {"oid": "7869d497ae1eb89d004834816fee6c63536f5e8b"}, "closed": true, "closedAt": "2020-04-23T14:36:14Z", "author": {"login": "mxm"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ0k-FAH2gAyNDA2NzE1NTEwOjViNGNhN2JlNWRlNTVjMjZhNTQxYzI3ZjQwMmUxZDUxYjRlMGQ2YmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaDKOmAFqTM5Nzg4ODQ3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5b4ca7be5de55c26a541c27f402e1d51b4e0d6ba", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/5b4ca7be5de55c26a541c27f402e1d51b4e0d6ba", "committedDate": "2020-04-21T14:29:38Z", "message": "[BEAM-9794] Reduce state cells needed for BufferingDoFnRunner\n\nThe BufferingDoFnRunner create a new state cell for buffering data during each\ncheckpoint. This led to the number of state cells to reach Short.MAX_VALUE, the\nmaximum of supported Flink states.\n\nThis change keeps a fixed number of state cells depending on the maximum\nconfigured parallelism for checkpoints. The state cells are reused after the\ncheckpoint has been acknowledged."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODg4NDc0", "url": "https://github.com/apache/beam/pull/11478#pullrequestreview-397888474", "createdAt": "2020-04-22T06:48:06Z", "commit": {"oid": "5b4ca7be5de55c26a541c27f402e1d51b4e0d6ba"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0ODowNlrOGJmGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyNjozNlrOGJnf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNDU0MA==", "bodyText": "nit: @VisibleForTesting", "url": "https://github.com/apache/beam/pull/11478#discussion_r412714540", "createdAt": "2020-04-22T06:48:06Z", "author": {"login": "dmvk"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferingDoFnRunner.java", "diffHunk": "@@ -170,44 +201,48 @@ public void checkpointCompleted(long checkpointId) throws Exception {\n     }\n   }\n \n-  private void addToBeAcknowledgedCheckpoint(long checkpointId, String internalId)\n-      throws Exception {\n+  private void addToBeAcknowledgedCheckpoint(long checkpointId, int internalId) throws Exception {\n     notYetAcknowledgedSnapshots.addAll(\n-        Collections.singletonList(new CheckpointElement(internalId, checkpointId)));\n+        Collections.singletonList(new CheckpointIdentifier(internalId, checkpointId)));\n   }\n \n-  private List<CheckpointElement> removeToBeAcknowledgedCheckpoints(long checkpointId)\n+  private List<CheckpointIdentifier> gatherToBeAcknowledgedCheckpoints(long checkpointId)\n       throws Exception {\n-    List<CheckpointElement> toBeAcknowledged = new ArrayList<>();\n-    List<CheckpointElement> checkpoints = new ArrayList<>();\n-    for (CheckpointElement element : notYetAcknowledgedSnapshots.get()) {\n+    List<CheckpointIdentifier> toBeAcknowledged = new ArrayList<>();\n+    List<CheckpointIdentifier> remaining = new ArrayList<>();\n+    for (CheckpointIdentifier element : notYetAcknowledgedSnapshots.get()) {\n       if (element.checkpointId <= checkpointId) {\n         toBeAcknowledged.add(element);\n       } else {\n-        checkpoints.add(element);\n+        remaining.add(element);\n       }\n     }\n-    notYetAcknowledgedSnapshots.update(checkpoints);\n+    notYetAcknowledgedSnapshots.update(remaining);\n     // Sort by checkpoint id to preserve order\n     toBeAcknowledged.sort(Comparator.comparingLong(o -> o.checkpointId));\n     return toBeAcknowledged;\n   }\n \n-  private static String generateNewId() {\n-    return UUID.randomUUID().toString();\n+  private int rotateAndGetStateIndex() {\n+    currentStateIndex = (currentStateIndex + 1) % numCheckpointBuffers;\n+    return currentStateIndex;\n+  }\n+\n+  private int getStateIndex() {\n+    return currentStateIndex;\n   }\n \n   /** Constructs a new instance of BufferingElementsHandler with a provided state namespace. */\n   private interface BufferingElementsHandlerFactory {\n-    BufferingElementsHandler get(String stateId) throws Exception;\n+    BufferingElementsHandler get(int stateIndex) throws Exception;\n   }\n \n-  private static class CheckpointElement {\n+  static class CheckpointIdentifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b4ca7be5de55c26a541c27f402e1d51b4e0d6ba"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNjkwNg==", "bodyText": "just to check if I understand this correctly:\n\nWe are guaranteed that checkpoints complete in sequential order.\nWe might get gaps in case of failed / expired checkpoints, so any completed checkpoint must complete all prior checkpoints.", "url": "https://github.com/apache/beam/pull/11478#discussion_r412726906", "createdAt": "2020-04-22T07:10:02Z", "author": {"login": "dmvk"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferingDoFnRunner.java", "diffHunk": "@@ -143,15 +174,15 @@ public void checkpoint(long checkpointId) throws Exception {\n     // We are about to get checkpointed. The elements buffered thus far\n     // have to be added to the global CheckpointElement state which will\n     // be used to emit elements later when this checkpoint is acknowledged.\n-    addToBeAcknowledgedCheckpoint(checkpointId, currentStateId);\n-    currentStateId = generateNewId();\n-    currentBufferingElementsHandler = bufferingElementsHandlerFactory.get(currentStateId);\n+    addToBeAcknowledgedCheckpoint(checkpointId, getStateIndex());\n+    int newStateIndex = rotateAndGetStateIndex();\n+    currentBufferingElementsHandler = bufferingElementsHandlerFactory.get(newStateIndex);\n   }\n \n   /** Should be called when a checkpoint is completed. */\n   public void checkpointCompleted(long checkpointId) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b4ca7be5de55c26a541c27f402e1d51b4e0d6ba"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczNzUyMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/beam/pull/11478#discussion_r412737521", "createdAt": "2020-04-22T07:26:36Z", "author": {"login": "dmvk"}, "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferingDoFnRunnerTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink.translation.wrappers.streaming.stableinput;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.runners.core.DoFnRunner;\n+import org.apache.beam.sdk.coders.StringUtf8Coder;\n+import org.apache.beam.sdk.coders.VarIntCoder;\n+import org.apache.beam.sdk.transforms.windowing.GlobalWindow;\n+import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.flink.api.common.state.ListState;\n+import org.apache.flink.runtime.state.OperatorStateBackend;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link BufferingDoFnRunner}.\n+ *\n+ * <p>For more tests see:\n+ *\n+ * <p>- {@link org.apache.beam.runners.flink.FlinkRequiresStableInputTest}\n+ *\n+ * <p>-{@link org.apache.beam.runners.flink.translation.wrappers.streaming.DoFnOperatorTest}\n+ *\n+ * <p>- {@link BufferedElementsTest}\n+ */\n+public class BufferingDoFnRunnerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b4ca7be5de55c26a541c27f402e1d51b4e0d6ba"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4357, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}