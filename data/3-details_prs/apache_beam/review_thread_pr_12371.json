{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDc1NDc4", "number": 12371, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowMTozNFrOEUtGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxMToxMVrOEUtSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTQ1OTU3OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowMTozNFrOG7DcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowMTozNFrOG7DcKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NTUzMQ==", "bodyText": "It would be nice if we could make this final by using @AutoBuilder allowing for:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean isDrain = false;\n          \n          \n            \n                private final boolean isDrain;", "url": "https://github.com/apache/beam/pull/12371#discussion_r464575531", "createdAt": "2020-08-03T18:01:34Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -91,13 +91,21 @@ public static TransformReplacement createSizedReplacement() {\n    * .\n    */\n   public static TransformReplacement createTruncateReplacement() {\n-    return TruncateReplacement.INSTANCE;\n+    return SizedReplacement.DRAIN_INSTANCE;\n   }\n \n   /** See {@link #createSizedReplacement()} for details. */\n   private static class SizedReplacement implements TransformReplacement {\n \n     private static final SizedReplacement INSTANCE = new SizedReplacement();\n+    private static final SizedReplacement DRAIN_INSTANCE = new SizedReplacement().withDrain();\n+\n+    private boolean isDrain = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990067489b90f0c128f29fcfdb8b153ba3f0a5cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTQ5MDEzOnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxMToxMVrOG7Du7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxMToxMVrOG7Du7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MDMzNA==", "bodyText": "Should we able to simplify this more with?\nPTransform.Builder newCompositeRoot = ... add pair w/ restriction and split and size ...\nString processSizedElementsInputPCollectionId = splitAndSizeOutId;\nif (isDrain) {\n  ... add drain transform ...\n  newCompositeRoot.add drain transform\n  String processSizedElementsInputPCollectionId = truncateAndSizeOutId;\n}\n... add process sized elements transform ...\nnewCompositeRoot.add process sized transform\n\nI don't think we should need two copies of adding ProcessSizedElementsAndRestrictions", "url": "https://github.com/apache/beam/pull/12371#discussion_r464580334", "createdAt": "2020-08-03T18:11:11Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -214,39 +222,124 @@ public MessageWithComponents getReplacement(\n             generateUniqueId(\n                 transformId + \"/ProcessSizedElementsAndRestrictions\",\n                 existingComponents::containsTransforms);\n-        {\n-          PTransform.Builder processSizedElementsAndRestrictions = PTransform.newBuilder();\n-          processSizedElementsAndRestrictions.putInputs(mainInputName, splitAndSizeOutId);\n-          processSizedElementsAndRestrictions.putAllInputs(sideInputs);\n-          processSizedElementsAndRestrictions.putAllOutputs(splittableParDo.getOutputsMap());\n-          processSizedElementsAndRestrictions.setUniqueName(\n-              generateUniquePCollectonName(\n-                  splittableParDo.getUniqueName() + \"/ProcessSizedElementsAndRestrictions\",\n-                  existingComponents));\n-          processSizedElementsAndRestrictions.setSpec(\n-              FunctionSpec.newBuilder()\n-                  .setUrn(\n-                      PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN)\n-                  .setPayload(splittableParDo.getSpec().getPayload()));\n-          processSizedElementsAndRestrictions.setEnvironmentId(splittableParDo.getEnvironmentId());\n+        if (!isDrain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990067489b90f0c128f29fcfdb8b153ba3f0a5cc"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 953, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}