{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODU2ODIw", "number": 11263, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1MDo0OVrODs2Twg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyNzo0N1rODtMIYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUzNzMwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/util/UnownedOutputStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1MDo0OVrOF97s3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowMjowM1rOF9_Xzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NTU5Nw==", "bodyText": "should not this call the method with the full signature?\nMaybe it is best to inline this method in the caller, looks simpler IMO", "url": "https://github.com/apache/beam/pull/11263#discussion_r400485597", "createdAt": "2020-03-30T20:50:49Z", "author": {"login": "iemejia"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/util/UnownedOutputStreamTest.java", "diffHunk": "@@ -53,4 +57,21 @@ public void testClosingThrows() throws Exception {\n     expectedException.expectMessage(\"Caller does not own the underlying\");\n     os.close();\n   }\n+\n+  @Test\n+  public void testWrite() throws IOException {\n+    ByteArrayOutputStream expected = new ByteArrayOutputStream();\n+    ByteArrayOutputStream actual = new ByteArrayOutputStream();\n+    UnownedOutputStream osActual = new UnownedOutputStream(actual);\n+\n+    writeToBoth(expected, osActual, \"Hello World!\".getBytes(StandardCharsets.UTF_8));\n+    writeToBoth(expected, osActual, \"Welcome!\".getBytes(StandardCharsets.UTF_8));\n+\n+    assertArrayEquals(expected.toByteArray(), actual.toByteArray());\n+  }\n+\n+  private static void writeToBoth(OutputStream a, OutputStream b, byte[] data) throws IOException {\n+    a.write(data);\n+    b.write(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fabfedb04041746ead1bbcc3a70e35730847d93"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NTc0Mw==", "bodyText": "Done! Inlined with full signature!", "url": "https://github.com/apache/beam/pull/11263#discussion_r400545743", "createdAt": "2020-03-30T23:02:03Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/util/UnownedOutputStreamTest.java", "diffHunk": "@@ -53,4 +57,21 @@ public void testClosingThrows() throws Exception {\n     expectedException.expectMessage(\"Caller does not own the underlying\");\n     os.close();\n   }\n+\n+  @Test\n+  public void testWrite() throws IOException {\n+    ByteArrayOutputStream expected = new ByteArrayOutputStream();\n+    ByteArrayOutputStream actual = new ByteArrayOutputStream();\n+    UnownedOutputStream osActual = new UnownedOutputStream(actual);\n+\n+    writeToBoth(expected, osActual, \"Hello World!\".getBytes(StandardCharsets.UTF_8));\n+    writeToBoth(expected, osActual, \"Welcome!\".getBytes(StandardCharsets.UTF_8));\n+\n+    assertArrayEquals(expected.toByteArray(), actual.toByteArray());\n+  }\n+\n+  private static void writeToBoth(OutputStream a, OutputStream b, byte[] data) throws IOException {\n+    a.write(data);\n+    b.write(data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NTU5Nw=="}, "originalCommit": {"oid": "0fabfedb04041746ead1bbcc3a70e35730847d93"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjkzNTc4OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/util/UnownedOutputStreamTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0NzowN1rOF-cWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowNzozMFrOF-frqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyMDU5MA==", "bodyText": "This won't actually test that the singular version of the method was called since if FilteredOutputStream wrote one byte at a time you would still get the expected result. You'll need to use a mock and validate that #write(byte[], int, int) was called the correct number of times.", "url": "https://github.com/apache/beam/pull/11263#discussion_r401020590", "createdAt": "2020-03-31T15:47:07Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/util/UnownedOutputStreamTest.java", "diffHunk": "@@ -53,4 +56,22 @@ public void testClosingThrows() throws Exception {\n     expectedException.expectMessage(\"Caller does not own the underlying\");\n     os.close();\n   }\n+\n+  @Test\n+  public void testWrite() throws IOException {\n+    ByteArrayOutputStream expected = new ByteArrayOutputStream();\n+    ByteArrayOutputStream actual = new ByteArrayOutputStream();\n+    UnownedOutputStream osActual = new UnownedOutputStream(actual);\n+\n+    byte[] data0 = \"Hello World!\".getBytes(StandardCharsets.UTF_8);\n+    byte[] data1 = \"Welcome!\".getBytes(StandardCharsets.UTF_8);\n+\n+    expected.write(data0, 0, data0.length);\n+    osActual.write(data0, 0, data0.length);\n+\n+    expected.write(data1, 0, data1.length);\n+    osActual.write(data1, 0, data1.length);\n+\n+    assertArrayEquals(expected.toByteArray(), actual.toByteArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef7f9c5d6232d1d6a79ba495fcfdfc09c5d6638"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NTExMg==", "bodyText": "I just added CallCountOutputStream to test the proper number of call count.", "url": "https://github.com/apache/beam/pull/11263#discussion_r401075112", "createdAt": "2020-03-31T17:07:30Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/util/UnownedOutputStreamTest.java", "diffHunk": "@@ -53,4 +56,22 @@ public void testClosingThrows() throws Exception {\n     expectedException.expectMessage(\"Caller does not own the underlying\");\n     os.close();\n   }\n+\n+  @Test\n+  public void testWrite() throws IOException {\n+    ByteArrayOutputStream expected = new ByteArrayOutputStream();\n+    ByteArrayOutputStream actual = new ByteArrayOutputStream();\n+    UnownedOutputStream osActual = new UnownedOutputStream(actual);\n+\n+    byte[] data0 = \"Hello World!\".getBytes(StandardCharsets.UTF_8);\n+    byte[] data1 = \"Welcome!\".getBytes(StandardCharsets.UTF_8);\n+\n+    expected.write(data0, 0, data0.length);\n+    osActual.write(data0, 0, data0.length);\n+\n+    expected.write(data1, 0, data1.length);\n+    osActual.write(data1, 0, data1.length);\n+\n+    assertArrayEquals(expected.toByteArray(), actual.toByteArray());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAyMDU5MA=="}, "originalCommit": {"oid": "5ef7f9c5d6232d1d6a79ba495fcfdfc09c5d6638"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzExMjY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/UnownedOutputStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyNzo0N1rOF-eHHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzowNDo1NVrOF-flwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0OTM3Mw==", "bodyText": "Wondering if we should do the bounds check here too (like in FilterOutputStream or we assume that the delegated does the check? opinions @lukecwik", "url": "https://github.com/apache/beam/pull/11263#discussion_r401049373", "createdAt": "2020-03-31T16:27:47Z", "author": {"login": "iemejia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/UnownedOutputStream.java", "diffHunk": "@@ -53,4 +53,9 @@ public int hashCode() {\n   public String toString() {\n     return MoreObjects.toStringHelper(UnownedOutputStream.class).add(\"out\", out).toString();\n   }\n+\n+  @Override\n+  public void write(byte[] b, int off, int len) throws IOException {\n+    out.write(b, off, len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef7f9c5d6232d1d6a79ba495fcfdfc09c5d6638"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1MjEwNA==", "bodyText": "Leave the bounds checking to the part of the system that accesses the byte[] otherwise every layer will perform the same validation.", "url": "https://github.com/apache/beam/pull/11263#discussion_r401052104", "createdAt": "2020-03-31T16:31:55Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/UnownedOutputStream.java", "diffHunk": "@@ -53,4 +53,9 @@ public int hashCode() {\n   public String toString() {\n     return MoreObjects.toStringHelper(UnownedOutputStream.class).add(\"out\", out).toString();\n   }\n+\n+  @Override\n+  public void write(byte[] b, int off, int len) throws IOException {\n+    out.write(b, off, len);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0OTM3Mw=="}, "originalCommit": {"oid": "5ef7f9c5d6232d1d6a79ba495fcfdfc09c5d6638"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3MzYwMg==", "bodyText": "I agree with @lukecwik", "url": "https://github.com/apache/beam/pull/11263#discussion_r401073602", "createdAt": "2020-03-31T17:04:55Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/UnownedOutputStream.java", "diffHunk": "@@ -53,4 +53,9 @@ public int hashCode() {\n   public String toString() {\n     return MoreObjects.toStringHelper(UnownedOutputStream.class).add(\"out\", out).toString();\n   }\n+\n+  @Override\n+  public void write(byte[] b, int off, int len) throws IOException {\n+    out.write(b, off, len);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0OTM3Mw=="}, "originalCommit": {"oid": "5ef7f9c5d6232d1d6a79ba495fcfdfc09c5d6638"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1563, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}