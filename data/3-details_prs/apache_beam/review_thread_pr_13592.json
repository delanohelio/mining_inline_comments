{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzc1MDg3", "number": 13592, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOTowMzoyM1rOFIFGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToyMjo0OFrOFIFedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDE2Mzk5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOTowMzoyM1rOIJznBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOTowMzoyM1rOIJznBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1MzY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions, reader);\n          \n          \n            \n                    return new UnboundedSourceAsSDFRestrictionTracker<>(restriction, pipelineOptions, reader);", "url": "https://github.com/apache/beam/pull/13592#discussion_r547153671", "createdAt": "2020-12-22T09:03:23Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -488,7 +519,20 @@ public void splitRestriction(\n         restrictionTracker(\n             @Restriction UnboundedSourceRestriction<OutputT, CheckpointT> restriction,\n             PipelineOptions pipelineOptions) {\n-      return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions);\n+      try {\n+        UnboundedReader reader =\n+            cachedReaders.getIfPresent(\n+                createCacheKey(restriction.getSource(), restriction.getCheckpoint()));\n+        if (reader == null) {\n+          reader =\n+              restriction.getSource().createReader(pipelineOptions, restriction.getCheckpoint());\n+          cachedReaders.put(\n+              createCacheKey(restriction.getSource(), restriction.getCheckpoint()), reader);\n+        }\n+        return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions, reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDE3MDg5OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOTowNTozNFrOIJzrIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOTowNTozNFrOIJzrIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NDcyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  UnboundedReader currentReader =\n          \n          \n            \n                  UnboundedReader<OutputT> currentReader =", "url": "https://github.com/apache/beam/pull/13592#discussion_r547154722", "createdAt": "2020-12-22T09:05:34Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -501,6 +545,10 @@ public ProcessContinuation processElement(\n         throws IOException {\n       UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction =\n           tracker.currentRestriction();\n+      UnboundedReader currentReader =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDE3NDI3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOTowNjozNVrOIJztKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOTowNjozNVrOIJztKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NTI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n          \n          \n            \n                private Cache<UnboundedSourceRestriction<OutputT, CheckointT>, UnboundedReader> cachedReaders;", "url": "https://github.com/apache/beam/pull/13592#discussion_r547155243", "createdAt": "2020-12-22T09:06:35Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDE4Nzg0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToxMDo1MVrOIJz1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToxMDo1MVrOIJz1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NzMzMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/beam/pull/13592#discussion_r547157332", "createdAt": "2020-12-22T09:10:51Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -756,23 +810,20 @@ public CheckpointMark getCheckpointMark() {\n       private final PipelineOptions pipelineOptions;\n       private UnboundedSource.UnboundedReader<OutputT> currentReader;\n       private boolean readerHasBeenStarted;\n+      private boolean isDone;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDE5MDIyOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToxMTozNVrOIJz2zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToxMTozNVrOIJz2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NzcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      UnboundedReader cachedUnboundedReader) {\n          \n          \n            \n                      UnboundedReader<OutputT> cachedUnboundedReader) {", "url": "https://github.com/apache/beam/pull/13592#discussion_r547157710", "createdAt": "2020-12-22T09:11:35Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -756,23 +810,20 @@ public CheckpointMark getCheckpointMark() {\n       private final PipelineOptions pipelineOptions;\n       private UnboundedSource.UnboundedReader<OutputT> currentReader;\n       private boolean readerHasBeenStarted;\n+      private boolean isDone;\n \n       UnboundedSourceAsSDFRestrictionTracker(\n           UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction,\n-          PipelineOptions pipelineOptions) {\n+          PipelineOptions pipelineOptions,\n+          UnboundedReader cachedUnboundedReader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDIwMTYzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToxNTowN1rOIJz9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToxNTowN1rOIJz9pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1OTQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          currentReader.getCurrentSource(), (CheckpointT) currentReader.getCheckpointMark()),\n          \n          \n            \n                          (UnboundedSource<OutputT, CheckpointT>) currentReader.getCurrentSource(),\n          \n          \n            \n                          (CheckpointT) currentReader.getCheckpointMark()),", "url": "https://github.com/apache/beam/pull/13592#discussion_r547159460", "createdAt": "2020-12-22T09:15:07Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -527,6 +575,12 @@ public ProcessContinuation processElement(\n             currentRestriction.getCheckpoint()::finalizeCheckpoint);\n       }\n \n+      // Update the readers cache with latest CheckpointMark.\n+      cachedReaders.put(\n+          createCacheKey(\n+              currentReader.getCurrentSource(), (CheckpointT) currentReader.getCheckpointMark()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDIyMTI4OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToyMToxMVrOIJ0JrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODo0Nzo1M1rOIKFaeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MjU0MQ==", "bodyText": "I think this could be way lower. We insert the reader back to the cache after checkpoint, so if it is not reused after few seconds, it is likely not be reused at all. Maybe 10 seconds might be enough?", "url": "https://github.com/apache/beam/pull/13592#discussion_r547162541", "createdAt": "2020-12-22T09:21:11Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n+    private UnboundedSourceRestriction createCacheKey(\n+        UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      // For caching reader, we don't care about the watermark.\n+      return UnboundedSourceRestriction.create(\n+          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+    }\n+\n+    @Setup\n+    public void setUp() throws Exception {\n+      cachedReaders =\n+          CacheBuilder.newBuilder()\n+              .expireAfterWrite(5, TimeUnit.MINUTES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0NTM2OQ==", "bodyText": "5 mins might be high for DirectRunner but I feel like a few seconds might be too small for a distributed system like Dataflow, especially for a long run streaming application. How about we start from 1min?", "url": "https://github.com/apache/beam/pull/13592#discussion_r547445369", "createdAt": "2020-12-22T18:47:53Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n+    private UnboundedSourceRestriction createCacheKey(\n+        UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      // For caching reader, we don't care about the watermark.\n+      return UnboundedSourceRestriction.create(\n+          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+    }\n+\n+    @Setup\n+    public void setUp() throws Exception {\n+      cachedReaders =\n+          CacheBuilder.newBuilder()\n+              .expireAfterWrite(5, TimeUnit.MINUTES)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MjU0MQ=="}, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDIyNjQ1OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToyMjo0OFrOIJ0M2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODozNjozMVrOIKFG7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MzM1Mw==", "bodyText": "This looks dangerous. What if we are still using the reader inside processElement? This is likely to be called from different thread, so we need a synchronization there and not close the reader if being used.", "url": "https://github.com/apache/beam/pull/13592#discussion_r547163353", "createdAt": "2020-12-22T09:22:48Z", "author": {"login": "je-ik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n+    private UnboundedSourceRestriction createCacheKey(\n+        UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      // For caching reader, we don't care about the watermark.\n+      return UnboundedSourceRestriction.create(\n+          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+    }\n+\n+    @Setup\n+    public void setUp() throws Exception {\n+      cachedReaders =\n+          CacheBuilder.newBuilder()\n+              .expireAfterWrite(5, TimeUnit.MINUTES)\n+              .maximumSize(100)\n+              .removalListener(\n+                  (RemovalListener<UnboundedSourceRestriction, UnboundedReader>)\n+                      removalNotification -> {\n+                        try {\n+                          removalNotification.getValue().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDM2Nw==", "bodyText": "That's a very good point. Thanks for catching this! I should remove the entry from cache when I obtain the reader from the cache to avoid eviction during processing and we will cache the reader after we finish.", "url": "https://github.com/apache/beam/pull/13592#discussion_r547440367", "createdAt": "2020-12-22T18:36:31Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -439,11 +444,37 @@ public IsBounded isBounded() {\n     private static final Logger LOG = LoggerFactory.getLogger(UnboundedSourceAsSDFWrapperFn.class);\n     private static final int DEFAULT_BUNDLE_FINALIZATION_LIMIT_MINS = 10;\n     private final Coder<CheckpointT> checkpointCoder;\n+    private Cache<UnboundedSourceRestriction, UnboundedReader> cachedReaders;\n \n     private UnboundedSourceAsSDFWrapperFn(Coder<CheckpointT> checkpointCoder) {\n       this.checkpointCoder = checkpointCoder;\n     }\n \n+    private UnboundedSourceRestriction createCacheKey(\n+        UnboundedSource<OutputT, CheckpointT> source, CheckpointT checkpoint) {\n+      // For caching reader, we don't care about the watermark.\n+      return UnboundedSourceRestriction.create(\n+          source, checkpoint, BoundedWindow.TIMESTAMP_MIN_VALUE);\n+    }\n+\n+    @Setup\n+    public void setUp() throws Exception {\n+      cachedReaders =\n+          CacheBuilder.newBuilder()\n+              .expireAfterWrite(5, TimeUnit.MINUTES)\n+              .maximumSize(100)\n+              .removalListener(\n+                  (RemovalListener<UnboundedSourceRestriction, UnboundedReader>)\n+                      removalNotification -> {\n+                        try {\n+                          removalNotification.getValue().close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MzM1Mw=="}, "originalCommit": {"oid": "3d0a8185a0e4937132c38d3acac7ac8356caf25d"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2427, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}