{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzg2NDMz", "number": 11596, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1NTowNlrOD6Zd0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMzoyMVrOD-Rm4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTYxMjMzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OrderedTimeRange.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1NTowNlrOGSN-HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxMzo1OFrOGSSLCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NjQ0NQ==", "bodyText": "why not use the offset range tracker and convert time to long?", "url": "https://github.com/apache/beam/pull/11596#discussion_r421756445", "createdAt": "2020-05-07T19:55:06Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OrderedTimeRange.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms.splittabledofn;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.AtomicCoder;\n+import org.apache.beam.sdk.coders.CoderException;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Objects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/** A restriction represented by a range of Instants [from, to). */\n+public class OrderedTimeRange", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwOTUxMA==", "bodyText": "TBH, the main value add here is more readable restriction bounds / values in the error messages for the context of the time range use case.\nIf there is a cleaner way of borrowing all implementation from OffsetRangeTracker but changing format of these error messages, I'd be all ears.\nI suppose I could add a  private final bool offestsAreInstants member to OffsetRangeTracker and throw conditional formatting on each error message?", "url": "https://github.com/apache/beam/pull/11596#discussion_r421809510", "createdAt": "2020-05-07T21:37:40Z", "author": {"login": "jaketf"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OrderedTimeRange.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms.splittabledofn;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.AtomicCoder;\n+import org.apache.beam.sdk.coders.CoderException;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Objects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/** A restriction represented by a range of Instants [from, to). */\n+public class OrderedTimeRange", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NjQ0NQ=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxOTAwMQ==", "bodyText": "Any bug in this space is an error in the implementation of the IO connector so these error messages will mostly come up during development and then if any bugs are discovered during the usage the user won't be able to do much and this will go to the Beam community/IO author to fix.\nIf you really want to, adding a format method and creating a subclass would make more sense then having effectively a copy.", "url": "https://github.com/apache/beam/pull/11596#discussion_r421819001", "createdAt": "2020-05-07T21:58:18Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OrderedTimeRange.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms.splittabledofn;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.AtomicCoder;\n+import org.apache.beam.sdk.coders.CoderException;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Objects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/** A restriction represented by a range of Instants [from, to). */\n+public class OrderedTimeRange", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NjQ0NQ=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNTI4OA==", "bodyText": "that make a lot of sense, thanks for the suggestion.", "url": "https://github.com/apache/beam/pull/11596#discussion_r421825288", "createdAt": "2020-05-07T22:13:58Z", "author": {"login": "jaketf"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OrderedTimeRange.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.transforms.splittabledofn;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.AtomicCoder;\n+import org.apache.beam.sdk.coders.CoderException;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.util.VarInt;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Objects;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/** A restriction represented by a range of Instants [from, to). */\n+public class OrderedTimeRange", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NjQ0NQ=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTYyMDkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1NzoyN1rOGSODdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozMzoyOFrOGS3IPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NzgxNQ==", "bodyText": "Please make this a seperate PR and add a test that covers this case to the OffsetRangeTrackerTest\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (lastAttemptedOffset == null) {\n          \n          \n            \n                  throw new IllegalStateException(\"lastAttemptedOffset should not be null\");\n          \n          \n            \n                }\n          \n          \n            \n                checkState(\n          \n          \n            \n                    lastAttemptedOffset >= range.getTo() - 1,\n          \n          \n            \n                    \"Last attempted offset was %s in range %s, claiming work in [%s, %s) was not attempted\",\n          \n          \n            \n                checkState(\n          \n          \n            \n                    lastAttemptedOffset != null && lastAttemptedOffset >= range.getTo() - 1,\n          \n          \n            \n                    \"Last attempted offset was %s in range %s, claiming work in [%s, %s) was not attempted\",", "url": "https://github.com/apache/beam/pull/11596#discussion_r421757815", "createdAt": "2020-05-07T19:57:27Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -94,6 +94,9 @@ public void checkDone() throws IllegalStateException {\n     if (range.getFrom() == range.getTo()) {\n       return;\n     }\n+    if (lastAttemptedOffset == null) {\n+      throw new IllegalStateException(\"lastAttemptedOffset should not be null\");\n+    }\n     checkState(\n         lastAttemptedOffset >= range.getTo() - 1,\n         \"Last attempted offset was %s in range %s, claiming work in [%s, %s) was not attempted\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNDQ2Mg==", "bodyText": "Sure, I can move this to separate PR.\nKindly, disagree on suggestion as it will just cause a different NPE on L102 when you call lastAttemptedOffset + 1 to try and print this error message.\nI think the lastAttemptedOffset null check should be separate and throw a more specific error message before we get to this stateCheck.\nThis failure mode is almost definitely mis-use of OffsetRangeTracker that would even cause this, and would be difficult to say what work was or wasn't attempted.", "url": "https://github.com/apache/beam/pull/11596#discussion_r421824462", "createdAt": "2020-05-07T22:11:42Z", "author": {"login": "jaketf"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -94,6 +94,9 @@ public void checkDone() throws IllegalStateException {\n     if (range.getFrom() == range.getTo()) {\n       return;\n     }\n+    if (lastAttemptedOffset == null) {\n+      throw new IllegalStateException(\"lastAttemptedOffset should not be null\");\n+    }\n     checkState(\n         lastAttemptedOffset >= range.getTo() - 1,\n         \"Last attempted offset was %s in range %s, claiming work in [%s, %s) was not attempted\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NzgxNQ=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNjQ0Ng==", "bodyText": "Good point but we should structure message saying that we haven't claimed anything in the range which is non-empty.", "url": "https://github.com/apache/beam/pull/11596#discussion_r421826446", "createdAt": "2020-05-07T22:16:51Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -94,6 +94,9 @@ public void checkDone() throws IllegalStateException {\n     if (range.getFrom() == range.getTo()) {\n       return;\n     }\n+    if (lastAttemptedOffset == null) {\n+      throw new IllegalStateException(\"lastAttemptedOffset should not be null\");\n+    }\n     checkState(\n         lastAttemptedOffset >= range.getTo() - 1,\n         \"Last attempted offset was %s in range %s, claiming work in [%s, %s) was not attempted\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NzgxNQ=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDc4Mw==", "bodyText": "opened #11648", "url": "https://github.com/apache/beam/pull/11596#discussion_r422430783", "createdAt": "2020-05-09T00:33:28Z", "author": {"login": "jaketf"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -94,6 +94,9 @@ public void checkDone() throws IllegalStateException {\n     if (range.getFrom() == range.getTo()) {\n       return;\n     }\n+    if (lastAttemptedOffset == null) {\n+      throw new IllegalStateException(\"lastAttemptedOffset should not be null\");\n+    }\n     checkState(\n         lastAttemptedOffset >= range.getTo() - 1,\n         \"Last attempted offset was %s in range %s, claiming work in [%s, %s) was not attempted\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NzgxNQ=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTY0OTA4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowNTo0MFrOGSOVEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoxNjoyNVrOGT0lHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw==", "bodyText": "Typically, doing one split for every 64mbs of output has been our guidance here in the past.\nDynamic splitting is meant to fill in the gap if there is too little splitting or a specific restriction has a lot more data then other restrictions.", "url": "https://github.com/apache/beam/pull/11596#discussion_r421762323", "createdAt": "2020-05-07T20:05:40Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNzA1OQ==", "bodyText": "Unfortunately, in this use case dynamic splitting would be crucial because we can't know the distribution of data in the restriction dimension (sendTime).\nIf you imagine a hospital might be much busier during daytime / weekdays than night times weekends (though never dormant due to ICU and emergency services). \"Day time\" might change base on hospital location, week days are subject to holidays, etc.\nData distribution in sendTime may be subject to significant spikes if one of the upstream systems populating sendTime has to backfill after a maintenance period and doesn't responsibly set this field to event time but sets all of the sendTimes to a short range of  backfill\nprocessing time (this is sub optimal behavior of that system but sometimes a reality).", "url": "https://github.com/apache/beam/pull/11596#discussion_r421807059", "createdAt": "2020-05-07T21:32:02Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMzkxNQ==", "bodyText": "Yeah, you'll have to choose a reasonable value based upon your knowledge within this domain and I understand that this may not work in practice.\nIn the case where people send a lot of data for a narrow time range, you would have to support filtering based upon other properties such as messageType or sendFacility and could break up the space based upon prefixes such as ~a, ~b, NOT ~a AND NOT ~b but this is dependent on this being efficient in the service as well.", "url": "https://github.com/apache/beam/pull/11596#discussion_r421813915", "createdAt": "2020-05-07T21:46:58Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNzk2NA==", "bodyText": "Yeah I think the \"spiky backfill\" (many cases in a small sendTime) is a corner case of a hot split that would just be slow and users would have to accept that or take it up with their upstream system.\nsplitting on messageType / sendFacility are probably more popular logical filters and feels like a hack for a corner case that might mess with performance under the \"typical\" distribution of data in sendTime.", "url": "https://github.com/apache/beam/pull/11596#discussion_r421827964", "createdAt": "2020-05-07T22:20:45Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NzYzMw==", "bodyText": "My intuition says hourly splits seems like a more reasonable starting point than day but I'm unsure about this without testing on a few datasets.\nHowever for super large time ranges 10 years = 87,600 splits. naturally this explodes if we think about even smaller time ranges.\nFor example, I assume the initial collection of splits returned in SplitRestriction has to fit in memory?\nOr even just the loop to define all these might take a significant amount of time", "url": "https://github.com/apache/beam/pull/11596#discussion_r421847633", "createdAt": "2020-05-07T23:18:12Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzMzMwMw==", "bodyText": "That seems like a lot.\nDataflow has an API limit of 20mbs for split descriptions when being returned which usually tops out around 10k splits for sources but even 10k is too much. Typically 20-50 splits is enough since dynamic splitting will ramp that up to 1000s if necessary.", "url": "https://github.com/apache/beam/pull/11596#discussion_r422233303", "createdAt": "2020-05-08T16:14:22Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjM4Mw==", "bodyText": "Interesting, thanks for those details!\nBut I thought Dataflow doesn't really do dynamic splitting yet so the initial split is all that matters? Maybe I'm confusing dynamic rebalancing != dynamic splitting?\nPerhaps daily is the appropriate happy medium for now?\n1000s not 10,000s of initial splits.\nIn the future when dynamic splitting is supported bump initial split default to weeks?", "url": "https://github.com/apache/beam/pull/11596#discussion_r422426383", "createdAt": "2020-05-09T00:10:32Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNzk5OQ==", "bodyText": "dynamic splitting is a subset of dynamic rebalancing since dynamic rebalancing also covers other aspects such as splitting a GroupByKey, scaling up/down workers, ...\ndynamic splitting is supported by batch Dataflow for bounded sinks using runner v1 and splittable dofns when running a batch pipeline when using runner v2", "url": "https://github.com/apache/beam/pull/11596#discussion_r423227999", "createdAt": "2020-05-11T18:15:01Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNzU5OA==", "bodyText": "Ok I think that dynamic splitting is \"nice to have\" for this connector and can wait for v2 runner.\nJust adding initial splitting w/ SDF and v1 runner is a huge improvement over the existing implementation.", "url": "https://github.com/apache/beam/pull/11596#discussion_r423437598", "createdAt": "2020-05-12T03:16:25Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +548,120 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OrderedTimeRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OrderedTimeRange(from, to);\n+    }\n+\n+    @NewTracker\n+    public OrderedTimeRangeTracker newTracker(@Restriction OrderedTimeRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(\n+        @Restriction OrderedTimeRange timeRange, OutputReceiver<OrderedTimeRange> out) {\n+      // TODO(jaketf) How to pick optimal values for desiredNumOffsetsPerSplit ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjMyMw=="}, "originalCommit": {"oid": "d2a094d5a133132d015fc7ed335e5b430a19f183"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjUxODkwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNzo1NlrOGXs6vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNzo1NlrOGXs6vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwNjM2Ng==", "bodyText": "ValueProvider arguments are usually not known at pipeline construction time, so it is not useful to call get on them when you create the PCollection. The usual method is to have ValueProvider attributes for the class - when you get String arguments, you would wrap them with StaticValueProvider - and in the execution-time methods (e.g. processelement, finish/startbundle), you would call get on the valueproviders. I seem to have missed this point earlier. sorry about that.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427506366", "createdAt": "2020-05-19T18:17:56Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -431,25 +455,70 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n       this.filter = filter.get();\n     }\n \n+    /**\n+     * Instantiates a new List hl 7 v 2 messages.\n+     *\n+     * @param hl7v2Stores the hl 7 v 2 stores\n+     * @param filter the filter\n+     * @param initialSplitDuration the initial split duration for sendTime dimension splits\n+     */\n+    ListHL7v2Messages(\n+        ValueProvider<List<String>> hl7v2Stores,\n+        ValueProvider<String> filter,\n+        Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores.get();\n+      this.filter = filter.get();\n+      this.initialSplitDuration = initialSplitDuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYzNTk3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0OTo1M1rOGXuFNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjoxMjo1MVrOGX0gCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTQyOQ==", "bodyText": "Would we output the first message twice?\nin the first iteration, msg = page.get(0), from line 616\nin the second iteration, msg = page.get(i++) - which is still 0, and then i is incremented?\nYou could use ++i, but then you would have to adjust the condition in the while loop, right?", "url": "https://github.com/apache/beam/pull/11596#discussion_r427525429", "createdAt": "2020-05-19T18:49:53Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +547,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter, \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);\n+              msg = page.get(i++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MDQ2OA==", "bodyText": "tl;dr No, we don't output the element twice. This is intended behavior.\npage is  List<HL7v2Message>\nWhen we call page.get we just call List::get.\nThis is safe to call twice and will \"get\" the first element of the list both times.\nWe only emit results in L631 where we call OutputReceiver::output", "url": "https://github.com/apache/beam/pull/11596#discussion_r427540468", "createdAt": "2020-05-19T19:16:00Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +547,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter, \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);\n+              msg = page.get(i++);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTQyOQ=="}, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MjYxNw==", "bodyText": "but won't we go right back to 631, and emit the message that we got from 632 after calling get(0) for the second time?", "url": "https://github.com/apache/beam/pull/11596#discussion_r427542617", "createdAt": "2020-05-19T19:19:58Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +547,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter, \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);\n+              msg = page.get(i++);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTQyOQ=="}, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzMDYwMA==", "bodyText": "I agree with @pabloem that this logic is not simple to follow and I think you could really simplify your code if you used https://guava.dev/releases/21.0/api/docs/com/google/common/collect/FluentIterable.html#concat-java.lang.Iterable-\nsince it would convert Iterable<List<HL7v2Message>> into Iterable<HL7v2Message> and only accesses the elements lazily so it wouldn't prefetch everything.\nThis would allow you to not worry that messages are in a page and your processing multiple pages.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427630600", "createdAt": "2020-05-19T22:12:51Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +547,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter, \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);\n+              msg = page.get(i++);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTQyOQ=="}, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjY1MTg4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1NDoxOFrOGXuO7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToyNzowNlrOGXvYEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNzkxOA==", "bodyText": "I don't know the API requirements, but you would be calling tryClaim twice on a milliSecond? Once in line 645, and once more here?", "url": "https://github.com/apache/beam/pull/11596#discussion_r427527918", "createdAt": "2020-05-19T18:54:18Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +547,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter, \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NTYxNw==", "bodyText": "tl;dr No that is not possible based on 629-640\ntryClaim on 624 claims lastClaimedMillisSecond\ntryClaim on 645 claims the millisecond of the cursor (which is advanced based on the while loop in L629-633)\nif the cusor is not advanced to a new millisecond (this happens when many messages at the end of a page came in the same millisecond) the if block in L636-640 contains continue which will eagerly exit this iteration of the while loop before getting to the try claim on L645 again. I called this scenario \"hangingClaim\" because we  cannot know if the first message(s) of the next page will also be from this millisecond.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427545617", "createdAt": "2020-05-19T19:25:11Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +547,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter, \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNzkxOA=="}, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NjY0MQ==", "bodyText": "sgtm", "url": "https://github.com/apache/beam/pull/11596#discussion_r427546641", "createdAt": "2020-05-19T19:27:06Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +547,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter);\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter, \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNzkxOA=="}, "originalCommit": {"oid": "e8859e7ff7770c5965e3eea18e0b0da5e4fe3d9c"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzE5OTU5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0MTowNVrOGXzqWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1MDowMFrOGX1T8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNjg1Ng==", "bodyText": "wouldn' this just be a small amount of waste since we would effectively get an empty response?", "url": "https://github.com/apache/beam/pull/11596#discussion_r427616856", "createdAt": "2020-05-19T21:41:05Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MDExMQ==", "bodyText": "correct.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427640111", "createdAt": "2020-05-19T22:38:49Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNjg1Ng=="}, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0Mzg4OA==", "bodyText": "note to self: remove reference to \"dynamically rebalance\" as this is not yet supported by dataflow runner.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427643888", "createdAt": "2020-05-19T22:50:00Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNjg1Ng=="}, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIwMjI5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0MjowOVrOGXzsBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0MjowOVrOGXzsBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNzI4Ng==", "bodyText": "consider using <ol> and <li> tags in the javadoc for your ordered list", "url": "https://github.com/apache/beam/pull/11596#discussion_r427617286", "createdAt": "2020-05-19T21:42:09Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.\n+   *\n+   * <p>Implementation includes overhead for: 1. two api calls to determine the min/max sendTime of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIwNzA5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0Mzo1NFrOGXzvFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0Mzo1NFrOGXzvFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODA3MQ==", "bodyText": "Consider using {@code ...} when referring to code and {@link ...} for things you can directly link against.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n          \n          \n            \n               * <p>This transform is optimized for dynamic splitting of {@code message.list} calls for large batches of", "url": "https://github.com/apache/beam/pull/11596#discussion_r427618071", "createdAt": "2020-05-19T21:43:54Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIxMDU2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0NTowNVrOGXzxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo0MTowNVrOGX1IKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODYwMA==", "bodyText": "I'm not sure if the users need to know the exact implementation details as this may lock future maintainers into meeting these goals even when they can produce a more efficient solution in the future.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427618600", "createdAt": "2020-05-19T21:45:05Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.\n+   *\n+   * <p>Implementation includes overhead for: 1. two api calls to determine the min/max sendTime of\n+   * the HL7v2 store at invocation time. 2. initial splitting into non-overlapping time ranges\n+   * (default daily) to achieve parallelization in separate messages.list calls.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MDg3Mw==", "bodyText": "I originally included this for users who may try to benchmark this against tiny / sparse results set and be surprised why it is slow / making so many api calls.\nI see your point will remove.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427640873", "createdAt": "2020-05-19T22:41:05Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.\n+   *\n+   * <p>Implementation includes overhead for: 1. two api calls to determine the min/max sendTime of\n+   * the HL7v2 store at invocation time. 2. initial splitting into non-overlapping time ranges\n+   * (default daily) to achieve parallelization in separate messages.list calls.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODYwMA=="}, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIxMTM5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0NToyNVrOGXzxug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0NToyNVrOGXzxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODc0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * sparse data sets in the sendTime dimension).\n          \n          \n            \n               * sparse data sets in the {@code sendTime} dimension).", "url": "https://github.com/apache/beam/pull/11596#discussion_r427618746", "createdAt": "2020-05-19T21:45:25Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.\n+   *\n+   * <p>Implementation includes overhead for: 1. two api calls to determine the min/max sendTime of\n+   * the HL7v2 store at invocation time. 2. initial splitting into non-overlapping time ranges\n+   * (default daily) to achieve parallelization in separate messages.list calls.\n+   *\n+   * <p>This will make more queries than necessary when used with very small data sets. (or very\n+   * sparse data sets in the sendTime dimension).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIxMzU5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0NjoxNlrOGXzzNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo0MjoyOVrOGX1KBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxOTEyNg==", "bodyText": "I don't think we want people to do this since empty splits are not that expensive and will quickly clear out a block of work.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427619126", "createdAt": "2020-05-19T21:46:16Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.\n+   *\n+   * <p>Implementation includes overhead for: 1. two api calls to determine the min/max sendTime of\n+   * the HL7v2 store at invocation time. 2. initial splitting into non-overlapping time ranges\n+   * (default daily) to achieve parallelization in separate messages.list calls.\n+   *\n+   * <p>This will make more queries than necessary when used with very small data sets. (or very\n+   * sparse data sets in the sendTime dimension).\n+   *\n+   * <p>If you have large but sparse data (e.g. hours between consecutive message sendTimes) and\n+   * know something about the time ranges where you have no data, consider using multiple instances\n+   * of this transform specifying sendTime filters to omit the ranges where there is no data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MTM1MA==", "bodyText": "That's great to know! will remove this guidance as it will lead to unnecessary complexity.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427641350", "createdAt": "2020-05-19T22:42:29Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.\n+   *\n+   * <p>Implementation includes overhead for: 1. two api calls to determine the min/max sendTime of\n+   * the HL7v2 store at invocation time. 2. initial splitting into non-overlapping time ranges\n+   * (default daily) to achieve parallelization in separate messages.list calls.\n+   *\n+   * <p>This will make more queries than necessary when used with very small data sets. (or very\n+   * sparse data sets in the sendTime dimension).\n+   *\n+   * <p>If you have large but sparse data (e.g. hours between consecutive message sendTimes) and\n+   * know something about the time ranges where you have no data, consider using multiple instances\n+   * of this transform specifying sendTime filters to omit the ranges where there is no data.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxOTEyNg=="}, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIyMTcxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0OTowNFrOGXz4OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0OTowNFrOGXz4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMDQwOA==", "bodyText": "even if a member variable is null, it should still be final since it doesn't look like we mutate it locally. Same reason for other places I suggest to change this.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ValueProvider<String> filter;\n          \n          \n            \n                private Duration initialSplitDuration;\n          \n          \n            \n                private final ValueProvider<String> filter;\n          \n          \n            \n                private final Duration initialSplitDuration;", "url": "https://github.com/apache/beam/pull/11596#discussion_r427620408", "createdAt": "2020-05-19T21:49:04Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes. It will dynamically\n+   * rebalance resources to handle \"peak traffic times\" but will waste resources if there are large\n+   * durations (days) of the sendTime dimension without data.\n+   *\n+   * <p>Implementation includes overhead for: 1. two api calls to determine the min/max sendTime of\n+   * the HL7v2 store at invocation time. 2. initial splitting into non-overlapping time ranges\n+   * (default daily) to achieve parallelization in separate messages.list calls.\n+   *\n+   * <p>This will make more queries than necessary when used with very small data sets. (or very\n+   * sparse data sets in the sendTime dimension).\n+   *\n+   * <p>If you have large but sparse data (e.g. hours between consecutive message sendTimes) and\n+   * know something about the time ranges where you have no data, consider using multiple instances\n+   * of this transform specifying sendTime filters to omit the ranges where there is no data.\n+   */\n   public static class ListHL7v2Messages extends PTransform<PBegin, PCollection<HL7v2Message>> {\n-    private final List<String> hl7v2Stores;\n-    private final String filter;\n+    private final ValueProvider<List<String>> hl7v2Stores;\n+    private ValueProvider<String> filter;\n+    private Duration initialSplitDuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIyNTQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1MDoxOVrOGXz6dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1MDoxOVrOGXz6dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMDk4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static class ListHL7v2MessagesFn extends DoFn<String, HL7v2Message> {\n          \n          \n            \n              @VisibleForTesting\n          \n          \n            \n              static class ListHL7v2MessagesFn extends DoFn<String, HL7v2Message> {", "url": "https://github.com/apache/beam/pull/11596#discussion_r427620983", "createdAt": "2020-05-19T21:50:19Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -427,29 +454,75 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n      * @param filter the filter\n      */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, ValueProvider<String> filter) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n-      this.filter = filter.get();\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+    }\n+\n+    /**\n+     * Instantiates a new List hl 7 v 2 messages.\n+     *\n+     * @param hl7v2Stores the hl 7 v 2 stores\n+     * @param filter the filter\n+     * @param initialSplitDuration the initial split duration for sendTime dimension splits\n+     */\n+    ListHL7v2Messages(\n+        ValueProvider<List<String>> hl7v2Stores,\n+        ValueProvider<String> filter,\n+        Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+      this.initialSplitDuration = initialSplitDuration;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n+      this.hl7v2Stores = hl7v2Stores;\n       this.filter = null;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     * @param initialSplitDuration the initial split duration\n+     */\n+    ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.initialSplitDuration = initialSplitDuration;\n+    }\n+\n     @Override\n     public PCollection<HL7v2Message> expand(PBegin input) {\n       return input\n-          .apply(Create.of(this.hl7v2Stores))\n-          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n+          .apply(Create.ofProvider(this.hl7v2Stores, ListCoder.of(StringUtf8Coder.of())))\n+          .apply(FlatMapElements.into(TypeDescriptors.strings()).via((x) -> x))\n+          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter, initialSplitDuration)))\n           .setCoder(new HL7v2MessageCoder())\n           // Break fusion to encourage parallelization of downstream processing.\n           .apply(Reshuffle.viaRandomKey());\n     }\n   }\n \n+  /**\n+   * Implemented as Splitable DoFn that claims millisecond resolutions of offset restrictions in the\n+   * Message.sendTime dimension.\n+   */\n+  @BoundedPerElement\n   static class ListHL7v2MessagesFn extends DoFn<String, HL7v2Message> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIzNDg0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1MzozNlrOGX0AJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMToxNDoxNVrOGX38Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMjQzOA==", "bodyText": "Can any of these be final?", "url": "https://github.com/apache/beam/pull/11596#discussion_r427622438", "createdAt": "2020-05-19T21:53:36Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -427,29 +454,75 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n      * @param filter the filter\n      */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, ValueProvider<String> filter) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n-      this.filter = filter.get();\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+    }\n+\n+    /**\n+     * Instantiates a new List hl 7 v 2 messages.\n+     *\n+     * @param hl7v2Stores the hl 7 v 2 stores\n+     * @param filter the filter\n+     * @param initialSplitDuration the initial split duration for sendTime dimension splits\n+     */\n+    ListHL7v2Messages(\n+        ValueProvider<List<String>> hl7v2Stores,\n+        ValueProvider<String> filter,\n+        Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+      this.initialSplitDuration = initialSplitDuration;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n+      this.hl7v2Stores = hl7v2Stores;\n       this.filter = null;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     * @param initialSplitDuration the initial split duration\n+     */\n+    ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.initialSplitDuration = initialSplitDuration;\n+    }\n+\n     @Override\n     public PCollection<HL7v2Message> expand(PBegin input) {\n       return input\n-          .apply(Create.of(this.hl7v2Stores))\n-          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n+          .apply(Create.ofProvider(this.hl7v2Stores, ListCoder.of(StringUtf8Coder.of())))\n+          .apply(FlatMapElements.into(TypeDescriptors.strings()).via((x) -> x))\n+          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter, initialSplitDuration)))\n           .setCoder(new HL7v2MessageCoder())\n           // Break fusion to encourage parallelization of downstream processing.\n           .apply(Reshuffle.viaRandomKey());\n     }\n   }\n \n+  /**\n+   * Implemented as Splitable DoFn that claims millisecond resolutions of offset restrictions in the\n+   * Message.sendTime dimension.\n+   */\n+  @BoundedPerElement\n   static class ListHL7v2MessagesFn extends DoFn<String, HL7v2Message> {\n \n-    private final String filter;\n+    private static final Logger LOG = LoggerFactory.getLogger(ListHL7v2MessagesFn.class);\n+    private ValueProvider<String> filter;\n+    // These control the initial restriction split which means that the list of integer pairs\n+    // must comfortably fit in memory.\n+    private static final Duration DEFAULT_DESIRED_SPLIT_DURATION = Duration.standardDays(1);\n+    private static final Duration DEFAULT_MIN_SPLIT_DURATION = Duration.standardHours(1);\n+    private Duration initialSplitDuration;\n+    private Instant from;\n+    private Instant to;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Njk3NA==", "bodyText": "I don't think so they don't get set until we make the earliest / lastest sendTime query in @GetInitialRestriction", "url": "https://github.com/apache/beam/pull/11596#discussion_r427686974", "createdAt": "2020-05-20T01:14:15Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -427,29 +454,75 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n      * @param filter the filter\n      */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, ValueProvider<String> filter) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n-      this.filter = filter.get();\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+    }\n+\n+    /**\n+     * Instantiates a new List hl 7 v 2 messages.\n+     *\n+     * @param hl7v2Stores the hl 7 v 2 stores\n+     * @param filter the filter\n+     * @param initialSplitDuration the initial split duration for sendTime dimension splits\n+     */\n+    ListHL7v2Messages(\n+        ValueProvider<List<String>> hl7v2Stores,\n+        ValueProvider<String> filter,\n+        Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+      this.initialSplitDuration = initialSplitDuration;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n+      this.hl7v2Stores = hl7v2Stores;\n       this.filter = null;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     * @param initialSplitDuration the initial split duration\n+     */\n+    ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.initialSplitDuration = initialSplitDuration;\n+    }\n+\n     @Override\n     public PCollection<HL7v2Message> expand(PBegin input) {\n       return input\n-          .apply(Create.of(this.hl7v2Stores))\n-          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n+          .apply(Create.ofProvider(this.hl7v2Stores, ListCoder.of(StringUtf8Coder.of())))\n+          .apply(FlatMapElements.into(TypeDescriptors.strings()).via((x) -> x))\n+          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter, initialSplitDuration)))\n           .setCoder(new HL7v2MessageCoder())\n           // Break fusion to encourage parallelization of downstream processing.\n           .apply(Reshuffle.viaRandomKey());\n     }\n   }\n \n+  /**\n+   * Implemented as Splitable DoFn that claims millisecond resolutions of offset restrictions in the\n+   * Message.sendTime dimension.\n+   */\n+  @BoundedPerElement\n   static class ListHL7v2MessagesFn extends DoFn<String, HL7v2Message> {\n \n-    private final String filter;\n+    private static final Logger LOG = LoggerFactory.getLogger(ListHL7v2MessagesFn.class);\n+    private ValueProvider<String> filter;\n+    // These control the initial restriction split which means that the list of integer pairs\n+    // must comfortably fit in memory.\n+    private static final Duration DEFAULT_DESIRED_SPLIT_DURATION = Duration.standardDays(1);\n+    private static final Duration DEFAULT_MIN_SPLIT_DURATION = Duration.standardHours(1);\n+    private Duration initialSplitDuration;\n+    private Instant from;\n+    private Instant to;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMjQzOA=="}, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIzNTkwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1NDowMlrOGX0AzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1NDowMlrOGX0AzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMjYwNA==", "bodyText": "nit: Might want to group your statics at the top together separate from the member variables.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427622604", "createdAt": "2020-05-19T21:54:02Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -427,29 +454,75 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n      * @param filter the filter\n      */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, ValueProvider<String> filter) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n-      this.filter = filter.get();\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+    }\n+\n+    /**\n+     * Instantiates a new List hl 7 v 2 messages.\n+     *\n+     * @param hl7v2Stores the hl 7 v 2 stores\n+     * @param filter the filter\n+     * @param initialSplitDuration the initial split duration for sendTime dimension splits\n+     */\n+    ListHL7v2Messages(\n+        ValueProvider<List<String>> hl7v2Stores,\n+        ValueProvider<String> filter,\n+        Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+      this.initialSplitDuration = initialSplitDuration;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n+      this.hl7v2Stores = hl7v2Stores;\n       this.filter = null;\n     }\n \n+    /**\n+     * Instantiates a new List hl7v2 messages.\n+     *\n+     * @param hl7v2Stores the hl7v2 stores\n+     * @param initialSplitDuration the initial split duration\n+     */\n+    ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, Duration initialSplitDuration) {\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.initialSplitDuration = initialSplitDuration;\n+    }\n+\n     @Override\n     public PCollection<HL7v2Message> expand(PBegin input) {\n       return input\n-          .apply(Create.of(this.hl7v2Stores))\n-          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n+          .apply(Create.ofProvider(this.hl7v2Stores, ListCoder.of(StringUtf8Coder.of())))\n+          .apply(FlatMapElements.into(TypeDescriptors.strings()).via((x) -> x))\n+          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter, initialSplitDuration)))\n           .setCoder(new HL7v2MessageCoder())\n           // Break fusion to encourage parallelization of downstream processing.\n           .apply(Reshuffle.viaRandomKey());\n     }\n   }\n \n+  /**\n+   * Implemented as Splitable DoFn that claims millisecond resolutions of offset restrictions in the\n+   * Message.sendTime dimension.\n+   */\n+  @BoundedPerElement\n   static class ListHL7v2MessagesFn extends DoFn<String, HL7v2Message> {\n \n-    private final String filter;\n+    private static final Logger LOG = LoggerFactory.getLogger(ListHL7v2MessagesFn.class);\n+    private ValueProvider<String> filter;\n+    // These control the initial restriction split which means that the list of integer pairs\n+    // must comfortably fit in memory.\n+    private static final Duration DEFAULT_DESIRED_SPLIT_DURATION = Duration.standardDays(1);\n+    private static final Duration DEFAULT_MIN_SPLIT_DURATION = Duration.standardHours(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIzOTIwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1NToxMVrOGX0Cxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1NToxMVrOGX0Cxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMzExMA==", "bodyText": "https://stackoverflow.com/questions/285177/how-do-i-call-one-constructor-from-another-in-java\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  new ListHL7v2MessagesFn(StaticValueProvider.of(filter), null);\n          \n          \n            \n                  this(StaticValueProvider.of(filter), null);", "url": "https://github.com/apache/beam/pull/11596#discussion_r427623110", "createdAt": "2020-05-19T21:55:11Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -459,7 +532,13 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n      * @param filter the filter\n      */\n     ListHL7v2MessagesFn(String filter) {\n+      new ListHL7v2MessagesFn(StaticValueProvider.of(filter), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzI0NjQ0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1NzozOVrOGX0HLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1NzozOVrOGX0HLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNDIzOA==", "bodyText": "This method is not necessary since OffsetRange supports HasDefaultTracker which your effectively invoking yourself.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @NewTracker\n          \n          \n            \n                public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n          \n          \n            \n                  return timeRange.newTracker();\n          \n          \n            \n                }", "url": "https://github.com/apache/beam/pull/11596#discussion_r427624238", "createdAt": "2020-05-19T21:57:39Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +551,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter.get());\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter.get()).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzI1MjI5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1OTo1MVrOGX0Kzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1OTo1MVrOGX0Kzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNTE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RestrictionTracker tracker,\n          \n          \n            \n                    RestrictionTracker<OffsetRange, Long> tracker,", "url": "https://github.com/apache/beam/pull/11596#discussion_r427625167", "createdAt": "2020-05-19T21:59:51Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +551,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter.get());\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter.get()).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzI3ODAzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjowOTo1MFrOGX0bAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjowOTo1MFrOGX0bAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyOTMxMw==", "bodyText": "It would sense to move this into wherever we do the list call.", "url": "https://github.com/apache/beam/pull/11596#discussion_r427629313", "createdAt": "2020-05-19T22:09:50Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +551,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter.get());\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter.get()).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter.get(), \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);\n+              msg = page.get(i++);\n+              cursor = Instant.parse(msg.getSendTime());\n+            }\n+\n+            if (i == page.size() && cursor.getMillis() == lastClaimedMilliSecond) {\n+              // reached the end of the page and timestamp still in the claimed ms.\n+              hangingClaim = true;\n+              continue;\n+            }\n+\n+            // If reached this point, msg.sendTime is outside the current claim.\n+            // Need to claim time range up to (and including) the cursor to properly advance the\n+            // tracker.\n+            tracker.tryClaim(cursor.getMillis());\n+            lastClaimedMilliSecond = cursor.getMillis();\n+            LOG.info(\n+                String.format(\n+                    \"After claiming between messages lastClaimedMilliSecond = %s\",\n+                    lastClaimedMilliSecond));\n+          }\n+        }\n         messageListingLatencyMs.update(Instant.now().getMillis() - reqestTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzMwMjY5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjoxOTo0MFrOGX0qWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNToyODozMFrOGYRczg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzMzI0MA==", "bodyText": "Should we be outputting elements with the timestamp of the message and should we be reporting a watermark?\nEven though you have a bounded SDF, it could be useful to report the watermark incase it is used in a streaming pipeline or users wanted to assign windows and perform grouping per window.\nThe current logic will assign the input's timestamp to all outputs which won't allow users to use windowing to effectively window the elements being output without assigning timestamps themselves. If we do want to go down this path it is simple right now because this transform always starts with PBegin but what would you want to do it the timestamp of the record is before the timestamp of the input element to the SDF (since it is illegal to output messages with timestamps before the input elements timestamp)?\nTo add watermark tracking based on timestamp of elements output, you would need to add the implementation for @GetInitialWatermarkEstimatorState and @NewWatermarkEstimator as seen in \n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Watch.java\n    \n    \n         Line 763\n      in\n      27656d7\n    \n    \n    \n    \n\n        \n          \n           @GetInitialWatermarkEstimatorState", "url": "https://github.com/apache/beam/pull/11596#discussion_r427633240", "createdAt": "2020-05-19T22:19:40Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +551,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter.get());\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter.get()).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter.get(), \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1NDk4Ng==", "bodyText": "Thanks for suggestion.\nIn the interest of time, can I punt this to a future PR?", "url": "https://github.com/apache/beam/pull/11596#discussion_r427654986", "createdAt": "2020-05-19T23:23:48Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +551,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter.get());\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter.get()).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter.get(), \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzMzI0MA=="}, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNDkxMA==", "bodyText": "Yes we can defer since this would change what people are getting from the existing implementation and would likely require opt in to not break any existing users.\nIf nobody depends on this transform yet then it would be wise to address it before adoption since a lot of users typically expect the output timestamp to match the record's source timestamp. This may not apply to this specific source and is dependent on what users expect so itis your judgement call.\nIf you do go with changing the output timestamp, the watermark tracking would help for streaming pipelines since it would allow them to perform better. The current implementation would still produce correct results with or without and adding it later would be very safe (it may expose problems in pipelines that were already broken for other reasons).", "url": "https://github.com/apache/beam/pull/11596#discussion_r428104910", "createdAt": "2020-05-20T15:28:30Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +551,118 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter.get());\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter.get()).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @NewTracker\n+    public OffsetRangeTracker newTracker(@Restriction OffsetRange timeRange) {\n+      return timeRange.newTracker();\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter.get(), \"sendTime\");\n       long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n+      long lastClaimedMilliSecond;\n+      Instant cursor;\n+      boolean hangingClaim = false; // flag if the claimed ms spans spills over to the next page.\n+      for (List<HL7v2Message> page : pages) { // loop over pages.\n+        int i = 0;\n+        HL7v2Message msg = page.get(i);\n+        while (i < page.size()) { // loop over messages in page\n+          cursor = Instant.parse(msg.getSendTime());\n+          lastClaimedMilliSecond = cursor.getMillis();\n+          LOG.info(\n+              String.format(\n+                  \"initial claim for page %s lastClaimedMilliSecond = %s\",\n+                  i, lastClaimedMilliSecond));\n+          if (hangingClaim || tracker.tryClaim(lastClaimedMilliSecond)) {\n+            // This means we have claimed an entire millisecond we need to make sure that we\n+            // process all messages for this millisecond because sendTime is allegedly nano second\n+            // resolution.\n+            // https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.hl7V2Stores.messages#Message\n+            while (cursor.getMillis() == lastClaimedMilliSecond\n+                && i < page.size()) { // loop over messages in millisecond.\n+              outputReceiver.output(msg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzMzI0MA=="}, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzM2NjY2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo0ODoyM1rOGX1R-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo0ODoyM1rOGX1R-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MzM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of\n          \n          \n            \n               * <p>This transform is optimized for splitting of message.list calls for large batches of", "url": "https://github.com/apache/beam/pull/11596#discussion_r427643387", "createdAt": "2020-05-19T22:48:23Z", "author": {"login": "jaketf"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +423,29 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for dynamic splitting of message.list calls for large batches of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d0bf08188aaadb36ea7efcb944a1ed5ec23898"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjE4ODYwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNToxNTo0NFrOGYQ3ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNToxNTo0NFrOGYQ3ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5NTM5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (cursor.getMillis() > lastClaimedMilliSecond && tracker.tryClaim(cursor.getMillis())) {\n          \n          \n            \n                      lastClaimedMilliSecond = cursor.getMillis();\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    if (cursor.getMillis() == lastClaimedMilliSecond) { // loop over messages in millisecond.\n          \n          \n            \n                      outputReceiver.output(msg);\n          \n          \n            \n                    }\n          \n          \n            \n                    if (cursor.getMillis() > lastClaimedMilliSecond) {\n          \n          \n            \n                      // Return early after the first claim failure preventing us from iterating\n          \n          \n            \n                      // through the remaining messages.\n          \n          \n            \n                      if (!tracker.tryClaim(cursor.getMillis())) {\n          \n          \n            \n                        return;\n          \n          \n            \n                      }\n          \n          \n            \n                      lastClaimedMilliSecond = cursor.getMillis();\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    outputReceiver.output(msg);", "url": "https://github.com/apache/beam/pull/11596#discussion_r428095390", "createdAt": "2020-05-20T15:15:44Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -472,24 +523,77 @@ public void initClient() throws IOException {\n       this.client = new HttpHealthcareApiClient();\n     }\n \n+    @GetInitialRestriction\n+    public OffsetRange getEarliestToLatestRestriction(@Element String hl7v2Store)\n+        throws IOException {\n+      from = this.client.getEarliestHL7v2SendTime(hl7v2Store, this.filter.get());\n+      // filters are [from, to) to match logic of OffsetRangeTracker but need latest element to be\n+      // included in results set to add an extra ms to the upper bound.\n+      to = this.client.getLatestHL7v2SendTime(hl7v2Store, this.filter.get()).plus(1);\n+      return new OffsetRange(from.getMillis(), to.getMillis());\n+    }\n+\n+    @SplitRestriction\n+    public void split(@Restriction OffsetRange timeRange, OutputReceiver<OffsetRange> out) {\n+      List<OffsetRange> splits =\n+          timeRange.split(initialSplitDuration.getMillis(), DEFAULT_MIN_SPLIT_DURATION.getMillis());\n+      Instant from = Instant.ofEpochMilli(timeRange.getFrom());\n+      Instant to = Instant.ofEpochMilli(timeRange.getTo());\n+      Duration totalDuration = new Duration(from, to);\n+      LOG.info(\n+          String.format(\n+              \"splitting initial sendTime restriction of [minSendTime, now): [%s,%s), \"\n+                  + \"or [%s, %s). \\n\"\n+                  + \"total days: %s \\n\"\n+                  + \"into %s splits. \\n\"\n+                  + \"Last split: %s\",\n+              from,\n+              to,\n+              timeRange.getFrom(),\n+              timeRange.getTo(),\n+              totalDuration.getStandardDays(),\n+              splits.size(),\n+              splits.get(splits.size() - 1).toString()));\n+\n+      for (OffsetRange s : splits) {\n+        out.output(s);\n+      }\n+    }\n+\n     /**\n      * List messages.\n      *\n-     * @param context the context\n+     * @param hl7v2Store the HL7v2 store to list messages from\n      * @throws IOException the io exception\n      */\n     @ProcessElement\n-    public void listMessages(ProcessContext context) throws IOException {\n-      String hl7v2Store = context.element();\n-      // Output all elements of all pages.\n+    public void listMessages(\n+        @Element String hl7v2Store,\n+        RestrictionTracker<OffsetRange, Long> tracker,\n+        OutputReceiver<HL7v2Message> outputReceiver)\n+        throws IOException {\n+      OffsetRange currentRestriction = (OffsetRange) tracker.currentRestriction();\n+      Instant startRestriction = Instant.ofEpochMilli(currentRestriction.getFrom());\n+      Instant endRestriction = Instant.ofEpochMilli(currentRestriction.getTo());\n       HttpHealthcareApiClient.HL7v2MessagePages pages =\n-          new HttpHealthcareApiClient.HL7v2MessagePages(client, hl7v2Store, this.filter);\n-      long reqestTime = Instant.now().getMillis();\n-      for (Stream<HL7v2Message> page : pages) {\n-        messageListingLatencyMs.update(Instant.now().getMillis() - reqestTime);\n-        page.forEach(context::output);\n-        reqestTime = Instant.now().getMillis();\n+          new HttpHealthcareApiClient.HL7v2MessagePages(\n+              client, hl7v2Store, startRestriction, endRestriction, filter.get(), \"sendTime\");\n+      Instant cursor;\n+      long lastClaimedMilliSecond = startRestriction.getMillis() - 1;\n+      for (HL7v2Message msg : FluentIterable.concat(pages)) {\n+        cursor = Instant.parse(msg.getSendTime());\n+        if (cursor.getMillis() > lastClaimedMilliSecond && tracker.tryClaim(cursor.getMillis())) {\n+          lastClaimedMilliSecond = cursor.getMillis();\n+        }\n+\n+        if (cursor.getMillis() == lastClaimedMilliSecond) { // loop over messages in millisecond.\n+          outputReceiver.output(msg);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe64bef8fd3cfa91ad8ebbce25492c209f8bdc4"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjI2MjM4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMjowM1rOGYRndA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMjowM1rOGYRndA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNzYzNg==", "bodyText": "from and to seem to only be used within @GetInitialRestriction, can we make them local variables there?", "url": "https://github.com/apache/beam/pull/11596#discussion_r428107636", "createdAt": "2020-05-20T15:32:03Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -427,39 +458,59 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n      * @param filter the filter\n      */\n     ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores, ValueProvider<String> filter) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n-      this.filter = filter.get();\n+      this.hl7v2Stores = hl7v2Stores;\n+      this.filter = filter;\n+      this.initialSplitDuration = null;\n     }\n \n-    ListHL7v2Messages(ValueProvider<List<String>> hl7v2Stores) {\n-      this.hl7v2Stores = hl7v2Stores.get();\n-      this.filter = null;\n+    public ListHL7v2Messages withInitialSplitDuration(Duration initialSplitDuration) {\n+      this.initialSplitDuration = initialSplitDuration;\n+      return this;\n     }\n \n     @Override\n     public PCollection<HL7v2Message> expand(PBegin input) {\n       return input\n-          .apply(Create.of(this.hl7v2Stores))\n-          .apply(ParDo.of(new ListHL7v2MessagesFn(this.filter)))\n-          .setCoder(new HL7v2MessageCoder())\n+          .apply(Create.ofProvider(this.hl7v2Stores, ListCoder.of(StringUtf8Coder.of())))\n+          .apply(FlatMapElements.into(TypeDescriptors.strings()).via((x) -> x))\n+          .apply(ParDo.of(new ListHL7v2MessagesFn(filter, initialSplitDuration)))\n+          .setCoder(HL7v2MessageCoder.of())\n           // Break fusion to encourage parallelization of downstream processing.\n           .apply(Reshuffle.viaRandomKey());\n     }\n   }\n \n+  /**\n+   * Implemented as Splitable DoFn that claims millisecond resolutions of offset restrictions in the\n+   * Message.sendTime dimension.\n+   */\n+  @BoundedPerElement\n+  @VisibleForTesting\n   static class ListHL7v2MessagesFn extends DoFn<String, HL7v2Message> {\n-\n-    private final String filter;\n+    // These control the initial restriction split which means that the list of integer pairs\n+    // must comfortably fit in memory.\n+    private static final Duration DEFAULT_DESIRED_SPLIT_DURATION = Duration.standardDays(1);\n+    private static final Duration DEFAULT_MIN_SPLIT_DURATION = Duration.standardHours(1);\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ListHL7v2MessagesFn.class);\n+    private ValueProvider<String> filter;\n+    private Duration initialSplitDuration;\n+    private Instant from;\n+    private Instant to;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe64bef8fd3cfa91ad8ebbce25492c209f8bdc4"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjI2Nzg2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMzoyMVrOGYRrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMzoyMVrOGYRrBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwODU0OQ==", "bodyText": "Benchmarking By?\nAwkward sentence and capitalization.", "url": "https://github.com/apache/beam/pull/11596#discussion_r428108549", "createdAt": "2020-05-20T15:33:21Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HL7v2IO.java", "diffHunk": "@@ -415,10 +424,32 @@ private Message fetchMessage(HealthcareApiClient client, String msgId)\n     }\n   }\n \n-  /** List HL7v2 messages in HL7v2 Stores with optional filter. */\n+  /**\n+   * List HL7v2 messages in HL7v2 Stores with optional filter.\n+   *\n+   * <p>This transform is optimized for splitting of message.list calls for large batches of\n+   * historical data and assumes rather continuous stream of sendTimes.\n+   *\n+   * <p>Note on Benchmarking By default, this will make more queries than necessary when used with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe64bef8fd3cfa91ad8ebbce25492c209f8bdc4"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1239, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}