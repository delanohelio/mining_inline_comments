{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzQ5MTY4", "number": 10504, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDozNToyOFrODWFFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo1OTo1NVrODWWo4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDc4NDk1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDozNToyOFrOFaohiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMDozNToyOFrOFaohiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3MTI0MA==", "bodyText": "Thanks, @sorensenjs!\n'expected missing X' may be also read as:  expected the missing element X. Consider rewording as \"unexpected element\" and \"missing element\".", "url": "https://github.com/apache/beam/pull/10504#discussion_r363471240", "createdAt": "2020-01-06T20:35:28Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -179,10 +179,11 @@ def _equal(actual):\n           expected_list.remove(element)\n         except ValueError:\n           raise BeamAssertException(\n-              'Failed assert: %r == %r' % (expected, actual))\n+              'Failed assert: %r == %r, expected missing %r' %", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb3cd4f1d3540a0665d62d36362c8cf131b8b8ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTE2MjI0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMzozMDo0OFrOFasN3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMzozMDo0OFrOFasN3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzMTc0Mg==", "bodyText": "This line exceeds 80 characters. Please fix. Thanks to this PR I realized our lint checker stopped catching this error: https://issues.apache.org/jira/browse/BEAM-9058. Fix is in flight (#10510).", "url": "https://github.com/apache/beam/pull/10504#discussion_r363531742", "createdAt": "2020-01-06T23:30:48Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -179,11 +179,12 @@ def _equal(actual):\n           expected_list.remove(element)\n         except ValueError:\n           raise BeamAssertException(\n-              'Failed assert: %r == %r, expected missing element %r' %\n+              'Failed assert: %r == %r, right side missing at least element %r' %", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b0351a4a1db60165d2e14a4fb9d6aa193d4b3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTM4ODk1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/util.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMjoyMTowMlrOFauZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMjoyMTowMlrOFauZFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NzM4Mg==", "bodyText": "Since currently LHS is actual, RHS is expected, I think the error should say \"right side is missing...\" or \"unexpected elements: ...\", and left_missing should be renamed.", "url": "https://github.com/apache/beam/pull/10504#discussion_r363567382", "createdAt": "2020-01-07T02:21:02Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -166,23 +166,27 @@ def _equal(actual):\n       sorted_actual = sorted(actual)\n       if sorted_expected != sorted_actual:\n         raise BeamAssertException(\n-            'Failed assert: %r == %r' % (sorted_expected, sorted_actual))\n+            'Failed assert: %r == %r' % (sorted_actual, sorted_expected))\n     # Slower method, used in two cases:\n     # 1) If sorted expected != actual, use this method to verify the inequality.\n     #    This ensures we don't raise any false negatives for types that don't\n     #    have a deterministic sort order.\n     # 2) As a fallback if we encounter a TypeError in python 3. this method\n     #    works on collections that have different types.\n     except (BeamAssertException, TypeError):\n+      left_missing = []\n       for element in actual:\n         try:\n           expected_list.remove(element)\n         except ValueError:\n-          raise BeamAssertException(\n-              'Failed assert: %r == %r' % (expected, actual))\n-      if expected_list:\n-        raise BeamAssertException(\n-            'Failed assert: %r == %r' % (expected, actual))\n+          left_missing.append(element)\n+      if left_missing or expected_list:\n+        msg = 'Failed assert: %r == %r' % (actual, expected)\n+        if left_missing:\n+          msg = msg + ', left side missing elements %r' % left_missing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d48036a5f57ac4eb8c189397c0f0c6ee4d2199c7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzE0NDgxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/util_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo0NDozNlrOFa_H3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0NTo0OVrOFbCUoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0MTUwMg==", "bodyText": "nit: extra \"missing\" in test name.", "url": "https://github.com/apache/beam/pull/10504#discussion_r363841502", "createdAt": "2020-01-07T16:44:36Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/util_test.py", "diffHunk": "@@ -67,6 +67,26 @@ def test_assert_that_fails(self):\n       with TestPipeline() as p:\n         assert_that(p | Create([1, 10, 100]), equal_to([1, 2, 3]))\n \n+  def test_assert_missing(self):\n+    with self.assertRaisesRegexp(Exception,\n+                                 \"missing elements \\['c'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b']), equal_to(['a', 'b', 'c']))\n+\n+  def test_assert_unexpected(self):\n+    with self.assertRaisesRegexp(Exception,\n+                                 \"unexpected elements \\['c', 'd'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b', 'c', 'd']), equal_to(['a', 'b']))\n+\n+  def test_assert_missing_missing_and_unexpected(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea925f5dc456b178512df6e113f7eae6c6c2c97"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MzkyMA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/10504#discussion_r363893920", "createdAt": "2020-01-07T18:45:49Z", "author": {"login": "sorensenjs"}, "path": "sdks/python/apache_beam/testing/util_test.py", "diffHunk": "@@ -67,6 +67,26 @@ def test_assert_that_fails(self):\n       with TestPipeline() as p:\n         assert_that(p | Create([1, 10, 100]), equal_to([1, 2, 3]))\n \n+  def test_assert_missing(self):\n+    with self.assertRaisesRegexp(Exception,\n+                                 \"missing elements \\['c'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b']), equal_to(['a', 'b', 'c']))\n+\n+  def test_assert_unexpected(self):\n+    with self.assertRaisesRegexp(Exception,\n+                                 \"unexpected elements \\['c', 'd'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b', 'c', 'd']), equal_to(['a', 'b']))\n+\n+  def test_assert_missing_missing_and_unexpected(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0MTUwMg=="}, "originalCommit": {"oid": "eea925f5dc456b178512df6e113f7eae6c6c2c97"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzY2MTc4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/testing/util_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo1OTo1NVrOFbEOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo1OTo1NVrOFbEOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNTE2NA==", "bodyText": "PCollections don't guarantee the order of elements, so once PCollection materializes we may access its elements in the order of 'a', 'b', 'd', 'c', in which case the generated error message will be \"unexpected elements ['d', 'c']\". While also correct, this message will fail current assertion. Added a small change to accommodate that, and reversed the order in try clause to avoid a warning at runtime on Py3.", "url": "https://github.com/apache/beam/pull/10504#discussion_r363925164", "createdAt": "2020-01-07T19:59:55Z", "author": {"login": "tvalentyn"}, "path": "sdks/python/apache_beam/testing/util_test.py", "diffHunk": "@@ -67,6 +73,26 @@ def test_assert_that_fails(self):\n       with TestPipeline() as p:\n         assert_that(p | Create([1, 10, 100]), equal_to([1, 2, 3]))\n \n+  def test_assert_missing(self):\n+    with self.assertRaisesRegex(BeamAssertException,\n+                                r\"missing elements \\['c'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b']), equal_to(['a', 'b', 'c']))\n+\n+  def test_assert_unexpected(self):\n+    with self.assertRaisesRegex(BeamAssertException,\n+                                r\"unexpected elements \\['c', 'd'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b', 'c', 'd']), equal_to(['a', 'b']))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74ea6e63ffb30eb7c02df179835089d72df4f21a"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2398, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}