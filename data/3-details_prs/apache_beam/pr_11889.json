{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjU0MTAw", "number": 11889, "title": "[BEAM-10164] Flink Batch Runner: Memory efficient combine implementat\u2026", "bodyText": "https://issues.apache.org/jira/browse/BEAM-10164\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-02T15:18:31Z", "url": "https://github.com/apache/beam/pull/11889", "merged": true, "mergeCommit": {"oid": "f6ef9032f521180f1cc26959d9d6ab86dd37a13c"}, "closed": true, "closedAt": "2020-06-03T13:33:37Z", "author": {"login": "dmvk"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnWcRLgH2gAyNDI2NjU0MTAwOjg1ZTE1NDJiYTg2NzU3YzRmYjg3MDIzNDk0YTZlN2Y0Yjk1NGQzMmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnoXRYgFqTQyMzQ4MzU5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "85e1542ba86757c4fb87023494a6e7f4b954d32d", "author": {"user": {"login": "dmvk", "name": "David Moravek"}}, "url": "https://github.com/apache/beam/commit/85e1542ba86757c4fb87023494a6e7f4b954d32d", "committedDate": "2020-06-02T15:17:55Z", "message": "[BEAM-10164] Flink Batch Runner: Memory efficient combine implementation for non-merging windows."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDgzNTk5", "url": "https://github.com/apache/beam/pull/11889#pullrequestreview-423483599", "createdAt": "2020-06-03T12:04:09Z", "commit": {"oid": "85e1542ba86757c4fb87023494a6e7f4b954d32d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowNDowOVrOGeYuKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowNDowOVrOGeYuKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTQ5Nw==", "bodyText": "Code style: It would be great if refs were immutable by default, but adding final to everything I find adds verbosity with little added benefit.", "url": "https://github.com/apache/beam/pull/11889#discussion_r434515497", "createdAt": "2020-06-03T12:04:09Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkBatchTransformTranslators.java", "diffHunk": "@@ -476,16 +476,15 @@ public void translateNode(\n     public void translateNode(\n         PTransform<PCollection<KV<K, InputT>>, PCollection<KV<K, OutputT>>> transform,\n         FlinkBatchTranslationContext context) {\n-      DataSet<WindowedValue<KV<K, InputT>>> inputDataSet =\n+      final DataSet<WindowedValue<KV<K, InputT>>> inputDataSet =\n           context.getInputDataSet(context.getInput(transform));\n-\n-      CombineFnBase.GlobalCombineFn<InputT, AccumT, OutputT> combineFn =\n-          ((Combine.PerKey) transform).getFn();\n-\n-      KvCoder<K, InputT> inputCoder = (KvCoder<K, InputT>) context.getInput(transform).getCoder();\n-\n-      Coder<AccumT> accumulatorCoder;\n-\n+      final Combine.PerKey<K, InputT, OutputT> combineTransform =\n+          (Combine.PerKey<K, InputT, OutputT>) transform;\n+      final CombineFnBase.GlobalCombineFn<InputT, AccumT, OutputT> combineFn =\n+          (CombineFnBase.GlobalCombineFn<InputT, AccumT, OutputT>) combineTransform.getFn();\n+      final KvCoder<K, InputT> inputCoder =\n+          (KvCoder<K, InputT>) context.getInput(transform).getCoder();\n+      final Coder<AccumT> accumulatorCoder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85e1542ba86757c4fb87023494a6e7f4b954d32d"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4515, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}