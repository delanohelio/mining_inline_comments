{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTcxNjA1", "number": 12215, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzoxNzo1N1rOENICEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzoxNzo1N1rOENICEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTk4NTQ0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzoxNzo1N1rOGvojAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo0NToyM1rOGwHmQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMDU3OA==", "bodyText": "I'm a bit concerned with these lines here where one is accessing the internal Restrictions. They're being accessed outside of the lock's critical section. Should we have a Restriction() interface{} method to get the appropriate restriction in a thread safe manner?", "url": "https://github.com/apache/beam/pull/12215#discussion_r452600578", "createdAt": "2020-07-10T03:17:57Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -124,8 +125,8 @@ func (fn *sourceFn) Setup() {\n // ProcessElement creates a number of random elements based on the restriction\n // tracker received. Each element is a random byte slice key and value, in the\n // form of KV<[]byte, []byte>.\n-func (fn *sourceFn) ProcessElement(rt *offsetrange.Tracker, config SourceConfig, emit func([]byte, []byte)) error {\n-\tfor i := rt.Rest.Start; rt.TryClaim(i) == true; i++ {\n+func (fn *sourceFn) ProcessElement(rt *sdf.LockRTracker, _ SourceConfig, emit func([]byte, []byte)) error {\n+\tfor i := rt.Rt.(*offsetrange.Tracker).Rest.Start; rt.TryClaim(i) == true; i++ {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "053ac167107f77d098d770775bcefe356acd2973"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwOTMxMw==", "bodyText": "Hmm, that's a good point. I didn't think about it much because it was fine before, but yeah this wouldn't work now. A split could theoretically be happening while that line is being called, and the tracker would be modified. I'll try adding a getter.", "url": "https://github.com/apache/beam/pull/12215#discussion_r453109313", "createdAt": "2020-07-10T22:45:23Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -124,8 +125,8 @@ func (fn *sourceFn) Setup() {\n // ProcessElement creates a number of random elements based on the restriction\n // tracker received. Each element is a random byte slice key and value, in the\n // form of KV<[]byte, []byte>.\n-func (fn *sourceFn) ProcessElement(rt *offsetrange.Tracker, config SourceConfig, emit func([]byte, []byte)) error {\n-\tfor i := rt.Rest.Start; rt.TryClaim(i) == true; i++ {\n+func (fn *sourceFn) ProcessElement(rt *sdf.LockRTracker, _ SourceConfig, emit func([]byte, []byte)) error {\n+\tfor i := rt.Rt.(*offsetrange.Tracker).Rest.Start; rt.TryClaim(i) == true; i++ {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMDU3OA=="}, "originalCommit": {"oid": "053ac167107f77d098d770775bcefe356acd2973"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1005, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}