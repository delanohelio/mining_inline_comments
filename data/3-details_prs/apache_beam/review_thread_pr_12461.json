{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTAzMDkx", "number": 12461, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0Mjo1MVrOEVJJgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxNzo1M1rOEVNjVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA1NDQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0Mjo1MVrOG7u71w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToyOTozOVrOG7yLcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODE1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return typeFactory.createArrayType(collectionElementType, -1L);\n          \n          \n            \n                  return typeFactory.createArrayType(collectionElementType, UNLIMITED_ARRAY_SIZE);", "url": "https://github.com/apache/beam/pull/12461#discussion_r465288151", "createdAt": "2020-08-04T19:42:51Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.\n    *\n-   * @param rawType\n+   * @param type\n    * @return\n    */\n-  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type rawType) {\n+  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type type) {\n     // For Joda time types, return SQL type for java.util.Date.\n-    if (rawType instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) rawType)) {\n+    if (type instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(Date.class);\n-    } else if (rawType instanceof Class && ByteString.class.isAssignableFrom((Class<?>) rawType)) {\n+    } else if (type instanceof Class && ByteString.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(byte[].class);\n+    } else if (type instanceof ParameterizedType\n+        && java.util.List.class.isAssignableFrom(\n+            (Class<?>) ((ParameterizedType) type).getRawType())) {\n+      ParameterizedType parameterizedType = (ParameterizedType) type;\n+      Class<?> genericType = (Class<?>) parameterizedType.getActualTypeArguments()[0];\n+      RelDataType collectionElementType = typeFactory.createJavaType(genericType);\n+      return typeFactory.createArrayType(collectionElementType, -1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTI5Nw==", "bodyText": "Nice catch! Made the suggested change.", "url": "https://github.com/apache/beam/pull/12461#discussion_r465341297", "createdAt": "2020-08-04T21:29:39Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.\n    *\n-   * @param rawType\n+   * @param type\n    * @return\n    */\n-  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type rawType) {\n+  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type type) {\n     // For Joda time types, return SQL type for java.util.Date.\n-    if (rawType instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) rawType)) {\n+    if (type instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(Date.class);\n-    } else if (rawType instanceof Class && ByteString.class.isAssignableFrom((Class<?>) rawType)) {\n+    } else if (type instanceof Class && ByteString.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(byte[].class);\n+    } else if (type instanceof ParameterizedType\n+        && java.util.List.class.isAssignableFrom(\n+            (Class<?>) ((ParameterizedType) type).getRawType())) {\n+      ParameterizedType parameterizedType = (ParameterizedType) type;\n+      Class<?> genericType = (Class<?>) parameterizedType.getActualTypeArguments()[0];\n+      RelDataType collectionElementType = typeFactory.createJavaType(genericType);\n+      return typeFactory.createArrayType(collectionElementType, -1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODE1MQ=="}, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA1NzU1OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0Mzo1M1rOG7u9xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTozMDoxNFrOG7yMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODY0Nw==", "bodyText": "We should probably update this comment to explain how/why ByteString and List are special cases.", "url": "https://github.com/apache/beam/pull/12461#discussion_r465288647", "createdAt": "2020-08-04T19:43:53Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTU3OA==", "bodyText": "I updated the List case. The ByteString case wasn't added by me so I don't have context around it.", "url": "https://github.com/apache/beam/pull/12461#discussion_r465341578", "createdAt": "2020-08-04T21:30:14Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODY0Nw=="}, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA2NDUxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NTo1N1rOG7vB4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToyOToyMlrOG7yK2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4OTY5OQ==", "bodyText": "Nit: why are row1, sql1, etc. variable names numbered when there's only one of each?", "url": "https://github.com/apache/beam/pull/12461#discussion_r465289699", "createdAt": "2020-08-04T19:45:57Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +103,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {\n+    Schema resultType = Schema.builder().addArrayField(\"array_field\", FieldType.INT64).build();\n+\n+    Row row1 = Row.withSchema(resultType).addValue(Arrays.asList(1L)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTE0Nw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12461#discussion_r465341147", "createdAt": "2020-08-04T21:29:22Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +103,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {\n+    Schema resultType = Schema.builder().addArrayField(\"array_field\", FieldType.INT64).build();\n+\n+    Row row1 = Row.withSchema(resultType).addValue(Arrays.asList(1L)).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4OTY5OQ=="}, "originalCommit": {"oid": "a67df53674db67dad4aa1d9798abeb2701766eba"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjc3NTg4OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDoxNzo1M1rOG71xZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo1Mzo0NVrOG9ALrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw==", "bodyText": "We should separate this into two modular test cases, one with a UDF that takes an array as an argument (e.g. the length function), and one with a UDF that returns an array (e.g. array constructor, like your previous test).", "url": "https://github.com/apache/beam/pull/12461#discussion_r465400167", "createdAt": "2020-08-05T00:17:53Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +104,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6043a981f950242b8c144ba34bf00acbc0bcbda"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0OTk4Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12461#discussion_r465449987", "createdAt": "2020-08-05T03:27:59Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +104,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw=="}, "originalCommit": {"oid": "b6043a981f950242b8c144ba34bf00acbc0bcbda"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNTA0Ng==", "bodyText": "The tests LGTM, but we should separate the two blocks into separate @Test methods. That way we can easily tell if one case fails but the other succeeds. And it keeps the tests smaller and easier to read.", "url": "https://github.com/apache/beam/pull/12461#discussion_r466615046", "createdAt": "2020-08-06T18:45:50Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +104,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw=="}, "originalCommit": {"oid": "b6043a981f950242b8c144ba34bf00acbc0bcbda"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxOTMwOA==", "bodyText": "I'm fine with doing this in a follow up PR, since the other tests in this class follow the same pattern.", "url": "https://github.com/apache/beam/pull/12461#discussion_r466619308", "createdAt": "2020-08-06T18:53:45Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +104,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw=="}, "originalCommit": {"oid": "b6043a981f950242b8c144ba34bf00acbc0bcbda"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 809, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}