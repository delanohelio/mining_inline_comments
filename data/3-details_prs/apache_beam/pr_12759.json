{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODE0NDA3", "number": 12759, "title": "[BEAM-10760] Generalize state cleanup optimization for global window", "bodyText": "The previous fix a6f4a60 only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-02T13:18:01Z", "url": "https://github.com/apache/beam/pull/12759", "merged": true, "mergeCommit": {"oid": "5fd0010e52c5efee36760c302b03181e429da02f"}, "closed": true, "closedAt": "2020-09-08T14:33:42Z", "author": {"login": "mxm"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE8VY-AFqTQ4MDgzOTg4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG4PCCgFqTQ4NDE4MTQ3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODM5ODgw", "url": "https://github.com/apache/beam/pull/12759#pullrequestreview-480839880", "createdAt": "2020-09-02T13:50:36Z", "commit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo1MDozNlrOHLwGSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo1MDozNlrOHLwGSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg==", "bodyText": "Could we do this using CleanupTimer? Something like\n      StatefulDoFnRunner.CleanupTimer cleanupTimer =\n          new StatefulDoFnRunner.TimeInternalsCleanupTimer(timerInternals, windowingStrategy) {\n            @Override\n            public void setForWindow(Object input, BoundedWindow window) {\n              if (!window.equals(GlobalWindow.INSTANCE)) {\n                super.setForWindow(input, window);\n              }\n            }\n          };\nin DoFnOperator:317", "url": "https://github.com/apache/beam/pull/12759#discussion_r482084426", "createdAt": "2020-09-02T13:50:36Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -1330,6 +1338,19 @@ public void setTimer(\n     @Deprecated\n     @Override\n     public void setTimer(TimerData timer) {\n+      if (timer.getTimestamp().isAfter(GlobalWindow.INSTANCE.maxTimestamp())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjYxNTI5", "url": "https://github.com/apache/beam/pull/12759#pullrequestreview-481261529", "createdAt": "2020-09-02T20:08:30Z", "commit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDowODozMFrOHMC5hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDozMzoyN1rOHME6Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MjQ1Mw==", "bodyText": "The namespace we use for cleanup is based on GlobalWindow and so should be the condition here. I think we can prioritize clarity over the duplication of a single conditional return statement, which should be covered by the unit tests. Or better, make a common setCleanupTimer method that has the Window parameter?", "url": "https://github.com/apache/beam/pull/12759#discussion_r482392453", "createdAt": "2020-09-02T20:08:30Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -1330,6 +1338,19 @@ public void setTimer(\n     @Deprecated\n     @Override\n     public void setTimer(TimerData timer) {\n+      if (timer.getTimestamp().isAfter(GlobalWindow.INSTANCE.maxTimestamp())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg=="}, "originalCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MjcxMw==", "bodyText": "The existing solution checks that we have not already reached the watermark to avoid repeated execution of the cleanup code. Please carry that over.\nAlso, why check for keyedStateInternals? See #12733 (comment)", "url": "https://github.com/apache/beam/pull/12759#discussion_r482392713", "createdAt": "2020-09-02T20:08:42Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -753,6 +754,13 @@ private void maybeEmitWatermark(long watermark) {\n       LOG.debug(\"Emitting watermark {}\", watermark);\n       currentOutputWatermark = watermark;\n       output.emitWatermark(new Watermark(watermark));\n+\n+      // Check if the final watermark was triggered to perform state cleanup for global window\n+      if (keyedStateInternals != null\n+          && currentOutputWatermark", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5ODI0OA==", "bodyText": "I would remove \"because we are not guaranteed to ever receive the final watermark\" because that is misleading. The problem is that we accumulate too many timers, depending on the number of keys.", "url": "https://github.com/apache/beam/pull/12759#discussion_r482398248", "createdAt": "2020-09-02T20:12:46Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -114,16 +127,27 @@ public K getKey() {\n     return address.getSpec().bind(address.getId(), new FlinkStateBinder(namespace, context));\n   }\n \n-  public void clearBagStates(StateNamespace namespace, StateTag<? extends BagState> address)\n-      throws Exception {\n-    CoderTypeSerializer typeSerializer = new CoderTypeSerializer<>(VoidCoder.of());\n-    flinkStateBackend.applyToAllKeys(\n-        namespace.stringKey(),\n-        StringSerializer.INSTANCE,\n-        new ListStateDescriptor<>(address.getId(), typeSerializer),\n-        (key, state) -> {\n-          state.clear();\n-        });\n+  /**\n+   * Allows to clear all state for the global watermark when the maximum watermark arrives. We do\n+   * not clean up the global window state via timers because we are not guranteed to ever receive\n+   * the final watermark which would lead to an unbounded number of keys and cleanup timers.\n+   * Instead, the cleanup code below should be run when we finally receive the max watermark.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQwMDY4OQ==", "bodyText": "As implemented this contains all state descriptors, regardless of the window?", "url": "https://github.com/apache/beam/pull/12759#discussion_r482400689", "createdAt": "2020-09-02T20:14:37Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -75,7 +80,14 @@\n public class FlinkStateInternals<K> implements StateInternals {\n \n   private final KeyedStateBackend<ByteBuffer> flinkStateBackend;\n-  private Coder<K> keyCoder;\n+  private final Coder<K> keyCoder;\n+\n+  /**\n+   * A set which contains all state descriptors created in the global window. Used for cleanup on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyMDAzMA==", "bodyText": "This is executed on every state access in the portable runner. It might be possible to reuse the descriptors. How much could be the net benefit? Probably small compared to the fn api overhead.", "url": "https://github.com/apache/beam/pull/12759#discussion_r482420030", "createdAt": "2020-09-02T20:29:16Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -139,17 +163,27 @@ private FlinkStateBinder(StateNamespace namespace, StateContext<?> stateContext)\n     @Override\n     public <T2> ValueState<T2> bindValue(\n         String id, StateSpec<ValueState<T2>> spec, Coder<T2> coder) {\n-      return new FlinkValueState<>(flinkStateBackend, id, namespace, coder);\n+      ValueStateDescriptor<T2> valueStateDescriptor =\n+          new ValueStateDescriptor<>(id, new CoderTypeSerializer<>(coder));\n+      globalWindowStateDescriptors.add(valueStateDescriptor);\n+      return new FlinkValueState<>(flinkStateBackend, id, namespace, valueStateDescriptor);\n     }\n \n     @Override\n     public <T2> BagState<T2> bindBag(String id, StateSpec<BagState<T2>> spec, Coder<T2> elemCoder) {\n-      return new FlinkBagState<>(flinkStateBackend, id, namespace, elemCoder);\n+      ListStateDescriptor<T2> listStateDescriptor =\n+          new ListStateDescriptor<>(id, new CoderTypeSerializer<>(elemCoder));\n+      globalWindowStateDescriptors.add(listStateDescriptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNTQzMQ==", "bodyText": "Keep this to check that the cleanup isn't repeated even when the watermark is repeated.", "url": "https://github.com/apache/beam/pull/12759#discussion_r482425431", "createdAt": "2020-09-02T20:33:27Z", "author": {"login": "tweise"}, "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperatorTest.java", "diffHunk": "@@ -910,21 +892,16 @@ public void testEnsureStateCleanupOnFinalWatermark() throws Exception {\n         operator.keyedStateInternals.state(\n             stateNamespace, StateTags.bag(stateId, ByteStringCoder.of()));\n     state.add(ByteString.copyFrom(\"userstate\".getBytes(Charsets.UTF_8)));\n+    // No timers have been set for cleanup\n+    assertThat(testHarness.numEventTimeTimers(), is(0));\n+    // State has been created\n     assertThat(testHarness.numKeyedStateEntries(), is(1));\n \n     // Generate final watermark to trigger state cleanup\n     testHarness.processWatermark(\n         new Watermark(BoundedWindow.TIMESTAMP_MAX_VALUE.plus(1).getMillis()));\n \n     assertThat(testHarness.numKeyedStateEntries(), is(0));\n-\n-    // Close should not repeat state cleanup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cce653f6e3da985cceb26666f72559bcd538ef83", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/cce653f6e3da985cceb26666f72559bcd538ef83", "committedDate": "2020-09-02T13:16:19Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}, "afterCommit": {"oid": "91068489f91ebccd72b1d4d85c28b87bd292d757", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/91068489f91ebccd72b1d4d85c28b87bd292d757", "committedDate": "2020-09-07T15:41:16Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91068489f91ebccd72b1d4d85c28b87bd292d757", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/91068489f91ebccd72b1d4d85c28b87bd292d757", "committedDate": "2020-09-07T15:41:16Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}, "afterCommit": {"oid": "81f48209810b8538429e6888fce6a98b377027e1", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/81f48209810b8538429e6888fce6a98b377027e1", "committedDate": "2020-09-07T15:43:11Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzYwMTkx", "url": "https://github.com/apache/beam/pull/12759#pullrequestreview-483760191", "createdAt": "2020-09-08T02:36:54Z", "commit": {"oid": "81f48209810b8538429e6888fce6a98b377027e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwMjozNjo1NVrOHOKyKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwMjozNjo1NVrOHOKyKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxODc5NQ==", "bodyText": "Is there a good reason to not use applyToAllKeys? A specific state backend may have a better implementation, overriding the naive generic key iteration here: https://github.com/apache/flink/blob/c1a12e925b6ef46ad5cf0e0a5723949572550e9b/flink-runtime/src/main/java/org/apache/flink/runtime/state/AbstractKeyedStateBackend.java#L242", "url": "https://github.com/apache/beam/pull/12759#discussion_r484618795", "createdAt": "2020-09-08T02:36:55Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -111,19 +128,43 @@ public K getKey() {\n   @Override\n   public <T extends State> T state(\n       StateNamespace namespace, StateTag<T> address, StateContext<?> context) {\n+    if (globalWindowNamespace.equals(namespace)) {\n+      // Take note of state bound to the global window for cleanup in clearGlobalState below.\n+      globalWindowStateTags.add(address);\n+    }\n     return address.getSpec().bind(address.getId(), new FlinkStateBinder(namespace, context));\n   }\n \n-  public void clearBagStates(StateNamespace namespace, StateTag<? extends BagState> address)\n-      throws Exception {\n-    CoderTypeSerializer typeSerializer = new CoderTypeSerializer<>(VoidCoder.of());\n-    flinkStateBackend.applyToAllKeys(\n-        namespace.stringKey(),\n-        StringSerializer.INSTANCE,\n-        new ListStateDescriptor<>(address.getId(), typeSerializer),\n-        (key, state) -> {\n+  /**\n+   * Allows to clear all state for the global watermark when the maximum watermark arrives. We do\n+   * not clean up the global window state via timers which would lead to an unbounded number of keys\n+   * and cleanup timers. Instead, the cleanup code below should be run when we finally receive the\n+   * max watermark.\n+   */\n+  public void clearGlobalState() {\n+    try {\n+      for (StateTag stateTag : globalWindowStateTags) {\n+        State state =\n+            state(\n+                globalWindowNamespace,\n+                stateTag,\n+                StateContexts.windowOnlyContext(GlobalWindow.INSTANCE));\n+        // We collect all keys in the global window for a particular state\n+        // Note that the alternative method applyToAllKeys(..) does the same internally.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f48209810b8538429e6888fce6a98b377027e1"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81f48209810b8538429e6888fce6a98b377027e1", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/81f48209810b8538429e6888fce6a98b377027e1", "committedDate": "2020-09-07T15:43:11Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}, "afterCommit": {"oid": "b434a0d9e2bbeec68d483cca0e5f3cbf5fd9f068", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/b434a0d9e2bbeec68d483cca0e5f3cbf5fd9f068", "committedDate": "2020-09-08T07:42:50Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b087bcd4770268fbbed0899386573be11796c6", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/26b087bcd4770268fbbed0899386573be11796c6", "committedDate": "2020-09-08T08:46:21Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b434a0d9e2bbeec68d483cca0e5f3cbf5fd9f068", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/b434a0d9e2bbeec68d483cca0e5f3cbf5fd9f068", "committedDate": "2020-09-08T07:42:50Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}, "afterCommit": {"oid": "26b087bcd4770268fbbed0899386573be11796c6", "author": {"user": {"login": "mxm", "name": "Maximilian Michels"}}, "url": "https://github.com/apache/beam/commit/26b087bcd4770268fbbed0899386573be11796c6", "committedDate": "2020-09-08T08:46:21Z", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTYyMzQx", "url": "https://github.com/apache/beam/pull/12759#pullrequestreview-483962341", "createdAt": "2020-09-08T09:34:57Z", "commit": {"oid": "b434a0d9e2bbeec68d483cca0e5f3cbf5fd9f068"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozNToyNVrOHOU5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozNToyNVrOHOU5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NDUyOA==", "bodyText": "Looks we can keep this private?", "url": "https://github.com/apache/beam/pull/12759#discussion_r484784528", "createdAt": "2020-09-08T09:35:25Z", "author": {"login": "je-ik"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java", "diffHunk": "@@ -899,7 +876,7 @@ public void finishBundle() {\n   }\n \n   static class CleanupTimer<InputT> implements StatefulDoFnRunner.CleanupTimer<InputT> {\n-    private static final String GC_TIMER_ID = \"__user-state-cleanup__\";\n+    public static final String GC_TIMER_ID = \"__user-state-cleanup__\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b087bcd4770268fbbed0899386573be11796c6"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTc4NDY1", "url": "https://github.com/apache/beam/pull/12759#pullrequestreview-484178465", "createdAt": "2020-09-08T14:08:48Z", "commit": {"oid": "26b087bcd4770268fbbed0899386573be11796c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDowODo0OFrOHOe_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDowODo0OFrOHOe_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTkyMw==", "bodyText": "Doesn't need to be public?", "url": "https://github.com/apache/beam/pull/12759#discussion_r484949923", "createdAt": "2020-09-08T14:08:48Z", "author": {"login": "tweise"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -114,16 +129,26 @@ public K getKey() {\n     return address.getSpec().bind(address.getId(), new FlinkStateBinder(namespace, context));\n   }\n \n-  public void clearBagStates(StateNamespace namespace, StateTag<? extends BagState> address)\n-      throws Exception {\n-    CoderTypeSerializer typeSerializer = new CoderTypeSerializer<>(VoidCoder.of());\n-    flinkStateBackend.applyToAllKeys(\n-        namespace.stringKey(),\n-        StringSerializer.INSTANCE,\n-        new ListStateDescriptor<>(address.getId(), typeSerializer),\n-        (key, state) -> {\n-          state.clear();\n-        });\n+  /**\n+   * Allows to clear all state for the global watermark when the maximum watermark arrives. We do\n+   * not clean up the global window state via timers which would lead to an unbounded number of keys\n+   * and cleanup timers. Instead, the cleanup code below should be run when we finally receive the\n+   * max watermark.\n+   */\n+  public void clearGlobalState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b087bcd4770268fbbed0899386573be11796c6"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTgxNDcy", "url": "https://github.com/apache/beam/pull/12759#pullrequestreview-484181472", "createdAt": "2020-09-08T14:11:53Z", "commit": {"oid": "26b087bcd4770268fbbed0899386573be11796c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4633, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}