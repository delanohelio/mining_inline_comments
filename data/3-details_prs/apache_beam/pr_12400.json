{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTAyOTI5", "number": 12400, "title": "[BEAM-10595] Remove rules that not work well with Java UDF", "bodyText": "https://issues.apache.org/jira/browse/BEAM-10595\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-28T23:05:12Z", "url": "https://github.com/apache/beam/pull/12400", "merged": true, "mergeCommit": {"oid": "890bedc865dd38457a56e94454839ebb6c3e9134"}, "closed": true, "closedAt": "2020-07-29T20:17:48Z", "author": {"login": "amaliujia"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5erJrgH2gAyNDU4MTAyOTI5OjZiNzk5YzY4OTk4MWViNmNmMjI4ZDNiOWMyMjlhOWRhNTFmYzVmZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7r86iAFqTQ2MTExNzgwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/6b799c689981eb6cf228d3b9c229a9da51fc5fe1", "committedDate": "2020-07-28T23:04:03Z", "message": "[BEAM-10595] Remove rules that not work well with Java UDF."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTA2MTM3", "url": "https://github.com/apache/beam/pull/12400#pullrequestreview-457106137", "createdAt": "2020-07-28T23:55:00Z", "commit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo1NTowMFrOG4jv4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxMToyM1rOG5CETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTEzOQ==", "bodyText": "Nit: spelling/grammar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add\n          \n          \n            \n                      // to Calc nodes before merging with other Project/Filter/Calc nodes. Thus we should not add", "url": "https://github.com/apache/beam/pull/12400#discussion_r461959139", "createdAt": "2020-07-28T23:55:00Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,13 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NTg4NA==", "bodyText": "It'd be helpful to specifically mention CalcMergeRule here.", "url": "https://github.com/apache/beam/pull/12400#discussion_r462455884", "createdAt": "2020-07-29T17:11:23Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,13 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to a Calc before merging with other Projec/Filter/Calc. Thus we should not add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b799c689981eb6cf228d3b9c229a9da51fc5fe1"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebcf25bd0d6dd9698353656528e176ae7029f3ae", "author": {"user": {"login": "amaliujia", "name": "Rui Wang"}}, "url": "https://github.com/apache/beam/commit/ebcf25bd0d6dd9698353656528e176ae7029f3ae", "committedDate": "2020-07-29T17:28:35Z", "message": "fixup! address comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODU1ODkw", "url": "https://github.com/apache/beam/pull/12400#pullrequestreview-457855890", "createdAt": "2020-07-29T20:04:49Z", "commit": {"oid": "ebcf25bd0d6dd9698353656528e176ae7029f3ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTE3ODA5", "url": "https://github.com/apache/beam/pull/12400#pullrequestreview-461117809", "createdAt": "2020-08-04T19:40:04Z", "commit": {"oid": "ebcf25bd0d6dd9698353656528e176ae7029f3ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0MDowNFrOG7u2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0MDowNFrOG7u2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Njc0MQ==", "bodyText": "Shouldn't we just disable these rules all together (in BeamRuleSets.java) if they are redundant instead of special casing them for ZetaSQL?", "url": "https://github.com/apache/beam/pull/12400#discussion_r465286741", "createdAt": "2020-08-04T19:40:04Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLQueryPlanner.java", "diffHunk": "@@ -93,6 +95,14 @@ public ZetaSQLQueryPlanner(JdbcConnection jdbcConnection, RuleSet[] ruleSets) {\n         //  requires the JoinCommuteRule, which doesn't work without struct flattening.\n         if (rule instanceof JoinCommuteRule) {\n           continue;\n+        } else if (rule instanceof FilterCalcMergeRule || rule instanceof ProjectCalcMergeRule) {\n+          // In order to support Java UDF, we need both BeamZetaSqlCalcRel and BeamCalcRel. It is\n+          // because BeamZetaSqlCalcRel can execute ZetaSQL built-in functions while BeamCalcRel\n+          // can execute UDFs. So during planning, we expect both Filter and Project are converted\n+          // to Calc nodes before merging with other Project/Filter/Calc nodes. Thus we should not\n+          // add FilterCalcMergeRule and ProjectCalcMergeRule. CalcMergeRule will achieve equivalent\n+          // planning result eventually.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebcf25bd0d6dd9698353656528e176ae7029f3ae"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3991, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}