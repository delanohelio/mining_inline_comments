{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzMzNjg4", "number": 11289, "title": "[BEAM-9660]: Add an explicit check for integer overflow.", "bodyText": "If commitSize is less than zero (due to overflow of integer serialized size), the existing code was setting it to Integer.MAX_VALUE and using the estimatedCommitSize > byteLimit check to throw an exception. However, in some cases in Dataflow Streaming Applicance, byteLimit is set to Integer.MAX_VALUE and so the check estimatedCommitSize > byteLimit fails to detect integer overflow.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-02T03:18:13Z", "url": "https://github.com/apache/beam/pull/11289", "merged": true, "mergeCommit": {"oid": "05258c70ca5f97c76d9f6783fa0b111a7ca86c97"}, "closed": true, "closedAt": "2020-04-03T15:48:58Z", "author": {"login": "spoortikundargi"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTvUOEAFqTM4NjYxODg2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT25wSABqjMxOTQ1MzI5MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjE4ODYy", "url": "https://github.com/apache/beam/pull/11289#pullrequestreview-386618862", "createdAt": "2020-04-02T16:58:16Z", "commit": {"oid": "426230a54744f9fb930b7d2bc28dbd0098a1ce10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1ODoxNlrOF_0mdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1ODoxNlrOF_0mdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NjQyMQ==", "bodyText": "We still would prefer to send a truncation commit (from buildWorkItemTruncationRequest).  That reports the commit as too large but sends the necessary info to the backend to attempt to truncate the work item for reprocessing.", "url": "https://github.com/apache/beam/pull/11289#discussion_r402466421", "createdAt": "2020-04-02T16:58:16Z", "author": {"login": "scwhittle"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1372,11 +1372,13 @@ private void process(\n       WorkItemCommitRequest commitRequest = outputBuilder.build();\n       int byteLimit = maxWorkItemCommitBytes;\n       int commitSize = commitRequest.getSerializedSize();\n-      int estimatedCommitSize = commitSize < 0 ? Integer.MAX_VALUE : commitSize;\n-\n-      // Detect overflow of integer serialized size or if the byte limit was exceeded.\n-      windmillMaxObservedWorkItemCommitBytes.addValue(estimatedCommitSize);\n-      if (estimatedCommitSize > byteLimit) {\n+      // Detect overflow of integer serialized size.\n+      if (commitSize < 0) {\n+        throw KeyCommitTooLargeException.causedBy(computationId, byteLimit, commitRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426230a54744f9fb930b7d2bc28dbd0098a1ce10"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac59bc585d8c7eb71fe4a893b3b337c630287d4", "author": {"user": {"login": "spoortikundargi", "name": "Spoorti Kundargi"}}, "url": "https://github.com/apache/beam/commit/cac59bc585d8c7eb71fe4a893b3b337c630287d4", "committedDate": "2020-04-03T01:44:17Z", "message": "[BEAM-9660]: Add an explicit check for integer overflow.\n\nIf `commitSize` is less than zero (due to overflow of integer serialized size), the existing code was setting it to `Integer.MAX_VALUE` and using the `estimatedCommitSize > byteLimit` check to throw an exception. However, in some cases in Dataflow Streaming Applicance, `byteLimit` is set to `Integer.MAX_VALUE` and so the check `estimatedCommitSize > byteLimit` fails to detect integer overflow."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "426230a54744f9fb930b7d2bc28dbd0098a1ce10", "author": {"user": {"login": "spoortikundargi", "name": "Spoorti Kundargi"}}, "url": "https://github.com/apache/beam/commit/426230a54744f9fb930b7d2bc28dbd0098a1ce10", "committedDate": "2020-04-02T03:12:03Z", "message": "[BEAM-9660]: Add an explicit check for integer overflow.\n\nIf `commitSize` is less than zero (due to overflow of integer serialized size), the existing code was setting it to `Integer.MAX_VALUE` and using the `estimatedCommitSize > byteLimit` check to throw an exception. However, in some cases in Dataflow Streaming Applicance, `byteLimit` is set to `Integer.MAX_VALUE` and so the check `estimatedCommitSize > byteLimit` fails to detect integer overflow."}, "afterCommit": {"oid": "cac59bc585d8c7eb71fe4a893b3b337c630287d4", "author": {"user": {"login": "spoortikundargi", "name": "Spoorti Kundargi"}}, "url": "https://github.com/apache/beam/commit/cac59bc585d8c7eb71fe4a893b3b337c630287d4", "committedDate": "2020-04-03T01:44:17Z", "message": "[BEAM-9660]: Add an explicit check for integer overflow.\n\nIf `commitSize` is less than zero (due to overflow of integer serialized size), the existing code was setting it to `Integer.MAX_VALUE` and using the `estimatedCommitSize > byteLimit` check to throw an exception. However, in some cases in Dataflow Streaming Applicance, `byteLimit` is set to `Integer.MAX_VALUE` and so the check `estimatedCommitSize > byteLimit` fails to detect integer overflow."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4870, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}