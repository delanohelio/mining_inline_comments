{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNzY0Mjgx", "number": 12934, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNDo0NFrOEnQ4hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowOTowOVrOEnlsOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjA2NTMyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNDo0NFrOHXw5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODowMjoxN1rOHYNeqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDQ5Mw==", "bodyText": "this .get() was necessary to prevent a race condition where the pipeline could shutdown before finalization happened.", "url": "https://github.com/apache/beam/pull/12934#discussion_r494680493", "createdAt": "2020-09-25T00:24:44Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -894,7 +897,10 @@ def process_bundle(self,\n       finalize_request = beam_fn_api_pb2.InstructionRequest(\n           finalize_bundle=beam_fn_api_pb2.FinalizeBundleRequest(\n               instruction_id=process_bundle_id))\n-      self._worker_handler.control_conn.push(finalize_request)\n+      finalize_response = self._worker_handler.control_conn.push(\n+          finalize_request).get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0ODcxNA==", "bodyText": "This this bug is unrelated to SDF, right? Would this be erroneously reporting successful bundle processing, or is it a minor issue since the pipeline is being shut down?", "url": "https://github.com/apache/beam/pull/12934#discussion_r495148714", "createdAt": "2020-09-25T18:02:17Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -894,7 +897,10 @@ def process_bundle(self,\n       finalize_request = beam_fn_api_pb2.InstructionRequest(\n           finalize_bundle=beam_fn_api_pb2.FinalizeBundleRequest(\n               instruction_id=process_bundle_id))\n-      self._worker_handler.control_conn.push(finalize_request)\n+      finalize_response = self._worker_handler.control_conn.push(\n+          finalize_request).get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDQ5Mw=="}, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjA2NjI3OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNTowNlrOHXw6Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNTowNlrOHXw6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDYxOA==", "bodyText": "This logic is now handled by the BundleProcessorCache", "url": "https://github.com/apache/beam/pull/12934#discussion_r494680618", "createdAt": "2020-09-25T00:25:06Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -286,22 +294,9 @@ def _request_process_bundle_progress(self, request):\n \n   def _request_process_bundle_action(self, request):\n     # type: (beam_fn_api_pb2.InstructionRequest) -> None\n-\n     def task():\n-      instruction_id = getattr(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTA3OTU0OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzo1NTo1MVrOHYNSag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDo0NzoxN1rOHYSBPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0NTU3OA==", "bodyText": "Seems that if we lock here we won't have to duplicate code", "url": "https://github.com/apache/beam/pull/12934#discussion_r495145578", "createdAt": "2020-09-25T17:55:51Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5NTQ4NQ==", "bodyText": "I'm not sure what change your suggesting.\nNote, it is important to not hold the lock while we instantiate the BundleProcessor or access self.fns", "url": "https://github.com/apache/beam/pull/12934#discussion_r495195485", "createdAt": "2020-09-25T19:41:30Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0NTU3OA=="}, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTY0NQ==", "bodyText": "isn't it the same if we do\n    try:\n      # pop() is threadsafe\n      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n    except IndexError:\n      processor = bundle_processor.BundleProcessor(\n          self.fns[bundle_descriptor_id],\n          self.state_handler_factory.create_state_handler(\n              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n          self.data_channel_factory)\n\n    with self._lock:\n      self.active_bundle_processors[\n        instruction_id] = bundle_descriptor_id, processor\n      try:\n        del self.known_not_running_instruction_ids[instruction_id]\n      except KeyError:\n        # The instruction may have not been pre-registered before execution\n        # since activate() may have never been invoked\n        pass\n    return processor", "url": "https://github.com/apache/beam/pull/12934#discussion_r495205645", "createdAt": "2020-09-25T20:04:16Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0NTU3OA=="}, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyMzEwMg==", "bodyText": "The pop is thread safe but accessing self.cached_bundle_processors[bundle_descriptor_id] is not guaranteed to be so your right that some could be saved based upon your suggestion but it still requires a self.lock surrounding\nprocessor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n\nwhich will lead to us acquiring the mutex twice for the case when there is a cached instance while the current imlementation only needs the mutex twice if we need to create the BundleProcessor.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495223102", "createdAt": "2020-09-25T20:47:17Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0NTU3OA=="}, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTIwMzI0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODozNToyN1rOHYOeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTo0MzowOVrOHYQYMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NTAyNA==", "bodyText": "Is it by design that we pop the items in LIFO order?", "url": "https://github.com/apache/beam/pull/12934#discussion_r495165024", "createdAt": "2020-09-25T18:35:27Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]\n+        except KeyError:\n+          # The instruction may have not been pre-registered before execution\n+          # since activate() may have never been invoked\n+          pass\n+        return processor\n+      except IndexError:\n+        pass\n+\n+    # Make sure we instantiate the processor while not holding the lock.\n+    processor = bundle_processor.BundleProcessor(\n+        self.fns[bundle_descriptor_id],\n+        self.state_handler_factory.create_state_handler(\n+            self.fns[bundle_descriptor_id].state_api_service_descriptor),\n+        self.data_channel_factory)\n+    with self._lock:\n+      self.active_bundle_processors[\n         instruction_id] = bundle_descriptor_id, processor\n+      try:\n+        del self.known_not_running_instruction_ids[instruction_id]\n+      except KeyError:\n+        # The instruction may have not been pre-registered before execution\n+        # since activate() may have never been invoked\n+        pass\n     return processor\n \n   def lookup(self, instruction_id):\n     # type: (str) -> Optional[bundle_processor.BundleProcessor]\n \n     \"\"\"\n     Return the requested ``BundleProcessor`` from the cache.\n+\n+    Will return ``None`` if the BundleProcessor is known but not yet ready. Will\n+    raise an error if the ``instruction_id`` is not known or has been discarded.\n     \"\"\"\n-    return self.active_bundle_processors.get(instruction_id, (None, None))[-1]\n+    with self._lock:\n+      if instruction_id in self.failed_instruction_ids:\n+        raise RuntimeError(\n+            'Bundle processing associated with %s has failed. '\n+            'Check prior failing response for details.' % instruction_id)\n+      processor = self.active_bundle_processors.get(\n+          instruction_id, (None, None))[-1]\n+      if processor:\n+        return processor\n+      if instruction_id in self.known_not_running_instruction_ids:\n+        return None\n+      raise RuntimeError('Unknown process bundle id %s.' % instruction_id)\n \n   def discard(self, instruction_id):\n     # type: (str) -> None\n \n     \"\"\"\n-    Remove the ``BundleProcessor`` from the cache.\n+    Marks the instruction id as failed shutting down the ``BundleProcessor``.\n     \"\"\"\n-    self.active_bundle_processors[instruction_id][1].shutdown()\n-    del self.active_bundle_processors[instruction_id]\n+    with self._lock:\n+      self.failed_instruction_ids[instruction_id] = True\n+      while len(self.failed_instruction_ids) > MAX_FAILED_INSTRUCTIONS:\n+        self.failed_instruction_ids.popitem()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NTc3NA==", "bodyText": "Good catch, we probably want FIFO", "url": "https://github.com/apache/beam/pull/12934#discussion_r495185774", "createdAt": "2020-09-25T19:19:58Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]\n+        except KeyError:\n+          # The instruction may have not been pre-registered before execution\n+          # since activate() may have never been invoked\n+          pass\n+        return processor\n+      except IndexError:\n+        pass\n+\n+    # Make sure we instantiate the processor while not holding the lock.\n+    processor = bundle_processor.BundleProcessor(\n+        self.fns[bundle_descriptor_id],\n+        self.state_handler_factory.create_state_handler(\n+            self.fns[bundle_descriptor_id].state_api_service_descriptor),\n+        self.data_channel_factory)\n+    with self._lock:\n+      self.active_bundle_processors[\n         instruction_id] = bundle_descriptor_id, processor\n+      try:\n+        del self.known_not_running_instruction_ids[instruction_id]\n+      except KeyError:\n+        # The instruction may have not been pre-registered before execution\n+        # since activate() may have never been invoked\n+        pass\n     return processor\n \n   def lookup(self, instruction_id):\n     # type: (str) -> Optional[bundle_processor.BundleProcessor]\n \n     \"\"\"\n     Return the requested ``BundleProcessor`` from the cache.\n+\n+    Will return ``None`` if the BundleProcessor is known but not yet ready. Will\n+    raise an error if the ``instruction_id`` is not known or has been discarded.\n     \"\"\"\n-    return self.active_bundle_processors.get(instruction_id, (None, None))[-1]\n+    with self._lock:\n+      if instruction_id in self.failed_instruction_ids:\n+        raise RuntimeError(\n+            'Bundle processing associated with %s has failed. '\n+            'Check prior failing response for details.' % instruction_id)\n+      processor = self.active_bundle_processors.get(\n+          instruction_id, (None, None))[-1]\n+      if processor:\n+        return processor\n+      if instruction_id in self.known_not_running_instruction_ids:\n+        return None\n+      raise RuntimeError('Unknown process bundle id %s.' % instruction_id)\n \n   def discard(self, instruction_id):\n     # type: (str) -> None\n \n     \"\"\"\n-    Remove the ``BundleProcessor`` from the cache.\n+    Marks the instruction id as failed shutting down the ``BundleProcessor``.\n     \"\"\"\n-    self.active_bundle_processors[instruction_id][1].shutdown()\n-    del self.active_bundle_processors[instruction_id]\n+    with self._lock:\n+      self.failed_instruction_ids[instruction_id] = True\n+      while len(self.failed_instruction_ids) > MAX_FAILED_INSTRUCTIONS:\n+        self.failed_instruction_ids.popitem()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NTAyNA=="}, "originalCommit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5NjIwOQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495196209", "createdAt": "2020-09-25T19:43:09Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]\n+        except KeyError:\n+          # The instruction may have not been pre-registered before execution\n+          # since activate() may have never been invoked\n+          pass\n+        return processor\n+      except IndexError:\n+        pass\n+\n+    # Make sure we instantiate the processor while not holding the lock.\n+    processor = bundle_processor.BundleProcessor(\n+        self.fns[bundle_descriptor_id],\n+        self.state_handler_factory.create_state_handler(\n+            self.fns[bundle_descriptor_id].state_api_service_descriptor),\n+        self.data_channel_factory)\n+    with self._lock:\n+      self.active_bundle_processors[\n         instruction_id] = bundle_descriptor_id, processor\n+      try:\n+        del self.known_not_running_instruction_ids[instruction_id]\n+      except KeyError:\n+        # The instruction may have not been pre-registered before execution\n+        # since activate() may have never been invoked\n+        pass\n     return processor\n \n   def lookup(self, instruction_id):\n     # type: (str) -> Optional[bundle_processor.BundleProcessor]\n \n     \"\"\"\n     Return the requested ``BundleProcessor`` from the cache.\n+\n+    Will return ``None`` if the BundleProcessor is known but not yet ready. Will\n+    raise an error if the ``instruction_id`` is not known or has been discarded.\n     \"\"\"\n-    return self.active_bundle_processors.get(instruction_id, (None, None))[-1]\n+    with self._lock:\n+      if instruction_id in self.failed_instruction_ids:\n+        raise RuntimeError(\n+            'Bundle processing associated with %s has failed. '\n+            'Check prior failing response for details.' % instruction_id)\n+      processor = self.active_bundle_processors.get(\n+          instruction_id, (None, None))[-1]\n+      if processor:\n+        return processor\n+      if instruction_id in self.known_not_running_instruction_ids:\n+        return None\n+      raise RuntimeError('Unknown process bundle id %s.' % instruction_id)\n \n   def discard(self, instruction_id):\n     # type: (str) -> None\n \n     \"\"\"\n-    Remove the ``BundleProcessor`` from the cache.\n+    Marks the instruction id as failed shutting down the ``BundleProcessor``.\n     \"\"\"\n-    self.active_bundle_processors[instruction_id][1].shutdown()\n-    del self.active_bundle_processors[instruction_id]\n+    with self._lock:\n+      self.failed_instruction_ids[instruction_id] = True\n+      while len(self.failed_instruction_ids) > MAX_FAILED_INSTRUCTIONS:\n+        self.failed_instruction_ids.popitem()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NTAyNA=="}, "originalCommit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTI4ODIzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTowMzoyOFrOHYPSVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTo0Mzo1MVrOHYQZNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3ODMyNg==", "bodyText": "Not sure if any locking needs to be done in this method. Perhaps known_not_running_instruction_ids should be cleared?\nIt seems that this is called when no more requests will be processed (end of SdkHarness.run()), so this should be fine.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495178326", "createdAt": "2020-09-25T19:03:28Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -415,10 +465,19 @@ def release(self, instruction_id):\n     Resets the ``BundleProcessor`` and moves it from the active to the\n     inactive cache.\n     \"\"\"\n-    descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n+    with self._lock:\n+      self.known_not_running_instruction_ids[instruction_id] = True\n+      while len(self.known_not_running_instruction_ids\n+                ) > MAX_KNOWN_NOT_RUNNING_INSTRUCTIONS:\n+        self.known_not_running_instruction_ids.popitem()\n+      descriptor_id, processor = (\n+          self.active_bundle_processors.pop(instruction_id))\n+\n+    # Make sure that we reset the processor while not holding the lock.\n     processor.reset()\n-    self.last_access_times[descriptor_id] = time.time()\n-    self.cached_bundle_processors[descriptor_id].append(processor)\n+    with self._lock:\n+      self.last_access_times[descriptor_id] = time.time()\n+      self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5NjQ2OQ==", "bodyText": "From my understanding I also think it should be fine since it is on shutdown.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495196469", "createdAt": "2020-09-25T19:43:51Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -415,10 +465,19 @@ def release(self, instruction_id):\n     Resets the ``BundleProcessor`` and moves it from the active to the\n     inactive cache.\n     \"\"\"\n-    descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n+    with self._lock:\n+      self.known_not_running_instruction_ids[instruction_id] = True\n+      while len(self.known_not_running_instruction_ids\n+                ) > MAX_KNOWN_NOT_RUNNING_INSTRUCTIONS:\n+        self.known_not_running_instruction_ids.popitem()\n+      descriptor_id, processor = (\n+          self.active_bundle_processors.pop(instruction_id))\n+\n+    # Make sure that we reset the processor while not holding the lock.\n     processor.reset()\n-    self.last_access_times[descriptor_id] = time.time()\n-    self.cached_bundle_processors[descriptor_id].append(processor)\n+    with self._lock:\n+      self.last_access_times[descriptor_id] = time.time()\n+      self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3ODMyNg=="}, "originalCommit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ2MTQ4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNDowNVrOHYQ8vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTowNDowNFrOHYSaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTU2NQ==", "bodyText": "Aren't all instruction ids unique for a given SDK harness/runner combo anyway? If this is the first time we've seen this instruction, why would the instruction be repeated?  I thought only the bundle descriptor ids were re-used?", "url": "https://github.com/apache/beam/pull/12934#discussion_r495205565", "createdAt": "2020-09-25T20:04:05Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxODY3NQ==", "bodyText": "The instruction_id refers to the original ProcessBundleRequest instruction_id which is different then the current requests instruction_id found on request.instruction_id", "url": "https://github.com/apache/beam/pull/12934#discussion_r495218675", "createdAt": "2020-09-25T20:36:02Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTU2NQ=="}, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyOTUyNA==", "bodyText": "Ack. Now that I understand the semantics as the value existing in both before and after processing this makes sense.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495229524", "createdAt": "2020-09-25T21:04:04Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTU2NQ=="}, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ3NDUwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowOTowOVrOHYRElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDo0NTowM1rOHYZqDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU3Mg==", "bodyText": "So, the correct response if something hasn't previously failed, and isn't running is an empty response for both Splits and Progress requests?\nThat's easy enough to fix. Go current fails, but it's very easy to swap that up.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495207572", "createdAt": "2020-09-25T20:09:09Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -543,15 +602,19 @@ def process_bundle_split(self,\n                            instruction_id  # type: str\n                           ):\n     # type: (...) -> beam_fn_api_pb2.InstructionResponse\n-    processor = self.bundle_processor_cache.lookup(request.instruction_id)\n-    if processor:\n-      return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          process_bundle_split=processor.try_split(request))\n-    else:\n+    try:\n+      processor = self.bundle_processor_cache.lookup(request.instruction_id)\n+    except RuntimeError:\n       return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          error='Instruction not running: %s' % instruction_id)\n+          instruction_id=instruction_id, error=traceback.format_exc())\n+    # Return an empty response if we aren't running. This can happen\n+    # if the ProcessBundleRequest has not started or already finished.\n+    process_bundle_split = (\n+        processor.try_split(request)\n+        if processor else beam_fn_api_pb2.ProcessBundleSplitResponse())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODYxNw==", "bodyText": "Yes, but you should strive to return an error for unknown/failed instructions.\nThis PR also keeps a fixed number of completed/failed instructions in a LRU like object so that even after the bundle completes we can still return a useful answer before we start sending the I don't know answer.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495208617", "createdAt": "2020-09-25T20:11:37Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -543,15 +602,19 @@ def process_bundle_split(self,\n                            instruction_id  # type: str\n                           ):\n     # type: (...) -> beam_fn_api_pb2.InstructionResponse\n-    processor = self.bundle_processor_cache.lookup(request.instruction_id)\n-    if processor:\n-      return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          process_bundle_split=processor.try_split(request))\n-    else:\n+    try:\n+      processor = self.bundle_processor_cache.lookup(request.instruction_id)\n+    except RuntimeError:\n       return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          error='Instruction not running: %s' % instruction_id)\n+          instruction_id=instruction_id, error=traceback.format_exc())\n+    # Return an empty response if we aren't running. This can happen\n+    # if the ProcessBundleRequest has not started or already finished.\n+    process_bundle_split = (\n+        processor.try_split(request)\n+        if processor else beam_fn_api_pb2.ProcessBundleSplitResponse())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU3Mg=="}, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxNzE0Nw==", "bodyText": "So to be clear, the semantics are required to be:\nReceive PB request for INST. -> Empty Splits & and Progress\nINST starts having results -> Return results.\nINST finishes -> EmptySplits and progress until \"expired\".\nAnd the \"I don't know\" is an error for  every other circumstance?\nIn the case where the bundle finishes, but requires Finalization, it INST should remain valid and Empties until finalization occurs.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495217147", "createdAt": "2020-09-25T20:32:07Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -543,15 +602,19 @@ def process_bundle_split(self,\n                            instruction_id  # type: str\n                           ):\n     # type: (...) -> beam_fn_api_pb2.InstructionResponse\n-    processor = self.bundle_processor_cache.lookup(request.instruction_id)\n-    if processor:\n-      return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          process_bundle_split=processor.try_split(request))\n-    else:\n+    try:\n+      processor = self.bundle_processor_cache.lookup(request.instruction_id)\n+    except RuntimeError:\n       return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          error='Instruction not running: %s' % instruction_id)\n+          instruction_id=instruction_id, error=traceback.format_exc())\n+    # Return an empty response if we aren't running. This can happen\n+    # if the ProcessBundleRequest has not started or already finished.\n+    process_bundle_split = (\n+        processor.try_split(request)\n+        if processor else beam_fn_api_pb2.ProcessBundleSplitResponse())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU3Mg=="}, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxOTMxMg==", "bodyText": "Filed https://issues.apache.org/jira/browse/BEAM-10976 for implementing Go SDK bundle finalization along with a reminder about this issue regarding the active status.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495219312", "createdAt": "2020-09-25T20:37:40Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -543,15 +602,19 @@ def process_bundle_split(self,\n                            instruction_id  # type: str\n                           ):\n     # type: (...) -> beam_fn_api_pb2.InstructionResponse\n-    processor = self.bundle_processor_cache.lookup(request.instruction_id)\n-    if processor:\n-      return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          process_bundle_split=processor.try_split(request))\n-    else:\n+    try:\n+      processor = self.bundle_processor_cache.lookup(request.instruction_id)\n+    except RuntimeError:\n       return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          error='Instruction not running: %s' % instruction_id)\n+          instruction_id=instruction_id, error=traceback.format_exc())\n+    # Return an empty response if we aren't running. This can happen\n+    # if the ProcessBundleRequest has not started or already finished.\n+    process_bundle_split = (\n+        processor.try_split(request)\n+        if processor else beam_fn_api_pb2.ProcessBundleSplitResponse())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU3Mg=="}, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxOTU5MA==", "bodyText": "You'll want to differentiate the failed case and once the Go SDK handles bundle finalization consider that as well (i.e. keep INST live until the finalize request comes or a user specified timeout happens)", "url": "https://github.com/apache/beam/pull/12934#discussion_r495219590", "createdAt": "2020-09-25T20:38:20Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -543,15 +602,19 @@ def process_bundle_split(self,\n                            instruction_id  # type: str\n                           ):\n     # type: (...) -> beam_fn_api_pb2.InstructionResponse\n-    processor = self.bundle_processor_cache.lookup(request.instruction_id)\n-    if processor:\n-      return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          process_bundle_split=processor.try_split(request))\n-    else:\n+    try:\n+      processor = self.bundle_processor_cache.lookup(request.instruction_id)\n+    except RuntimeError:\n       return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          error='Instruction not running: %s' % instruction_id)\n+          instruction_id=instruction_id, error=traceback.format_exc())\n+    # Return an empty response if we aren't running. This can happen\n+    # if the ProcessBundleRequest has not started or already finished.\n+    process_bundle_split = (\n+        processor.try_split(request)\n+        if processor else beam_fn_api_pb2.ProcessBundleSplitResponse())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU3Mg=="}, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM0ODIzOA==", "bodyText": "The Go SDK already differentiates the failed case and re-forwards the cached error.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495348238", "createdAt": "2020-09-26T00:45:03Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -543,15 +602,19 @@ def process_bundle_split(self,\n                            instruction_id  # type: str\n                           ):\n     # type: (...) -> beam_fn_api_pb2.InstructionResponse\n-    processor = self.bundle_processor_cache.lookup(request.instruction_id)\n-    if processor:\n-      return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          process_bundle_split=processor.try_split(request))\n-    else:\n+    try:\n+      processor = self.bundle_processor_cache.lookup(request.instruction_id)\n+    except RuntimeError:\n       return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          error='Instruction not running: %s' % instruction_id)\n+          instruction_id=instruction_id, error=traceback.format_exc())\n+    # Return an empty response if we aren't running. This can happen\n+    # if the ProcessBundleRequest has not started or already finished.\n+    process_bundle_split = (\n+        processor.try_split(request)\n+        if processor else beam_fn_api_pb2.ProcessBundleSplitResponse())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU3Mg=="}, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 217}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3245, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}