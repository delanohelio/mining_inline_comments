{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzQwNTQ1", "number": 11895, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoxNDo1OFrOEB3XdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozMzozMFrOEB34rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzkxMTU2OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoxNDo1OFrOGd-OfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoxNDo1OFrOGd-OfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA4MTQwNA==", "bodyText": "In fact, I think it was a decision to not handle NULL in string coder.\nSo the easiest way to move forward is to not include NULL in your test case, and leave a comment to say that STRING_AGG does not handle NULL value", "url": "https://github.com/apache/beam/pull/11895#discussion_r434081404", "createdAt": "2020-06-02T18:14:58Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -3130,6 +3130,23 @@ public void testUnnestArrayColumn() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testStringAggregation() {\n+    String sql =\n+        \"SELECT STRING_AGG(fruit) AS string_agg\"\n+            + \" FROM UNNEST([\\\"apple\\\", \\\"pear\\\", NULL, \\\"banana\\\", \\\"pear\\\"]) AS fruit\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24727b56d6f058b1557ffa2daefeb706274e1fb0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzk4MjAxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoyOTowMFrOGd-7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoyOTowMFrOGd-7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5MjgxOQ==", "bodyText": "Remove this line in the final PR.", "url": "https://github.com/apache/beam/pull/11895#discussion_r434092819", "createdAt": "2020-06-02T18:29:00Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -158,6 +158,9 @@ public RelRoot rel(String sql, QueryParameters params) {\n \n     RelNode convertedNode =\n         QueryStatementConverter.convertRootQuery(context, (ResolvedQueryStmt) statement);\n+\n+    LOG.info(\"Calcite Plan>\\n\" + convertedNode.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24727b56d6f058b1557ffa2daefeb706274e1fb0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzk4MzI0OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlStdOperatorMappingTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoyOToyOFrOGd-8Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoyOToyOFrOGd-8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5MzA3MA==", "bodyText": "Ah yes. This should also work.", "url": "https://github.com/apache/beam/pull/11895#discussion_r434093070", "createdAt": "2020-06-02T18:29:28Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlStdOperatorMappingTable.java", "diffHunk": "@@ -211,7 +213,7 @@\n           // aggregate UDF\n           // .put(\"array_agg\", )\n           // .put(\"array_concat_agg\")\n-          // .put(\"string_agg\")\n+          .put(\"string_agg\", SqlOperators.STRING_AGG_STRING_FN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24727b56d6f058b1557ffa2daefeb706274e1fb0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzk5NjYwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlOperators.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozMzozMFrOGd_EcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozMzozMFrOGd_EcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NTIxNg==", "bodyText": "Nice. By doing so it becomes a extensible way to define other AGG functions that Calcite does not have.\nGlad you figured it out.", "url": "https://github.com/apache/beam/pull/11895#discussion_r434095216", "createdAt": "2020-06-02T18:33:30Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlOperators.java", "diffHunk": "@@ -72,6 +82,23 @@ public static SqlFunction createSimpleSqlFunction(String name, SqlTypeName retur\n         SqlFunctionCategory.USER_DEFINED_FUNCTION);\n   }\n \n+  public static SqlUserDefinedAggFunction createUdafOperator(\n+      String name,\n+      SqlReturnTypeInference returnTypeInference,\n+      AggregateFunction function) {\n+    return new SqlUserDefinedAggFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24727b56d6f058b1557ffa2daefeb706274e1fb0"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3592, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}