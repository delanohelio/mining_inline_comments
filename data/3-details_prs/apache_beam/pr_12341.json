{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MzQ3NjM0", "number": 12341, "title": "[BEAM-10557] Implemented SchemaIOProvider for DataStoreV1, Refactored tests", "bodyText": "Implemented SchemaIO and SchemaIOProvider for DataStoreV1, shifting logic to core Beam. Rewrote DataStoreV1TableProvider unit tests for DataStoreV1SchemaIOProvider.\nR:@TheNeuralBit\nR:@robinyqiu\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-22T20:48:16Z", "url": "https://github.com/apache/beam/pull/12341", "merged": true, "mergeCommit": {"oid": "ab12f121fd0416defc3752980d2c2daa8e91fb0c"}, "closed": true, "closedAt": "2020-08-18T17:32:27Z", "author": {"login": "sclukas77"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3g_SEAH2gAyNDU1MzQ3NjM0OjZjN2UyNjI1ZDA0NWI4YzgyODk0NTJlMzgwMTEwMmY0ZmU0NjUyNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-9QQSgH2gAyNDU1MzQ3NjM0OmFkZjFkZWFiZGNiNGE2ODY2NmM2ZWVmNjdmZmI1NWQzZDQ4NWExYmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6c7e2625d045b8c8289452e3801102f4fe465266", "committedDate": "2020-07-22T20:38:00Z", "message": "Implemented SchemaIOProvider for DataStoreV1, refactored tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MjE2MTcy", "url": "https://github.com/apache/beam/pull/12341#pullrequestreview-456216172", "createdAt": "2020-07-28T00:07:16Z", "commit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDowNzoxN1rOG333Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDo1MTo0MlrOG34qfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDE0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@code PTransform} to perform a conversion of {@code PCollection<Row>} to {@code\n          \n          \n            \n             * PCollection<Entity>}.\n          \n          \n            \n             * A {@code PTransform} to perform a conversion of {@link Row} to {@link Entity}.", "url": "https://github.com/apache/beam/pull/12341#discussion_r461240147", "createdAt": "2020-07-28T00:07:17Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/RowToEntity.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeKey;\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@code PTransform} to perform a conversion of {@code PCollection<Row>} to {@code\n+ * PCollection<Entity>}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDQ5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@code PTransform} to perform a conversion of {@code PCollection<Entity>} to {@code\n          \n          \n            \n             * PCollection<Row>}.\n          \n          \n            \n             * A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}.", "url": "https://github.com/apache/beam/pull/12341#discussion_r461240495", "createdAt": "2020-07-28T00:08:30Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@code PTransform} to perform a conversion of {@code PCollection<Entity>} to {@code\n+ * PCollection<Row>}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MTQ3Mw==", "bodyText": "Will this work if we just use STRING? (Rather than re-creating CalciteUtils.CHAR here)", "url": "https://github.com/apache/beam/pull/12341#discussion_r461241473", "createdAt": "2020-07-28T00:11:25Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java", "diffHunk": "@@ -74,7 +73,7 @@\n           .addNullableField(\"rowArray\", array(FieldType.row(NESTED_ROW_SCHEMA)))\n           .addNullableField(\"double\", DOUBLE)\n           .addNullableField(\"bytes\", BYTES)\n-          .addNullableField(\"string\", CalciteUtils.CHAR)\n+          .addNullableField(\"string\", CHAR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0OTI1OQ==", "bodyText": "Should this also have an implementation for getTableStatistics? It looks like DataStoreV1Table had a non-standard implementation:\n  @Override\t\n  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\t\n    long count =\t\n        DatastoreIO.v1().read().withProjectId(projectId).getNumEntities(options, kind, null);\t\n\n    if (count < 0) {\t\n      return BeamTableStatistics.BOUNDED_UNKNOWN;\t\n    }\t\n\n    return BeamTableStatistics.createBoundedTableStatistics((double) count);\t\n  }", "url": "https://github.com/apache/beam/pull/12341#discussion_r461249259", "createdAt": "2020-07-28T00:37:34Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreV1TableProvider.java", "diffHunk": "@@ -39,15 +43,14 @@\n  * }</pre>\n  */\n @AutoService(TableProvider.class)\n-public class DataStoreV1TableProvider extends InMemoryMetaTableProvider {\n-\n+public class DataStoreV1TableProvider extends SchemaIOTableProviderWrapper {\n   @Override\n-  public String getTableType() {\n-    return \"datastoreV1\";\n+  public SchemaIOProvider getSchemaIOProvider() {\n+    return new DataStoreV1SchemaIOProvider();\n   }\n \n   @Override\n-  public BeamSqlTable buildBeamSqlTable(Table table) {\n-    return new DataStoreV1Table(table);\n+  public String getTableType() {\n+    return \"datastoreV1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MTI2Mg==", "bodyText": "I think you could just re-use provider here and in the other tests. If you're worried about re-using the same instance in all the tests you could consider initializing provider in an @Before method instead of initializing statically so that each test will get a fresh instance.", "url": "https://github.com/apache/beam/pull/12341#discussion_r461251262", "createdAt": "2020-07-28T00:44:49Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MjIwMA==", "bodyText": "I think it would be better to get rid of this function and call provider.configurationSchema() instead.", "url": "https://github.com/apache/beam/pull/12341#discussion_r461252200", "createdAt": "2020-07-28T00:48:03Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(DEFAULT_KEY_FIELD, dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty() {\n+    final String location = \"projectId/batch_kind\";\n+\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"field_name\").build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(\"field_name\", dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty_nullValue_throwsException() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"\").build();\n+\n+    assertThrows(\n+        IllegalArgumentException.class,\n+        () ->\n+            (new DataStoreV1SchemaIOProvider())\n+                .from(location, configuration, generateDataSchema()));\n+  }\n+\n+  private static Schema generateDataSchema() {\n+    return Schema.builder()\n+        .addNullableField(\"id\", Schema.FieldType.INT32)\n+        .addNullableField(\"name\", Schema.FieldType.STRING)\n+        .build();\n+  }\n+\n+  private Schema generateRowSchema() {\n+    return Schema.builder().addNullableField(KEY_FIELD_PROPERTY, Schema.FieldType.STRING).build();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MzI0NA==", "bodyText": "I think we're now preferring to use withFieldValue rather than addValue when constructing Row instances now, e.g.:\nRow.withSchema(provider.configurationSchema()).withFieldValue(\"keyField\", \"field_name\")\nSee the examples in Row.java: \n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java\n    \n    \n        Lines 64 to 74\n      in\n      956e4eb\n    \n    \n    \n    \n\n        \n          \n            * <p>There are several ways to build a new Row object. To build a row from scratch using a schema \n        \n\n        \n          \n            * object, {@link Row#withSchema} can be used. Schema fields can be specified by name, and nested \n        \n\n        \n          \n            * fields can be specified using the field selection syntax. For example: \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * <pre>{@code \n        \n\n        \n          \n            * Row row = Row.withSchema(schema) \n        \n\n        \n          \n            *              .withFieldValue(\"userId\", \"user1) \n        \n\n        \n          \n            *              .withFieldValue(\"location.city\", \"seattle\") \n        \n\n        \n          \n            *              .withFieldValue(\"location.state\", \"wa\") \n        \n\n        \n          \n            *              .build(); \n        \n\n        \n          \n            * }</pre>", "url": "https://github.com/apache/beam/pull/12341#discussion_r461253244", "createdAt": "2020-07-28T00:51:42Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(DEFAULT_KEY_FIELD, dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty() {\n+    final String location = \"projectId/batch_kind\";\n+\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"field_name\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7e2625d045b8c8289452e3801102f4fe465266"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbbd31100295bb5bcc33d5f9e7197ed4d44b8ac9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/fbbd31100295bb5bcc33d5f9e7197ed4d44b8ac9", "committedDate": "2020-08-06T14:21:15Z", "message": "Improved DataStoreV1 tests"}, "afterCommit": {"oid": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/e89f9eaab9cd061153f2649fe48c390d3bb24267", "committedDate": "2020-08-06T14:26:16Z", "message": "Improved DataStoreV1 tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/e89f9eaab9cd061153f2649fe48c390d3bb24267", "committedDate": "2020-08-06T14:26:16Z", "message": "Improved DataStoreV1 tests"}, "afterCommit": {"oid": "890b0b062b984efb2bbd687596d568b229d79d2d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/890b0b062b984efb2bbd687596d568b229d79d2d", "committedDate": "2020-08-06T14:34:26Z", "message": "Improved DataStoreV1 tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "890b0b062b984efb2bbd687596d568b229d79d2d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/890b0b062b984efb2bbd687596d568b229d79d2d", "committedDate": "2020-08-06T14:34:26Z", "message": "Improved DataStoreV1 tests"}, "afterCommit": {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0a5b3789a866f591904fa3ed11c21bcc11fd0224", "committedDate": "2020-08-07T14:34:54Z", "message": "Improved DataStoreV1 tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTUxMjgy", "url": "https://github.com/apache/beam/pull/12341#pullrequestreview-466151282", "createdAt": "2020-08-12T18:03:15Z", "commit": {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODowMzoxNVrOG_skeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMzowN1rOG_tlzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0MzcwNQ==", "bodyText": "Let's describe the configuration parameters here. Something like this (spotless probably has an opinion on how this should be formatted):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Returns the expected schema of the configuration object. Note this is distinct from the schema\n          \n          \n            \n               * of the data source itself.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * Returns the expected schema of the configuration object. Note this is distinct from the schema\n          \n          \n            \n               * of the data source itself.\n          \n          \n            \n               * \n          \n          \n            \n               * <p>Configuration Parameters:\n          \n          \n            \n               * <ul>\n          \n          \n            \n               *   <li>STRING keyField: The name of the Beam schema field to map the DataStore entity key. Defaults to {@code __key__} if not set or null.\n          \n          \n            \n               * </ul>\n          \n          \n            \n               */", "url": "https://github.com/apache/beam/pull/12341#discussion_r469443705", "createdAt": "2020-08-12T18:03:15Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.datastore.v1.Query;\n+import java.io.Serializable;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.InvalidConfigurationException;\n+import org.apache.beam.sdk.schemas.io.InvalidLocationException;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing payloads with {@link\n+ * DatastoreIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class DataStoreV1SchemaIOProvider implements SchemaIOProvider {\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  private static final Pattern locationPattern = Pattern.compile(\"(?<projectId>.+)/(?<kind>.+)\");\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"datastoreV1\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODMyNg==", "bodyText": "I don't think this new method is actually called anywhere. Should it be called from SchemaIOTableWrapper#getTableStatistics?\nIt might also be good to just get rid of the other getTableStatistics and move the default implementation to this one.", "url": "https://github.com/apache/beam/pull/12341#discussion_r469458326", "createdAt": "2020-08-12T18:29:24Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "diffHunk": "@@ -80,13 +80,17 @@ public BeamSqlTable buildBeamSqlTable(Table tableDefinition) {\n     }\n   }\n \n-  private BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\n     if (isBounded().equals(PCollection.IsBounded.BOUNDED)) {\n       return BeamTableStatistics.BOUNDED_UNKNOWN;\n     }\n     return BeamTableStatistics.UNBOUNDED_UNKNOWN;\n   }\n \n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n+    return getTableStatistics(options);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDQyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + \"` should of type `VARBINARY`. Please change the type or specify a field to\"\n          \n          \n            \n                            + \"` should of type `BYTES`. Please change the type or specify a field to\"\n          \n      \n    \n    \n  \n\nLet's change this to the Beam schema type name", "url": "https://github.com/apache/beam/pull/12341#discussion_r469460429", "createdAt": "2020-08-12T18:33:07Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}. */\n+public class EntityToRow extends PTransform<PCollection<Entity>, PCollection<Row>> {\n+  private final Schema schema;\n+  private final String keyField;\n+  private static final Logger LOG = LoggerFactory.getLogger(DataStoreV1SchemaIOProvider.class);\n+\n+  private EntityToRow(Schema schema, String keyField) {\n+    this.schema = schema;\n+    this.keyField = keyField;\n+\n+    if (schema.getFieldNames().contains(keyField)) {\n+      if (!schema.getField(keyField).getType().getTypeName().equals(Schema.TypeName.BYTES)) {\n+        throw new IllegalStateException(\n+            \"Field `\"\n+                + keyField\n+                + \"` should of type `VARBINARY`. Please change the type or specify a field to\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "committedDate": "2020-08-14T14:29:23Z", "message": "Modified SchemaIOTableProviderWrapper#getTableStatistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0a5b3789a866f591904fa3ed11c21bcc11fd0224", "committedDate": "2020-08-07T14:34:54Z", "message": "Improved DataStoreV1 tests"}, "afterCommit": {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "committedDate": "2020-08-14T14:29:23Z", "message": "Modified SchemaIOTableProviderWrapper#getTableStatistics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTIwNTMy", "url": "https://github.com/apache/beam/pull/12341#pullrequestreview-467920532", "createdAt": "2020-08-14T23:29:11Z", "commit": {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzoyOToxMlrOHBFsiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzoyOToxMlrOHBFsiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwMzk0Nw==", "bodyText": "nit: I think this just needs to be protected so that implementors can override\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n          \n          \n            \n              protected BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {", "url": "https://github.com/apache/beam/pull/12341#discussion_r470903947", "createdAt": "2020-08-14T23:29:12Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "diffHunk": "@@ -80,7 +80,7 @@ public BeamSqlTable buildBeamSqlTable(Table tableDefinition) {\n     }\n   }\n \n-  private BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adf1deabdcb4a68666c6eef67ffb55d3d485a1bb", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/adf1deabdcb4a68666c6eef67ffb55d3d485a1bb", "committedDate": "2020-08-14T23:31:21Z", "message": "Update sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3885, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}