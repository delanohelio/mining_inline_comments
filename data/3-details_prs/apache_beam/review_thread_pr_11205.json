{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODc5Mjcx", "number": 11205, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMjoxOFrODs1TFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NDoyNFrODvwYGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM3MTc1OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMjoxOFrOF96EvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo0OTo0MFrOF_T6IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODk0MA==", "bodyText": "It doesn't seem like we are populating sha256 here.", "url": "https://github.com/apache/beam/pull/11205#discussion_r400458940", "createdAt": "2020-03-30T20:02:18Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1146,33 +1146,41 @@ message StandardArtifacts {\n   enum Types {\n     // A URN for locally-accessible artifact files.\n     // payload: ArtifactFilePayload\n-    FILE     = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];\n+    FILE      = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];\n \n     // A URN for artifacts described by URLs.\n     // payload: ArtifactUrlPayload\n-    URL      = 1 [(beam_urn) = \"beam:artifact:type:url:v1\"];\n+    URL       = 1 [(beam_urn) = \"beam:artifact:type:url:v1\"];\n \n     // A URN for artifacts embedded in ArtifactInformation proto.\n     // payload: EmbeddedFilePayload.\n-    EMBEDDED = 2 [(beam_urn) = \"beam:artifact:type:embedded:v1\"];\n+    EMBEDDED  = 2 [(beam_urn) = \"beam:artifact:type:embedded:v1\"];\n \n     // A URN for Python artifacts hosted on PYPI.\n     // payload: PypiPayload\n-    PYPI     = 3 [(beam_urn) = \"beam:artifact:type:pypi:v1\"];\n+    PYPI      = 3 [(beam_urn) = \"beam:artifact:type:pypi:v1\"];\n \n     // A URN for Java artifacts hosted on a Maven repository.\n     // payload: MavenPayload\n-    MAVEN    = 4 [(beam_urn) = \"beam:artifact:type:maven:v1\"];\n+    MAVEN     = 4 [(beam_urn) = \"beam:artifact:type:maven:v1\"];\n+\n+    // A URN for locally-accessible artifact directory.\n+    // payload: ArtifactDirectoryPayload\n+    DIRECTORY = 5 [(beam_urn) = \"beam:artifact:type:directory:v1\"];\n   }\n   enum Roles {\n     // A URN for staging-to role.\n     // payload: ArtifactStagingToRolePayload\n     STAGING_TO  = 0 [(beam_urn) = \"beam:artifact:role:staging_to:v1\"];\n+\n+    // A URN for unzip-to role.\n+    // payload: ArtifactUnzipToRolePayload\n+    UNZIP_TO    = 1 [(beam_urn) = \"beam:artifact:role:unzip_to:v1\"];\n   }\n }\n \n message ArtifactFilePayload {\n-  // a string for an artifact path e.g. \"/tmp/foo.jar\"\n+  // a string for an artifact file path e.g. \"/tmp/foo.jar\"\n   string path = 1;\n \n   // The hex-encoded sha256 checksum of the artifact.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7452a6088b350c43a95175438cce704966cfd9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzMDc4NA==", "bodyText": "adding deferred artifacts and populating sha256.", "url": "https://github.com/apache/beam/pull/11205#discussion_r401930784", "createdAt": "2020-04-01T21:49:40Z", "author": {"login": "ihji"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1146,33 +1146,41 @@ message StandardArtifacts {\n   enum Types {\n     // A URN for locally-accessible artifact files.\n     // payload: ArtifactFilePayload\n-    FILE     = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];\n+    FILE      = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];\n \n     // A URN for artifacts described by URLs.\n     // payload: ArtifactUrlPayload\n-    URL      = 1 [(beam_urn) = \"beam:artifact:type:url:v1\"];\n+    URL       = 1 [(beam_urn) = \"beam:artifact:type:url:v1\"];\n \n     // A URN for artifacts embedded in ArtifactInformation proto.\n     // payload: EmbeddedFilePayload.\n-    EMBEDDED = 2 [(beam_urn) = \"beam:artifact:type:embedded:v1\"];\n+    EMBEDDED  = 2 [(beam_urn) = \"beam:artifact:type:embedded:v1\"];\n \n     // A URN for Python artifacts hosted on PYPI.\n     // payload: PypiPayload\n-    PYPI     = 3 [(beam_urn) = \"beam:artifact:type:pypi:v1\"];\n+    PYPI      = 3 [(beam_urn) = \"beam:artifact:type:pypi:v1\"];\n \n     // A URN for Java artifacts hosted on a Maven repository.\n     // payload: MavenPayload\n-    MAVEN    = 4 [(beam_urn) = \"beam:artifact:type:maven:v1\"];\n+    MAVEN     = 4 [(beam_urn) = \"beam:artifact:type:maven:v1\"];\n+\n+    // A URN for locally-accessible artifact directory.\n+    // payload: ArtifactDirectoryPayload\n+    DIRECTORY = 5 [(beam_urn) = \"beam:artifact:type:directory:v1\"];\n   }\n   enum Roles {\n     // A URN for staging-to role.\n     // payload: ArtifactStagingToRolePayload\n     STAGING_TO  = 0 [(beam_urn) = \"beam:artifact:role:staging_to:v1\"];\n+\n+    // A URN for unzip-to role.\n+    // payload: ArtifactUnzipToRolePayload\n+    UNZIP_TO    = 1 [(beam_urn) = \"beam:artifact:role:unzip_to:v1\"];\n   }\n }\n \n message ArtifactFilePayload {\n-  // a string for an artifact path e.g. \"/tmp/foo.jar\"\n+  // a string for an artifact file path e.g. \"/tmp/foo.jar\"\n   string path = 1;\n \n   // The hex-encoded sha256 checksum of the artifact.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODk0MA=="}, "originalCommit": {"oid": "bd7452a6088b350c43a95175438cce704966cfd9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjExNTUxOnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxMTo0NFrOF_1GcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToxMjowMFrOGAtwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NDYwOA==", "bodyText": "I was under the impression we were going to make this a bytes field so that any deferred information can get passed through and then back to the creator whether it be an id or a serialized blob of objects or ...\nAllowing for bytes enables for solutions beyond in memory maps.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402474608", "createdAt": "2020-04-02T17:11:44Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,11 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A id for deferred artifacts.\n+  string id = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjA0NA==", "bodyText": "+1", "url": "https://github.com/apache/beam/pull/11205#discussion_r402492044", "createdAt": "2020-04-02T17:35:55Z", "author": {"login": "robertwb"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,11 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A id for deferred artifacts.\n+  string id = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NDYwOA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTc3OA==", "bodyText": "Don't we need at least a key field (or urn or identifier) which can be used to check whether the payload is parsable by the creator? Otherwise, it would be pretty hard to know where the bytes payload originally came from.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402685778", "createdAt": "2020-04-03T01:23:21Z", "author": {"login": "ihji"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,11 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A id for deferred artifacts.\n+  string id = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NDYwOA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5ODc1Mg==", "bodyText": "Thats a good point about the key and in general this will become a problem for all artifacts since none of them have unique keys associated with them unless an intermediary resolves the artifact immediately and possibly \"renames\" the contents to make it unique.\nIf we ever want to support multiple layers of expansion for XLang we'll want to proxy any artifact resolution/retrieval calls through the layers and not require each layer to have a copy of the artifact.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402698752", "createdAt": "2020-04-03T02:15:22Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,11 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A id for deferred artifacts.\n+  string id = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NDYwOA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjk1OQ==", "bodyText": "As discussed (but putting here for the record) having a proxy artifact type could solve this issue.", "url": "https://github.com/apache/beam/pull/11205#discussion_r403402959", "createdAt": "2020-04-04T01:12:00Z", "author": {"login": "robertwb"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,11 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A id for deferred artifacts.\n+  string id = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NDYwOA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjEyNzU1OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNDo0N1rOF_1N1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozOTowMFrOF_2VMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NjUwMg==", "bodyText": "We won't need to rely on using Optional if we make registration take a URN and ResolutionFn and then the resolver can be found by URN.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402476502", "createdAt": "2020-04-02T17:14:47Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Optional;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public interface ArtifactResolver {\n+  void register(ResolutionFn fn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NDc2OA==", "bodyText": "I agree. However, this might be more limited. E.g. one could have a more than one resolver per type, each of which can only resolve a subset, or alternatively one could want to resolve more than one type (or any type), e.g. a proxying resolver.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402494768", "createdAt": "2020-04-02T17:39:00Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Optional;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public interface ArtifactResolver {\n+  void register(ResolutionFn fn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NjUwMg=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjEzMjY4OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNjoxOVrOF_1RTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxODowMlrOGAB59Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzM4OQ==", "bodyText": "Please add comments to this class and methods.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402477389", "createdAt": "2020-04-02T17:16:19Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Optional;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public interface ArtifactResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDQwNQ==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402684405", "createdAt": "2020-04-03T01:18:02Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Optional;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public interface ArtifactResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzM4OQ=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjE0ODYxOnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyMDowM1rOF_1a6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxODowOFrOGAB6Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3OTg0OA==", "bodyText": "Class comment", "url": "https://github.com/apache/beam/pull/11205#discussion_r402479848", "createdAt": "2020-04-02T17:20:03Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public class DefaultArtifactResolver implements ArtifactResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDQzMA==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402684430", "createdAt": "2020-04-03T01:18:08Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public class DefaultArtifactResolver implements ArtifactResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3OTg0OA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjE2NTQ1OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyMzo0MFrOF_1kvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxODoyM1rOGAB6RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MjM2NQ==", "bodyText": "The level of nesting in this method is getting a little silly.\nUse local variables to logically describe what your doing and consider dropping using stream", "url": "https://github.com/apache/beam/pull/11205#discussion_r402482365", "createdAt": "2020-04-02T17:23:40Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public class DefaultArtifactResolver implements ArtifactResolver {\n+  public static ArtifactResolver INSTANCE = new DefaultArtifactResolver();\n+\n+  private ResolutionFn resolver =\n+      (info) -> {\n+        if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+          return Optional.of(info);\n+        } else {\n+          return Optional.empty();\n+        }\n+      };\n+\n+  @Override\n+  public void register(ResolutionFn fn) {\n+    resolver =\n+        (info) -> {\n+          Optional<RunnerApi.ArtifactInformation> resolved = fn.resolve(info);\n+          if (resolved.isPresent()) {\n+            return resolved;\n+          } else {\n+            return resolver.resolve(info);\n+          }\n+        };\n+  }\n+\n+  @Override\n+  public RunnerApi.Pipeline resolveArtifacts(RunnerApi.Pipeline pipeline) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDQ4NA==", "bodyText": "done \ud83d\ude04", "url": "https://github.com/apache/beam/pull/11205#discussion_r402684484", "createdAt": "2020-04-03T01:18:23Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public class DefaultArtifactResolver implements ArtifactResolver {\n+  public static ArtifactResolver INSTANCE = new DefaultArtifactResolver();\n+\n+  private ResolutionFn resolver =\n+      (info) -> {\n+        if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+          return Optional.of(info);\n+        } else {\n+          return Optional.empty();\n+        }\n+      };\n+\n+  @Override\n+  public void register(ResolutionFn fn) {\n+    resolver =\n+        (info) -> {\n+          Optional<RunnerApi.ArtifactInformation> resolved = fn.resolve(info);\n+          if (resolved.isPresent()) {\n+            return resolved;\n+          } else {\n+            return resolver.resolve(info);\n+          }\n+        };\n+  }\n+\n+  @Override\n+  public RunnerApi.Pipeline resolveArtifacts(RunnerApi.Pipeline pipeline) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MjM2NQ=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjE2OTA3OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoyNDoyN1rOF_1m5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxODozOFrOGAB6hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MjkxOA==", "bodyText": "Note that you could put one ID into the map for the entire list of files if you allowed ResolutionFn to return a List/Collection of artifacts.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402482918", "createdAt": "2020-04-02T17:24:27Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -215,22 +221,76 @@ public static Environment createProcessEnvironment(\n     }\n \n     ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+    ImmutableMap.Builder<String, Function<ArtifactInformation, ArtifactInformation>>\n+        lazyArtifactsBuilder = ImmutableMap.builder();\n     for (String path : pathsToStage) {\n       File file = new File(path);\n-      if (new File(path).exists()) {\n-        // Spurious items get added to the classpath. Filter by just those that exist.\n-        if (file.isDirectory()) {\n-          // Zip up directories so we can upload them to the artifact service.\n-          try {\n-            filesToStage.add(createArtifactInformation(zipDirectory(file)));\n-          } catch (IOException e) {\n-            throw new RuntimeException(e);\n-          }\n-        } else {\n-          filesToStage.add(createArtifactInformation(file));\n-        }\n+      // Spurious items get added to the classpath. Filter by just those that exist.\n+      if (file.exists()) {\n+        String id = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMTg5OA==", "bodyText": "Yes, I think the goal is to avoid even this enumeration until we actually need it.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402501898", "createdAt": "2020-04-02T17:50:00Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -215,22 +221,76 @@ public static Environment createProcessEnvironment(\n     }\n \n     ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+    ImmutableMap.Builder<String, Function<ArtifactInformation, ArtifactInformation>>\n+        lazyArtifactsBuilder = ImmutableMap.builder();\n     for (String path : pathsToStage) {\n       File file = new File(path);\n-      if (new File(path).exists()) {\n-        // Spurious items get added to the classpath. Filter by just those that exist.\n-        if (file.isDirectory()) {\n-          // Zip up directories so we can upload them to the artifact service.\n-          try {\n-            filesToStage.add(createArtifactInformation(zipDirectory(file)));\n-          } catch (IOException e) {\n-            throw new RuntimeException(e);\n-          }\n-        } else {\n-          filesToStage.add(createArtifactInformation(file));\n-        }\n+      // Spurious items get added to the classpath. Filter by just those that exist.\n+      if (file.exists()) {\n+        String id = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MjkxOA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDU1MA==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402684550", "createdAt": "2020-04-03T01:18:38Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -215,22 +221,76 @@ public static Environment createProcessEnvironment(\n     }\n \n     ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+    ImmutableMap.Builder<String, Function<ArtifactInformation, ArtifactInformation>>\n+        lazyArtifactsBuilder = ImmutableMap.builder();\n     for (String path : pathsToStage) {\n       File file = new File(path);\n-      if (new File(path).exists()) {\n-        // Spurious items get added to the classpath. Filter by just those that exist.\n-        if (file.isDirectory()) {\n-          // Zip up directories so we can upload them to the artifact service.\n-          try {\n-            filesToStage.add(createArtifactInformation(zipDirectory(file)));\n-          } catch (IOException e) {\n-            throw new RuntimeException(e);\n-          }\n-        } else {\n-          filesToStage.add(createArtifactInformation(file));\n-        }\n+      // Spurious items get added to the classpath. Filter by just those that exist.\n+      if (file.exists()) {\n+        String id = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MjkxOA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjI3MjI1OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0NTo0NFrOF_2nBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTozMTo1NFrOGACIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5OTMzNQ==", "bodyText": "As with the resolution API, one may want to attempt to resolve multiple artifacts (e.g. maven dependencies) simultaneously. One may also need to return multiple artifacts as the resolution of a single artifact (e.g. the deferred \"ambient environment\" one).", "url": "https://github.com/apache/beam/pull/11205#discussion_r402499335", "createdAt": "2020-04-02T17:45:44Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Optional;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public interface ArtifactResolver {\n+  void register(ResolutionFn fn);\n+\n+  RunnerApi.Pipeline resolveArtifacts(RunnerApi.Pipeline pipeline);\n+\n+  interface ResolutionFn {\n+    Optional<RunnerApi.ArtifactInformation> resolve(RunnerApi.ArtifactInformation info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4ODA1MA==", "bodyText": "changed to List.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402688050", "createdAt": "2020-04-03T01:31:54Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ArtifactResolver.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Optional;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public interface ArtifactResolver {\n+  void register(ResolutionFn fn);\n+\n+  RunnerApi.Pipeline resolveArtifacts(RunnerApi.Pipeline pipeline);\n+\n+  interface ResolutionFn {\n+    Optional<RunnerApi.ArtifactInformation> resolve(RunnerApi.ArtifactInformation info);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5OTMzNQ=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjI4MDE5OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Nzo1OFrOF_2sKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowMzoxNlrOGAs_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDY0OA==", "bodyText": "I wonder if having an explicit List would be easier to understand than the implicit chaining in these abstract classes.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402500648", "createdAt": "2020-04-02T17:47:58Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public class DefaultArtifactResolver implements ArtifactResolver {\n+  public static ArtifactResolver INSTANCE = new DefaultArtifactResolver();\n+\n+  private ResolutionFn resolver =\n+      (info) -> {\n+        if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+          return Optional.of(info);\n+        } else {\n+          return Optional.empty();\n+        }\n+      };\n+\n+  @Override\n+  public void register(ResolutionFn fn) {\n+    resolver =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MDQyMg==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/11205#discussion_r403390422", "createdAt": "2020-04-04T00:03:16Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+\n+public class DefaultArtifactResolver implements ArtifactResolver {\n+  public static ArtifactResolver INSTANCE = new DefaultArtifactResolver();\n+\n+  private ResolutionFn resolver =\n+      (info) -> {\n+        if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+          return Optional.of(info);\n+        } else {\n+          return Optional.empty();\n+        }\n+      };\n+\n+  @Override\n+  public void register(ResolutionFn fn) {\n+    resolver =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDY0OA=="}, "originalCommit": {"oid": "3e9af32625859bdfdb5da4bf18b5f4f4bf1d26bf"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzUzNDY1OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoxNjo1NFrOGACzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoxNjo1NFrOGACzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5OTA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // A data for deferred artifacts. Interpretation of bytes is delegated to the creator of this payload.\n          \n          \n            \n              // Data for deferred artifacts. Interpretation of bytes is delegated to the creator of this payload.", "url": "https://github.com/apache/beam/pull/11205#discussion_r402699096", "createdAt": "2020-04-03T02:16:54Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,15 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A unique string identifier assigned by the creator of this payload. The creator may use this key to confirm\n+  // whether they can parse the data.\n+  string key = 1;\n+\n+  // A data for deferred artifacts. Interpretation of bytes is delegated to the creator of this payload.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0422e8b1de81ab21b715533de34a9e2e19ab5a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzUzNjY1OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoxODoxMlrOGAC0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoxODoxMlrOGAC0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5OTM5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                      String.format(\"cannot resolve artifact information: %s\", info));\n          \n          \n            \n                                      String.format(\"Cannot resolve artifact information: %s\", info));", "url": "https://github.com/apache/beam/pull/11205#discussion_r402699398", "createdAt": "2020-04-03T02:18:12Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * A default artifact resolver. This resolver applies {@link ResolutionFn} first matched in the\n+ * order they registered.\n+ */\n+public class DefaultArtifactResolver implements ArtifactResolver {\n+  public static final ArtifactResolver INSTANCE = new DefaultArtifactResolver();\n+\n+  private ResolutionFn resolver =\n+      (info) -> {\n+        if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+          return ImmutableList.of(info);\n+        } else {\n+          return ImmutableList.of();\n+        }\n+      };\n+\n+  @Override\n+  public void register(ResolutionFn fn) {\n+    resolver =\n+        (info) -> {\n+          List<RunnerApi.ArtifactInformation> resolved = fn.resolve(info);\n+          if (!resolved.isEmpty()) {\n+            return resolved;\n+          } else {\n+            return resolver.resolve(info);\n+          }\n+        };\n+  }\n+\n+  @Override\n+  public RunnerApi.Pipeline resolveArtifacts(RunnerApi.Pipeline pipeline) {\n+    ImmutableMap.Builder<String, RunnerApi.Environment> environmentMapBuilder =\n+        ImmutableMap.builder();\n+    for (Map.Entry<String, RunnerApi.Environment> entry :\n+        pipeline.getComponents().getEnvironmentsMap().entrySet()) {\n+      List<RunnerApi.ArtifactInformation> resolvedDependencies =\n+          entry\n+              .getValue()\n+              .getDependenciesList()\n+              .parallelStream()\n+              .flatMap(\n+                  (info) -> {\n+                    List<RunnerApi.ArtifactInformation> resolved = resolver.resolve(info);\n+                    if (resolved.isEmpty()) {\n+                      throw new RuntimeException(\n+                          String.format(\"cannot resolve artifact information: %s\", info));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0422e8b1de81ab21b715533de34a9e2e19ab5a"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzU0NDUzOnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoyMjo1OVrOGAC5OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoyMjo1OVrOGAC5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMDYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String id = UUID.randomUUID().toString();\n          \n          \n            \n                DefaultArtifactResolver.INSTANCE.register(\n          \n          \n            \n                    (info) -> {\n          \n          \n            \n                      if (BeamUrns.getUrn(StandardArtifacts.Types.DEFERRED).equals(info.getTypeUrn())) {\n          \n          \n            \n                        RunnerApi.DeferredArtifactPayload deferredArtifactPayload;\n          \n          \n            \n                        try {\n          \n          \n            \n                          deferredArtifactPayload =\n          \n          \n            \n                              RunnerApi.DeferredArtifactPayload.parseFrom(info.getTypePayload());\n          \n          \n            \n                        } catch (InvalidProtocolBufferException e) {\n          \n          \n            \n                          throw new RuntimeException(\"Error parsing deferred artifact payload.\", e);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (id.equals(deferredArtifactPayload.getKey())) {\n          \n          \n            \n                          return lazyArtifacts.stream().map(Supplier::get).collect(Collectors.toList());\n          \n          \n            \n                        } else {\n          \n          \n            \n                          return ImmutableList.of();\n          \n          \n            \n                        }\n          \n          \n            \n                      } else {\n          \n          \n            \n                        return ImmutableList.of();\n          \n          \n            \n                      }\n          \n          \n            \n                    });\n          \n          \n            \n            \n          \n          \n            \n                return ImmutableList.of(\n          \n          \n            \n                    ArtifactInformation.newBuilder()\n          \n          \n            \n                        .setTypeUrn(BeamUrns.getUrn(StandardArtifacts.Types.DEFERRED))\n          \n          \n            \n                        .setTypePayload(\n          \n          \n            \n                            RunnerApi.DeferredArtifactPayload.newBuilder().setKey(id).build().toByteString())\n          \n          \n            \n                String key = UUID.randomUUID().toString();\n          \n          \n            \n                DefaultArtifactResolver.INSTANCE.register(\n          \n          \n            \n                    (info) -> {\n          \n          \n            \n                      if (BeamUrns.getUrn(StandardArtifacts.Types.DEFERRED).equals(info.getTypeUrn())) {\n          \n          \n            \n                        RunnerApi.DeferredArtifactPayload deferredArtifactPayload;\n          \n          \n            \n                        try {\n          \n          \n            \n                          deferredArtifactPayload =\n          \n          \n            \n                              RunnerApi.DeferredArtifactPayload.parseFrom(info.getTypePayload());\n          \n          \n            \n                        } catch (InvalidProtocolBufferException e) {\n          \n          \n            \n                          throw new RuntimeException(\"Error parsing deferred artifact payload.\", e);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (key.equals(deferredArtifactPayload.getKey())) {\n          \n          \n            \n                          return lazyArtifacts.stream().map(Supplier::get).collect(Collectors.toList());\n          \n          \n            \n                        } else {\n          \n          \n            \n                          return ImmutableList.of();\n          \n          \n            \n                        }\n          \n          \n            \n                      } else {\n          \n          \n            \n                        return ImmutableList.of();\n          \n          \n            \n                      }\n          \n          \n            \n                    });\n          \n          \n            \n            \n          \n          \n            \n                return ImmutableList.of(\n          \n          \n            \n                    ArtifactInformation.newBuilder()\n          \n          \n            \n                        .setTypeUrn(BeamUrns.getUrn(StandardArtifacts.Types.DEFERRED))\n          \n          \n            \n                        .setTypePayload(\n          \n          \n            \n                            RunnerApi.DeferredArtifactPayload.newBuilder().setKey(key).build().toByteString())", "url": "https://github.com/apache/beam/pull/11205#discussion_r402700601", "createdAt": "2020-04-03T02:22:59Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -214,24 +220,87 @@ public static Environment createProcessEnvironment(\n       pathsToStage.addAll(stagingFiles);\n     }\n \n-    ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+    ImmutableList.Builder<Supplier<ArtifactInformation>> lazyArtifactsBuilder =\n+        ImmutableList.builder();\n     for (String path : pathsToStage) {\n       File file = new File(path);\n-      if (new File(path).exists()) {\n-        // Spurious items get added to the classpath. Filter by just those that exist.\n-        if (file.isDirectory()) {\n-          // Zip up directories so we can upload them to the artifact service.\n-          try {\n-            filesToStage.add(createArtifactInformation(zipDirectory(file)));\n-          } catch (IOException e) {\n-            throw new RuntimeException(e);\n-          }\n-        } else {\n-          filesToStage.add(createArtifactInformation(file));\n-        }\n+      // Spurious items get added to the classpath. Filter by just those that exist.\n+      if (file.exists()) {\n+        ArtifactInformation.Builder artifactBuilder = ArtifactInformation.newBuilder();\n+        artifactBuilder.setTypeUrn(BeamUrns.getUrn(StandardArtifacts.Types.FILE));\n+        artifactBuilder.setRoleUrn(BeamUrns.getUrn(StandardArtifacts.Roles.STAGING_TO));\n+        artifactBuilder.setRolePayload(\n+            RunnerApi.ArtifactStagingToRolePayload.newBuilder()\n+                .setStagedName(createStagingFileName(file))\n+                .build()\n+                .toByteString());\n+        lazyArtifactsBuilder.add(\n+            file.isDirectory()\n+                ? () -> {\n+                  File zippedFile;\n+                  HashCode hashCode;\n+                  try {\n+                    zippedFile = zipDirectory(file);\n+                    hashCode = Files.asByteSource(zippedFile).hash(Hashing.sha256());\n+                  } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                  }\n+                  return artifactBuilder\n+                      .setTypePayload(\n+                          RunnerApi.ArtifactFilePayload.newBuilder()\n+                              .setPath(zippedFile.getPath())\n+                              .setSha256(hashCode.toString())\n+                              .build()\n+                              .toByteString())\n+                      .build();\n+                }\n+                : () -> {\n+                  HashCode hashCode;\n+                  try {\n+                    hashCode = Files.asByteSource(file).hash(Hashing.sha256());\n+                  } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                  }\n+                  return artifactBuilder\n+                      .setTypePayload(\n+                          RunnerApi.ArtifactFilePayload.newBuilder()\n+                              .setPath(file.getPath())\n+                              .setSha256(hashCode.toString())\n+                              .build()\n+                              .toByteString())\n+                      .build();\n+                });\n       }\n     }\n-    return filesToStage.build();\n+\n+    List<Supplier<ArtifactInformation>> lazyArtifacts = lazyArtifactsBuilder.build();\n+    String id = UUID.randomUUID().toString();\n+    DefaultArtifactResolver.INSTANCE.register(\n+        (info) -> {\n+          if (BeamUrns.getUrn(StandardArtifacts.Types.DEFERRED).equals(info.getTypeUrn())) {\n+            RunnerApi.DeferredArtifactPayload deferredArtifactPayload;\n+            try {\n+              deferredArtifactPayload =\n+                  RunnerApi.DeferredArtifactPayload.parseFrom(info.getTypePayload());\n+            } catch (InvalidProtocolBufferException e) {\n+              throw new RuntimeException(\"Error parsing deferred artifact payload.\", e);\n+            }\n+            if (id.equals(deferredArtifactPayload.getKey())) {\n+              return lazyArtifacts.stream().map(Supplier::get).collect(Collectors.toList());\n+            } else {\n+              return ImmutableList.of();\n+            }\n+          } else {\n+            return ImmutableList.of();\n+          }\n+        });\n+\n+    return ImmutableList.of(\n+        ArtifactInformation.newBuilder()\n+            .setTypeUrn(BeamUrns.getUrn(StandardArtifacts.Types.DEFERRED))\n+            .setTypePayload(\n+                RunnerApi.DeferredArtifactPayload.newBuilder().setKey(id).build().toByteString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0422e8b1de81ab21b715533de34a9e2e19ab5a"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMwMjQ2OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToxNDozOFrOGAtyRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo1NTo0OVrOGBrY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMzMzMg==", "bodyText": "Is the empty list special? In particular sometimes a deferred artifact may resolve to nothing, which is different than not being able to be resolved... I think we still need optional or null or an exception to denote unresolveable by this resolver.", "url": "https://github.com/apache/beam/pull/11205#discussion_r403403332", "createdAt": "2020-04-04T01:14:38Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+/**\n+ * A default artifact resolver. This resolver applies {@link ResolutionFn} in the reversed order\n+ * they registered i.e. the function registered later overrides the earlier one if they resolve the\n+ * same artifact.\n+ */\n+public class DefaultArtifactResolver implements ArtifactResolver {\n+  public static final ArtifactResolver INSTANCE = new DefaultArtifactResolver();\n+\n+  private List<ResolutionFn> fns =\n+      Lists.newArrayList(\n+          (info) -> {\n+            if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+              return ImmutableList.of(info);\n+            } else {\n+              return ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5550d1f5c758565133c0d1b7c703e7550b8fc3c7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMjYzNg==", "bodyText": "Done. Optional list makes three choices: Failure, Success with empty output and Success with a list of artifacts.", "url": "https://github.com/apache/beam/pull/11205#discussion_r404412636", "createdAt": "2020-04-06T21:55:49Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DefaultArtifactResolver.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+/**\n+ * A default artifact resolver. This resolver applies {@link ResolutionFn} in the reversed order\n+ * they registered i.e. the function registered later overrides the earlier one if they resolve the\n+ * same artifact.\n+ */\n+public class DefaultArtifactResolver implements ArtifactResolver {\n+  public static final ArtifactResolver INSTANCE = new DefaultArtifactResolver();\n+\n+  private List<ResolutionFn> fns =\n+      Lists.newArrayList(\n+          (info) -> {\n+            if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+              return ImmutableList.of(info);\n+            } else {\n+              return ImmutableList.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMzMzMg=="}, "originalCommit": {"oid": "5550d1f5c758565133c0d1b7c703e7550b8fc3c7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMwNTk0OnYy", "diffSide": "RIGHT", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToxNzo1MlrOGAtz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTo0NDozOFrOGAuA6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMzc2Ng==", "bodyText": "Should this be uid? Any collisions here could be bad...", "url": "https://github.com/apache/beam/pull/11205#discussion_r403403766", "createdAt": "2020-04-04T01:17:52Z", "author": {"login": "robertwb"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,15 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A unique string identifier assigned by the creator of this payload. The creator may use this key to confirm\n+  // whether they can parse the data.\n+  string key = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5550d1f5c758565133c0d1b7c703e7550b8fc3c7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNzA4Mg==", "bodyText": "This is going to have to get revamped for XLang and since it isn't being exported outside of the SDK for portable runners we can easily change it.", "url": "https://github.com/apache/beam/pull/11205#discussion_r403407082", "createdAt": "2020-04-04T01:44:38Z", "author": {"login": "lukecwik"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1206,6 +1210,15 @@ message MavenPayload {\n   string repository_url = 2;\n }\n \n+message DeferredArtifactPayload {\n+  // A unique string identifier assigned by the creator of this payload. The creator may use this key to confirm\n+  // whether they can parse the data.\n+  string key = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMzc2Ng=="}, "originalCommit": {"oid": "5550d1f5c758565133c0d1b7c703e7550b8fc3c7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNzg0OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTozMDo0MFrOGAt53g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo1NDo0MlrOGBrWLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTI3OA==", "bodyText": "Don't we want this for loop to be lazy?\nRather than introducing intermediate streams of Suppliers, I think we could just rename the existing getArtifacts() something like getNonDeferredArtifacts() and then call it during resolution.\nif (key.equals(deferredArtifactPayload.getKey())) {\n      return getNonDeferredArtifacts(options);\n}", "url": "https://github.com/apache/beam/pull/11205#discussion_r403405278", "createdAt": "2020-04-04T01:30:40Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -214,24 +220,90 @@ public static Environment createProcessEnvironment(\n       pathsToStage.addAll(stagingFiles);\n     }\n \n-    ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+    ImmutableList.Builder<Supplier<ArtifactInformation>> lazyArtifactsBuilder =\n+        ImmutableList.builder();\n     for (String path : pathsToStage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5550d1f5c758565133c0d1b7c703e7550b8fc3c7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMTk1MQ==", "bodyText": "This for loop is fairly cheap and from stream of Suppliers we can easily get additional performance benefits by creating parallelStream. When we consider parallelizing expensive computations, some boilerplate codes are needed anyway in getNonDeferredArtifacts(). I think building a stream is a nice way to abstract them out.", "url": "https://github.com/apache/beam/pull/11205#discussion_r404411951", "createdAt": "2020-04-06T21:54:42Z", "author": {"login": "ihji"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -214,24 +220,90 @@ public static Environment createProcessEnvironment(\n       pathsToStage.addAll(stagingFiles);\n     }\n \n-    ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+    ImmutableList.Builder<Supplier<ArtifactInformation>> lazyArtifactsBuilder =\n+        ImmutableList.builder();\n     for (String path : pathsToStage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTI3OA=="}, "originalCommit": {"oid": "5550d1f5c758565133c0d1b7c703e7550b8fc3c7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAyMTAxOnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1Mzo1MVrOGCXjIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1Mzo1MVrOGCXjIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjE2Mg==", "bodyText": "Nit, there seems to be a fair amount of duplication between these two case.", "url": "https://github.com/apache/beam/pull/11205#discussion_r405136162", "createdAt": "2020-04-07T21:53:51Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -207,31 +210,94 @@ public static Environment createProcessEnvironment(\n     }\n   }\n \n-  public static Collection<ArtifactInformation> getArtifacts(PipelineOptions options) {\n-    Set<String> pathsToStage = Sets.newHashSet();\n-    List<String> stagingFiles = options.as(PortablePipelineOptions.class).getFilesToStage();\n-    if (stagingFiles != null) {\n-      pathsToStage.addAll(stagingFiles);\n-    }\n-\n-    ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+  private static List<ArtifactInformation> getArtifacts(List<String> stagingFiles) {\n+    Set<String> pathsToStage = Sets.newHashSet(stagingFiles);\n+    ImmutableList.Builder<ArtifactInformation> artifactsBuilder = ImmutableList.builder();\n     for (String path : pathsToStage) {\n       File file = new File(path);\n-      if (new File(path).exists()) {\n-        // Spurious items get added to the classpath. Filter by just those that exist.\n+      // Spurious items get added to the classpath. Filter by just those that exist.\n+      if (file.exists()) {\n+        ArtifactInformation.Builder artifactBuilder = ArtifactInformation.newBuilder();\n+        artifactBuilder.setTypeUrn(BeamUrns.getUrn(StandardArtifacts.Types.FILE));\n+        artifactBuilder.setRoleUrn(BeamUrns.getUrn(StandardArtifacts.Roles.STAGING_TO));\n+        artifactBuilder.setRolePayload(\n+            RunnerApi.ArtifactStagingToRolePayload.newBuilder()\n+                .setStagedName(createStagingFileName(file))\n+                .build()\n+                .toByteString());\n         if (file.isDirectory()) {\n-          // Zip up directories so we can upload them to the artifact service.\n+          File zippedFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f419fbb34fd892094d1a98a24e251b2f0dfc477"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAyMjY0OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NDoyNFrOGCXkIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NDoyNFrOGCXkIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjQxOA==", "bodyText": "Or would it be better to let the method throw an IOException?", "url": "https://github.com/apache/beam/pull/11205#discussion_r405136418", "createdAt": "2020-04-07T21:54:24Z", "author": {"login": "robertwb"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -207,31 +210,94 @@ public static Environment createProcessEnvironment(\n     }\n   }\n \n-  public static Collection<ArtifactInformation> getArtifacts(PipelineOptions options) {\n-    Set<String> pathsToStage = Sets.newHashSet();\n-    List<String> stagingFiles = options.as(PortablePipelineOptions.class).getFilesToStage();\n-    if (stagingFiles != null) {\n-      pathsToStage.addAll(stagingFiles);\n-    }\n-\n-    ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+  private static List<ArtifactInformation> getArtifacts(List<String> stagingFiles) {\n+    Set<String> pathsToStage = Sets.newHashSet(stagingFiles);\n+    ImmutableList.Builder<ArtifactInformation> artifactsBuilder = ImmutableList.builder();\n     for (String path : pathsToStage) {\n       File file = new File(path);\n-      if (new File(path).exists()) {\n-        // Spurious items get added to the classpath. Filter by just those that exist.\n+      // Spurious items get added to the classpath. Filter by just those that exist.\n+      if (file.exists()) {\n+        ArtifactInformation.Builder artifactBuilder = ArtifactInformation.newBuilder();\n+        artifactBuilder.setTypeUrn(BeamUrns.getUrn(StandardArtifacts.Types.FILE));\n+        artifactBuilder.setRoleUrn(BeamUrns.getUrn(StandardArtifacts.Roles.STAGING_TO));\n+        artifactBuilder.setRolePayload(\n+            RunnerApi.ArtifactStagingToRolePayload.newBuilder()\n+                .setStagedName(createStagingFileName(file))\n+                .build()\n+                .toByteString());\n         if (file.isDirectory()) {\n-          // Zip up directories so we can upload them to the artifact service.\n+          File zippedFile;\n+          HashCode hashCode;\n           try {\n-            filesToStage.add(createArtifactInformation(zipDirectory(file)));\n+            zippedFile = zipDirectory(file);\n+            hashCode = Files.asByteSource(zippedFile).hash(Hashing.sha256());\n           } catch (IOException e) {\n             throw new RuntimeException(e);\n           }\n+          artifactsBuilder.add(\n+              artifactBuilder\n+                  .setTypePayload(\n+                      RunnerApi.ArtifactFilePayload.newBuilder()\n+                          .setPath(zippedFile.getPath())\n+                          .setSha256(hashCode.toString())\n+                          .build()\n+                          .toByteString())\n+                  .build());\n         } else {\n-          filesToStage.add(createArtifactInformation(file));\n+          HashCode hashCode;\n+          try {\n+            hashCode = Files.asByteSource(file).hash(Hashing.sha256());\n+          } catch (IOException e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f419fbb34fd892094d1a98a24e251b2f0dfc477"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1508, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}