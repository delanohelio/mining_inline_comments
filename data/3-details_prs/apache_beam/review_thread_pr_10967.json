{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzY5MDM0", "number": 10967, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo1MDowN1rODjS96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1NToyOFrODjoAMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM3NTEyOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo1MDowN1rOFvBsHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzoyOTo1NFrOFvkyug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NTA2OA==", "bodyText": "Why does the outerSchema need to be nullable here?", "url": "https://github.com/apache/beam/pull/10967#discussion_r384855068", "createdAt": "2020-02-27T00:50:07Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -3249,6 +3248,68 @@ public void testNamedParameterQuery() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testParameterStruct() {\n+    String sql = \"SELECT @p as ColA\";\n+    ImmutableMap<String, Value> params =\n+        ImmutableMap.of(\n+            \"p\",\n+            Value.createStructValue(\n+                TypeFactory.createStructType(\n+                    ImmutableList.of(\n+                        new StructType.StructField(\n+                            \"s\", TypeFactory.createSimpleType(TypeKind.TYPE_STRING)),\n+                        new StructType.StructField(\n+                            \"i\", TypeFactory.createSimpleType(TypeKind.TYPE_INT64)))),\n+                ImmutableList.of(Value.createStringValue(\"foo\"), Value.createInt64Value(1L))));\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    final Schema innerSchema =\n+        Schema.of(Field.of(\"s\", FieldType.STRING), Field.of(\"i\", FieldType.INT64));\n+    final Schema schema =\n+        Schema.builder().addNullableField(\"field1\", FieldType.row(innerSchema)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02abb189a843c385cd5e28c40132ea0c10309206"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMDIwMg==", "bodyText": "That must have been left over from a previous iteration. I removed it.", "url": "https://github.com/apache/beam/pull/10967#discussion_r385430202", "createdAt": "2020-02-27T23:29:54Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -3249,6 +3248,68 @@ public void testNamedParameterQuery() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testParameterStruct() {\n+    String sql = \"SELECT @p as ColA\";\n+    ImmutableMap<String, Value> params =\n+        ImmutableMap.of(\n+            \"p\",\n+            Value.createStructValue(\n+                TypeFactory.createStructType(\n+                    ImmutableList.of(\n+                        new StructType.StructField(\n+                            \"s\", TypeFactory.createSimpleType(TypeKind.TYPE_STRING)),\n+                        new StructType.StructField(\n+                            \"i\", TypeFactory.createSimpleType(TypeKind.TYPE_INT64)))),\n+                ImmutableList.of(Value.createStringValue(\"foo\"), Value.createInt64Value(1L))));\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    final Schema innerSchema =\n+        Schema.of(Field.of(\"s\", FieldType.STRING), Field.of(\"i\", FieldType.INT64));\n+    final Schema schema =\n+        Schema.builder().addNullableField(\"field1\", FieldType.row(innerSchema)).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NTA2OA=="}, "originalCommit": {"oid": "02abb189a843c385cd5e28c40132ea0c10309206"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjgxNjY5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1Mzo0OFrOFviizQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1ODoyOVrOFvirhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MzM1Nw==", "bodyText": "I have lost some of my memory on this code path:\njust a question: does this work with deep nested ROW? E.g. ROW(ROW(ROW(...)..)...)", "url": "https://github.com/apache/beam/pull/10967#discussion_r385393357", "createdAt": "2020-02-27T21:53:48Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -962,20 +980,28 @@ private RexNode convertResolvedParameter(ResolvedParameter parameter) {\n   }\n \n   private RexNode convertResolvedStructFieldAccess(ResolvedGetStructField resolvedGetStructField) {\n-    return rexBuilder()\n-        .makeFieldAccess(\n-            convertRexNodeFromResolvedExpr(resolvedGetStructField.getExpr()),\n-            (int) resolvedGetStructField.getFieldIdx());\n+    RexNode referencedExpr = convertRexNodeFromResolvedExpr(resolvedGetStructField.getExpr());\n+    return convertResolvedStructFieldAccessInternal(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02abb189a843c385cd5e28c40132ea0c10309206"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NTU5MQ==", "bodyText": "Yes, see test I added (testParameterStructNested)", "url": "https://github.com/apache/beam/pull/10967#discussion_r385395591", "createdAt": "2020-02-27T21:58:29Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -962,20 +980,28 @@ private RexNode convertResolvedParameter(ResolvedParameter parameter) {\n   }\n \n   private RexNode convertResolvedStructFieldAccess(ResolvedGetStructField resolvedGetStructField) {\n-    return rexBuilder()\n-        .makeFieldAccess(\n-            convertRexNodeFromResolvedExpr(resolvedGetStructField.getExpr()),\n-            (int) resolvedGetStructField.getFieldIdx());\n+    RexNode referencedExpr = convertRexNodeFromResolvedExpr(resolvedGetStructField.getExpr());\n+    return convertResolvedStructFieldAccessInternal(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MzM1Nw=="}, "originalCommit": {"oid": "02abb189a843c385cd5e28c40132ea0c10309206"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjgyMTYwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1NToyOFrOFvil4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMDozMVrOFviu3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDE0NQ==", "bodyText": "nit: ideally such unparse should happen within operator classes. But since we implement it in Beam it is just ok.", "url": "https://github.com/apache/beam/pull/10967#discussion_r385394145", "createdAt": "2020-02-27T21:55:28Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "diffHunk": "@@ -222,6 +222,14 @@ public void unparseCall(\n         }\n         writer.endFunCall(frame);\n         break;\n+      case ROW:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02abb189a843c385cd5e28c40132ea0c10309206"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NjQ0NQ==", "bodyText": "I thought about replacing SqlRowOperator with our own custom operator. But I like this better, because it only overrides unparsing without affecting the rest of the operator code.", "url": "https://github.com/apache/beam/pull/10967#discussion_r385396445", "createdAt": "2020-02-27T22:00:31Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/bigquery/BeamBigQuerySqlDialect.java", "diffHunk": "@@ -222,6 +222,14 @@ public void unparseCall(\n         }\n         writer.endFunCall(frame);\n         break;\n+      case ROW:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDE0NQ=="}, "originalCommit": {"oid": "02abb189a843c385cd5e28c40132ea0c10309206"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1922, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}