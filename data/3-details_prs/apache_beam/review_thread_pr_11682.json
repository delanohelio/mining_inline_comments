{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzY4OTc1", "number": 11682, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1Mjo1MVrOD-bfjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxNDoyMFrOD-buXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzg4NzUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1Mjo1MVrOGYht2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo0MTozMFrOGYjceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MTQxOA==", "bodyText": "nit: this can be final", "url": "https://github.com/apache/beam/pull/11682#discussion_r428371418", "createdAt": "2020-05-20T23:52:51Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTczOA==", "bodyText": "Done. thanks", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399738", "createdAt": "2020-05-21T01:41:30Z", "author": {"login": "darshanj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MTQxOA=="}, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkxMTM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDowNjoxNlrOGYh87w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo0MToxNlrOGYjcNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTI3OQ==", "bodyText": "This is a no-op, please remove.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428375279", "createdAt": "2020-05-21T00:06:16Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -76,6 +93,45 @@\n     int partitionFor(T elem, int numPartitions);\n   }\n \n+  /**\n+   * A function object that chooses an output partition for an element.\n+   *\n+   * @param <T> the type of the elements being partitioned\n+   */\n+  public interface PartitionWithSideInputsFn<T> extends Serializable {\n+    /**\n+     * Chooses the partition into which to put the given element.\n+     *\n+     * @param elem the element to be partitioned\n+     * @param numPartitions the total number of partitions ({@code >= 1})\n+     * @param c the {@link Contextful.Fn.Context} needed to access sideInputs.\n+     * @return index of the selected partition (in the range {@code [0..numPartitions-1]})\n+     */\n+    int partitionFor(T elem, int numPartitions, Contextful.Fn.Context c);\n+  }\n+\n+  /**\n+   * Returns a new {@code Partition} {@code PTransform} that divides its input {@code PCollection}\n+   * into the given number of partitions, using the given partitioning function.\n+   *\n+   * @param numPartitions the number of partitions to divide the input {@code PCollection} into\n+   * @param partitionFn the function to invoke on each element to choose its output partition\n+   * @param requirements the {@link Requirements} needed to run it.\n+   * @throws IllegalArgumentException if {@code numPartitions <= 0}\n+   */\n+  public static <T> Partition<T> of(\n+      int numPartitions,\n+      PartitionWithSideInputsFn<? super T> partitionFn,\n+      Requirements requirements) {\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions, c),\n+            requirements);\n+    Object aClass = partitionFn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTY3MQ==", "bodyText": "Hi, I don't get your suggestion here. I will need to wrap interface function in ContextFul.Fn. Can you eloborate please?", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399671", "createdAt": "2020-05-21T01:41:16Z", "author": {"login": "darshanj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -76,6 +93,45 @@\n     int partitionFor(T elem, int numPartitions);\n   }\n \n+  /**\n+   * A function object that chooses an output partition for an element.\n+   *\n+   * @param <T> the type of the elements being partitioned\n+   */\n+  public interface PartitionWithSideInputsFn<T> extends Serializable {\n+    /**\n+     * Chooses the partition into which to put the given element.\n+     *\n+     * @param elem the element to be partitioned\n+     * @param numPartitions the total number of partitions ({@code >= 1})\n+     * @param c the {@link Contextful.Fn.Context} needed to access sideInputs.\n+     * @return index of the selected partition (in the range {@code [0..numPartitions-1]})\n+     */\n+    int partitionFor(T elem, int numPartitions, Contextful.Fn.Context c);\n+  }\n+\n+  /**\n+   * Returns a new {@code Partition} {@code PTransform} that divides its input {@code PCollection}\n+   * into the given number of partitions, using the given partitioning function.\n+   *\n+   * @param numPartitions the number of partitions to divide the input {@code PCollection} into\n+   * @param partitionFn the function to invoke on each element to choose its output partition\n+   * @param requirements the {@link Requirements} needed to run it.\n+   * @throws IllegalArgumentException if {@code numPartitions <= 0}\n+   */\n+  public static <T> Partition<T> of(\n+      int numPartitions,\n+      PartitionWithSideInputsFn<? super T> partitionFn,\n+      Requirements requirements) {\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions, c),\n+            requirements);\n+    Object aClass = partitionFn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTI3OQ=="}, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkxMTU0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDowNjoyNlrOGYh9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0NzozOVrOGY6kkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOQ==", "bodyText": "This is a no-op, please remove.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428375309", "createdAt": "2020-05-21T00:06:26Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -85,7 +141,14 @@\n    * @throws IllegalArgumentException if {@code numPartitions <= 0}\n    */\n   public static <T> Partition<T> of(int numPartitions, PartitionFn<? super T> partitionFn) {\n-    return new Partition<>(new PartitionDoFn<T>(numPartitions, partitionFn));\n+\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions),\n+            Requirements.empty());\n+    Object aClass = partitionFn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTYzNA==", "bodyText": "Hi, I don't get your suggestion here. I will need to wrap interface function in ContextFul.Fn. Can you eloborate please?", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399634", "createdAt": "2020-05-21T01:41:07Z", "author": {"login": "darshanj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -85,7 +141,14 @@\n    * @throws IllegalArgumentException if {@code numPartitions <= 0}\n    */\n   public static <T> Partition<T> of(int numPartitions, PartitionFn<? super T> partitionFn) {\n-    return new Partition<>(new PartitionDoFn<T>(numPartitions, partitionFn));\n+\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions),\n+            Requirements.empty());\n+    Object aClass = partitionFn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOQ=="}, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3ODY0MQ==", "bodyText": "The statement Object aClass = partitionFn; has no effect. You can just pass partitionFn directly into the function.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428778641", "createdAt": "2020-05-21T16:47:39Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -85,7 +141,14 @@\n    * @throws IllegalArgumentException if {@code numPartitions <= 0}\n    */\n   public static <T> Partition<T> of(int numPartitions, PartitionFn<? super T> partitionFn) {\n-    return new Partition<>(new PartitionDoFn<T>(numPartitions, partitionFn));\n+\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions),\n+            Requirements.empty());\n+    Object aClass = partitionFn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOQ=="}, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkyNDY0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxMzo1MVrOGYiFHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo0MTo0MFrOGYjcmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzM3Mg==", "bodyText": "nit: drop the public.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377372", "createdAt": "2020-05-21T00:13:51Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTc3MA==", "bodyText": "Done.Thanks", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399770", "createdAt": "2020-05-21T01:41:40Z", "author": {"login": "darshanj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzM3Mg=="}, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkyNTE0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxNDowOVrOGYiFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo0MTo0OFrOGYjcug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ1Mw==", "bodyText": "nit: this can be final", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377453", "createdAt": "2020-05-21T00:14:09Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTgwMg==", "bodyText": "Done Thanks", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399802", "createdAt": "2020-05-21T01:41:48Z", "author": {"login": "darshanj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ1Mw=="}, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzkyNTQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoxNDoyMFrOGYiFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo0MjoxOVrOGYjdOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ5NA==", "bodyText": "How about just passing the class here?", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377494", "createdAt": "2020-05-21T00:14:20Z", "author": {"login": "apilloud"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(\n+        int numPartitions,\n+        Contextful<Contextful.Fn<X, Integer>> ctxFn,\n+        Object originalFnForDisplayData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTkyOQ==", "bodyText": "Done thanks.", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399929", "createdAt": "2020-05-21T01:42:19Z", "author": {"login": "darshanj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(\n+        int numPartitions,\n+        Contextful<Contextful.Fn<X, Integer>> ctxFn,\n+        Object originalFnForDisplayData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ5NA=="}, "originalCommit": {"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3905, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}