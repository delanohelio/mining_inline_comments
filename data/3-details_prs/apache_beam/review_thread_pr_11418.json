{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzk2ODIy", "number": 11418, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoyODowOVrODx2Hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoxMTowOFrODyqG5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTkzNDcwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoyODowOVrOGFjN1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjo1Njo0N1rOGFj2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzA0Ng==", "bodyText": "We can split before any successfully claimed block by returning [from, to) and updating the current range to be [from, from)\nThis makes sense in some cases where we want to handoff all the work to someone else for the active element while this bundle finishes other processing.", "url": "https://github.com/apache/beam/pull/11418#discussion_r408473046", "createdAt": "2020-04-14T22:28:09Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MzM4MQ==", "bodyText": "Allowing split before first claiming makes sense to me. Python has already allowed that.", "url": "https://github.com/apache/beam/pull/11418#discussion_r408483381", "createdAt": "2020-04-14T22:56:47Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzA0Ng=="}, "originalCommit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTkzNjEwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoyODo0MlrOGFjOtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0MzoyMFrOGF_9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzI3MQ==", "bodyText": "Why do we need checkpointed?\nShouldn't the range restriction change so that to becomes lastClaimed (or from if nothing has been claimed)?", "url": "https://github.com/apache/beam/pull/11418#discussion_r408473271", "createdAt": "2020-04-14T22:28:42Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");\n+    // No more split should be performed if checkpoint has happened.\n+    if (checkpointed) {\n+      return null;\n+    }\n+    Long splitPos =\n+        lastClaimedOffset\n+            + Math.max(1L, (long) ((range.getTo() - lastClaimedOffset) * fractionOfRemainder));\n+    if (splitPos >= range.getTo()) {\n+      return null;\n+    }\n+    if (fractionOfRemainder == 0.0) {\n+      checkpointed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MzU1Mg==", "bodyText": "Just return early since we know there is no more split after checkpointing.", "url": "https://github.com/apache/beam/pull/11418#discussion_r408483552", "createdAt": "2020-04-14T22:57:15Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");\n+    // No more split should be performed if checkpoint has happened.\n+    if (checkpointed) {\n+      return null;\n+    }\n+    Long splitPos =\n+        lastClaimedOffset\n+            + Math.max(1L, (long) ((range.getTo() - lastClaimedOffset) * fractionOfRemainder));\n+    if (splitPos >= range.getTo()) {\n+      return null;\n+    }\n+    if (fractionOfRemainder == 0.0) {\n+      checkpointed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzI3MQ=="}, "originalCommit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MzkxMA==", "bodyText": "Changing the state makes the code more complicated though since the bounds checking varies based upon whether you got 0.0 or 0.00001 which is likely to produce the same final state with one having an additional boolean being set.", "url": "https://github.com/apache/beam/pull/11418#discussion_r408943910", "createdAt": "2020-04-15T15:43:20Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");\n+    // No more split should be performed if checkpoint has happened.\n+    if (checkpointed) {\n+      return null;\n+    }\n+    Long splitPos =\n+        lastClaimedOffset\n+            + Math.max(1L, (long) ((range.getTo() - lastClaimedOffset) * fractionOfRemainder));\n+    if (splitPos >= range.getTo()) {\n+      return null;\n+    }\n+    if (fractionOfRemainder == 0.0) {\n+      checkpointed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzI3MQ=="}, "originalCommit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDM2NDkwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo0NDoyNVrOGG0kxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDozNTowNlrOGG2K1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjAyMQ==", "bodyText": "primary and residual shouldn't have the same value, primary should be an empty range like [100, 100)", "url": "https://github.com/apache/beam/pull/11418#discussion_r409806021", "createdAt": "2020-04-16T19:44:25Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -47,16 +48,9 @@ public void testTryClaim() throws Exception {\n   @Test\n   public void testCheckpointUnstarted() throws Exception {\n     OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    expected.expect(IllegalStateException.class);\n-    tracker.trySplit(0).getResidual();\n-  }\n-\n-  @Test\n-  public void testCheckpointOnlyFailedClaim() throws Exception {\n-    OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    assertFalse(tracker.tryClaim(250L));\n-    expected.expect(IllegalStateException.class);\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n+    SplitResult res = tracker.trySplit(0);\n+    assertEquals(new OffsetRange(100, 100), res.getPrimary());\n+    assertEquals(new OffsetRange(100, 200), res.getResidual());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNDY5Mg==", "bodyText": "In this test case, the expected primary is [100, 100) and the expected residual is [100, 200)", "url": "https://github.com/apache/beam/pull/11418#discussion_r409824692", "createdAt": "2020-04-16T20:20:20Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -47,16 +48,9 @@ public void testTryClaim() throws Exception {\n   @Test\n   public void testCheckpointUnstarted() throws Exception {\n     OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    expected.expect(IllegalStateException.class);\n-    tracker.trySplit(0).getResidual();\n-  }\n-\n-  @Test\n-  public void testCheckpointOnlyFailedClaim() throws Exception {\n-    OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    assertFalse(tracker.tryClaim(250L));\n-    expected.expect(IllegalStateException.class);\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n+    SplitResult res = tracker.trySplit(0);\n+    assertEquals(new OffsetRange(100, 100), res.getPrimary());\n+    assertEquals(new OffsetRange(100, 200), res.getResidual());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjAyMQ=="}, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMjE0OA==", "bodyText": "Thanks, that was my mistake, I read both lines as being [100, 200)", "url": "https://github.com/apache/beam/pull/11418#discussion_r409832148", "createdAt": "2020-04-16T20:35:06Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -47,16 +48,9 @@ public void testTryClaim() throws Exception {\n   @Test\n   public void testCheckpointUnstarted() throws Exception {\n     OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    expected.expect(IllegalStateException.class);\n-    tracker.trySplit(0).getResidual();\n-  }\n-\n-  @Test\n-  public void testCheckpointOnlyFailedClaim() throws Exception {\n-    OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    assertFalse(tracker.tryClaim(250L));\n-    expected.expect(IllegalStateException.class);\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n+    SplitResult res = tracker.trySplit(0);\n+    assertEquals(new OffsetRange(100, 100), res.getPrimary());\n+    assertEquals(new OffsetRange(100, 200), res.getResidual());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjAyMQ=="}, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDM3MDA0OnYy", "diffSide": "RIGHT", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo0NjowOVrOGG0oKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoyNDoxN1rOGG11TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjg4OQ==", "bodyText": "takeCheckpointNow should work regardless whether numClaimedBlocks > 0 or not.\nEven if tryClaim never happens, the watermark may advance.", "url": "https://github.com/apache/beam/pull/11418#discussion_r409806889", "createdAt": "2020-04-16T19:46:09Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -210,9 +210,10 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n         // the call says that not the whole restriction has been processed. So we need to take\n         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly\n         // the work that was done in the current ProcessElement call, and returns a residual\n-        // restriction that describes exactly the work that wasn't done in the current call.\n+        // restriction that describes exactly the work that wasn't done in the current call. The\n+        // residual is null when the entire restriction has been processed.\n         if (processContext.numClaimedBlocks > 0) {\n-          residual = checkNotNull(processContext.takeCheckpointNow());\n+          residual = processContext.takeCheckpointNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNjYzNg==", "bodyText": "I guess the original assumption is, checkpoint should happen after at least one tryClaim called. Since we change the assumption, the numClaimedBlocks  can also be removed.", "url": "https://github.com/apache/beam/pull/11418#discussion_r409826636", "createdAt": "2020-04-16T20:24:17Z", "author": {"login": "boyuanzz"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -210,9 +210,10 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n         // the call says that not the whole restriction has been processed. So we need to take\n         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly\n         // the work that was done in the current ProcessElement call, and returns a residual\n-        // restriction that describes exactly the work that wasn't done in the current call.\n+        // restriction that describes exactly the work that wasn't done in the current call. The\n+        // residual is null when the entire restriction has been processed.\n         if (processContext.numClaimedBlocks > 0) {\n-          residual = checkNotNull(processContext.takeCheckpointNow());\n+          residual = processContext.takeCheckpointNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjg4OQ=="}, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDM3NjE0OnYy", "diffSide": "RIGHT", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo0ODowOVrOGG0sKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo0ODowOVrOGG0sKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNzkxNA==", "bodyText": "The comments below will likely need updating", "url": "https://github.com/apache/beam/pull/11418#discussion_r409807914", "createdAt": "2020-04-16T19:48:09Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -210,9 +210,10 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n         // the call says that not the whole restriction has been processed. So we need to take\n         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly\n         // the work that was done in the current ProcessElement call, and returns a residual\n-        // restriction that describes exactly the work that wasn't done in the current call.\n+        // restriction that describes exactly the work that wasn't done in the current call. The\n+        // residual is null when the entire restriction has been processed.\n         if (processContext.numClaimedBlocks > 0) {\n-          residual = checkNotNull(processContext.takeCheckpointNow());\n+          residual = processContext.takeCheckpointNow();\n           processContext.tracker.checkDone();\n         } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDQzOTgxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDowNzoyMlrOGG1TzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDowNzoyMlrOGG1TzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxODA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              }\n          \n          \n            \n                tracker.checkDone();\n          \n          \n            \n              }", "url": "https://github.com/apache/beam/pull/11418#discussion_r409818060", "createdAt": "2020-04-16T20:07:22Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -96,9 +90,24 @@ public void testCheckpointAfterFailedClaim() throws Exception {\n     assertTrue(tracker.tryClaim(110L));\n     assertTrue(tracker.tryClaim(160L));\n     assertFalse(tracker.tryClaim(240L));\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n-    assertEquals(new OffsetRange(100, 161), tracker.currentRestriction());\n-    assertEquals(new OffsetRange(161, 200), checkpoint);\n+    assertNull(tracker.trySplit(0));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDQ0OTQ3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoxMDowNlrOGG1Zsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1OTowMFrOGG27GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTU3MQ==", "bodyText": "Can we add tests to verify tryClaim(0), tryClaim(0.1), tryClaim(1) on an empty range like [100, 100)\nCan we also add tests to verify the behavior of tryClaim(1) on range [100, 200)", "url": "https://github.com/apache/beam/pull/11418#discussion_r409819571", "createdAt": "2020-04-16T20:10:06Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import org.apache.beam.sdk.io.range.OffsetRange;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNjU0NQ==", "bodyText": "trySplit right?", "url": "https://github.com/apache/beam/pull/11418#discussion_r409826545", "createdAt": "2020-04-16T20:24:05Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import org.apache.beam.sdk.io.range.OffsetRange;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTU3MQ=="}, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NDUwNQ==", "bodyText": "Yes. Your right. Need more sleep.", "url": "https://github.com/apache/beam/pull/11418#discussion_r409844505", "createdAt": "2020-04-16T20:59:00Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import org.apache.beam.sdk.io.range.OffsetRange;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTU3MQ=="}, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDQ1Mjg2OnYy", "diffSide": "RIGHT", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoxMTowOFrOGG1bxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoxMTowOFrOGG1bxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyMDEwMw==", "bodyText": "I believe the comment below could be incorrect. If we get stop(), we shouldn't have a residual restriction.", "url": "https://github.com/apache/beam/pull/11418#discussion_r409820103", "createdAt": "2020-04-16T20:11:08Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java", "diffHunk": "@@ -51,11 +51,6 @@ public Result(\n         @Nullable WatermarkEstimatorStateT futureWatermarkEstimatorState) {\n       checkArgument(continuation != null, \"continuation must not be null\");\n       this.continuation = continuation;\n-      if (continuation.shouldResume()) {\n-        checkArgument(\n-            residualRestriction != null,\n-            \"residual restriction must not be null if continuation indicate it should resume\");\n-      }\n       this.residualRestriction = residualRestriction;\n       this.futureOutputWatermark = futureOutputWatermark;\n       this.futureWatermarkEstimatorState = futureWatermarkEstimatorState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1271, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}