{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MzYzODM4", "number": 13405, "title": "[BEAM-10703, BEAM-10475] Add GroupIntoBatches to runner API; add Dataflow override in Python SDK", "bodyText": "This PR adds GroupIntoTransform.WithShardedKey to the runner api as a well-known composite transform and also adds the non-sharded version GroupIntoBatches as a component there of. This allows runners to recognize and choose the sharding approach for GroupIntoTransform.WithShardedKey.\nThis PR also adds a Dataflow override of GroupIntoTransform.WithShardedKey in Python for non-portable job submission, analogous to the Java implementation (#13208). For portable job submission, the changes will be done in the Dataflow service instead of in SDK.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-11-22T21:59:52Z", "url": "https://github.com/apache/beam/pull/13405", "merged": true, "mergeCommit": {"oid": "2c96aeb8d7dbd7d590f699afc4429cf0a4ea1744"}, "closed": true, "closedAt": "2020-12-09T03:35:58Z", "author": {"login": "nehsyc"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfJGhAgBqjQwMjUzNzQwNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkUDKiABqjQwODc0Mzk3MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af580b66dd2df4a7ac4b410ae86cf8220126045a", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/af580b66dd2df4a7ac4b410ae86cf8220126045a", "committedDate": "2020-11-22T21:56:39Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}, "afterCommit": {"oid": "0eeefba7ec5f6e1b6e3b86110673a70d4637e1f4", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/0eeefba7ec5f6e1b6e3b86110673a70d4637e1f4", "committedDate": "2020-11-22T23:24:47Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0eeefba7ec5f6e1b6e3b86110673a70d4637e1f4", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/0eeefba7ec5f6e1b6e3b86110673a70d4637e1f4", "committedDate": "2020-11-22T23:24:47Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}, "afterCommit": {"oid": "6ce8851952f05b0eed8cc686f86e8c111f0b3fda", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/6ce8851952f05b0eed8cc686f86e8c111f0b3fda", "committedDate": "2020-11-23T17:06:13Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ce8851952f05b0eed8cc686f86e8c111f0b3fda", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/6ce8851952f05b0eed8cc686f86e8c111f0b3fda", "committedDate": "2020-11-23T17:06:13Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}, "afterCommit": {"oid": "e1aafbf5c360738f5c042bba61855055ab92588b", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/e1aafbf5c360738f5c042bba61855055ab92588b", "committedDate": "2020-11-23T17:20:22Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzAzNjQz", "url": "https://github.com/apache/beam/pull/13405#pullrequestreview-543303643", "createdAt": "2020-12-02T22:51:09Z", "commit": {"oid": "e1aafbf5c360738f5c042bba61855055ab92588b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzowMDo0MVrOH9xutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDoyMTowNFrOH9ztPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUzOTk1OA==", "bodyText": "Are you going to take care of portable job submission as well? If fo, maybe we need a TODO here.", "url": "https://github.com/apache/beam/pull/13405#discussion_r534539958", "createdAt": "2020-12-02T23:00:41Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -1112,6 +1128,17 @@ def run_ParDo(self, transform_node, options):\n       if is_stateful_dofn:\n         step.add_property(PropertyNames.USES_KEYED_STATE, 'true')\n \n+        # Also checks whether the step allows shardable keyed states.\n+        for pcoll in transform_node.outputs.values():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1aafbf5c360738f5c042bba61855055ab92588b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3MjM1MA==", "bodyText": "I think we also want to check use_runner_v2 as well since it's only supported in runner v2", "url": "https://github.com/apache/beam/pull/13405#discussion_r534572350", "createdAt": "2020-12-03T00:21:04Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/dataflow/ptransform_overrides.py", "diffHunk": "@@ -329,3 +330,44 @@ def expand(self, pcoll):\n         return {key: out for key in self.outputs}\n \n     return WriteToBigQuery(ptransform, self.outputs)\n+\n+\n+class GroupIntoBatchesWithShardedKeyPTransformOverride(PTransformOverride):\n+  \"\"\"A ``PTransformOverride`` for ``GroupIntoBatches.WithShardedKey``.\n+\n+  This override simply returns the original transform but additionally records\n+  the output PCollection in order to append required step properties during\n+  graph translation.\n+  \"\"\"\n+  def __init__(self, dataflow_runner, options):\n+    self.dataflow_runner = dataflow_runner\n+    self.options = options\n+\n+  def matches(self, applied_ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import util\n+\n+    transform = applied_ptransform.transform\n+\n+    if not isinstance(transform, util.GroupIntoBatches.WithShardedKey):\n+      return False\n+\n+    # The replacement is only valid for portable Streaming Engine jobs.\n+    standard_options = self.options.view_as(StandardOptions)\n+    if not standard_options.streaming:\n+      return False\n+    google_cloud_options = self.options.view_as(GoogleCloudOptions)\n+    if not google_cloud_options.enable_streaming_engine:\n+      return False\n+    experiments = self.options.view_as(DebugOptions).experiments or []\n+    if 'beam_fn_api' not in experiments:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1aafbf5c360738f5c042bba61855055ab92588b"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTg4MzQ2", "url": "https://github.com/apache/beam/pull/13405#pullrequestreview-546588346", "createdAt": "2020-12-07T22:22:50Z", "commit": {"oid": "c1541796435cbd2ee775b6c89ec628f8564a3bcd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyMjo1MFrOIA9eZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo0OTo0NFrOIA-YOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3ODExOA==", "bodyText": "We can get ride of GroupIntoBatchesParams by creating GroupIntoBatchesPayload  directly here and accessing the payload directly below.", "url": "https://github.com/apache/beam/pull/13405#discussion_r537878118", "createdAt": "2020-12-07T22:22:50Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -825,7 +827,60 @@ def expand(self, pcoll):\n               key_value[1]))\n       return (\n           sharded_pcoll\n-          | GroupIntoBatches(self.batch_size, self.max_buffering_duration_secs))\n+          | GroupIntoBatches(\n+              self.params.batch_size, self.params.max_buffering_duration_secs))\n+\n+    def to_runner_api_parameter(\n+        self,\n+        unused_context  # type: PipelineContext\n+    ):  # type: (...) -> Tuple[str, beam_runner_api_pb2.GroupIntoBatchesPayload]\n+      return (\n+          common_urns.composites.GROUP_INTO_BATCHES_WITH_SHARDED_KEY.urn,\n+          self.params.get_payload())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1541796435cbd2ee775b6c89ec628f8564a3bcd"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NTUxNw==", "bodyText": "It seems like max_buffering_duration_millis is None and max_buffering_duration_millis  == 0 means the same. right? You may want to add a comment about  what will happen if max_buffering_duration_millis is not specified or max_buffering_duration_millis is set to 0. Someone might think max_buffering_duration_millis = 0 or max_buffering_duration_millis is None will make the transform output elements as soon as possible.", "url": "https://github.com/apache/beam/pull/13405#discussion_r537885517", "createdAt": "2020-12-07T22:35:54Z", "author": {"login": "boyuanzz"}, "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -706,6 +714,16 @@ message PubSubWritePayload {\n   string id_attribute = 3;\n }\n \n+// Payload for GroupIntoBatches composite transform.\n+message GroupIntoBatchesPayload {\n+\n+  // (Required) Max size of a batch.\n+  int64 batch_size = 1;\n+\n+  // (Optional) Max duration a batch is allowed to be cached in states.\n+  int64 max_buffering_duration_millis = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1541796435cbd2ee775b6c89ec628f8564a3bcd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4OTYxNQ==", "bodyText": "Could you please add some explanations on what ALLOWS_SHARDABLE_STATE  and PRESERVES_KEYS mean?", "url": "https://github.com/apache/beam/pull/13405#discussion_r537889615", "createdAt": "2020-12-07T22:43:08Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/names.py", "diffHunk": "@@ -69,6 +69,7 @@ class PropertyNames(object):\n \n   Property strings as they are expected in the CloudWorkflow protos.\n   \"\"\"\n+  ALLOWS_SHARDABLE_STATE = 'allows_shardable_state'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1541796435cbd2ee775b6c89ec628f8564a3bcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5MjkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # The replacement is only valid for portable Streaming Engine jobs.\n          \n          \n            \n                # The replacement is only valid for portable Streaming Engine jobs with runner_v2.", "url": "https://github.com/apache/beam/pull/13405#discussion_r537892923", "createdAt": "2020-12-07T22:49:44Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/dataflow/ptransform_overrides.py", "diffHunk": "@@ -329,3 +330,46 @@ def expand(self, pcoll):\n         return {key: out for key in self.outputs}\n \n     return WriteToBigQuery(ptransform, self.outputs)\n+\n+\n+class GroupIntoBatchesWithShardedKeyPTransformOverride(PTransformOverride):\n+  \"\"\"A ``PTransformOverride`` for ``GroupIntoBatches.WithShardedKey``.\n+\n+  This override simply returns the original transform but additionally records\n+  the output PCollection in order to append required step properties during\n+  graph translation.\n+  \"\"\"\n+  def __init__(self, dataflow_runner, options):\n+    self.dataflow_runner = dataflow_runner\n+    self.options = options\n+\n+  def matches(self, applied_ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import util\n+\n+    transform = applied_ptransform.transform\n+\n+    if not isinstance(transform, util.GroupIntoBatches.WithShardedKey):\n+      return False\n+\n+    # The replacement is only valid for portable Streaming Engine jobs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1541796435cbd2ee775b6c89ec628f8564a3bcd"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "039f8e070080704e19b001a793f6330edbe185aa", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/039f8e070080704e19b001a793f6330edbe185aa", "committedDate": "2020-12-08T04:27:29Z", "message": "Updated comments"}, "afterCommit": {"oid": "c764e7bca1ab6d30df56ee7162bfa84f317eb064", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/c764e7bca1ab6d30df56ee7162bfa84f317eb064", "committedDate": "2020-12-08T04:36:21Z", "message": "Updated comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzUwNzE3", "url": "https://github.com/apache/beam/pull/13405#pullrequestreview-547750717", "createdAt": "2020-12-09T00:44:53Z", "commit": {"oid": "c764e7bca1ab6d30df56ee7162bfa84f317eb064"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo0NDo1M1rOIB88Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo0NDo1M1rOIB88Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxNzkxMA==", "bodyText": "Please add some pydoc to describe this class. Other than this, this PR is ready to go.", "url": "https://github.com/apache/beam/pull/13405#discussion_r538917910", "createdAt": "2020-12-09T00:44:53Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -825,7 +827,60 @@ def expand(self, pcoll):\n               key_value[1]))\n       return (\n           sharded_pcoll\n-          | GroupIntoBatches(self.batch_size, self.max_buffering_duration_secs))\n+          | GroupIntoBatches(\n+              self.params.batch_size, self.params.max_buffering_duration_secs))\n+\n+    def to_runner_api_parameter(\n+        self,\n+        unused_context  # type: PipelineContext\n+    ):  # type: (...) -> Tuple[str, beam_runner_api_pb2.GroupIntoBatchesPayload]\n+      return (\n+          common_urns.composites.GROUP_INTO_BATCHES_WITH_SHARDED_KEY.urn,\n+          self.params.get_payload())\n+\n+    @staticmethod\n+    @PTransform.register_urn(\n+        common_urns.composites.GROUP_INTO_BATCHES_WITH_SHARDED_KEY.urn,\n+        beam_runner_api_pb2.GroupIntoBatchesPayload)\n+    def from_runner_api_parameter(unused_ptransform, proto, unused_context):\n+      return GroupIntoBatches.WithShardedKey(\n+          *GroupIntoBatchesParams.parse_payload(proto))\n+\n+\n+class GroupIntoBatchesParams:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c764e7bca1ab6d30df56ee7162bfa84f317eb064"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05c8471b27e03e5611a2a13137c4a785f2d17fc9", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/05c8471b27e03e5611a2a13137c4a785f2d17fc9", "committedDate": "2020-12-09T00:59:46Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c764e7bca1ab6d30df56ee7162bfa84f317eb064", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/c764e7bca1ab6d30df56ee7162bfa84f317eb064", "committedDate": "2020-12-08T04:36:21Z", "message": "Updated comments"}, "afterCommit": {"oid": "05c8471b27e03e5611a2a13137c4a785f2d17fc9", "author": {"user": {"login": "nehsyc", "name": "Siyuan Chen"}}, "url": "https://github.com/apache/beam/commit/05c8471b27e03e5611a2a13137c4a785f2d17fc9", "committedDate": "2020-12-09T00:59:46Z", "message": "Add GroupIntoBatches to runner API; add Dataflow override in Python SDK"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4523, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}