{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODMyNDM0", "number": 12881, "title": "[BEAM-7746] Get mypy passing on runners.worker", "bodyText": "Ok, I'm back on the horse, but who knows for how long.\nI reviewed the last PR that stalled out and the recommendation there was to focus on a single module or package.   Let me know if the scope is too large on this one.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n[x ] Choose reviewer(s) and mention them in a comment (R: @username).\n[ x] Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n[x ] Update CHANGES.md with noteworthy changes.\n[ x] If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-19T23:00:14Z", "url": "https://github.com/apache/beam/pull/12881", "merged": true, "mergeCommit": {"oid": "8a1406d075fac86167f6ab52edd380d1b4ef976c"}, "closed": true, "closedAt": "2020-10-05T21:35:38Z", "author": {"login": "chadrik"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKiahQgFqTQ5MjE2MDY2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPpKZnABqjM4NDIxMzg2ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYwNjY2", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492160666", "createdAt": "2020-09-19T23:02:13Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowMjoxM1rOHU0TKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowMjoxM1rOHU0TKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5MDQ0MQ==", "bodyText": "This needed to be renamed because the variable was reused below for a different type", "url": "https://github.com/apache/beam/pull/12881#discussion_r491590441", "createdAt": "2020-09-19T23:02:13Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -920,7 +928,7 @@ def reset(self):\n   def process_bundle(self, instruction_id):\n     # type: (str) -> Tuple[List[beam_fn_api_pb2.DelayedBundleApplication], bool]\n \n-    expected_inputs = []\n+    expected_input_ops = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYwNzk0", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492160794", "createdAt": "2020-09-19T23:05:50Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowNTo1MFrOHU0Z6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowNTo1MFrOHU0Z6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5MjE3MA==", "bodyText": "It's more accurate to say Any here, since the method doesn't care.  The argument can't be Optional or the method it would be incompatible with its super type.\nI checked all uses of input_elements and I did not see any case where it was called with only one arg.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491592170", "createdAt": "2020-09-19T23:05:50Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane.py", "diffHunk": "@@ -303,9 +334,10 @@ def inverse(self):\n \n   def input_elements(self,\n       instruction_id,  # type: str\n-      unused_expected_inputs=None,   # type: Collection[str]\n+      unused_expected_inputs,   # type: Any", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYwODY1", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492160865", "createdAt": "2020-09-19T23:08:35Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowODozNVrOHU0e8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowODozNVrOHU0e8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5MzQ1Ng==", "bodyText": "This shouldn't change the behavior of the code, it merely indicates to the type system that we expect BoundedSource, since SourceBase is not sufficient here (we need default_output_coder())", "url": "https://github.com/apache/beam/pull/12881#discussion_r491593456", "createdAt": "2020-09-19T23:08:35Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1344,7 +1356,8 @@ def create_deprecated_read(\n     consumers  # type: Dict[str, List[operations.Operation]]\n ):\n   # type: (...) -> operations.ReadOperation\n-  source = iobase.SourceBase.from_runner_api(parameter.source, factory.context)\n+  source = iobase.BoundedSource.from_runner_api(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 268}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYwODkw", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492160890", "createdAt": "2020-09-19T23:09:20Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowOToyMFrOHU0gaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzowOToyMFrOHU0gaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5MzgzNQ==", "bodyText": "this was just wrong. there is no common.SplitResultType", "url": "https://github.com/apache/beam/pull/12881#discussion_r491593835", "createdAt": "2020-09-19T23:09:20Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1125,15 +1134,15 @@ def shutdown(self):\n class ExecutionContext(object):\n   def __init__(self):\n     self.delayed_applications = [\n-    ]  # type: List[Tuple[operations.DoOperation, common.SplitResultType]]\n+    ]  # type: List[Tuple[operations.DoOperation, common.SplitResultResidual]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYwOTg1", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492160985", "createdAt": "2020-09-19T23:11:59Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxMTo1OVrOHU0lUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxMTo1OVrOHU0lUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5NTA5MQ==", "bodyText": "userstate.RuntimeState does not have the necessary commit() method, and there is no common base class for these 4 types that has all of the necessary methods.  When dealing with a reasonably limited number of possibilities with unclear parentage, a Union is a good solution.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491595091", "createdAt": "2020-09-19T23:11:59Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -705,10 +713,11 @@ def __init__(self,\n     self._key_coder = key_coder\n     self._window_coder = window_coder\n     # A mapping of {timer_family_id: TimerInfo}\n-    self._timers_info = {}\n-    self._all_states = {}  # type: Dict[tuple, userstate.RuntimeState]\n+    self._timers_info = {}  # type: Dict[str, TimerInfo]\n+    self._all_states = {}  # type: Dict[tuple, FnApiUserRuntimeStateTypes]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxMDAw", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161000", "createdAt": "2020-09-19T23:12:28Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxMjoyOFrOHU0mDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxMjoyOFrOHU0mDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5NTI3Nw==", "bodyText": "as far as I can tell, this was just wrong", "url": "https://github.com/apache/beam/pull/12881#discussion_r491595277", "createdAt": "2020-09-19T23:12:28Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -725,7 +726,7 @@ def __init__(self, key_coder_impl, window_coder_impl):\n     self._tag_coder_impl = StrUtf8Coder().get_impl()\n \n   def encode_to_stream(self, value, out, nested):\n-    # type: (dict, create_OutputStream, bool) -> None\n+    # type: (userstate.Timer, create_OutputStream, bool) -> None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxMDk0", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161094", "createdAt": "2020-09-19T23:15:17Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxNToxN1rOHU0rrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxNToxN1rOHU0rrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5NjcxNg==", "bodyText": "Instead of passing around a DoOperation I switched this to a OpInputInfo because the latter is all that we need, and doing so lets us avoid having to assert that it is not None everywhere that it's used.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491596716", "createdAt": "2020-09-19T23:15:17Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1070,23 +1078,24 @@ def delayed_bundle_application(self,\n     return beam_fn_api_pb2.DelayedBundleApplication(\n         requested_time_delay=proto_deferred_watermark,\n         application=self.construct_bundle_application(\n-            op, current_watermark, element_and_restriction))\n+            op.input_info, current_watermark, element_and_restriction))\n \n   def bundle_application(self,\n                          op,  # type: operations.DoOperation\n                          primary  # type: SplitResultPrimary\n                         ):\n     # type: (...) -> beam_fn_api_pb2.BundleApplication\n-    return self.construct_bundle_application(op, None, primary.primary_value)\n+    assert op.input_info is not None\n+    return self.construct_bundle_application(\n+        op.input_info, None, primary.primary_value)\n \n   def construct_bundle_application(self,\n-                                   op,  # type: operations.DoOperation\n+                                   op_input_info,  # type: operations.OpInputInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 195}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxMTQ5", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161149", "createdAt": "2020-09-19T23:17:01Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxNzowMlrOHU0uwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxNzowMlrOHU0uwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5NzUwNA==", "bodyText": "This change indicates that we should return an instance of the class that this is called from, though it provides no runtime guarantees of this.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491597504", "createdAt": "2020-09-19T23:17:02Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/utils/urns.py", "diffHunk": "@@ -177,7 +178,7 @@ def to_runner_api(self, context):\n \n   @classmethod\n   def from_runner_api(cls, fn_proto, context):\n-    # type: (beam_runner_api_pb2.FunctionSpec, PipelineContext) -> Any\n+    # type: (Type[RunnerApiFnT], beam_runner_api_pb2.FunctionSpec, PipelineContext) -> RunnerApiFnT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxMTY5", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161169", "createdAt": "2020-09-19T23:17:34Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxNzozNFrOHU0vxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxNzozNFrOHU0vxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5Nzc2Nw==", "bodyText": "Now you can see mypy color output from tox!  Let me know if you want me to do this in another PR.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491597767", "createdAt": "2020-09-19T23:17:34Z", "author": {"login": "chadrik"}, "path": "sdks/python/tox.ini", "diffHunk": "@@ -27,6 +27,8 @@ select = E3\n \n # Shared environment options.\n [testenv]\n+# allow apps that support color to use it.\n+passenv=TERM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxMjM4", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161238", "createdAt": "2020-09-19T23:19:08Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxOTowOFrOHU0yoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoxOTowOFrOHU0yoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5ODQ5Nw==", "bodyText": "This can in fact contain items which are Tuple[str, str].  see:\n        data_channels[self.timer_data_channel].extend(\n            list(self.timers_info.keys()))", "url": "https://github.com/apache/beam/pull/12881#discussion_r491598497", "createdAt": "2020-09-19T23:19:08Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -947,11 +955,11 @@ def process_bundle(self, instruction_id):\n       # (transform_id, timer_family_id).\n       data_channels = collections.defaultdict(\n           list\n-      )  # type: DefaultDict[data_plane.GrpcClientDataChannel, List[str]]\n+      )  # type: DefaultDict[data_plane.GrpcClientDataChannel, List[Union[str, Tuple[str, str]]]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxMjkw", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161290", "createdAt": "2020-09-19T23:20:48Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyMDo0OFrOHU018Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyMDo0OFrOHU018Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5OTM0NQ==", "bodyText": "we just call len(expected_inputs), so we just need to know this implements __len__", "url": "https://github.com/apache/beam/pull/12881#discussion_r491599345", "createdAt": "2020-09-19T23:20:48Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane.py", "diffHunk": "@@ -218,7 +249,7 @@ class DataChannel(with_metaclass(abc.ABCMeta, object)):  # type: ignore[misc]\n   @abc.abstractmethod\n   def input_elements(self,\n                      instruction_id,  # type: str\n-                     expected_inputs,  # type: Collection[str]\n+                     expected_inputs,  # type: Sized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxMzQy", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161342", "createdAt": "2020-09-19T23:22:11Z", "commit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyMjoxMVrOHU04iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyMjoxMVrOHU04iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYwMDAxMQ==", "bodyText": "ClosableOutputStream seems to not actually be used anywhere any more, because ClosableOutputStream.create() returns SizeBasedBufferingClosableOutputStream.  ClosableOutputStream does not implement the necessary maybe_flush method that's required everywhere we were referring to ClosableOutputStream", "url": "https://github.com/apache/beam/pull/12881#discussion_r491600011", "createdAt": "2020-09-19T23:22:11Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/data_plane.py", "diffHunk": "@@ -243,7 +274,7 @@ def output_stream(\n       instruction_id,  # type: str\n       transform_id  # type: str\n   ):\n-    # type: (...) -> ClosableOutputStream\n+    # type: (...) -> SizeBasedBufferingClosableOutputStream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 175}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/5b393dbaefaea775bba8f998a679d79bb683777c", "committedDate": "2020-09-19T22:54:28Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}, "afterCommit": {"oid": "d91e77690d15df749255d5801e72c71d206ede1d", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/d91e77690d15df749255d5801e72c71d206ede1d", "committedDate": "2020-09-19T23:25:41Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxNTYx", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492161561", "createdAt": "2020-09-19T23:28:13Z", "commit": {"oid": "d91e77690d15df749255d5801e72c71d206ede1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyODoxM1rOHU1EGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyODoxM1rOHU1EGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYwMjk2OA==", "bodyText": "see this stackoverflow post for an explanation of why I chose this design for a type-safe sentinel.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491602968", "createdAt": "2020-09-19T23:28:13Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/utils/sentinel.py", "diffHunk": "@@ -0,0 +1,30 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import enum\n+\n+\n+class Sentinel(enum.Enum):\n+  \"\"\"\n+  A type-safe sentinel class\n+  \"\"\"\n+\n+  sentinel = object()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91e77690d15df749255d5801e72c71d206ede1d"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91e77690d15df749255d5801e72c71d206ede1d", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/d91e77690d15df749255d5801e72c71d206ede1d", "committedDate": "2020-09-19T23:25:41Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}, "afterCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/b3897827e7d1241f9e2006dc83d7ff905fac66a4", "committedDate": "2020-09-20T18:55:56Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjE1NTM0", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492215534", "createdAt": "2020-09-20T19:02:09Z", "commit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOTowMjoxMFrOHU8YBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOTowMjoxMFrOHU8YBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyMjc1Nw==", "bodyText": "Removed this annotation because it's invalid:   you can't add annotations to an attribute of another class (non-self attribute).  I've noticed there's definitely a need for a typed version of threading.local.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491722757", "createdAt": "2020-09-20T19:02:10Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/statecache.py", "diffHunk": "@@ -44,15 +48,17 @@ class Metrics(object):\n   PREFIX = \"beam:metric:statecache:\"\n \n   def __init__(self):\n+    # type: () -> None\n     self._context = threading.local()\n \n   def initialize(self):\n+    # type: () -> None\n+\n     \"\"\"Needs to be called once per thread to initialize the local metrics cache.\n     \"\"\"\n     if hasattr(self._context, 'metrics'):\n       return  # Already initialized\n-    self._context.metrics = collections.defaultdict(\n-        int)  # type: DefaultDict[Hashable, int]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjE1Njc3", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492215677", "createdAt": "2020-09-20T19:04:24Z", "commit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOTowNDoyNFrOHU8YuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOTowNDoyNFrOHU8YuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyMjkzNg==", "bodyText": "we have to cast here because log_entries was initialized as a List[Union[..., Sentinel]], and just above this line we checked for the sentinel and popped it out, but mypy can't track that.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491722936", "createdAt": "2020-09-20T19:04:24Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/log_handler.py", "diffHunk": "@@ -156,9 +174,11 @@ def _write_log_entries(self):\n         done = True\n         log_entries.pop()\n       if log_entries:\n-        yield beam_fn_api_pb2.LogEntry.List(log_entries=log_entries)\n+        yield beam_fn_api_pb2.LogEntry.List(\n+            log_entries=cast(List[beam_fn_api_pb2.LogEntry], log_entries))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjE1OTM4", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492215938", "createdAt": "2020-09-20T19:08:51Z", "commit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOTowODo1MVrOHU8aUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOTowODo1MVrOHU8aUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyMzM0Ng==", "bodyText": "Making this a NamedTuple added a bit of sanity, and should be completely safe.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491723346", "createdAt": "2020-09-20T19:08:51Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1619,7 +1633,7 @@ def _create_pardo_operation(\n       consumers,\n       output_tags)\n   if pardo_proto and pardo_proto.restriction_coder_id:\n-    result.input_info = (\n+    result.input_info = operations.OpInputInfo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 309}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjIzODU3", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492223857", "createdAt": "2020-09-20T21:18:24Z", "commit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMToxODoyNFrOHU9Kaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMToxODoyNFrOHU9Kaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNTY1OQ==", "bodyText": "changing this to a function lets us add annotations which silences a mypy error.  mypy can now detect the key/value types of KeyedDefaultDict", "url": "https://github.com/apache/beam/pull/12881#discussion_r491735659", "createdAt": "2020-09-20T21:18:24Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -174,11 +191,14 @@ def __init__(self,\n     self._state_handler_factory = GrpcStateHandlerFactory(\n         self._state_cache, credentials)\n     self._profiler_factory = profiler_factory\n-    self._fns = KeyedDefaultDict(\n-        lambda id: self._control_stub.GetProcessBundleDescriptor(\n-            beam_fn_api_pb2.GetProcessBundleDescriptorRequest(\n-                process_bundle_descriptor_id=id))\n-    )  # type: Mapping[str, beam_fn_api_pb2.ProcessBundleDescriptor]\n+\n+    def default_factory(id):\n+      # type: (str) -> beam_fn_api_pb2.ProcessBundleDescriptor\n+      return self._control_stub.GetProcessBundleDescriptor(\n+          beam_fn_api_pb2.GetProcessBundleDescriptorRequest(\n+              process_bundle_descriptor_id=id))\n+\n+    self._fns = KeyedDefaultDict(default_factory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjIzOTI2", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-492223926", "createdAt": "2020-09-20T21:19:23Z", "commit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMToxOToyM1rOHU9Kwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMToxOToyM1rOHU9Kwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNTc0Ng==", "bodyText": "this attribute eventually gets set to the value of time.time() which is a float.", "url": "https://github.com/apache/beam/pull/12881#discussion_r491735746", "createdAt": "2020-09-20T21:19:23Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -464,16 +496,17 @@ class SdkWorker(object):\n \n   def __init__(self,\n                bundle_processor_cache,  # type: BundleProcessorCache\n-               state_cache_metrics_fn=list,\n+               state_cache_metrics_fn=list,  # type: Callable[[], Iterable[metrics_pb2.MonitoringInfo]]\n                profiler_factory=None,  # type: Optional[Callable[..., Profile]]\n-               log_lull_timeout_ns=None,\n+               log_lull_timeout_ns=None,  # type: Optional[int]\n               ):\n+    # type: (...) -> None\n     self.bundle_processor_cache = bundle_processor_cache\n     self.state_cache_metrics_fn = state_cache_metrics_fn\n     self.profiler_factory = profiler_factory\n     self.log_lull_timeout_ns = (\n         log_lull_timeout_ns or DEFAULT_LOG_LULL_TIMEOUT_NS)\n-    self._last_full_thread_dump_secs = 0\n+    self._last_full_thread_dump_secs = 0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTE4ODk5", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-493118899", "createdAt": "2020-09-22T04:22:46Z", "commit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDoyMjo0N1rOHVpygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDozNjozNFrOHVp9oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2NjgxOQ==", "bodyText": "I think it used to be correct back when timers were being implemented. This code changed a couple of months ago too.", "url": "https://github.com/apache/beam/pull/12881#discussion_r492466819", "createdAt": "2020-09-22T04:22:47Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -725,7 +726,7 @@ def __init__(self, key_coder_impl, window_coder_impl):\n     self._tag_coder_impl = StrUtf8Coder().get_impl()\n \n   def encode_to_stream(self, value, out, nested):\n-    # type: (dict, create_OutputStream, bool) -> None\n+    # type: (userstate.Timer, create_OutputStream, bool) -> None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5NTI3Nw=="}, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2Njk0OA==", "bodyText": "Is this not str or Optional[str]?", "url": "https://github.com/apache/beam/pull/12881#discussion_r492466948", "createdAt": "2020-09-22T04:23:30Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -119,10 +125,10 @@ class RunnerIOOperation(operations.Operation):\n \n   def __init__(self,\n                name_context,  # type: Union[str, common.NameContext]\n-               step_name,\n+               step_name,  # type: Any", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2NzE4Ng==", "bodyText": "We're also thinking about adding a time-based one.\nLet's add a no-op maybe_flush method to the baseclass and keep ClosableOutputStream everywhere.", "url": "https://github.com/apache/beam/pull/12881#discussion_r492467186", "createdAt": "2020-09-22T04:24:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/data_plane.py", "diffHunk": "@@ -243,7 +274,7 @@ def output_stream(\n       instruction_id,  # type: str\n       transform_id  # type: str\n   ):\n-    # type: (...) -> ClosableOutputStream\n+    # type: (...) -> SizeBasedBufferingClosableOutputStream", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYwMDAxMQ=="}, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2NzY2Mg==", "bodyText": "Yep, this changed a couple of months ago. It'll be good to finally have these type annotations checked.", "url": "https://github.com/apache/beam/pull/12881#discussion_r492467662", "createdAt": "2020-09-22T04:26:49Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -947,11 +955,11 @@ def process_bundle(self, instruction_id):\n       # (transform_id, timer_family_id).\n       data_channels = collections.defaultdict(\n           list\n-      )  # type: DefaultDict[data_plane.GrpcClientDataChannel, List[str]]\n+      )  # type: DefaultDict[data_plane.GrpcClientDataChannel, List[Union[str, Tuple[str, str]]]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5ODQ5Nw=="}, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2Nzc5Ng==", "bodyText": "Sounds good to me.", "url": "https://github.com/apache/beam/pull/12881#discussion_r492467796", "createdAt": "2020-09-22T04:27:34Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -1070,23 +1078,24 @@ def delayed_bundle_application(self,\n     return beam_fn_api_pb2.DelayedBundleApplication(\n         requested_time_delay=proto_deferred_watermark,\n         application=self.construct_bundle_application(\n-            op, current_watermark, element_and_restriction))\n+            op.input_info, current_watermark, element_and_restriction))\n \n   def bundle_application(self,\n                          op,  # type: operations.DoOperation\n                          primary  # type: SplitResultPrimary\n                         ):\n     # type: (...) -> beam_fn_api_pb2.BundleApplication\n-    return self.construct_bundle_application(op, None, primary.primary_value)\n+    assert op.input_info is not None\n+    return self.construct_bundle_application(\n+        op.input_info, None, primary.primary_value)\n \n   def construct_bundle_application(self,\n-                                   op,  # type: operations.DoOperation\n+                                   op_input_info,  # type: operations.OpInputInfo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5NjcxNg=="}, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2ODUxMw==", "bodyText": "Why the double Optional (here and elsewhere below)?", "url": "https://github.com/apache/beam/pull/12881#discussion_r492468513", "createdAt": "2020-09-22T04:31:01Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/data_plane.py", "diffHunk": "@@ -81,7 +85,11 @@\n \n class ClosableOutputStream(OutputStream):\n   \"\"\"A Outputstream for use with CoderImpls that has a close() method.\"\"\"\n-  def __init__(self, close_callback=None):\n+  def __init__(\n+      self,\n+      close_callback=None  # type: Optional[Optional[Callable[[bytes], None]]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2OTM0OA==", "bodyText": "Don't we call __contains__ as well? I'd rather keep it more fully typed.", "url": "https://github.com/apache/beam/pull/12881#discussion_r492469348", "createdAt": "2020-09-22T04:35:05Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/data_plane.py", "diffHunk": "@@ -218,7 +249,7 @@ class DataChannel(with_metaclass(abc.ABCMeta, object)):  # type: ignore[misc]\n   @abc.abstractmethod\n   def input_elements(self,\n                      instruction_id,  # type: str\n-                     expected_inputs,  # type: Collection[str]\n+                     expected_inputs,  # type: Sized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU5OTM0NQ=="}, "originalCommit": {"oid": "5b393dbaefaea775bba8f998a679d79bb683777c"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2OTY2NA==", "bodyText": "I wonder if we should call this encoded_timer[s]?", "url": "https://github.com/apache/beam/pull/12881#discussion_r492469664", "createdAt": "2020-09-22T04:36:34Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/data_plane.py", "diffHunk": "@@ -331,6 +369,7 @@ def add_to_inverse_output(timer):\n                 is_last=False))\n \n     def close_stream(timer):\n+      # type: (bytes) -> None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4"}, "originalPosition": 229}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3897827e7d1241f9e2006dc83d7ff905fac66a4", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/b3897827e7d1241f9e2006dc83d7ff905fac66a4", "committedDate": "2020-09-20T18:55:56Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}, "afterCommit": {"oid": "f252b9cbf5259f15665b260702d4ee7d61006937", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/f252b9cbf5259f15665b260702d4ee7d61006937", "committedDate": "2020-09-22T06:32:05Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f07f8612fddeb4982cd265b137e8d35c6796f6d", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/7f07f8612fddeb4982cd265b137e8d35c6796f6d", "committedDate": "2020-09-25T00:39:29Z", "message": "fixes and notes"}, "afterCommit": {"oid": "e1483c9c74198b6503ee282bcd27b595b4579f35", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/e1483c9c74198b6503ee282bcd27b595b4579f35", "committedDate": "2020-09-25T00:41:08Z", "message": "fixes and notes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDQyMTUz", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-496042153", "createdAt": "2020-09-25T00:50:44Z", "commit": {"oid": "e1483c9c74198b6503ee282bcd27b595b4579f35"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDo1MDo0NFrOHXxU1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDo1MDo0NFrOHXxU1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NzQ0Nw==", "bodyText": "Note this change and the FIXME.  I'm not sure what to do about this.\nI got complaints that InstructionResponse(process_bundle_progress=...) was receiving the wrong type.  I'm not sure whether this is the right resolution.\nAlso, ProcessBundleProgressMetadataResponse(monitoring_info=...)is also receiving the wrong type.  It's supposed to be a mapping not a list.  Should I change SHORT_ID_CACHE.getInfos to return a dictionary?\nDo you know if this code is being hit?  If so, any theories on how it's working?", "url": "https://github.com/apache/beam/pull/12881#discussion_r494687447", "createdAt": "2020-09-25T00:50:44Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -622,10 +659,12 @@ def process_bundle_progress_metadata_request(self,\n                                                request,  # type: beam_fn_api_pb2.ProcessBundleProgressMetadataRequest\n                                                instruction_id  # type: str\n                                               ):\n+    # type: (...) -> beam_fn_api_pb2.InstructionResponse\n     return beam_fn_api_pb2.InstructionResponse(\n         instruction_id=instruction_id,\n-        process_bundle_progress=beam_fn_api_pb2.\n+        process_bundle_progress_metadata=beam_fn_api_pb2.\n         ProcessBundleProgressMetadataResponse(\n+            # FIXME: incompatible type \"List[MonitoringInfo]\"; expected \"Optional[Mapping[str, Any]]\"\n             monitoring_info=SHORT_ID_CACHE.getInfos(\n                 request.monitoring_info_id)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1483c9c74198b6503ee282bcd27b595b4579f35"}, "originalPosition": 246}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDQzNzc4", "url": "https://github.com/apache/beam/pull/12881#pullrequestreview-496043778", "createdAt": "2020-09-25T00:56:23Z", "commit": {"oid": "e1483c9c74198b6503ee282bcd27b595b4579f35"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDo1NjoyM1rOHXxaOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDo1NjoyM1rOHXxaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4ODgyNw==", "bodyText": "BundleProcessor.ops is OrderedDict[str, operations.Operation].  Should it be OrderedDict[str, operations.DoOperation]?  Or do the transform ids in BundleProcessor.timers_info all point to DoOperations?", "url": "https://github.com/apache/beam/pull/12881#discussion_r494688827", "createdAt": "2020-09-25T00:56:23Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -966,6 +976,7 @@ def process_bundle(self, instruction_id):\n         output_stream = self.timer_data_channel.output_timer_stream(\n             instruction_id, transform_id, timer_family_id)\n         timer_info.output_stream = output_stream\n+        # FIXME: how do we know that self.ops[transform_id] is a DoOperation?\n         self.ops[transform_id].add_timer_info(timer_family_id, timer_info)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1483c9c74198b6503ee282bcd27b595b4579f35"}, "originalPosition": 172}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1483c9c74198b6503ee282bcd27b595b4579f35", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/e1483c9c74198b6503ee282bcd27b595b4579f35", "committedDate": "2020-09-25T00:41:08Z", "message": "fixes and notes"}, "afterCommit": {"oid": "64a14e8ccf171d6a961fed1467f96140d2fb71dd", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/64a14e8ccf171d6a961fed1467f96140d2fb71dd", "committedDate": "2020-10-02T03:01:13Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64a14e8ccf171d6a961fed1467f96140d2fb71dd", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/64a14e8ccf171d6a961fed1467f96140d2fb71dd", "committedDate": "2020-10-02T03:01:13Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}, "afterCommit": {"oid": "f6dd36bcd52f85e67579738017e5e43ba8fe4900", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/f6dd36bcd52f85e67579738017e5e43ba8fe4900", "committedDate": "2020-10-02T16:14:47Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6dd36bcd52f85e67579738017e5e43ba8fe4900", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/f6dd36bcd52f85e67579738017e5e43ba8fe4900", "committedDate": "2020-10-02T16:14:47Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}, "afterCommit": {"oid": "e3965888db6221998748e50f792815034eeefa07", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/e3965888db6221998748e50f792815034eeefa07", "committedDate": "2020-10-02T21:26:29Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7812f92465dd23d286aae3b34471564f7191763c", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/7812f92465dd23d286aae3b34471564f7191763c", "committedDate": "2020-10-05T19:36:32Z", "message": "tox: allow apps that support color to use it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c7c6805cb13653d04addfabf9167aba487f87a", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/c0c7c6805cb13653d04addfabf9167aba487f87a", "committedDate": "2020-10-05T19:36:32Z", "message": "[BEAM-7746] Fix typing in beam.utils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7385641e0b8b932dbe7ed8730a342b171657fb4c", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/7385641e0b8b932dbe7ed8730a342b171657fb4c", "committedDate": "2020-10-05T19:43:20Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3965888db6221998748e50f792815034eeefa07", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/e3965888db6221998748e50f792815034eeefa07", "committedDate": "2020-10-02T21:26:29Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}, "afterCommit": {"oid": "7385641e0b8b932dbe7ed8730a342b171657fb4c", "author": {"user": {"login": "chadrik", "name": "Chad Dombrova"}}, "url": "https://github.com/apache/beam/commit/7385641e0b8b932dbe7ed8730a342b171657fb4c", "committedDate": "2020-10-05T19:43:20Z", "message": "[BEAM-7746] Get mypy passing on runners.worker"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2400, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}