{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTA3Mjk0", "number": 10899, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MDowN1rODhN47Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMTowN1rODhOTAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU3MTY1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MDowN1rOFr3HbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzo0OTozOFrOFsCcMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNjEwOQ==", "bodyText": "Why?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381536109", "createdAt": "2020-02-19T20:50:07Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -15,6 +15,16 @@\n # limitations under the License.\n #\n \n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MTM2MQ==", "bodyText": "According to Boyuan and the PR, type checking is still in development, not stable and may cause surprised failures.\nSo it's added to all py files.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381561361", "createdAt": "2020-02-19T21:41:58Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -15,6 +15,16 @@\n # limitations under the License.\n #\n \n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNjEwOQ=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcyMTY0OA==", "bodyText": "Yes, ack. Confused this with mypy.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381721648", "createdAt": "2020-02-20T03:49:38Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -15,6 +15,16 @@\n # limitations under the License.\n #\n \n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNjEwOQ=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU3OTc2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1Mjo0M1rOFr3MIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODo1ODozN1rOFsfTsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzMxNA==", "bodyText": "Is this needed? This will override otherthings.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381537314", "createdAt": "2020-02-19T20:52:43Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MzAyNA==", "bodyText": "We plan to log at INFO level for this module.\nSince each module in Beam runners has its own logger (since PR), this overriding is intended and has limited effect.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381563024", "createdAt": "2020-02-19T21:45:17Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzMxNA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcyMjY1OA==", "bodyText": "It has limited effect but it still overrides user choice. Presumably we can have a pipeline option that can set logging level per module level.\nAlso, is not the default logging level info anway?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381722658", "createdAt": "2020-02-20T03:51:40Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzMxNA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4NzQ1Mg==", "bodyText": "As tested, the default logging level in a notebook is warning level.", "url": "https://github.com/apache/beam/pull/10899#discussion_r382187452", "createdAt": "2020-02-20T18:44:54Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzMxNA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4ODEzMw==", "bodyText": "I can get rid of the setLevel and revisit this when we have a non-logging display utility implemented for anything is_in_notebook.", "url": "https://github.com/apache/beam/pull/10899#discussion_r382188133", "createdAt": "2020-02-20T18:46:18Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzMxNA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NDYxMA==", "bodyText": "Removed the logging level setting and added a TODO to replace logging with ipython display when is_in_notebook.", "url": "https://github.com/apache/beam/pull/10899#discussion_r382194610", "createdAt": "2020-02-20T18:58:37Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzMxNA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU4MTIxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MzoxMlrOFr3M-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzo1MjowM1rOFsCg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzUzMQ==", "bodyText": "Why disk is in [] ?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381537531", "createdAt": "2020-02-19T20:53:12Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDU0Ng==", "bodyText": "This is to indicate the captured data could be on-disk, or in other mediums such as in-memory (some testing cache manager implementation).\nLet me just remove the [disk] to avoid the confusion.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381564546", "createdAt": "2020-02-19T21:48:17Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzUzMQ=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcyMjg1MA==", "bodyText": "OK", "url": "https://github.com/apache/beam/pull/10899#discussion_r381722850", "createdAt": "2020-02-20T03:52:03Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzUzMQ=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU4MzgzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1Mzo1OVrOFr3Ojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzo1MTo1OFrOFsCgxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzkzNA==", "bodyText": "There are other terminal states like FAILED ? What happens in those cases?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381537934", "createdAt": "2020-02-19T20:53:59Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.\n+\n+  A background caching job successfully terminates in 2 conditions:\n+\n+    #. The job is finite and runs into DONE state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NzIwNA==", "bodyText": "Those are considered as not successfully terminates.\nLet me reword it into A background caching job successfully complete source data capture in 2 conditions.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381567204", "createdAt": "2020-02-19T21:53:36Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.\n+\n+  A background caching job successfully terminates in 2 conditions:\n+\n+    #. The job is finite and runs into DONE state;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzkzNA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcyMjgyMA==", "bodyText": "OK", "url": "https://github.com/apache/beam/pull/10899#discussion_r381722820", "createdAt": "2020-02-20T03:51:58Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.\n+\n+  A background caching job successfully terminates in 2 conditions:\n+\n+    #. The job is finite and runs into DONE state;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzkzNA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYwNjA5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowMDo0MFrOFr3cNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMjozNFrOFr6HNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MTQyOA==", "bodyText": "Should we set the daemon flag?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381541428", "createdAt": "2020-02-19T21:00:40Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.\n+\n+  A background caching job successfully terminates in 2 conditions:\n+\n+    #. The job is finite and runs into DONE state;\n+    #. The job is infinite but hits an interactive_beam.options configured limit\n+       and gets cancelled into CANCELLED/CANCELLING state.\n+\n+  In both situations, the background caching job should be treated as done\n+  successfully.\n+  \"\"\"\n+  def __init__(self, pipeline_result, start_limit_checkers=True):\n+    self._pipeline_result = pipeline_result\n+    self._timer = threading.Timer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NTIwNA==", "bodyText": "Thanks! Yes, we should in case the notebook is shutdown abruptly.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381585204", "createdAt": "2020-02-19T22:32:34Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.\n+\n+  A background caching job successfully terminates in 2 conditions:\n+\n+    #. The job is finite and runs into DONE state;\n+    #. The job is infinite but hits an interactive_beam.options configured limit\n+       and gets cancelled into CANCELLED/CANCELLING state.\n+\n+  In both situations, the background caching job should be treated as done\n+  successfully.\n+  \"\"\"\n+  def __init__(self, pipeline_result, start_limit_checkers=True):\n+    self._pipeline_result = pipeline_result\n+    self._timer = threading.Timer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MTQyOA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYyMzM1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowNjowMVrOFr3miQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTowMToxNVrOFsfZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDA3Mw==", "bodyText": "Half sentence In order to have a deterministic replay of your pipeline ... What happens in this case?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381544073", "createdAt": "2020-02-19T21:06:01Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -132,7 +256,22 @@ def is_source_to_cache_changed(user_pipeline):\n   is_changed = not current_signature.issubset(recorded_signature)\n   # The computation of extract_unbounded_source_signature is expensive, track on\n   # change by default.\n-  if is_changed:\n+  if is_changed and update_cached_source_signature:\n+    if ie.current_env().options.enable_capture_replay:\n+      if not recorded_signature:\n+        _LOGGER.info(\n+            'Interactive Beam has detected you have unbounded sources '\n+            'in your pipeline. In order to have a deterministic replay '\n+            'of your pipeline: {}'.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NjcwOQ==", "bodyText": "ie.current_env().options.capture_control is formatted the same to the other case.\nDo you think we should make its first letter lower case for this scenario?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381586709", "createdAt": "2020-02-19T22:35:56Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -132,7 +256,22 @@ def is_source_to_cache_changed(user_pipeline):\n   is_changed = not current_signature.issubset(recorded_signature)\n   # The computation of extract_unbounded_source_signature is expensive, track on\n   # change by default.\n-  if is_changed:\n+  if is_changed and update_cached_source_signature:\n+    if ie.current_env().options.enable_capture_replay:\n+      if not recorded_signature:\n+        _LOGGER.info(\n+            'Interactive Beam has detected you have unbounded sources '\n+            'in your pipeline. In order to have a deterministic replay '\n+            'of your pipeline: {}'.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDA3Mw=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcyMzE2Ng==", "bodyText": "I think both cases should result in a complete sentence.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381723166", "createdAt": "2020-02-20T03:52:47Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -132,7 +256,22 @@ def is_source_to_cache_changed(user_pipeline):\n   is_changed = not current_signature.issubset(recorded_signature)\n   # The computation of extract_unbounded_source_signature is expensive, track on\n   # change by default.\n-  if is_changed:\n+  if is_changed and update_cached_source_signature:\n+    if ie.current_env().options.enable_capture_replay:\n+      if not recorded_signature:\n+        _LOGGER.info(\n+            'Interactive Beam has detected you have unbounded sources '\n+            'in your pipeline. In order to have a deterministic replay '\n+            'of your pipeline: {}'.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDA3Mw=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NjAxNQ==", "bodyText": "Got it, make it a full sentence.", "url": "https://github.com/apache/beam/pull/10899#discussion_r382196015", "createdAt": "2020-02-20T19:01:15Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -132,7 +256,22 @@ def is_source_to_cache_changed(user_pipeline):\n   is_changed = not current_signature.issubset(recorded_signature)\n   # The computation of extract_unbounded_source_signature is expensive, track on\n   # change by default.\n-  if is_changed:\n+  if is_changed and update_cached_source_signature:\n+    if ie.current_env().options.enable_capture_replay:\n+      if not recorded_signature:\n+        _LOGGER.info(\n+            'Interactive Beam has detected you have unbounded sources '\n+            'in your pipeline. In order to have a deterministic replay '\n+            'of your pipeline: {}'.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDA3Mw=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYzMDUxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowODozNVrOFr3rKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo0MDoyNVrOFr6Uhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTI1Nw==", "bodyText": "How do they set it?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381545257", "createdAt": "2020-02-19T21:08:35Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -34,6 +34,58 @@\n from __future__ import absolute_import\n \n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.options import interactive_options\n+\n+\n+class Options(interactive_options.InteractiveOptions):\n+  \"\"\"Options that guide how Interactive Beam works.\"\"\"\n+  @property\n+  def enable_capture_replay(self):\n+    \"\"\"Whether replayable source data capture should be replayed for multiple\n+    PCollection evaluations and pipeline runs as long as the data captured is\n+    still valid.\"\"\"\n+    return self.capture_control._enable_capture_replay\n+\n+  @enable_capture_replay.setter\n+  def enable_capture_replay(self, value):\n+    \"\"\"Sets whether source data capture should be replayed. True - Enables\n+    capture of replayable source data so that following PCollection evaluations\n+    and pipeline runs always use the same data captured; False - Disables\n+    capture of replayable source data so that following PCollection evaluation\n+    and pipeline runs always use new data from sources.\"\"\"\n+    self.capture_control._enable_capture_replay = value\n+\n+  @property\n+  def capturable_sources(self):\n+    \"\"\"Interactive Beam automatically captures data from sources in this set.\"\"\"\n+    return self.capture_control._capturable_sources\n+\n+  @property\n+  def capture_duration(self):\n+    \"\"\"The data capture of sources ends as soon as the background caching job\n+    has run for this long.\"\"\"\n+    return self.capture_control._capture_duration\n+\n+  @capture_duration.setter\n+  def capture_duration(self, value):\n+    \"\"\"Sets the capture duration as a timedelta.\n+\n+    Example::\n+\n+      # Sets the capture duration limit to 10 seconds.\n+      interactive_beam.options.capture_duration = timedelta(seconds=10)\n+      # Evicts all captured data if there is any.\n+      interactive_beam.evict_captured_data()\n+      # The next PCollection evaluation will capture fresh data from sources,\n+      # and the data captured will be replayed until another eviction.\n+    \"\"\"\n+    self.capture_control._capture_duration = value\n+\n+  # TODO(BEAM-8335): add capture_size options when they are supported.\n+\n+\n+# Users can set options to guide how Interactive Beam works.\n+options = Options()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4ODYxNA==", "bodyText": "Will add\nExample:\nfrom datetime import timedelta\nfrom apache_beam.runners.interactive import interactive_beam as ib\nib.options.enable_capture_replay = False/True\nib.options.capture_duration = timedelta(seconds=60)\nib.options.capturable_sources.add(SourceClass)\n\nto the comments.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381588614", "createdAt": "2020-02-19T22:40:25Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -34,6 +34,58 @@\n from __future__ import absolute_import\n \n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.options import interactive_options\n+\n+\n+class Options(interactive_options.InteractiveOptions):\n+  \"\"\"Options that guide how Interactive Beam works.\"\"\"\n+  @property\n+  def enable_capture_replay(self):\n+    \"\"\"Whether replayable source data capture should be replayed for multiple\n+    PCollection evaluations and pipeline runs as long as the data captured is\n+    still valid.\"\"\"\n+    return self.capture_control._enable_capture_replay\n+\n+  @enable_capture_replay.setter\n+  def enable_capture_replay(self, value):\n+    \"\"\"Sets whether source data capture should be replayed. True - Enables\n+    capture of replayable source data so that following PCollection evaluations\n+    and pipeline runs always use the same data captured; False - Disables\n+    capture of replayable source data so that following PCollection evaluation\n+    and pipeline runs always use new data from sources.\"\"\"\n+    self.capture_control._enable_capture_replay = value\n+\n+  @property\n+  def capturable_sources(self):\n+    \"\"\"Interactive Beam automatically captures data from sources in this set.\"\"\"\n+    return self.capture_control._capturable_sources\n+\n+  @property\n+  def capture_duration(self):\n+    \"\"\"The data capture of sources ends as soon as the background caching job\n+    has run for this long.\"\"\"\n+    return self.capture_control._capture_duration\n+\n+  @capture_duration.setter\n+  def capture_duration(self, value):\n+    \"\"\"Sets the capture duration as a timedelta.\n+\n+    Example::\n+\n+      # Sets the capture duration limit to 10 seconds.\n+      interactive_beam.options.capture_duration = timedelta(seconds=10)\n+      # Evicts all captured data if there is any.\n+      interactive_beam.evict_captured_data()\n+      # The next PCollection evaluation will capture fresh data from sources,\n+      # and the data captured will be replayed until another eviction.\n+    \"\"\"\n+    self.capture_control._capture_duration = value\n+\n+  # TODO(BEAM-8335): add capture_size options when they are supported.\n+\n+\n+# Users can set options to guide how Interactive Beam works.\n+options = Options()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTI1Nw=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYzNTQwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMDowNVrOFr3uMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyODozOFrOFseXVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjAzMg==", "bodyText": "Why is the options defined globally in a different file, but setter is here?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381546032", "createdAt": "2020-02-19T21:10:05Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -130,6 +139,17 @@ def __init__(self, cache_manager=None):\n           'You have limited Interactive Beam features since your '\n           'ipython kernel is not connected any notebook frontend.')\n \n+  @property\n+  def options(self):\n+    \"\"\"A reference to the global interactive options.\n+\n+    Provided to avoid import loop or excessive dynamic import. All internal\n+    Interactive Beam modules should access interactive_beam.options through\n+    this property.\n+    \"\"\"\n+    from apache_beam.runners.interactive.interactive_beam import options\n+    return options", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5MjYwNQ==", "bodyText": "The options instantiated in interactive_beam is to expose the getters and setters of configurable fields such as enable_capture_replay, capture_duration and capturable_sources to the interactive beam user.\nThe user has all necessary getters, setters and docstrings by looking at the interactive_beam module without the complexity of their underlying implementation details (such as __repr__, and how options and their utilities are grouped together).\nThen inside all internal interactive beam modules, to access the fields configured by the user, since we don't want any module to depend on interactive_beam module to avoid import loops, we can only do dynamic importing. It's going to be messy if we just dynamic import interactive_beam (the module that is supposed to be used by end user) everywhere. So this property (no setter given) does the dynamic import once in this single place and all internal modules will depend on interactive_environment module to access whatever configuration the user might have set.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381592605", "createdAt": "2020-02-19T22:49:27Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -130,6 +139,17 @@ def __init__(self, cache_manager=None):\n           'You have limited Interactive Beam features since your '\n           'ipython kernel is not connected any notebook frontend.')\n \n+  @property\n+  def options(self):\n+    \"\"\"A reference to the global interactive options.\n+\n+    Provided to avoid import loop or excessive dynamic import. All internal\n+    Interactive Beam modules should access interactive_beam.options through\n+    this property.\n+    \"\"\"\n+    from apache_beam.runners.interactive.interactive_beam import options\n+    return options", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjAzMg=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcyMzk3OA==", "bodyText": "If all the getters/setters are available in interactive_beam, why do the user need to use this setter here?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381723978", "createdAt": "2020-02-20T03:54:29Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -130,6 +139,17 @@ def __init__(self, cache_manager=None):\n           'You have limited Interactive Beam features since your '\n           'ipython kernel is not connected any notebook frontend.')\n \n+  @property\n+  def options(self):\n+    \"\"\"A reference to the global interactive options.\n+\n+    Provided to avoid import loop or excessive dynamic import. All internal\n+    Interactive Beam modules should access interactive_beam.options through\n+    this property.\n+    \"\"\"\n+    from apache_beam.runners.interactive.interactive_beam import options\n+    return options", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjAzMg=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3OTE1OA==", "bodyText": "This is a getter, not a setter, and it's used by internal modules, not users.\nUsers always do:\n# Static import once.\nfrom apache_beam.runners.interactive import interactive_beam as ib\n# Use it everywhere.\nib.options.<setter/getter>\n\nThe purpose is to simplify below usages:\nIn an interactive beam internal module, when accessing options:\n# Dynamic import when needed. Because no internal module should depend on \n# `interactive_beam` in a static way to avoid an import loop. Also the `interactive_beam` module\n# provides APIs to the end user, should not be mixed into the implementation.\n# In a local scope:\nfrom apache_beam.runners.interactive.interactive_beam import options\nuse(options.getter)\n...\n# In another local scope:\nfrom apache_beam.runners.interactive.interactive_beam import options\nuse(options.xxx)\n...\n\nSince most modules accessing global states have interactive_environment as a static dependency, providing this getter in interactive_environment simplified the usage to:\n# Static import once, most modules have this as dependency already.\nfrom apache_beam.runners.interactive import interactive_environment as ie\n# In a local scope:\nuse(ie.current_env().options.getter)\n...\n# In another local scope:\nuse(ie.current_env().options.getter)", "url": "https://github.com/apache/beam/pull/10899#discussion_r382179158", "createdAt": "2020-02-20T18:28:38Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -130,6 +139,17 @@ def __init__(self, cache_manager=None):\n           'You have limited Interactive Beam features since your '\n           'ipython kernel is not connected any notebook frontend.')\n \n+  @property\n+  def options(self):\n+    \"\"\"A reference to the global interactive options.\n+\n+    Provided to avoid import loop or excessive dynamic import. All internal\n+    Interactive Beam modules should access interactive_beam.options through\n+    this property.\n+    \"\"\"\n+    from apache_beam.runners.interactive.interactive_beam import options\n+    return options", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjAzMg=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYzNzMxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMDo0NFrOFr3vYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTowMTo1OVrOFsfa7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjMzOA==", "bodyText": "Do you need it?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381546338", "createdAt": "2020-02-19T21:10:44Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+from datetime import timedelta\n+\n+from apache_beam.io.gcp.pubsub import ReadFromPubSub\n+from apache_beam.runners.interactive import background_caching_job as bcj\n+from apache_beam.runners.interactive import interactive_environment as ie\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMTI5MA==", "bodyText": "We intend to log at info level for this module.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381621290", "createdAt": "2020-02-20T00:14:38Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+from datetime import timedelta\n+\n+from apache_beam.io.gcp.pubsub import ReadFromPubSub\n+from apache_beam.runners.interactive import background_caching_job as bcj\n+from apache_beam.runners.interactive import interactive_environment as ie\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjMzOA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NjQ2Mw==", "bodyText": "Removed the logging level setting and added a TODO item.", "url": "https://github.com/apache/beam/pull/10899#discussion_r382196463", "createdAt": "2020-02-20T19:01:59Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+from datetime import timedelta\n+\n+from apache_beam.io.gcp.pubsub import ReadFromPubSub\n+from apache_beam.runners.interactive import background_caching_job as bcj\n+from apache_beam.runners.interactive import interactive_environment as ie\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjMzOA=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYzODQyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMTowN1rOFr3wCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo1NTowOVrOFr6tJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjUwNw==", "bodyText": "why, disable yapf here?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381546507", "createdAt": "2020-02-19T21:11:07Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+from datetime import timedelta\n+\n+from apache_beam.io.gcp.pubsub import ReadFromPubSub\n+from apache_beam.runners.interactive import background_caching_job as bcj\n+from apache_beam.runners.interactive import interactive_environment as ie\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class CaptureControl(object):\n+  \"\"\"Options and their utilities that controls how Interactive Beam captures\n+  deterministic replayable data from sources.\"\"\"\n+  def __init__(self):\n+    self._enable_capture_replay = True\n+    self._capturable_sources = {\n+        ReadFromPubSub,\n+    }  # yapf: disable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NDkxOQ==", "bodyText": "Removing the disable statement.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381594919", "createdAt": "2020-02-19T22:55:09Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+from datetime import timedelta\n+\n+from apache_beam.io.gcp.pubsub import ReadFromPubSub\n+from apache_beam.runners.interactive import background_caching_job as bcj\n+from apache_beam.runners.interactive import interactive_environment as ie\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class CaptureControl(object):\n+  \"\"\"Options and their utilities that controls how Interactive Beam captures\n+  deterministic replayable data from sources.\"\"\"\n+  def __init__(self):\n+    self._enable_capture_replay = True\n+    self._capturable_sources = {\n+        ReadFromPubSub,\n+    }  # yapf: disable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjUwNw=="}, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2067, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}