{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTk2MDg3", "number": 12413, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowNzoxMFrOEV-abA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowNzoxMFrOEV-abA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc4MTI0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/utils.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowNzoxMFrOG9CfsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDoxMTowOVrOG9mgTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzIwMQ==", "bodyText": "nit: this else is not necessary since the flow ends with continue.", "url": "https://github.com/apache/beam/pull/12413#discussion_r466657201", "createdAt": "2020-08-06T20:07:10Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -27,30 +27,46 @@\n import pandas as pd\n \n from apache_beam.portability.api.beam_runner_api_pb2 import TestStreamPayload\n+from apache_beam.testing.test_stream import WindowedValueHolder\n \n \n def to_element_list(\n     reader,  # type: Generator[Union[TestStreamPayload.Event, WindowedValueHolder]]\n     coder,  # type: Coder\n-    include_window_info  # type: bool\n+    include_window_info,  # type: bool\n+    n=None  # type: int\n ):\n   # type: (...) -> List[WindowedValue]\n \n   \"\"\"Returns an iterator that properly decodes the elements from the reader.\n   \"\"\"\n \n-  for e in reader:\n-    if isinstance(e, TestStreamPayload.Event):\n-      if (e.HasField('watermark_event') or e.HasField('processing_time_event')):\n-        continue\n+  # Defining a generator like this makes it easier to limit the count of\n+  # elements read. Otherwise, the count limit would need to be duplicated.\n+  def elements():\n+    for e in reader:\n+      if isinstance(e, TestStreamPayload.Event):\n+        if (e.HasField('watermark_event') or\n+            e.HasField('processing_time_event')):\n+          continue\n+        else:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec897d3d24c4fb502cfb3691b5f344c87b01aa8a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0NzE4Mg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12413#discussion_r467247182", "createdAt": "2020-08-07T20:11:09Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/utils.py", "diffHunk": "@@ -27,30 +27,46 @@\n import pandas as pd\n \n from apache_beam.portability.api.beam_runner_api_pb2 import TestStreamPayload\n+from apache_beam.testing.test_stream import WindowedValueHolder\n \n \n def to_element_list(\n     reader,  # type: Generator[Union[TestStreamPayload.Event, WindowedValueHolder]]\n     coder,  # type: Coder\n-    include_window_info  # type: bool\n+    include_window_info,  # type: bool\n+    n=None  # type: int\n ):\n   # type: (...) -> List[WindowedValue]\n \n   \"\"\"Returns an iterator that properly decodes the elements from the reader.\n   \"\"\"\n \n-  for e in reader:\n-    if isinstance(e, TestStreamPayload.Event):\n-      if (e.HasField('watermark_event') or e.HasField('processing_time_event')):\n-        continue\n+  # Defining a generator like this makes it easier to limit the count of\n+  # elements read. Otherwise, the count limit would need to be duplicated.\n+  def elements():\n+    for e in reader:\n+      if isinstance(e, TestStreamPayload.Event):\n+        if (e.HasField('watermark_event') or\n+            e.HasField('processing_time_event')):\n+          continue\n+        else:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzIwMQ=="}, "originalCommit": {"oid": "ec897d3d24c4fb502cfb3691b5f344c87b01aa8a"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 731, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}