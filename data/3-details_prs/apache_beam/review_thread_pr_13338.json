{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODI0MTMw", "number": 13338, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDowMjo1OVrOE7sb_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDowMzo0MFrOE7scrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDI5NTAxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDowMjo1OVrOH3fBSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDowMjo1OVrOH3fBSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0MTk2MA==", "bodyText": "Can you add a comment explaining why we use a splittable DoFn?", "url": "https://github.com/apache/beam/pull/13338#discussion_r527941960", "createdAt": "2020-11-20T20:02:59Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "diffHunk": "@@ -835,23 +834,37 @@ def process(\n       assert_that(res, equal_to(['1', '2']))\n \n   def test_register_finalizations(self):\n-    event_recorder = EventRecorder(tempfile.gettempdir())\n-    elements_list = ['2', '1']\n+    class FinalizableSplittableDoFn(beam.DoFn):\n+      was_finalized = False\n+\n+      def set_finalized(self):\n+        self.was_finalized = True\n \n-    class FinalizableDoFn(beam.DoFn):\n       def process(\n-          self, element, bundle_finalizer=beam.DoFn.BundleFinalizerParam):\n-        bundle_finalizer.register(lambda: event_recorder.record(element))\n-        yield element\n+          self,\n+          element,\n+          bundle_finalizer=beam.DoFn.BundleFinalizerParam,\n+          restriction_tracker=beam.DoFn.RestrictionParam(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e26ca495f00bedf3eb07be7f7b2e3b04b071a4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDI5Njc4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDowMzo0MFrOH3fCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDowMzo0MFrOH3fCbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0MjI1Mw==", "bodyText": "Why is the sleep necessary? Can you add a comment?", "url": "https://github.com/apache/beam/pull/13338#discussion_r527942253", "createdAt": "2020-11-20T20:03:40Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "diffHunk": "@@ -835,23 +834,37 @@ def process(\n       assert_that(res, equal_to(['1', '2']))\n \n   def test_register_finalizations(self):\n-    event_recorder = EventRecorder(tempfile.gettempdir())\n-    elements_list = ['2', '1']\n+    class FinalizableSplittableDoFn(beam.DoFn):\n+      was_finalized = False\n+\n+      def set_finalized(self):\n+        self.was_finalized = True\n \n-    class FinalizableDoFn(beam.DoFn):\n       def process(\n-          self, element, bundle_finalizer=beam.DoFn.BundleFinalizerParam):\n-        bundle_finalizer.register(lambda: event_recorder.record(element))\n-        yield element\n+          self,\n+          element,\n+          bundle_finalizer=beam.DoFn.BundleFinalizerParam,\n+          restriction_tracker=beam.DoFn.RestrictionParam(\n+              OffsetRangeProvider(use_bounded_offset_range=True))):\n+        if self.was_finalized:\n+          restriction_tracker.try_claim(\n+              restriction_tracker.current_restriction().start)\n+          yield element\n+          restriction_tracker.try_claim(element)\n+          return\n+        if restriction_tracker.try_claim(\n+            restriction_tracker.current_restriction().start):\n+          bundle_finalizer.register(lambda: self.set_finalized())\n+          time.sleep(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e26ca495f00bedf3eb07be7f7b2e3b04b071a4"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2801, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}