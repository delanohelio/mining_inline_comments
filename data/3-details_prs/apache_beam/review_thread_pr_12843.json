{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTM2NzU3", "number": 12843, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMTo0MTo0NVrOEjyVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMTo0MTo0NVrOEjyVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTYwMzkwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamUnnestRel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMTo0MTo0NVrOHSVuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxOTowNVrOHVg9iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk5MjI4Ng==", "bodyText": "So it looks like guaranteed to have nested row except for the last index? If not better to add validation here.", "url": "https://github.com/apache/beam/pull/12843#discussion_r488992286", "createdAt": "2020-09-15T21:41:45Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamUnnestRel.java", "diffHunk": "@@ -111,31 +112,41 @@ public RelWriter explainTerms(RelWriter pw) {\n       Schema joinedSchema = CalciteUtils.toSchema(getRowType());\n \n       return outer\n-          .apply(ParDo.of(new UnnestFn(joinedSchema, unnestIndex)))\n+          .apply(ParDo.of(new UnnestFn(joinedSchema, unnestIndices)))\n           .setRowSchema(joinedSchema);\n     }\n   }\n \n   private static class UnnestFn extends DoFn<Row, Row> {\n \n     private final Schema outputSchema;\n-    private final int unnestIndex;\n+    private final List<Integer> unnestIndices;\n \n-    private UnnestFn(Schema outputSchema, int unnestIndex) {\n+    private UnnestFn(Schema outputSchema, List<Integer> unnestIndices) {\n       this.outputSchema = outputSchema;\n-      this.unnestIndex = unnestIndex;\n+      this.unnestIndices = unnestIndices;\n     }\n \n     @ProcessElement\n     public void process(@Element Row row, OutputReceiver<Row> out) {\n-\n-      @Nullable Collection<Object> rawValues = row.getArray(unnestIndex);\n+      Row rowWithArrayField = row;\n+      Schema schemaWithArrayField = outputSchema;\n+      for (int i = unnestIndices.size() - 1; i > 0; i--) {\n+        rowWithArrayField = rowWithArrayField.getRow(unnestIndices.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46fbff02be66d967df5156f5f056bba8aedf6a23"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMjE4NQ==", "bodyText": "I believe the updated code in BeamUnnestRule.java will guarantee this.", "url": "https://github.com/apache/beam/pull/12843#discussion_r492322185", "createdAt": "2020-09-21T20:19:05Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamUnnestRel.java", "diffHunk": "@@ -111,31 +112,41 @@ public RelWriter explainTerms(RelWriter pw) {\n       Schema joinedSchema = CalciteUtils.toSchema(getRowType());\n \n       return outer\n-          .apply(ParDo.of(new UnnestFn(joinedSchema, unnestIndex)))\n+          .apply(ParDo.of(new UnnestFn(joinedSchema, unnestIndices)))\n           .setRowSchema(joinedSchema);\n     }\n   }\n \n   private static class UnnestFn extends DoFn<Row, Row> {\n \n     private final Schema outputSchema;\n-    private final int unnestIndex;\n+    private final List<Integer> unnestIndices;\n \n-    private UnnestFn(Schema outputSchema, int unnestIndex) {\n+    private UnnestFn(Schema outputSchema, List<Integer> unnestIndices) {\n       this.outputSchema = outputSchema;\n-      this.unnestIndex = unnestIndex;\n+      this.unnestIndices = unnestIndices;\n     }\n \n     @ProcessElement\n     public void process(@Element Row row, OutputReceiver<Row> out) {\n-\n-      @Nullable Collection<Object> rawValues = row.getArray(unnestIndex);\n+      Row rowWithArrayField = row;\n+      Schema schemaWithArrayField = outputSchema;\n+      for (int i = unnestIndices.size() - 1; i > 0; i--) {\n+        rowWithArrayField = rowWithArrayField.getRow(unnestIndices.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk5MjI4Ng=="}, "originalCommit": {"oid": "46fbff02be66d967df5156f5f056bba8aedf6a23"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3322, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}