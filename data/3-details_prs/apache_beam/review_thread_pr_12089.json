{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Njc0OTEy", "number": 12089, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo1MTo1OFrOEL4Pag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDoxMDoyOFrOEL4c0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODkxMjQyOnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo1MTo1OFrOGtqlxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzoxMzowOFrOGtttlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNjkwMw==", "bodyText": "This will need to go into 2.24 as 2.23 release branch has been cut. Just add a section like 2.23 with empty sections.", "url": "https://github.com/apache/beam/pull/12089#discussion_r450536903", "createdAt": "2020-07-06T23:51:58Z", "author": {"login": "lukecwik"}, "path": "CHANGES.md", "diffHunk": "@@ -63,6 +63,8 @@\n   is experimental. It reads data from BigQuery by exporting data to Avro files, and reading those files. It also supports\n   reading data by exporting to JSON files. This has small differences in behavior for Time and Date-related fields. See\n   Pydoc for more information.\n+* New overloads for BigtableIO.Read.withKeyRange() and BigtableIO.Read.withRowFilter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4ODA1NQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/12089#discussion_r450588055", "createdAt": "2020-07-07T03:13:08Z", "author": {"login": "rafi-kamal"}, "path": "CHANGES.md", "diffHunk": "@@ -63,6 +63,8 @@\n   is experimental. It reads data from BigQuery by exporting data to Avro files, and reading those files. It also supports\n   reading data by exporting to JSON files. This has small differences in behavior for Time and Date-related fields. See\n   Pydoc for more information.\n+* New overloads for BigtableIO.Read.withKeyRange() and BigtableIO.Read.withRowFilter()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNjkwMw=="}, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODkzMzk4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableReadOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDowMzozM1rOGtqyWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDowMzozM1rOGtqyWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MDEyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Returns the Row filter to use. */\n          \n          \n            \n              /** Returns the row filter to use. */", "url": "https://github.com/apache/beam/pull/12089#discussion_r450540123", "createdAt": "2020-07-07T00:03:33Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableReadOptions.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apache.beam.sdk.io.gcp.bigtable;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.bigtable.v2.RowFilter;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.range.ByteKeyRange;\n+import org.apache.beam.sdk.options.ValueProvider;\n+import org.apache.beam.sdk.transforms.display.DisplayData;\n+\n+/** Configuration for which values to read from Bigtable. */\n+@AutoValue\n+abstract class BigtableReadOptions implements Serializable {\n+\n+  /** Returns the Row filter to use. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODk0MDU1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDowNjo1OFrOGtq2CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDoyMToyOFrOGuONgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTA2NQ==", "bodyText": "nit: currently it seems like overlapping ranges lead to duplicate reads for any keys in the overlapping area, it would be good if either:\n\noverlapping ranges lead to an error\noverlapping ranges are correctly fixed up to not produce duplicates", "url": "https://github.com/apache/beam/pull/12089#discussion_r450541065", "createdAt": "2020-07-07T00:06:58Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIO.java", "diffHunk": "@@ -410,13 +417,22 @@ public Read withKeyRange(ByteKeyRange keyRange) {\n      *\n      * <p>Does not modify this object.\n      */\n-    public Read withKeyRanges(List<ByteKeyRange> keyRanges) {\n+    public Read withKeyRanges(ValueProvider<List<ByteKeyRange>> keyRanges) {\n       checkArgument(keyRanges != null, \"keyRanges can not be null\");\n-      checkArgument(!keyRanges.isEmpty(), \"keyRanges can not be empty\");\n-      for (ByteKeyRange range : keyRanges) {\n-        checkArgument(range != null, \"keyRanges cannot hold null range\");\n-      }\n-      return toBuilder().setKeyRanges(keyRanges).build();\n+      BigtableReadOptions bigtableReadOptions = getBigtableReadOptions();\n+      return toBuilder()\n+          .setBigtableReadOptions(bigtableReadOptions.toBuilder().setKeyRanges(keyRanges).build())\n+          .build();\n+    }\n+\n+    /**\n+     * Returns a new {@link BigtableIO.Read} that will read only rows in the specified ranges.\n+     * Ranges must not overlap.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5MDQ2OA==", "bodyText": "Agreed - personally I would prefer option 2. I think it's out of scope for this PR, though, but I'll be happy to do it as a follow-up. Do you know if there is already a JIRA issue for this?", "url": "https://github.com/apache/beam/pull/12089#discussion_r450590468", "createdAt": "2020-07-07T03:24:20Z", "author": {"login": "rafi-kamal"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIO.java", "diffHunk": "@@ -410,13 +417,22 @@ public Read withKeyRange(ByteKeyRange keyRange) {\n      *\n      * <p>Does not modify this object.\n      */\n-    public Read withKeyRanges(List<ByteKeyRange> keyRanges) {\n+    public Read withKeyRanges(ValueProvider<List<ByteKeyRange>> keyRanges) {\n       checkArgument(keyRanges != null, \"keyRanges can not be null\");\n-      checkArgument(!keyRanges.isEmpty(), \"keyRanges can not be empty\");\n-      for (ByteKeyRange range : keyRanges) {\n-        checkArgument(range != null, \"keyRanges cannot hold null range\");\n-      }\n-      return toBuilder().setKeyRanges(keyRanges).build();\n+      BigtableReadOptions bigtableReadOptions = getBigtableReadOptions();\n+      return toBuilder()\n+          .setBigtableReadOptions(bigtableReadOptions.toBuilder().setKeyRanges(keyRanges).build())\n+          .build();\n+    }\n+\n+    /**\n+     * Returns a new {@link BigtableIO.Read} that will read only rows in the specified ranges.\n+     * Ranges must not overlap.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTA2NQ=="}, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDUxMg==", "bodyText": "I'm not aware of a JIRA, you'll need to look. If you don't find one, file one.", "url": "https://github.com/apache/beam/pull/12089#discussion_r451120512", "createdAt": "2020-07-07T20:21:28Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIO.java", "diffHunk": "@@ -410,13 +417,22 @@ public Read withKeyRange(ByteKeyRange keyRange) {\n      *\n      * <p>Does not modify this object.\n      */\n-    public Read withKeyRanges(List<ByteKeyRange> keyRanges) {\n+    public Read withKeyRanges(ValueProvider<List<ByteKeyRange>> keyRanges) {\n       checkArgument(keyRanges != null, \"keyRanges can not be null\");\n-      checkArgument(!keyRanges.isEmpty(), \"keyRanges can not be empty\");\n-      for (ByteKeyRange range : keyRanges) {\n-        checkArgument(range != null, \"keyRanges cannot hold null range\");\n-      }\n-      return toBuilder().setKeyRanges(keyRanges).build();\n+      BigtableReadOptions bigtableReadOptions = getBigtableReadOptions();\n+      return toBuilder()\n+          .setBigtableReadOptions(bigtableReadOptions.toBuilder().setKeyRanges(keyRanges).build())\n+          .build();\n+    }\n+\n+    /**\n+     * Returns a new {@link BigtableIO.Read} that will read only rows in the specified ranges.\n+     * Ranges must not overlap.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTA2NQ=="}, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODk0NjE0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableReadOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDoxMDowOFrOGtq5QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMzoxMjo1NVrOGtttXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTg4OQ==", "bodyText": "Needs an Apache 2.0 license header in the file. See other files for an example.", "url": "https://github.com/apache/beam/pull/12089#discussion_r450541889", "createdAt": "2020-07-07T00:10:08Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableReadOptions.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apache.beam.sdk.io.gcp.bigtable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4Nzk5OA==", "bodyText": "Done. Thanks for checking the test results btw, I tried to figure out what's wrong from the failing tests but couldn't find any error logs or stacktraces.", "url": "https://github.com/apache/beam/pull/12089#discussion_r450587998", "createdAt": "2020-07-07T03:12:55Z", "author": {"login": "rafi-kamal"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableReadOptions.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apache.beam.sdk.io.gcp.bigtable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTg4OQ=="}, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODk0Njc1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDoxMDoyOFrOGtq5lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDoxMDoyOFrOGtq5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTk3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .withTableId(options.getBigtableTableId())\n          \n          \n            \n                        .withTableId(options.getBigtableTableId());", "url": "https://github.com/apache/beam/pull/12089#discussion_r450541973", "createdAt": "2020-07-07T00:10:28Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigtable/BigtableIOTest.java", "diffHunk": "@@ -1100,7 +1141,7 @@ public void testReadingDisplayDataFromRuntimeParameters() {\n             .withBigtableOptions(BIGTABLE_OPTIONS)\n             .withProjectId(options.getBigtableProject())\n             .withInstanceId(options.getBigtableInstanceId())\n-            .withTableId(options.getBigtableTableId());\n+            .withTableId(options.getBigtableTableId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ee29522fd91481fa6c47edaf09e1a4839fca9"}, "originalPosition": 270}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3587, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}