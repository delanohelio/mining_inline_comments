{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDI4MDUy", "number": 11275, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MTo0MVrODwKUbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoyNDozNVrODwNkWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI3MzEwOnYy", "diffSide": "RIGHT", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MTo0MVrOGDAgSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoyMzo0N1rOGDFfOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzE3Ng==", "bodyText": "This allows for a race condition where we exit the while loop above not due to a timeout but would turn it into a timeout here because of the timing.\nWe could clean-up the loop above so it only exits on timeout while all non-timeout returns happen within the loop with something like:\n    while (Instant.now().isBefore(completionTime)) {\n      // Get an update; don't block forever if another thread has handled it. The call to poll will\n      // wait the entire timeout; this call primarily exists to relinquish any core.\n      VisibleExecutorUpdate update = visibleUpdates.tryNext(Duration.millis(25L));\n      if (pipelineState.get().isTerminal() || (update != null && isTerminalStateUpdate(update))) {\n        // there are no updates to process and no updates will ever be published because the\n        // executor is shutdown OR there has been an update and the update is terminal\n        return pipelineState.get();\n      } else if (update != null && update.thrown.isPresent()) {\n        Throwable thrown = update.thrown.get();\n        if (thrown instanceof Exception) {\n          throw (Exception) thrown;\n        } else if (thrown instanceof Error) {\n          throw (Error) thrown;\n        } else {\n          throw new Exception(\"Unknown Type of Throwable\", thrown);\n        }\n      }\n    }\n    return null;", "url": "https://github.com/apache/beam/pull/11275#discussion_r405807176", "createdAt": "2020-04-08T20:51:41Z", "author": {"login": "lukecwik"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "diffHunk": "@@ -260,6 +260,11 @@ public State waitUntilFinish(Duration duration) throws Exception {\n         }\n       }\n     }\n+\n+    if (Instant.now().isAfter(completionTime)) {\n+      return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3b1b01e4e895b1a9df51bb08ee7b31e7388fee8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMDY3NA==", "bodyText": "@lukecwik well spotted I totally overlooked it! Thanks I'll update this.", "url": "https://github.com/apache/beam/pull/11275#discussion_r405810674", "createdAt": "2020-04-08T20:58:01Z", "author": {"login": "regadas"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "diffHunk": "@@ -260,6 +260,11 @@ public State waitUntilFinish(Duration duration) throws Exception {\n         }\n       }\n     }\n+\n+    if (Instant.now().isAfter(completionTime)) {\n+      return null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzE3Ng=="}, "originalCommit": {"oid": "f3b1b01e4e895b1a9df51bb08ee7b31e7388fee8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4ODgyNw==", "bodyText": "Cleaned it up a little bit more and kept (update == null && pipelineState.get().isTerminal()) to ensure that if an update has a Throwable it gets thrown. (keeps previous semantic).\nAgain thx for spotting the race condition \ud83e\udd26\u200d\u2642", "url": "https://github.com/apache/beam/pull/11275#discussion_r405888827", "createdAt": "2020-04-09T00:23:47Z", "author": {"login": "regadas"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "diffHunk": "@@ -260,6 +260,11 @@ public State waitUntilFinish(Duration duration) throws Exception {\n         }\n       }\n     }\n+\n+    if (Instant.now().isAfter(completionTime)) {\n+      return null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzE3Ng=="}, "originalCommit": {"oid": "f3b1b01e4e895b1a9df51bb08ee7b31e7388fee8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODgwNTM4OnYy", "diffSide": "RIGHT", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoyNDozNVrOGDFgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDoyNDozNVrOGDFgHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4OTA1Mg==", "bodyText": "@lukecwik also found out that this conditional would throw an NPE", "url": "https://github.com/apache/beam/pull/11275#discussion_r405889052", "createdAt": "2020-04-09T00:24:35Z", "author": {"login": "regadas"}, "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "diffHunk": "@@ -269,7 +277,7 @@ public State getPipelineState() {\n   }\n \n   private boolean isTerminalStateUpdate(VisibleExecutorUpdate update) {\n-    return !(update.getNewState() == null && update.getNewState().isTerminal());\n+    return update.getNewState() != null && update.getNewState().isTerminal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21bb8ec6066cc92b34ffe25fa12c991f8bb92c9e"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1591, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}