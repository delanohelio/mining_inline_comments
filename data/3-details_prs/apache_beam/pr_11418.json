{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzk2ODIy", "number": 11418, "title": "[BEAM-8872] Support split at fraction for OffsetRangeTracker", "bodyText": "Computation logic is copied from python OffsetRestrictionTracker.try_split()\nr: @lukecwik\ncc: @youngoli\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-14T20:26:15Z", "url": "https://github.com/apache/beam/pull/11418", "merged": true, "mergeCommit": {"oid": "fa4f4183a315f061e035d38ba2c5d4b837b371e0"}, "closed": true, "closedAt": "2020-04-18T03:35:19Z", "author": {"login": "boyuanzz"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXrSQeAFqTM5MzMzOTM0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYtaoigFqTM5NTg3NzUyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzM5MzQx", "url": "https://github.com/apache/beam/pull/11418#pullrequestreview-393339341", "createdAt": "2020-04-14T22:28:09Z", "commit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoyODowOVrOGFjN1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMjoyODo0MlrOGFjOtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzA0Ng==", "bodyText": "We can split before any successfully claimed block by returning [from, to) and updating the current range to be [from, from)\nThis makes sense in some cases where we want to handoff all the work to someone else for the active element while this bundle finishes other processing.", "url": "https://github.com/apache/beam/pull/11418#discussion_r408473046", "createdAt": "2020-04-14T22:28:09Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzI3MQ==", "bodyText": "Why do we need checkpointed?\nShouldn't the range restriction change so that to becomes lastClaimed (or from if nothing has been claimed)?", "url": "https://github.com/apache/beam/pull/11418#discussion_r408473271", "createdAt": "2020-04-14T22:28:42Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");\n+    // No more split should be performed if checkpoint has happened.\n+    if (checkpointed) {\n+      return null;\n+    }\n+    Long splitPos =\n+        lastClaimedOffset\n+            + Math.max(1L, (long) ((range.getTo() - lastClaimedOffset) * fractionOfRemainder));\n+    if (splitPos >= range.getTo()) {\n+      return null;\n+    }\n+    if (fractionOfRemainder == 0.0) {\n+      checkpointed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "609fa6e38930287cbabd250849c523a40c1434b4"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49ccbc78996a0b0b4a6e8b8d82f62835d225e246", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/49ccbc78996a0b0b4a6e8b8d82f62835d225e246", "committedDate": "2020-04-15T19:01:26Z", "message": "Update SDF tests."}, "afterCommit": {"oid": "e056d31d32601edf39764ecf3c157518b9f5cda4", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/e056d31d32601edf39764ecf3c157518b9f5cda4", "committedDate": "2020-04-15T23:13:33Z", "message": "[BEAM-8872] Support split at fraction for OffsetRangeTracker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/800d20dfca6cad82717fe20b9d399ea1342da78c", "committedDate": "2020-04-16T19:03:09Z", "message": "[BEAM-8872] Support split at fraction for OffsetRangeTracker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e056d31d32601edf39764ecf3c157518b9f5cda4", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/e056d31d32601edf39764ecf3c157518b9f5cda4", "committedDate": "2020-04-15T23:13:33Z", "message": "[BEAM-8872] Support split at fraction for OffsetRangeTracker"}, "afterCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/800d20dfca6cad82717fe20b9d399ea1342da78c", "committedDate": "2020-04-16T19:03:09Z", "message": "[BEAM-8872] Support split at fraction for OffsetRangeTracker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTQ2NDIw", "url": "https://github.com/apache/beam/pull/11418#pullrequestreview-394946420", "createdAt": "2020-04-16T19:44:25Z", "commit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo0NDoyNVrOGG0kxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoxMTowOFrOGG1bxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjAyMQ==", "bodyText": "primary and residual shouldn't have the same value, primary should be an empty range like [100, 100)", "url": "https://github.com/apache/beam/pull/11418#discussion_r409806021", "createdAt": "2020-04-16T19:44:25Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -47,16 +48,9 @@ public void testTryClaim() throws Exception {\n   @Test\n   public void testCheckpointUnstarted() throws Exception {\n     OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    expected.expect(IllegalStateException.class);\n-    tracker.trySplit(0).getResidual();\n-  }\n-\n-  @Test\n-  public void testCheckpointOnlyFailedClaim() throws Exception {\n-    OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    assertFalse(tracker.tryClaim(250L));\n-    expected.expect(IllegalStateException.class);\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n+    SplitResult res = tracker.trySplit(0);\n+    assertEquals(new OffsetRange(100, 100), res.getPrimary());\n+    assertEquals(new OffsetRange(100, 200), res.getResidual());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjg4OQ==", "bodyText": "takeCheckpointNow should work regardless whether numClaimedBlocks > 0 or not.\nEven if tryClaim never happens, the watermark may advance.", "url": "https://github.com/apache/beam/pull/11418#discussion_r409806889", "createdAt": "2020-04-16T19:46:09Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -210,9 +210,10 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n         // the call says that not the whole restriction has been processed. So we need to take\n         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly\n         // the work that was done in the current ProcessElement call, and returns a residual\n-        // restriction that describes exactly the work that wasn't done in the current call.\n+        // restriction that describes exactly the work that wasn't done in the current call. The\n+        // residual is null when the entire restriction has been processed.\n         if (processContext.numClaimedBlocks > 0) {\n-          residual = checkNotNull(processContext.takeCheckpointNow());\n+          residual = processContext.takeCheckpointNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNzkxNA==", "bodyText": "The comments below will likely need updating", "url": "https://github.com/apache/beam/pull/11418#discussion_r409807914", "createdAt": "2020-04-16T19:48:09Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -210,9 +210,10 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n         // the call says that not the whole restriction has been processed. So we need to take\n         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly\n         // the work that was done in the current ProcessElement call, and returns a residual\n-        // restriction that describes exactly the work that wasn't done in the current call.\n+        // restriction that describes exactly the work that wasn't done in the current call. The\n+        // residual is null when the entire restriction has been processed.\n         if (processContext.numClaimedBlocks > 0) {\n-          residual = checkNotNull(processContext.takeCheckpointNow());\n+          residual = processContext.takeCheckpointNow();\n           processContext.tracker.checkDone();\n         } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxODA2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              }\n          \n          \n            \n                tracker.checkDone();\n          \n          \n            \n              }", "url": "https://github.com/apache/beam/pull/11418#discussion_r409818060", "createdAt": "2020-04-16T20:07:22Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -96,9 +90,24 @@ public void testCheckpointAfterFailedClaim() throws Exception {\n     assertTrue(tracker.tryClaim(110L));\n     assertTrue(tracker.tryClaim(160L));\n     assertFalse(tracker.tryClaim(240L));\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n-    assertEquals(new OffsetRange(100, 161), tracker.currentRestriction());\n-    assertEquals(new OffsetRange(161, 200), checkpoint);\n+    assertNull(tracker.trySplit(0));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTU3MQ==", "bodyText": "Can we add tests to verify tryClaim(0), tryClaim(0.1), tryClaim(1) on an empty range like [100, 100)\nCan we also add tests to verify the behavior of tryClaim(1) on range [100, 200)", "url": "https://github.com/apache/beam/pull/11418#discussion_r409819571", "createdAt": "2020-04-16T20:10:06Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import org.apache.beam.sdk.io.range.OffsetRange;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyMDEwMw==", "bodyText": "I believe the comment below could be incorrect. If we get stop(), we shouldn't have a residual restriction.", "url": "https://github.com/apache/beam/pull/11418#discussion_r409820103", "createdAt": "2020-04-16T20:11:08Z", "author": {"login": "lukecwik"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java", "diffHunk": "@@ -51,11 +51,6 @@ public Result(\n         @Nullable WatermarkEstimatorStateT futureWatermarkEstimatorState) {\n       checkArgument(continuation != null, \"continuation must not be null\");\n       this.continuation = continuation;\n-      if (continuation.shouldResume()) {\n-        checkArgument(\n-            residualRestriction != null,\n-            \"residual restriction must not be null if continuation indicate it should resume\");\n-      }\n       this.residualRestriction = residualRestriction;\n       this.futureOutputWatermark = futureOutputWatermark;\n       this.futureWatermarkEstimatorState = futureWatermarkEstimatorState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5907ec3da94a767e1afba23deda5f00f5727807c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5907ec3da94a767e1afba23deda5f00f5727807c", "committedDate": "2020-04-16T23:15:54Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749174c3c6af7688a3f7d561aafcd9fa93d38781", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/749174c3c6af7688a3f7d561aafcd9fa93d38781", "committedDate": "2020-04-17T18:46:05Z", "message": "Update checkDone"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODc3NTI3", "url": "https://github.com/apache/beam/pull/11418#pullrequestreview-395877527", "createdAt": "2020-04-18T03:35:05Z", "commit": {"oid": "749174c3c6af7688a3f7d561aafcd9fa93d38781"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4233, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}