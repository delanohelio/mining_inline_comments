{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MzA5MTc0", "number": 13188, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1NTozMlrOEx-A0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODo0MDo0M1rOEy864g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODMxNjk3OnYy", "diffSide": "LEFT", "path": "sdks/go/pkg/beam/io/textio/textio.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1NTozMlrOHoWZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1NzowNFrOHogEvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MTk2Mg==", "bodyText": "I'm a little surprised this change shouldn't be submitted?", "url": "https://github.com/apache/beam/pull/13188#discussion_r512071962", "createdAt": "2020-10-26T15:55:32Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/textio/textio.go", "diffHunk": "@@ -104,7 +104,7 @@ func readFn(ctx context.Context, filename string, emit func(string)) error {\n \t\t\tbreak\n \t\t}\n \t\tif err != nil {\n-\t\t\treturn (err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e52307883b195ee1d1ab7ea4fc30440a6d435b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMDU5MQ==", "bodyText": "Whoops, the Do Not Merge was from an old thing I removed. Forgot to remove it from the title and post.", "url": "https://github.com/apache/beam/pull/13188#discussion_r512230591", "createdAt": "2020-10-26T19:57:04Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/textio/textio.go", "diffHunk": "@@ -104,7 +104,7 @@ func readFn(ctx context.Context, filename string, emit func(string)) error {\n \t\t\tbreak\n \t\t}\n \t\tif err != nil {\n-\t\t\treturn (err)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MTk2Mg=="}, "originalCommit": {"oid": "41e52307883b195ee1d1ab7ea4fc30440a6d435b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE3NTQwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/textio/sdf_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxNzo0MFrOHoeuvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNTozMzoxM1rOHpappg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODU3NQ==", "bodyText": "Notionally this kind of helper is a reason to have \"real\" SDF actuation on the Go Direct Runner, so testing the IOs is as simple as running a go direct pipeline.\nThat would be a good candidate for a separate JIRA on the topic as a subtask of  BEAM-11076 if it doesn't already work.", "url": "https://github.com/apache/beam/pull/13188#discussion_r512208575", "createdAt": "2020-10-26T19:17:40Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/textio/sdf_test.go", "diffHunk": "@@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package textio\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+)\n+\n+// TestReadSdf tests that readSdf successfully reads a test text file, and\n+// outputs the correct number of lines for it, even for an exceedingly long\n+// line.\n+func TestReadSdf(t *testing.T) {\n+\tf := \"../../../../data/textio_test.txt\"\n+\tf, size, err := sizeFn(context.Background(), f)\n+\tif err != nil {\n+\t\tt.Fatalf(\"sizing failed: %v\", err)\n+\t}\n+\n+\tlines := fakeReadSdfFn(t, f, size)\n+\twant := 1\n+\tif len(lines) != 1 {\n+\t\tt.Fatalf(\"received %v lines, want %v\", len(lines), want)\n+\t}\n+}\n+\n+// fakeReadSdfFn calls the methods in readSdfFn on a single input to simulate\n+// executing an SDF, and outputs all elements produced by that input.\n+func fakeReadSdfFn(t *testing.T, f string, size int64) []string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e52307883b195ee1d1ab7ea4fc30440a6d435b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5MDMxMA==", "bodyText": "This is available in the Direct runner, so I updated the test to use it. Not sure if I should also update the normal TextIO test too, but if so it should work just as well.", "url": "https://github.com/apache/beam/pull/13188#discussion_r513190310", "createdAt": "2020-10-28T05:33:13Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/textio/sdf_test.go", "diffHunk": "@@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package textio\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+)\n+\n+// TestReadSdf tests that readSdf successfully reads a test text file, and\n+// outputs the correct number of lines for it, even for an exceedingly long\n+// line.\n+func TestReadSdf(t *testing.T) {\n+\tf := \"../../../../data/textio_test.txt\"\n+\tf, size, err := sizeFn(context.Background(), f)\n+\tif err != nil {\n+\t\tt.Fatalf(\"sizing failed: %v\", err)\n+\t}\n+\n+\tlines := fakeReadSdfFn(t, f, size)\n+\twant := 1\n+\tif len(lines) != 1 {\n+\t\tt.Fatalf(\"received %v lines, want %v\", len(lines), want)\n+\t}\n+}\n+\n+// fakeReadSdfFn calls the methods in readSdfFn on a single input to simulate\n+// executing an SDF, and outputs all elements produced by that input.\n+func fakeReadSdfFn(t *testing.T, f string, size int64) []string {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODU3NQ=="}, "originalCommit": {"oid": "41e52307883b195ee1d1ab7ea4fc30440a6d435b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTg3MTI3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo0OTo0N1rOHolPTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNTozMzo1NlrOHpaqWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNTIxMg==", "bodyText": "Consider adding a unit test, with the stated example, a \"real world\" example (largely with larger numbers involved, like the 64MB chunks used later in this PR), and edge cases, like exact splits, and off by 1 errors (both sides) etc (to validate that we don't somehow end up with 0 sized splits.)", "url": "https://github.com/apache/beam/pull/13188#discussion_r512315212", "createdAt": "2020-10-26T22:49:47Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange.go", "diffHunk": "@@ -89,6 +89,28 @@ func (r Restriction) EvenSplits(num int64) (splits []Restriction) {\n \treturn splits\n }\n \n+// SizedSplits splits a restriction into multiple restrictions of the given\n+// size. If the restriction cannot be evenly split, the final restriction will\n+// be the remainder.\n+//\n+// Example: (0, 24) split into size 10s -> {(0, 10), (10, 20), (20, 24)}\n+//\n+// Size should be greater than 0. Otherwise there is no way to split the\n+// restriction and this function will return the original restriction.\n+func (r Restriction) SizedSplits(size int64) (splits []Restriction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41e52307883b195ee1d1ab7ea4fc30440a6d435b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5MDQ5MA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13188#discussion_r513190490", "createdAt": "2020-10-28T05:33:56Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange.go", "diffHunk": "@@ -89,6 +89,28 @@ func (r Restriction) EvenSplits(num int64) (splits []Restriction) {\n \treturn splits\n }\n \n+// SizedSplits splits a restriction into multiple restrictions of the given\n+// size. If the restriction cannot be evenly split, the final restriction will\n+// be the remainder.\n+//\n+// Example: (0, 24) split into size 10s -> {(0, 10), (10, 20), (20, 24)}\n+//\n+// Size should be greater than 0. Otherwise there is no way to split the\n+// restriction and this function will return the original restriction.\n+func (r Restriction) SizedSplits(size int64) (splits []Restriction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNTIxMg=="}, "originalCommit": {"oid": "41e52307883b195ee1d1ab7ea4fc30440a6d435b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODYyMzcwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODo0MDo0M1rOHp4eJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOToyMTozOFrOHp56QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3ODg4Nw==", "bodyText": "Consider adding an exact case too eg.\nStart 7, End 17\nsize 5\n{7, 12}, {12, 17}\nIIUC the implementation correctly.\nIf I understand the", "url": "https://github.com/apache/beam/pull/13188#discussion_r513678887", "createdAt": "2020-10-28T18:40:43Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -63,10 +63,87 @@ func TestRestriction_EvenSplits(t *testing.T) {\n \t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n \t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n \t\t\t\t}\n-\t\t\t\t// Check: All elements are still in a split restrictions. This\n-\t\t\t\t// logic assumes that the splits are returned in order which\n-\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n-\t\t\t\t// with the assumption.\n+\t\t\t\t// Check: All elements are still in a split restriction and\n+\t\t\t\t// the restrictions are in the appropriate ascending order.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestRestriction_SizedSplits tests various splits and checks that they all\n+// follow the contract for SizedSplits. This means that all restrictions match\n+// the given size unless it is a remainder, and that each element is present\n+// in the split restrictions.\n+func TestRestriction_SizedSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tsize int64\n+\t\twant []Restriction\n+\t}{\n+\t\t{\n+\t\t\trest: Restriction{Start: 0, End: 11},\n+\t\t\tsize: 5,\n+\t\t\twant: []Restriction{{0, 5}, {5, 10}, {10, 11}},\n+\t\t},\n+\t\t{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d290ea3e7dc8304193e446f1a6d1e3b7a79d224a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwMjQ2NQ==", "bodyText": "Yeah, that seems like a good idea. I'll add one more case before merging.", "url": "https://github.com/apache/beam/pull/13188#discussion_r513702465", "createdAt": "2020-10-28T19:21:38Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/io/rtrackers/offsetrange/offsetrange_test.go", "diffHunk": "@@ -63,10 +63,87 @@ func TestRestriction_EvenSplits(t *testing.T) {\n \t\t\t\t\tt.Errorf(\"split restriction [%v, %v] has unexpected size. got: %v, want: %v or %v\",\n \t\t\t\t\t\tsplit.Start, split.End, size, min, min+1)\n \t\t\t\t}\n-\t\t\t\t// Check: All elements are still in a split restrictions. This\n-\t\t\t\t// logic assumes that the splits are returned in order which\n-\t\t\t\t// isn't guaranteed by EvenSplits, but this check is way easier\n-\t\t\t\t// with the assumption.\n+\t\t\t\t// Check: All elements are still in a split restriction and\n+\t\t\t\t// the restrictions are in the appropriate ascending order.\n+\t\t\t\tif split.Start != prevEnd {\n+\t\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\t\tprevEnd, split.Start)\n+\t\t\t\t} else {\n+\t\t\t\t\tprevEnd = split.End\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif prevEnd != r.End {\n+\t\t\t\tt.Errorf(\"restriction range [%v, %v] missing after splits.\",\n+\t\t\t\t\tprevEnd, r.End)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+// TestRestriction_SizedSplits tests various splits and checks that they all\n+// follow the contract for SizedSplits. This means that all restrictions match\n+// the given size unless it is a remainder, and that each element is present\n+// in the split restrictions.\n+func TestRestriction_SizedSplits(t *testing.T) {\n+\ttests := []struct {\n+\t\trest Restriction\n+\t\tsize int64\n+\t\twant []Restriction\n+\t}{\n+\t\t{\n+\t\t\trest: Restriction{Start: 0, End: 11},\n+\t\t\tsize: 5,\n+\t\t\twant: []Restriction{{0, 5}, {5, 10}, {10, 11}},\n+\t\t},\n+\t\t{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3ODg4Nw=="}, "originalCommit": {"oid": "d290ea3e7dc8304193e446f1a6d1e3b7a79d224a"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2846, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}