{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDQzMTM5", "number": 11803, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo1ODo0NFrOD_ZKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDo0MDo0M1rOD_Z7zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Nzk5MDcxOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/go.mod", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo1ODo0NFrOGaCCVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo1ODo0NFrOGaCCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0OTUyNw==", "bodyText": "Just realized that the GroupByKey and CoGroupByKey are not using the same Go version as the others. Can we make all of them uniform?", "url": "https://github.com/apache/beam/pull/11803#discussion_r429949527", "createdAt": "2020-05-25T13:58:44Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/go.mod", "diffHunk": "@@ -0,0 +1,26 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+module cogroupbykey\n+\n+go 1.14", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODAwMTE4OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowMjowNFrOGaCI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowMjowNFrOGaCI-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MTIyNQ==", "bodyText": "Nice trick!", "url": "https://github.com/apache/beam/pull/11803#discussion_r429951225", "createdAt": "2020-05-25T14:02:04Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, fruits beam.PCollection, countries beam.PCollection) beam.PCollection {\n+\tfruitsKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, fruits)\n+\n+\tcountriesKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, countries)\n+\n+\tgrouped := beam.CoGroupByKey(s, fruitsKV, countriesKV)\n+\treturn beam.ParDo(s, func(key string, f func(*string) bool, c func(*string) bool, emit func(string)) {\n+\t\tv := &WordsAlphabet{\n+\t\t\tAlphabet: key,\n+\t\t}\n+\t\tf(&v.Fruit)\n+\t\tc(&v.Country)\n+\t\temit(v.String())\n+\t}, grouped)\n+}\n+\n+type WordsAlphabet struct {\n+\tAlphabet string\n+\tFruit string\n+\tCountry string\n+}\n+\n+func (wa *WordsAlphabet) String() string {\n+\treturn fmt.Sprintf(\"WordsAlphabet%+v\", *wa)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODA5MjM2OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozMTo0OFrOGaDBRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoxNzowM1rOGbMWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NTYzOQ==", "bodyText": "I understand the convention of Go that prefers shorter variable name, but I personally find that f and c are cryptic.\nBut if it's well understood, I guess I'm just too old for this :)\nBtw, I like the variable naming in the examples at the top of the godoc.\nhttps://godoc.org/github.com/apache/beam/sdks/go/pkg/beam", "url": "https://github.com/apache/beam/pull/11803#discussion_r429965639", "createdAt": "2020-05-25T14:31:48Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, fruits beam.PCollection, countries beam.PCollection) beam.PCollection {\n+\tfruitsKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, fruits)\n+\n+\tcountriesKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, countries)\n+\n+\tgrouped := beam.CoGroupByKey(s, fruitsKV, countriesKV)\n+\treturn beam.ParDo(s, func(key string, f func(*string) bool, c func(*string) bool, emit func(string)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3NDk3OQ==", "bodyText": "I agree with you and realizing for code readability purposes it makes sense.  I created BEAM-10091 when we are all complete with the series of Go SDK katas.  I'd like to perform an overall cleanup for naming consistency and code readability.\nFor now, I will adjust the current CoGroupByKey lesson task for code readability.  Thank you, Henry.", "url": "https://github.com/apache/beam/pull/11803#discussion_r430474979", "createdAt": "2020-05-26T14:53:29Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, fruits beam.PCollection, countries beam.PCollection) beam.PCollection {\n+\tfruitsKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, fruits)\n+\n+\tcountriesKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, countries)\n+\n+\tgrouped := beam.CoGroupByKey(s, fruitsKV, countriesKV)\n+\treturn beam.ParDo(s, func(key string, f func(*string) bool, c func(*string) bool, emit func(string)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NTYzOQ=="}, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMjM3Nw==", "bodyText": "+1 to using unambiguous names here.\nIn this case it's especially important to disambiguate between the iterator parameters (currently f and c) and the emiter parameter since they're both function parameters.\neg, using iter1, iter2 would be better than unrelated single character names. Also +1 to doing a global cleanup instead of immediately back updating everything previously. That said, there's no harm in starting in this PR.", "url": "https://github.com/apache/beam/pull/11803#discussion_r430512377", "createdAt": "2020-05-26T15:40:27Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, fruits beam.PCollection, countries beam.PCollection) beam.PCollection {\n+\tfruitsKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, fruits)\n+\n+\tcountriesKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, countries)\n+\n+\tgrouped := beam.CoGroupByKey(s, fruitsKV, countriesKV)\n+\treturn beam.ParDo(s, func(key string, f func(*string) bool, c func(*string) bool, emit func(string)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NTYzOQ=="}, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NzAxOA==", "bodyText": "Thanks for creating the cleanup task!", "url": "https://github.com/apache/beam/pull/11803#discussion_r431167018", "createdAt": "2020-05-27T14:17:03Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, fruits beam.PCollection, countries beam.PCollection) beam.PCollection {\n+\tfruitsKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, fruits)\n+\n+\tcountriesKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, countries)\n+\n+\tgrouped := beam.CoGroupByKey(s, fruitsKV, countriesKV)\n+\treturn beam.ParDo(s, func(key string, f func(*string) bool, c func(*string) bool, emit func(string)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NTYzOQ=="}, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODA5MzY4OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozMjoxM1rOGaDCFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozMjoxM1rOGaDCFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NTg0NQ==", "bodyText": "Why not using wa here so that not to confuse with Value?", "url": "https://github.com/apache/beam/pull/11803#discussion_r429965845", "createdAt": "2020-05-25T14:32:13Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,52 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, fruits beam.PCollection, countries beam.PCollection) beam.PCollection {\n+\tfruitsKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, fruits)\n+\n+\tcountriesKV := beam.ParDo(s, func(e string) (string, string) {\n+\t\treturn string(e[0]), e\n+\t}, countries)\n+\n+\tgrouped := beam.CoGroupByKey(s, fruitsKV, countriesKV)\n+\treturn beam.ParDo(s, func(key string, f func(*string) bool, c func(*string) bool, emit func(string)) {\n+\t\tv := &WordsAlphabet{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODEwNzA5OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozNjo1OVrOGaDKxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo0NTozOVrOGakoqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2ODA2OA==", "bodyText": "Is there any documentation available that explains about this DoFn variation?\nI still couldn't find a good programming guide for the Go version.", "url": "https://github.com/apache/beam/pull/11803#discussion_r429968068", "createdAt": "2020-05-25T14:36:59Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "diffHunk": "@@ -0,0 +1,104 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# CoGroupByKey\n+\n+CoGroupByKey performs a relational join of two or more key/value PCollections that have the same \n+key type.\n+\n+**Kata:** Implement a [beam.CoGroupByKey](https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey) \n+transform that join words by the first alphabetical letter, and then produces the string representation of the \n+WordsAlphabet model.\n+\n+<div class=\"hint\">\n+    Refer to\n+    <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+    to solve this problem.\n+</div>\n+\n+<div class=\"hint\">\n+  Refer to the Beam Programming Guide\n+  <a href=\"https://beam.apache.org/documentation/programming-guide/#cogroupbykey\">\n+    \"CoGroupByKey\"</a> section for more information.\n+</div>\n+\n+<div class=\"hint\">\n+  Think of this problem in three stages.  First, create key/value pairs of PCollections called KV\n+  for fruits and countries, pairing the first character with the word.  Next, apply CoGroupByKey to the KVs\n+  followed by a ParDo.\n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned how to make key/value PCollections called KV.  Now we have \n+  two to make from fruits and countries.\n+  \n+  To return as a KV, you can return two values from your DoFn. The first return value represents the Key, and \n+  the second return value represents the Value.  An example is shown below.\n+  \n+```\n+func doFn(element string) (string, string) {\n+    key := string(element[0])\n+    value := element\n+    return key, value\n+}\n+``` \n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned that \n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> takes a single KV.\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+  takes more than one KV.\n+</div>\n+\n+<div class=\"hint\">\n+  Our final step in this problem requires a\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">beam.ParDo</a>\n+  with a DoFn that's different than what we've seen in previous lessons.  In the previous step we should\n+  have a PCollection acquired from CoGroupByKey.  A ParDo for that PCollection expects a DoFn that looks\n+  like the following. \n+  \n+  ```\n+  func doFn(key string, aKV func(*string) bool, anotherKV func(*string) bool, emit func(string)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3ODk4MA==", "bodyText": "I couldn't find any and solved this through analyzing the error output.  @lostluck if/whenever you have the chance, could you let us know if this is correct?", "url": "https://github.com/apache/beam/pull/11803#discussion_r430478980", "createdAt": "2020-05-26T14:58:49Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "diffHunk": "@@ -0,0 +1,104 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# CoGroupByKey\n+\n+CoGroupByKey performs a relational join of two or more key/value PCollections that have the same \n+key type.\n+\n+**Kata:** Implement a [beam.CoGroupByKey](https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey) \n+transform that join words by the first alphabetical letter, and then produces the string representation of the \n+WordsAlphabet model.\n+\n+<div class=\"hint\">\n+    Refer to\n+    <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+    to solve this problem.\n+</div>\n+\n+<div class=\"hint\">\n+  Refer to the Beam Programming Guide\n+  <a href=\"https://beam.apache.org/documentation/programming-guide/#cogroupbykey\">\n+    \"CoGroupByKey\"</a> section for more information.\n+</div>\n+\n+<div class=\"hint\">\n+  Think of this problem in three stages.  First, create key/value pairs of PCollections called KV\n+  for fruits and countries, pairing the first character with the word.  Next, apply CoGroupByKey to the KVs\n+  followed by a ParDo.\n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned how to make key/value PCollections called KV.  Now we have \n+  two to make from fruits and countries.\n+  \n+  To return as a KV, you can return two values from your DoFn. The first return value represents the Key, and \n+  the second return value represents the Value.  An example is shown below.\n+  \n+```\n+func doFn(element string) (string, string) {\n+    key := string(element[0])\n+    value := element\n+    return key, value\n+}\n+``` \n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned that \n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> takes a single KV.\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+  takes more than one KV.\n+</div>\n+\n+<div class=\"hint\">\n+  Our final step in this problem requires a\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">beam.ParDo</a>\n+  with a DoFn that's different than what we've seen in previous lessons.  In the previous step we should\n+  have a PCollection acquired from CoGroupByKey.  A ParDo for that PCollection expects a DoFn that looks\n+  like the following. \n+  \n+  ```\n+  func doFn(key string, aKV func(*string) bool, anotherKV func(*string) bool, emit func(string)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2ODA2OA=="}, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNTQ4OQ==", "bodyText": "GroupByKey by itself does have a single example attached to it, but CoGBK does not, nor does it explain it's relationship to GBK (it's a generalization of GBK that groups multiple PCollection KVs into a CoGBK<K, V1, V2..> )\nThe go docs definitely be improved in this regard.", "url": "https://github.com/apache/beam/pull/11803#discussion_r430515489", "createdAt": "2020-05-26T15:44:22Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "diffHunk": "@@ -0,0 +1,104 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# CoGroupByKey\n+\n+CoGroupByKey performs a relational join of two or more key/value PCollections that have the same \n+key type.\n+\n+**Kata:** Implement a [beam.CoGroupByKey](https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey) \n+transform that join words by the first alphabetical letter, and then produces the string representation of the \n+WordsAlphabet model.\n+\n+<div class=\"hint\">\n+    Refer to\n+    <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+    to solve this problem.\n+</div>\n+\n+<div class=\"hint\">\n+  Refer to the Beam Programming Guide\n+  <a href=\"https://beam.apache.org/documentation/programming-guide/#cogroupbykey\">\n+    \"CoGroupByKey\"</a> section for more information.\n+</div>\n+\n+<div class=\"hint\">\n+  Think of this problem in three stages.  First, create key/value pairs of PCollections called KV\n+  for fruits and countries, pairing the first character with the word.  Next, apply CoGroupByKey to the KVs\n+  followed by a ParDo.\n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned how to make key/value PCollections called KV.  Now we have \n+  two to make from fruits and countries.\n+  \n+  To return as a KV, you can return two values from your DoFn. The first return value represents the Key, and \n+  the second return value represents the Value.  An example is shown below.\n+  \n+```\n+func doFn(element string) (string, string) {\n+    key := string(element[0])\n+    value := element\n+    return key, value\n+}\n+``` \n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned that \n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> takes a single KV.\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+  takes more than one KV.\n+</div>\n+\n+<div class=\"hint\">\n+  Our final step in this problem requires a\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">beam.ParDo</a>\n+  with a DoFn that's different than what we've seen in previous lessons.  In the previous step we should\n+  have a PCollection acquired from CoGroupByKey.  A ParDo for that PCollection expects a DoFn that looks\n+  like the following. \n+  \n+  ```\n+  func doFn(key string, aKV func(*string) bool, anotherKV func(*string) bool, emit func(string)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2ODA2OA=="}, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNjM5NQ==", "bodyText": "I did write a better guide for the Go SDK last year, but never go around to exporting it from Google internal. It's on my list of things to do before declaring the SDK is no longer experimental.", "url": "https://github.com/apache/beam/pull/11803#discussion_r430516395", "createdAt": "2020-05-26T15:45:39Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "diffHunk": "@@ -0,0 +1,104 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# CoGroupByKey\n+\n+CoGroupByKey performs a relational join of two or more key/value PCollections that have the same \n+key type.\n+\n+**Kata:** Implement a [beam.CoGroupByKey](https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey) \n+transform that join words by the first alphabetical letter, and then produces the string representation of the \n+WordsAlphabet model.\n+\n+<div class=\"hint\">\n+    Refer to\n+    <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+    to solve this problem.\n+</div>\n+\n+<div class=\"hint\">\n+  Refer to the Beam Programming Guide\n+  <a href=\"https://beam.apache.org/documentation/programming-guide/#cogroupbykey\">\n+    \"CoGroupByKey\"</a> section for more information.\n+</div>\n+\n+<div class=\"hint\">\n+  Think of this problem in three stages.  First, create key/value pairs of PCollections called KV\n+  for fruits and countries, pairing the first character with the word.  Next, apply CoGroupByKey to the KVs\n+  followed by a ParDo.\n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned how to make key/value PCollections called KV.  Now we have \n+  two to make from fruits and countries.\n+  \n+  To return as a KV, you can return two values from your DoFn. The first return value represents the Key, and \n+  the second return value represents the Value.  An example is shown below.\n+  \n+```\n+func doFn(element string) (string, string) {\n+    key := string(element[0])\n+    value := element\n+    return key, value\n+}\n+``` \n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned that \n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> takes a single KV.\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+  takes more than one KV.\n+</div>\n+\n+<div class=\"hint\">\n+  Our final step in this problem requires a\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">beam.ParDo</a>\n+  with a DoFn that's different than what we've seen in previous lessons.  In the previous step we should\n+  have a PCollection acquired from CoGroupByKey.  A ParDo for that PCollection expects a DoFn that looks\n+  like the following. \n+  \n+  ```\n+  func doFn(key string, aKV func(*string) bool, anotherKV func(*string) bool, emit func(string)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2ODA2OA=="}, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODExNzkwOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDo0MDo0M1rOGaDRbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo0Njo1MFrOGaroOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2OTc3Mw==", "bodyText": "If I understand correctly, it seems that func(*string) bool should assign the value of V to the passed-in variable pointer, not the KV?\nBorrowing the concept of the Java version, these functions behave similarly to CoGbkResult.get() based on the sequence of the passed in PCollection?", "url": "https://github.com/apache/beam/pull/11803#discussion_r429969773", "createdAt": "2020-05-25T14:40:43Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "diffHunk": "@@ -0,0 +1,104 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# CoGroupByKey\n+\n+CoGroupByKey performs a relational join of two or more key/value PCollections that have the same \n+key type.\n+\n+**Kata:** Implement a [beam.CoGroupByKey](https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey) \n+transform that join words by the first alphabetical letter, and then produces the string representation of the \n+WordsAlphabet model.\n+\n+<div class=\"hint\">\n+    Refer to\n+    <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+    to solve this problem.\n+</div>\n+\n+<div class=\"hint\">\n+  Refer to the Beam Programming Guide\n+  <a href=\"https://beam.apache.org/documentation/programming-guide/#cogroupbykey\">\n+    \"CoGroupByKey\"</a> section for more information.\n+</div>\n+\n+<div class=\"hint\">\n+  Think of this problem in three stages.  First, create key/value pairs of PCollections called KV\n+  for fruits and countries, pairing the first character with the word.  Next, apply CoGroupByKey to the KVs\n+  followed by a ParDo.\n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned how to make key/value PCollections called KV.  Now we have \n+  two to make from fruits and countries.\n+  \n+  To return as a KV, you can return two values from your DoFn. The first return value represents the Key, and \n+  the second return value represents the Value.  An example is shown below.\n+  \n+```\n+func doFn(element string) (string, string) {\n+    key := string(element[0])\n+    value := element\n+    return key, value\n+}\n+``` \n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned that \n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> takes a single KV.\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+  takes more than one KV.\n+</div>\n+\n+<div class=\"hint\">\n+  Our final step in this problem requires a\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">beam.ParDo</a>\n+  with a DoFn that's different than what we've seen in previous lessons.  In the previous step we should\n+  have a PCollection acquired from CoGroupByKey.  A ParDo for that PCollection expects a DoFn that looks\n+  like the following. \n+  \n+  ```\n+  func doFn(key string, aKV func(*string) bool, anotherKV func(*string) bool, emit func(string)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMDk3MA==", "bodyText": "Yes I believe this is correct.", "url": "https://github.com/apache/beam/pull/11803#discussion_r430630970", "createdAt": "2020-05-26T18:46:50Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/CoGroupByKey/CoGroupByKey/task.md", "diffHunk": "@@ -0,0 +1,104 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# CoGroupByKey\n+\n+CoGroupByKey performs a relational join of two or more key/value PCollections that have the same \n+key type.\n+\n+**Kata:** Implement a [beam.CoGroupByKey](https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey) \n+transform that join words by the first alphabetical letter, and then produces the string representation of the \n+WordsAlphabet model.\n+\n+<div class=\"hint\">\n+    Refer to\n+    <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+    to solve this problem.\n+</div>\n+\n+<div class=\"hint\">\n+  Refer to the Beam Programming Guide\n+  <a href=\"https://beam.apache.org/documentation/programming-guide/#cogroupbykey\">\n+    \"CoGroupByKey\"</a> section for more information.\n+</div>\n+\n+<div class=\"hint\">\n+  Think of this problem in three stages.  First, create key/value pairs of PCollections called KV\n+  for fruits and countries, pairing the first character with the word.  Next, apply CoGroupByKey to the KVs\n+  followed by a ParDo.\n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned how to make key/value PCollections called KV.  Now we have \n+  two to make from fruits and countries.\n+  \n+  To return as a KV, you can return two values from your DoFn. The first return value represents the Key, and \n+  the second return value represents the Value.  An example is shown below.\n+  \n+```\n+func doFn(element string) (string, string) {\n+    key := string(element[0])\n+    value := element\n+    return key, value\n+}\n+``` \n+</div>\n+\n+<div class=\"hint\">\n+  In the last lesson we learned that \n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#GroupByKey\">\n+  beam.GroupByKey</a> takes a single KV.\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#CoGroupByKey\">beam.CoGroupByKey</a>\n+  takes more than one KV.\n+</div>\n+\n+<div class=\"hint\">\n+  Our final step in this problem requires a\n+  <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">beam.ParDo</a>\n+  with a DoFn that's different than what we've seen in previous lessons.  In the previous step we should\n+  have a PCollection acquired from CoGroupByKey.  A ParDo for that PCollection expects a DoFn that looks\n+  like the following. \n+  \n+  ```\n+  func doFn(key string, aKV func(*string) bool, anotherKV func(*string) bool, emit func(string)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2OTc3Mw=="}, "originalCommit": {"oid": "4b0efc7ce5ff702dec9c6d2dda50d16aa518d96c"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3694, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}