{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODM3NzM0", "number": 12882, "title": "[BEAM-10814][BEAM-10570] DataframeTransform outputs elements", "bodyText": "This PR adds the ability for DataframeTransform to produce element-wise PCollections, via a new UnbatchPandas transform. The original behavior is still available, with a yield_dataframes=True option.\nIn order to support this, the PR also adds more robust support for converting between native Python types and pandas/numpy dtypes. Note that pandas' catch-all np.object type is mapped to typing.Any. This PR also closes BEAM-10570 - it adds support for RowCoder to encode fields with arbitrary Python types using FastPrimitivesCoder.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-20T00:12:09Z", "url": "https://github.com/apache/beam/pull/12882", "merged": true, "mergeCommit": {"oid": "d5967d16a070026d093c2f1e49d676bcdad94ab5"}, "closed": true, "closedAt": "2020-09-23T03:39:47Z", "author": {"login": "TheNeuralBit"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLF58WgFqTQ5MjE3ODc4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLu1TBgFqTQ5NDgxOTE0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTc4Nzg0", "url": "https://github.com/apache/beam/pull/12882#pullrequestreview-492178784", "createdAt": "2020-09-20T07:45:06Z", "commit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwNzo0NTowNlrOHU40yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwODowMTo1MlrOHU45_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2NDU4NA==", "bodyText": "Put ()'s around (key, pc) for better formatting.", "url": "https://github.com/apache/beam/pull/12882#discussion_r491664584", "createdAt": "2020-09-20T07:45:06Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -118,6 +119,15 @@ def extract_input(placeholder):\n              } | label >> transforms._DataframeExpressionsTransform(\n                  dict((ix, df._expr) for ix, df in enumerate(\n                      dataframes)))  # type: Dict[Any, pvalue.PCollection]\n+\n+  if not yield_dataframes:\n+    results = {\n+        key: pc | \"Unbatch '%s'\" % dataframes[key]._expr._id >>\n+        schemas.UnbatchPandas(dataframes[key]._expr.proxy())\n+        for key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2NDc3Ng==", "bodyText": "We should consider whether we want flattening here (e.g. with dotted attributes). Let's at least mark this paragraph as subject to change.", "url": "https://github.com/apache/beam/pull/12882#discussion_r491664776", "createdAt": "2020-09-20T07:48:07Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -15,25 +15,129 @@\n # limitations under the License.\n #\n \n-\"\"\"Utilities for relating schema-aware PCollections and dataframe transforms.\n+r\"\"\"Utilities for relating schema-aware PCollections and dataframe transforms.\n+\n+pandas dtype               Python typing\n+np.int{8,16,32,64}      <-----> np.int{8,16,32,64}*\n+pd.Int{8,16,32,64}Dtype <-----> Optional[np.int{8,16,32,64}]*\n+np.float{32,64}         <-----> Optional[np.float{32,64}]\n+                           \\--- np.float{32,64}\n+np.dtype('S')           <-----> bytes\n+Not supported           <------ Optional[bytes]\n+np.bool                 <-----> np.bool\n+\n+* int, float, bool are treated the same as np.int64, np.float64, np.bool\n+\n+Any unknown or unsupported types are trested as Any and shunted to\n+np.object:\n+\n+np.object               <-----> Any\n+\n+Strings and nullable Booleans are handled differently when using pandas 0.x vs.\n+1.x. pandas 0.x has no mapping for these types, so they are shunted lossily to\n+  np.object.\n+\n+pandas 0.x:\n+np.object         <------ Optional[bool]\n+                     \\--- Optional[str]\n+                      \\-- str\n+\n+pandas 1.x:\n+pd.BooleanDType() <-----> Optional[bool]\n+pd.StringDType()  <-----> Optional[str]\n+                     \\--- str\n+\n+Pandas does not support hierarchical data natively. All structured types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2NDg4Nw==", "bodyText": "This will break for betas, rcs, etc. Maybe just do int(pd.__version__.split('.')[0])", "url": "https://github.com/apache/beam/pull/12882#discussion_r491664887", "createdAt": "2020-09-20T07:49:41Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -15,25 +15,129 @@\n # limitations under the License.\n #\n \n-\"\"\"Utilities for relating schema-aware PCollections and dataframe transforms.\n+r\"\"\"Utilities for relating schema-aware PCollections and dataframe transforms.\n+\n+pandas dtype               Python typing\n+np.int{8,16,32,64}      <-----> np.int{8,16,32,64}*\n+pd.Int{8,16,32,64}Dtype <-----> Optional[np.int{8,16,32,64}]*\n+np.float{32,64}         <-----> Optional[np.float{32,64}]\n+                           \\--- np.float{32,64}\n+np.dtype('S')           <-----> bytes\n+Not supported           <------ Optional[bytes]\n+np.bool                 <-----> np.bool\n+\n+* int, float, bool are treated the same as np.int64, np.float64, np.bool\n+\n+Any unknown or unsupported types are trested as Any and shunted to\n+np.object:\n+\n+np.object               <-----> Any\n+\n+Strings and nullable Booleans are handled differently when using pandas 0.x vs.\n+1.x. pandas 0.x has no mapping for these types, so they are shunted lossily to\n+  np.object.\n+\n+pandas 0.x:\n+np.object         <------ Optional[bool]\n+                     \\--- Optional[str]\n+                      \\-- str\n+\n+pandas 1.x:\n+pd.BooleanDType() <-----> Optional[bool]\n+pd.StringDType()  <-----> Optional[str]\n+                     \\--- str\n+\n+Pandas does not support hierarchical data natively. All structured types\n+(Sequence, Mapping, nested NamedTuple types), will be shunted lossily to\n+np.object/Any.\n+\n+TODO: Mapping for date/time types\n+https://pandas.pydata.org/docs/user_guide/timeseries.html#overview\n+\n+timestamps and timedeltas in pandas always use nanosecond precision\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n-import typing\n+from typing import Any\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import TypeVar\n+from typing import Union\n \n+import numpy as np\n import pandas as pd\n \n import apache_beam as beam\n from apache_beam import typehints\n+from apache_beam.portability.api import schema_pb2\n from apache_beam.transforms.util import BatchElements\n+from apache_beam.typehints.native_type_compatibility import _match_is_optional\n from apache_beam.typehints.schemas import named_fields_from_element_type\n+from apache_beam.typehints.schemas import named_fields_to_schema\n+from apache_beam.typehints.schemas import named_tuple_from_schema\n+from apache_beam.typehints.schemas import named_tuple_to_schema\n+from apache_beam.utils import proto_utils\n+\n+__all__ = (\n+    'BatchRowsAsDataFrame',\n+    'generate_proxy',\n+    'UnbatchPandas',\n+    'element_type_from_proxy')\n+\n+T = TypeVar('T', bound=NamedTuple)\n+\n+PD_MAJOR, _, _ = map(int, pd.__version__.split('.'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2NDk3OQ==", "bodyText": "extra whitespace?", "url": "https://github.com/apache/beam/pull/12882#discussion_r491664979", "createdAt": "2020-09-20T07:50:56Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -55,17 +159,149 @@ def expand(self, pcoll):\n         lambda batch: pd.DataFrame.from_records(batch, columns=columns))\n \n \n-def _make_empty_series(name, typ):\n-  try:\n-    return pd.Series(name=name, dtype=typ)\n-  except TypeError:\n-    raise TypeError(\"Unable to convert type '%s' for field '%s'\" % (name, typ))\n+def _make_proxy_series(name, typehint):\n+  # Default to np.object. This is lossy, we won't be able to recover the type\n+  # at the output.\n+  dtype = BEAM_TO_PANDAS.get(typehint, np.object)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2NTA2Mg==", "bodyText": "Is whitespace stripped at the beginning of a docstring? (Similarly below.)", "url": "https://github.com/apache/beam/pull/12882#discussion_r491665062", "createdAt": "2020-09-20T07:52:01Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -55,17 +159,149 @@ def expand(self, pcoll):\n         lambda batch: pd.DataFrame.from_records(batch, columns=columns))\n \n \n-def _make_empty_series(name, typ):\n-  try:\n-    return pd.Series(name=name, dtype=typ)\n-  except TypeError:\n-    raise TypeError(\"Unable to convert type '%s' for field '%s'\" % (name, typ))\n+def _make_proxy_series(name, typehint):\n+  # Default to np.object. This is lossy, we won't be able to recover the type\n+  # at the output.\n+  dtype = BEAM_TO_PANDAS.get(typehint, np.object)\n+\n+  return pd.Series(name=name, dtype=dtype)\n \n \n def generate_proxy(element_type):\n   # type: (type) -> pd.DataFrame\n-  return pd.DataFrame({\n-      name: _make_empty_series(name, typ)\n-      for name,\n-      typ in named_fields_from_element_type(element_type)\n-  })\n+\n+  \"\"\" Generate a proxy pandas object for the given PCollection element_type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2NTQwNg==", "bodyText": "I was wondering about this as well--do we want to return the index iff it's a multi-index or it's named? Should we make whether to return the index another option?", "url": "https://github.com/apache/beam/pull/12882#discussion_r491665406", "createdAt": "2020-09-20T07:55:56Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -55,17 +159,149 @@ def expand(self, pcoll):\n         lambda batch: pd.DataFrame.from_records(batch, columns=columns))\n \n \n-def _make_empty_series(name, typ):\n-  try:\n-    return pd.Series(name=name, dtype=typ)\n-  except TypeError:\n-    raise TypeError(\"Unable to convert type '%s' for field '%s'\" % (name, typ))\n+def _make_proxy_series(name, typehint):\n+  # Default to np.object. This is lossy, we won't be able to recover the type\n+  # at the output.\n+  dtype = BEAM_TO_PANDAS.get(typehint, np.object)\n+\n+  return pd.Series(name=name, dtype=dtype)\n \n \n def generate_proxy(element_type):\n   # type: (type) -> pd.DataFrame\n-  return pd.DataFrame({\n-      name: _make_empty_series(name, typ)\n-      for name,\n-      typ in named_fields_from_element_type(element_type)\n-  })\n+\n+  \"\"\" Generate a proxy pandas object for the given PCollection element_type.\n+\n+  Currently only supports generating a DataFrame proxy from a schema-aware\n+  PCollection.\"\"\"\n+  fields = named_fields_from_element_type(element_type)\n+  return pd.DataFrame(\n+      {name: _make_proxy_series(name, typehint)\n+       for name, typehint in fields},\n+      columns=[name for name, _ in fields])\n+\n+\n+def element_type_from_proxy(proxy):\n+  # type: (pd.DataFrame) -> type\n+\n+  \"\"\" Generate an element_type for an element-wise PCollection from a proxy\n+  pandas object. Currently only supports converting the element_type for\n+  a schema-aware PCollection to a proxy DataFrame.\n+\n+  Currently only supports generating a DataFrame proxy from a schema-aware\n+  PCollection.\"\"\"\n+  indices = [] if proxy.index.names == (None, ) else [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2NTkxNg==", "bodyText": "Maybe ..._from_dataframe? (Proxy may not be a dataframe.)", "url": "https://github.com/apache/beam/pull/12882#discussion_r491665916", "createdAt": "2020-09-20T08:01:52Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/schemas.py", "diffHunk": "@@ -55,17 +159,149 @@ def expand(self, pcoll):\n         lambda batch: pd.DataFrame.from_records(batch, columns=columns))\n \n \n-def _make_empty_series(name, typ):\n-  try:\n-    return pd.Series(name=name, dtype=typ)\n-  except TypeError:\n-    raise TypeError(\"Unable to convert type '%s' for field '%s'\" % (name, typ))\n+def _make_proxy_series(name, typehint):\n+  # Default to np.object. This is lossy, we won't be able to recover the type\n+  # at the output.\n+  dtype = BEAM_TO_PANDAS.get(typehint, np.object)\n+\n+  return pd.Series(name=name, dtype=dtype)\n \n \n def generate_proxy(element_type):\n   # type: (type) -> pd.DataFrame\n-  return pd.DataFrame({\n-      name: _make_empty_series(name, typ)\n-      for name,\n-      typ in named_fields_from_element_type(element_type)\n-  })\n+\n+  \"\"\" Generate a proxy pandas object for the given PCollection element_type.\n+\n+  Currently only supports generating a DataFrame proxy from a schema-aware\n+  PCollection.\"\"\"\n+  fields = named_fields_from_element_type(element_type)\n+  return pd.DataFrame(\n+      {name: _make_proxy_series(name, typehint)\n+       for name, typehint in fields},\n+      columns=[name for name, _ in fields])\n+\n+\n+def element_type_from_proxy(proxy):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93cb4d23bdabf1b82f6f378c34bc9677186ffc6"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTE3MzI3", "url": "https://github.com/apache/beam/pull/12882#pullrequestreview-493117327", "createdAt": "2020-09-22T04:15:48Z", "commit": {"oid": "6e01e0b08d89326d46a5d214f7a17556479167b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb60b694c52ab2df2a0f1c899da9ed9d5eb15af4", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/fb60b694c52ab2df2a0f1c899da9ed9d5eb15af4", "committedDate": "2020-09-22T18:34:33Z", "message": "Unknown primitive uses Any"}, "afterCommit": {"oid": "c80993de04bc7752a49b26dd90af2b2e3a9a13df", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/c80993de04bc7752a49b26dd90af2b2e3a9a13df", "committedDate": "2020-09-22T22:09:14Z", "message": "fix io_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3cac41275c5726e4b0a3056648efe4ce614bb2b", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/e3cac41275c5726e4b0a3056648efe4ce614bb2b", "committedDate": "2020-09-23T02:56:42Z", "message": "Add support for encoding 'Any'  with FastPrimitivesCoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a6566055ee8191d737f0f8f9a45c61f85c6e557", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/3a6566055ee8191d737f0f8f9a45c61f85c6e557", "committedDate": "2020-09-23T02:56:46Z", "message": "Add support for 'unbatching' DataframeTransform."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b2ab3cbf54c536d4ca0f4f3e84d5fb1ef4aad63", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/8b2ab3cbf54c536d4ca0f4f3e84d5fb1ef4aad63", "committedDate": "2020-09-23T02:56:46Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31cafeb2ad64a4bd8362f2e56e1b56d27a85574e", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/31cafeb2ad64a4bd8362f2e56e1b56d27a85574e", "committedDate": "2020-09-23T02:56:46Z", "message": "Give user the option to include indexes or not"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a60334e626983424f5d44b07fcc803195cbe3ccb", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/a60334e626983424f5d44b07fcc803195cbe3ccb", "committedDate": "2020-09-23T02:56:46Z", "message": "mypy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53fb1aa1f7fdc52f207e80035029d6048bc793aa", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/53fb1aa1f7fdc52f207e80035029d6048bc793aa", "committedDate": "2020-09-23T02:56:46Z", "message": "docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e9193a05951d7eacbc8f70ab81bcde35af3ba21", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/4e9193a05951d7eacbc8f70ab81bcde35af3ba21", "committedDate": "2020-09-23T02:56:46Z", "message": "Unknown primitive uses Any"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f48b5501709b05f6603d52f299147b499eb9fee", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/0f48b5501709b05f6603d52f299147b499eb9fee", "committedDate": "2020-09-23T02:56:46Z", "message": "fix io_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c86da9504b5ae300ec3b680f54123827db2887f9", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/c86da9504b5ae300ec3b680f54123827db2887f9", "committedDate": "2020-09-23T02:56:46Z", "message": "Don't run python 3.5 in precommit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "369bba0b0573afa3c0fb572632aea7de4b6b622f", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/369bba0b0573afa3c0fb572632aea7de4b6b622f", "committedDate": "2020-09-23T00:16:25Z", "message": "Don't run python 3.5 in precommit"}, "afterCommit": {"oid": "c86da9504b5ae300ec3b680f54123827db2887f9", "author": {"user": {"login": "TheNeuralBit", "name": "Brian Hulette"}}, "url": "https://github.com/apache/beam/commit/c86da9504b5ae300ec3b680f54123827db2887f9", "committedDate": "2020-09-23T02:56:46Z", "message": "Don't run python 3.5 in precommit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODE5MTQw", "url": "https://github.com/apache/beam/pull/12882#pullrequestreview-494819140", "createdAt": "2020-09-23T16:04:15Z", "commit": {"oid": "c86da9504b5ae300ec3b680f54123827db2887f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjowNDoxNVrOHW10hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjowNDoxNVrOHW10hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxMjUxNg==", "bodyText": "FYI @tvalentyn I just merged this PR including a commit to drop python 3.5 in the precommit", "url": "https://github.com/apache/beam/pull/12882#discussion_r493712516", "createdAt": "2020-09-23T16:04:15Z", "author": {"login": "TheNeuralBit"}, "path": "build.gradle", "diffHunk": "@@ -199,7 +199,6 @@ task goIntegrationTests() {\n \n task pythonPreCommit() {\n   dependsOn \":sdks:python:test-suites:tox:pycommon:preCommitPyCommon\"\n-  dependsOn \":sdks:python:test-suites:tox:py35:preCommitPy35\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c86da9504b5ae300ec3b680f54123827db2887f9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2406, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}