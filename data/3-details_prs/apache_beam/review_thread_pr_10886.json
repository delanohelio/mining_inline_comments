{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzUwMzY5", "number": 10886, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOToyMDoxNVrODg0kZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozMzozN1rODg5uYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzQyMzA5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOToyMDoxNVrOFrPMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozMjo1MlrOFr7iSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MjAwMg==", "bodyText": "How about making dict() default value in function definition, instead of _sdk_image_overrides?", "url": "https://github.com/apache/beam/pull/10886#discussion_r380882002", "createdAt": "2020-02-18T19:20:15Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -153,6 +158,9 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n     # User agent information.\n     self.proto.userAgent = dataflow.Environment.UserAgentValue()\n     self.local = 'localhost' in self.google_cloud_options.dataflow_endpoint\n+    self._proto_pipeline = proto_pipeline\n+    self._sdk_image_overrides = (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b8b32fc9092f4f1cd2d63a0ddfb8ab6c6c322c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDA2NA==", "bodyText": "Seems like that results in a lint error (Dangerous default value dict() (builtins.dict) as argument).", "url": "https://github.com/apache/beam/pull/10886#discussion_r380980064", "createdAt": "2020-02-18T22:43:58Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -153,6 +158,9 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n     # User agent information.\n     self.proto.userAgent = dataflow.Environment.UserAgentValue()\n     self.local = 'localhost' in self.google_cloud_options.dataflow_endpoint\n+    self._proto_pipeline = proto_pipeline\n+    self._sdk_image_overrides = (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MjAwMg=="}, "originalCommit": {"oid": "97b8b32fc9092f4f1cd2d63a0ddfb8ab6c6c322c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5Mjk0NA==", "bodyText": "OK. We can leave it as is.", "url": "https://github.com/apache/beam/pull/10886#discussion_r380992944", "createdAt": "2020-02-18T23:17:15Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -153,6 +158,9 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n     # User agent information.\n     self.proto.userAgent = dataflow.Environment.UserAgentValue()\n     self.local = 'localhost' in self.google_cloud_options.dataflow_endpoint\n+    self._proto_pipeline = proto_pipeline\n+    self._sdk_image_overrides = (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MjAwMg=="}, "originalCommit": {"oid": "97b8b32fc9092f4f1cd2d63a0ddfb8ab6c6c322c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwMzkzOA==", "bodyText": "One can also write _sdk_image_overrides or dict().", "url": "https://github.com/apache/beam/pull/10886#discussion_r381003938", "createdAt": "2020-02-18T23:51:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -153,6 +158,9 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n     # User agent information.\n     self.proto.userAgent = dataflow.Environment.UserAgentValue()\n     self.local = 'localhost' in self.google_cloud_options.dataflow_endpoint\n+    self._proto_pipeline = proto_pipeline\n+    self._sdk_image_overrides = (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MjAwMg=="}, "originalCommit": {"oid": "97b8b32fc9092f4f1cd2d63a0ddfb8ab6c6c322c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwODUyMQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10886#discussion_r381608521", "createdAt": "2020-02-19T23:32:52Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -153,6 +158,9 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n     # User agent information.\n     self.proto.userAgent = dataflow.Environment.UserAgentValue()\n     self.local = 'localhost' in self.google_cloud_options.dataflow_endpoint\n+    self._proto_pipeline = proto_pipeline\n+    self._sdk_image_overrides = (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MjAwMg=="}, "originalCommit": {"oid": "97b8b32fc9092f4f1cd2d63a0ddfb8ab6c6c322c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODE5MDA1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/options/pipeline_options.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo1MDozNlrOFrWnYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozMTowMVrOFr7f5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwMzYxOA==", "bodyText": "When, if ever, do we expect the user to provide a reasonable value for this flag?", "url": "https://github.com/apache/beam/pull/10886#discussion_r381003618", "createdAt": "2020-02-18T23:50:36Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -748,6 +748,17 @@ def _add_argparse_args(cls, parser):\n             'worker harness. Default is the container for the version of the '\n             'SDK. Note: currently, only approved Google Cloud Dataflow '\n             'container images may be used here.'))\n+    parser.add_argument(\n+        '--sdk_harness_container_image_overrides',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwNzkxMA==", "bodyText": "Currently this has to be provided for cross-language transforms to work (for Dataflow) since the container URL that we get from Beam does not work for Dataflow. I hope to introduce logic to derive Java container URL from Python in a follow up PR.\nAfter this this will be primary for testing or for users to override the container (similar to worker_harness_container_image option today).", "url": "https://github.com/apache/beam/pull/10886#discussion_r381607910", "createdAt": "2020-02-19T23:31:01Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -748,6 +748,17 @@ def _add_argparse_args(cls, parser):\n             'worker harness. Default is the container for the version of the '\n             'SDK. Note: currently, only approved Google Cloud Dataflow '\n             'container images may be used here.'))\n+    parser.add_argument(\n+        '--sdk_harness_container_image_overrides',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwMzYxOA=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODE5NjYyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo1Mzo1N1rOFrWrhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo0MTozMVrOFr7tEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNDY3OA==", "bodyText": "for pattern, override in sdk_overrides.items()", "url": "https://github.com/apache/beam/pull/10886#discussion_r381004678", "createdAt": "2020-02-18T23:53:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -576,10 +655,25 @@ def create_job(self, job):\n         'A template was just created at location %s', template_location)\n     return None\n \n+  def _apply_sdk_environment_overrides(self, proto_pipeline):\n+    # Update environments based on user provided overrides\n+    sdk_overrides = self._sdk_image_overrides\n+    if sdk_overrides:\n+      for environment in proto_pipeline.components.environments.values():\n+        docker_payload = proto_utils.parse_Bytes(\n+            environment.payload, beam_runner_api_pb2.DockerPayload)\n+        for pattern in sdk_overrides:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMTI4MA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10886#discussion_r381611280", "createdAt": "2020-02-19T23:41:31Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -576,10 +655,25 @@ def create_job(self, job):\n         'A template was just created at location %s', template_location)\n     return None\n \n+  def _apply_sdk_environment_overrides(self, proto_pipeline):\n+    # Update environments based on user provided overrides\n+    sdk_overrides = self._sdk_image_overrides\n+    if sdk_overrides:\n+      for environment in proto_pipeline.components.environments.values():\n+        docker_payload = proto_utils.parse_Bytes(\n+            environment.payload, beam_runner_api_pb2.DockerPayload)\n+        for pattern in sdk_overrides:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNDY3OA=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODE5ODE1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo1NDo0OFrOFrWsiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDowODo1NlrOFr8Npg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNDkzOQ==", "bodyText": "I would have expected to use re.sub(pattern, override, docker_payload.container_image).", "url": "https://github.com/apache/beam/pull/10886#discussion_r381004939", "createdAt": "2020-02-18T23:54:48Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -576,10 +655,25 @@ def create_job(self, job):\n         'A template was just created at location %s', template_location)\n     return None\n \n+  def _apply_sdk_environment_overrides(self, proto_pipeline):\n+    # Update environments based on user provided overrides\n+    sdk_overrides = self._sdk_image_overrides\n+    if sdk_overrides:\n+      for environment in proto_pipeline.components.environments.values():\n+        docker_payload = proto_utils.parse_Bytes(\n+            environment.payload, beam_runner_api_pb2.DockerPayload)\n+        for pattern in sdk_overrides:\n+          override = sdk_overrides[pattern]\n+          if re.match(pattern, docker_payload.container_image):\n+            new_payload = beam_runner_api_pb2.DockerPayload(\n+                container_image=override)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxOTYyMg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10886#discussion_r381619622", "createdAt": "2020-02-20T00:08:56Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -576,10 +655,25 @@ def create_job(self, job):\n         'A template was just created at location %s', template_location)\n     return None\n \n+  def _apply_sdk_environment_overrides(self, proto_pipeline):\n+    # Update environments based on user provided overrides\n+    sdk_overrides = self._sdk_image_overrides\n+    if sdk_overrides:\n+      for environment in proto_pipeline.components.environments.values():\n+        docker_payload = proto_utils.parse_Bytes(\n+            environment.payload, beam_runner_api_pb2.DockerPayload)\n+        for pattern in sdk_overrides:\n+          override = sdk_overrides[pattern]\n+          if re.match(pattern, docker_payload.container_image):\n+            new_payload = beam_runner_api_pb2.DockerPayload(\n+                container_image=override)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNDkzOQ=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIwMDA1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo1NTo0NVrOFrWtsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo1NTo0N1rOFr7-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNTIzNA==", "bodyText": "Would it be safer to copy the proto and update the field, in case other fields get added in the future?", "url": "https://github.com/apache/beam/pull/10886#discussion_r381005234", "createdAt": "2020-02-18T23:55:45Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -576,10 +655,25 @@ def create_job(self, job):\n         'A template was just created at location %s', template_location)\n     return None\n \n+  def _apply_sdk_environment_overrides(self, proto_pipeline):\n+    # Update environments based on user provided overrides\n+    sdk_overrides = self._sdk_image_overrides\n+    if sdk_overrides:\n+      for environment in proto_pipeline.components.environments.values():\n+        docker_payload = proto_utils.parse_Bytes(\n+            environment.payload, beam_runner_api_pb2.DockerPayload)\n+        for pattern in sdk_overrides:\n+          override = sdk_overrides[pattern]\n+          if re.match(pattern, docker_payload.container_image):\n+            new_payload = beam_runner_api_pb2.DockerPayload(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxNTY3Mw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10886#discussion_r381615673", "createdAt": "2020-02-19T23:55:47Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -576,10 +655,25 @@ def create_job(self, job):\n         'A template was just created at location %s', template_location)\n     return None\n \n+  def _apply_sdk_environment_overrides(self, proto_pipeline):\n+    # Update environments based on user provided overrides\n+    sdk_overrides = self._sdk_image_overrides\n+    if sdk_overrides:\n+      for environment in proto_pipeline.components.environments.values():\n+        docker_payload = proto_utils.parse_Bytes(\n+            environment.payload, beam_runner_api_pb2.DockerPayload)\n+        for pattern in sdk_overrides:\n+          override = sdk_overrides[pattern]\n+          if re.match(pattern, docker_payload.container_image):\n+            new_payload = beam_runner_api_pb2.DockerPayload(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNTIzNA=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIwNTk5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo1ODo0NFrOFrWxQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo1ODo0NFrOFrWxQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNjE0NQ==", "bodyText": "This comment seems out of date...", "url": "https://github.com/apache/beam/pull/10886#discussion_r381006145", "createdAt": "2020-02-18T23:58:44Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -133,12 +136,19 @@ def get_output(self, tag=None):\n \n class Environment(object):\n   \"\"\"Wrapper for a dataflow Environment protobuf.\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIxMTYxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowMTo0MFrOFrW0kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozNTo0MlrOFr7l4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNjk5Mw==", "bodyText": "Any reason to not just return self._pipeline_proto.environments.values()? Do we expect unused environments to be there for any reason?", "url": "https://github.com/apache/beam/pull/10886#discussion_r381006993", "createdAt": "2020-02-19T00:01:40Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -301,6 +351,22 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n           dataflow.Environment.SdkPipelineOptionsValue.AdditionalProperty(\n               key='display_data', value=to_json_value(items)))\n \n+  def _get_environments_from_tranforms(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwOTQ0MQ==", "bodyText": "I thought about this and I think it's safer to collect the exact set of environments that we need to execute the pipeline instead of depending on all the environments available in the proto. There's nothing that prevents an external transform (or anywhere else that we update the proto) from including additional environments that are not needed to execute the pipeline.\nFor example, default environment set by Java SDK does not work without replacing the container image (we happen to use the same environment_id for the replacement but could have been otherwise).", "url": "https://github.com/apache/beam/pull/10886#discussion_r381609441", "createdAt": "2020-02-19T23:35:42Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -301,6 +351,22 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n           dataflow.Environment.SdkPipelineOptionsValue.AdditionalProperty(\n               key='display_data', value=to_json_value(items)))\n \n+  def _get_environments_from_tranforms(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNjk5Mw=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIxODg4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNTo0MlrOFrW46Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozOToxMFrOFr7qEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODEwNQ==", "bodyText": "Nit: I'd move this up into the previous loop. Or I'd write this as a list comprehension, e.g.\nenvironment_ids = set(\n    transform.environment_id\n    for transform in self._proto_pipeline.components.transforms.values()\n    if transform.environment_id)\nreturn [self._proto_pipeline.components.environments[id] for id in environment_ids]", "url": "https://github.com/apache/beam/pull/10886#discussion_r381008105", "createdAt": "2020-02-19T00:05:42Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -301,6 +351,22 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n           dataflow.Environment.SdkPipelineOptionsValue.AdditionalProperty(\n               key='display_data', value=to_json_value(items)))\n \n+  def _get_environments_from_tranforms(self):\n+    if not self._proto_pipeline:\n+      return []\n+    environment_ids = []\n+    for transform in self._proto_pipeline.components.transforms.values():\n+      if transform.environment_id not in environment_ids:\n+        environment_ids.append(transform.environment_id)\n+    environments = []\n+    for environment_id in environment_ids:\n+      if not environment_id:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMDUxMg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10886#discussion_r381610512", "createdAt": "2020-02-19T23:39:10Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -301,6 +351,22 @@ def __init__(self, packages, options, environment_version, pipeline_url):\n           dataflow.Environment.SdkPipelineOptionsValue.AdditionalProperty(\n               key='display_data', value=to_json_value(items)))\n \n+  def _get_environments_from_tranforms(self):\n+    if not self._proto_pipeline:\n+      return []\n+    environment_ids = []\n+    for transform in self._proto_pipeline.components.transforms.values():\n+      if transform.environment_id not in environment_ids:\n+        environment_ids.append(transform.environment_id)\n+    environments = []\n+    for environment_id in environment_ids:\n+      if not environment_id:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODEwNQ=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIyMjUwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNzo0NlrOFrW7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo0MDozOVrOFr7r9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODY4MQ==", "bodyText": "Again, one can write\noverrides_dict = dict(override_str.split(',', 1) for override_str in sdk_overrides)", "url": "https://github.com/apache/beam/pull/10886#discussion_r381008681", "createdAt": "2020-02-19T00:07:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -478,6 +544,19 @@ def __init__(self, options):\n         get_credentials=(not self.google_cloud_options.no_auth),\n         http=http_client,\n         response_encoding=get_response_encoding())\n+    self._sdk_image_overrides = self._get_sdk_image_overrides(options)\n+\n+  def _get_sdk_image_overrides(self, pipeline_options):\n+    worker_options = pipeline_options.view_as(WorkerOptions)\n+    sdk_overrides = worker_options.sdk_harness_container_image_overrides\n+    overrides_dict = dict()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMDk5OA==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10886#discussion_r381610998", "createdAt": "2020-02-19T23:40:39Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -478,6 +544,19 @@ def __init__(self, options):\n         get_credentials=(not self.google_cloud_options.no_auth),\n         http=http_client,\n         response_encoding=get_response_encoding())\n+    self._sdk_image_overrides = self._get_sdk_image_overrides(options)\n+\n+  def _get_sdk_image_overrides(self, pipeline_options):\n+    worker_options = pipeline_options.view_as(WorkerOptions)\n+    sdk_overrides = worker_options.sdk_harness_container_image_overrides\n+    overrides_dict = dict()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODY4MQ=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODI2Nzg2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozMzozN1rOFrXWtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDozMzowOFrOFr8pmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTczMw==", "bodyText": "Can None be an optional argument rather than passing it everywhere here?", "url": "https://github.com/apache/beam/pull/10886#discussion_r381015733", "createdAt": "2020-02-19T00:33:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient_test.py", "diffHunk": "@@ -329,7 +402,7 @@ def test_harness_override_default_in_released_sdks(self):\n     env = apiclient.Environment([], #packages\n                                 pipeline_options,\n                                 '2.0.0', #any environment version\n-                                FAKE_PIPELINE_URL)\n+                                FAKE_PIPELINE_URL, None, None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyNjc3OQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/10886#discussion_r381626779", "createdAt": "2020-02-20T00:33:08Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient_test.py", "diffHunk": "@@ -329,7 +402,7 @@ def test_harness_override_default_in_released_sdks(self):\n     env = apiclient.Environment([], #packages\n                                 pipeline_options,\n                                 '2.0.0', #any environment version\n-                                FAKE_PIPELINE_URL)\n+                                FAKE_PIPELINE_URL, None, None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTczMw=="}, "originalCommit": {"oid": "1a7e45e1d12c6016a2968ccf99e39dd4d17c18bb"}, "originalPosition": 184}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2046, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}