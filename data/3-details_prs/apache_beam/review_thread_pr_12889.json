{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNDM4Mzk5", "number": 12889, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo0Njo0NVrOElxjKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo1MTowNVrOElxpQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDQ0NTg2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/wordcount_dataframe.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo0Njo0NVrOHVb6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTowODozN1rOHVesMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIzOTM2NA==", "bodyText": "Maybe use Select here?", "url": "https://github.com/apache/beam/pull/12889#discussion_r492239364", "createdAt": "2020-09-21T17:46:45Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/examples/wordcount_dataframe.py", "diffHunk": "@@ -0,0 +1,73 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A word-counting workflow using dataframes.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import argparse\n+import logging\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import io\n+from apache_beam.dataframe.convert import to_dataframe\n+from apache_beam.io import ReadFromText\n+from apache_beam.options.pipeline_options import PipelineOptions\n+\n+\n+def run(argv=None):\n+  \"\"\"Main entry point; defines and runs the wordcount pipeline.\"\"\"\n+  parser = argparse.ArgumentParser()\n+  parser.add_argument(\n+      '--input',\n+      dest='input',\n+      default='gs://dataflow-samples/shakespeare/kinglear.txt',\n+      help='Input file to process.')\n+  parser.add_argument(\n+      '--output',\n+      dest='output',\n+      required=True,\n+      help='Output file to write results to.')\n+  known_args, pipeline_args = parser.parse_known_args(argv)\n+\n+  # Import this here to avoid pickling the main session.\n+  import re\n+\n+  # The pipeline will be run on exiting the with block.\n+  with beam.Pipeline(options=PipelineOptions(pipeline_args)) as p:\n+\n+    # Read the text file[pattern] into a PCollection.\n+    lines = p | 'Read' >> ReadFromText(known_args.input)\n+\n+    words = (\n+        lines\n+        | 'Split' >> beam.FlatMap(\n+            lambda line: re.findall(r'[\\w]+', line)).with_output_types(str)\n+        # Map to Row objects to generate a schema suitable for conversion to a dataframe.\n+        | 'ToRows' >> beam.Map(lambda word: beam.Row(word=word)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd0e4481c7484b8994524bc83a671eee2e05f56"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NDk3Nw==", "bodyText": "I actually toyed with that, but it's not as natural (or time-saving) for 1-field schemas.", "url": "https://github.com/apache/beam/pull/12889#discussion_r492284977", "createdAt": "2020-09-21T19:08:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/examples/wordcount_dataframe.py", "diffHunk": "@@ -0,0 +1,73 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A word-counting workflow using dataframes.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import argparse\n+import logging\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import io\n+from apache_beam.dataframe.convert import to_dataframe\n+from apache_beam.io import ReadFromText\n+from apache_beam.options.pipeline_options import PipelineOptions\n+\n+\n+def run(argv=None):\n+  \"\"\"Main entry point; defines and runs the wordcount pipeline.\"\"\"\n+  parser = argparse.ArgumentParser()\n+  parser.add_argument(\n+      '--input',\n+      dest='input',\n+      default='gs://dataflow-samples/shakespeare/kinglear.txt',\n+      help='Input file to process.')\n+  parser.add_argument(\n+      '--output',\n+      dest='output',\n+      required=True,\n+      help='Output file to write results to.')\n+  known_args, pipeline_args = parser.parse_known_args(argv)\n+\n+  # Import this here to avoid pickling the main session.\n+  import re\n+\n+  # The pipeline will be run on exiting the with block.\n+  with beam.Pipeline(options=PipelineOptions(pipeline_args)) as p:\n+\n+    # Read the text file[pattern] into a PCollection.\n+    lines = p | 'Read' >> ReadFromText(known_args.input)\n+\n+    words = (\n+        lines\n+        | 'Split' >> beam.FlatMap(\n+            lambda line: re.findall(r'[\\w]+', line)).with_output_types(str)\n+        # Map to Row objects to generate a schema suitable for conversion to a dataframe.\n+        | 'ToRows' >> beam.Map(lambda word: beam.Row(word=word)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIzOTM2NA=="}, "originalCommit": {"oid": "0bd0e4481c7484b8994524bc83a671eee2e05f56"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDQ1NjQ3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/wordcount_dataframe.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo0OTo0NVrOHVcAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTowODowNVrOHVeq5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MTA1Mw==", "bodyText": "It could be nice to tee the counted back to a PCollection and print it as an example of to_pcollection. That's easier to do once unbatching is the default, I can add it as part of #12882 WDYT?", "url": "https://github.com/apache/beam/pull/12889#discussion_r492241053", "createdAt": "2020-09-21T17:49:45Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/examples/wordcount_dataframe.py", "diffHunk": "@@ -0,0 +1,73 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A word-counting workflow using dataframes.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import argparse\n+import logging\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import io\n+from apache_beam.dataframe.convert import to_dataframe\n+from apache_beam.io import ReadFromText\n+from apache_beam.options.pipeline_options import PipelineOptions\n+\n+\n+def run(argv=None):\n+  \"\"\"Main entry point; defines and runs the wordcount pipeline.\"\"\"\n+  parser = argparse.ArgumentParser()\n+  parser.add_argument(\n+      '--input',\n+      dest='input',\n+      default='gs://dataflow-samples/shakespeare/kinglear.txt',\n+      help='Input file to process.')\n+  parser.add_argument(\n+      '--output',\n+      dest='output',\n+      required=True,\n+      help='Output file to write results to.')\n+  known_args, pipeline_args = parser.parse_known_args(argv)\n+\n+  # Import this here to avoid pickling the main session.\n+  import re\n+\n+  # The pipeline will be run on exiting the with block.\n+  with beam.Pipeline(options=PipelineOptions(pipeline_args)) as p:\n+\n+    # Read the text file[pattern] into a PCollection.\n+    lines = p | 'Read' >> ReadFromText(known_args.input)\n+\n+    words = (\n+        lines\n+        | 'Split' >> beam.FlatMap(\n+            lambda line: re.findall(r'[\\w]+', line)).with_output_types(str)\n+        # Map to Row objects to generate a schema suitable for conversion to a dataframe.\n+        | 'ToRows' >> beam.Map(lambda word: beam.Row(word=word)))\n+\n+    df = to_dataframe(words)\n+    df['count'] = 1\n+    counted = df.groupby('word').sum()\n+    counted.to_csv(known_args.output)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd0e4481c7484b8994524bc83a671eee2e05f56"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NDY0Nw==", "bodyText": "Makes sense, let's do that.", "url": "https://github.com/apache/beam/pull/12889#discussion_r492284647", "createdAt": "2020-09-21T19:08:05Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/examples/wordcount_dataframe.py", "diffHunk": "@@ -0,0 +1,73 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A word-counting workflow using dataframes.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import argparse\n+import logging\n+\n+import apache_beam as beam\n+from apache_beam.dataframe import io\n+from apache_beam.dataframe.convert import to_dataframe\n+from apache_beam.io import ReadFromText\n+from apache_beam.options.pipeline_options import PipelineOptions\n+\n+\n+def run(argv=None):\n+  \"\"\"Main entry point; defines and runs the wordcount pipeline.\"\"\"\n+  parser = argparse.ArgumentParser()\n+  parser.add_argument(\n+      '--input',\n+      dest='input',\n+      default='gs://dataflow-samples/shakespeare/kinglear.txt',\n+      help='Input file to process.')\n+  parser.add_argument(\n+      '--output',\n+      dest='output',\n+      required=True,\n+      help='Output file to write results to.')\n+  known_args, pipeline_args = parser.parse_known_args(argv)\n+\n+  # Import this here to avoid pickling the main session.\n+  import re\n+\n+  # The pipeline will be run on exiting the with block.\n+  with beam.Pipeline(options=PipelineOptions(pipeline_args)) as p:\n+\n+    # Read the text file[pattern] into a PCollection.\n+    lines = p | 'Read' >> ReadFromText(known_args.input)\n+\n+    words = (\n+        lines\n+        | 'Split' >> beam.FlatMap(\n+            lambda line: re.findall(r'[\\w]+', line)).with_output_types(str)\n+        # Map to Row objects to generate a schema suitable for conversion to a dataframe.\n+        | 'ToRows' >> beam.Map(lambda word: beam.Row(word=word)))\n+\n+    df = to_dataframe(words)\n+    df['count'] = 1\n+    counted = df.groupby('word').sum()\n+    counted.to_csv(known_args.output)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MTA1Mw=="}, "originalCommit": {"oid": "0bd0e4481c7484b8994524bc83a671eee2e05f56"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDQ2MTQ0OnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo1MTowNVrOHVcDlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOToyNzozN1rOHVfV5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MTgxNQ==", "bodyText": "Should this comment be part of the Dataframes note above? I don't think pandas 1.x support has any broader implications", "url": "https://github.com/apache/beam/pull/12889#discussion_r492241815", "createdAt": "2020-09-21T17:51:05Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -71,11 +71,14 @@\n     More details will be in an upcoming [blog post](https://beam.apache.org/blog/python-improved-annotations/index.html).\n * Improved the Interactive Beam API where recording streaming jobs now start a long running background recording job. Running ib.show() or ib.collect() samples from the recording ([BEAM-10603](https://issues.apache.org/jira/browse/BEAM-10603)).\n * In Interactive Beam, ib.show() and ib.collect() now have \"n\" and \"duration\" as parameters. These mean read only up to \"n\" elements and up to \"duration\" seconds of data read from the recording ([BEAM-10603](https://issues.apache.org/jira/browse/BEAM-10603)).\n+* Initial preview of [Dataframes](https://s.apache.org/simpler-python-pipelines-2020#slide=id.g905ac9257b_1_21) support.\n+    See also example at apache_beam/examples/wordcount_dataframe.py\n * X feature added (Java/Python) ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).\n \n ## Breaking Changes\n \n-* X behavior was changed ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).\n+* Python 2 and Python 3.5 support dropped.\n+* Pandas 1.x allowed.  Older version of Pandas may still be used, but may not be as well tested.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd0e4481c7484b8994524bc83a671eee2e05f56"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NjEwOQ==", "bodyText": "I think it makes more sense here--the main implication here is how diamond dependencies might get resolved.", "url": "https://github.com/apache/beam/pull/12889#discussion_r492286109", "createdAt": "2020-09-21T19:10:19Z", "author": {"login": "robertwb"}, "path": "CHANGES.md", "diffHunk": "@@ -71,11 +71,14 @@\n     More details will be in an upcoming [blog post](https://beam.apache.org/blog/python-improved-annotations/index.html).\n * Improved the Interactive Beam API where recording streaming jobs now start a long running background recording job. Running ib.show() or ib.collect() samples from the recording ([BEAM-10603](https://issues.apache.org/jira/browse/BEAM-10603)).\n * In Interactive Beam, ib.show() and ib.collect() now have \"n\" and \"duration\" as parameters. These mean read only up to \"n\" elements and up to \"duration\" seconds of data read from the recording ([BEAM-10603](https://issues.apache.org/jira/browse/BEAM-10603)).\n+* Initial preview of [Dataframes](https://s.apache.org/simpler-python-pipelines-2020#slide=id.g905ac9257b_1_21) support.\n+    See also example at apache_beam/examples/wordcount_dataframe.py\n * X feature added (Java/Python) ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).\n \n ## Breaking Changes\n \n-* X behavior was changed ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).\n+* Python 2 and Python 3.5 support dropped.\n+* Pandas 1.x allowed.  Older version of Pandas may still be used, but may not be as well tested.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MTgxNQ=="}, "originalCommit": {"oid": "0bd0e4481c7484b8994524bc83a671eee2e05f56"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5NTY1NQ==", "bodyText": "Gotcha, makes sense", "url": "https://github.com/apache/beam/pull/12889#discussion_r492295655", "createdAt": "2020-09-21T19:27:37Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -71,11 +71,14 @@\n     More details will be in an upcoming [blog post](https://beam.apache.org/blog/python-improved-annotations/index.html).\n * Improved the Interactive Beam API where recording streaming jobs now start a long running background recording job. Running ib.show() or ib.collect() samples from the recording ([BEAM-10603](https://issues.apache.org/jira/browse/BEAM-10603)).\n * In Interactive Beam, ib.show() and ib.collect() now have \"n\" and \"duration\" as parameters. These mean read only up to \"n\" elements and up to \"duration\" seconds of data read from the recording ([BEAM-10603](https://issues.apache.org/jira/browse/BEAM-10603)).\n+* Initial preview of [Dataframes](https://s.apache.org/simpler-python-pipelines-2020#slide=id.g905ac9257b_1_21) support.\n+    See also example at apache_beam/examples/wordcount_dataframe.py\n * X feature added (Java/Python) ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).\n \n ## Breaking Changes\n \n-* X behavior was changed ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).\n+* Python 2 and Python 3.5 support dropped.\n+* Pandas 1.x allowed.  Older version of Pandas may still be used, but may not be as well tested.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MTgxNQ=="}, "originalCommit": {"oid": "0bd0e4481c7484b8994524bc83a671eee2e05f56"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3183, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}