{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODk2OTUz", "number": 11919, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozODowNVrOEC-24w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0NTo0MFrOENKKLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTYyNDY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/DeduplicationFn.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozODowNVrOGfxPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozNDo0NFrOGhNKhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2NTc1OQ==", "bodyText": "this will fail on dataflow, it doesn't support SetState or MapState yet.  Dataflow does have its own deduplicate implementation [1] that pushes the work to windmill's own exactly-once impl, you might be able to override this transform w/ that in the runner?  There's also a Deduplicate transform [2] in beam now, but I don't think it'd scale very well.\n[1] \n  \n    \n      beam/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java\n    \n    \n         Line 1729\n      in\n      8aedab2\n    \n    \n    \n    \n\n        \n          \n           private static class Deduplicate<T> \n        \n    \n  \n\n\n[2] https://github.com/apache/beam/blob/8aedab2da96e1324f8433df3c772d59346f825b4/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Deduplicate.java", "url": "https://github.com/apache/beam/pull/11919#discussion_r435965759", "createdAt": "2020-06-05T14:38:05Z", "author": {"login": "steveniemitz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/DeduplicationFn.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import org.apache.beam.sdk.coders.Coder;\n+import org.apache.beam.sdk.coders.DelegateCoder;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.coders.ListCoder;\n+import org.apache.beam.sdk.coders.MapCoder;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.joda.time.Instant;\n+\n+// A DeduplicationFn takes a KV from a hashed version of KeyT to a KV of KeyT and ValueT and\n+// deduplicates based on KeyT. KeyT must provide a non-identity implementation of equals.\n+class DeduplicationFn<KeyT, ValueT> extends DoFn<KV<Integer, KV<KeyT, ValueT>>, KV<KeyT, ValueT>> {\n+  private final DeduplicationFnOptions<KeyT> options;\n+\n+  // A state cell holding the set of recently received keys.\n+  @SuppressWarnings(\"unused\")\n+  @StateId(\"keySet\")\n+  private final StateSpec<SetState<KeyT>> keySetSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d74ca34c0aadbda2c7293d1b59aaff3adea88a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxOTU4NQ==", "bodyText": "Ill change this to use 2, this should work in all runners not just dataflow. I think the extensible approach would be to eventually have the dataflow runner override the deduplicate transform? but thats a bit out of scope for this.", "url": "https://github.com/apache/beam/pull/11919#discussion_r437419585", "createdAt": "2020-06-09T13:33:00Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/DeduplicationFn.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import org.apache.beam.sdk.coders.Coder;\n+import org.apache.beam.sdk.coders.DelegateCoder;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.coders.ListCoder;\n+import org.apache.beam.sdk.coders.MapCoder;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.joda.time.Instant;\n+\n+// A DeduplicationFn takes a KV from a hashed version of KeyT to a KV of KeyT and ValueT and\n+// deduplicates based on KeyT. KeyT must provide a non-identity implementation of equals.\n+class DeduplicationFn<KeyT, ValueT> extends DoFn<KV<Integer, KV<KeyT, ValueT>>, KV<KeyT, ValueT>> {\n+  private final DeduplicationFnOptions<KeyT> options;\n+\n+  // A state cell holding the set of recently received keys.\n+  @SuppressWarnings(\"unused\")\n+  @StateId(\"keySet\")\n+  private final StateSpec<SetState<KeyT>> keySetSpec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2NTc1OQ=="}, "originalCommit": {"oid": "a2d74ca34c0aadbda2c7293d1b59aaff3adea88a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MTg3Nw==", "bodyText": "Done. I've chosen option 2, since I don't want this to be dataflow-specific.", "url": "https://github.com/apache/beam/pull/11919#discussion_r437471877", "createdAt": "2020-06-09T14:34:44Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/DeduplicationFn.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import org.apache.beam.sdk.coders.Coder;\n+import org.apache.beam.sdk.coders.DelegateCoder;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.coders.ListCoder;\n+import org.apache.beam.sdk.coders.MapCoder;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.joda.time.Instant;\n+\n+// A DeduplicationFn takes a KV from a hashed version of KeyT to a KV of KeyT and ValueT and\n+// deduplicates based on KeyT. KeyT must provide a non-identity implementation of equals.\n+class DeduplicationFn<KeyT, ValueT> extends DoFn<KV<Integer, KV<KeyT, ValueT>>, KV<KeyT, ValueT>> {\n+  private final DeduplicationFnOptions<KeyT> options;\n+\n+  // A state cell holding the set of recently received keys.\n+  @SuppressWarnings(\"unused\")\n+  @StateId(\"keySet\")\n+  private final StateSpec<SetState<KeyT>> keySetSpec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2NTc1OQ=="}, "originalCommit": {"oid": "a2d74ca34c0aadbda2c7293d1b59aaff3adea88a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTc3NjgzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo0MzoxNVrOGmctmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0MToxNVrOGvrnvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw==", "bodyText": "In addition to @experimental, this needs javadoc about how it's not yet supported by GCP.\nMaybe this should all live in a directory with \"experimental\" in the name?  Unfortunately, there's quite a bit of stuff marked @experimental in Beam, so users won't treat it with appropriate caution", "url": "https://github.com/apache/beam/pull/11919#discussion_r442969497", "createdAt": "2020-06-19T17:43:15Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0ODgxMQ==", "bodyText": "Using a different directory will require \"moving\" it later which will have its own hassles. I think the annotation even if users may ignore it is the right way to go.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443048811", "createdAt": "2020-06-19T21:22:27Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NzgwNw==", "bodyText": "I'm going to mark this as resolved, feel free to reopen?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443097807", "createdAt": "2020-06-20T03:41:52Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwOTUxMw==", "bodyText": "Please add javadoc explaining the current state of this code.  Current directory setup LGTM.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443709513", "createdAt": "2020-06-22T17:15:06Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MDk0Mg==", "bodyText": "Please address this.", "url": "https://github.com/apache/beam/pull/11919#discussion_r452650942", "createdAt": "2020-07-10T06:41:15Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTc3OTY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo0NDoyNVrOGmcveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNDoxNFrOGnC-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTk3OA==", "bodyText": "Change comments to javadoc style", "url": "https://github.com/apache/beam/pull/11919#discussion_r442969978", "createdAt": "2020-06-19T17:44:25Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjQwMw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443596403", "createdAt": "2020-06-22T14:24:14Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTk3OA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTc4MTU5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo0NTowMlrOGmcwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNDoyNlrOGnC_Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MDI3OA==", "bodyText": "Clarify that the call to addUuids() is assumed to have happened on the publisher side", "url": "https://github.com/apache/beam/pull/11919#discussion_r442970278", "createdAt": "2020-06-19T17:45:02Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+  // retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+  // duplicates.\n+  public static Read.Unbounded<SequencedMessage> read(SubscriberOptions options) {\n+    return Read.from(new PubsubLiteUnboundedSource(options));\n+  }\n+\n+  // Remove duplicates from the PTransform from a read. Assumes by default that the uuids were\n+  // added by a call to PubsubLiteIO.addUuids().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjU1NA==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443596554", "createdAt": "2020-06-22T14:24:26Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+  // retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+  // duplicates.\n+  public static Read.Unbounded<SequencedMessage> read(SubscriberOptions options) {\n+    return Read.from(new PubsubLiteUnboundedSource(options));\n+  }\n+\n+  // Remove duplicates from the PTransform from a read. Assumes by default that the uuids were\n+  // added by a call to PubsubLiteIO.addUuids().", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MDI3OA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg1MzQ3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxMzoxM1rOGmdeUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNDozM1rOGnC_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTk2OQ==", "bodyText": "Beam already has access to an assertThat call in org.hamcrest.MatcherAssert.assertThat.  Do we need this new dependency?", "url": "https://github.com/apache/beam/pull/11919#discussion_r442981969", "createdAt": "2020-06-19T18:13:13Z", "author": {"login": "dpmills"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -555,6 +557,8 @@ class BeamModulePlugin implements Plugin<Project> {\n         spark_sql                                   : \"org.apache.spark:spark-sql_2.11:$spark_version\",\n         spark_streaming                             : \"org.apache.spark:spark-streaming_2.11:$spark_version\",\n         stax2_api                                   : \"org.codehaus.woodstox:stax2-api:3.1.4\",\n+        truth                                       : \"com.google.truth:truth:1.0.1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0OTk2Mg==", "bodyText": "+1 for not adding the dependency", "url": "https://github.com/apache/beam/pull/11919#discussion_r443049962", "createdAt": "2020-06-19T21:26:17Z", "author": {"login": "lukecwik"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -555,6 +557,8 @@ class BeamModulePlugin implements Plugin<Project> {\n         spark_sql                                   : \"org.apache.spark:spark-sql_2.11:$spark_version\",\n         spark_streaming                             : \"org.apache.spark:spark-streaming_2.11:$spark_version\",\n         stax2_api                                   : \"org.codehaus.woodstox:stax2-api:3.1.4\",\n+        truth                                       : \"com.google.truth:truth:1.0.1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTk2OQ=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NzI5OQ==", "bodyText": "wip", "url": "https://github.com/apache/beam/pull/11919#discussion_r443097299", "createdAt": "2020-06-20T03:33:43Z", "author": {"login": "dpcollins-google"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -555,6 +557,8 @@ class BeamModulePlugin implements Plugin<Project> {\n         spark_sql                                   : \"org.apache.spark:spark-sql_2.11:$spark_version\",\n         spark_streaming                             : \"org.apache.spark:spark-streaming_2.11:$spark_version\",\n         stax2_api                                   : \"org.codehaus.woodstox:stax2-api:3.1.4\",\n+        truth                                       : \"com.google.truth:truth:1.0.1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTk2OQ=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjYzMA==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443596630", "createdAt": "2020-06-22T14:24:33Z", "author": {"login": "dpcollins-google"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -555,6 +557,8 @@ class BeamModulePlugin implements Plugin<Project> {\n         spark_sql                                   : \"org.apache.spark:spark-sql_2.11:$spark_version\",\n         spark_streaming                             : \"org.apache.spark:spark-streaming_2.11:$spark_version\",\n         stax2_api                                   : \"org.codehaus.woodstox:stax2-api:3.1.4\",\n+        truth                                       : \"com.google.truth:truth:1.0.1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTk2OQ=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg2MjI5OnYy", "diffSide": "RIGHT", "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjo0M1rOGmdj_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMjo0Nzo0MFrOGp4z5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzQyMA==", "bodyText": "I'm not sure if adding new exceptions here is ok; please check with @kennknowles", "url": "https://github.com/apache/beam/pull/11919#discussion_r442983420", "createdAt": "2020-06-19T18:16:43Z", "author": {"login": "dpmills"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -88,6 +88,10 @@\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ExpressionConverter\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ZetaSQLPlannerImpl\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*SqlAnalyzer\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*AddUuidsTransform\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*MessageCoderTest\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*PubsubLiteSink\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*UuidDeduplicationTransformTest\\.java\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0OTczMA==", "bodyText": "They should not be required since they seem to be using the import as an implementation detail within the class/method. They should instead depend on the vendored version by importing org.apache.beam.vendor.guava.v26_0_jre....", "url": "https://github.com/apache/beam/pull/11919#discussion_r443049730", "createdAt": "2020-06-19T21:25:29Z", "author": {"login": "lukecwik"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -88,6 +88,10 @@\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ExpressionConverter\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ZetaSQLPlannerImpl\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*SqlAnalyzer\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*AddUuidsTransform\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*MessageCoderTest\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*PubsubLiteSink\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*UuidDeduplicationTransformTest\\.java\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzQyMA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MDM0Mg==", "bodyText": "This is not accurate. The client library uses guava ImmutableListMultimap as an input type to represent its attributes: these files need to construct an ImmutableListMultimap and thus need guava.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443050342", "createdAt": "2020-06-19T21:27:33Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -88,6 +88,10 @@\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ExpressionConverter\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ZetaSQLPlannerImpl\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*SqlAnalyzer\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*AddUuidsTransform\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*MessageCoderTest\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*PubsubLiteSink\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*UuidDeduplicationTransformTest\\.java\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzQyMA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MjQ4Ng==", "bodyText": "I see. I would highly suggest to use APIs that don't depend on guava or for the client library to fix its API as guava is a constant source of compatibility issues for users.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443052486", "createdAt": "2020-06-19T21:35:06Z", "author": {"login": "lukecwik"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -88,6 +88,10 @@\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ExpressionConverter\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ZetaSQLPlannerImpl\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*SqlAnalyzer\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*AddUuidsTransform\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*MessageCoderTest\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*PubsubLiteSink\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*UuidDeduplicationTransformTest\\.java\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzQyMA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4NTQ2NQ==", "bodyText": "I don't think its reasonable to avoid guava in the client library in this situation. Doing so leaves users of the client library with a worse api (Map<String, List> instead of ListMultimap<String, ByteString>) for no gain. There is clearly already a non-vendored version of guava within beam, and this library uses the one is used as a common dependency for all google cloud client libraries (i.e. there should always be a version usable by it and all other cloud client libraries). I don't think there's anything to be gained here by removing guava in the public api.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443085465", "createdAt": "2020-06-20T00:39:54Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -88,6 +88,10 @@\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ExpressionConverter\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ZetaSQLPlannerImpl\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*SqlAnalyzer\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*AddUuidsTransform\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*MessageCoderTest\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*PubsubLiteSink\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*UuidDeduplicationTransformTest\\.java\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzQyMA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3NTU5MA==", "bodyText": "I believe this is resolved- the api surface now operates on the proto messages themselves due to the added complexity to users WRT dependency issues being more important than the awkwardness of representing a multimap as a list of lists.", "url": "https://github.com/apache/beam/pull/11919#discussion_r446575590", "createdAt": "2020-06-27T22:47:40Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -88,6 +88,10 @@\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ExpressionConverter\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ZetaSQLPlannerImpl\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*SqlAnalyzer\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*AddUuidsTransform\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*MessageCoderTest\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*PubsubLiteSink\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*UuidDeduplicationTransformTest\\.java\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzQyMA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg2MzM4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNzoxNFrOGmdkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNDo0M1rOGnC_4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzYyMA==", "bodyText": "Here and elsewhere, javadoc for classes at least", "url": "https://github.com/apache/beam/pull/11919#discussion_r442983620", "createdAt": "2020-06-19T18:17:14Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5Njc3MQ==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443596771", "createdAt": "2020-06-22T14:24:43Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzYyMA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg2NzgyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxOToxMVrOGmdnuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNDo1N1rOGnDAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NDM3Nw==", "bodyText": "What does \"standard transformation methods\" mean? Is this something a user might hit? If so, how would they go about fixing things?", "url": "https://github.com/apache/beam/pull/11919#discussion_r442984377", "createdAt": "2020-06-19T18:19:11Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and\n+  // publish_time) to Pub/Sub Lite Messages.\n+  public static PTransform<PCollection<? extends PubsubMessage>, PCollection<Message>>\n+      fromCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<PubsubMessage, Message>() {\n+          @ProcessElement\n+          public void processElement(@Element PubsubMessage message, OutputReceiver<Message> output)\n+              throws StatusException {\n+            output.output(fromCpsPublishTransformer(KeyExtractor.DEFAULT).transform(message));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Pub/Sub Lite Messages to publishab Cloud Pub/Sub incomplete,\n+  // publishable\n+  // PubsubMessages.\n+  public static PTransform<PCollection<? extends Message>, PCollection<PubsubMessage>>\n+      toCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<Message, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(@Element Message message, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsPublishTransformer().transform(message));\n+          }\n+        });\n+  }\n+\n+  // Ensure that all messages that pass through can be converted to Cloud Pub/Sub messages using the\n+  // standard transformation methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjkxNw==", "bodyText": "added more info.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443596917", "createdAt": "2020-06-22T14:24:57Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and\n+  // publish_time) to Pub/Sub Lite Messages.\n+  public static PTransform<PCollection<? extends PubsubMessage>, PCollection<Message>>\n+      fromCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<PubsubMessage, Message>() {\n+          @ProcessElement\n+          public void processElement(@Element PubsubMessage message, OutputReceiver<Message> output)\n+              throws StatusException {\n+            output.output(fromCpsPublishTransformer(KeyExtractor.DEFAULT).transform(message));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Pub/Sub Lite Messages to publishab Cloud Pub/Sub incomplete,\n+  // publishable\n+  // PubsubMessages.\n+  public static PTransform<PCollection<? extends Message>, PCollection<PubsubMessage>>\n+      toCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<Message, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(@Element Message message, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsPublishTransformer().transform(message));\n+          }\n+        });\n+  }\n+\n+  // Ensure that all messages that pass through can be converted to Cloud Pub/Sub messages using the\n+  // standard transformation methods.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NDM3Nw=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDEwMjE1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDowMTo0MFrOGmf6Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNTowM1rOGnDAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMTg3NQ==", "bodyText": "link to deduplicate()", "url": "https://github.com/apache/beam/pull/11919#discussion_r443021875", "createdAt": "2020-06-19T20:01:40Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+  // retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5Njk5MA==", "bodyText": "obsolete.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443596990", "createdAt": "2020-06-22T14:25:03Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+  // retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMTg3NQ=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDEwODI0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDowNDozOFrOGmf99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTozMTo0NlrOGnOKjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMjgzNg==", "bodyText": "This will result in many small bundles downstream, which may end up being inefficient for the PubsubLiteSink.  It will probably perform better to pick a fixed number of keys to reshuffle on, such as maxNumWorkers*10", "url": "https://github.com/apache/beam/pull/11919#discussion_r443022836", "createdAt": "2020-06-19T20:04:38Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {\n+  private static Message addUuid(Message message) {\n+    ImmutableListMultimap.Builder<String, ByteString> attributesBuilder =\n+        ImmutableListMultimap.builder();\n+    message.attributes().entries().stream()\n+        .filter(entry -> !entry.getKey().equals(Uuid.DEFAULT_ATTRIBUTE))\n+        .forEach(attributesBuilder::put);\n+    attributesBuilder.put(Uuid.DEFAULT_ATTRIBUTE, Uuid.random().value());\n+    return message.toBuilder().setAttributes(attributesBuilder.build()).build();\n+  }\n+\n+  @Override\n+  public PCollection<Message> expand(PCollection<Message> input) {\n+    PCollection<Message> withUuids =\n+        input\n+            .apply(\n+                \"AddUuids\",\n+                MapElements.into(new TypeDescriptor<Message>() {}).via(AddUuidsTransform::addUuid))\n+            .setCoder(new MessageCoder());\n+    return withUuids.apply(\"ShuffleToPersist\", Reshuffle.viaRandomKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MTkxMg==", "bodyText": "I think this should instead be a modification to Reshuffle.viaRandomKey(). I'm loathe to write custom behavior because the default implementation does something potentially degenerate. WDYT? Could a 'numBuckets' parameter with a reasonable default value be added to Reshuffle.viaRandomKey?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443571912", "createdAt": "2020-06-22T13:50:08Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {\n+  private static Message addUuid(Message message) {\n+    ImmutableListMultimap.Builder<String, ByteString> attributesBuilder =\n+        ImmutableListMultimap.builder();\n+    message.attributes().entries().stream()\n+        .filter(entry -> !entry.getKey().equals(Uuid.DEFAULT_ATTRIBUTE))\n+        .forEach(attributesBuilder::put);\n+    attributesBuilder.put(Uuid.DEFAULT_ATTRIBUTE, Uuid.random().value());\n+    return message.toBuilder().setAttributes(attributesBuilder.build()).build();\n+  }\n+\n+  @Override\n+  public PCollection<Message> expand(PCollection<Message> input) {\n+    PCollection<Message> withUuids =\n+        input\n+            .apply(\n+                \"AddUuids\",\n+                MapElements.into(new TypeDescriptor<Message>() {}).via(AddUuidsTransform::addUuid))\n+            .setCoder(new MessageCoder());\n+    return withUuids.apply(\"ShuffleToPersist\", Reshuffle.viaRandomKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMjgzNg=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODk3Mg==", "bodyText": "Adding a customizable numBuckets to Reshuffle.viaRandomKey sounds good to me.  Leave the default behavior as is to avoid breaking current users, though.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443708972", "createdAt": "2020-06-22T17:13:57Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {\n+  private static Message addUuid(Message message) {\n+    ImmutableListMultimap.Builder<String, ByteString> attributesBuilder =\n+        ImmutableListMultimap.builder();\n+    message.attributes().entries().stream()\n+        .filter(entry -> !entry.getKey().equals(Uuid.DEFAULT_ATTRIBUTE))\n+        .forEach(attributesBuilder::put);\n+    attributesBuilder.put(Uuid.DEFAULT_ATTRIBUTE, Uuid.random().value());\n+    return message.toBuilder().setAttributes(attributesBuilder.build()).build();\n+  }\n+\n+  @Override\n+  public PCollection<Message> expand(PCollection<Message> input) {\n+    PCollection<Message> withUuids =\n+        input\n+            .apply(\n+                \"AddUuids\",\n+                MapElements.into(new TypeDescriptor<Message>() {}).via(AddUuidsTransform::addUuid))\n+            .setCoder(new MessageCoder());\n+    return withUuids.apply(\"ShuffleToPersist\", Reshuffle.viaRandomKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMjgzNg=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3OTM3Ng==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443779376", "createdAt": "2020-06-22T19:31:00Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {\n+  private static Message addUuid(Message message) {\n+    ImmutableListMultimap.Builder<String, ByteString> attributesBuilder =\n+        ImmutableListMultimap.builder();\n+    message.attributes().entries().stream()\n+        .filter(entry -> !entry.getKey().equals(Uuid.DEFAULT_ATTRIBUTE))\n+        .forEach(attributesBuilder::put);\n+    attributesBuilder.put(Uuid.DEFAULT_ATTRIBUTE, Uuid.random().value());\n+    return message.toBuilder().setAttributes(attributesBuilder.build()).build();\n+  }\n+\n+  @Override\n+  public PCollection<Message> expand(PCollection<Message> input) {\n+    PCollection<Message> withUuids =\n+        input\n+            .apply(\n+                \"AddUuids\",\n+                MapElements.into(new TypeDescriptor<Message>() {}).via(AddUuidsTransform::addUuid))\n+            .setCoder(new MessageCoder());\n+    return withUuids.apply(\"ShuffleToPersist\", Reshuffle.viaRandomKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMjgzNg=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3OTcyNw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443779727", "createdAt": "2020-06-22T19:31:46Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {\n+  private static Message addUuid(Message message) {\n+    ImmutableListMultimap.Builder<String, ByteString> attributesBuilder =\n+        ImmutableListMultimap.builder();\n+    message.attributes().entries().stream()\n+        .filter(entry -> !entry.getKey().equals(Uuid.DEFAULT_ATTRIBUTE))\n+        .forEach(attributesBuilder::put);\n+    attributesBuilder.put(Uuid.DEFAULT_ATTRIBUTE, Uuid.random().value());\n+    return message.toBuilder().setAttributes(attributesBuilder.build()).build();\n+  }\n+\n+  @Override\n+  public PCollection<Message> expand(PCollection<Message> input) {\n+    PCollection<Message> withUuids =\n+        input\n+            .apply(\n+                \"AddUuids\",\n+                MapElements.into(new TypeDescriptor<Message>() {}).via(AddUuidsTransform::addUuid))\n+            .setCoder(new MessageCoder());\n+    return withUuids.apply(\"ShuffleToPersist\", Reshuffle.viaRandomKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMjgzNg=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDExNTA3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDowNzo0OVrOGmgCGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNToxNFrOGnDBTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMzg5Ng==", "bodyText": "Should message_id be converted to PubsubLite's UUID?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443023896", "createdAt": "2020-06-19T20:07:49Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NzEzNA==", "bodyText": "obsolete.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443597134", "createdAt": "2020-06-22T14:25:14Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMzg5Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDEyNTU1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxMjo0OFrOGmgIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDoxNzozNVrOGmkqLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNTUyNA==", "bodyText": "This will cast away the type of the input PCollection, and always return PCollection, which seems like a bad consequence of something that is intended to be a passthrough.  Maybe give this a type param?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443025524", "createdAt": "2020-06-19T20:12:48Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and\n+  // publish_time) to Pub/Sub Lite Messages.\n+  public static PTransform<PCollection<? extends PubsubMessage>, PCollection<Message>>\n+      fromCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<PubsubMessage, Message>() {\n+          @ProcessElement\n+          public void processElement(@Element PubsubMessage message, OutputReceiver<Message> output)\n+              throws StatusException {\n+            output.output(fromCpsPublishTransformer(KeyExtractor.DEFAULT).transform(message));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Pub/Sub Lite Messages to publishab Cloud Pub/Sub incomplete,\n+  // publishable\n+  // PubsubMessages.\n+  public static PTransform<PCollection<? extends Message>, PCollection<PubsubMessage>>\n+      toCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<Message, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(@Element Message message, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsPublishTransformer().transform(message));\n+          }\n+        });\n+  }\n+\n+  // Ensure that all messages that pass through can be converted to Cloud Pub/Sub messages using the\n+  // standard transformation methods.\n+  public static PTransform<PCollection<? extends Message>, PCollection<Message>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5OTY5NQ==", "bodyText": "I don't know of a way to do this? Can you describe for me what you'd want the function signature to be?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443099695", "createdAt": "2020-06-20T04:17:35Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and\n+  // publish_time) to Pub/Sub Lite Messages.\n+  public static PTransform<PCollection<? extends PubsubMessage>, PCollection<Message>>\n+      fromCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<PubsubMessage, Message>() {\n+          @ProcessElement\n+          public void processElement(@Element PubsubMessage message, OutputReceiver<Message> output)\n+              throws StatusException {\n+            output.output(fromCpsPublishTransformer(KeyExtractor.DEFAULT).transform(message));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Pub/Sub Lite Messages to publishab Cloud Pub/Sub incomplete,\n+  // publishable\n+  // PubsubMessages.\n+  public static PTransform<PCollection<? extends Message>, PCollection<PubsubMessage>>\n+      toCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<Message, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(@Element Message message, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsPublishTransformer().transform(message));\n+          }\n+        });\n+  }\n+\n+  // Ensure that all messages that pass through can be converted to Cloud Pub/Sub messages using the\n+  // standard transformation methods.\n+  public static PTransform<PCollection<? extends Message>, PCollection<Message>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNTUyNA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDEzNjMxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxNzozM1rOGmgOuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwNDowMDoxOVrOGmkm0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzEyOQ==", "bodyText": "The names of these methods aren't very clear.  I think something like PubsubLiteConversions.sequenceMessageToCloudPubsubMessage would read better.  The distinction between publish and subscribe isn't obvious from the method name anyways, and is probably better in comments.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443027129", "createdAt": "2020-06-19T20:17:33Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5ODgzNQ==", "bodyText": "Will drop this method.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443098835", "createdAt": "2020-06-20T04:00:19Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzEyOQ=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDEzOTIwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxODo1OVrOGmgQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNTozN1rOGnDCaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzYwOQ==", "bodyText": "Provide more information about when these should be used.\nDo we expect it to be a common use case for pipelines to be using both Cloud Pub/Sub and Pub/Sub Lite? We might not need these as part of Beam.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443027609", "createdAt": "2020-06-19T20:18:59Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5ODg4MA==", "bodyText": "Probably not, in any case they wouldn't use the proto PubsubMessage but the beam one. I'm removing most of the functions here.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443098880", "createdAt": "2020-06-20T04:01:07Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzYwOQ=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NzQxOQ==", "bodyText": "removed all but the check. done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443597419", "createdAt": "2020-06-22T14:25:37Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzYwOQ=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDE1MjU4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationOptions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoyNDozN1rOGmgYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTozMDo0MlrOGnOIqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyOTU5Ng==", "bodyText": "This is an awkward way for the user to configure the deduplication.  If you want to be future proof it's ok to still have this option, but provide a helper so the user only has to pass the time domain and duration", "url": "https://github.com/apache/beam/pull/11919#discussion_r443029596", "createdAt": "2020-06-19T20:24:37Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.internal.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.protobuf.ByteString;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.transforms.Deduplicate;\n+\n+@AutoValue\n+public abstract class UuidDeduplicationOptions implements Serializable {\n+  private static final long serialVersionUID = 9837489720893L;\n+\n+  public static final SerializableStatusFunction<SequencedMessage, Uuid> DEFAULT_UUID_EXTRACTOR =\n+      message -> {\n+        checkArgument(\n+            message.message().attributes().containsKey(Uuid.DEFAULT_ATTRIBUTE),\n+            \"Uuid attribute missing.\");\n+        List<ByteString> attributes =\n+            message.message().attributes().get(Uuid.DEFAULT_ATTRIBUTE);\n+        checkArgument(attributes.size() == 1, \"Duplicate Uuid attribute values exist.\");\n+        return Uuid.of(attributes.get(0));\n+      };\n+\n+  public static final int DEFAULT_HASH_PARTITIONS = 10000;\n+\n+  // All parameters are optional.\n+  public abstract SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor();\n+\n+  public abstract Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate();\n+\n+  // The number of partitions to hash values into.\n+  public abstract int hashPartitions();\n+\n+  @SuppressWarnings(\"CheckReturnValue\")\n+  public static Builder newBuilder() {\n+    Builder builder = new AutoValue_UuidDeduplicationOptions.Builder();\n+    builder.setUuidExtractor(DEFAULT_UUID_EXTRACTOR);\n+    builder.setDeduplicate(\n+        Deduplicate.<Uuid, SequencedMessage>keyedValues().withTimeDomain(TimeDomain.EVENT_TIME));\n+    builder.setHashPartitions(DEFAULT_HASH_PARTITIONS);\n+    return builder;\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setUuidExtractor(\n+        SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor);\n+\n+    public abstract Builder setDeduplicate(\n+        Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NDY4OA==", "bodyText": "I don't really agree with you here. I think Deduplicate already provides a fluent interface for constructing a transform and knows all its properties. I think it mostly seems strange because the builder is wrapped up in the transform itself: if this was DeduplicateKeyedValuesOptions<Uuid, SequencedMessage>, that had a method toTransform(), I don't think it would seem awkward.\nI can add this, just think it would be duplicated code for no real gain.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443574688", "createdAt": "2020-06-22T13:54:16Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.internal.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.protobuf.ByteString;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.transforms.Deduplicate;\n+\n+@AutoValue\n+public abstract class UuidDeduplicationOptions implements Serializable {\n+  private static final long serialVersionUID = 9837489720893L;\n+\n+  public static final SerializableStatusFunction<SequencedMessage, Uuid> DEFAULT_UUID_EXTRACTOR =\n+      message -> {\n+        checkArgument(\n+            message.message().attributes().containsKey(Uuid.DEFAULT_ATTRIBUTE),\n+            \"Uuid attribute missing.\");\n+        List<ByteString> attributes =\n+            message.message().attributes().get(Uuid.DEFAULT_ATTRIBUTE);\n+        checkArgument(attributes.size() == 1, \"Duplicate Uuid attribute values exist.\");\n+        return Uuid.of(attributes.get(0));\n+      };\n+\n+  public static final int DEFAULT_HASH_PARTITIONS = 10000;\n+\n+  // All parameters are optional.\n+  public abstract SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor();\n+\n+  public abstract Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate();\n+\n+  // The number of partitions to hash values into.\n+  public abstract int hashPartitions();\n+\n+  @SuppressWarnings(\"CheckReturnValue\")\n+  public static Builder newBuilder() {\n+    Builder builder = new AutoValue_UuidDeduplicationOptions.Builder();\n+    builder.setUuidExtractor(DEFAULT_UUID_EXTRACTOR);\n+    builder.setDeduplicate(\n+        Deduplicate.<Uuid, SequencedMessage>keyedValues().withTimeDomain(TimeDomain.EVENT_TIME));\n+    builder.setHashPartitions(DEFAULT_HASH_PARTITIONS);\n+    return builder;\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setUuidExtractor(\n+        SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor);\n+\n+    public abstract Builder setDeduplicate(\n+        Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyOTU5Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMDg1MA==", "bodyText": "Yeah, it's the wrapping into a tranform that I don't like.  I'm fine with leaving this as is if you add an example as I mentioned in a comment above", "url": "https://github.com/apache/beam/pull/11919#discussion_r443720850", "createdAt": "2020-06-22T17:36:18Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.internal.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.protobuf.ByteString;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.transforms.Deduplicate;\n+\n+@AutoValue\n+public abstract class UuidDeduplicationOptions implements Serializable {\n+  private static final long serialVersionUID = 9837489720893L;\n+\n+  public static final SerializableStatusFunction<SequencedMessage, Uuid> DEFAULT_UUID_EXTRACTOR =\n+      message -> {\n+        checkArgument(\n+            message.message().attributes().containsKey(Uuid.DEFAULT_ATTRIBUTE),\n+            \"Uuid attribute missing.\");\n+        List<ByteString> attributes =\n+            message.message().attributes().get(Uuid.DEFAULT_ATTRIBUTE);\n+        checkArgument(attributes.size() == 1, \"Duplicate Uuid attribute values exist.\");\n+        return Uuid.of(attributes.get(0));\n+      };\n+\n+  public static final int DEFAULT_HASH_PARTITIONS = 10000;\n+\n+  // All parameters are optional.\n+  public abstract SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor();\n+\n+  public abstract Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate();\n+\n+  // The number of partitions to hash values into.\n+  public abstract int hashPartitions();\n+\n+  @SuppressWarnings(\"CheckReturnValue\")\n+  public static Builder newBuilder() {\n+    Builder builder = new AutoValue_UuidDeduplicationOptions.Builder();\n+    builder.setUuidExtractor(DEFAULT_UUID_EXTRACTOR);\n+    builder.setDeduplicate(\n+        Deduplicate.<Uuid, SequencedMessage>keyedValues().withTimeDomain(TimeDomain.EVENT_TIME));\n+    builder.setHashPartitions(DEFAULT_HASH_PARTITIONS);\n+    return builder;\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setUuidExtractor(\n+        SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor);\n+\n+    public abstract Builder setDeduplicate(\n+        Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyOTU5Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3OTI0Mg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443779242", "createdAt": "2020-06-22T19:30:42Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.internal.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.protobuf.ByteString;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.transforms.Deduplicate;\n+\n+@AutoValue\n+public abstract class UuidDeduplicationOptions implements Serializable {\n+  private static final long serialVersionUID = 9837489720893L;\n+\n+  public static final SerializableStatusFunction<SequencedMessage, Uuid> DEFAULT_UUID_EXTRACTOR =\n+      message -> {\n+        checkArgument(\n+            message.message().attributes().containsKey(Uuid.DEFAULT_ATTRIBUTE),\n+            \"Uuid attribute missing.\");\n+        List<ByteString> attributes =\n+            message.message().attributes().get(Uuid.DEFAULT_ATTRIBUTE);\n+        checkArgument(attributes.size() == 1, \"Duplicate Uuid attribute values exist.\");\n+        return Uuid.of(attributes.get(0));\n+      };\n+\n+  public static final int DEFAULT_HASH_PARTITIONS = 10000;\n+\n+  // All parameters are optional.\n+  public abstract SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor();\n+\n+  public abstract Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate();\n+\n+  // The number of partitions to hash values into.\n+  public abstract int hashPartitions();\n+\n+  @SuppressWarnings(\"CheckReturnValue\")\n+  public static Builder newBuilder() {\n+    Builder builder = new AutoValue_UuidDeduplicationOptions.Builder();\n+    builder.setUuidExtractor(DEFAULT_UUID_EXTRACTOR);\n+    builder.setDeduplicate(\n+        Deduplicate.<Uuid, SequencedMessage>keyedValues().withTimeDomain(TimeDomain.EVENT_TIME));\n+    builder.setHashPartitions(DEFAULT_HASH_PARTITIONS);\n+    return builder;\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setUuidExtractor(\n+        SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor);\n+\n+    public abstract Builder setDeduplicate(\n+        Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyOTU5Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDE1ODc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoyNzoyNFrOGmgcHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0Mjo1OVrOGnMtHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng==", "bodyText": "Registering a coder as part of expand is weird, and will be confusing if the user uses these types elsewhere in the pipeline.  You can instead use the @defaultcoder annotation on Uuid and SequencedMessage to set their default coders globally.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443030556", "createdAt": "2020-06-19T20:27:24Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MDc2Mw==", "bodyText": "Uuid and SequencedMessage are part of the Pub/Sub Lite client library, not beam. Is there a way to register a default coder somewhere not in the type definition?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443050763", "createdAt": "2020-06-19T21:29:01Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MDkzNg==", "bodyText": "ah sorry, thatts only true of SequencedMessage. Will make this change for Uuid.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443050936", "createdAt": "2020-06-19T21:29:39Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODAzMA==", "bodyText": "done for uuid, is there a way to set this globally on the SequencedMessage type that comes from the Pub/Sub Lite java client library?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443598030", "createdAt": "2020-06-22T14:26:23Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMzU5OA==", "bodyText": "Yeah, you can create a CoderProviderRegistrar.  There's an example from another IO solving the same problem here: https://github.com/apache/beam/blob/master/sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseCoderProviderRegistrar.java\nIn that provider, add default coders for SequencedMessage and Message\nAlso, remove the registerCoderForClass calls here", "url": "https://github.com/apache/beam/pull/11919#discussion_r443723598", "createdAt": "2020-06-22T17:41:22Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTgwNw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443755807", "createdAt": "2020-06-22T18:42:59Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDI5MTQ1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozMToxMFrOGmhtsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0NDo0MFrOGnK13Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA==", "bodyText": "Google cloud pubsublite depends on grpc 1.29 and has other deps that differ greatly from the common set used within Beam.\nPlease validate that no additional linkage errors were produced using the linkage checker for all impacted modules and post the results here. You will need to resolve linkage errors by either downgrading the version of the library used to one that is compatible with the current versions in Beam or upgrading Beam's dependencies till they are compatible with the library.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443051440", "createdAt": "2020-06-19T21:31:10Z", "author": {"login": "lukecwik"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5OTM5MA==", "bodyText": "Will run this, this tool requires a git repo, while I'm using hg-git for these. IDK if its possible to make this not dependent on the source control tool? In the meantime, I'll clone my repo using git and run the tool.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443599390", "createdAt": "2020-06-22T14:28:04Z", "author": {"login": "dpcollins-google"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMjI1NQ==", "bodyText": "This tool fails to run in a git clone of the branch. Please fix this tool?\n/bin/bash ./sdks/java/build-tools/beam-linkage-check.sh\nUpdating files: 100% (4678/4678), done.\nHEAD is now at 9304d1c90 Check for null attribute map in IncomingMessage before adding on PubsubMessage.\nMon Jun 22 10:43:24 EDT 2020: Installing artifacts of master(9304d1c9) to Maven local repository.\nbeam \u276f", "url": "https://github.com/apache/beam/pull/11919#discussion_r443612255", "createdAt": "2020-06-22T14:44:27Z", "author": {"login": "dpcollins-google"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzUyOA==", "bodyText": "@suztomo for awareness.\nIt is unclear from your log why it failed. Do you have anything special within your .m2 settings?\nAlso, this tool is a wrapper around a couple of git commands and a specific gradle command that you could run manually as well.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443623528", "createdAt": "2020-06-22T14:59:38Z", "author": {"login": "lukecwik"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyODYwOQ==", "bodyText": "I guess the error went to /dev/null. Checking dpcollins-google:pubsublite_beam branch.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443628609", "createdAt": "2020-06-22T15:06:49Z", "author": {"login": "suztomo"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MTY5OQ==", "bodyText": "I had to run \"gradlew clean\". Then it went well; no new linkage errors in dpcollins-google:pubsublite_beam branch. Good. https://gist.github.com/suztomo/57e888b95556e5741cced3999313a2f8\nI'll update the script so that it should not swallow error messages https://issues.apache.org/jira/browse/BEAM-10298\nAs per dependency on Git, because the tool compares two Git branches for their dependencies, it's coupled with Git.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443651699", "createdAt": "2020-06-22T15:40:20Z", "author": {"login": "suztomo"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNTI3Nw==", "bodyText": "I think this is resolved as it doesn't cause dependency conflicts.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443725277", "createdAt": "2020-06-22T17:44:40Z", "author": {"login": "dpcollins-google"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY5OTExOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNzo1MFrOGnJ-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOToyOTo0MlrOGnOGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMTA4NA==", "bodyText": "This is the only caller of toTransform now; I think it would be more readable to just inline that logic here", "url": "https://github.com/apache/beam/pull/11919#discussion_r443711084", "createdAt": "2020-06-22T17:17:50Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+   * retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+   * duplicates.\n+   */\n+  public static Read.Unbounded<SequencedMessage> read(SubscriberOptions options) {\n+    return Read.from(new PubsubLiteUnboundedSource(options));\n+  }\n+\n+  /**\n+   * Remove duplicates from the PTransform from a read. Assumes by default that the uuids were added\n+   * by a call to PubsubLiteIO.addUuids() when published.\n+   */\n+  public static PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>>\n+      deduplicate(UuidDeduplicationOptions options) {\n+    return new UuidDeduplicationTransform(options);\n+  }\n+\n+  /** Add Uuids to to-be-published messages that ensures that uniqueness is maintained. */\n+  public static PTransform<PCollection<Message>, PCollection<Message>> addUuids() {\n+    return new AddUuidsTransform();\n+  }\n+\n+  /** Write messages to Pub/Sub Lite. */\n+  public static PTransform<PCollection<Message>, PDone> write(PublisherOptions options) {\n+    return toTransform(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3ODczNQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443778735", "createdAt": "2020-06-22T19:29:42Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+   * retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+   * duplicates.\n+   */\n+  public static Read.Unbounded<SequencedMessage> read(SubscriberOptions options) {\n+    return Read.from(new PubsubLiteUnboundedSource(options));\n+  }\n+\n+  /**\n+   * Remove duplicates from the PTransform from a read. Assumes by default that the uuids were added\n+   * by a call to PubsubLiteIO.addUuids() when published.\n+   */\n+  public static PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>>\n+      deduplicate(UuidDeduplicationOptions options) {\n+    return new UuidDeduplicationTransform(options);\n+  }\n+\n+  /** Add Uuids to to-be-published messages that ensures that uniqueness is maintained. */\n+  public static PTransform<PCollection<Message>, PCollection<Message>> addUuids() {\n+    return new AddUuidsTransform();\n+  }\n+\n+  /** Write messages to Pub/Sub Lite. */\n+  public static PTransform<PCollection<Message>, PDone> write(PublisherOptions options) {\n+    return toTransform(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMTA4NA=="}, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDcwNjI4OnYy", "diffSide": "RIGHT", "path": "sdks/java/build-tools/src/main/resources/beam/checkstyle.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoyMDoxNVrOGnKDSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOToyOTo0OFrOGnOG4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMjMzMA==", "bodyText": "I think you can revert this change now", "url": "https://github.com/apache/beam/pull/11919#discussion_r443712330", "createdAt": "2020-06-22T17:20:15Z", "author": {"login": "dpmills"}, "path": "sdks/java/build-tools/src/main/resources/beam/checkstyle.xml", "diffHunk": "@@ -101,7 +101,7 @@ page at http://checkstyle.sourceforge.net/config.html -->\n     -->\n     <module name=\"RegexpSinglelineJava\">\n       <property name=\"id\" value=\"ForbidNonVendoredGuava\"/>\n-      <property name=\"format\" value=\"(\\scom\\.google\\.common\\.(?!testing))|(\\scom\\.google\\.thirdparty)\"/>\n+      <property name=\"format\" value=\"(\\scom\\.google\\.common\\.(?!testing)(?!truth))|(\\scom\\.google\\.thirdparty)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3ODc4Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443778787", "createdAt": "2020-06-22T19:29:48Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/build-tools/src/main/resources/beam/checkstyle.xml", "diffHunk": "@@ -101,7 +101,7 @@ page at http://checkstyle.sourceforge.net/config.html -->\n     -->\n     <module name=\"RegexpSinglelineJava\">\n       <property name=\"id\" value=\"ForbidNonVendoredGuava\"/>\n-      <property name=\"format\" value=\"(\\scom\\.google\\.common\\.(?!testing))|(\\scom\\.google\\.thirdparty)\"/>\n+      <property name=\"format\" value=\"(\\scom\\.google\\.common\\.(?!testing)(?!truth))|(\\scom\\.google\\.thirdparty)\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMjMzMA=="}, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc2NDIwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozODoyOFrOGnKpDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOToyOTo1M1rOGnOHDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMTk5OQ==", "bodyText": "For each of the main entrypoint functions here, please add examples of calling them to the javadoc.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443721999", "createdAt": "2020-06-22T17:38:28Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+   * retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+   * duplicates.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3ODgyOQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443778829", "createdAt": "2020-06-22T19:29:53Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+   * retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+   * duplicates.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMTk5OQ=="}, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjI2OTkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxNjo0N1rOGvrIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyMzoxMVrOGwoULQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0Mjg1Ng==", "bodyText": "Could you send the update to core as a separate PR ?", "url": "https://github.com/apache/beam/pull/11919#discussion_r452642856", "createdAt": "2020-07-10T06:16:47Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "diffHunk": "@@ -109,16 +110,33 @@ public void processElement(\n   public static class ViaRandomKey<T> extends PTransform<PCollection<T>, PCollection<T>> {\n     private ViaRandomKey() {}\n \n+    private ViaRandomKey(@Nullable Integer numBuckets) {\n+      this.numBuckets = numBuckets;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NTM1Nw==", "bodyText": "These are only minor changes to the transform and this is the only file not directly related to pubsub lite io that is changed. Given the high latency on merging beam PRs and the fact that this change was proposed in this pr (see millsd@ comments above), I'd prefer not to.", "url": "https://github.com/apache/beam/pull/11919#discussion_r453645357", "createdAt": "2020-07-13T13:23:11Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "diffHunk": "@@ -109,16 +110,33 @@ public void processElement(\n   public static class ViaRandomKey<T> extends PTransform<PCollection<T>, PCollection<T>> {\n     private ViaRandomKey() {}\n \n+    private ViaRandomKey(@Nullable Integer numBuckets) {\n+      this.numBuckets = numBuckets;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0Mjg1Ng=="}, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjMxOTg1OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjozOTo0M1rOGvrlnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxMTo0M1rOGwn3TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MDM5OQ==", "bodyText": "Did you run into an issue when using existing Reshuffle implementation ?", "url": "https://github.com/apache/beam/pull/11919#discussion_r452650399", "createdAt": "2020-07-10T06:39:43Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "diffHunk": "@@ -109,16 +110,33 @@ public void processElement(\n   public static class ViaRandomKey<T> extends PTransform<PCollection<T>, PCollection<T>> {\n     private ViaRandomKey() {}\n \n+    private ViaRandomKey(@Nullable Integer numBuckets) {\n+      this.numBuckets = numBuckets;\n+    }\n+\n+    // The number of buckets to shard into. This is a performance optimization to prevent having\n+    // unit sized bundles on the output. If unset, uses a random integer key.\n+    private @Nullable Integer numBuckets;\n+\n+    public ViaRandomKey<T> withNumBuckets(@Nullable Integer numBuckets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNzk2NQ==", "bodyText": "It was suggested by millsd@ above in this pr that it would have degenerate performance and lead to single key bundles, so he suggested I rewrite it like this.", "url": "https://github.com/apache/beam/pull/11919#discussion_r453637965", "createdAt": "2020-07-13T13:11:43Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "diffHunk": "@@ -109,16 +110,33 @@ public void processElement(\n   public static class ViaRandomKey<T> extends PTransform<PCollection<T>, PCollection<T>> {\n     private ViaRandomKey() {}\n \n+    private ViaRandomKey(@Nullable Integer numBuckets) {\n+      this.numBuckets = numBuckets;\n+    }\n+\n+    // The number of buckets to shard into. This is a performance optimization to prevent having\n+    // unit sized bundles on the output. If unset, uses a random integer key.\n+    private @Nullable Integer numBuckets;\n+\n+    public ViaRandomKey<T> withNumBuckets(@Nullable Integer numBuckets) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MDM5OQ=="}, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjMyNzY2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0Mjo1OVrOGvrqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzozODo0MlrOGwo85g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTYwMA==", "bodyText": "Please add a link to a Website that describes Pub/Sub Lite and briefly describe the difference between this and the Pub/Sub connector.", "url": "https://github.com/apache/beam/pull/11919#discussion_r452651600", "createdAt": "2020-07-10T06:42:59Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.proto.PubSubMessage;\n+import com.google.cloud.pubsublite.proto.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NTc4Mg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11919#discussion_r453655782", "createdAt": "2020-07-13T13:38:42Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.proto.PubSubMessage;\n+import com.google.cloud.pubsublite.proto.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTYwMA=="}, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjMzMzkxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteUnboundedReaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0NTo0MFrOGvruFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNDo0NlrOGwn-vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MjU2Ng==", "bodyText": "Are you hoping to add integration tests for source and sink in a follow up CL ?", "url": "https://github.com/apache/beam/pull/11919#discussion_r452652566", "createdAt": "2020-07-10T06:45:40Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteUnboundedReaderTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzOTg3MQ==", "bodyText": "end to end integration tests, performance testing and other blockers for marking this as fully supported are WIP, they require a bunch more work.", "url": "https://github.com/apache/beam/pull/11919#discussion_r453639871", "createdAt": "2020-07-13T13:14:46Z", "author": {"login": "dpcollins-google"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteUnboundedReaderTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MjU2Ng=="}, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3610, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}