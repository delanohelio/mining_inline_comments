{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDg5Mjk5", "number": 11689, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMTo0N1rOD8KNYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxNDo0MVrOD8KRZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDA4NDE2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMTo0N1rOGU7epw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozNzo0MVrOGU8cCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5OTIwNw==", "bodyText": "It doesn't seem like the index should be incremented here.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424599207", "createdAt": "2020-05-13T17:11:47Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -317,6 +321,7 @@ def is_valid_split_point(index):\n   def finish(self):\n     # type: () -> None\n     with self.splitting_lock:\n+      self.index += 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNDkyMA==", "bodyText": "We want the final count to represent the number of fully processed elements so when we process 0 elements in the bundle we should end with 0 and not -1. Similarly when we process 1 element in the bundle the final index should be 1 and not 0.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424614920", "createdAt": "2020-05-13T17:37:41Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -317,6 +321,7 @@ def is_valid_split_point(index):\n   def finish(self):\n     # type: () -> None\n     with self.splitting_lock:\n+      self.index += 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5OTIwNw=="}, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDA4OTk5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMzoxOFrOGU7iaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozNjo0MlrOGU8Zyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDE2OQ==", "bodyText": "Operators have a reset method that could be used here.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424600169", "createdAt": "2020-05-13T17:13:18Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -219,6 +219,10 @@ def process_encoded(self, encoded_windowed_values):\n \n   def monitoring_infos(self, transform_id, tag_to_pcollection_id):\n     # type: (str, Dict[str, str]) -> Dict[FrozenSet, metrics_pb2.MonitoringInfo]\n+\n+    # TODO(BEAM-9979): Fix race condition where reused DataInputOperation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNDM0Nw==", "bodyText": "Fixed in Python. Java SDK harness doesn't have something like this plumbed through to its operators.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424614347", "createdAt": "2020-05-13T17:36:42Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -219,6 +219,10 @@ def process_encoded(self, encoded_windowed_values):\n \n   def monitoring_infos(self, transform_id, tag_to_pcollection_id):\n     # type: (str, Dict[str, str]) -> Dict[FrozenSet, metrics_pb2.MonitoringInfo]\n+\n+    # TODO(BEAM-9979): Fix race condition where reused DataInputOperation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDE2OQ=="}, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDA5MzkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxNDozMFrOGU7lBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo0ODowNFrOGU80KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDgzNg==", "bodyText": "Should we also check start == true here like trySplit?", "url": "https://github.com/apache/beam/pull/11689#discussion_r424600836", "createdAt": "2020-05-13T17:14:30Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "diffHunk": "@@ -165,6 +166,8 @@\n \n     addProgressRequestCallback.accept(\n         () -> {\n+          // TODO(BEAM-9979): Fix race condition where reused BeamFnDataReadRunner reports", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTM0Mw==", "bodyText": "No since we need to report the final read index when the bundle is finished.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424601343", "createdAt": "2020-05-13T17:15:21Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "diffHunk": "@@ -165,6 +166,8 @@\n \n     addProgressRequestCallback.accept(\n         () -> {\n+          // TODO(BEAM-9979): Fix race condition where reused BeamFnDataReadRunner reports", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDgzNg=="}, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDEyOQ==", "bodyText": "Is it important to get final index from progress(or how can a runner know it's the final progress)? We will still get it from ProcessBundleResponse when a bundle is finished.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424604129", "createdAt": "2020-05-13T17:19:57Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "diffHunk": "@@ -165,6 +166,8 @@\n \n     addProgressRequestCallback.accept(\n         () -> {\n+          // TODO(BEAM-9979): Fix race condition where reused BeamFnDataReadRunner reports", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDgzNg=="}, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyMTA5Nw==", "bodyText": "Yes it is important since Dataflow uses it for the element sanity check. The call order when the bundle finishes is to invoke all the finish functions on the operators and then invoke progress request callback. The output of this progress request callback is used on both the ProcessBundleProgressResponses and ProcessBundleResponses.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424621097", "createdAt": "2020-05-13T17:48:04Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "diffHunk": "@@ -165,6 +166,8 @@\n \n     addProgressRequestCallback.accept(\n         () -> {\n+          // TODO(BEAM-9979): Fix race condition where reused BeamFnDataReadRunner reports", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDgzNg=="}, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDA5NDQ1OnYy", "diffSide": "RIGHT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxNDo0MVrOGU7laQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMDowMFrOGU8KAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDkzNw==", "bodyText": "I don't think this should be incremented here.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424600937", "createdAt": "2020-05-13T17:14:41Z", "author": {"login": "robertwb"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "diffHunk": "@@ -293,5 +305,9 @@ public void blockTillReadFinishes() throws Exception {\n         processBundleInstructionIdSupplier.get(),\n         pTransformId);\n     readFuture.awaitCompletion();\n+    synchronized (splittingLock) {\n+      started = false;\n+      index += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDMwNQ==", "bodyText": "Nevermind, I see now.", "url": "https://github.com/apache/beam/pull/11689#discussion_r424610305", "createdAt": "2020-05-13T17:30:00Z", "author": {"login": "robertwb"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/BeamFnDataReadRunner.java", "diffHunk": "@@ -293,5 +305,9 @@ public void blockTillReadFinishes() throws Exception {\n         processBundleInstructionIdSupplier.get(),\n         pTransformId);\n     readFuture.awaitCompletion();\n+    synchronized (splittingLock) {\n+      started = false;\n+      index += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDkzNw=="}, "originalCommit": {"oid": "760a4cdf271341152103e6230418f0426be01d3f"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3913, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}