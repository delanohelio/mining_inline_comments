{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODY5Mzk4", "number": 13491, "title": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latenc\u2026", "bodyText": "\u2026y logging\nPlease add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-05T01:23:09Z", "url": "https://github.com/apache/beam/pull/13491", "merged": true, "mergeCommit": {"oid": "cf77f03b3be7b7614101f7ccd87e8c798b3ec388"}, "closed": true, "closedAt": "2021-01-19T19:21:41Z", "author": {"login": "ihji"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdvPXgyABqjQxOTMyOTc2NDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdwKgqyAH2gAyNTMyODY5Mzk4OjBmNTc0ZWZiMGVjODY5NGNmMDQzMDhiOWVhNTA4MmE4YTM3NzhkNDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97919bdea3ed8c8d2023635c973e166145e73111", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/97919bdea3ed8c8d2023635c973e166145e73111", "committedDate": "2020-12-05T01:18:51Z", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging"}, "afterCommit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/8cfafc91ba64c3f0802e601192e116f7eca0eeef", "committedDate": "2021-01-11T23:45:29Z", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1ODMxODgy", "url": "https://github.com/apache/beam/pull/13491#pullrequestreview-565831882", "createdAt": "2021-01-12T00:01:33Z", "commit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDowMTozM1rOIRr6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMToxOTo1NFrOIRtrnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNjE1Nw==", "bodyText": "this.processWideContainer", "url": "https://github.com/apache/beam/pull/13491#discussion_r555416157", "createdAt": "2021-01-12T00:01:33Z", "author": {"login": "ajamato"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/DelegatingCounter.java", "diffHunk": "@@ -38,7 +44,10 @@ public void inc() {\n   /** Increment the counter by the given amount. */\n   @Override\n   public void inc(long n) {\n-    MetricsContainer container = MetricsEnvironment.getCurrentContainer();\n+    MetricsContainer container =\n+        processWideContainer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0Mjk4NQ==", "bodyText": "Would you please use a specific name for the metric where it is instantiated\nSee the URN defined here:\nAPI_REQUEST_LATENCIES\nurn = beam:metric:io:api_request_latencies:v1\nhttps://s.apache.org/beam-gcp-debuggability\nFor Labels:\nfor SERVICE_NAME use \"BigQuery\", METHOD_NAME you can use \"BigQueryBatchWrite\" and \"BigQueryBatchRead\". Which is just referring to API calls which read or write elements in batches.\nAdditional Labels (Populate these if they are available, if not leave it for follow up work for me):\nBIGQUERY_PROJECT_ID\nBIGQUERY_DATASET\nBIGQUERY_TABLE\nBIGQUERY_VIEW\nBIGQUERY_QUERY_NAME- user provided query name\nRESOURCE - combination of the above (See my python PR linked below for reference)\nhttps://github.com/apache/beam/pull/13217/files#diff-5427a5d3887eb695cefde082c58575a2372972996b547d55961abeb4f7bc3debR576", "url": "https://github.com/apache/beam/pull/13491#discussion_r555442985", "createdAt": "2021-01-12T01:13:13Z", "author": {"login": "ajamato"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LatencyRecordingHttpRequestInitializer.java", "diffHunk": "@@ -23,14 +23,26 @@\n import com.google.api.client.http.HttpResponse;\n import com.google.api.client.http.HttpResponseInterceptor;\n import java.io.IOException;\n-import org.apache.beam.sdk.util.Histogram;\n+import org.apache.beam.sdk.metrics.Histogram;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.util.HistogramData;\n \n /** HttpRequestInitializer for recording request to response latency of Http-based API calls. */\n public class LatencyRecordingHttpRequestInitializer implements HttpRequestInitializer {\n+  public static final String HISTOGRAM_NAME = \"latency_ms\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0NTE1MQ==", "bodyText": "namespace and name parameters are specific to user metric (Which is a metric that populates a specific MonitoringInfo URN with a name and namspace parameter).\nHave this just take a MetricName instead which allows for non user metrics\nI.e. like the ElementCount metric\nwhich is uniquely identifiers by a URN and labels.\nhttps://github.com/apache/beam/pull/7272/files#diff-3834ef03b753005ee8251870a88fe3505732e9a7ad34da600f78e33ab9f37139R45\nYou can make it under the LabeledMetrics class, which is meant to be an internal implementation for SDK harness implementations. Not part of the public API (Much like the internal.Metrics in python you've added).", "url": "https://github.com/apache/beam/pull/13491#discussion_r555445151", "createdAt": "2021-01-12T01:19:54Z", "author": {"login": "ajamato"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/Metrics.java", "diffHunk": "@@ -96,6 +97,21 @@ public static Gauge gauge(Class<?> namespace, String name) {\n     return new DelegatingGauge(MetricName.named(namespace, name));\n   }\n \n+  public static class Internal {\n+    public static Counter counter(String namespace, String name, boolean processWideContainer) {\n+      return new DelegatingCounter(MetricName.named(namespace, name), processWideContainer);\n+    }\n+\n+    public static Histogram histogram(\n+        String namespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1ODY3NjE1", "url": "https://github.com/apache/beam/pull/13491#pullrequestreview-565867615", "createdAt": "2021-01-12T01:23:35Z", "commit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMToyMzozNVrOIRtw1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMToyMzozNVrOIRtw1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0NjQ4Nw==", "bodyText": "Is it possible to use this style for logging, if it exists? If not ignore this suggestion.\n    try (Autolock alock = new Autolock(lock)) {\n        // Whatever you need to do while you own the lock\n    } //unlocks here\n    \n    See:\n\nhttps://stackoverflow.com/questions/151917/autolock-in-java-how-to", "url": "https://github.com/apache/beam/pull/13491#discussion_r555446487", "createdAt": "2021-01-12T01:23:35Z", "author": {"login": "ajamato"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/MetricsLogger.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.metrics;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.slf4j.Logger;\n+\n+@Experimental(Kind.METRICS)\n+public interface MetricsLogger extends Serializable {\n+  Lock REPORTING_LOCK = new ReentrantLock();\n+  AtomicLong LAST_REPORTED_MILLIS = new AtomicLong(System.currentTimeMillis());\n+\n+  default void tryLoggingMetrics(\n+      String header, String namespace, long minimumLoggingFrequencyMillis, boolean resetMetrics) {\n+    if (REPORTING_LOCK.tryLock()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f71eb282793ba56051311934eafd27ac25324cf", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/0f71eb282793ba56051311934eafd27ac25324cf", "committedDate": "2021-01-13T10:25:22Z", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/8cfafc91ba64c3f0802e601192e116f7eca0eeef", "committedDate": "2021-01-11T23:45:29Z", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging"}, "afterCommit": {"oid": "0f71eb282793ba56051311934eafd27ac25324cf", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/0f71eb282793ba56051311934eafd27ac25324cf", "committedDate": "2021-01-13T10:25:22Z", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NDc4MTI5", "url": "https://github.com/apache/beam/pull/13491#pullrequestreview-568478129", "createdAt": "2021-01-14T17:48:00Z", "commit": {"oid": "0f71eb282793ba56051311934eafd27ac25324cf"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzo0ODowMFrOITv9lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzo0ODowMFrOITv9lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU3OTY3MA==", "bodyText": "This equality looks werid, why would it be considered equal if the param is null?\nCan you add a clairifying comment", "url": "https://github.com/apache/beam/pull/13491#discussion_r557579670", "createdAt": "2021-01-14T17:48:00Z", "author": {"login": "ajamato"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MetricsContainerImpl.java", "diffHunk": "@@ -383,4 +409,70 @@ public boolean equals(@Nullable Object object) {\n   public int hashCode() {\n     return Objects.hash(stepName, counters, distributions, gauges);\n   }\n+\n+  private boolean equalsMetricName(MetricName metricName, String namespace, String name) {\n+    return (namespace == null || namespace.equals(metricName.getNamespace()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f71eb282793ba56051311934eafd27ac25324cf"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f574efb0ec8694cf04308b9ea5082a8a3778d46", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/0f574efb0ec8694cf04308b9ea5082a8a3778d46", "committedDate": "2021-01-14T20:40:20Z", "message": "fix checkstyle error, rename equalsMetricName"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4337, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}