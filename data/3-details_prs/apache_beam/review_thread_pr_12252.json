{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTkxMzEz", "number": 12252, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozOTo0MVrOEOVt8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1MDoyNVrOEOdabQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDcxMzQ1OnYy", "diffSide": "RIGHT", "path": "website/www/site/content/en/documentation/transforms/python/aggregation/combineglobally.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozOTo0MVrOGxb-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo0NTo1NlrOGxn80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTgyOA==", "bodyText": "@aaltay can you confirm if this and the rest of the descriptions are correct? Thanks!", "url": "https://github.com/apache/beam/pull/12252#discussion_r454491828", "createdAt": "2020-07-14T16:39:41Z", "author": {"login": "davidcavazos"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/combineglobally.md", "diffHunk": "@@ -14,29 +14,197 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n -->\n+\n # CombineGlobally\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineGlobally\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n \n+{{< button-pydoc path=\"apache_beam.transforms.core\" class=\"CombineGlobally\" >}}\n \n Combines all elements in a collection.\n \n See more information in the [Beam Programming Guide](/documentation/programming-guide/#combine).\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n+In the following examples, we create a pipeline with a `PCollection` of produce.\n+Then, we apply `CombineGlobally` in multiple ways to combine all the elements in the `PCollection`.\n+\n+`CombineGlobally` accepts a function that takes a list of elements as an input, and combines them to return a single element.\n+\n+### Example 1: Combining with a function\n+\n+We define a function `get_common_items` which takes a list of sets as an input, and calculates the intersection (common items) of those sets.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_function >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 2: Combining with a lambda function\n+\n+We can also use lambda functions to simplify **Example 1**.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_lambda >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 3: Combining with multiple arguments\n+\n+You can pass functions with multiple arguments to `CombineGlobally`.\n+They are passed as additional positional arguments or keyword arguments to the function.\n+\n+In this example, the lambda function takes `sets` and `exclude` as arguments.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_multiple_arguments >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 4: Combining with side inputs as singletons\n+\n+If the `PCollection` has a single value, such as the average from another computation,\n+passing the `PCollection` as a *singleton* accesses that value.\n+\n+In this example, we pass a `PCollection` the value `'\ud83e\udd55'` as a singleton.\n+We then use that value to exclude specific items.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_singleton >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 5: Combining with side inputs as iterators\n+\n+If the `PCollection` has multiple values, pass the `PCollection` as an *iterator*.\n+This accesses elements lazily as they are needed,\n+so it is possible to iterate over large `PCollection`s that won't fit into memory.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_iter >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+> **Note**: You can pass the `PCollection` as a *list* with `beam.pvalue.AsList(pcollection)`,\n+> but this requires that all the elements fit into memory.\n+\n+### Example 6: Combining with side inputs as dictionaries\n+\n+If a `PCollection` is small enough to fit into memory, then that `PCollection` can be passed as a *dictionary*.\n+Each element must be a `(key, value)` pair.\n+Note that all the elements of the `PCollection` must fit into memory for this.\n+If the `PCollection` won't fit into memory, use `beam.pvalue.AsIter(pcollection)` instead.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_dict >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" custom_common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 7: Combining with a `CombineFn`\n+\n+The more general way to combine elements, and the most flexible, is with a class that inherits from `CombineFn`.\n+\n+* [`CombineFn.create_accumulator()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.create_accumulator):\n+  Called *once per `CombineFn` instance* when the `CombineFn` instance is initialized.\n+  This creates an empty accumulator.\n+  For example, an empty accumulator for a sum would be `0`, while an empty accumulator for a product (multiplication) would be `1`.\n+\n+* [`CombineFn.add_input()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.add_input):\n+  Called *once per element*.\n+  Takes an accumulator and an input element, combines them and returns the updated accumulator.\n+\n+* [`CombineFn.merge_accumulators()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.merge_accumulators):\n+  Called *once per bundle of elements* after processing the last element of the bundle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef60c29c5589d8ffd785b46ad9cac488ba22a6af"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4Nzk1NA==", "bodyText": "@aaltay can you confirm if this and the rest of the descriptions are correct? Thanks!\n\nWill do.\nThere is no guarantee that merge_accumulators will be called once per bundle. It could be called more than once depending on the runner implementation.", "url": "https://github.com/apache/beam/pull/12252#discussion_r454687954", "createdAt": "2020-07-14T22:45:56Z", "author": {"login": "aaltay"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/combineglobally.md", "diffHunk": "@@ -14,29 +14,197 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n -->\n+\n # CombineGlobally\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineGlobally\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n \n+{{< button-pydoc path=\"apache_beam.transforms.core\" class=\"CombineGlobally\" >}}\n \n Combines all elements in a collection.\n \n See more information in the [Beam Programming Guide](/documentation/programming-guide/#combine).\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n+In the following examples, we create a pipeline with a `PCollection` of produce.\n+Then, we apply `CombineGlobally` in multiple ways to combine all the elements in the `PCollection`.\n+\n+`CombineGlobally` accepts a function that takes a list of elements as an input, and combines them to return a single element.\n+\n+### Example 1: Combining with a function\n+\n+We define a function `get_common_items` which takes a list of sets as an input, and calculates the intersection (common items) of those sets.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_function >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 2: Combining with a lambda function\n+\n+We can also use lambda functions to simplify **Example 1**.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_lambda >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 3: Combining with multiple arguments\n+\n+You can pass functions with multiple arguments to `CombineGlobally`.\n+They are passed as additional positional arguments or keyword arguments to the function.\n+\n+In this example, the lambda function takes `sets` and `exclude` as arguments.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_multiple_arguments >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 4: Combining with side inputs as singletons\n+\n+If the `PCollection` has a single value, such as the average from another computation,\n+passing the `PCollection` as a *singleton* accesses that value.\n+\n+In this example, we pass a `PCollection` the value `'\ud83e\udd55'` as a singleton.\n+We then use that value to exclude specific items.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_singleton >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 5: Combining with side inputs as iterators\n+\n+If the `PCollection` has multiple values, pass the `PCollection` as an *iterator*.\n+This accesses elements lazily as they are needed,\n+so it is possible to iterate over large `PCollection`s that won't fit into memory.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_iter >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+> **Note**: You can pass the `PCollection` as a *list* with `beam.pvalue.AsList(pcollection)`,\n+> but this requires that all the elements fit into memory.\n+\n+### Example 6: Combining with side inputs as dictionaries\n+\n+If a `PCollection` is small enough to fit into memory, then that `PCollection` can be passed as a *dictionary*.\n+Each element must be a `(key, value)` pair.\n+Note that all the elements of the `PCollection` must fit into memory for this.\n+If the `PCollection` won't fit into memory, use `beam.pvalue.AsIter(pcollection)` instead.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_dict >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" custom_common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 7: Combining with a `CombineFn`\n+\n+The more general way to combine elements, and the most flexible, is with a class that inherits from `CombineFn`.\n+\n+* [`CombineFn.create_accumulator()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.create_accumulator):\n+  Called *once per `CombineFn` instance* when the `CombineFn` instance is initialized.\n+  This creates an empty accumulator.\n+  For example, an empty accumulator for a sum would be `0`, while an empty accumulator for a product (multiplication) would be `1`.\n+\n+* [`CombineFn.add_input()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.add_input):\n+  Called *once per element*.\n+  Takes an accumulator and an input element, combines them and returns the updated accumulator.\n+\n+* [`CombineFn.merge_accumulators()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.merge_accumulators):\n+  Called *once per bundle of elements* after processing the last element of the bundle.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ5MTgyOA=="}, "originalCommit": {"oid": "ef60c29c5589d8ffd785b46ad9cac488ba22a6af"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk3NDIxOnYy", "diffSide": "RIGHT", "path": "website/www/site/content/en/documentation/transforms/python/aggregation/combineglobally.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1MDoyNVrOGxoDSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1MDoyNVrOGxoDSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4OTYwOQ==", "bodyText": "\"Called once per CombineFn instance when the CombineFn instance is done.\" -> this will be runner dependent. I would drop this.\n\"After all accumulators have been merged into a single final accumulator, extract_output allows to do additional calculations.\" -> I will simplify this to drop the part about merging. This could be called without any merging (e.g. the case where there are not other accumulators to merge.)\n\"This is useful for calculating averages, percentages, or anything that needs aggregate information from all the elements.\" -> This describers combiners in general. Combiners need the whole interface including extract_output to to accomplish this goal.", "url": "https://github.com/apache/beam/pull/12252#discussion_r454689609", "createdAt": "2020-07-14T22:50:25Z", "author": {"login": "aaltay"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/combineglobally.md", "diffHunk": "@@ -14,29 +14,197 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n -->\n+\n # CombineGlobally\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineGlobally\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n \n+{{< button-pydoc path=\"apache_beam.transforms.core\" class=\"CombineGlobally\" >}}\n \n Combines all elements in a collection.\n \n See more information in the [Beam Programming Guide](/documentation/programming-guide/#combine).\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n+In the following examples, we create a pipeline with a `PCollection` of produce.\n+Then, we apply `CombineGlobally` in multiple ways to combine all the elements in the `PCollection`.\n+\n+`CombineGlobally` accepts a function that takes a list of elements as an input, and combines them to return a single element.\n+\n+### Example 1: Combining with a function\n+\n+We define a function `get_common_items` which takes a list of sets as an input, and calculates the intersection (common items) of those sets.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_function >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 2: Combining with a lambda function\n+\n+We can also use lambda functions to simplify **Example 1**.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_lambda >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 3: Combining with multiple arguments\n+\n+You can pass functions with multiple arguments to `CombineGlobally`.\n+They are passed as additional positional arguments or keyword arguments to the function.\n+\n+In this example, the lambda function takes `sets` and `exclude` as arguments.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_multiple_arguments >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 4: Combining with side inputs as singletons\n+\n+If the `PCollection` has a single value, such as the average from another computation,\n+passing the `PCollection` as a *singleton* accesses that value.\n+\n+In this example, we pass a `PCollection` the value `'\ud83e\udd55'` as a singleton.\n+We then use that value to exclude specific items.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_singleton >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 5: Combining with side inputs as iterators\n+\n+If the `PCollection` has multiple values, pass the `PCollection` as an *iterator*.\n+This accesses elements lazily as they are needed,\n+so it is possible to iterate over large `PCollection`s that won't fit into memory.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_iter >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" common_items_with_exceptions >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+> **Note**: You can pass the `PCollection` as a *list* with `beam.pvalue.AsList(pcollection)`,\n+> but this requires that all the elements fit into memory.\n+\n+### Example 6: Combining with side inputs as dictionaries\n+\n+If a `PCollection` is small enough to fit into memory, then that `PCollection` can be passed as a *dictionary*.\n+Each element must be a `(key, value)` pair.\n+Note that all the elements of the `PCollection` must fit into memory for this.\n+If the `PCollection` won't fit into memory, use `beam.pvalue.AsIter(pcollection)` instead.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" combineglobally_side_inputs_dict >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output `PCollection` after `CombineGlobally`:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally_test.py\" custom_common_items >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/combineglobally.py\" >}}\n+\n+### Example 7: Combining with a `CombineFn`\n+\n+The more general way to combine elements, and the most flexible, is with a class that inherits from `CombineFn`.\n+\n+* [`CombineFn.create_accumulator()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.create_accumulator):\n+  Called *once per `CombineFn` instance* when the `CombineFn` instance is initialized.\n+  This creates an empty accumulator.\n+  For example, an empty accumulator for a sum would be `0`, while an empty accumulator for a product (multiplication) would be `1`.\n+\n+* [`CombineFn.add_input()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.add_input):\n+  Called *once per element*.\n+  Takes an accumulator and an input element, combines them and returns the updated accumulator.\n+\n+* [`CombineFn.merge_accumulators()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.merge_accumulators):\n+  Called *once per bundle of elements* after processing the last element of the bundle.\n+  Multiple accumulators could be processed in parallel, so this function helps merging them into a single accumulator.\n+\n+* [`CombineFn.extract_output()`](https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.core.html#apache_beam.transforms.core.CombineFn.extract_output):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef60c29c5589d8ffd785b46ad9cac488ba22a6af"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1044, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}