{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTU1MzE2", "number": 12050, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMjozMlrOEISblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyMDozOVrOEaFAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTI2MDM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMjozMlrOGoKH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoyMzoxNFrOG-1WcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ==", "bodyText": "Would it be possible to add test case for bw compatible code path?", "url": "https://github.com/apache/beam/pull/12050#discussion_r444762111", "createdAt": "2020-06-24T09:22:32Z", "author": {"login": "dmvk"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzODQ2Nw==", "bodyText": "ok, I added the requested test for bw compatibility\nbtw you can see the buggy behavior there (lost information whether baseFilename is file/directory)", "url": "https://github.com/apache/beam/pull/12050#discussion_r444838467", "createdAt": "2020-06-24T11:51:36Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ=="}, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2MjMzMQ==", "bodyText": "convertToFileResourceIfPossible attempts to match a file and if that fails attempts to match a directory.\nIs the issue that the underlying filesystem erroneously says something is a file when really it is a directory?", "url": "https://github.com/apache/beam/pull/12050#discussion_r445062331", "createdAt": "2020-06-24T17:39:44Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ=="}, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4NTM3OA==", "bodyText": "Exactly, that's the issue, for example LocalFileSystem matches path /tmp/dirA/ as file..\nHow about something like this?\npublic static class ParamsCoder extends AtomicCoder<Params> {\n    private static final ParamsCoder INSTANCE = new ParamsCoder();\n    private static final Coder<String> STRING_CODER = StringUtf8Coder.of();\n\n    public static ParamsCoder of() {\n      return INSTANCE;\n    }\n\n    @Override\n    public void encode(Params value, OutputStream outStream) throws IOException {\n      if (value == null) {\n        throw new CoderException(\"cannot encode a null value\");\n      }\n      ResourceId baseFilename = value.getBaseFilename().get();\n      String baseFilenameString =\n          (baseFilename.isDirectory() && !baseFilename.toString().endsWith(\"/\"))\n              ? baseFilename.toString() + \"/\"\n              : baseFilename.toString();\n      STRING_CODER.encode(baseFilenameString, outStream);\n      STRING_CODER.encode(value.getShardTemplate(), outStream);\n      STRING_CODER.encode(value.getSuffix(), outStream);\n    }\n\n    @Override\n    public Params decode(InputStream inStream) throws IOException {\n      String baseFilenameString = STRING_CODER.decode(inStream);\n      ResourceId prefix =\n          FileSystems.matchNewResource(baseFilenameString, baseFilenameString.endsWith(\"/\"));\n      String shardTemplate = STRING_CODER.decode(inStream);\n      String suffix = STRING_CODER.decode(inStream);\n      return new Params()\n          .withBaseFilename(prefix)\n          .withShardTemplate(shardTemplate)\n          .withSuffix(suffix);\n    }\n  }\nBut I'm not sure how to handle the suffix (/) to ensure compatibility among (file) systems", "url": "https://github.com/apache/beam/pull/12050#discussion_r445485378", "createdAt": "2020-06-25T11:19:20Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ=="}, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NjI1MQ==", "bodyText": "I think that there are a couple of options here:\n\nTake the breaking change to the coder because it is a fix, make sure it is documented in the release notes\nTry to fix the underlying filesystem to do a better job of file/dir matching\nDeprecate this filename policy, create a new one (DefaultFilenamePolicy2) and tell people to use it in new code.\n\nI'm for 1 but would ask for consensus on the mailing list.\nAlso, any / hacking will make things worse since different file systems use different path separator characters (e.g linux vs windows)", "url": "https://github.com/apache/beam/pull/12050#discussion_r445696251", "createdAt": "2020-06-25T16:45:27Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ=="}, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTc2OA==", "bodyText": "OK, I agree with the first solution - taking the breaking change. I will ask on the mailing list.\nBTW I did workaround in my project where I use only files (not directories) as Params base filenames and then everything works fine. That means I no longer needs this fix but it still seems to me like a bug which is worth fixing.\n(P.S.: The suffix wouldn't have to be the path separator (/) but e.g. sometotallyrandomstring123  - but it's very ugly...)", "url": "https://github.com/apache/beam/pull/12050#discussion_r464331768", "createdAt": "2020-08-03T10:34:48Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ=="}, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTYwMA==", "bodyText": "https://lists.apache.org/thread.html/r1d844830648b88948d38d0c28d106dd7fe2ed92af4a170e2679f8c2f%40%3Cdev.beam.apache.org%3E", "url": "https://github.com/apache/beam/pull/12050#discussion_r464849600", "createdAt": "2020-08-04T07:19:59Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ=="}, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzODk5Mw==", "bodyText": "Hi @lukecwik, finally after the discussion in the mailing list I chose the second proposed option and fixed the underlying filesystem. Turns out that only LocalFileSystem is broken, on the other hand e.g. HDFS and S3 look fine and already have this kind of check.\nI still think that the proper solution should be to use the ResourceIdCoder instead of StringUtf8Coder but I understand the consequences.", "url": "https://github.com/apache/beam/pull/12050#discussion_r468538993", "createdAt": "2020-08-11T12:23:14Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/DefaultFilenamePolicy.java", "diffHunk": "@@ -182,19 +184,26 @@ public void encode(Params value, OutputStream outStream) throws IOException {\n       if (value == null) {\n         throw new CoderException(\"cannot encode a null value\");\n       }\n-      stringCoder.encode(value.baseFilename.get().toString(), outStream);\n-      stringCoder.encode(value.shardTemplate, outStream);\n-      stringCoder.encode(value.suffix, outStream);\n+      STRING_CODER.encode(value.baseFilename.get().toString(), outStream);\n+      STRING_CODER.encode(value.shardTemplate, outStream);\n+      STRING_CODER.encode(value.suffix, outStream);\n+      BOOLEAN_CODER.encode(value.baseFilename.get().isDirectory(), outStream);\n     }\n \n     @Override\n     public Params decode(InputStream inStream) throws IOException {\n-      ResourceId prefix =\n-          FileBasedSink.convertToFileResourceIfPossible(stringCoder.decode(inStream));\n-      String shardTemplate = stringCoder.decode(inStream);\n-      String suffix = stringCoder.decode(inStream);\n+      String prefix = STRING_CODER.decode(inStream);\n+      String shardTemplate = STRING_CODER.decode(inStream);\n+      String suffix = STRING_CODER.decode(inStream);\n+      ResourceId baseFilename;\n+      if (inStream.available() > 0) {\n+        baseFilename = FileSystems.matchNewResource(prefix, BOOLEAN_CODER.decode(inStream));\n+      } else {\n+        // fallback for ensure backward compatibility\n+        baseFilename = FileBasedSink.convertToFileResourceIfPossible(prefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjExMQ=="}, "originalCommit": {"oid": "738499818a779110f761dc549f0d7543717904b9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzcyODExOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/DefaultFilenamePolicyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMTo1M1rOHDRCJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjozNDo1MVrOHDtVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4Njg1NQ==", "bodyText": "Use CoderUtils.clone", "url": "https://github.com/apache/beam/pull/12050#discussion_r473186855", "createdAt": "2020-08-19T17:01:53Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/DefaultFilenamePolicyTest.java", "diffHunk": "@@ -48,6 +51,26 @@ private static String constructName(\n     return constructed.toString();\n   }\n \n+  private static DefaultFilenamePolicy.Params encodeDecodeParams(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdb8f4169acbc3f2cb3a4767dd1e1d2a7bd53e3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1MDQ0Mw==", "bodyText": "thanks for the advice \ud83d\udc4d", "url": "https://github.com/apache/beam/pull/12050#discussion_r473650443", "createdAt": "2020-08-20T06:34:51Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/DefaultFilenamePolicyTest.java", "diffHunk": "@@ -48,6 +51,26 @@ private static String constructName(\n     return constructed.toString();\n   }\n \n+  private static DefaultFilenamePolicy.Params encodeDecodeParams(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4Njg1NQ=="}, "originalCommit": {"oid": "1cdb8f4169acbc3f2cb3a4767dd1e1d2a7bd53e3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzc1NDYxOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/LocalFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNjo1OVrOHDRUFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjozNToxM1rOHDtWAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ0NQ==", "bodyText": "Do you want to add the file separator if it doesn't exist if isDirectory == true. This will help make it less error prone for users. Similar to GcsFileSystem.", "url": "https://github.com/apache/beam/pull/12050#discussion_r473191445", "createdAt": "2020-08-19T17:06:59Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/LocalFileSystem.java", "diffHunk": "@@ -202,6 +202,10 @@ protected void delete(Collection<LocalResourceId> resourceIds) throws IOExceptio\n \n   @Override\n   protected LocalResourceId matchNewResource(String singleResourceSpec, boolean isDirectory) {\n+    if (singleResourceSpec.endsWith(File.separator) && !isDirectory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdb8f4169acbc3f2cb3a4767dd1e1d2a7bd53e3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1MDY4OQ==", "bodyText": "sounds good, I added it", "url": "https://github.com/apache/beam/pull/12050#discussion_r473650689", "createdAt": "2020-08-20T06:35:13Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/LocalFileSystem.java", "diffHunk": "@@ -202,6 +202,10 @@ protected void delete(Collection<LocalResourceId> resourceIds) throws IOExceptio\n \n   @Override\n   protected LocalResourceId matchNewResource(String singleResourceSpec, boolean isDirectory) {\n+    if (singleResourceSpec.endsWith(File.separator) && !isDirectory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTQ0NQ=="}, "originalCommit": {"oid": "1cdb8f4169acbc3f2cb3a4767dd1e1d2a7bd53e3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzgwMzk0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/LocalFileSystem.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyMDozOVrOHDRzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1NTo0MlrOHELAtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5OTUyMA==", "bodyText": "What if the character is escaped and being used in the name component of the path string?", "url": "https://github.com/apache/beam/pull/12050#discussion_r473199520", "createdAt": "2020-08-19T17:20:39Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/LocalFileSystem.java", "diffHunk": "@@ -202,6 +202,10 @@ protected void delete(Collection<LocalResourceId> resourceIds) throws IOExceptio\n \n   @Override\n   protected LocalResourceId matchNewResource(String singleResourceSpec, boolean isDirectory) {\n+    if (singleResourceSpec.endsWith(File.separator) && !isDirectory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdb8f4169acbc3f2cb3a4767dd1e1d2a7bd53e3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1MjY2Ng==", "bodyText": "Is it even possible? For example according to https://stackoverflow.com/questions/9847288/is-it-possible-to-use-in-a-filename it's not. Or do you mean something different?", "url": "https://github.com/apache/beam/pull/12050#discussion_r473652666", "createdAt": "2020-08-20T06:37:54Z", "author": {"login": "davidak09"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/LocalFileSystem.java", "diffHunk": "@@ -202,6 +202,10 @@ protected void delete(Collection<LocalResourceId> resourceIds) throws IOExceptio\n \n   @Override\n   protected LocalResourceId matchNewResource(String singleResourceSpec, boolean isDirectory) {\n+    if (singleResourceSpec.endsWith(File.separator) && !isDirectory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5OTUyMA=="}, "originalCommit": {"oid": "1cdb8f4169acbc3f2cb3a4767dd1e1d2a7bd53e3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjc1Ng==", "bodyText": "Your right, it seems as though Linux doesn't allow /, Mac OS X doesn't allow :, Windows doesn't allow \\.", "url": "https://github.com/apache/beam/pull/12050#discussion_r474136756", "createdAt": "2020-08-20T16:55:42Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/LocalFileSystem.java", "diffHunk": "@@ -202,6 +202,10 @@ protected void delete(Collection<LocalResourceId> resourceIds) throws IOExceptio\n \n   @Override\n   protected LocalResourceId matchNewResource(String singleResourceSpec, boolean isDirectory) {\n+    if (singleResourceSpec.endsWith(File.separator) && !isDirectory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5OTUyMA=="}, "originalCommit": {"oid": "1cdb8f4169acbc3f2cb3a4767dd1e1d2a7bd53e3"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3554, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}