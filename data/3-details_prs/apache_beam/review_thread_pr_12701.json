{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODg0MDY2", "number": 12701, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMjowNFrOEfAoKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMjowNFrOEfAoKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUxNTkyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMjowNFrOHLBI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowODo0MlrOHLCZjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTA2NQ==", "bodyText": "how do we deal with other statuscodes? Shouldn't we still write the endofstream to the file for other errors?", "url": "https://github.com/apache/beam/pull/12701#discussion_r481315065", "createdAt": "2020-09-01T17:32:04Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "diffHunk": "@@ -276,11 +276,20 @@ def _stream_events_from_rpc(endpoint, output_tags, coder, channel, is_alive):\n         output_ids=[str(tag) for tag in output_tags])\n \n     event_stream = stub.Events(event_request)\n-    for e in event_stream:\n-      channel.put(_TestStream.test_stream_payload_to_events(e, coder))\n-      if not is_alive():\n+    try:\n+      for e in event_stream:\n+        channel.put(_TestStream.test_stream_payload_to_events(e, coder))\n+        if not is_alive():\n+          return\n+    except grpc.RpcError as e:\n+      # This happens when the Python interpreter shuts down or whn in a\n+      # notebook environment when the kernel is interrupted.\n+      if e.code() == grpc.StatusCode.UNAVAILABLE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44bcb533bd791c919424471d295e8f8aefb3f5e7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTY5NQ==", "bodyText": "So far I've only seen UNAVAILABLE as a non-error code. But looking at https://developers.google.com/maps-booking/reference/grpc-api/status_codes I think we can also add CANCELLED to not forward the exception.\nAt L290, we do have a finally clause which will run regardless, so the endofstream will always be written to the channel.", "url": "https://github.com/apache/beam/pull/12701#discussion_r481335695", "createdAt": "2020-09-01T18:08:42Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "diffHunk": "@@ -276,11 +276,20 @@ def _stream_events_from_rpc(endpoint, output_tags, coder, channel, is_alive):\n         output_ids=[str(tag) for tag in output_tags])\n \n     event_stream = stub.Events(event_request)\n-    for e in event_stream:\n-      channel.put(_TestStream.test_stream_payload_to_events(e, coder))\n-      if not is_alive():\n+    try:\n+      for e in event_stream:\n+        channel.put(_TestStream.test_stream_payload_to_events(e, coder))\n+        if not is_alive():\n+          return\n+    except grpc.RpcError as e:\n+      # This happens when the Python interpreter shuts down or whn in a\n+      # notebook environment when the kernel is interrupted.\n+      if e.code() == grpc.StatusCode.UNAVAILABLE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTA2NQ=="}, "originalCommit": {"oid": "44bcb533bd791c919424471d295e8f8aefb3f5e7"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 598, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}