{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDc1NTYz", "number": 12800, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoxNDowOVrOEmSIAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoyMTo0M1rOEmSPhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTc4MzA3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoxNDowOVrOHWONfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjo0MjoyNVrOHWO2KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MzU0OQ==", "bodyText": "it should also be removed, right? (del self._recording_managers[id] or someting like that?)", "url": "https://github.com/apache/beam/pull/12800#discussion_r493063549", "createdAt": "2020-09-22T22:14:09Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -348,6 +352,48 @@ def evict_cache_manager(self, pipeline=None):\n       return self._cache_managers.pop(str(id(pipeline)), None)\n     self._cache_managers.clear()\n \n+  def set_recording_manager(self, recording_manager, pipeline):\n+    \"\"\"Sets the recording manager for the given pipeline.\"\"\"\n+    if self.get_recording_manager(pipeline) is recording_manager:\n+      # NOOP if setting to the same recording_manager.\n+      return\n+    self._recording_managers[str(id(pipeline))] = recording_manager\n+\n+  def get_recording_manager(self, pipeline, create_if_absent=False):\n+    \"\"\"Gets the recording manager for the given pipeline.\"\"\"\n+    recording_manager = self._recording_managers.get(str(id(pipeline)), None)\n+    if not recording_manager and create_if_absent:\n+      recording_manager = RecordingManager(pipeline)\n+      self._recording_managers[str(id(pipeline))] = recording_manager\n+    return recording_manager\n+\n+  def evict_recording_manager(self, pipeline):\n+    \"\"\"Evicts the recording manager for the given pipeline.\n+\n+    This stops the background caching job and clears the cache.\n+    Noop if the pipeline is absent from the environment. If no\n+    pipeline is specified, evicts for all pipelines.\n+    \"\"\"\n+    if not pipeline:\n+      for rm in self._recording_managers.values():\n+        rm.cancel()\n+        rm.clear()\n+      self._recording_managers = {}\n+      return\n+\n+    recording_manager = self.get_recording_manager(pipeline)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51244427855d5c9436784b1e82bce97310f752f8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3Mzk2MQ==", "bodyText": "Added a del", "url": "https://github.com/apache/beam/pull/12800#discussion_r493073961", "createdAt": "2020-09-22T22:42:25Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -348,6 +352,48 @@ def evict_cache_manager(self, pipeline=None):\n       return self._cache_managers.pop(str(id(pipeline)), None)\n     self._cache_managers.clear()\n \n+  def set_recording_manager(self, recording_manager, pipeline):\n+    \"\"\"Sets the recording manager for the given pipeline.\"\"\"\n+    if self.get_recording_manager(pipeline) is recording_manager:\n+      # NOOP if setting to the same recording_manager.\n+      return\n+    self._recording_managers[str(id(pipeline))] = recording_manager\n+\n+  def get_recording_manager(self, pipeline, create_if_absent=False):\n+    \"\"\"Gets the recording manager for the given pipeline.\"\"\"\n+    recording_manager = self._recording_managers.get(str(id(pipeline)), None)\n+    if not recording_manager and create_if_absent:\n+      recording_manager = RecordingManager(pipeline)\n+      self._recording_managers[str(id(pipeline))] = recording_manager\n+    return recording_manager\n+\n+  def evict_recording_manager(self, pipeline):\n+    \"\"\"Evicts the recording manager for the given pipeline.\n+\n+    This stops the background caching job and clears the cache.\n+    Noop if the pipeline is absent from the environment. If no\n+    pipeline is specified, evicts for all pipelines.\n+    \"\"\"\n+    if not pipeline:\n+      for rm in self._recording_managers.values():\n+        rm.cancel()\n+        rm.clear()\n+      self._recording_managers = {}\n+      return\n+\n+    recording_manager = self.get_recording_manager(pipeline)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MzU0OQ=="}, "originalCommit": {"oid": "51244427855d5c9436784b1e82bce97310f752f8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTgwMjI5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoyMTo0M1rOHWOYvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzowMDowMFrOHWPM8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NjQyOA==", "bodyText": "this function looks to be somewhat inefficient. WDYT? No need to change it if you don't think it will be heavily used / not too many elements will be watched (iterated by the function), but WDYT?", "url": "https://github.com/apache/beam/pull/12800#discussion_r493066428", "createdAt": "2020-09-22T22:21:43Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -199,6 +199,93 @@ def display_timezone(self, value):\n     self._display_timezone = value\n \n \n+class Recordings():\n+  \"\"\"An introspection interface for recordings for pipelines.\n+\n+  When a user materializes a PCollection onto disk (eg. ib.show) for a streaming\n+  pipeline, a background recording job is started. This job pulls data from all\n+  defined unbounded sources for that PCollection's pipeline. The following\n+  methods allow for introspection into that background recording job.\n+  \"\"\"\n+  def describe(self, pipeline=None):\n+    # type: (Optional[beam.Pipeline]) -> dict[str, Any]\n+\n+    \"\"\"Returns a description of all the recordings for the given pipeline.\n+\n+    If no pipeline is given then this returns a dictionary of descriptions for\n+    all pipelines.\n+    \"\"\"\n+\n+    watching = ie.current_env().watching()\n+    description = ie.current_env().describe_all_recordings()\n+\n+    # In the case that the user has multiple pipelines, this correlates the\n+    # pipeline object to the variable name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51244427855d5c9436784b1e82bce97310f752f8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3OTc5NQ==", "bodyText": "This shouldn't be heavily used, but yeah it's pretty inefficient. I moved this into the InteractiveEnvironment when constructing a RecordingManager so we only pay the price once per pipeline.", "url": "https://github.com/apache/beam/pull/12800#discussion_r493079795", "createdAt": "2020-09-22T23:00:00Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -199,6 +199,93 @@ def display_timezone(self, value):\n     self._display_timezone = value\n \n \n+class Recordings():\n+  \"\"\"An introspection interface for recordings for pipelines.\n+\n+  When a user materializes a PCollection onto disk (eg. ib.show) for a streaming\n+  pipeline, a background recording job is started. This job pulls data from all\n+  defined unbounded sources for that PCollection's pipeline. The following\n+  methods allow for introspection into that background recording job.\n+  \"\"\"\n+  def describe(self, pipeline=None):\n+    # type: (Optional[beam.Pipeline]) -> dict[str, Any]\n+\n+    \"\"\"Returns a description of all the recordings for the given pipeline.\n+\n+    If no pipeline is given then this returns a dictionary of descriptions for\n+    all pipelines.\n+    \"\"\"\n+\n+    watching = ie.current_env().watching()\n+    description = ie.current_env().describe_all_recordings()\n+\n+    # In the case that the user has multiple pipelines, this correlates the\n+    # pipeline object to the variable name.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NjQyOA=="}, "originalCommit": {"oid": "51244427855d5c9436784b1e82bce97310f752f8"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 490, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}