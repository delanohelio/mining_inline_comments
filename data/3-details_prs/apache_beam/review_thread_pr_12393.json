{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTA3MTU0", "number": 12393, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo0MTowN1rOETCjzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxNjozOVrOETU-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDAwMzMyOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/create.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo0MTowN1rOG4jenQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo0MTowN1rOG4jenQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDcxNw==", "bodyText": "Optional, but how about this wording?:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // array. Differently from Create this supports the creation of an empty\n          \n          \n            \n            // array. Unlike Create this supports the creation of an empty", "url": "https://github.com/apache/beam/pull/12393#discussion_r461954717", "createdAt": "2020-07-28T23:41:07Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Differently from Create this supports the creation of an empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDAwNzg4OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/create.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo0MzoxN1rOG4jhOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjozMDo1MlrOG4qZmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NTM4Ng==", "bodyText": "It seems better to have the error check below happen before this loop (unless you have a specific reason for putting the loop first).", "url": "https://github.com/apache/beam/pull/12393#discussion_r461955386", "createdAt": "2020-07-28T23:43:17Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Differently from Create this supports the creation of an empty\n+// PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n+\tvar ret []interface{}\n+\tfor i := 0; i < val.Len(); i++ {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2ODEyMA==", "bodyText": "You are right, thanks for spotting this.", "url": "https://github.com/apache/beam/pull/12393#discussion_r462068120", "createdAt": "2020-07-29T06:30:52Z", "author": {"login": "simonepri"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Differently from Create this supports the creation of an empty\n+// PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n+\tvar ret []interface{}\n+\tfor i := 0; i < val.Len(); i++ {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NTM4Ng=="}, "originalCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDA0OTg5OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/create.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowMjo1NlrOG4j5Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowMjo1NlrOG4j5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MTU1MA==", "bodyText": "Same suggestion as above:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // array. The values must be of the same type. Differently from TryCreate this\n          \n          \n            \n            // array. The values must be of the same type. Unlike TryCreate this", "url": "https://github.com/apache/beam/pull/12393#discussion_r461961550", "createdAt": "2020-07-29T00:02:56Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Differently from Create this supports the creation of an empty\n+// PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n+\tvar ret []interface{}\n+\tfor i := 0; i < val.Len(); i++ {\n+\t\tret = append(ret, val.Index(i).Interface())\n+\t}\n \tif val.Kind() != reflect.Slice && val.Kind() != reflect.Array {\n \t\tpanic(fmt.Sprintf(\"Input %v must be a slice or array\", list))\n \t}\n-\tfor i := 0; i < val.Len(); i++ {\n-\t\tret = append(ret, val.Index(i).Interface())\n+\tif val.Len() == 0 {\n+\t\tt := reflect.TypeOf(list).Elem()\n+\t\treturn Must(TryCreateList(s, t, ret))\n \t}\n-\treturn Must(TryCreate(s, ret...))\n+\tt := reflect.ValueOf(ret[0]).Type()\n+\treturn Must(TryCreateList(s, t, ret))\n }\n \n func addCreateCtx(err error, s Scope) error {\n \treturn errors.WithContextf(err, \"inserting Create in scope %s\", s)\n }\n \n-// TryCreate inserts a fixed set of values into the pipeline. The values must\n-// be of the same type.\n+// TryCreate inserts a fixed non-empty set of values into the pipeline. The\n+// values must be of the same type.\n func TryCreate(s Scope, values ...interface{}) (PCollection, error) {\n \tif len(values) == 0 {\n \t\treturn PCollection{}, addCreateCtx(errors.New(\"create has no values\"), s)\n \t}\n \n \tt := reflect.ValueOf(values[0]).Type()\n+\treturn TryCreateList(s, t, values)\n+}\n+\n+// TryCreateList inserts a fixed set of values into the pipeline from a slice or\n+// array. The values must be of the same type. Differently from TryCreate this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzAyMTU3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/create.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxNjozOVrOG5ABVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzowODoxN1rOG5B86Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMjM1Nw==", "bodyText": "TryCreateList and CreateList should only differ in returning an error, and not force different parameters.\nThat said, for convenience it's totally reasonable for an unexported tryCreateList to have this signature for reuse as you've done, and have the exported TryCreateList infer from the raw empty list type.", "url": "https://github.com/apache/beam/pull/12393#discussion_r462422357", "createdAt": "2020-07-29T16:16:39Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Unlike Create this supports the creation of an empty PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n \tif val.Kind() != reflect.Slice && val.Kind() != reflect.Array {\n \t\tpanic(fmt.Sprintf(\"Input %v must be a slice or array\", list))\n \t}\n+\tvar ret []interface{}\n \tfor i := 0; i < val.Len(); i++ {\n \t\tret = append(ret, val.Index(i).Interface())\n \t}\n-\treturn Must(TryCreate(s, ret...))\n+\tvar t reflect.Type\n+\tif len(ret) == 0 {\n+\t\tt = reflect.TypeOf(list).Elem()\n+\t} else {\n+\t\tt = reflect.ValueOf(ret[0]).Type()\n+\t}\n+\treturn Must(TryCreateList(s, ret, t))\n }\n \n func addCreateCtx(err error, s Scope) error {\n \treturn errors.WithContextf(err, \"inserting Create in scope %s\", s)\n }\n \n-// TryCreate inserts a fixed set of values into the pipeline. The values must\n-// be of the same type.\n+// TryCreate inserts a fixed non-empty set of values into the pipeline. The\n+// values must be of the same type.\n func TryCreate(s Scope, values ...interface{}) (PCollection, error) {\n \tif len(values) == 0 {\n \t\treturn PCollection{}, addCreateCtx(errors.New(\"create has no values\"), s)\n \t}\n \n \tt := reflect.ValueOf(values[0]).Type()\n+\treturn TryCreateList(s, values, t)\n+}\n+\n+// TryCreateList inserts a fixed set of values into the pipeline from a slice or\n+// array. The values must be of the same type. Unlike TryCreate this supports\n+// the creation of an empty PCollection.\n+func TryCreateList(s Scope, values []interface{}, t reflect.Type) (PCollection, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57133f8db8bbfd96c02beffb3cb7e907ac8c4697"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1Mzk5Mw==", "bodyText": "Thanks for the comment!\nI did not know about this convention, but makes completely sense.\nLet me know if it is okay now.", "url": "https://github.com/apache/beam/pull/12393#discussion_r462453993", "createdAt": "2020-07-29T17:08:17Z", "author": {"login": "simonepri"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Unlike Create this supports the creation of an empty PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n \tif val.Kind() != reflect.Slice && val.Kind() != reflect.Array {\n \t\tpanic(fmt.Sprintf(\"Input %v must be a slice or array\", list))\n \t}\n+\tvar ret []interface{}\n \tfor i := 0; i < val.Len(); i++ {\n \t\tret = append(ret, val.Index(i).Interface())\n \t}\n-\treturn Must(TryCreate(s, ret...))\n+\tvar t reflect.Type\n+\tif len(ret) == 0 {\n+\t\tt = reflect.TypeOf(list).Elem()\n+\t} else {\n+\t\tt = reflect.ValueOf(ret[0]).Type()\n+\t}\n+\treturn Must(TryCreateList(s, ret, t))\n }\n \n func addCreateCtx(err error, s Scope) error {\n \treturn errors.WithContextf(err, \"inserting Create in scope %s\", s)\n }\n \n-// TryCreate inserts a fixed set of values into the pipeline. The values must\n-// be of the same type.\n+// TryCreate inserts a fixed non-empty set of values into the pipeline. The\n+// values must be of the same type.\n func TryCreate(s Scope, values ...interface{}) (PCollection, error) {\n \tif len(values) == 0 {\n \t\treturn PCollection{}, addCreateCtx(errors.New(\"create has no values\"), s)\n \t}\n \n \tt := reflect.ValueOf(values[0]).Type()\n+\treturn TryCreateList(s, values, t)\n+}\n+\n+// TryCreateList inserts a fixed set of values into the pipeline from a slice or\n+// array. The values must be of the same type. Unlike TryCreate this supports\n+// the creation of an empty PCollection.\n+func TryCreateList(s Scope, values []interface{}, t reflect.Type) (PCollection, error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMjM1Nw=="}, "originalCommit": {"oid": "57133f8db8bbfd96c02beffb3cb7e907ac8c4697"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 974, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}