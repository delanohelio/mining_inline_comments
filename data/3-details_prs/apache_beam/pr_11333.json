{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDI3NzUw", "number": 11333, "title": "[BEAM-9418] Support ANY_VALUE aggregation functions", "bodyText": "The implementation is based on the function Sample#anyCombineFn(int)\nof the Java SDK core.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-07T18:21:44Z", "url": "https://github.com/apache/beam/pull/11333", "merged": true, "mergeCommit": {"oid": "6453e859badcb629ae2528b77d84235b7291ff89"}, "closed": true, "closedAt": "2020-05-04T18:32:18Z", "author": {"login": "jhnmora000"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYAhT9gFqTM5NDE5NzY1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcccxBfgFqTQwMjkyNDc2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTk3NjUz", "url": "https://github.com/apache/beam/pull/11333#pullrequestreview-394197653", "createdAt": "2020-04-15T23:14:55Z", "commit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNDo1NVrOGGO2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNToxOVrOGGO2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NzkyMA==", "bodyText": "Please import concrete Java imports than .*", "url": "https://github.com/apache/beam/pull/11333#discussion_r409187920", "createdAt": "2020-04-15T23:14:55Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslAggregationTest.java", "diffHunk": "@@ -24,11 +24,8 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;\n-\n import java.math.BigDecimal;\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.List;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4ODAzMw==", "bodyText": "run ./gradlew spotlessApply to fix style issues.", "url": "https://github.com/apache/beam/pull/11333#discussion_r409188033", "createdAt": "2020-04-15T23:15:19Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslAggregationTest.java", "diffHunk": "@@ -241,6 +238,53 @@ private void runAggregationFunctions(PCollection<Row> input) throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  /** GROUP-BY with the any_value aggregation function. */\n+  @Test\n+  public void testAnyValueFunction() throws Exception {\n+    pipeline.enableAbandonedNodeEnforcement(false);\n+\n+    Schema schema =\n+            Schema.builder().addInt32Field(\"key\").addInt32Field(\"col\").build();\n+\n+    PCollection<Row> inputRows =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MjAwNDMz", "url": "https://github.com/apache/beam/pull/11333#pullrequestreview-394200433", "createdAt": "2020-04-15T23:22:43Z", "commit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMjo0M1rOGGPAUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMjo0M1rOGGPAUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDQ4Mg==", "bodyText": "Same. If you are using inteliij, I think you will need to disable: https://www.jetbrains.com/help/idea/creating-and-optimizing-imports.html#import-packages-instead-of-single-classes", "url": "https://github.com/apache/beam/pull/11333#discussion_r409190482", "createdAt": "2020-04-15T23:22:43Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -33,12 +33,8 @@\n import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n import org.apache.beam.sdk.schemas.Schema;\n import org.apache.beam.sdk.schemas.Schema.FieldType;\n-import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13", "author": {"user": {"login": "jhnmora000", "name": null}}, "url": "https://github.com/apache/beam/commit/27876f035e3afdd478ef5e7f21d8524d17b59e13", "committedDate": "2020-04-29T03:11:51Z", "message": "[BEAM-9418] Support ANY_VALUE aggregation functions\n\nThe implementation is based on the function Sample#anyCombineFn(int)\nof the Java SDK core.Also, the support for ZetaSQL was enabled."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTI0NzYy", "url": "https://github.com/apache/beam/pull/11333#pullrequestreview-402924762", "createdAt": "2020-04-29T18:21:38Z", "commit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoyMTozOFrOGOLYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoyNToxOFrOGOLhOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxOTc5Nw==", "bodyText": "Why ? as a part of template? (just asking. I am not familiar with how it should be used)", "url": "https://github.com/apache/beam/pull/11333#discussion_r417519797", "createdAt": "2020-04-29T18:21:38Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "diffHunk": "@@ -58,6 +58,14 @@\n     return new SampleAnyCombineFn<>(sampleSize);\n   }\n \n+  /**\n+   * Returns a {@link CombineFn} that computes a single and potentially non-uniform sample value of\n+   * its inputs.\n+   */\n+  public static <T> CombineFn<T, ?, T> anyValueCombineFn() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMTk3Nw==", "bodyText": "I think this is right to return a null.\nper 1, if empty or input rows are all null, return null.\nThough returning null in Java sometimes do causing problems (not the problem in SQL layer, but in Java world). But in BeamSQL we just did it so far.", "url": "https://github.com/apache/beam/pull/11333#discussion_r417521977", "createdAt": "2020-04-29T18:25:18Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "diffHunk": "@@ -246,6 +254,36 @@ private SampleAnyCombineFn(long limit) {\n     }\n   }\n \n+  /** A {@link CombineFn} that combines into a single element. */\n+  private static class AnyValueCombineFn<T> extends CombineFn<T, List<T>, T> {\n+    private SampleAnyCombineFn internal;\n+\n+    private AnyValueCombineFn() {\n+      internal = new SampleAnyCombineFn<>(1);\n+    }\n+\n+    @Override\n+    public List<T> createAccumulator() {\n+      return internal.createAccumulator();\n+    }\n+\n+    @Override\n+    public List<T> addInput(List<T> accumulator, T input) {\n+      return internal.addInput(accumulator, input);\n+    }\n+\n+    @Override\n+    public List<T> mergeAccumulators(Iterable<List<T>> accumulators) {\n+      return internal.mergeAccumulators(accumulators);\n+    }\n+\n+    @Override\n+    public T extractOutput(List<T> accumulator) {\n+      Iterator<T> it = internal.extractOutput(accumulator).iterator();\n+      return it.hasNext() ? it.next() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4470, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}