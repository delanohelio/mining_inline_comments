{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzYzMTM4", "number": 12001, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzowOTo0NFrOEF7gHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoyNjowNVrOEGBAVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjUzMjE1OnYy", "diffSide": "RIGHT", "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzowOTo0NFrOGkafpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo1ODo0M1rOGkfisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzNjAwNA==", "bodyText": "thanks for adding this missing javadoc", "url": "https://github.com/apache/beam/pull/12001#discussion_r440836004", "createdAt": "2020-06-16T13:09:44Z", "author": {"login": "echauchot"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -50,6 +49,12 @@ public MetricsHttpSink(MetricsOptions pipelineOptions) {\n     this.urlString = pipelineOptions.getMetricsHttpSinkUrl();\n   }\n \n+  /**\n+   * Writes the metricQueryResults via HTTP POST to metrics sink endpoint.\n+   *\n+   * @param metricQueryResults query results to write.\n+   * @throws Exception throws IOException for non-200 response from endpoint.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e045b1f4c21fa72278982909ea3c30777b17597"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxODcwNw==", "bodyText": "You're welcome.", "url": "https://github.com/apache/beam/pull/12001#discussion_r440918707", "createdAt": "2020-06-16T14:58:43Z", "author": {"login": "tysonjh"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -50,6 +49,12 @@ public MetricsHttpSink(MetricsOptions pipelineOptions) {\n     this.urlString = pipelineOptions.getMetricsHttpSinkUrl();\n   }\n \n+  /**\n+   * Writes the metricQueryResults via HTTP POST to metrics sink endpoint.\n+   *\n+   * @param metricQueryResults query results to write.\n+   * @throws Exception throws IOException for non-200 response from endpoint.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzNjAwNA=="}, "originalCommit": {"oid": "9e045b1f4c21fa72278982909ea3c30777b17597"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU0ODA5OnYy", "diffSide": "RIGHT", "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxMzozMVrOGkapkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxMzozMVrOGkapkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzODU0Nw==", "bodyText": "Agreed as there is no suitable http exception in java.net regular package. But please change the message to add more context \"Exception while writing metrics to MetricsHttpSink : expected HTTP 200 OK response but received \"", "url": "https://github.com/apache/beam/pull/12001#discussion_r440838547", "createdAt": "2020-06-16T13:13:31Z", "author": {"login": "echauchot"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -69,7 +74,7 @@ public void writeMetrics(MetricQueryResults metricQueryResults) throws Exception\n     }\n     int responseCode = connection.getResponseCode();\n     if (responseCode != 200) {\n-      throw new HTTPException(responseCode);\n+      throw new IOException(\"Expected OK 200 response but received: \" + responseCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e045b1f4c21fa72278982909ea3c30777b17597"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzA0NDYzOnYy", "diffSide": "LEFT", "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo1OTowOVrOGkfkHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo1MToxNlrOGlZ9Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxOTA2OQ==", "bodyText": "These were deprecated.", "url": "https://github.com/apache/beam/pull/12001#discussion_r440919069", "createdAt": "2020-06-16T14:59:09Z", "author": {"login": "tysonjh"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -86,8 +93,8 @@ public MetricNameSerializer(Class<MetricName> t) {\n     public void serialize(MetricName value, JsonGenerator gen, SerializerProvider provider)\n         throws IOException {\n       gen.writeStartObject();\n-      gen.writeObjectField(\"name\", value.name());\n-      gen.writeObjectField(\"namespace\", value.namespace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e713d92e4b8454af1cd82028660b045a7c6f852"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4MTkyOQ==", "bodyText": "yes I replaced them with get* versions to simplify serialization code but they were re-introduced to be compatible with dataflow hosted engine which uses .name and .namespace which I could not know of because it is not opensource. Anyway good catch !  Dataflow is supposed to have migrated to .get* versions now, can you check ? If so we can remove the deprecated versions from the api.", "url": "https://github.com/apache/beam/pull/12001#discussion_r441681929", "createdAt": "2020-06-17T16:42:05Z", "author": {"login": "echauchot"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -86,8 +93,8 @@ public MetricNameSerializer(Class<MetricName> t) {\n     public void serialize(MetricName value, JsonGenerator gen, SerializerProvider provider)\n         throws IOException {\n       gen.writeStartObject();\n-      gen.writeObjectField(\"name\", value.name());\n-      gen.writeObjectField(\"namespace\", value.namespace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxOTA2OQ=="}, "originalCommit": {"oid": "9e713d92e4b8454af1cd82028660b045a7c6f852"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NTgxMA==", "bodyText": "Got it, I was just doing some code cleaning as I went along. I've verified that removing the deprecated methods doesn't break anything and added that to this PR. I'll update the commit message as well.", "url": "https://github.com/apache/beam/pull/12001#discussion_r441875810", "createdAt": "2020-06-17T22:51:16Z", "author": {"login": "tysonjh"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -86,8 +93,8 @@ public MetricNameSerializer(Class<MetricName> t) {\n     public void serialize(MetricName value, JsonGenerator gen, SerializerProvider provider)\n         throws IOException {\n       gen.writeStartObject();\n-      gen.writeObjectField(\"name\", value.name());\n-      gen.writeObjectField(\"namespace\", value.namespace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxOTA2OQ=="}, "originalCommit": {"oid": "9e713d92e4b8454af1cd82028660b045a7c6f852"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzQzMzgzOnYy", "diffSide": "RIGHT", "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoyNjowNVrOGkjb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo0NzozOFrOGlZ5Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MjUwMw==", "bodyText": "sed s/MetricsSinkHttp/MetricsHttpSink/", "url": "https://github.com/apache/beam/pull/12001#discussion_r440982503", "createdAt": "2020-06-16T16:26:05Z", "author": {"login": "echauchot"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -74,7 +74,9 @@ public void writeMetrics(MetricQueryResults metricQueryResults) throws Exception\n     }\n     int responseCode = connection.getResponseCode();\n     if (responseCode != 200) {\n-      throw new IOException(\"Expected OK 200 response but received: \" + responseCode);\n+      throw new IOException(\n+          \"Expected HTTP 200 OK response while writing metrics to MetricsSinkHttp but received \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e713d92e4b8454af1cd82028660b045a7c6f852"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NDY5OA==", "bodyText": "Oops! Done.", "url": "https://github.com/apache/beam/pull/12001#discussion_r441874698", "createdAt": "2020-06-17T22:47:38Z", "author": {"login": "tysonjh"}, "path": "runners/extensions-java/metrics/src/main/java/org/apache/beam/runners/extensions/metrics/MetricsHttpSink.java", "diffHunk": "@@ -74,7 +74,9 @@ public void writeMetrics(MetricQueryResults metricQueryResults) throws Exception\n     }\n     int responseCode = connection.getResponseCode();\n     if (responseCode != 200) {\n-      throw new IOException(\"Expected OK 200 response but received: \" + responseCode);\n+      throw new IOException(\n+          \"Expected HTTP 200 OK response while writing metrics to MetricsSinkHttp but received \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MjUwMw=="}, "originalCommit": {"oid": "9e713d92e4b8454af1cd82028660b045a7c6f852"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3511, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}