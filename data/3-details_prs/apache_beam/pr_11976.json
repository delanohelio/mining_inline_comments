{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzI0NTIw", "number": 11976, "title": "[BEAM-10169] - ParDo functions with correct output N in their error messages.", "bodyText": "Previously, when a mismatch of the dimensions emitted by the DoFn and the dimensions emitted by the ParDo was encountered, a less than helpful message of  expected 1 output. Found: [] was returned. This caused some confusion especially when paired with ParDo and ParDo0 which may be counterintuitive arrangement to most.\nIn this patch, we provide a more helpful error message which correctly reference the DoFn which has the misalignment and the ParDo which the misalignment of dimensions were captured by. It also recommends a ParDo function which may be used by the DoFn in question.\nWe introduce two new functions to the pardo package as well as a new function to the reflectx package to help us construct this error message.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-10T21:59:47Z", "url": "https://github.com/apache/beam/pull/11976", "merged": true, "mergeCommit": {"oid": "0f466e6bcd4ac8677c2bd9ecc8e6af3836b7f3b8"}, "closed": true, "closedAt": "2020-06-16T21:40:48Z", "author": {"login": "codeBehindMe"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcov1SsAH2gAyNDMyNzI0NTIwOjMyNmFiOGI4NDUyNmY2NDBmM2U2ZDYxYWE4OTNiNzUzYTRmZmIzNjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr8Sf0AFqTQzMTkxMTQyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "326ab8b84526f640f3e6d61aa893b753a4ffb363", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/326ab8b84526f640f3e6d61aa893b753a4ffb363", "committedDate": "2020-06-06T23:26:48Z", "message": "[BEAM-10169]: Function output size utility\n\nAs a part of setting up more concise error messages for ParDos\nwhich work on user defined DoFns it is necessary to understand the\ndimensions return object of the DoFn. This allows us to compare\nand to recommend a suitable ParDo function.\n\nIn this patch, we introduce the FunctionOutputSize function which\nconveniences the use of reflection to get the function output\ndimension. For brevity, it is placed in the reflectx package with\nits sibling FunctionName."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6fe772f0140c8cccb164afdf27dc67a51906800", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/b6fe772f0140c8cccb164afdf27dc67a51906800", "committedDate": "2020-06-07T00:55:48Z", "message": "[BEAM-10690] Broader coverage for outputSize func\n\nCurrently, the coverage on the FunctionOutputSize was limited to a\ntest function with a single output.\n\nIn this patch, we increase the test coverage to a function with\nmultiple outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4172dd00474a940587346e7de321150e29a31ba6", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/4172dd00474a940587346e7de321150e29a31ba6", "committedDate": "2020-06-08T10:22:00Z", "message": "[BEAM-10169] ParDo recommendation helper for DoFns\n\nBEAM-10169 Highlighted the requirement for a more helpful error\nmessage when the DoFns output is misaligned with the ParDo\nfunction which was applying the DoFn on the elements.\n\nIn this patch, we introduce two new functions to help implement\nthe feature.\n\nFirst, RecommendParDo is a function that given the expected\ndimensions of a DoFn returns the ParDo to be used.\n\nSecond, ParDoErrorFormatter, a convenience function to format the\nerror to be thrown by ParDos when there is a misalignment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eba969bd6579311471a3e8df3a43d48a10d6cd9", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/1eba969bd6579311471a3e8df3a43d48a10d6cd9", "committedDate": "2020-06-09T09:28:29Z", "message": "[BEAM-10169] Formatted error messages for ParDo\n\nCurrently, ParDo misalignment with DoFn messages were not very\nclear to the user.\n\nIn this patch we implement the use of a error formatter to format\na more clearer error. The error clearly states which DoFn had the\nmisalignment and also recommends a ParDo to be used to correct the\nmisalignment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/f024bf5185f81db2d47be4b4d1e558b9f2cc1d54", "committedDate": "2020-06-09T10:05:50Z", "message": "Merge branch 'master' of https://github.com/apache/beam into improvement/BEAM-10169-output-n"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTExMzY2", "url": "https://github.com/apache/beam/pull/11976#pullrequestreview-428511366", "createdAt": "2020-06-11T00:16:53Z", "commit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxNjo1M1rOGiKZxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTowMzoyMlrOGiOm5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NTIwNw==", "bodyText": "Conventionally, if there are multiple cases for a given test, they should be combined into the same function, and run as a loop.\nSee https://gobyexample.com/testing for an excellent example.\nOtherwise, this function should be named TestFunctionOutputSize_2", "url": "https://github.com/apache/beam/pull/11976#discussion_r438475207", "createdAt": "2020-06-11T00:16:53Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjY1NQ==", "bodyText": "In Go, Identifiers that start with a capital letter are Exported and accessible by code importing the package. As such Exported functions form the packages external API. Not that doesn't prevent the function from being unit tested in the associated _test.go file.\nWe don't want this function as part of the Beam API surface, as it's an internal implementation detail, that isn't necessary for users to invoke directly.\nFurther, the \"er\" bit idiomatically implies that it's an interface. Eg. Closer, Writer, Reader which are interfaces for values with a Close, Write, and Read methods respectively.\nSo with all that together, consider renaming it formatParDoError.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438476655", "createdAt": "2020-06-11T00:22:18Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzU0NA==", "bodyText": "Same comment here, WRT exported functions being part of the external API. Please rename this to recommendParDo.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438477544", "createdAt": "2020-06-11T00:25:46Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3Nzk2MA==", "bodyText": "Following from the comment I made before, if this test remains stand alone, TestRecommendParDo_OneOutput is the idiomatic name.  The general form is  Test<Func/struct under test>_", "url": "https://github.com/apache/beam/pull/11976#discussion_r438477960", "createdAt": "2020-06-11T00:27:22Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/regression/pardo_test.go", "diffHunk": "@@ -56,3 +58,39 @@ func TestEmitParDoAfterGBK(t *testing.T) {\n \t\tt.Error(err)\n \t}\n }\n+\n+// Keep the ParDo misalignment messages concise.\n+// FIXME: Review\n+// [beam-10169] identified that the error message returned to the user when the\n+// DoFn output is misaligned with the ParDo output was unclear. in order to\n+// make the user debug experience shorter, a more concise error message is\n+// required.\n+//\n+// This suite of brittle tests are to ensure that the returned errors are adhere\n+// to the ParDo API provided by the go sdk.\n+\n+func TestRecommendParDoWithOneOutput(t *testing.T) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTU0OQ==", "bodyText": "Switch statements in Go can accept a value, so this can be rewritten as\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tswitch {\n          \n          \n            \n            \tcase emitDim == 0:\n          \n          \n            \n            \t\treturn ParDo0\n          \n          \n            \n            \tcase emitDim == 1:\n          \n          \n            \n            \t\treturn ParDo\n          \n          \n            \n            \tcase emitDim == 2:\n          \n          \n            \n            \t\treturn ParDo2\n          \n          \n            \n            \tcase emitDim == 3:\n          \n          \n            \n            \t\treturn ParDo3\n          \n          \n            \n            \tcase emitDim == 4:\n          \n          \n            \n            \t\treturn ParDo4\n          \n          \n            \n            \tcase emitDim == 5:\n          \n          \n            \n            \t\treturn ParDo5\n          \n          \n            \n            \tcase emitDim == 6:\n          \n          \n            \n            \t\treturn ParDo6\n          \n          \n            \n            \tcase emitDim == 7:\n          \n          \n            \n            \t\treturn ParDo7\n          \n          \n            \n            \t}\n          \n          \n            \n            \treturn ParDoN\n          \n          \n            \n            }\n          \n          \n            \n            \tswitch emitDim {\n          \n          \n            \n            \tcase 0:\n          \n          \n            \n            \t\treturn ParDo0\n          \n          \n            \n            \tcase 1:\n          \n          \n            \n            \t\treturn ParDo\n          \n          \n            \n            \tcase 2:\n          \n          \n            \n            \t\treturn ParDo2\n          \n          \n            \n            \tcase 3:\n          \n          \n            \n            \t\treturn ParDo3\n          \n          \n            \n            \tcase  4:\n          \n          \n            \n            \t\treturn ParDo4\n          \n          \n            \n            \tcase 5:\n          \n          \n            \n            \t\treturn ParDo5\n          \n          \n            \n            \tcase 6:\n          \n          \n            \n            \t\treturn ParDo6\n          \n          \n            \n            \tcase 7:\n          \n          \n            \n            \t\treturn ParDo7\n          \n          \n            \n            \t}\n          \n          \n            \n            \treturn ParDoN\n          \n          \n            \n            }", "url": "https://github.com/apache/beam/pull/11976#discussion_r438479549", "createdAt": "2020-06-11T00:33:32Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {\n+\tswitch {\n+\tcase emitDim == 0:\n+\t\treturn ParDo0\n+\tcase emitDim == 1:\n+\t\treturn ParDo\n+\tcase emitDim == 2:\n+\t\treturn ParDo2\n+\tcase emitDim == 3:\n+\t\treturn ParDo3\n+\tcase emitDim == 4:\n+\t\treturn ParDo4\n+\tcase emitDim == 5:\n+\t\treturn ParDo5\n+\tcase emitDim == 6:\n+\t\treturn ParDo6\n+\tcase emitDim == 7:\n+\t\treturn ParDo7\n+\t}\n+\treturn ParDoN\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDEzMg==", "bodyText": "What I'd recommend here instead though is to return a string instead of the function.\nswitch emitDim {\n case 0,2,3,4,5,6,7:\n  return fmt.Sprintf(\"ParDo%d\", emitDim)\ncase 1:\n  return \"ParDo\"  \ndefault:\n  return \"ParDoN\"\n}\n\nEasier to read, and see if it's correct. Read Effective Go for more about Switches", "url": "https://github.com/apache/beam/pull/11976#discussion_r438534132", "createdAt": "2020-06-11T04:20:13Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)\n+\n+}\n+\n+// recommendParDo takes a in a DoFns emit dimension and recommends the correct\n+// ParDo to use.\n+func RecommendParDo(emitDim int) interface{} {\n+\tswitch {\n+\tcase emitDim == 0:\n+\t\treturn ParDo0\n+\tcase emitDim == 1:\n+\t\treturn ParDo\n+\tcase emitDim == 2:\n+\t\treturn ParDo2\n+\tcase emitDim == 3:\n+\t\treturn ParDo3\n+\tcase emitDim == 4:\n+\t\treturn ParDo4\n+\tcase emitDim == 5:\n+\t\treturn ParDo5\n+\tcase emitDim == 6:\n+\t\treturn ParDo6\n+\tcase emitDim == 7:\n+\t\treturn ParDo7\n+\t}\n+\treturn ParDoN\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTU0OQ=="}, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzNDQ4MQ==", "bodyText": "Consider putting this into the beam_test package rather than in the go regression test package. This package is intended for bugs when interacting with runners, which is harder to test independantly in the Go unit tests.\nIn particular, I recommend adding a new test file:\n.../sdks/go/pkg/beam/pardo_test.go\nThe main \"gotcha\" is you should copy the License header to the top of the file, as that's a requirement for the project.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438534481", "createdAt": "2020-06-11T04:21:47Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/regression/pardo_test.go", "diffHunk": "@@ -16,6 +16,8 @@\n package regression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MDg2Nw==", "bodyText": "Note that regardless of the DoFn we need to check the expectations for every value against a given constant.\nConsider wrapping the whole if block in the new function instead, and passing in the DoFn (so we can get the name), ret for the number of outputs, and the expected number of outputs from the constant. The function can be called mustHaveOutputs() . This way we can avoid specifying the expected number of outputs twice (in the if condition, and in the message) because it'll be in a function parameter.\n(In Go, a Must prefix indicates the function will panic if the operation fails, rather than return an error. Usually they're discouraged, but in this case we have no choice but to panic. The ParDo functions could be described as Must functions, but that would get tiring WRT pipeline construction very quickly, so the shorter version without must, but with a Try prefix variant for the one Error handling version (TryParDo) was chosen instead.)", "url": "https://github.com/apache/beam/pull/11976#discussion_r438540867", "createdAt": "2020-06-11T04:49:31Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTIwOQ==", "bodyText": "Style wise, you should have a space after the // and before the function name.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541209", "createdAt": "2020-06-11T04:50:52Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "diffHunk": "@@ -45,3 +45,13 @@ func LoadFunction(ptr uintptr, t reflect.Type) interface{} {\n \t*(*unsafe.Pointer)(unsafe.Pointer(v.Addr().Pointer())) = unsafe.Pointer(p)\n \treturn v.Interface()\n }\n+\n+//FunctionOutputSize returns the dimensions of the output of a function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTQzNw==", "bodyText": "Per other comments, I don't think this function is necessary, as fun and cool reflection is, using it should be avoided unless impossible because it complicates maintenance.\n\nDoFns can be structs instead, with a ProcessElement method.\nDoFn outputs in a function signature aren't directly related to the function outputs, so this is incorrect.\n\nDoFns can have \"emitter functions\" as parameters, which are used to output 0 or more values to the Nth PCollection of the ParDo. The main return (if one exists) is always the first PCollection, and they proceed from there. Similarly\neg. a function with the signature\nfunc(K,V string, e1, e2, e3 func(string)) (string, string) would require a ParDo4 since it takes a PCollection<KV<string,string>> as an input, and has 4 outputs.\nThe first output is a KV<string,string>, and then there are 3 PCollection as well.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541437", "createdAt": "2020-06-11T04:51:50Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions.go", "diffHunk": "@@ -45,3 +45,13 @@ func LoadFunction(ptr uintptr, t reflect.Type) interface{} {\n \t*(*unsafe.Pointer)(unsafe.Pointer(v.Addr().Pointer())) = unsafe.Pointer(p)\n \treturn v.Interface()\n }\n+\n+//FunctionOutputSize returns the dimensions of the output of a function.\n+// Panics if the type is not a function.\n+func FunctionOutputSize(fn interface{}) int {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTYyMw==", "bodyText": "DoFns in the Go SDK can be Structs instead of funcs, which means these functions will panic with less helpful error messages since they won't be functions.\nHowever, we know about this already, so we have a suite of Go SDK internal functions to handle this. In this case You want graph.Fn which returns a graph.Fn which has a Name() method which can be used to get the DoFn's name.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541623", "createdAt": "2020-06-11T04:52:38Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MTc3NA==", "bodyText": "typo: outputs\nThe \"Use\" should be \"use\",", "url": "https://github.com/apache/beam/pull/11976#discussion_r438541774", "createdAt": "2020-06-11T04:53:09Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +414,45 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(ParDoErrorFormatter(dofn, ParDo7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//ParDoErrorFormatter is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n+\tdoFnName := reflectx.FunctionName(doFn)\n+\tdoFnOutSize := reflectx.FunctionOutputSize(doFn)\n+\n+\tparDoName := reflectx.FunctionName(parDo)\n+\tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n+\n+\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\treturn fmt.Sprintf(\"DoFn %v has %v outptus, but %v requires %v outputs, Use %v instead.\", doFnName, doFnOutSize, parDoName, parDoOutSize, useParDo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0MzcyMA==", "bodyText": "Idiomatically, Go uses \"got and want\" as the variables, as well as in the test error output.", "url": "https://github.com/apache/beam/pull/11976#discussion_r438543720", "createdAt": "2020-06-11T05:01:43Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {\n+\texpected := 2\n+\treceived := FunctionOutputSize(testFunction2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NDEwMg==", "bodyText": "It should be possible for a user to not look at the test code to understand what happened for this test.\nSo a better test output would be:\nt.Errorf(\"FunctionOutputSize(%v) =  %d, want %d\", <testfunctionname/signature>,received, expected)", "url": "https://github.com/apache/beam/pull/11976#discussion_r438544102", "createdAt": "2020-06-11T05:03:22Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/util/reflectx/functions_test.go", "diffHunk": "@@ -41,3 +45,19 @@ func TestLoadFunction(t *testing.T) {\n \t\tt.Errorf(\"got %d, wanted %d\", out[0].Int(), testFunction())\n \t}\n }\n+\n+func TestFunctionOutputSize(t *testing.T) {\n+\texpected := 1\n+\treceived := FunctionOutputSize(testFunction)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)\n+\t}\n+}\n+\n+func TestFunction2OutputSize(t *testing.T) {\n+\texpected := 2\n+\treceived := FunctionOutputSize(testFunction2)\n+\tif received != expected {\n+\t\tt.Errorf(\"got %d, wanted %d\", received, expected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f024bf5185f81db2d47be4b4d1e558b9f2cc1d54"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d5083dbf2f07d50dd6d360635314e7f49124a6", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/a4d5083dbf2f07d50dd6d360635314e7f49124a6", "committedDate": "2020-06-13T09:04:19Z", "message": "[BEAM-10169] Made more idiomatic go tests\n\nCurrently the tests written to gest the FunctionOutputSize function did\nnot follow an idiomatic go testing structure.\n\nIn this patch, we structure the tests in a way that is more familiar to\nother gophers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db99bf446ac38a68291983c222755cdaea0f1de3", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/db99bf446ac38a68291983c222755cdaea0f1de3", "committedDate": "2020-06-13T09:51:43Z", "message": "[BEAM-10169] Internalised recommendParDo function\n\nCurrently, an inernal function used for recommending the correct ParDo\npairing for a DoFn was being exported to the user of the API. In addition\nit was not an idomatically written function. The tests for this function\nwere also incorrectly placed in a different package and not in the correct\n_test.go file in the same package.\n\nIn this patch, we remove the exporting of this function to the beam users,\nin addition, we provide a more idomatic representation of this function.\nThe tests are correctly placed in the _test.go file in the beam package."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/945dc7a264b94ac4386f3b8f55b093bb9b07728d", "committedDate": "2020-06-13T10:11:05Z", "message": "[BEAM-10169] Cleaner formatted error message."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTYyNTk3", "url": "https://github.com/apache/beam/pull/11976#pullrequestreview-430162597", "createdAt": "2020-06-13T20:00:56Z", "commit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDowMDo1NlrOGjZI8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDowMjozNlrOGjZJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NTIzNA==", "bodyText": "Note that now that you've changed the return type of recommendParDo, you don't need to call reflectx.FunctionName anymore.", "url": "https://github.com/apache/beam/pull/11976#discussion_r439765234", "createdAt": "2020-06-13T20:00:56Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -428,31 +428,20 @@ func ParDoErrorFormatter(doFn interface{}, parDo interface{}) string {\n \tparDoName := reflectx.FunctionName(parDo)\n \tparDoOutSize := reflectx.FunctionOutputSize(parDo)\n \n-\tuseParDo := reflectx.FunctionName(RecommendParDo(doFnOutSize))\n+\tuseParDo := reflectx.FunctionName(recommendParDo(doFnOutSize))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NTMzOQ==", "bodyText": "The name needs to be updated here: recommendParDo", "url": "https://github.com/apache/beam/pull/11976#discussion_r439765339", "createdAt": "2020-06-13T20:02:36Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import \"testing\"\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945dc7a264b94ac4386f3b8f55b093bb9b07728d"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45f4a84e57f2392c63d2960a05769350b7d82a18", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/45f4a84e57f2392c63d2960a05769350b7d82a18", "committedDate": "2020-06-15T11:18:10Z", "message": "[BEAM-10169] formatParDoError fixed for DoFn\n\nCurrently, the formatParDo error function had a number of flaws with its\nAPI and implementation which made it unsuitable for its intent. This was\nhilighted in the code review process, which resulted in a number of\nrecommendations including, dropping the use of reflection, removing its\nexposure as a public function and renaming the function to be more\nidomatic to gophers.\n\nIn this patch, we implement the above requests. We also introduce a test\nin the pard_test.go file, which takes a sample function and tests what\nthe formatted error is when a formatParDoError is called on it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9e030351bd55d830b324cfe53b157835e4d0e8", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/8c9e030351bd55d830b324cfe53b157835e4d0e8", "committedDate": "2020-06-15T11:28:17Z", "message": "[BEAM-10169] Removed FunctionOutputSize\n\nCurrently, as a part of BEAM-10169, a new helper function was introduced\nto the reflectx package. However code review showed that this was not\nneeded.\n\nIn this patch, we simply remove this function."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/17ebec9d3fc8e5d23296de7ec915474920bbafc4", "committedDate": "2020-06-15T11:31:46Z", "message": "[BEAM-10169] Minor formatting changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODIxMjg1", "url": "https://github.com/apache/beam/pull/11976#pullrequestreview-430821285", "createdAt": "2020-06-15T16:49:29Z", "commit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo0OToyOVrOGj6fcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowODowMVrOGj7I2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMTY2Ng==", "bodyText": "Ah clever! But not in the hard to debug way. :D I like it.\nOptional Nit: It's no longer really recommending, but naming the appropriate DoFn for the size in this use. parDoForSize might be a more accurate name, but, honestly, either is fine.\nHad there only been the one call, I'd have suggested inlining it since the switch isn't that large.\nEither way, since it's being used twice, that justifies that switch being in it's own function.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440311666", "createdAt": "2020-06-15T16:49:29Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +412,36 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(formatParDoError(dofn, len(ret), 7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//formatParDoError is a helper function to provide a more concise error\n+// message to the users when a DoFn and its ParDo pairing is incorrect.\n+//\n+// We construct a new graph.Fn using the doFn which is passed. We explicitly\n+// ignore the error since we already know that its already a DoFn type as\n+// TryParDo would have panicked otherwise.\n+func formatParDoError(doFn interface{}, emitSize int, parDoSize int) string {\n+\tdoFun, _ := graph.NewFn(doFn)\n+\tdoFnName := doFun.Name()\n+\n+\tthisParDo := recommendParDo(parDoSize) // Conveniently keeps the API slim.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjc5NQ==", "bodyText": "It might be worth commenting here that this function is just to validate that the name is sourced properly in TestFormatParDoError since the number of errors don't match.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440316795", "createdAt": "2020-06-15T16:58:12Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMDIzNg==", "bodyText": "Please add  3 more test cases here for 2 and 7,8 to cover those boundary conditions.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440320236", "createdAt": "2020-06-15T17:04:18Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMTgzNw==", "bodyText": "Since the \"complicated\" bit for this is in the recommendParDo code, which is already being tested very well, this test should be sufficient for the parts in formatParDoError. I don't expect the formatting to change any time soon.\nWe do have the english grammar nit (\"1 outputs\"), but handling that grammar correction isn't worth the extra code to resolve it.", "url": "https://github.com/apache/beam/pull/11976#discussion_r440321837", "createdAt": "2020-06-15T17:07:15Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo_test.go", "diffHunk": "@@ -0,0 +1,54 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package beam\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestRecommendParDo(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname      string\n+\t\toutputDim int\n+\t\twant      string\n+\t}{\n+\t\t{\"zero outputs\", 0, \"ParDo0\"},\n+\t\t{\"one output\", 1, \"ParDo\"},\n+\t\t{\"more than 7 outputs\", 10, \"ParDoN\"},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\ttestName := tt.name\n+\t\tt.Run(testName, func(t *testing.T) {\n+\t\t\tgot := recommendParDo(tt.outputDim)\n+\t\t\tif got != tt.want {\n+\t\t\t\tt.Errorf(\"RecommendParDo(%v) = %v, want %v\", tt.outputDim, got, tt.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func testFunction() int64 {\n+\treturn 42\n+}\n+\n+func TestFormatParDoError(t *testing.T) {\n+\tgot := formatParDoError(testFunction, 2, 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMjI2NA==", "bodyText": "Nit: add a space between // and formatParDoError", "url": "https://github.com/apache/beam/pull/11976#discussion_r440322264", "createdAt": "2020-06-15T17:08:01Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pardo.go", "diffHunk": "@@ -414,7 +412,36 @@ func ParDo6(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollec\n func ParDo7(s Scope, dofn interface{}, col PCollection, opts ...Option) (PCollection, PCollection, PCollection, PCollection, PCollection, PCollection, PCollection) {\n \tret := MustN(TryParDo(s, dofn, col, opts...))\n \tif len(ret) != 7 {\n-\t\tpanic(fmt.Sprintf(\"expected 7 output. Found: %v\", ret))\n+\t\tpanic(formatParDoError(dofn, len(ret), 7))\n \t}\n \treturn ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]\n }\n+\n+//formatParDoError is a helper function to provide a more concise error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ebec9d3fc8e5d23296de7ec915474920bbafc4"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c612c9db29e94e8438c336434a559374363dc10", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/7c612c9db29e94e8438c336434a559374363dc10", "committedDate": "2020-06-16T01:27:05Z", "message": "[BEAM-10169] Minor formatting changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b31ab3a8854d314b7aab4c608db2ee30ec97eb48", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/b31ab3a8854d314b7aab4c608db2ee30ec97eb48", "committedDate": "2020-06-16T09:42:20Z", "message": "[BEAM-10169] Renamed function for brevity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0affb736559c9159845111f97bb6fc7ad541f058", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/0affb736559c9159845111f97bb6fc7ad541f058", "committedDate": "2020-06-16T09:47:22Z", "message": "[BEAM-10169] Added function description to test function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9b5ef08e9421e010900bc83f8e73dd10f6dd563", "author": {"user": {"login": "codeBehindMe", "name": "Aaron"}}, "url": "https://github.com/apache/beam/commit/d9b5ef08e9421e010900bc83f8e73dd10f6dd563", "committedDate": "2020-06-16T09:51:03Z", "message": "[BEAM=10169] Test coverage and name changed\n\nCurrently, the test coverage for parDoForSize function had some cases but\ndid not cover all corner cases. In addition, the name of the test was\nTestRecommendParDo which did not reflect the proper function which was\nbeing tested, parDoForSize which had been changed in a previous commit.\n\nIn this patch, we introduce 3 new corner cases to increase the robustness\nof the tests. We also correct the test name to be TestParDoForSize."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTExNDI5", "url": "https://github.com/apache/beam/pull/11976#pullrequestreview-431911429", "createdAt": "2020-06-16T21:39:20Z", "commit": {"oid": "d9b5ef08e9421e010900bc83f8e73dd10f6dd563"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4225, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}