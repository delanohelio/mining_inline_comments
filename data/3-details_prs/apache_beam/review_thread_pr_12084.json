{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NTkyNjE3", "number": 12084, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToyNDowMFrOEKXblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0MToyN1rOEKXoUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA1MTA5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToyNDowMFrOGrXMfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0Mzo0NVrOGrxYXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMTk4Mg==", "bodyText": "(nit)Up to you, but you could reduce to this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                job_labels = dict() if job_labels is None else job_labels\n          \n          \n            \n                job_labels = job_labels or {}", "url": "https://github.com/apache/beam/pull/12084#discussion_r448121982", "createdAt": "2020-07-01T05:24:00Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Metadata for use in BigQueryIO, i.e. a job_id to use in BQ job labels.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.io.gcp import gce_metadata_util\n+\n+\n+def CreateBigQueryIOMetadata():\n+  \"\"\"Creates a BigQueryIOMetadata.\n+\n+  This will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  dataflow_job_id = gce_metadata_util.FetchDataflowJobId()\n+  # If a dataflow_job id is returned on GCE metadata. Then it means\n+  # This program is running on a Dataflow GCE VM.\n+  is_dataflow_runner = bool(dataflow_job_id)\n+  kwargs = {}\n+  if is_dataflow_runner:\n+    kwargs['beam_job_id'] = dataflow_job_id\n+  return BigQueryIOMetadata(**kwargs)\n+\n+\n+class BigQueryIOMetadata(object):\n+  \"\"\"Metadata class for BigQueryIO. i.e. to use as BQ job labels.\n+\n+  Do not construct directly, use the CreateBigQueryIOMetadata factory.\n+  Which will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  def __init__(self, beam_job_id=None):\n+    self.beam_job_id = beam_job_id\n+\n+  def add_additional_bq_job_labels(self, job_labels=None):\n+    job_labels = dict() if job_labels is None else job_labels", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTAwNg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12084#discussion_r448551006", "createdAt": "2020-07-01T18:43:45Z", "author": {"login": "ajamato"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Metadata for use in BigQueryIO, i.e. a job_id to use in BQ job labels.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.io.gcp import gce_metadata_util\n+\n+\n+def CreateBigQueryIOMetadata():\n+  \"\"\"Creates a BigQueryIOMetadata.\n+\n+  This will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  dataflow_job_id = gce_metadata_util.FetchDataflowJobId()\n+  # If a dataflow_job id is returned on GCE metadata. Then it means\n+  # This program is running on a Dataflow GCE VM.\n+  is_dataflow_runner = bool(dataflow_job_id)\n+  kwargs = {}\n+  if is_dataflow_runner:\n+    kwargs['beam_job_id'] = dataflow_job_id\n+  return BigQueryIOMetadata(**kwargs)\n+\n+\n+class BigQueryIOMetadata(object):\n+  \"\"\"Metadata class for BigQueryIO. i.e. to use as BQ job labels.\n+\n+  Do not construct directly, use the CreateBigQueryIOMetadata factory.\n+  Which will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  def __init__(self, beam_job_id=None):\n+    self.beam_job_id = beam_job_id\n+\n+  def add_additional_bq_job_labels(self, job_labels=None):\n+    job_labels = dict() if job_labels is None else job_labels", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMTk4Mg=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA1NzIzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery_file_loads.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToyNzoxM1rOGrXQGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozNzo0OFrOGrxM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMjkwNQ==", "bodyText": "Do you want to add the display data item for this DoFn?", "url": "https://github.com/apache/beam/pull/12084#discussion_r448122905", "createdAt": "2020-07-01T05:27:13Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_file_loads.py", "diffHunk": "@@ -327,10 +329,13 @@ def __init__(\n     self.write_disposition = write_disposition\n     self.test_client = test_client\n     self._observed_tables = set()\n+    self.bq_io_metadata = None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODA2OA==", "bodyText": "Yes. Done", "url": "https://github.com/apache/beam/pull/12084#discussion_r448548068", "createdAt": "2020-07-01T18:37:48Z", "author": {"login": "ajamato"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_file_loads.py", "diffHunk": "@@ -327,10 +329,13 @@ def __init__(\n     self.write_disposition = write_disposition\n     self.test_client = test_client\n     self._observed_tables = set()\n+    self.bq_io_metadata = None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMjkwNQ=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA1OTA0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToyODowOVrOGrXRHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0MTozNVrOGrxUSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMzE2Nw==", "bodyText": "we usually make functions be snake_case. Could you change this please?", "url": "https://github.com/apache/beam/pull/12084#discussion_r448123167", "createdAt": "2020-07-01T05:28:09Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Metadata for use in BigQueryIO, i.e. a job_id to use in BQ job labels.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.io.gcp import gce_metadata_util\n+\n+\n+def CreateBigQueryIOMetadata():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0OTk2MA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12084#discussion_r448549960", "createdAt": "2020-07-01T18:41:35Z", "author": {"login": "ajamato"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Metadata for use in BigQueryIO, i.e. a job_id to use in BQ job labels.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.io.gcp import gce_metadata_util\n+\n+\n+def CreateBigQueryIOMetadata():", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMzE2Nw=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA2MDAwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToyODo1N1rOGrXRyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0NzozMlrOGrxf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMzMzNw==", "bodyText": "make functions snake_case please", "url": "https://github.com/apache/beam/pull/12084#discussion_r448123337", "createdAt": "2020-07-01T05:28:57Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "diffHunk": "@@ -0,0 +1,51 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Fetches GCE metadata if the calling process is running on a GCE VM.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import httplib2\n+\n+from apache_beam.internal.http_client import get_new_http\n+\n+BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\"\n+\n+\n+def FetchMetadata(key):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MjkyNQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12084#discussion_r448552925", "createdAt": "2020-07-01T18:47:32Z", "author": {"login": "ajamato"}, "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "diffHunk": "@@ -0,0 +1,51 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Fetches GCE metadata if the calling process is running on a GCE VM.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import httplib2\n+\n+from apache_beam.internal.http_client import get_new_http\n+\n+BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\"\n+\n+\n+def FetchMetadata(key):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMzMzNw=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA2NTE3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTozMTo0OVrOGrXUyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0ODo0NFrOGrxiCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNDEwNQ==", "bodyText": "os.path.join should ensure URLs are joined properly independently of whether the key has/does not have a leading slash. Do you think that'd be good to add?", "url": "https://github.com/apache/beam/pull/12084#discussion_r448124105", "createdAt": "2020-07-01T05:31:49Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "diffHunk": "@@ -0,0 +1,51 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Fetches GCE metadata if the calling process is running on a GCE VM.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import httplib2\n+\n+from apache_beam.internal.http_client import get_new_http\n+\n+BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\"\n+\n+\n+def FetchMetadata(key):\n+  try:\n+    h = get_new_http(timeout_secs=5)\n+    headers = {\"Metadata-Flavor\": \"Google\"}\n+    uri = BASE_METADATA_URL + key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNjIxNA==", "bodyText": "(up to you)", "url": "https://github.com/apache/beam/pull/12084#discussion_r448126214", "createdAt": "2020-07-01T05:39:02Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "diffHunk": "@@ -0,0 +1,51 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Fetches GCE metadata if the calling process is running on a GCE VM.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import httplib2\n+\n+from apache_beam.internal.http_client import get_new_http\n+\n+BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\"\n+\n+\n+def FetchMetadata(key):\n+  try:\n+    h = get_new_http(timeout_secs=5)\n+    headers = {\"Metadata-Flavor\": \"Google\"}\n+    uri = BASE_METADATA_URL + key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNDEwNQ=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MzQ4MA==", "bodyText": "No, because on windows it will add backslashes. Let's just keep it simple like this for now. Since its a private method, we should expect proper methods like fetch_dataflow_job_id to be written for future keys.", "url": "https://github.com/apache/beam/pull/12084#discussion_r448553480", "createdAt": "2020-07-01T18:48:44Z", "author": {"login": "ajamato"}, "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "diffHunk": "@@ -0,0 +1,51 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Fetches GCE metadata if the calling process is running on a GCE VM.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import httplib2\n+\n+from apache_beam.internal.http_client import get_new_http\n+\n+BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\"\n+\n+\n+def FetchMetadata(key):\n+  try:\n+    h = get_new_http(timeout_secs=5)\n+    headers = {\"Metadata-Flavor\": \"Google\"}\n+    uri = BASE_METADATA_URL + key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNDEwNQ=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA3NTAxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTozNzowN1rOGrXamA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0NTowOFrOGrxbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNTU5Mg==", "bodyText": "this means that for other runners, BQ will receive jobs with a label of 'beam_job_id'=None - is that fine?", "url": "https://github.com/apache/beam/pull/12084#discussion_r448125592", "createdAt": "2020-07-01T05:37:07Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Metadata for use in BigQueryIO, i.e. a job_id to use in BQ job labels.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.io.gcp import gce_metadata_util\n+\n+\n+def CreateBigQueryIOMetadata():\n+  \"\"\"Creates a BigQueryIOMetadata.\n+\n+  This will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  dataflow_job_id = gce_metadata_util.FetchDataflowJobId()\n+  # If a dataflow_job id is returned on GCE metadata. Then it means\n+  # This program is running on a Dataflow GCE VM.\n+  is_dataflow_runner = bool(dataflow_job_id)\n+  kwargs = {}\n+  if is_dataflow_runner:\n+    kwargs['beam_job_id'] = dataflow_job_id\n+  return BigQueryIOMetadata(**kwargs)\n+\n+\n+class BigQueryIOMetadata(object):\n+  \"\"\"Metadata class for BigQueryIO. i.e. to use as BQ job labels.\n+\n+  Do not construct directly, use the CreateBigQueryIOMetadata factory.\n+  Which will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  def __init__(self, beam_job_id=None):\n+    self.beam_job_id = beam_job_id\n+\n+  def add_additional_bq_job_labels(self, job_labels=None):\n+    job_labels = dict() if job_labels is None else job_labels\n+    if self.beam_job_id and 'beam_job_id' not in job_labels:\n+      job_labels['beam_job_id'] = self.beam_job_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTY4Mg==", "bodyText": "No, it shouldn't populate the label at all in that case. Because of the\n\"if self.beam_job_id\"\nIt won't evaluate the if if it's None or an empty string.\nOr have I made a mistake which I don't see?", "url": "https://github.com/apache/beam/pull/12084#discussion_r448551682", "createdAt": "2020-07-01T18:45:08Z", "author": {"login": "ajamato"}, "path": "sdks/python/apache_beam/io/gcp/bigquery_io_metadata.py", "diffHunk": "@@ -0,0 +1,55 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Metadata for use in BigQueryIO, i.e. a job_id to use in BQ job labels.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+from apache_beam.io.gcp import gce_metadata_util\n+\n+\n+def CreateBigQueryIOMetadata():\n+  \"\"\"Creates a BigQueryIOMetadata.\n+\n+  This will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  dataflow_job_id = gce_metadata_util.FetchDataflowJobId()\n+  # If a dataflow_job id is returned on GCE metadata. Then it means\n+  # This program is running on a Dataflow GCE VM.\n+  is_dataflow_runner = bool(dataflow_job_id)\n+  kwargs = {}\n+  if is_dataflow_runner:\n+    kwargs['beam_job_id'] = dataflow_job_id\n+  return BigQueryIOMetadata(**kwargs)\n+\n+\n+class BigQueryIOMetadata(object):\n+  \"\"\"Metadata class for BigQueryIO. i.e. to use as BQ job labels.\n+\n+  Do not construct directly, use the CreateBigQueryIOMetadata factory.\n+  Which will request metadata properly based on which runner is being used.\n+  \"\"\"\n+  def __init__(self, beam_job_id=None):\n+    self.beam_job_id = beam_job_id\n+\n+  def add_additional_bq_job_labels(self, job_labels=None):\n+    job_labels = dict() if job_labels is None else job_labels\n+    if self.beam_job_id and 'beam_job_id' not in job_labels:\n+      job_labels['beam_job_id'] = self.beam_job_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNTU5Mg=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA4MzY4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0MToyN1rOGrXfmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowNTowNVrOGrzrBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNjg3NA==", "bodyText": "how will it work for non-dataflow workers? Will it fail immediately? time out?", "url": "https://github.com/apache/beam/pull/12084#discussion_r448126874", "createdAt": "2020-07-01T05:41:27Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "diffHunk": "@@ -0,0 +1,51 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Fetches GCE metadata if the calling process is running on a GCE VM.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import httplib2\n+\n+from apache_beam.internal.http_client import get_new_http\n+\n+BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\"\n+\n+\n+def FetchMetadata(key):\n+  try:\n+    h = get_new_http(timeout_secs=5)\n+    headers = {\"Metadata-Flavor\": \"Google\"}\n+    uri = BASE_METADATA_URL + key\n+    resp, content = h.request(uri, \"GET\", headers=headers)\n+    if resp.status == 200:\n+      return content\n+  except httplib2.HttpLib2Error:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4ODU0OQ==", "bodyText": "The URL should not resolve, so it should fail quickly after attempting a request, not for the full timeout. Ideally we are making this request as infrequently as possible.\nI've also just added a method to validate the label, in the off case that the metadata server is giving bad output. I don't want this to make the BQ jobs fail (they will fail if given invalid labels).", "url": "https://github.com/apache/beam/pull/12084#discussion_r448588549", "createdAt": "2020-07-01T20:05:05Z", "author": {"login": "ajamato"}, "path": "sdks/python/apache_beam/io/gcp/gce_metadata_util.py", "diffHunk": "@@ -0,0 +1,51 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Fetches GCE metadata if the calling process is running on a GCE VM.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import httplib2\n+\n+from apache_beam.internal.http_client import get_new_http\n+\n+BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\"\n+\n+\n+def FetchMetadata(key):\n+  try:\n+    h = get_new_http(timeout_secs=5)\n+    headers = {\"Metadata-Flavor\": \"Google\"}\n+    uri = BASE_METADATA_URL + key\n+    resp, content = h.request(uri, \"GET\", headers=headers)\n+    if resp.status == 200:\n+      return content\n+  except httplib2.HttpLib2Error:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNjg3NA=="}, "originalCommit": {"oid": "16429501a4de8d17bdc380a2e97dd53c033d21b4"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3582, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}