{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTY4ODg3", "number": 11270, "title": "[BEAM-9639][BEAM-9608] Improvements for FnApiRunner", "bodyText": "r: @robertwb\nThese changes are mostly reshuffling of code.\nEach commit is a logical unit, so each commit can be reviewed separately. The commit message explains what each commit does:\n\ncommit[BEAM-9608] BundleManagers use BundleContextManager for configuration - (this commit modifies the BundleManagers to receive only a BundleContextManager with most of their configuration. It also adds a dry_run option for processing bundles without writing to pcoll_buffers)\ncommit[BEAM-9639] Storing side inputs after producer execution, not before consumption - (this commit ensures that side inputs are stored in state right after they are computed - not before they are consumed. this will be useful in streaming so each bundle's inputs are eagerly available)\n\ncommitEnsuring downstream side inputs are calculated on fully expanded graph - (this commit is more of an accessory to the previous one. It ensures that during graph translations, downstream_side_inputs are annotated after SDFs are expanded)\n\n\ncommit[BEAM-9639] Separate Stage and Bundle execution. Improve typing. - (this commit separates the sections of the code for executing a stage such as context creation, committing of side inputs, scheduling of all bundles until no deferred inputs vs the sections of executing a bundle for that stage such as pushing data to worker, collecting bundle deferred inputs)\n\n\nNotes/todos from #11229\n\n It's odd that _run_stage no longer takes as a parameter the stage to run. Perhaps bundle_context_manager (and its class?) should be named stage_context or similar?\n On this note, perhaps it makes sense to break FnApiRunner into the (mostly stateless) runner that can execute multiple pipelines and an executor (that has methods like run_stage) that might be stateful and is initialized with and tasked with running a single pipeline. Much of what is on context(s) would become state of self of this new object.\n I was bitten by the fact that it is an error to access the process_bundle_descriptor before _extract_outputs is called. This should be clearly documented (and similarly for the other lazy attributes(s) in this class). Given that that's called external to this class and can't easily be checked, makes me wonder if the boundary of encapsulation needs to be adjusted here.\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-30T23:41:00Z", "url": "https://github.com/apache/beam/pull/11270", "merged": true, "mergeCommit": {"oid": "1fe543e19a90006d6946e678458abe8c723f7e93"}, "closed": true, "closedAt": "2020-04-21T19:37:01Z", "author": {"login": "pabloem"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTJTBdABqjMxODUwODI0Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccxRoVAFqTQwMzc2Nzk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e661c619ef6a3e47a68ed576953a55ed00b7793", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/4e661c619ef6a3e47a68ed576953a55ed00b7793", "committedDate": "2020-03-30T23:57:14Z", "message": "Fixup"}, "afterCommit": {"oid": "df9cc9bd4f2ca479201cb0bc39ab63f5667b09f2", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/df9cc9bd4f2ca479201cb0bc39ab63f5667b09f2", "committedDate": "2020-03-31T20:40:20Z", "message": "Fixup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df9cc9bd4f2ca479201cb0bc39ab63f5667b09f2", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/df9cc9bd4f2ca479201cb0bc39ab63f5667b09f2", "committedDate": "2020-03-31T20:40:20Z", "message": "Fixup"}, "afterCommit": {"oid": "f445a8d061f7568cb6787d1df49f2daec130ae24", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/f445a8d061f7568cb6787d1df49f2daec130ae24", "committedDate": "2020-03-31T22:11:09Z", "message": "Fixup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f445a8d061f7568cb6787d1df49f2daec130ae24", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/f445a8d061f7568cb6787d1df49f2daec130ae24", "committedDate": "2020-03-31T22:11:09Z", "message": "Fixup"}, "afterCommit": {"oid": "7ce7c69e9838d460fd512e0a842b50fcd685fd74", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/7ce7c69e9838d460fd512e0a842b50fcd685fd74", "committedDate": "2020-04-01T03:57:17Z", "message": "[BEAM-9639] Separate Stage and Bundle execution. Improve typing\nannotations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30d2f6ddc5ad5db92ebecc55a426eb50e435a0af", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/30d2f6ddc5ad5db92ebecc55a426eb50e435a0af", "committedDate": "2020-04-01T19:36:17Z", "message": "fix formatter"}, "afterCommit": {"oid": "f19de4f9d3c9e2434f3ce1ecf11a123b923e6be9", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/f19de4f9d3c9e2434f3ce1ecf11a123b923e6be9", "committedDate": "2020-04-07T01:45:36Z", "message": "Remove backslashes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a60b56f8d739f8884f76751f99607615b14b99c", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/8a60b56f8d739f8884f76751f99607615b14b99c", "committedDate": "2020-04-07T01:53:18Z", "message": "fixup"}, "afterCommit": {"oid": "38fb513819863cfe08a1a7dd7aa9226297c5e42d", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/38fb513819863cfe08a1a7dd7aa9226297c5e42d", "committedDate": "2020-04-10T23:50:11Z", "message": "fixup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "368863e2d2b7d0995ef9d7cd222ae002bb524925", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/368863e2d2b7d0995ef9d7cd222ae002bb524925", "committedDate": "2020-04-11T16:55:33Z", "message": "Fixing lint"}, "afterCommit": {"oid": "ecf34aeae40c1ac37556fde666dea4b94322e691", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/ecf34aeae40c1ac37556fde666dea4b94322e691", "committedDate": "2020-04-11T18:00:27Z", "message": "Fixing lint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecf34aeae40c1ac37556fde666dea4b94322e691", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/ecf34aeae40c1ac37556fde666dea4b94322e691", "committedDate": "2020-04-11T18:00:27Z", "message": "Fixing lint"}, "afterCommit": {"oid": "82828b301507dd71133088cfd8de8bbe86167df9", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/82828b301507dd71133088cfd8de8bbe86167df9", "committedDate": "2020-04-11T18:04:08Z", "message": "Big fixup\n\nfixup\n\nFixup with timer_family payloads\n\nFixing merge issues in fn_runner.py\n\nfixup\n\nFixup\n\nMultiworkers fixup\n\nFixing lint\n\nFixing lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzE3NTE4", "url": "https://github.com/apache/beam/pull/11270#pullrequestreview-392317518", "createdAt": "2020-04-13T17:57:38Z", "commit": {"oid": "82828b301507dd71133088cfd8de8bbe86167df9"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzo1NzozOFrOGEvKkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozNjoyMlrOGEycJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDI0MQ==", "bodyText": "I wonder if\n((consuming_transform_id, tag), (buffer_id, func_spec))\nwould make both yapf and humans happy.", "url": "https://github.com/apache/beam/pull/11270#discussion_r407620241", "createdAt": "2020-04-13T17:57:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/execution.py", "diffHunk": "@@ -326,8 +327,8 @@ def commit_side_inputs_to_state(\n       data_side_input,  # type: DataSideInput\n   ):\n     # type: (...) -> None\n-    for (consuming_transform_id, tag), (buffer_id, func_spec) \\\n-        in data_side_input.items():\n+    for (consuming_transform_id, tag), (buffer_id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82828b301507dd71133088cfd8de8bbe86167df9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MzYwMg==", "bodyText": "extract_bundle_inputs_and_outputs?", "url": "https://github.com/apache/beam/pull/11270#discussion_r407663602", "createdAt": "2020-04-13T19:16:49Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/execution.py", "diffHunk": "@@ -367,6 +413,73 @@ def _build_process_bundle_descriptor(self):\n         state_api_service_descriptor=self.state_api_service_descriptor(),\n         timer_api_service_descriptor=self.data_api_service_descriptor())\n \n+  def commit_output_views_to_state(self):\n+    \"\"\"Commit bundle outputs to state to be consumed as side inputs later.\n+\n+    Only the outputs that should be side inputs are committed to state.\n+    \"\"\"\n+    data_side_input = {}  # type: DataSideInput\n+    for pcoll, si_ids in self.stage.downstream_side_inputs.items():\n+      for (consumer_transform_name, tag), access_pattern in si_ids.items():\n+        data_side_input[consumer_transform_name, tag] = (\n+            translations.create_buffer_id(pcoll), access_pattern)\n+    self.execution_context.commit_side_inputs_to_state(data_side_input)\n+\n+  def extract_bundle_inputs(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6253ac725e20c8a3fa2a8978579d6e46bd8edf9b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MzkxNg==", "bodyText": "Update docs to match.", "url": "https://github.com/apache/beam/pull/11270#discussion_r407663916", "createdAt": "2020-04-13T19:17:24Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/execution.py", "diffHunk": "@@ -367,6 +413,73 @@ def _build_process_bundle_descriptor(self):\n         state_api_service_descriptor=self.state_api_service_descriptor(),\n         timer_api_service_descriptor=self.data_api_service_descriptor())\n \n+  def commit_output_views_to_state(self):\n+    \"\"\"Commit bundle outputs to state to be consumed as side inputs later.\n+\n+    Only the outputs that should be side inputs are committed to state.\n+    \"\"\"\n+    data_side_input = {}  # type: DataSideInput\n+    for pcoll, si_ids in self.stage.downstream_side_inputs.items():\n+      for (consumer_transform_name, tag), access_pattern in si_ids.items():\n+        data_side_input[consumer_transform_name, tag] = (\n+            translations.create_buffer_id(pcoll), access_pattern)\n+    self.execution_context.commit_side_inputs_to_state(data_side_input)\n+\n+  def extract_bundle_inputs(self):\n+    # type: (...) -> Tuple[Dict[str, PartitionableBuffer], DataOutput]\n+\n+    \"\"\"Returns maps of transform names to PCollection identifiers.\n+\n+    Also mutates IO stages to point to the data ApiServiceDescriptor.\n+\n+    Returns:\n+      A tuple of (data_input, data_output) dictionaries.\n+        `data_input` is a dictionary mapping (transform_name, output_name) to a\n+        PCollection buffer; `data_output` is a dictionary mapping\n+        (transform_name, output_name) to a PCollection ID.\n+    \"\"\"\n+    data_input = {}  # type: Dict[str, PartitionableBuffer]\n+    data_output = {}  # type: DataOutput\n+    # A mapping of {(transform_id, timer_family_id) : buffer_id}\n+    expected_timer_output = {}  # type: Dict[Tuple(str, str), str]\n+    for transform in self.stage.transforms:\n+      if transform.spec.urn in (bundle_processor.DATA_INPUT_URN,\n+                                bundle_processor.DATA_OUTPUT_URN):\n+        pcoll_id = transform.spec.payload\n+        if transform.spec.urn == bundle_processor.DATA_INPUT_URN:\n+          coder_id = self.execution_context.data_channel_coders[only_element(\n+              transform.outputs.values())]\n+          coder = self.execution_context.pipeline_context.coders[\n+              self.execution_context.safe_coders.get(coder_id, coder_id)]\n+          if pcoll_id == translations.IMPULSE_BUFFER:\n+            data_input[transform.unique_name] = ListBuffer(\n+                coder_impl=coder.get_impl())\n+            data_input[transform.unique_name].append(ENCODED_IMPULSE_VALUE)\n+          else:\n+            if pcoll_id not in self.execution_context.pcoll_buffers:\n+              self.execution_context.pcoll_buffers[pcoll_id] = ListBuffer(\n+                  coder_impl=coder.get_impl())\n+            data_input[transform.unique_name] = \\\n+              self.execution_context.pcoll_buffers[pcoll_id]\n+        elif transform.spec.urn == bundle_processor.DATA_OUTPUT_URN:\n+          data_output[transform.unique_name] = pcoll_id\n+          coder_id = self.execution_context.data_channel_coders[only_element(\n+              transform.inputs.values())]\n+        else:\n+          raise NotImplementedError\n+        data_spec = beam_fn_api_pb2.RemoteGrpcPort(coder_id=coder_id)\n+        data_api_service_descriptor = \\\n+          self.data_api_service_descriptor()\n+        if data_api_service_descriptor:\n+          data_spec.api_service_descriptor.url = (\n+              data_api_service_descriptor.url)\n+        transform.spec.payload = data_spec.SerializeToString()\n+      elif transform.spec.urn in translations.PAR_DO_URNS:\n+        for timer_family_id in payload.timer_family_specs.keys():\n+          expected_timer_output[(transform.unique_name, timer_family_id)] = (\n+              create_buffer_id(timer_family_id, 'timers'))\n+    return data_input, data_output, expected_timer_output", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6253ac725e20c8a3fa2a8978579d6e46bd8edf9b"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NDc3Nw==", "bodyText": "Not sure what \"output views\" means. Maybe call this commit_side_inputs_to_state as well?", "url": "https://github.com/apache/beam/pull/11270#discussion_r407664777", "createdAt": "2020-04-13T19:18:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/execution.py", "diffHunk": "@@ -367,6 +413,73 @@ def _build_process_bundle_descriptor(self):\n         state_api_service_descriptor=self.state_api_service_descriptor(),\n         timer_api_service_descriptor=self.data_api_service_descriptor())\n \n+  def commit_output_views_to_state(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6253ac725e20c8a3fa2a8978579d6e46bd8edf9b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2Njg3Nw==", "bodyText": "Nit: this sounds like it mutates self.", "url": "https://github.com/apache/beam/pull/11270#discussion_r407666877", "createdAt": "2020-04-13T19:22:45Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -149,15 +155,26 @@ def no_overlap(a, b):\n     return (\n         not consumer.forced_root and not self in consumer.must_follow and\n         not self.is_runner_urn(context) and\n-        not consumer.is_runner_urn(context) and\n-        no_overlap(self.downstream_side_inputs, consumer.side_inputs()))\n+        not consumer.is_runner_urn(context) and no_overlap(\n+            set(self.downstream_side_inputs.keys()),\n+            {i\n+             for i, _, _ in consumer.side_inputs()}))\n+\n+  def _fuse_downstream_side_inputs(self, other):\n+    res = dict(self.downstream_side_inputs)\n+    for si, other_si_ids in other.downstream_side_inputs.items():\n+      if si in res:\n+        res[si] = union(res[si], other_si_ids)\n+      else:\n+        res[si] = other_si_ids\n+    return res\n \n   def fuse(self, other):\n     # type: (Stage) -> Stage\n     return Stage(\n         \"(%s)+(%s)\" % (self.name, other.name),\n         self.transforms + other.transforms,\n-        union(self.downstream_side_inputs, other.downstream_side_inputs),\n+        self._fuse_downstream_side_inputs(other),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6253ac725e20c8a3fa2a8978579d6e46bd8edf9b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NzcwMA==", "bodyText": "What does the value represent?", "url": "https://github.com/apache/beam/pull/11270#discussion_r407667700", "createdAt": "2020-04-13T19:24:13Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -75,21 +75,27 @@\n \n IMPULSE_BUFFER = b'impulse'\n \n+# SideInputId is identified by a consumer ParDo + tag.\n+SideInputId = Tuple[str, str]\n+\n+DataSideInput = Dict[SideInputId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6253ac725e20c8a3fa2a8978579d6e46bd8edf9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2ODAzMw==", "bodyText": "So this is actually a dict mapping to sets?", "url": "https://github.com/apache/beam/pull/11270#discussion_r407668033", "createdAt": "2020-04-13T19:24:53Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -149,15 +155,26 @@ def no_overlap(a, b):\n     return (\n         not consumer.forced_root and not self in consumer.must_follow and\n         not self.is_runner_urn(context) and\n-        not consumer.is_runner_urn(context) and\n-        no_overlap(self.downstream_side_inputs, consumer.side_inputs()))\n+        not consumer.is_runner_urn(context) and no_overlap(\n+            set(self.downstream_side_inputs.keys()),\n+            {i\n+             for i, _, _ in consumer.side_inputs()}))\n+\n+  def _fuse_downstream_side_inputs(self, other):\n+    res = dict(self.downstream_side_inputs)\n+    for si, other_si_ids in other.downstream_side_inputs.items():\n+      if si in res:\n+        res[si] = union(res[si], other_si_ids)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6253ac725e20c8a3fa2a8978579d6e46bd8edf9b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MDYxMg==", "bodyText": "The goal of this (which, yes, should have been better documented) is to quickly be able to prohibit fusion. But the reason we defined our own union was so that memory didn't grow as O(n^2) in the common case because many stages were able to share this set (rather than have their own copy). These changes seem to break that.\nAlso, could you clarify why this was made into a dict?", "url": "https://github.com/apache/beam/pull/11270#discussion_r407670612", "createdAt": "2020-04-13T19:29:53Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -75,21 +75,27 @@\n \n IMPULSE_BUFFER = b'impulse'\n \n+# SideInputId is identified by a consumer ParDo + tag.\n+SideInputId = Tuple[str, str]\n+\n+DataSideInput = Dict[SideInputId,\n+                     Tuple[bytes, beam_runner_api_pb2.FunctionSpec]]\n+\n \n class Stage(object):\n   \"\"\"A set of Transforms that can be sent to the worker for processing.\"\"\"\n   def __init__(self,\n                name,  # type: str\n                transforms,  # type: List[beam_runner_api_pb2.PTransform]\n-               downstream_side_inputs=None,  # type: Optional[FrozenSet[str]]\n+               downstream_side_inputs=None,  # type: Optional[Dict[str, SideInputId]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6253ac725e20c8a3fa2a8978579d6e46bd8edf9b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3Mzg5NQ==", "bodyText": "This should be the default, we shouldn't have to pass it.", "url": "https://github.com/apache/beam/pull/11270#discussion_r407673895", "createdAt": "2020-04-13T19:36:22Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -914,14 +898,16 @@ def process_bundle(self,\n                      expected_outputs,  # type: DataOutput\n                      fired_timers,  # type: Mapping[Tuple[str, str], PartitionableBuffer]\n                      expected_output_timers  # type: Dict[str, Dict[str, str]]\n+                     dry_run=False", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48af3d471b7fc766c3402db65cba880f2d29903"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de324f22ca04b3716abf58ba77c2a3c117263a2", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/8de324f22ca04b3716abf58ba77c2a3c117263a2", "committedDate": "2020-04-15T23:05:29Z", "message": "[BEAM-9608] BundleManagers use BundleContextManager for configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5353c4fa9fa189592bf10acb2a66b950a2172d0", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/c5353c4fa9fa189592bf10acb2a66b950a2172d0", "committedDate": "2020-04-15T00:12:13Z", "message": "Addressing comments"}, "afterCommit": {"oid": "2f62467e12740df5958688e585147cb14c33aea5", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/2f62467e12740df5958688e585147cb14c33aea5", "committedDate": "2020-04-15T23:10:59Z", "message": "Addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abb7bcbd7bcbb7b2a8ec59968b57374bb9236ff5", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/abb7bcbd7bcbb7b2a8ec59968b57374bb9236ff5", "committedDate": "2020-04-17T01:30:45Z", "message": "[BEAM-9639] Saving side inputs after producer execution, not before consumption."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7ae7f6c3b1298a745b2c267751ef28368146d2c", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/f7ae7f6c3b1298a745b2c267751ef28368146d2c", "committedDate": "2020-04-17T01:34:56Z", "message": "[BEAM-9639] Separate Stage and Bundle execution. Improve typing\nannotations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f62467e12740df5958688e585147cb14c33aea5", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/2f62467e12740df5958688e585147cb14c33aea5", "committedDate": "2020-04-15T23:10:59Z", "message": "Addressing comments"}, "afterCommit": {"oid": "377b8be9f44b379aeddd673ffd0e5ce9478523f0", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/377b8be9f44b379aeddd673ffd0e5ce9478523f0", "committedDate": "2020-04-18T00:31:02Z", "message": "Making side inputs work"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33f4fdb685d1abe6cf4bda28c3ecfe5af6cf9f3d", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/33f4fdb685d1abe6cf4bda28c3ecfe5af6cf9f3d", "committedDate": "2020-04-18T03:21:16Z", "message": "fixup"}, "afterCommit": {"oid": "af74e21177f15b3c1bba34d98e8f3e3dde63c7d7", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/af74e21177f15b3c1bba34d98e8f3e3dde63c7d7", "committedDate": "2020-04-18T04:21:30Z", "message": "Making side inputs work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTU3NzY0", "url": "https://github.com/apache/beam/pull/11270#pullrequestreview-397557764", "createdAt": "2020-04-21T18:15:59Z", "commit": {"oid": "6a14d2e6ccfab4825c0904265c4a9a7ea848f899"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf821e55b43d5b245a4587a6f71061e405594efa", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/cf821e55b43d5b245a4587a6f71061e405594efa", "committedDate": "2020-04-21T18:19:01Z", "message": "[BEAM-9639][BEAM-9608] Addressing review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a14d2e6ccfab4825c0904265c4a9a7ea848f899", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/6a14d2e6ccfab4825c0904265c4a9a7ea848f899", "committedDate": "2020-04-18T05:36:35Z", "message": "format fixup"}, "afterCommit": {"oid": "cf821e55b43d5b245a4587a6f71061e405594efa", "author": {"user": {"login": "pabloem", "name": "Pablo"}}, "url": "https://github.com/apache/beam/commit/cf821e55b43d5b245a4587a6f71061e405594efa", "committedDate": "2020-04-21T18:19:01Z", "message": "[BEAM-9639][BEAM-9608] Addressing review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzY3OTUy", "url": "https://github.com/apache/beam/pull/11270#pullrequestreview-403767952", "createdAt": "2020-04-30T18:20:34Z", "commit": {"oid": "cf821e55b43d5b245a4587a6f71061e405594efa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODoyMDozNFrOGO1E8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODoyMDozNFrOGO1E8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMjg2NA==", "bodyText": "This test breaks Spark VR test: https://issues.apache.org/jira/browse/BEAM-9862. Please either support the same function for Spark or sickbay it.", "url": "https://github.com/apache/beam/pull/11270#discussion_r418202864", "createdAt": "2020-04-30T18:20:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "diffHunk": "@@ -240,6 +240,30 @@ def test_multimap_side_input(self):\n               lambda k, d: (k, sorted(d[k])), beam.pvalue.AsMultiMap(side)),\n           equal_to([('a', [1, 3]), ('b', [2])]))\n \n+  def test_multimap_multiside_input(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf821e55b43d5b245a4587a6f71061e405594efa"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4805, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}