{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTk3MTMx", "number": 12994, "title": "[BEAM-11044] Add support for gracefully aborting workers.", "bodyText": "On complete_work_status received (by the work progress updater thread), abort the corresponding map task executor thread.  This relies on Thread.interrupt() to unblock the worker thread if blocked and raise an exception -- the exception is actually ignored by the backend since the backend already decided to abort this thread.  Must also check the current thread for interrupts in the valuesiterator when it consumes a stream of values behind the same key, else control does not return to the runReadLoop() to check the interruption.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-10-01T23:19:00Z", "url": "https://github.com/apache/beam/pull/12994", "merged": true, "mergeCommit": {"oid": "1958eae6218c7ff4829f9caf82ce2708dfb9af31"}, "closed": true, "closedAt": "2020-10-08T17:11:47Z", "author": {"login": "tudorm"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOXyXKAH2gAyNDk2NTk3MTMxOjE5ZmYwNDUxYjA5ZjQ4OTAzYjg1YjExMDNkMDk4MmFlNmIzNzhhYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQkbL5AFqTUwNDk2Mjk1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "19ff0451b09f48903b85b1103d0982ae6b378ac3", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/19ff0451b09f48903b85b1103d0982ae6b378ac3", "committedDate": "2020-10-01T20:55:00Z", "message": "Add support for gracefully aborting workers. On complete_work_status received (by the work progress updater thread), abort the corresponding map task executor thread.  This relies on Thread.interrupt() to unblock the worker thread if blocked and raise an exception -- the exception is actually ignored by the backend since the backend already decided to abort this thread.  Must also check the current thread for interrupts in the valuesiterator when it consumes a stream of values behind the same key, else control does not return to the runReadLoop() to check the interruption."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42a4957793a9d49d50c6da4ab9ea05a2a4fdbdf9", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/42a4957793a9d49d50c6da4ab9ea05a2a4fdbdf9", "committedDate": "2020-10-01T20:55:01Z", "message": "."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09802834b9cee636818124ce130f4d805fc74b4d", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/09802834b9cee636818124ce130f4d805fc74b4d", "committedDate": "2020-10-01T23:08:27Z", "message": "."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/c14d176c89aef682c6efff51cc764a9d436a4574", "committedDate": "2020-10-01T23:26:54Z", "message": "spotlessApply"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9a0d26a572872fad9f882320a13662a2cd58232", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/b9a0d26a572872fad9f882320a13662a2cd58232", "committedDate": "2020-10-01T23:17:45Z", "message": "."}, "afterCommit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/c14d176c89aef682c6efff51cc764a9d436a4574", "committedDate": "2020-10-01T23:26:54Z", "message": "spotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODI5NTA4", "url": "https://github.com/apache/beam/pull/12994#pullrequestreview-500829508", "createdAt": "2020-10-02T02:32:16Z", "commit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjozMjoxNlrOHbf3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjozMjoyMlrOHbf3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NTYxOA==", "bodyText": "It would be nice for the next person if there is a diagnostic error message attached to this failure, lest we get a failure that says \"false is not true\".", "url": "https://github.com/apache/beam/pull/12994#discussion_r498595618", "createdAt": "2020-10-02T02:32:16Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "diffHunk": "@@ -483,4 +483,29 @@ public void testExceptionInAbortSuppressed() throws Exception {\n       assertThat(e.getSuppressed()[0].getMessage(), equalTo(\"suppressed in abort\"));\n     }\n   }\n+\n+  @Test\n+  public void testAbort() throws Exception {\n+    // Operation must be an instance of ReadOperation or ReceivingOperation per preconditions\n+    // in MapTaskExecutor.\n+    Operation o = Mockito.mock(ReadOperation.class);\n+\n+    ExecutionStateTracker stateTracker = ExecutionStateTracker.newForTest();\n+    try (MapTaskExecutor executor =\n+        new MapTaskExecutor(Arrays.<Operation>asList(o), counterSet, stateTracker)) {\n+      Mockito.doAnswer(\n+              invocation -> {\n+                executor.abort();\n+                return null;\n+              })\n+          .when(o)\n+          .start();\n+      executor.execute();\n+      fail(\"Should have aborted\");\n+    } catch (Exception e) {\n+      Assert.assertTrue(e instanceof InterruptedException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NTYzNQ==", "bodyText": "Same", "url": "https://github.com/apache/beam/pull/12994#discussion_r498595635", "createdAt": "2020-10-02T02:32:22Z", "author": {"login": "kennknowles"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutorTest.java", "diffHunk": "@@ -483,4 +483,29 @@ public void testExceptionInAbortSuppressed() throws Exception {\n       assertThat(e.getSuppressed()[0].getMessage(), equalTo(\"suppressed in abort\"));\n     }\n   }\n+\n+  @Test\n+  public void testAbort() throws Exception {\n+    // Operation must be an instance of ReadOperation or ReceivingOperation per preconditions\n+    // in MapTaskExecutor.\n+    Operation o = Mockito.mock(ReadOperation.class);\n+\n+    ExecutionStateTracker stateTracker = ExecutionStateTracker.newForTest();\n+    try (MapTaskExecutor executor =\n+        new MapTaskExecutor(Arrays.<Operation>asList(o), counterSet, stateTracker)) {\n+      Mockito.doAnswer(\n+              invocation -> {\n+                executor.abort();\n+                return null;\n+              })\n+          .when(o)\n+          .start();\n+      executor.execute();\n+      fail(\"Should have aborted\");\n+    } catch (Exception e) {\n+      Assert.assertTrue(e instanceof InterruptedException);\n+      Mockito.verify(o).abort();\n+    }\n+    Assert.assertTrue(Thread.currentThread().isInterrupted());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14d176c89aef682c6efff51cc764a9d436a4574"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/c543663d8d646d8190ce93c46d9efba836f31cd7", "committedDate": "2020-10-02T02:50:34Z", "message": "."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjM2NjY0", "url": "https://github.com/apache/beam/pull/12994#pullrequestreview-501236664", "createdAt": "2020-10-02T15:30:03Z", "commit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMDowM1rOHbyE8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMDowM1rOHbyE8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NDA2Nw==", "bodyText": "There is no requirement for user code to handle being interrupted arbitrarily and there are enough instances that I have seen where this would not be handled gracefully by the user.", "url": "https://github.com/apache/beam/pull/12994#discussion_r498894067", "createdAt": "2020-10-02T15:30:03Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/common/worker/MapTaskExecutor.java", "diffHunk": "@@ -146,13 +165,17 @@ public boolean supportsRestart() {\n   @Override\n   public void abort() {\n     // Signal the read loop to abort on the next record.\n-    // TODO: Also interrupt the execution thread.\n     for (Operation op : operations) {\n       Preconditions.checkState(op instanceof ReadOperation || op instanceof ReceivingOperation);\n       if (op instanceof ReadOperation) {\n         ((ReadOperation) op).abortReadLoop();\n       }\n     }\n+    synchronized (this) {\n+      if (currentExecutorThread != null) {\n+        currentExecutorThread.interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c543663d8d646d8190ce93c46d9efba836f31cd7"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce47d21fd772b7d760b3d3d36515c386f4919bdd", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/ce47d21fd772b7d760b3d3d36515c386f4919bdd", "committedDate": "2020-10-06T03:13:35Z", "message": "Added async abort signaling up to the GroupingShuffleReader's (values) iterator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b61acd19e16b25e16f7df509a72563e9d7ab25", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/c1b61acd19e16b25e16f7df509a72563e9d7ab25", "committedDate": "2020-10-06T16:25:07Z", "message": "Update abort message and add async abort signaling up to the GroupingShuffleReader's (values) iterator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba6498d3e6dad52bb0a1ef099471c20b32d2dbd", "author": {"user": {"login": "tudorm", "name": null}}, "url": "https://github.com/apache/beam/commit/cba6498d3e6dad52bb0a1ef099471c20b32d2dbd", "committedDate": "2020-10-06T17:32:21Z", "message": "When aborting the work item, log the status received from the backend"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTYyOTUw", "url": "https://github.com/apache/beam/pull/12994#pullrequestreview-504962950", "createdAt": "2020-10-08T16:31:34Z", "commit": {"oid": "cba6498d3e6dad52bb0a1ef099471c20b32d2dbd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjozMTozNFrOHem14Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjozMTozNFrOHem14Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1NTcxMw==", "bodyText": "Checking atFirstValue and aborted will likely perform worse then just checking aborted all the time. It may seem redundant but the abort happens asynchronously so we may have gotten past the check in the ReadOperation already.", "url": "https://github.com/apache/beam/pull/12994#discussion_r501855713", "createdAt": "2020-10-08T16:31:34Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/GroupingShuffleReader.java", "diffHunk": "@@ -402,6 +432,14 @@ public boolean hasNext() {\n \n       @Override\n       public V next() {\n+        // Given that the underlying ReadOperation already checks the abort status after every\n+        // record it advances over (i.e., for every distinct key), we skip the check when at\n+        // the first value as that is redundant. Signal by thread interruption may be better, but\n+        // it may also have unintended side-effects.\n+        if (!atFirstValue && aborted.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba6498d3e6dad52bb0a1ef099471c20b32d2dbd"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2239, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}