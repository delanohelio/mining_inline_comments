{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjQ2MDMz", "number": 13139, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODo0NzozN1rOEy9ErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODo1MDoyOVrOEy9Irw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODY0ODc2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODo0NzozN1rOHp4uJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjoyODoyNlrOHp_1bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mjk4Mg==", "bodyText": "One danger here of using kwargs.get rather than letting it be a parameter is that you're hard-coding what all the defaults are (rather than using populate_defaults).", "url": "https://github.com/apache/beam/pull/13139#discussion_r513682982", "createdAt": "2020-10-28T18:47:37Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -619,21 +619,75 @@ def assign(self, **kwargs):\n                                             \"instances are supported.\")\n     return frame_base._elementwise_method('assign')(self, **kwargs)\n \n-\n   apply = frame_base.not_implemented_method('apply')\n-  explode = frame_base.not_implemented_method('explode')\n   isin = frame_base.not_implemented_method('isin')\n   append = frame_base.not_implemented_method('append')\n   combine = frame_base.not_implemented_method('combine')\n   combine_first = frame_base.not_implemented_method('combine_first')\n   count = frame_base.not_implemented_method('count')\n-  drop = frame_base.not_implemented_method('drop')\n   eval = frame_base.not_implemented_method('eval')\n   reindex = frame_base.not_implemented_method('reindex')\n   melt = frame_base.not_implemented_method('melt')\n   pivot = frame_base.not_implemented_method('pivot')\n   pivot_table = frame_base.not_implemented_method('pivot_table')\n \n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def explode(self, column, ignore_index):\n+    # ignoring the index will not preserve it\n+    preserves = (partitionings.Nothing() if ignore_index\n+                 else partitionings.Singleton())\n+    return frame_base.DeferredFrame.wrap(\n+        expressions.ComputedExpression(\n+            'explode',\n+            lambda df: df.explode(column, ignore_index),\n+            [self._expr],\n+            preserves_partition_by=preserves,\n+            requires_partition_by=partitionings.Nothing()))\n+\n+\n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  @frame_base.maybe_inplace\n+  def drop(self, **kwargs):\n+    labels = kwargs.get('labels', None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e27287db91d844a7497ed94493f23d49ee83349"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5OTUzMw==", "bodyText": "Ah whoops. I switched it over to use args directly", "url": "https://github.com/apache/beam/pull/13139#discussion_r513799533", "createdAt": "2020-10-28T22:28:26Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -619,21 +619,75 @@ def assign(self, **kwargs):\n                                             \"instances are supported.\")\n     return frame_base._elementwise_method('assign')(self, **kwargs)\n \n-\n   apply = frame_base.not_implemented_method('apply')\n-  explode = frame_base.not_implemented_method('explode')\n   isin = frame_base.not_implemented_method('isin')\n   append = frame_base.not_implemented_method('append')\n   combine = frame_base.not_implemented_method('combine')\n   combine_first = frame_base.not_implemented_method('combine_first')\n   count = frame_base.not_implemented_method('count')\n-  drop = frame_base.not_implemented_method('drop')\n   eval = frame_base.not_implemented_method('eval')\n   reindex = frame_base.not_implemented_method('reindex')\n   melt = frame_base.not_implemented_method('melt')\n   pivot = frame_base.not_implemented_method('pivot')\n   pivot_table = frame_base.not_implemented_method('pivot_table')\n \n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def explode(self, column, ignore_index):\n+    # ignoring the index will not preserve it\n+    preserves = (partitionings.Nothing() if ignore_index\n+                 else partitionings.Singleton())\n+    return frame_base.DeferredFrame.wrap(\n+        expressions.ComputedExpression(\n+            'explode',\n+            lambda df: df.explode(column, ignore_index),\n+            [self._expr],\n+            preserves_partition_by=preserves,\n+            requires_partition_by=partitionings.Nothing()))\n+\n+\n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  @frame_base.maybe_inplace\n+  def drop(self, **kwargs):\n+    labels = kwargs.get('labels', None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mjk4Mg=="}, "originalCommit": {"oid": "9e27287db91d844a7497ed94493f23d49ee83349"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODY1OTAzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODo1MDoyOVrOHp404A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyMzozNFrOHqmq8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDcwNA==", "bodyText": "Is there a drawback to this being automatically inferred? (Or was it not?)\nSame below.", "url": "https://github.com/apache/beam/pull/13139#discussion_r513684704", "createdAt": "2020-10-28T18:50:29Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1513,6 +1584,8 @@ def repeat(self, repeats):\n               'repeat',\n               lambda series: series.str.repeat(repeats),\n               [self._expr],\n+              # Output will also be a str Series", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e27287db91d844a7497ed94493f23d49ee83349"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMTAyNw==", "bodyText": "Yeah when I added the verification of the proxy in TransformTest I found that this proxy was incorrectly inferred as bool for the zipping case tested there.\nIn [10]: proxy.dtypes\nOut[10]: \nstr        object\nrepeats     int64\ndtype: object\n\nIn [11]: proxy.str.str.repeat(proxy.repeats)\nOut[11]: Series([], Name: str, dtype: bool)\nThe actual operation does produce object though:\nIn [13]: df.str.str.repeat(df.repeats)\nOut[13]: \n0      AAA\n1        B\n2     CCCC\n3    DDDDD\n4       EE\nName: str, dtype: object", "url": "https://github.com/apache/beam/pull/13139#discussion_r513711027", "createdAt": "2020-10-28T19:37:07Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1513,6 +1584,8 @@ def repeat(self, repeats):\n               'repeat',\n               lambda series: series.str.repeat(repeats),\n               [self._expr],\n+              # Output will also be a str Series", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDcwNA=="}, "originalCommit": {"oid": "9e27287db91d844a7497ed94493f23d49ee83349"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMTM3OA==", "bodyText": "Maybe something we should fix upstream and patch around here in the meantime?", "url": "https://github.com/apache/beam/pull/13139#discussion_r513711378", "createdAt": "2020-10-28T19:37:49Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1513,6 +1584,8 @@ def repeat(self, repeats):\n               'repeat',\n               lambda series: series.str.repeat(repeats),\n               [self._expr],\n+              # Output will also be a str Series", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDcwNA=="}, "originalCommit": {"oid": "9e27287db91d844a7497ed94493f23d49ee83349"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNTgyNA==", "bodyText": "Hmm... OK, can you file a JIRA to investigate?", "url": "https://github.com/apache/beam/pull/13139#discussion_r514435824", "createdAt": "2020-10-29T17:23:34Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1513,6 +1584,8 @@ def repeat(self, repeats):\n               'repeat',\n               lambda series: series.str.repeat(repeats),\n               [self._expr],\n+              # Output will also be a str Series", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDcwNA=="}, "originalCommit": {"oid": "9e27287db91d844a7497ed94493f23d49ee83349"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3029, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}