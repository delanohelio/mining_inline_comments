{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTgwNDQ5", "number": 12249, "title": "Make tracking/cleanup of cache and in-environment states per pipeline", "bodyText": "Interactive Beam now creates 1 cache manager for each user defined pipeline.\nCache managers are created lazily when they are used.\nCleanup of cache and states are carried out independently for each pipeline.\nThe source recording/capture size limit is applied to the total capture size of all pipelines.\n\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-14T00:54:03Z", "url": "https://github.com/apache/beam/pull/12249", "merged": true, "mergeCommit": {"oid": "613edd392773f16c3411c75c821be8e78d867532"}, "closed": true, "closedAt": "2020-07-15T00:23:17Z", "author": {"login": "KevinGG"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0rxKxAH2gAyNDQ4NTgwNDQ5OjZhZjc0YWYwOTQ3MWRmYzI0OTMyMjI1NzMxZDljNDQ2MWYyMjY5Yjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0_Z2gAFqTQ0ODU1MDE5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6af74af09471dfc24932225731d9c4461f2269b9", "committedDate": "2020-07-14T01:29:46Z", "message": "Make tracking/cleanup of cache and in-environment states per pipeline\n\nChange-Id: I37c9a65c461d619cf7ae1f762eae54ba02091c38"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3809ee1b50aaf546ba0c0c22e3e58709457daf4", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b3809ee1b50aaf546ba0c0c22e3e58709457daf4", "committedDate": "2020-07-14T00:45:32Z", "message": "Make tracking/cleanup of cache and in-environment states per pipeline\n\nChange-Id: I37c9a65c461d619cf7ae1f762eae54ba02091c38"}, "afterCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6af74af09471dfc24932225731d9c4461f2269b9", "committedDate": "2020-07-14T01:29:46Z", "message": "Make tracking/cleanup of cache and in-environment states per pipeline\n\nChange-Id: I37c9a65c461d619cf7ae1f762eae54ba02091c38"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzEyMDE0", "url": "https://github.com/apache/beam/pull/12249#pullrequestreview-448312014", "createdAt": "2020-07-14T17:23:30Z", "commit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyMzozMFrOGxdpjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzozMDo0M1rOGxd73w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxOTE4Mw==", "bodyText": "Do you need to call cleanup for evicted cache manager(s) ?", "url": "https://github.com/apache/beam/pull/12249#discussion_r454519183", "createdAt": "2020-07-14T17:23:30Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -286,24 +298,40 @@ def watching(self):\n         watching.append(vars(watchable).items())\n     return watching\n \n-  def set_cache_manager(self, cache_manager):\n-    \"\"\"Sets the cache manager held by current Interactive Environment.\"\"\"\n-    if self._cache_manager is cache_manager:\n+  def set_cache_manager(self, cache_manager, pipeline):\n+    \"\"\"Sets the cache manager held by current Interactive Environment for the\n+    given pipeline.\"\"\"\n+    if self.get_cache_manager(pipeline) is cache_manager:\n       # NOOP if setting to the same cache_manager.\n       return\n-    if self._cache_manager:\n+    if self.get_cache_manager(pipeline):\n       # Invoke cleanup routine when a new cache_manager is forcefully set and\n       # current cache_manager is not None.\n-      self.cleanup()\n-      atexit.unregister(self.cleanup)\n-    self._cache_manager = cache_manager\n-    if self._cache_manager:\n-      # Re-register cleanup routine for the new cache_manager if it's not None.\n-      atexit.register(self.cleanup)\n-\n-  def cache_manager(self):\n-    \"\"\"Gets the cache manager held by current Interactive Environment.\"\"\"\n-    return self._cache_manager\n+      self.cleanup(pipeline)\n+    self._cache_managers[str(id(pipeline))] = cache_manager\n+\n+  def get_cache_manager(self, pipeline, create_if_absent=False):\n+    \"\"\"Gets the cache manager held by current Interactive Environment for the\n+    given pipeline. If the pipeline is absent from the environment while\n+    create_if_absent is True, creates and returns a new file based cache\n+    manager for the pipeline.\"\"\"\n+    cache_manager = self._cache_managers.get(str(id(pipeline)), None)\n+    if not cache_manager and create_if_absent:\n+      cache_dir = tempfile.mkdtemp(\n+          suffix=str(id(pipeline)),\n+          prefix='interactive-temp-',\n+          dir=os.environ.get('TEST_TMPDIR', None))\n+      cache_manager = cache.FileBasedCacheManager(cache_dir)\n+      self._cache_managers[str(id(pipeline))] = cache_manager\n+    return cache_manager\n+\n+  def evict_cache_manager(self, pipeline=None):\n+    \"\"\"Evicts the cache manager held by current Interactive Environment for the\n+    given pipeline. Noop if the pipeline is absent from the environment. If no\n+    pipeline is specified, evicts for all pipelines.\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzM4NA==", "bodyText": "Do you need this? You can change L569 to use create_if_absent=True instead.", "url": "https://github.com/apache/beam/pull/12249#discussion_r454523384", "createdAt": "2020-07-14T17:29:58Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -556,19 +556,26 @@ def _process(self, pcoll):\n             if not self._pin._user_pipeline:\n               # Retrieve a reference to the user defined pipeline instance.\n               self._pin._user_pipeline = user_pcoll.pipeline\n-              # Once user_pipeline is retrieved, check if the user pipeline\n-              # contains any source to cache. If so, current cache manager held\n-              # by current interactive environment might get wrapped into a\n-              # streaming cache, thus re-assign the reference to that cache\n-              # manager.\n+              # Retrieve a reference to the cache manager for the user defined\n+              # pipeline instance.\n+              self._pin._cache_manager = ie.current_env().get_cache_manager(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyMzg3MQ==", "bodyText": "Do you need to check that cache_manager is not None?", "url": "https://github.com/apache/beam/pull/12249#discussion_r454523871", "createdAt": "2020-07-14T17:30:43Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_runner.py", "diffHunk": "@@ -259,7 +247,8 @@ def read(self, pcoll, include_window_info=False):\n     WindowedValues. Otherwise, return the element as itself.\n     \"\"\"\n     key = self._pipeline_instrument.cache_key(pcoll)\n-    cache_manager = ie.current_env().cache_manager()\n+    cache_manager = ie.current_env().get_cache_manager(\n+        self._pipeline_instrument.user_pipeline)\n     if cache_manager.exists('full', key):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af74af09471dfc24932225731d9c4461f2269b9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "370fbc942927964930a0807e30a910ea47ed669f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/370fbc942927964930a0807e30a910ea47ed669f", "committedDate": "2020-07-14T18:26:54Z", "message": "Added cleanup when evicting cache_managers\n\nChange-Id: Ie6ef39594bbd99168ddb25816dcffa91e5143ec0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTUwMTk1", "url": "https://github.com/apache/beam/pull/12249#pullrequestreview-448550195", "createdAt": "2020-07-15T00:22:24Z", "commit": {"oid": "370fbc942927964930a0807e30a910ea47ed669f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4088, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}