{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MTgwMjM1", "number": 12812, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzozODoxM1rOEjXQ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1MzowMFrOEjXcdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE2NzU4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzozODoxM1rOHRrOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0MzozOFrOHRsYoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NjExMQ==", "bodyText": "any is not part of the pandas API. I assume this is an option you're adding to provide a way to get exactly n without promising to get the first or last since that's order-sensitive?\nThat makes sense - but we should probably document the places where we diverge from pandas like this (could just be a TODO here and/or a jira for now).", "url": "https://github.com/apache/beam/pull/12812#discussion_r488296111", "createdAt": "2020-09-14T23:38:13Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -551,9 +559,13 @@ def merge(\n       return merged.reset_index(drop=True)\n \n   @frame_base.args_to_kwargs(pd.DataFrame)\n-  def nlargest(self, **kwargs):\n-    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def nlargest(self, keep, **kwargs):\n+    if keep == 'any':\n+      keep = 'first'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f2ce027d6fead8bb9b44a898bb3d86da278ffc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMDk0NQ==", "bodyText": "Also: I take it PartitioningSession revealed this problem with first/last? That's good to know, I was wondering about these options earlier but figured I was misunderstanding something.", "url": "https://github.com/apache/beam/pull/12812#discussion_r488300945", "createdAt": "2020-09-14T23:54:47Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -551,9 +559,13 @@ def merge(\n       return merged.reset_index(drop=True)\n \n   @frame_base.args_to_kwargs(pd.DataFrame)\n-  def nlargest(self, **kwargs):\n-    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def nlargest(self, keep, **kwargs):\n+    if keep == 'any':\n+      keep = 'first'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NjExMQ=="}, "originalCommit": {"oid": "49f2ce027d6fead8bb9b44a898bb3d86da278ffc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTA0MA==", "bodyText": "Yep, exactly. Dropped a TODO. I'm thinking we may want a context (like we have for non-parallel operations) for operations like this to explicitly say that one doesn't care about ordering (e.g. nlargest would default to any so df.nlargest(10) would just work as-is.\nPartitioningSession caused the rows to get perumuted.", "url": "https://github.com/apache/beam/pull/12812#discussion_r488315040", "createdAt": "2020-09-15T00:43:38Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -551,9 +559,13 @@ def merge(\n       return merged.reset_index(drop=True)\n \n   @frame_base.args_to_kwargs(pd.DataFrame)\n-  def nlargest(self, **kwargs):\n-    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def nlargest(self, keep, **kwargs):\n+    if keep == 'any':\n+      keep = 'first'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NjExMQ=="}, "originalCommit": {"oid": "49f2ce027d6fead8bb9b44a898bb3d86da278ffc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE5NzMyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/expressions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1MzowMFrOHRrfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1MzowMFrOHRrfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMDQ1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class PartitioningSession(Session):\n          \n          \n            \n              def evaluate(self, expr):\n          \n          \n            \n            class PartitioningSession(Session):\n          \n          \n            \n              \"\"\"An extension of Session that ensures input dataframes are split into at least `len(df)` separate partitions and input in a random order. For testing only.\n          \n          \n            \n              \"\"\"\n          \n          \n            \n              def evaluate(self, expr):\n          \n      \n    \n    \n  \n\nOr something like that :)", "url": "https://github.com/apache/beam/pull/12812#discussion_r488300457", "createdAt": "2020-09-14T23:53:00Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/expressions.py", "diffHunk": "@@ -45,6 +45,45 @@ def lookup(self, expr):  #  type: (Expression) -> Any\n     return self._bindings[expr]\n \n \n+class PartitioningSession(Session):\n+  def evaluate(self, expr):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49f2ce027d6fead8bb9b44a898bb3d86da278ffc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3283, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}