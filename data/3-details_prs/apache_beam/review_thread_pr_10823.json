{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzMxMzc3", "number": 10823, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo1MToxN1rODg56fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo1MjozOVrODg57dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODI5ODg2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/metrics/metric_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo1MToxN1rOFrXpUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjoxNDoyNFrOFrcLRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyMDQ5Nw==", "bodyText": "= 4, no guarantee it's exactly 4.", "url": "https://github.com/apache/beam/pull/10823#discussion_r381020497", "createdAt": "2020-02-19T00:51:17Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -127,6 +134,35 @@ def test_distribution_empty_namespace(self):\n     with self.assertRaises(ValueError):\n       Metrics.distribution(\"\", \"names\")\n \n+  @attr('ValidatesRunner')\n+  def test_user_counter_using_pardo(self):\n+    class SomeDoFn(beam.DoFn):\n+      \"\"\"A custom dummy DoFn using yield.\"\"\"\n+      def __init__(self):\n+        self.user_counter_elements = metrics.Metrics.counter(\n+          self.__class__, 'metrics_user_counter_element')\n+\n+      def process(self, element):\n+        self.user_counter_elements.inc()\n+        yield element\n+\n+    pipeline = TestPipeline()\n+    nums = pipeline | 'Input' >> beam.Create([1, 2, 3, 4])\n+    results = nums | 'ApplyPardo' >> beam.ParDo(SomeDoFn())\n+\n+    res = pipeline.run()\n+    res.wait_until_finish()\n+    metric_results = (\n+      res.metrics().query(MetricsFilter()\n+        .with_name('metrics_user_counter_element')))\n+    outputs_counter = metric_results['counters'][0]\n+    assert_that(results, equal_to([1, 2, 3, 4]))\n+\n+    self.assertEqual(outputs_counter.key.metric.name,\n+\t\t\t\t\t 'metrics_user_counter_element')\n+    self.assertEqual(outputs_counter.committed, 4)\n+    self.assertEqual(outputs_counter.attempted, 4)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b96766e4b56b999bf40ef05e54df02b9cf3d941"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5NDcyNw==", "bodyText": "removed the assert on attempted.", "url": "https://github.com/apache/beam/pull/10823#discussion_r381094727", "createdAt": "2020-02-19T06:14:24Z", "author": {"login": "HuangLED"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -127,6 +134,35 @@ def test_distribution_empty_namespace(self):\n     with self.assertRaises(ValueError):\n       Metrics.distribution(\"\", \"names\")\n \n+  @attr('ValidatesRunner')\n+  def test_user_counter_using_pardo(self):\n+    class SomeDoFn(beam.DoFn):\n+      \"\"\"A custom dummy DoFn using yield.\"\"\"\n+      def __init__(self):\n+        self.user_counter_elements = metrics.Metrics.counter(\n+          self.__class__, 'metrics_user_counter_element')\n+\n+      def process(self, element):\n+        self.user_counter_elements.inc()\n+        yield element\n+\n+    pipeline = TestPipeline()\n+    nums = pipeline | 'Input' >> beam.Create([1, 2, 3, 4])\n+    results = nums | 'ApplyPardo' >> beam.ParDo(SomeDoFn())\n+\n+    res = pipeline.run()\n+    res.wait_until_finish()\n+    metric_results = (\n+      res.metrics().query(MetricsFilter()\n+        .with_name('metrics_user_counter_element')))\n+    outputs_counter = metric_results['counters'][0]\n+    assert_that(results, equal_to([1, 2, 3, 4]))\n+\n+    self.assertEqual(outputs_counter.key.metric.name,\n+\t\t\t\t\t 'metrics_user_counter_element')\n+    self.assertEqual(outputs_counter.committed, 4)\n+    self.assertEqual(outputs_counter.attempted, 4)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyMDQ5Nw=="}, "originalCommit": {"oid": "9b96766e4b56b999bf40ef05e54df02b9cf3d941"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODMwMTMzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/metrics/metric_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo1MjozOVrOFrXq0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjoxNDozMFrOFrcLWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyMDg4MQ==", "bodyText": "This must be applied before the pipeline is run.", "url": "https://github.com/apache/beam/pull/10823#discussion_r381020881", "createdAt": "2020-02-19T00:52:39Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -127,6 +134,35 @@ def test_distribution_empty_namespace(self):\n     with self.assertRaises(ValueError):\n       Metrics.distribution(\"\", \"names\")\n \n+  @attr('ValidatesRunner')\n+  def test_user_counter_using_pardo(self):\n+    class SomeDoFn(beam.DoFn):\n+      \"\"\"A custom dummy DoFn using yield.\"\"\"\n+      def __init__(self):\n+        self.user_counter_elements = metrics.Metrics.counter(\n+          self.__class__, 'metrics_user_counter_element')\n+\n+      def process(self, element):\n+        self.user_counter_elements.inc()\n+        yield element\n+\n+    pipeline = TestPipeline()\n+    nums = pipeline | 'Input' >> beam.Create([1, 2, 3, 4])\n+    results = nums | 'ApplyPardo' >> beam.ParDo(SomeDoFn())\n+\n+    res = pipeline.run()\n+    res.wait_until_finish()\n+    metric_results = (\n+      res.metrics().query(MetricsFilter()\n+        .with_name('metrics_user_counter_element')))\n+    outputs_counter = metric_results['counters'][0]\n+    assert_that(results, equal_to([1, 2, 3, 4]))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b96766e4b56b999bf40ef05e54df02b9cf3d941"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5NDc0Nw==", "bodyText": "done.", "url": "https://github.com/apache/beam/pull/10823#discussion_r381094747", "createdAt": "2020-02-19T06:14:30Z", "author": {"login": "HuangLED"}, "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -127,6 +134,35 @@ def test_distribution_empty_namespace(self):\n     with self.assertRaises(ValueError):\n       Metrics.distribution(\"\", \"names\")\n \n+  @attr('ValidatesRunner')\n+  def test_user_counter_using_pardo(self):\n+    class SomeDoFn(beam.DoFn):\n+      \"\"\"A custom dummy DoFn using yield.\"\"\"\n+      def __init__(self):\n+        self.user_counter_elements = metrics.Metrics.counter(\n+          self.__class__, 'metrics_user_counter_element')\n+\n+      def process(self, element):\n+        self.user_counter_elements.inc()\n+        yield element\n+\n+    pipeline = TestPipeline()\n+    nums = pipeline | 'Input' >> beam.Create([1, 2, 3, 4])\n+    results = nums | 'ApplyPardo' >> beam.ParDo(SomeDoFn())\n+\n+    res = pipeline.run()\n+    res.wait_until_finish()\n+    metric_results = (\n+      res.metrics().query(MetricsFilter()\n+        .with_name('metrics_user_counter_element')))\n+    outputs_counter = metric_results['counters'][0]\n+    assert_that(results, equal_to([1, 2, 3, 4]))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyMDg4MQ=="}, "originalCommit": {"oid": "9b96766e4b56b999bf40ef05e54df02b9cf3d941"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1976, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}