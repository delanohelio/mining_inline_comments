{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxODAwOTg3", "number": 12131, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMTozMFrOEKJQ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMDo1MVrOEK-MLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDcyOTk2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/sts/STSCredentialsProviderWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMTozMFrOGrBMCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMTozMFrOGrBMCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MTQxNg==", "bodyText": "Why do we need to use a Wrapper instead of just using STSAssumeRoleSessionCredentialsProvider?", "url": "https://github.com/apache/beam/pull/12131#discussion_r447761416", "createdAt": "2020-06-30T15:11:30Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/sts/STSCredentialsProviderWrapper.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.aws.sts;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenService;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+/*\n+ *\n+ * {@link AWSCredentialsProvider} that loads credentials using Assume Role\n+ *\n+ */\n+\n+public class STSCredentialsProviderWrapper implements AWSCredentialsProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ceac0c0a1091f7f093a39dc464cfa5d64e9c2ed"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDc1NDQ2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/sts/package-info.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxNjo0MFrOGrBa7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxNjo0MFrOGrBa7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTIzMQ==", "bodyText": "I'm not sure that it's needed to create a separate package for STS. Can we put STSCredentialsProviderWrapper  into options?", "url": "https://github.com/apache/beam/pull/12131#discussion_r447765231", "createdAt": "2020-06-30T15:16:40Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/sts/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/** Defines IO connectors for Amazon Web Services SQS. */\n+@Experimental(Kind.SOURCE_SINK)\n+package org.apache.beam.sdk.io.aws.sts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ceac0c0a1091f7f093a39dc464cfa5d64e9c2ed"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI0NTUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxNDo1MlrOGrslfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxNDo1MlrOGrslfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3MjQ0Ng==", "bodyText": "Why do we need this plugin? I don't think we have to distribute shadow jar.", "url": "https://github.com/apache/beam/pull/12131#discussion_r448472446", "createdAt": "2020-07-01T16:14:52Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/build.gradle", "diffHunk": "@@ -18,13 +18,21 @@ import groovy.json.JsonOutput\n  * limitations under the License.\n  */\n \n-plugins { id 'org.apache.beam.module' }\n-applyJavaNature(automaticModuleName: 'org.apache.beam.sdk.io.aws')\n+plugins {\n+  id 'com.github.johnrengelman.shadow'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78d77072b730e43bffbb28f745199a3ba7e0917"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI2MDcyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxODo1M1rOGrsvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxODo1M1rOGrsvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3NDg5Ng==", "bodyText": "I'm not sure we need to shadow here.", "url": "https://github.com/apache/beam/pull/12131#discussion_r448474896", "createdAt": "2020-07-01T16:18:53Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/build.gradle", "diffHunk": "@@ -18,13 +18,21 @@ import groovy.json.JsonOutput\n  * limitations under the License.\n  */\n \n-plugins { id 'org.apache.beam.module' }\n-applyJavaNature(automaticModuleName: 'org.apache.beam.sdk.io.aws')\n+plugins {\n+  id 'com.github.johnrengelman.shadow'\n+  id 'org.apache.beam.module'\n+}\n+applyJavaNature(\n+        automaticModuleName: 'org.apache.beam.sdk.io.aws'\n+)\n \n description = \"Apache Beam :: SDKs :: Java :: IO :: Amazon Web Services\"\n ext.summary = \"IO library to read and write Amazon Web Services services from Beam.\"\n \n dependencies {\n+  shadow localGroovy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78d77072b730e43bffbb28f745199a3ba7e0917"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI3OTE2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/options/AwsModuleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyMzozNFrOGrs6IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyMzozNFrOGrs6IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3NzcyOA==", "bodyText": "Please, add Serialization/Deserialization asserts as we do for other provider tests.", "url": "https://github.com/apache/beam/pull/12131#discussion_r448477728", "createdAt": "2020-07-01T16:23:34Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/options/AwsModuleTest.java", "diffHunk": "@@ -117,6 +119,17 @@ public void testClasspathPropertiesFileCredentialsProviderSerializationDeseriali\n     assertEquals(credentialsFilePath, deserializedCredentialsFilePath);\n   }\n \n+  @Test\n+  public void testSTSCredentialsProviderWrapperSerializationDeserialization() throws Exception {\n+    String roleArn = \"arn:aws:iam::000111222333:role/TestRole\";\n+    String roleSessionName = \"roleSessionName\";\n+    STSAssumeRoleSessionCredentialsProvider credentialsProvider =\n+        AssumeRoleSessionCredentialsProvider.getInstance(roleArn, roleSessionName)\n+            .getSessionCredentialsProvider();\n+\n+    assertNotNull(credentialsProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78d77072b730e43bffbb28f745199a3ba7e0917"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTMwNTMzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/options/AwsModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozMDo0OVrOGrtK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozMDo0OVrOGrtK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MjAwMg==", "bodyText": "Can we just return new STSAssumeRoleSessionCredentialsProvider.Builder(asMap.get(ROLE_ARN), asMap.get(ROLE_SESSION_NAME)).build() here? Why do we need to create AssumeRoleSessionCredentialsProvider class?", "url": "https://github.com/apache/beam/pull/12131#discussion_r448482002", "createdAt": "2020-07-01T16:30:49Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/options/AwsModule.java", "diffHunk": "@@ -132,6 +135,10 @@ public AWSCredentialsProvider deserializeWithType(\n         return new ProfileCredentialsProvider();\n       } else if (typeName.equals(EC2ContainerCredentialsProviderWrapper.class.getSimpleName())) {\n         return new EC2ContainerCredentialsProviderWrapper();\n+      } else if (typeName.equals(STSAssumeRoleSessionCredentialsProvider.class.getSimpleName())) {\n+        return AssumeRoleSessionCredentialsProvider.getInstance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78d77072b730e43bffbb28f745199a3ba7e0917"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTI4NTk5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1MTo0MFrOGsTpcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1MTo0MFrOGsTpcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExMjQzMg==", "bodyText": "Please, remove it. It should be a user's responsibility to create or not shadow jar, not Beam.", "url": "https://github.com/apache/beam/pull/12131#discussion_r449112432", "createdAt": "2020-07-02T15:51:40Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/build.gradle", "diffHunk": "@@ -18,8 +18,14 @@ import groovy.json.JsonOutput\n  * limitations under the License.\n  */\n \n-plugins { id 'org.apache.beam.module' }\n-applyJavaNature(automaticModuleName: 'org.apache.beam.sdk.io.aws')\n+plugins {\n+  id 'org.apache.beam.module'\n+}\n+\n+applyJavaNature(\n+        automaticModuleName: 'org.apache.beam.sdk.io.aws',\n+        shadowClosure: {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e038585729a8973229ad6d5778fc283934f271"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMwMDc1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/options/AwsModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1NToxMFrOGsTymQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1NToxMFrOGsTymQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNDc3Nw==", "bodyText": "Use ROLE_ARN constant here.", "url": "https://github.com/apache/beam/pull/12131#discussion_r449114777", "createdAt": "2020-07-02T15:55:10Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/options/AwsModule.java", "diffHunk": "@@ -203,7 +211,27 @@ public void serializeWithType(\n         } catch (NoSuchFieldException | IllegalAccessException e) {\n           throw new IOException(\"failed to access private field with reflection\", e);\n         }\n+      } else if (credentialsProvider\n+          .getClass()\n+          .equals(STSAssumeRoleSessionCredentialsProvider.class)) {\n+        try {\n+          STSAssumeRoleSessionCredentialsProvider specificProvider =\n+              (STSAssumeRoleSessionCredentialsProvider) credentialsProvider;\n+\n+          Field fieldRole =\n+              STSAssumeRoleSessionCredentialsProvider.class.getDeclaredField(\"roleArn\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e038585729a8973229ad6d5778fc283934f271"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMwMjMyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/options/AwsModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1NTozM1rOGsTzlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1NTozM1rOGsTzlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNTAzMA==", "bodyText": "Use ROLE_SESSION_NAME constant here.", "url": "https://github.com/apache/beam/pull/12131#discussion_r449115030", "createdAt": "2020-07-02T15:55:33Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/main/java/org/apache/beam/sdk/io/aws/options/AwsModule.java", "diffHunk": "@@ -203,7 +211,27 @@ public void serializeWithType(\n         } catch (NoSuchFieldException | IllegalAccessException e) {\n           throw new IOException(\"failed to access private field with reflection\", e);\n         }\n+      } else if (credentialsProvider\n+          .getClass()\n+          .equals(STSAssumeRoleSessionCredentialsProvider.class)) {\n+        try {\n+          STSAssumeRoleSessionCredentialsProvider specificProvider =\n+              (STSAssumeRoleSessionCredentialsProvider) credentialsProvider;\n+\n+          Field fieldRole =\n+              STSAssumeRoleSessionCredentialsProvider.class.getDeclaredField(\"roleArn\");\n+          fieldRole.setAccessible(true);\n+          String roleArn = (String) fieldRole.get(specificProvider);\n+          jsonGenerator.writeStringField(ROLE_ARN, roleArn);\n \n+          Field fieldSession =\n+              STSAssumeRoleSessionCredentialsProvider.class.getDeclaredField(\"roleSessionName\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e038585729a8973229ad6d5778fc283934f271"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMyMjAxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/options/AwsModuleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMDoxMFrOGsT_ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMDoxMFrOGsT_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExODE0Nw==", "bodyText": "nit: word Wrapper is unnecessary in the test name.", "url": "https://github.com/apache/beam/pull/12131#discussion_r449118147", "createdAt": "2020-07-02T16:00:10Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/options/AwsModuleTest.java", "diffHunk": "@@ -117,6 +118,29 @@ public void testClasspathPropertiesFileCredentialsProviderSerializationDeseriali\n     assertEquals(credentialsFilePath, deserializedCredentialsFilePath);\n   }\n \n+  @Test\n+  public void testSTSCredentialsProviderWrapperSerializationDeserialization() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e038585729a8973229ad6d5778fc283934f271"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQwMTQyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/options/AwsModuleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMDo1MVrOGsUw6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMDo1MVrOGsUw6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMDczMQ==", "bodyText": "Please, leave org.junit.Assert.assertThat as it was before.", "url": "https://github.com/apache/beam/pull/12131#discussion_r449130731", "createdAt": "2020-07-02T16:20:51Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/amazon-web-services/src/test/java/org/apache/beam/sdk/io/aws/options/AwsModuleTest.java", "diffHunk": "@@ -17,9 +17,9 @@\n  */\n package org.apache.beam.sdk.io.aws.options;\n \n+import static org.hamcrest.MatcherAssert.assertThat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e038585729a8973229ad6d5778fc283934f271"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3396, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}