{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjU1MzIw", "number": 11182, "title": "[BEAM-9650] Add PeriodicImpulse Transform and slowly changing side input documentation", "bodyText": "Documentation change can be seen here. Website doesn't show snapshot code though, I assume due to code not present at master repository.\nBEAM-9650\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-20T17:29:05Z", "url": "https://github.com/apache/beam/pull/11182", "merged": true, "mergeCommit": {"oid": "0595f79f653350801bfd940bcb5fb144fe7d469c"}, "closed": true, "closedAt": "2020-04-14T07:16:14Z", "author": {"login": "Ardagan"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQf8FEgH2gAyMzkxNjU1MzIwOjczNDE5Njc0NzA3NmNiY2VlNzI4MGEzMzI3NTkyYTQ2ZDVmMTRiNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXkv0MgFqTM5Mjk5ODM1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "734196747076cbcee7280a3327592a46d5f14b43", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/734196747076cbcee7280a3327592a46d5f14b43", "committedDate": "2020-03-23T15:21:33Z", "message": "Add Heartbeat Transform"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be0987718eeb26883844d78295e16bf7009a478f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/be0987718eeb26883844d78295e16bf7009a478f", "committedDate": "2020-03-20T17:44:53Z", "message": "Remove known-failing test"}, "afterCommit": {"oid": "734196747076cbcee7280a3327592a46d5f14b43", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/734196747076cbcee7280a3327592a46d5f14b43", "committedDate": "2020-03-23T15:21:33Z", "message": "Add Heartbeat Transform"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5bb0fe8baf8ae39157a509009dd287cad8caa3a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f5bb0fe8baf8ae39157a509009dd287cad8caa3a", "committedDate": "2020-03-27T05:17:30Z", "message": "Linting"}, "afterCommit": {"oid": "1f911e97570b50c7d56452581be23d3314750f7a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1f911e97570b50c7d56452581be23d3314750f7a", "committedDate": "2020-03-27T05:25:46Z", "message": "Linter fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cacb54c89d7be23892195493f7dad33a90b06fe9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/cacb54c89d7be23892195493f7dad33a90b06fe9", "committedDate": "2020-03-27T06:42:52Z", "message": "Cleanup website page"}, "afterCommit": {"oid": "26727e36ad98be8021dd5530d88b2dfb0bf14c41", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/26727e36ad98be8021dd5530d88b2dfb0bf14c41", "committedDate": "2020-03-27T07:27:42Z", "message": "Add example and documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d7e7c20ee1ec362967c93d2a1d28d2dc23d7b5d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5d7e7c20ee1ec362967c93d2a1d28d2dc23d7b5d", "committedDate": "2020-03-27T10:04:04Z", "message": "Add example and documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24c0b56353af3249331232bd83dffaa95964ad6e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/24c0b56353af3249331232bd83dffaa95964ad6e", "committedDate": "2020-03-27T09:39:56Z", "message": "Fix test failures"}, "afterCommit": {"oid": "5d7e7c20ee1ec362967c93d2a1d28d2dc23d7b5d", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5d7e7c20ee1ec362967c93d2a1d28d2dc23d7b5d", "committedDate": "2020-03-27T10:04:04Z", "message": "Add example and documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e639c9dab6021732d6b49d57f187f5a8bd25e5f7", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/e639c9dab6021732d6b49d57f187f5a8bd25e5f7", "committedDate": "2020-03-27T10:55:48Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f66a04388dd93879188230093067f1e06885cbf", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0f66a04388dd93879188230093067f1e06885cbf", "committedDate": "2020-03-27T20:07:37Z", "message": "Patch pydocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e8db367b1142abf1e6934c155e3032f69e1a23c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/3e8db367b1142abf1e6934c155e3032f69e1a23c", "committedDate": "2020-03-27T20:45:52Z", "message": "remove unrelated test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6f198ec8354a58f335874f959759109d4019872", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/e6f198ec8354a58f335874f959759109d4019872", "committedDate": "2020-03-27T22:53:23Z", "message": "Rename heartbeat to periodicsequence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ff12c42b43738d5d054a87a8f8d6e63b2101d304", "committedDate": "2020-03-31T23:37:37Z", "message": "linter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODg0MzMx", "url": "https://github.com/apache/beam/pull/11182#pullrequestreview-385884331", "createdAt": "2020-04-01T19:27:42Z", "commit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToyNzo0MlrOF_PXHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDo1MFrOF_RJGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1NjI4Ng==", "bodyText": "Can you add comments in this method?", "url": "https://github.com/apache/beam/pull/11182#discussion_r401856286", "createdAt": "2020-04-01T19:27:42Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence.py", "diffHunk": "@@ -0,0 +1,160 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import time\n+\n+import apache_beam as beam\n+import apache_beam.runners.sdf_utils as sdf_utils\n+from apache_beam.io.restriction_trackers import OffsetRange\n+from apache_beam.io.restriction_trackers import OffsetRestrictionTracker\n+from apache_beam.transforms import core\n+from apache_beam.transforms import window\n+from apache_beam.transforms.ptransform import PTransform\n+from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.utils import timestamp\n+from apache_beam.utils.timestamp import MAX_TIMESTAMP\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+class ImpulseSeqGenRestrictionProvider(core.RestrictionProvider):\n+  def initial_restriction(self, element):\n+    start, end, interval = element\n+    return OffsetRange(start - interval, end)\n+\n+  def create_tracker(self, restriction):\n+    return ImpulseSeqGenRestrictionTracker(restriction)\n+\n+  def restriction_size(self, unused_element, restriction):\n+    return restriction.size()\n+\n+\n+class ImpulseSeqGenRestrictionTracker(OffsetRestrictionTracker):\n+  def try_split(self, fraction_of_remainder):\n+    if not self._checkpointed:\n+      if fraction_of_remainder != 0:\n+        return None\n+\n+      if self._current_position is None:\n+        cur = self._range.start\n+      else:\n+        cur = self._current_position\n+      split_point = cur\n+\n+      if split_point < self._range.stop:\n+        self._checkpointed = True\n+        self._range, residual_range = self._range.split_at(split_point)\n+        return self._range, residual_range\n+\n+  def cur_pos(self):\n+    return self._current_position\n+\n+  def try_claim(self, pos):\n+    if ((self._last_claim_attempt is None) or\n+        (pos > self._last_claim_attempt and pos == self._range.stop)):\n+      self._last_claim_attempt = pos\n+      return True\n+    else:\n+      return super(ImpulseSeqGenRestrictionTracker, self).try_claim(pos)\n+\n+\n+class ImpulseSeqGenDoFn(beam.DoFn):\n+  def process(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NjA5NQ==", "bodyText": "nit: would this be something like last_fired_element, and current_timestamp = time.time()?", "url": "https://github.com/apache/beam/pull/11182#discussion_r401866095", "createdAt": "2020-04-01T19:45:19Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence.py", "diffHunk": "@@ -0,0 +1,160 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import time\n+\n+import apache_beam as beam\n+import apache_beam.runners.sdf_utils as sdf_utils\n+from apache_beam.io.restriction_trackers import OffsetRange\n+from apache_beam.io.restriction_trackers import OffsetRestrictionTracker\n+from apache_beam.transforms import core\n+from apache_beam.transforms import window\n+from apache_beam.transforms.ptransform import PTransform\n+from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.utils import timestamp\n+from apache_beam.utils.timestamp import MAX_TIMESTAMP\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+class ImpulseSeqGenRestrictionProvider(core.RestrictionProvider):\n+  def initial_restriction(self, element):\n+    start, end, interval = element\n+    return OffsetRange(start - interval, end)\n+\n+  def create_tracker(self, restriction):\n+    return ImpulseSeqGenRestrictionTracker(restriction)\n+\n+  def restriction_size(self, unused_element, restriction):\n+    return restriction.size()\n+\n+\n+class ImpulseSeqGenRestrictionTracker(OffsetRestrictionTracker):\n+  def try_split(self, fraction_of_remainder):\n+    if not self._checkpointed:\n+      if fraction_of_remainder != 0:\n+        return None\n+\n+      if self._current_position is None:\n+        cur = self._range.start\n+      else:\n+        cur = self._current_position\n+      split_point = cur\n+\n+      if split_point < self._range.stop:\n+        self._checkpointed = True\n+        self._range, residual_range = self._range.split_at(split_point)\n+        return self._range, residual_range\n+\n+  def cur_pos(self):\n+    return self._current_position\n+\n+  def try_claim(self, pos):\n+    if ((self._last_claim_attempt is None) or\n+        (pos > self._last_claim_attempt and pos == self._range.stop)):\n+      self._last_claim_attempt = pos\n+      return True\n+    else:\n+      return super(ImpulseSeqGenRestrictionTracker, self).try_claim(pos)\n+\n+\n+class ImpulseSeqGenDoFn(beam.DoFn):\n+  def process(\n+      self,\n+      element,\n+      restriction_tracker=beam.DoFn.RestrictionParam(\n+          ImpulseSeqGenRestrictionProvider())):\n+\n+    _, _, interval = element\n+\n+    assert isinstance(restriction_tracker, sdf_utils.RestrictionTrackerView)\n+\n+    t = time.time()\n+    cr = restriction_tracker.current_restriction()\n+    current_timestamp = cr.start", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3Nzg5MA==", "bodyText": "I feel silly but how long does this test take to run? 3 seconds? Fractions of a second?", "url": "https://github.com/apache/beam/pull/11182#discussion_r401877890", "createdAt": "2020-04-01T20:06:48Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence_test.py", "diffHunk": "@@ -0,0 +1,100 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Unit tests for the PTransform and descendants.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import os\n+import tempfile\n+import time\n+import unittest\n+from builtins import range\n+\n+import apache_beam as beam\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+from apache_beam.transforms.periodicsequence import PeriodicSequence\n+from apache_beam.transforms.periodicsequence import PeriodicImpulse\n+\n+# Disable frequent lint warning due to pipe operator for chaining transforms.\n+# pylint: disable=expression-not-assigned\n+\n+\n+class PeriodicSequenceTest(unittest.TestCase):\n+  # Enable nose tests running in parallel\n+\n+  def test_heartbeat_outputs_valid_sequence(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3ODQ4NA==", "bodyText": "Correct naming of the transform", "url": "https://github.com/apache/beam/pull/11182#discussion_r401878484", "createdAt": "2020-04-01T20:07:56Z", "author": {"login": "pabloem"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.\n+Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n+This way, you can guarantee side input consistency on the duration of the single window.\n+\n+To do this, you can utilize Heartbeat PTransform that will generate infinite sequence of elements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTQ2Ng==", "bodyText": "If you defined your initial restriction as OffsetRange(start, end), could you avoid this extra call to try_claim?\nYou would just do if restriction_tracker.try_claim(current_timestamp): yield current_timestamp, and defer the remainder to current_timestamp+interval.\nI may be missing something - the logic is a little convoluted. LMK if I'm going off the wrong path.", "url": "https://github.com/apache/beam/pull/11182#discussion_r401885466", "createdAt": "2020-04-01T20:20:50Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence.py", "diffHunk": "@@ -0,0 +1,160 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import time\n+\n+import apache_beam as beam\n+import apache_beam.runners.sdf_utils as sdf_utils\n+from apache_beam.io.restriction_trackers import OffsetRange\n+from apache_beam.io.restriction_trackers import OffsetRestrictionTracker\n+from apache_beam.transforms import core\n+from apache_beam.transforms import window\n+from apache_beam.transforms.ptransform import PTransform\n+from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.utils import timestamp\n+from apache_beam.utils.timestamp import MAX_TIMESTAMP\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+class ImpulseSeqGenRestrictionProvider(core.RestrictionProvider):\n+  def initial_restriction(self, element):\n+    start, end, interval = element\n+    return OffsetRange(start - interval, end)\n+\n+  def create_tracker(self, restriction):\n+    return ImpulseSeqGenRestrictionTracker(restriction)\n+\n+  def restriction_size(self, unused_element, restriction):\n+    return restriction.size()\n+\n+\n+class ImpulseSeqGenRestrictionTracker(OffsetRestrictionTracker):\n+  def try_split(self, fraction_of_remainder):\n+    if not self._checkpointed:\n+      if fraction_of_remainder != 0:\n+        return None\n+\n+      if self._current_position is None:\n+        cur = self._range.start\n+      else:\n+        cur = self._current_position\n+      split_point = cur\n+\n+      if split_point < self._range.stop:\n+        self._checkpointed = True\n+        self._range, residual_range = self._range.split_at(split_point)\n+        return self._range, residual_range\n+\n+  def cur_pos(self):\n+    return self._current_position\n+\n+  def try_claim(self, pos):\n+    if ((self._last_claim_attempt is None) or\n+        (pos > self._last_claim_attempt and pos == self._range.stop)):\n+      self._last_claim_attempt = pos\n+      return True\n+    else:\n+      return super(ImpulseSeqGenRestrictionTracker, self).try_claim(pos)\n+\n+\n+class ImpulseSeqGenDoFn(beam.DoFn):\n+  def process(\n+      self,\n+      element,\n+      restriction_tracker=beam.DoFn.RestrictionParam(\n+          ImpulseSeqGenRestrictionProvider())):\n+\n+    _, _, interval = element\n+\n+    assert isinstance(restriction_tracker, sdf_utils.RestrictionTrackerView)\n+\n+    t = time.time()\n+    cr = restriction_tracker.current_restriction()\n+    current_timestamp = cr.start\n+\n+    restriction_tracker.try_claim(current_timestamp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734a30345f9641f9b1ff94cd5626732fdfc2e774", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/734a30345f9641f9b1ff94cd5626732fdfc2e774", "committedDate": "2020-04-06T23:54:23Z", "message": "Patch tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfed0b8024bfec52bb3a49d765bc35736b4df4cc", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/dfed0b8024bfec52bb3a49d765bc35736b4df4cc", "committedDate": "2020-04-06T15:25:18Z", "message": "Lint"}, "afterCommit": {"oid": "734a30345f9641f9b1ff94cd5626732fdfc2e774", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/734a30345f9641f9b1ff94cd5626732fdfc2e774", "committedDate": "2020-04-06T23:54:23Z", "message": "Patch tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78daff48ac4049879dbd81ec654119291ef07f13", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/78daff48ac4049879dbd81ec654119291ef07f13", "committedDate": "2020-04-07T16:17:49Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDYxNTIw", "url": "https://github.com/apache/beam/pull/11182#pullrequestreview-389461520", "createdAt": "2020-04-07T20:22:48Z", "commit": {"oid": "78daff48ac4049879dbd81ec654119291ef07f13"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyMjo0OVrOGCUpLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoyNjo0NVrOGCUx6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4ODU1OQ==", "bodyText": "Renaming to pcoll, as the input is an actual Pcollection, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def expand(self, pbegin):\n          \n          \n            \n                return (\n          \n          \n            \n                    pbegin\n          \n          \n            \n              def expand(self, pcoll):\n          \n          \n            \n                return (\n          \n          \n            \n                    pcoll", "url": "https://github.com/apache/beam/pull/11182#discussion_r405088559", "createdAt": "2020-04-07T20:22:49Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence.py", "diffHunk": "@@ -0,0 +1,165 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import time\n+\n+import apache_beam as beam\n+import apache_beam.runners.sdf_utils as sdf_utils\n+from apache_beam.io.restriction_trackers import OffsetRange\n+from apache_beam.io.restriction_trackers import OffsetRestrictionTracker\n+from apache_beam.transforms import core\n+from apache_beam.transforms import window\n+from apache_beam.transforms.ptransform import PTransform\n+from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.utils import timestamp\n+from apache_beam.utils.timestamp import MAX_TIMESTAMP\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+class ImpulseSeqGenRestrictionProvider(core.RestrictionProvider):\n+  def initial_restriction(self, element):\n+    start, end, interval = element\n+    return OffsetRange(start - interval, end)\n+\n+  def create_tracker(self, restriction):\n+    return ImpulseSeqGenRestrictionTracker(restriction)\n+\n+  def restriction_size(self, unused_element, restriction):\n+    return restriction.size()\n+\n+\n+class ImpulseSeqGenRestrictionTracker(OffsetRestrictionTracker):\n+  def try_split(self, fraction_of_remainder):\n+    if not self._checkpointed:\n+      if fraction_of_remainder != 0:\n+        return None\n+\n+      if self._current_position is None:\n+        cur = self._range.start\n+      else:\n+        cur = self._current_position\n+      split_point = cur\n+\n+      if split_point < self._range.stop:\n+        self._checkpointed = True\n+        self._range, residual_range = self._range.split_at(split_point)\n+        return self._range, residual_range\n+\n+  def cur_pos(self):\n+    return self._current_position\n+\n+  def try_claim(self, pos):\n+    if ((self._last_claim_attempt is None) or\n+        (pos > self._last_claim_attempt and pos == self._range.stop)):\n+      self._last_claim_attempt = pos\n+      return True\n+    else:\n+      return super(ImpulseSeqGenRestrictionTracker, self).try_claim(pos)\n+\n+\n+class ImpulseSeqGenDoFn(beam.DoFn):\n+  def process(\n+      self,\n+      element,\n+      restriction_tracker=beam.DoFn.RestrictionParam(\n+          ImpulseSeqGenRestrictionProvider())):\n+    '''\n+    PeriodicSequence transform receives tuple elements with three parts:\n+\n+    * first_timestamp = first timestamp to output element for.\n+    * last_timestamp = last timestamp/time to output element for.\n+    * fire_interval = how often to fire an element.\n+\n+    For each input element received, PeriodicSequence transform will start\n+    generating output elements in following pattern:\n+\n+    * if element timestamp is less than current runtime then output element.\n+    * if element timestamp is greater than current runtime, wait until next\n+      element timestamp.\n+\n+    PeriodicSequence can't guarantee that each element is output at exact time.\n+    PeriodicSequence guarantees that elements would not be output prior to given\n+    runtime timestamp.\n+\n+    :param element: (start_timestamp, end_timestamp, interval)\n+    :param restriction_tracker:\n+    :return: yields elements at processing real-time intervals with value of\n+      target output timestamp for the element.\n+    '''\n+    _, _, interval = element\n+\n+    assert isinstance(restriction_tracker, sdf_utils.RestrictionTrackerView)\n+\n+    t = time.time()\n+    cr = restriction_tracker.current_restriction()\n+    current_timestamp = cr.start\n+\n+    restriction_tracker.try_claim(current_timestamp)\n+    if current_timestamp <= t:\n+      if restriction_tracker.try_claim(current_timestamp + interval):\n+        current_timestamp += interval\n+        yield current_timestamp\n+\n+    if current_timestamp + interval >= cr.stop:\n+      restriction_tracker.try_claim(cr.stop)\n+    else:\n+      restriction_tracker.defer_remainder(\n+          timestamp.Timestamp(current_timestamp))\n+\n+\n+class PeriodicSequence(PTransform):\n+  \"\"\"\n+  See ImpulseSeqGenDoFn.\n+  \"\"\"\n+  def __init_(self):\n+    pass\n+\n+  def expand(self, pbegin):\n+    return (\n+        pbegin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78daff48ac4049879dbd81ec654119291ef07f13"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTMzOQ==", "bodyText": "Sorry about the back and forth. I think the top-level PTransform (which users will rely on) - should have Pydocs, instead of referencing the DoFn.", "url": "https://github.com/apache/beam/pull/11182#discussion_r405089339", "createdAt": "2020-04-07T20:24:12Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence.py", "diffHunk": "@@ -0,0 +1,165 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import time\n+\n+import apache_beam as beam\n+import apache_beam.runners.sdf_utils as sdf_utils\n+from apache_beam.io.restriction_trackers import OffsetRange\n+from apache_beam.io.restriction_trackers import OffsetRestrictionTracker\n+from apache_beam.transforms import core\n+from apache_beam.transforms import window\n+from apache_beam.transforms.ptransform import PTransform\n+from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.utils import timestamp\n+from apache_beam.utils.timestamp import MAX_TIMESTAMP\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+class ImpulseSeqGenRestrictionProvider(core.RestrictionProvider):\n+  def initial_restriction(self, element):\n+    start, end, interval = element\n+    return OffsetRange(start - interval, end)\n+\n+  def create_tracker(self, restriction):\n+    return ImpulseSeqGenRestrictionTracker(restriction)\n+\n+  def restriction_size(self, unused_element, restriction):\n+    return restriction.size()\n+\n+\n+class ImpulseSeqGenRestrictionTracker(OffsetRestrictionTracker):\n+  def try_split(self, fraction_of_remainder):\n+    if not self._checkpointed:\n+      if fraction_of_remainder != 0:\n+        return None\n+\n+      if self._current_position is None:\n+        cur = self._range.start\n+      else:\n+        cur = self._current_position\n+      split_point = cur\n+\n+      if split_point < self._range.stop:\n+        self._checkpointed = True\n+        self._range, residual_range = self._range.split_at(split_point)\n+        return self._range, residual_range\n+\n+  def cur_pos(self):\n+    return self._current_position\n+\n+  def try_claim(self, pos):\n+    if ((self._last_claim_attempt is None) or\n+        (pos > self._last_claim_attempt and pos == self._range.stop)):\n+      self._last_claim_attempt = pos\n+      return True\n+    else:\n+      return super(ImpulseSeqGenRestrictionTracker, self).try_claim(pos)\n+\n+\n+class ImpulseSeqGenDoFn(beam.DoFn):\n+  def process(\n+      self,\n+      element,\n+      restriction_tracker=beam.DoFn.RestrictionParam(\n+          ImpulseSeqGenRestrictionProvider())):\n+    '''\n+    PeriodicSequence transform receives tuple elements with three parts:\n+\n+    * first_timestamp = first timestamp to output element for.\n+    * last_timestamp = last timestamp/time to output element for.\n+    * fire_interval = how often to fire an element.\n+\n+    For each input element received, PeriodicSequence transform will start\n+    generating output elements in following pattern:\n+\n+    * if element timestamp is less than current runtime then output element.\n+    * if element timestamp is greater than current runtime, wait until next\n+      element timestamp.\n+\n+    PeriodicSequence can't guarantee that each element is output at exact time.\n+    PeriodicSequence guarantees that elements would not be output prior to given\n+    runtime timestamp.\n+\n+    :param element: (start_timestamp, end_timestamp, interval)\n+    :param restriction_tracker:\n+    :return: yields elements at processing real-time intervals with value of\n+      target output timestamp for the element.\n+    '''\n+    _, _, interval = element\n+\n+    assert isinstance(restriction_tracker, sdf_utils.RestrictionTrackerView)\n+\n+    t = time.time()\n+    cr = restriction_tracker.current_restriction()\n+    current_timestamp = cr.start\n+\n+    restriction_tracker.try_claim(current_timestamp)\n+    if current_timestamp <= t:\n+      if restriction_tracker.try_claim(current_timestamp + interval):\n+        current_timestamp += interval\n+        yield current_timestamp\n+\n+    if current_timestamp + interval >= cr.stop:\n+      restriction_tracker.try_claim(cr.stop)\n+    else:\n+      restriction_tracker.defer_remainder(\n+          timestamp.Timestamp(current_timestamp))\n+\n+\n+class PeriodicSequence(PTransform):\n+  \"\"\"\n+  See ImpulseSeqGenDoFn.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78daff48ac4049879dbd81ec654119291ef07f13"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTM5Mg==", "bodyText": "Sorry about the back and forth. I think the top-level PTransform (which users will rely on) - should have Pydocs, instead of referencing the DoFn.", "url": "https://github.com/apache/beam/pull/11182#discussion_r405089392", "createdAt": "2020-04-07T20:24:18Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence.py", "diffHunk": "@@ -0,0 +1,165 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import time\n+\n+import apache_beam as beam\n+import apache_beam.runners.sdf_utils as sdf_utils\n+from apache_beam.io.restriction_trackers import OffsetRange\n+from apache_beam.io.restriction_trackers import OffsetRestrictionTracker\n+from apache_beam.transforms import core\n+from apache_beam.transforms import window\n+from apache_beam.transforms.ptransform import PTransform\n+from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.utils import timestamp\n+from apache_beam.utils.timestamp import MAX_TIMESTAMP\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+class ImpulseSeqGenRestrictionProvider(core.RestrictionProvider):\n+  def initial_restriction(self, element):\n+    start, end, interval = element\n+    return OffsetRange(start - interval, end)\n+\n+  def create_tracker(self, restriction):\n+    return ImpulseSeqGenRestrictionTracker(restriction)\n+\n+  def restriction_size(self, unused_element, restriction):\n+    return restriction.size()\n+\n+\n+class ImpulseSeqGenRestrictionTracker(OffsetRestrictionTracker):\n+  def try_split(self, fraction_of_remainder):\n+    if not self._checkpointed:\n+      if fraction_of_remainder != 0:\n+        return None\n+\n+      if self._current_position is None:\n+        cur = self._range.start\n+      else:\n+        cur = self._current_position\n+      split_point = cur\n+\n+      if split_point < self._range.stop:\n+        self._checkpointed = True\n+        self._range, residual_range = self._range.split_at(split_point)\n+        return self._range, residual_range\n+\n+  def cur_pos(self):\n+    return self._current_position\n+\n+  def try_claim(self, pos):\n+    if ((self._last_claim_attempt is None) or\n+        (pos > self._last_claim_attempt and pos == self._range.stop)):\n+      self._last_claim_attempt = pos\n+      return True\n+    else:\n+      return super(ImpulseSeqGenRestrictionTracker, self).try_claim(pos)\n+\n+\n+class ImpulseSeqGenDoFn(beam.DoFn):\n+  def process(\n+      self,\n+      element,\n+      restriction_tracker=beam.DoFn.RestrictionParam(\n+          ImpulseSeqGenRestrictionProvider())):\n+    '''\n+    PeriodicSequence transform receives tuple elements with three parts:\n+\n+    * first_timestamp = first timestamp to output element for.\n+    * last_timestamp = last timestamp/time to output element for.\n+    * fire_interval = how often to fire an element.\n+\n+    For each input element received, PeriodicSequence transform will start\n+    generating output elements in following pattern:\n+\n+    * if element timestamp is less than current runtime then output element.\n+    * if element timestamp is greater than current runtime, wait until next\n+      element timestamp.\n+\n+    PeriodicSequence can't guarantee that each element is output at exact time.\n+    PeriodicSequence guarantees that elements would not be output prior to given\n+    runtime timestamp.\n+\n+    :param element: (start_timestamp, end_timestamp, interval)\n+    :param restriction_tracker:\n+    :return: yields elements at processing real-time intervals with value of\n+      target output timestamp for the element.\n+    '''\n+    _, _, interval = element\n+\n+    assert isinstance(restriction_tracker, sdf_utils.RestrictionTrackerView)\n+\n+    t = time.time()\n+    cr = restriction_tracker.current_restriction()\n+    current_timestamp = cr.start\n+\n+    restriction_tracker.try_claim(current_timestamp)\n+    if current_timestamp <= t:\n+      if restriction_tracker.try_claim(current_timestamp + interval):\n+        current_timestamp += interval\n+        yield current_timestamp\n+\n+    if current_timestamp + interval >= cr.stop:\n+      restriction_tracker.try_claim(cr.stop)\n+    else:\n+      restriction_tracker.defer_remainder(\n+          timestamp.Timestamp(current_timestamp))\n+\n+\n+class PeriodicSequence(PTransform):\n+  \"\"\"\n+  See ImpulseSeqGenDoFn.\n+  \"\"\"\n+  def __init_(self):\n+    pass\n+\n+  def expand(self, pbegin):\n+    return (\n+        pbegin\n+        | 'GenSequence' >> beam.ParDo(ImpulseSeqGenDoFn())\n+        | 'MapToTimestamped' >> beam.Map(lambda tt: TimestampedValue(tt, tt)))\n+\n+\n+class PeriodicImpulse(PTransform):\n+  \"\"\"\n+  See ImpulseSeqGenDoFn.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78daff48ac4049879dbd81ec654119291ef07f13"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5MDE4Mg==", "bodyText": "Let's make the tests in this file run as fast as possible while still validating the transform", "url": "https://github.com/apache/beam/pull/11182#discussion_r405090182", "createdAt": "2020-04-07T20:25:38Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence_test.py", "diffHunk": "@@ -0,0 +1,98 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Unit tests for the PTransform and descendants.\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78daff48ac4049879dbd81ec654119291ef07f13"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5MDY5NQ==", "bodyText": "I feel that it may be best to get a tech writer review for this. @rosetn @soyrice can one of you validate this doc section?", "url": "https://github.com/apache/beam/pull/11182#discussion_r405090695", "createdAt": "2020-04-07T20:26:34Z", "author": {"login": "pabloem"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.\n+Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n+This way, you can guarantee side input consistency on the duration of the single window.\n+\n+To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n+of elements with some real-time period:\n+\n+1. Use the PeriodicImpulse transform to genearate windowed periodic sequence.\n+\n+    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n+\n+1. Read data using Read operation triggered by arrival of PCollection element.\n+\n+1. Apply side input.\n+\n+```python\n+{% github_sample /apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets.py tag:SideInputSlowUpdateSnip1\n+%}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78daff48ac4049879dbd81ec654119291ef07f13"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5MDc5NA==", "bodyText": "fair enough!", "url": "https://github.com/apache/beam/pull/11182#discussion_r405090794", "createdAt": "2020-04-07T20:26:45Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/periodicsequence.py", "diffHunk": "@@ -0,0 +1,160 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import time\n+\n+import apache_beam as beam\n+import apache_beam.runners.sdf_utils as sdf_utils\n+from apache_beam.io.restriction_trackers import OffsetRange\n+from apache_beam.io.restriction_trackers import OffsetRestrictionTracker\n+from apache_beam.transforms import core\n+from apache_beam.transforms import window\n+from apache_beam.transforms.ptransform import PTransform\n+from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.utils import timestamp\n+from apache_beam.utils.timestamp import MAX_TIMESTAMP\n+from apache_beam.utils.timestamp import Timestamp\n+\n+\n+class ImpulseSeqGenRestrictionProvider(core.RestrictionProvider):\n+  def initial_restriction(self, element):\n+    start, end, interval = element\n+    return OffsetRange(start - interval, end)\n+\n+  def create_tracker(self, restriction):\n+    return ImpulseSeqGenRestrictionTracker(restriction)\n+\n+  def restriction_size(self, unused_element, restriction):\n+    return restriction.size()\n+\n+\n+class ImpulseSeqGenRestrictionTracker(OffsetRestrictionTracker):\n+  def try_split(self, fraction_of_remainder):\n+    if not self._checkpointed:\n+      if fraction_of_remainder != 0:\n+        return None\n+\n+      if self._current_position is None:\n+        cur = self._range.start\n+      else:\n+        cur = self._current_position\n+      split_point = cur\n+\n+      if split_point < self._range.stop:\n+        self._checkpointed = True\n+        self._range, residual_range = self._range.split_at(split_point)\n+        return self._range, residual_range\n+\n+  def cur_pos(self):\n+    return self._current_position\n+\n+  def try_claim(self, pos):\n+    if ((self._last_claim_attempt is None) or\n+        (pos > self._last_claim_attempt and pos == self._range.stop)):\n+      self._last_claim_attempt = pos\n+      return True\n+    else:\n+      return super(ImpulseSeqGenRestrictionTracker, self).try_claim(pos)\n+\n+\n+class ImpulseSeqGenDoFn(beam.DoFn):\n+  def process(\n+      self,\n+      element,\n+      restriction_tracker=beam.DoFn.RestrictionParam(\n+          ImpulseSeqGenRestrictionProvider())):\n+\n+    _, _, interval = element\n+\n+    assert isinstance(restriction_tracker, sdf_utils.RestrictionTrackerView)\n+\n+    t = time.time()\n+    cr = restriction_tracker.current_restriction()\n+    current_timestamp = cr.start\n+\n+    restriction_tracker.try_claim(current_timestamp)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTQ2Ng=="}, "originalCommit": {"oid": "ff12c42b43738d5d054a87a8f8d6e63b2101d304"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91fa6883ca0a99a86c327dfac869b0ba682f7be1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/91fa6883ca0a99a86c327dfac869b0ba682f7be1", "committedDate": "2020-04-08T18:46:50Z", "message": "Address more comments"}, "afterCommit": {"oid": "23aaaab2d6cc7b00df725fae264b163f13f0bdf3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/23aaaab2d6cc7b00df725fae264b163f13f0bdf3", "committedDate": "2020-04-08T19:12:26Z", "message": "Address more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce9a9b4886eb4bef969421c7762d144dee3b6add", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ce9a9b4886eb4bef969421c7762d144dee3b6add", "committedDate": "2020-04-08T19:28:11Z", "message": "Address more comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23aaaab2d6cc7b00df725fae264b163f13f0bdf3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/23aaaab2d6cc7b00df725fae264b163f13f0bdf3", "committedDate": "2020-04-08T19:12:26Z", "message": "Address more comments"}, "afterCommit": {"oid": "ce9a9b4886eb4bef969421c7762d144dee3b6add", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ce9a9b4886eb4bef969421c7762d144dee3b6add", "committedDate": "2020-04-08T19:28:11Z", "message": "Address more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c609679fa042bb6e3ab98df910b634574545fd", "author": {"user": {"login": "Ardagan", "name": "Mikhail Gryzykhin"}}, "url": "https://github.com/apache/beam/commit/21c609679fa042bb6e3ab98df910b634574545fd", "committedDate": "2020-04-14T02:08:39Z", "message": "Merge branch 'master' into SCDPy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/2817862dd36d7dc6a62216fce758046d4b603aac", "committedDate": "2020-04-14T03:12:58Z", "message": "lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTk4MzU1", "url": "https://github.com/apache/beam/pull/11182#pullrequestreview-392998355", "createdAt": "2020-04-14T14:43:49Z", "commit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0Mzo0OVrOGFSHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1MDo1MFrOGFSeJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5Mjg5MQ==", "bodyText": "I think this should either be \"You can read... from distinct windows\" or \"You can write... to distinct windows.\" I'm not sure what it means to \"read... into distinct windows\"", "url": "https://github.com/apache/beam/pull/11182#discussion_r408192891", "createdAt": "2020-04-14T14:43:49Z", "author": {"login": "soyrice"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MzEzMA==", "bodyText": "\"PCollection\" (capital P and C)", "url": "https://github.com/apache/beam/pull/11182#discussion_r408193130", "createdAt": "2020-04-14T14:44:08Z", "author": {"login": "soyrice"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NTkzNA==", "bodyText": "Missing \"the\" -> \"when you apply the side input to your main input\"\nPresent tense -> \"windows are automatically matched\"\nIt might be less ambiguously to say \"each side input window is matched to a main input window\" (or something like that), instead of \"windows will be matched automatically 1:1.\" I'm not sure it's clear what it means to be \"matched automatically 1:1.\"", "url": "https://github.com/apache/beam/pull/11182#discussion_r408195934", "createdAt": "2020-04-14T14:47:31Z", "author": {"login": "soyrice"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.\n+Later, when you apply side input to your main input, windows will be matched automatically 1:1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NjYzMg==", "bodyText": "This might need additional context. What does the term \"side input consistency\" mean?", "url": "https://github.com/apache/beam/pull/11182#discussion_r408196632", "createdAt": "2020-04-14T14:48:24Z", "author": {"login": "soyrice"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.\n+Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n+This way, you can guarantee side input consistency on the duration of the single window.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODI2MQ==", "bodyText": "It's probably best to replace \"To do this\" with \"To do ABC\" - it'll help the reader figure out what \"this\" refers to. Otherwise, if the reader is just skimming the page and starts at this paragraph, they have to read the previous paragraph to figure out what the pronoun refers to.", "url": "https://github.com/apache/beam/pull/11182#discussion_r408198261", "createdAt": "2020-04-14T14:50:15Z", "author": {"login": "soyrice"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.\n+Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n+This way, you can guarantee side input consistency on the duration of the single window.\n+\n+To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODY5NA==", "bodyText": "MAX_TIMESTAMP is a parameter, right? If so, let's put it in code font. I think \"PeriodicImpulse\" in the list item above and \"Read\" (from \"Read operation) in the list item below should also be in code font. Putting \"Read\" in code font will help distinguish it from the word \"read,\" which is also in the sentence.\nWe can also simplify this sentence a bit: \"To stop generating elements, replace MAX_TIMESTAMP with some closer boundary\" or \"You can replace MAX_TIMESTAMP with...\" or something like that", "url": "https://github.com/apache/beam/pull/11182#discussion_r408198694", "createdAt": "2020-04-14T14:50:50Z", "author": {"login": "soyrice"}, "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -45,4 +45,30 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n ```java\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n-```\n\\ No newline at end of file\n+```\n+\n+\n+## Slowly updating side input using windowing\n+\n+You can read side input pcollection periodically into distinct windows.\n+Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n+This way, you can guarantee side input consistency on the duration of the single window.\n+\n+To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n+of elements with some real-time period:\n+\n+1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n+\n+    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2817862dd36d7dc6a62216fce758046d4b603aac"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2880, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}