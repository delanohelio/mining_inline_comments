{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NTg4MTU0", "number": 13505, "title": "[BEAM-11425] Metrics extraction via Monitoring API", "bodyText": "The previous contribution (#13272) implements metrics extraction, but that works only for the universal runner, not for Dataflow runner, which requires a special implementation.\nThis PR implements metrics extraction via Monitoring API, which will allow users to query metrics when using Dataflow.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-08T16:58:52Z", "url": "https://github.com/apache/beam/pull/13505", "merged": true, "mergeCommit": {"oid": "2356367571cd94f0af5ed5e276165d7526a81854"}, "closed": true, "closedAt": "2020-12-10T19:09:39Z", "author": {"login": "kamilwu"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkM2WWAH2gAyNTM0NTg4MTU0OjViZjJhM2E1MDkxMzE4NGYzMDZlOTliZTIyN2NlNjAzODc2ZmRhNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkdgX7gH2gAyNTM0NTg4MTU0OjU1YjM4NTg4ODZlY2E1NmE0ZWM0NTAzN2RjODMwNDdmMGUxMzg3NjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5bf2a3a50913184f306e99be227ce603876fda41", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/5bf2a3a50913184f306e99be227ce603876fda41", "committedDate": "2020-12-08T16:36:44Z", "message": "[BEAM-11425] Move some methods from metricsx to metrics package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c980c291fd5fa7cfe7e246e7f101757449b6ed5f", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/c980c291fd5fa7cfe7e246e7f101757449b6ed5f", "committedDate": "2020-12-08T16:37:34Z", "message": "[BEAM-11425] Metrics extraction via Monitoring API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3ODQzNTky", "url": "https://github.com/apache/beam/pull/13505#pullrequestreview-547843592", "createdAt": "2020-12-09T05:23:55Z", "commit": {"oid": "c980c291fd5fa7cfe7e246e7f101757449b6ed5f"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNToyMzo1NlrOICC1wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo0MTozOVrOICDROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAxNDU5Mg==", "bodyText": "Note that an exported field on an unexported struct is still nominally inaccessible. Consider unexporting it, and having a JobID() method instead.", "url": "https://github.com/apache/beam/pull/13505#discussion_r539014592", "createdAt": "2020-12-09T05:23:56Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/dataflow/dataflowlib/execute.go", "diffHunk": "@@ -122,3 +135,21 @@ func PrintJob(ctx context.Context, job *df.Job) {\n \t}\n \tlog.Info(ctx, string(str))\n }\n+\n+type dataflowPipelineResult struct {\n+\tJobID   string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c980c291fd5fa7cfe7e246e7f101757449b6ed5f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAxNzk0Mw==", "bodyText": "If the goal here is to only provide either the tentative values OR the commited values, and not both, wouldn't\nif isTentative != tentative {\n  continue\n}\n\nbe simpler?", "url": "https://github.com/apache/beam/pull/13505#discussion_r539017943", "createdAt": "2020-12-09T05:33:17Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/dataflow/dataflowlib/metrics.go", "diffHunk": "@@ -0,0 +1,125 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package dataflowlib translates a Beam pipeline model to the\n+// Dataflow API job model, for submission to Google Cloud Dataflow.\n+\n+package dataflowlib\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+\tdf \"google.golang.org/api/dataflow/v1b3\"\n+)\n+\n+// FromMetricUpdates extracts metrics from a slice of MetricUpdate objects and\n+// groups them into counters, distributions and gauges.\n+//\n+// Dataflow currently only reports Counter and Distribution metrics to Cloud\n+// Monitoring. Gauge metrics are not supported. The output metrics.Results will\n+// not contain any gauges.\n+func FromMetricUpdates(allMetrics []*df.MetricUpdate, job *df.Job) *metrics.Results {\n+\tac, ad := groupByType(allMetrics, job, true)\n+\tcc, cd := groupByType(allMetrics, job, false)\n+\n+\treturn metrics.NewResults(metrics.MergeCounters(ac, cc), metrics.MergeDistributions(ad, cd), make([]metrics.GaugeResult, 0))\n+}\n+\n+func groupByType(allMetrics []*df.MetricUpdate, job *df.Job, tentative bool) (\n+\tmap[metrics.StepKey]int64,\n+\tmap[metrics.StepKey]metrics.DistributionValue) {\n+\tcounters := make(map[metrics.StepKey]int64)\n+\tdistributions := make(map[metrics.StepKey]metrics.DistributionValue)\n+\n+\tfor _, metric := range allMetrics {\n+\t\tisTentative := metric.Name.Context[\"tentative\"] == \"true\"\n+\t\t// Returns true when variables differ (exclusive or)\n+\t\tif (isTentative || tentative) && (!isTentative || !tentative) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c980c291fd5fa7cfe7e246e7f101757449b6ed5f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyMDI2OA==", "bodyText": "I love this implementation. That is all.", "url": "https://github.com/apache/beam/pull/13505#discussion_r539020268", "createdAt": "2020-12-09T05:39:34Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/dataflow/dataflowlib/metrics.go", "diffHunk": "@@ -0,0 +1,125 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package dataflowlib translates a Beam pipeline model to the\n+// Dataflow API job model, for submission to Google Cloud Dataflow.\n+\n+package dataflowlib\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+\tdf \"google.golang.org/api/dataflow/v1b3\"\n+)\n+\n+// FromMetricUpdates extracts metrics from a slice of MetricUpdate objects and\n+// groups them into counters, distributions and gauges.\n+//\n+// Dataflow currently only reports Counter and Distribution metrics to Cloud\n+// Monitoring. Gauge metrics are not supported. The output metrics.Results will\n+// not contain any gauges.\n+func FromMetricUpdates(allMetrics []*df.MetricUpdate, job *df.Job) *metrics.Results {\n+\tac, ad := groupByType(allMetrics, job, true)\n+\tcc, cd := groupByType(allMetrics, job, false)\n+\n+\treturn metrics.NewResults(metrics.MergeCounters(ac, cc), metrics.MergeDistributions(ad, cd), make([]metrics.GaugeResult, 0))\n+}\n+\n+func groupByType(allMetrics []*df.MetricUpdate, job *df.Job, tentative bool) (\n+\tmap[metrics.StepKey]int64,\n+\tmap[metrics.StepKey]metrics.DistributionValue) {\n+\tcounters := make(map[metrics.StepKey]int64)\n+\tdistributions := make(map[metrics.StepKey]metrics.DistributionValue)\n+\n+\tfor _, metric := range allMetrics {\n+\t\tisTentative := metric.Name.Context[\"tentative\"] == \"true\"\n+\t\t// Returns true when variables differ (exclusive or)\n+\t\tif (isTentative || tentative) && (!isTentative || !tentative) {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tkey, err := extractKey(metric, job)\n+\t\tif err != nil {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif metric.Scalar != nil {\n+\t\t\tv, err := extractCounterValue(metric.Scalar)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tcounters[key] = v\n+\t\t} else if metric.Distribution != nil {\n+\t\t\tv, err := extractDistributionValue(metric.Distribution)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tdistributions[key] = v\n+\t\t}\n+\t}\n+\treturn counters, distributions\n+}\n+\n+func extractKey(metric *df.MetricUpdate, job *df.Job) (metrics.StepKey, error) {\n+\tstepName, ok := metric.Name.Context[\"step\"]\n+\tif !ok {\n+\t\treturn metrics.StepKey{}, fmt.Errorf(\"could not find the internal step name\")\n+\t}\n+\tuserStepName := \"\"\n+\n+\tfor _, step := range job.Steps {\n+\t\tif step.Name == stepName {\n+\t\t\tproperties := make(map[string]string)\n+\t\t\tjson.Unmarshal(step.Properties, &properties)\n+\t\t\tuserStepName = properties[\"user_name\"]\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tif userStepName == \"\" {\n+\t\treturn metrics.StepKey{}, fmt.Errorf(\"could not translate the internal step name %v\", stepName)\n+\t}\n+\n+\tnamespace := metric.Name.Context[\"namespace\"]\n+\tif namespace == \"\" {\n+\t\tnamespace = \"dataflow/v1b3\"\n+\t}\n+\n+\treturn metrics.StepKey{Step: userStepName, Name: metric.Name.Name, Namespace: namespace}, nil\n+}\n+\n+func extractCounterValue(obj interface{}) (int64, error) {\n+\tv, ok := obj.(float64)\n+\tif !ok {\n+\t\treturn -1, fmt.Errorf(\"expected float64, got data of type %T instead\", obj)\n+\t}\n+\treturn int64(v), nil\n+}\n+\n+func extractDistributionValue(obj interface{}) (metrics.DistributionValue, error) {\n+\tm := obj.(map[string]interface{})\n+\tpropertiesToVisit := []string{\"count\", \"sum\", \"min\", \"max\"}\n+\tvalues := make([]int64, 4)\n+\n+\tfor i, p := range propertiesToVisit {\n+\t\tv, ok := m[p].(float64)\n+\t\tif !ok {\n+\t\t\treturn metrics.DistributionValue{}, fmt.Errorf(\"expected float64, got data of type %T instead\", m[p])\n+\t\t}\n+\t\tvalues[i] = int64(v)\n+\t}\n+\treturn metrics.DistributionValue{Count: values[0], Sum: values[1], Min: values[2], Max: values[3]}, nil\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c980c291fd5fa7cfe7e246e7f101757449b6ed5f"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyMTYyNg==", "bodyText": "Since we know we have a fixed 4 properties anyway,  consider just using an array [4]int64 instead of a slice. It works the same.", "url": "https://github.com/apache/beam/pull/13505#discussion_r539021626", "createdAt": "2020-12-09T05:41:39Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/dataflow/dataflowlib/metrics.go", "diffHunk": "@@ -0,0 +1,125 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package dataflowlib translates a Beam pipeline model to the\n+// Dataflow API job model, for submission to Google Cloud Dataflow.\n+\n+package dataflowlib\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+\tdf \"google.golang.org/api/dataflow/v1b3\"\n+)\n+\n+// FromMetricUpdates extracts metrics from a slice of MetricUpdate objects and\n+// groups them into counters, distributions and gauges.\n+//\n+// Dataflow currently only reports Counter and Distribution metrics to Cloud\n+// Monitoring. Gauge metrics are not supported. The output metrics.Results will\n+// not contain any gauges.\n+func FromMetricUpdates(allMetrics []*df.MetricUpdate, job *df.Job) *metrics.Results {\n+\tac, ad := groupByType(allMetrics, job, true)\n+\tcc, cd := groupByType(allMetrics, job, false)\n+\n+\treturn metrics.NewResults(metrics.MergeCounters(ac, cc), metrics.MergeDistributions(ad, cd), make([]metrics.GaugeResult, 0))\n+}\n+\n+func groupByType(allMetrics []*df.MetricUpdate, job *df.Job, tentative bool) (\n+\tmap[metrics.StepKey]int64,\n+\tmap[metrics.StepKey]metrics.DistributionValue) {\n+\tcounters := make(map[metrics.StepKey]int64)\n+\tdistributions := make(map[metrics.StepKey]metrics.DistributionValue)\n+\n+\tfor _, metric := range allMetrics {\n+\t\tisTentative := metric.Name.Context[\"tentative\"] == \"true\"\n+\t\t// Returns true when variables differ (exclusive or)\n+\t\tif (isTentative || tentative) && (!isTentative || !tentative) {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tkey, err := extractKey(metric, job)\n+\t\tif err != nil {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif metric.Scalar != nil {\n+\t\t\tv, err := extractCounterValue(metric.Scalar)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tcounters[key] = v\n+\t\t} else if metric.Distribution != nil {\n+\t\t\tv, err := extractDistributionValue(metric.Distribution)\n+\t\t\tif err != nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tdistributions[key] = v\n+\t\t}\n+\t}\n+\treturn counters, distributions\n+}\n+\n+func extractKey(metric *df.MetricUpdate, job *df.Job) (metrics.StepKey, error) {\n+\tstepName, ok := metric.Name.Context[\"step\"]\n+\tif !ok {\n+\t\treturn metrics.StepKey{}, fmt.Errorf(\"could not find the internal step name\")\n+\t}\n+\tuserStepName := \"\"\n+\n+\tfor _, step := range job.Steps {\n+\t\tif step.Name == stepName {\n+\t\t\tproperties := make(map[string]string)\n+\t\t\tjson.Unmarshal(step.Properties, &properties)\n+\t\t\tuserStepName = properties[\"user_name\"]\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tif userStepName == \"\" {\n+\t\treturn metrics.StepKey{}, fmt.Errorf(\"could not translate the internal step name %v\", stepName)\n+\t}\n+\n+\tnamespace := metric.Name.Context[\"namespace\"]\n+\tif namespace == \"\" {\n+\t\tnamespace = \"dataflow/v1b3\"\n+\t}\n+\n+\treturn metrics.StepKey{Step: userStepName, Name: metric.Name.Name, Namespace: namespace}, nil\n+}\n+\n+func extractCounterValue(obj interface{}) (int64, error) {\n+\tv, ok := obj.(float64)\n+\tif !ok {\n+\t\treturn -1, fmt.Errorf(\"expected float64, got data of type %T instead\", obj)\n+\t}\n+\treturn int64(v), nil\n+}\n+\n+func extractDistributionValue(obj interface{}) (metrics.DistributionValue, error) {\n+\tm := obj.(map[string]interface{})\n+\tpropertiesToVisit := []string{\"count\", \"sum\", \"min\", \"max\"}\n+\tvalues := make([]int64, 4)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c980c291fd5fa7cfe7e246e7f101757449b6ed5f"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b3858886eca56a4ec45037dc83047f0e138762", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/55b3858886eca56a4ec45037dc83047f0e138762", "committedDate": "2020-12-09T12:01:07Z", "message": "fix: review changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4368, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}