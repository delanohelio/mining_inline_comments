{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjUxNzEy", "number": 10802, "title": "[BEAM-8537] Move wrappers of RestrictionTracker out of iobase", "bodyText": "Changes include:\n\nMove ThreadsafeRestrictionTracker and RestrictionTrackerView out of iobase.py.\nCreate SplitResultPrimary and SplitResultResidual to represent split results.\n\nR: @robertwb\nCC: @chadrik for type checking.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-08T00:08:58Z", "url": "https://github.com/apache/beam/pull/10802", "merged": true, "mergeCommit": {"oid": "bcc3e1313be23bdedfec7798dcdc654cd553623e"}, "closed": true, "closedAt": "2020-02-11T21:28:28Z", "author": {"login": "boyuanzz"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCIkrZABqjMwMTk0OTM5MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDX-AeABqjMwMjgxNDc3Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c08c4617a983402bd400638310821d04f2fe545", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1c08c4617a983402bd400638310821d04f2fe545", "committedDate": "2020-02-08T00:07:20Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from common.py"}, "afterCommit": {"oid": "9af5f216ef033b8f4b7685f4d75e7a3f87e95537", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/9af5f216ef033b8f4b7685f4d75e7a3f87e95537", "committedDate": "2020-02-08T00:12:59Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from common.py"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9af5f216ef033b8f4b7685f4d75e7a3f87e95537", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/9af5f216ef033b8f4b7685f4d75e7a3f87e95537", "committedDate": "2020-02-08T00:12:59Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from common.py"}, "afterCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5b2a312a7afbc96f8711ed14b5f3e8d0079d86db", "committedDate": "2020-02-10T18:55:31Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from common.py"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTk5MDQ5", "url": "https://github.com/apache/beam/pull/10802#pullrequestreview-356199049", "createdAt": "2020-02-10T19:23:51Z", "commit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyMzo1MVrOFnyijA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyMzo1MVrOFnyijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2NjgyOA==", "bodyText": "please use typing.NamedTuple so that we can track the types of members.", "url": "https://github.com/apache/beam/pull/10802#discussion_r377266828", "createdAt": "2020-02-10T19:23:51Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,173 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from collections import namedtuple\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import Optional\n+from typing import Tuple\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+SplitResultPrimary = namedtuple(\n+    'SplitResultPrimary', 'windowed_value')\n+\n+SplitResultResidual = namedtuple(\n+    'SplitResultResidual',\n+    'windowed_value current_watermark deferred_timestamp')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjAwNzI3", "url": "https://github.com/apache/beam/pull/10802#pullrequestreview-356200727", "createdAt": "2020-02-10T19:26:20Z", "commit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyNjoyMFrOFnynmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyNjoyMFrOFnynmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2ODEyMA==", "bodyText": "why use a namedtuple here if there is only one member?", "url": "https://github.com/apache/beam/pull/10802#discussion_r377268120", "createdAt": "2020-02-10T19:26:20Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,173 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from collections import namedtuple\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import Optional\n+from typing import Tuple\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+SplitResultPrimary = namedtuple(\n+    'SplitResultPrimary', 'windowed_value')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjAxMzQ2", "url": "https://github.com/apache/beam/pull/10802#pullrequestreview-356201346", "createdAt": "2020-02-10T19:27:16Z", "commit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyNzoxN1rOFnypfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyNzoxN1rOFnypfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2ODYwNA==", "bodyText": "no whitespace between type comment and docs.  not sure if this is caught by yapf or pylint, but the prevailing style is to omit this.", "url": "https://github.com/apache/beam/pull/10802#discussion_r377268604", "createdAt": "2020-02-10T19:27:17Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,173 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from collections import namedtuple\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import Optional\n+from typing import Tuple\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+SplitResultPrimary = namedtuple(\n+    'SplitResultPrimary', 'windowed_value')\n+\n+SplitResultResidual = namedtuple(\n+    'SplitResultResidual',\n+    'windowed_value current_watermark deferred_timestamp')\n+\n+class ThreadsafeRestrictionTracker(object):\n+  \"\"\"A thread-safe wrapper which wraps a `RestritionTracker`.\n+\n+  This wrapper guarantees synchronization of modifying restrictions across\n+  multi-thread.\n+  \"\"\"\n+  def __init__(self, restriction_tracker):\n+    # type: (RestrictionTracker) -> None\n+    from apache_beam.io.iobase import RestrictionTracker\n+    if not isinstance(restriction_tracker, RestrictionTracker):\n+      raise ValueError(\n+          'Initialize ThreadsafeRestrictionTracker requires'\n+          'RestrictionTracker.')\n+    self._restriction_tracker = restriction_tracker\n+    # Records an absolute timestamp when defer_remainder is called.\n+    self._deferred_timestamp = None\n+    self._lock = threading.RLock()\n+    self._deferred_residual = None\n+    self._deferred_watermark = None\n+\n+  def current_restriction(self):\n+    with self._lock:\n+      return self._restriction_tracker.current_restriction()\n+\n+  def try_claim(self, position):\n+    with self._lock:\n+      return self._restriction_tracker.try_claim(position)\n+\n+  def defer_remainder(self, deferred_time=None):\n+    \"\"\"Performs self-checkpoint on current processing restriction with an\n+    expected resuming time.\n+\n+    Self-checkpoint could happen during processing elements. When executing an\n+    DoFn.process(), you may want to stop processing an element and resuming\n+    later if current element has been processed quit a long time or you also\n+    want to have some outputs from other elements. ``defer_remainder()`` can be\n+    called on per element if needed.\n+\n+    Args:\n+      deferred_time: A relative ``timestamp.Duration`` that indicates the ideal\n+      time gap between now and resuming, or an absolute ``timestamp.Timestamp``\n+      for resuming execution time. If the time_delay is None, the deferred work\n+      will be executed as soon as possible.\n+    \"\"\"\n+\n+    # Record current time for calculating deferred_time later.\n+    self._deferred_timestamp = timestamp.Timestamp.now()\n+    if (deferred_time and not isinstance(deferred_time, timestamp.Duration) and\n+        not isinstance(deferred_time, timestamp.Timestamp)):\n+      raise ValueError(\n+          'The timestamp of deter_remainder() should be a '\n+          'Duration or a Timestamp, or None.')\n+    self._deferred_watermark = deferred_time\n+    checkpoint = self.try_split(0)\n+    if checkpoint:\n+      _, self._deferred_residual = checkpoint\n+\n+  def check_done(self):\n+    with self._lock:\n+      return self._restriction_tracker.check_done()\n+\n+  def current_progress(self):\n+    with self._lock:\n+      return self._restriction_tracker.current_progress()\n+\n+  def try_split(self, fraction_of_remainder):\n+    with self._lock:\n+      return self._restriction_tracker.try_split(fraction_of_remainder)\n+\n+  def deferred_status(self):\n+    # type: () -> Optional[Tuple[Any, Timestamp]]\n+\n+    \"\"\"Returns deferred work which is produced by ``defer_remainder()``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjAxOTY5", "url": "https://github.com/apache/beam/pull/10802#pullrequestreview-356201969", "createdAt": "2020-02-10T19:28:15Z", "commit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyODoxNVrOFnyrTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyODoxNVrOFnyrTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2OTA2OQ==", "bodyText": "I know that this class is just being copied over from another file, but I'd love to see some type annotations added to it.", "url": "https://github.com/apache/beam/pull/10802#discussion_r377269069", "createdAt": "2020-02-10T19:28:15Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,173 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from collections import namedtuple\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import Optional\n+from typing import Tuple\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+SplitResultPrimary = namedtuple(\n+    'SplitResultPrimary', 'windowed_value')\n+\n+SplitResultResidual = namedtuple(\n+    'SplitResultResidual',\n+    'windowed_value current_watermark deferred_timestamp')\n+\n+class ThreadsafeRestrictionTracker(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjAyMTcy", "url": "https://github.com/apache/beam/pull/10802#pullrequestreview-356202172", "createdAt": "2020-02-10T19:28:31Z", "commit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyODozMlrOFnyr9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToyODozMlrOFnyr9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2OTIzOA==", "bodyText": "same thing here wrt type annotations", "url": "https://github.com/apache/beam/pull/10802#discussion_r377269238", "createdAt": "2020-02-10T19:28:32Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,173 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from collections import namedtuple\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import Optional\n+from typing import Tuple\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+SplitResultPrimary = namedtuple(\n+    'SplitResultPrimary', 'windowed_value')\n+\n+SplitResultResidual = namedtuple(\n+    'SplitResultResidual',\n+    'windowed_value current_watermark deferred_timestamp')\n+\n+class ThreadsafeRestrictionTracker(object):\n+  \"\"\"A thread-safe wrapper which wraps a `RestritionTracker`.\n+\n+  This wrapper guarantees synchronization of modifying restrictions across\n+  multi-thread.\n+  \"\"\"\n+  def __init__(self, restriction_tracker):\n+    # type: (RestrictionTracker) -> None\n+    from apache_beam.io.iobase import RestrictionTracker\n+    if not isinstance(restriction_tracker, RestrictionTracker):\n+      raise ValueError(\n+          'Initialize ThreadsafeRestrictionTracker requires'\n+          'RestrictionTracker.')\n+    self._restriction_tracker = restriction_tracker\n+    # Records an absolute timestamp when defer_remainder is called.\n+    self._deferred_timestamp = None\n+    self._lock = threading.RLock()\n+    self._deferred_residual = None\n+    self._deferred_watermark = None\n+\n+  def current_restriction(self):\n+    with self._lock:\n+      return self._restriction_tracker.current_restriction()\n+\n+  def try_claim(self, position):\n+    with self._lock:\n+      return self._restriction_tracker.try_claim(position)\n+\n+  def defer_remainder(self, deferred_time=None):\n+    \"\"\"Performs self-checkpoint on current processing restriction with an\n+    expected resuming time.\n+\n+    Self-checkpoint could happen during processing elements. When executing an\n+    DoFn.process(), you may want to stop processing an element and resuming\n+    later if current element has been processed quit a long time or you also\n+    want to have some outputs from other elements. ``defer_remainder()`` can be\n+    called on per element if needed.\n+\n+    Args:\n+      deferred_time: A relative ``timestamp.Duration`` that indicates the ideal\n+      time gap between now and resuming, or an absolute ``timestamp.Timestamp``\n+      for resuming execution time. If the time_delay is None, the deferred work\n+      will be executed as soon as possible.\n+    \"\"\"\n+\n+    # Record current time for calculating deferred_time later.\n+    self._deferred_timestamp = timestamp.Timestamp.now()\n+    if (deferred_time and not isinstance(deferred_time, timestamp.Duration) and\n+        not isinstance(deferred_time, timestamp.Timestamp)):\n+      raise ValueError(\n+          'The timestamp of deter_remainder() should be a '\n+          'Duration or a Timestamp, or None.')\n+    self._deferred_watermark = deferred_time\n+    checkpoint = self.try_split(0)\n+    if checkpoint:\n+      _, self._deferred_residual = checkpoint\n+\n+  def check_done(self):\n+    with self._lock:\n+      return self._restriction_tracker.check_done()\n+\n+  def current_progress(self):\n+    with self._lock:\n+      return self._restriction_tracker.current_progress()\n+\n+  def try_split(self, fraction_of_remainder):\n+    with self._lock:\n+      return self._restriction_tracker.try_split(fraction_of_remainder)\n+\n+  def deferred_status(self):\n+    # type: () -> Optional[Tuple[Any, Timestamp]]\n+\n+    \"\"\"Returns deferred work which is produced by ``defer_remainder()``.\n+\n+    When there is a self-checkpoint performed, the system needs to fulfill the\n+    DelayedBundleApplication with deferred_work for a  ProcessBundleResponse.\n+    The system calls this API to get deferred_residual with watermark together\n+    to help the runner to schedule a future work.\n+\n+    Returns: (deferred_residual, time_delay) if having any residual, else None.\n+    \"\"\"\n+    if self._deferred_residual:\n+      # If _deferred_watermark is None, create Duration(0).\n+      if not self._deferred_watermark:\n+        self._deferred_watermark = timestamp.Duration()\n+      # If an absolute timestamp is provided, calculate the delta between\n+      # the absoluted time and the time deferred_status() is called.\n+      elif isinstance(self._deferred_watermark, timestamp.Timestamp):\n+        self._deferred_watermark = (\n+            self._deferred_watermark - timestamp.Timestamp.now())\n+      # If a Duration is provided, the deferred time should be:\n+      # provided duration - the spent time since the defer_remainder() is\n+      # called.\n+      elif isinstance(self._deferred_watermark, timestamp.Duration):\n+        self._deferred_watermark -= (\n+            timestamp.Timestamp.now() - self._deferred_timestamp)\n+      return self._deferred_residual, self._deferred_watermark\n+    return None\n+\n+\n+class RestrictionTrackerView(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzUxOTcw", "url": "https://github.com/apache/beam/pull/10802#pullrequestreview-356351970", "createdAt": "2020-02-11T00:02:55Z", "commit": {"oid": "8aa9821439fbb941c83c61e34b52aedc1404dacc"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDowNDo0M1rOFn6Brw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoxOToxMVrOFn6RBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4OTQ4Nw==", "bodyText": "You can still use tuple unpacking here, e.g.\n(element_and_restriction, deferred_timestamp, current_watermark) = deferred_remainder", "url": "https://github.com/apache/beam/pull/10802#discussion_r377389487", "createdAt": "2020-02-11T00:04:43Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -906,26 +906,25 @@ def delayed_bundle_application(self,\n     # type: (...) -> beam_fn_api_pb2.DelayedBundleApplication\n     assert op.input_info is not None\n     # TODO(SDF): For non-root nodes, need main_input_coder + residual_coder.\n-    ((element_and_restriction, output_watermark),\n-     deferred_watermark) = deferred_remainder\n-    if deferred_watermark:\n-      assert isinstance(deferred_watermark, timestamp.Duration)\n+    element_and_restriction = deferred_remainder.windowed_value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa9821439fbb941c83c61e34b52aedc1404dacc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MDUzMg==", "bodyText": "Maybe call this field primary[_value] and the other residual[_value]?", "url": "https://github.com/apache/beam/pull/10802#discussion_r377390532", "createdAt": "2020-02-11T00:08:20Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,176 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Tuple\n+from apache_beam.utils.windowed_value import WindowedValue\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+SplitResultPrimary = NamedTuple(\n+    'SplitResultPrimary', [('windowed_value', WindowedValue)])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aa9821439fbb941c83c61e34b52aedc1404dacc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MjU5Mg==", "bodyText": "I agree that adding types would be nice, but is probably out of scope. (It would make sense to add types on the base class at the same time.)", "url": "https://github.com/apache/beam/pull/10802#discussion_r377392592", "createdAt": "2020-02-11T00:16:13Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,173 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from collections import namedtuple\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import Optional\n+from typing import Tuple\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+SplitResultPrimary = namedtuple(\n+    'SplitResultPrimary', 'windowed_value')\n+\n+SplitResultResidual = namedtuple(\n+    'SplitResultResidual',\n+    'windowed_value current_watermark deferred_timestamp')\n+\n+class ThreadsafeRestrictionTracker(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2OTA2OQ=="}, "originalCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MzQxNA==", "bodyText": "Nothing comes to mind immediately as to what fields we'd want to add here (though originally even the residual didn't have anything extra). Mostly I like the consistency, so I'd lean towards keeping it as is.", "url": "https://github.com/apache/beam/pull/10802#discussion_r377393414", "createdAt": "2020-02-11T00:19:11Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -0,0 +1,173 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+\"\"\"Common utility class to help SDK harness to execute an SDF. \"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+\n+import logging\n+import threading\n+from builtins import object\n+from collections import namedtuple\n+from typing import TYPE_CHECKING\n+from typing import Any\n+from typing import Optional\n+from typing import Tuple\n+\n+from apache_beam.utils import timestamp\n+\n+if TYPE_CHECKING:\n+  from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.utils.timestamp import Timestamp\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+SplitResultPrimary = namedtuple(\n+    'SplitResultPrimary', 'windowed_value')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2ODEyMA=="}, "originalCommit": {"oid": "5b2a312a7afbc96f8711ed14b5f3e8d0079d86db"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzU3NDQ3", "url": "https://github.com/apache/beam/pull/10802#pullrequestreview-356357447", "createdAt": "2020-02-11T00:19:31Z", "commit": {"oid": "8aa9821439fbb941c83c61e34b52aedc1404dacc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8aa9821439fbb941c83c61e34b52aedc1404dacc", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/8aa9821439fbb941c83c61e34b52aedc1404dacc", "committedDate": "2020-02-10T20:36:12Z", "message": "Addressed comments from Chad."}, "afterCommit": {"oid": "aaddf5c0eac060b6469fce7f06f68e8a6eeb87b3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/aaddf5c0eac060b6469fce7f06f68e8a6eeb87b3", "committedDate": "2020-02-11T01:23:17Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from common.py"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aaddf5c0eac060b6469fce7f06f68e8a6eeb87b3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/aaddf5c0eac060b6469fce7f06f68e8a6eeb87b3", "committedDate": "2020-02-11T01:23:17Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from common.py"}, "afterCommit": {"oid": "d1bc02465307075b6d9f32e6f90930de8a544926", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d1bc02465307075b6d9f32e6f90930de8a544926", "committedDate": "2020-02-11T19:12:49Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from iobase.py"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1bc02465307075b6d9f32e6f90930de8a544926", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d1bc02465307075b6d9f32e6f90930de8a544926", "committedDate": "2020-02-11T19:12:49Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from iobase.py"}, "afterCommit": {"oid": "dc055845b25c47ea4a8f64a7e0d2960a2f693811", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/dc055845b25c47ea4a8f64a7e0d2960a2f693811", "committedDate": "2020-02-11T19:56:15Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from iobase.py"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6e54bc19f5e69cab49d22f5044b1c869b9ec69", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/cd6e54bc19f5e69cab49d22f5044b1c869b9ec69", "committedDate": "2020-02-11T20:43:09Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from iobase.py"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc055845b25c47ea4a8f64a7e0d2960a2f693811", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/dc055845b25c47ea4a8f64a7e0d2960a2f693811", "committedDate": "2020-02-11T19:56:15Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from iobase.py"}, "afterCommit": {"oid": "cd6e54bc19f5e69cab49d22f5044b1c869b9ec69", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/cd6e54bc19f5e69cab49d22f5044b1c869b9ec69", "committedDate": "2020-02-11T20:43:09Z", "message": "Move ThreadsafeRestrictionTracker and RestrictionTrackerView out from iobase.py"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3467, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}