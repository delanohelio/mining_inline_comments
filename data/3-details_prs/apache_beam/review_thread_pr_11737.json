{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjAyODM5", "number": 11737, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0Nzo0NlrOD9h-Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NDo1MVrOD9iHAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ2MzQyOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0Nzo0NlrOGXFQAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowNTozN1rOGXJAnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NjQ1MQ==", "bodyText": "Ah I didn't realized that Calcite does not do type validation on argument type for a specific function. ZetaSQL does it.", "url": "https://github.com/apache/beam/pull/11737#discussion_r426856451", "createdAt": "2020-05-18T19:47:46Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -171,10 +173,18 @@ static CombineFn createAvg(Schema.FieldType fieldType) {\n         return new BigDecimalAvg();\n       default:\n         throw new UnsupportedOperationException(\n-            String.format(\"[%s] is not support in AVG\", fieldType));\n+            String.format(\"[%s] is not supported in AVG\", fieldType));\n     }\n   }\n \n+  static CombineFn createBitOr(Schema.FieldType fieldType) {\n+    if (fieldType.getTypeName() == TypeName.INT64) {\n+      return new BitOr();\n+    }\n+    throw new UnsupportedOperationException(\n+        String.format(\"[%s] is not supported in BIT_OR\", fieldType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODA0Nw==", "bodyText": "I saw the other functions in this class do something similar, so I thought I'd do so as well", "url": "https://github.com/apache/beam/pull/11737#discussion_r426918047", "createdAt": "2020-05-18T22:05:37Z", "author": {"login": "omarismail94"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -171,10 +173,18 @@ static CombineFn createAvg(Schema.FieldType fieldType) {\n         return new BigDecimalAvg();\n       default:\n         throw new UnsupportedOperationException(\n-            String.format(\"[%s] is not support in AVG\", fieldType));\n+            String.format(\"[%s] is not supported in AVG\", fieldType));\n     }\n   }\n \n+  static CombineFn createBitOr(Schema.FieldType fieldType) {\n+    if (fieldType.getTypeName() == TypeName.INT64) {\n+      return new BitOr();\n+    }\n+    throw new UnsupportedOperationException(\n+        String.format(\"[%s] is not supported in BIT_OR\", fieldType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NjQ1MQ=="}, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ4Mjg4OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NDowMVrOGXFb5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1NjozNFrOGXKGqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA==", "bodyText": "I am thinking there is no need to define a class to wrap long val? Just use Long?\nAlso you could consider this interface: https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sum.java#L129?", "url": "https://github.com/apache/beam/pull/11737#discussion_r426859494", "createdAt": "2020-05-18T19:54:01Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -347,4 +357,35 @@ public BigDecimal toBigDecimal(BigDecimal record) {\n       return record;\n     }\n   }\n+\n+  static class BitOr<T extends Number> extends CombineFn<T, BitOr.Accum, Long> {\n+    static class Accum {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTQ3Ng==", "bodyText": "Hmm, Im not sure if this works. How would I create the accumulator? I can't do new Long(). That's why I wrapped long in Accum", "url": "https://github.com/apache/beam/pull/11737#discussion_r426931476", "createdAt": "2020-05-18T22:43:33Z", "author": {"login": "omarismail94"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -347,4 +357,35 @@ public BigDecimal toBigDecimal(BigDecimal record) {\n       return record;\n     }\n   }\n+\n+  static class BitOr<T extends Number> extends CombineFn<T, BitOr.Accum, Long> {\n+    static class Accum {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA=="}, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNTQ2MQ==", "bodyText": "Actually, this might work, let me test this\n  static class BitOr<T extends Number> extends CombineFn<T, Long, Long> {\n    @Override\n    public Long createAccumulator() {\n      return 0L;\n    }\n\n    @Override\n    public Long addInput(Long accum, T input) {\n      return accum | input.longValue();\n    }\n\n    @Override\n    public Long mergeAccumulators(Iterable<Long> accums) {\n      Long merged = createAccumulator();\n      for (Long accum : accums) {\n        merged = merged | accum;\n      }\n      return merged;\n    }\n\n    @Override\n    public Long extractOutput(Long accum) {\n      return accum;\n    }\n  }\n}", "url": "https://github.com/apache/beam/pull/11737#discussion_r426935461", "createdAt": "2020-05-18T22:55:05Z", "author": {"login": "omarismail94"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -347,4 +357,35 @@ public BigDecimal toBigDecimal(BigDecimal record) {\n       return record;\n     }\n   }\n+\n+  static class BitOr<T extends Number> extends CombineFn<T, BitOr.Accum, Long> {\n+    static class Accum {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA=="}, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNTk3Ng==", "bodyText": "It worked! Will commit this now!", "url": "https://github.com/apache/beam/pull/11737#discussion_r426935976", "createdAt": "2020-05-18T22:56:34Z", "author": {"login": "omarismail94"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -347,4 +357,35 @@ public BigDecimal toBigDecimal(BigDecimal record) {\n       return record;\n     }\n   }\n+\n+  static class BitOr<T extends Number> extends CombineFn<T, BitOr.Accum, Long> {\n+    static class Accum {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA=="}, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ4NDI4OnYy", "diffSide": "LEFT", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NDoyNlrOGXFcug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowNTo0NlrOGXJA4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTcwNg==", "bodyText": "Nice catch!", "url": "https://github.com/apache/beam/pull/11737#discussion_r426859706", "createdAt": "2020-05-18T19:54:26Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2836,7 +2836,6 @@ public void testDistinctOnNull() {\n   }\n \n   @Test\n-  @Ignore(\"BeamSQL does not support ANY_VALUE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODExNA==", "bodyText": "Thanks!", "url": "https://github.com/apache/beam/pull/11737#discussion_r426918114", "createdAt": "2020-05-18T22:05:46Z", "author": {"login": "omarismail94"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2836,7 +2836,6 @@ public void testDistinctOnNull() {\n   }\n \n   @Test\n-  @Ignore(\"BeamSQL does not support ANY_VALUE\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTcwNg=="}, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ4NTc5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NDo1MVrOGXFdmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowNjoxNlrOGXJBnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTkzMA==", "bodyText": "Nice! Surprisingly you can figure out how to enable this function in ZetaSQL dialect!", "url": "https://github.com/apache/beam/pull/11737#discussion_r426859930", "createdAt": "2020-05-18T19:54:51Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -4500,6 +4499,23 @@ public void testIsNullTrueFalse() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testZetaSQLBitOr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODMwMA==", "bodyText": "Zeta was surprisingly easier than Calcite!", "url": "https://github.com/apache/beam/pull/11737#discussion_r426918300", "createdAt": "2020-05-18T22:06:16Z", "author": {"login": "omarismail94"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -4500,6 +4499,23 @@ public void testIsNullTrueFalse() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testZetaSQLBitOr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTkzMA=="}, "originalCommit": {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3790, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}