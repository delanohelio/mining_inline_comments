{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODYzMTQ0", "number": 12626, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDozNTowNFrOEbmY_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDozNjo1NlrOEbmceA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mzc1OTk4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/inspector/InspectableList.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDozNTowNFrOHFn3iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTowMTozNFrOHIdY-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1ODEyMw==", "bodyText": "Just a nit, but you could probably move this and the onClick function out to private methods to make the logical separation a bit more readable. Or, since there is no state to this component, you could write it as a pure functional component that accepts props and returns the React node.", "url": "https://github.com/apache/beam/pull/12626#discussion_r475658123", "createdAt": "2020-08-24T14:35:04Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/inspector/InspectableList.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+import { CollapsibleList, SimpleListItem, ListDivider } from '@rmwc/list';\n+\n+import { InspectableListItem } from './InspectableListItem';\n+import { InspectableViewModel } from './InspectableViewModel';\n+\n+import '@rmwc/list/styles';\n+\n+export interface IInspectableMeta {\n+  name: string;\n+  // The id() value of the inspectable item in the kernel.\n+  inMemoryId: number;\n+  type: string;\n+}\n+\n+interface IKeyedInspectableMeta {\n+  [key: string]: IInspectableMeta;\n+}\n+\n+interface IInspectableListProps {\n+  inspectableViewModel?: InspectableViewModel;\n+  id: string;\n+  metadata: IInspectableMeta;\n+  pcolls: IKeyedInspectableMeta;\n+}\n+\n+/**\n+ * The PCollection sub list of the side list of the InteractiveInspector parent\n+ * component.\n+ *\n+ * Each sub list only contains listing of PCollections for one pipeline.\n+ *\n+ * The pipeline item functions as a header of the collapsible sub list. It\n+ * alters the shared inspectableViewModel of the display area on click to query\n+ * and display a graph that is the DOT representation of the pipeline.\n+ */\n+export class InspectableList extends React.Component<\n+  IInspectableListProps,\n+  {}\n+> {\n+  constructor(props: IInspectableListProps) {\n+    super(props);\n+  }\n+\n+  render(): React.ReactNode {\n+    const pcollListItems = Object.entries(this.props.pcolls).map(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52a2fa0373da56ed2a373680a90484ee8abd0b5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzMjE4Ng==", "bodyText": "Thanks! I've moved the logic out into private functions.", "url": "https://github.com/apache/beam/pull/12626#discussion_r478632186", "createdAt": "2020-08-27T19:01:34Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/inspector/InspectableList.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+import { CollapsibleList, SimpleListItem, ListDivider } from '@rmwc/list';\n+\n+import { InspectableListItem } from './InspectableListItem';\n+import { InspectableViewModel } from './InspectableViewModel';\n+\n+import '@rmwc/list/styles';\n+\n+export interface IInspectableMeta {\n+  name: string;\n+  // The id() value of the inspectable item in the kernel.\n+  inMemoryId: number;\n+  type: string;\n+}\n+\n+interface IKeyedInspectableMeta {\n+  [key: string]: IInspectableMeta;\n+}\n+\n+interface IInspectableListProps {\n+  inspectableViewModel?: InspectableViewModel;\n+  id: string;\n+  metadata: IInspectableMeta;\n+  pcolls: IKeyedInspectableMeta;\n+}\n+\n+/**\n+ * The PCollection sub list of the side list of the InteractiveInspector parent\n+ * component.\n+ *\n+ * Each sub list only contains listing of PCollections for one pipeline.\n+ *\n+ * The pipeline item functions as a header of the collapsible sub list. It\n+ * alters the shared inspectableViewModel of the display area on click to query\n+ * and display a graph that is the DOT representation of the pipeline.\n+ */\n+export class InspectableList extends React.Component<\n+  IInspectableListProps,\n+  {}\n+> {\n+  constructor(props: IInspectableListProps) {\n+    super(props);\n+  }\n+\n+  render(): React.ReactNode {\n+    const pcollListItems = Object.entries(this.props.pcolls).map(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1ODEyMw=="}, "originalCommit": {"oid": "a52a2fa0373da56ed2a373680a90484ee8abd0b5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mzc2ODg4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/inspector/InspectableView.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDozNjo1NlrOHFn8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTowMjoxM1rOHIdaUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1OTQ0Ng==", "bodyText": "nit you can reduce the nesting level for the pcollection case if you put put the inverse condition first and short-circuit the return for the empty span.", "url": "https://github.com/apache/beam/pull/12626#discussion_r475659446", "createdAt": "2020-08-24T14:36:56Z", "author": {"login": "prodonjs"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/inspector/InspectableView.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+import { Checkbox } from '@rmwc/checkbox';\n+\n+import {\n+  InspectableViewModel,\n+  IOptions,\n+  IShowOptions\n+} from './InspectableViewModel';\n+import { HtmlView } from '../common/HtmlView';\n+import { IHtmlProvider } from '../common/HtmlView';\n+\n+import '@rmwc/checkbox/styles';\n+\n+interface IInspectableViewProps {\n+  model: InspectableViewModel;\n+}\n+\n+interface IInspectableViewState {\n+  inspectableType: string;\n+  // options used in kernel messaging.\n+  options: IOptions;\n+}\n+\n+/**\n+ * The display area of the InteractiveInspector parent component.\n+ *\n+ * The react component is composed with a top checkbox section of display\n+ * options and a main HtmlView area that displays HTML from IOPub messaging of\n+ * its kernel model.\n+ */\n+export class InspectableView extends React.Component<\n+  IInspectableViewProps,\n+  IInspectableViewState\n+> {\n+  constructor(props: IInspectableViewProps) {\n+    super(props);\n+    this.state = {\n+      inspectableType: 'pipeline',\n+      options: props.model.options\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1500);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    if (this.props.model.inspectableType === 'pcollection') {\n+      this.setState({\n+        inspectableType: 'pcollection',\n+        options: this._buildShowOptions(this.props.model.options)\n+      });\n+    } else {\n+      this.setState({\n+        inspectableType: 'pipeline',\n+        options: {}\n+      });\n+    }\n+  }\n+\n+  renderOptions(): React.ReactNode {\n+    if (this.props.model.inspectableType === 'pcollection') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52a2fa0373da56ed2a373680a90484ee8abd0b5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzMjUzMQ==", "bodyText": "Inverted the condition and the return statements.", "url": "https://github.com/apache/beam/pull/12626#discussion_r478632531", "createdAt": "2020-08-27T19:02:13Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/inspector/InspectableView.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import * as React from 'react';\n+\n+import { Checkbox } from '@rmwc/checkbox';\n+\n+import {\n+  InspectableViewModel,\n+  IOptions,\n+  IShowOptions\n+} from './InspectableViewModel';\n+import { HtmlView } from '../common/HtmlView';\n+import { IHtmlProvider } from '../common/HtmlView';\n+\n+import '@rmwc/checkbox/styles';\n+\n+interface IInspectableViewProps {\n+  model: InspectableViewModel;\n+}\n+\n+interface IInspectableViewState {\n+  inspectableType: string;\n+  // options used in kernel messaging.\n+  options: IOptions;\n+}\n+\n+/**\n+ * The display area of the InteractiveInspector parent component.\n+ *\n+ * The react component is composed with a top checkbox section of display\n+ * options and a main HtmlView area that displays HTML from IOPub messaging of\n+ * its kernel model.\n+ */\n+export class InspectableView extends React.Component<\n+  IInspectableViewProps,\n+  IInspectableViewState\n+> {\n+  constructor(props: IInspectableViewProps) {\n+    super(props);\n+    this.state = {\n+      inspectableType: 'pipeline',\n+      options: props.model.options\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    this._updateRenderTimerId = setInterval(() => this.updateRender(), 1500);\n+  }\n+\n+  componentWillUnmount(): void {\n+    clearInterval(this._updateRenderTimerId);\n+  }\n+\n+  updateRender(): void {\n+    if (this.props.model.inspectableType === 'pcollection') {\n+      this.setState({\n+        inspectableType: 'pcollection',\n+        options: this._buildShowOptions(this.props.model.options)\n+      });\n+    } else {\n+      this.setState({\n+        inspectableType: 'pipeline',\n+        options: {}\n+      });\n+    }\n+  }\n+\n+  renderOptions(): React.ReactNode {\n+    if (this.props.model.inspectableType === 'pcollection') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1OTQ0Ng=="}, "originalCommit": {"oid": "a52a2fa0373da56ed2a373680a90484ee8abd0b5"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 531, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}