{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MzkwMTQ5", "number": 11670, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODozNDoyMVrOD7xrHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTozNDoxOVrOD8NWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDA2NDI5OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/TrivialNativeTransformExpander.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODozNDoyMVrOGUTynw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDozNDowOFrOGUX6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0ODk1OQ==", "bodyText": "What does \"Trivial\" mean here? Are there \"Native\" transforms that are not \"Trivial\"?", "url": "https://github.com/apache/beam/pull/11670#discussion_r423948959", "createdAt": "2020-05-12T18:34:21Z", "author": {"login": "ibzib"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/TrivialNativeTransformExpander.java", "diffHunk": "@@ -23,47 +23,51 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-// TODO(BEAM-6327): Remove the need for this.\n-\n-/** PipelineTrimmer removes subcomponents of native transforms that shouldn't be fused. */\n-public class PipelineTrimmer {\n-  private static final Logger LOG = LoggerFactory.getLogger(PipelineTrimmer.class);\n+/**\n+ * TrivialNativeTransformExpander is used to replace transforms with known URNs with their native", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNjE0MQ==", "bodyText": "Not currently but the \"trivial\" is to imply that you don't need anything other then payload on the transform itself and that you don't need to inspect the transform or any of its children when constructing the native transform.", "url": "https://github.com/apache/beam/pull/11670#discussion_r424016141", "createdAt": "2020-05-12T20:33:29Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/TrivialNativeTransformExpander.java", "diffHunk": "@@ -23,47 +23,51 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-// TODO(BEAM-6327): Remove the need for this.\n-\n-/** PipelineTrimmer removes subcomponents of native transforms that shouldn't be fused. */\n-public class PipelineTrimmer {\n-  private static final Logger LOG = LoggerFactory.getLogger(PipelineTrimmer.class);\n+/**\n+ * TrivialNativeTransformExpander is used to replace transforms with known URNs with their native", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0ODk1OQ=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNjQ0Nw==", "bodyText": "The \"trivial\" is meant to apply to the expander part.", "url": "https://github.com/apache/beam/pull/11670#discussion_r424016447", "createdAt": "2020-05-12T20:34:08Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/TrivialNativeTransformExpander.java", "diffHunk": "@@ -23,47 +23,51 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-// TODO(BEAM-6327): Remove the need for this.\n-\n-/** PipelineTrimmer removes subcomponents of native transforms that shouldn't be fused. */\n-public class PipelineTrimmer {\n-  private static final Logger LOG = LoggerFactory.getLogger(PipelineTrimmer.class);\n+/**\n+ * TrivialNativeTransformExpander is used to replace transforms with known URNs with their native", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0ODk1OQ=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDYxMjY2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToxNTo1OFrOGUZQVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyODoyOVrOGU50ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODQ4Nw==", "bodyText": "This should be native as well, right ?", "url": "https://github.com/apache/beam/pull/11670#discussion_r424038487", "createdAt": "2020-05-12T21:15:58Z", "author": {"login": "chamikaramj"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -375,6 +375,7 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t\tpayload := &pipepb.WindowIntoPayload{\n \t\t\tWindowFn: makeWindowFn(edge.Edge.WindowFn),\n \t\t}\n+\t\ttransformEnvID = m.addDefaultEnv()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MTU5OQ==", "bodyText": "No, Window.intorequires execution of assignWindows that is part of the windowing fn (which could be a well known window fn or a custom user window fn).\nIt could be lifted into the runner if it understands the windowing fn but that could break fusion since Window.into may occur between ParDos and far away from GroupByKey.", "url": "https://github.com/apache/beam/pull/11670#discussion_r424051599", "createdAt": "2020-05-12T21:44:23Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -375,6 +375,7 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t\tpayload := &pipepb.WindowIntoPayload{\n \t\t\tWindowFn: makeWindowFn(edge.Edge.WindowFn),\n \t\t}\n+\t\ttransformEnvID = m.addDefaultEnv()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODQ4Nw=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MDUzNA==", "bodyText": "Ah ok. I read this as GBK by mistake. Can we do this in a common place and skip the two known runner implemented transforms similar to other SDKs ?", "url": "https://github.com/apache/beam/pull/11670#discussion_r424560534", "createdAt": "2020-05-13T16:11:10Z", "author": {"login": "chamikaramj"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -375,6 +375,7 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t\tpayload := &pipepb.WindowIntoPayload{\n \t\t\tWindowFn: makeWindowFn(edge.Edge.WindowFn),\n \t\t}\n+\t\ttransformEnvID = m.addDefaultEnv()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODQ4Nw=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MjA2Mg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11670#discussion_r424572062", "createdAt": "2020-05-13T16:28:29Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -375,6 +375,7 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t\tpayload := &pipepb.WindowIntoPayload{\n \t\t\tWindowFn: makeWindowFn(edge.Edge.WindowFn),\n \t\t}\n+\t\ttransformEnvID = m.addDefaultEnv()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODQ4Nw=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzg0Njc3OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/TrivialNativeTransformExpander.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowOTo1OFrOGU5ESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMjowM1rOGU5jgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTY5MA==", "bodyText": "Probably we should expand the comment here to describe why this is needed.", "url": "https://github.com/apache/beam/pull/11670#discussion_r424559690", "createdAt": "2020-05-13T16:09:58Z", "author": {"login": "chamikaramj"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/TrivialNativeTransformExpander.java", "diffHunk": "@@ -23,47 +23,51 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-// TODO(BEAM-6327): Remove the need for this.\n-\n-/** PipelineTrimmer removes subcomponents of native transforms that shouldn't be fused. */\n-public class PipelineTrimmer {\n-  private static final Logger LOG = LoggerFactory.getLogger(PipelineTrimmer.class);\n+/**\n+ * TrivialNativeTransformExpander is used to replace transforms with known URNs with their native\n+ * equivalent.\n+ */\n+public class TrivialNativeTransformExpander {\n+  private static final Logger LOG = LoggerFactory.getLogger(TrivialNativeTransformExpander.class);\n \n   /**\n-   * Remove subcomponents of native transforms that shouldn't be fused.\n+   * Replaces transforms with the known URN with a native equivalent stripping the environment and\n+   * removing any sub-transforms from the returned pipeline.\n    *\n    * @param pipeline the pipeline to be trimmed\n    * @param knownUrns set of URNs for the runner's native transforms\n    * @return the trimmed pipeline\n    */\n-  public static Pipeline trim(Pipeline pipeline, Set<String> knownUrns) {\n+  public static Pipeline forKnownUrns(Pipeline pipeline, Set<String> knownUrns) {\n     return makeKnownUrnsPrimitives(pipeline, knownUrns);\n   }\n \n   private static RunnerApi.Pipeline makeKnownUrnsPrimitives(\n       RunnerApi.Pipeline pipeline, Set<String> knownUrns) {\n     RunnerApi.Pipeline.Builder trimmedPipeline = pipeline.toBuilder();\n     for (String ptransformId : pipeline.getComponents().getTransformsMap().keySet()) {\n-      if (knownUrns.contains(\n-          pipeline.getComponents().getTransformsOrThrow(ptransformId).getSpec().getUrn())) {\n-        LOG.debug(\"Removing descendants of known PTransform {}\" + ptransformId);\n+      // Skip over previously removed transforms from the original pipeline.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NzY4Mg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11670#discussion_r424567682", "createdAt": "2020-05-13T16:22:03Z", "author": {"login": "lukecwik"}, "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/TrivialNativeTransformExpander.java", "diffHunk": "@@ -23,47 +23,51 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-// TODO(BEAM-6327): Remove the need for this.\n-\n-/** PipelineTrimmer removes subcomponents of native transforms that shouldn't be fused. */\n-public class PipelineTrimmer {\n-  private static final Logger LOG = LoggerFactory.getLogger(PipelineTrimmer.class);\n+/**\n+ * TrivialNativeTransformExpander is used to replace transforms with known URNs with their native\n+ * equivalent.\n+ */\n+public class TrivialNativeTransformExpander {\n+  private static final Logger LOG = LoggerFactory.getLogger(TrivialNativeTransformExpander.class);\n \n   /**\n-   * Remove subcomponents of native transforms that shouldn't be fused.\n+   * Replaces transforms with the known URN with a native equivalent stripping the environment and\n+   * removing any sub-transforms from the returned pipeline.\n    *\n    * @param pipeline the pipeline to be trimmed\n    * @param knownUrns set of URNs for the runner's native transforms\n    * @return the trimmed pipeline\n    */\n-  public static Pipeline trim(Pipeline pipeline, Set<String> knownUrns) {\n+  public static Pipeline forKnownUrns(Pipeline pipeline, Set<String> knownUrns) {\n     return makeKnownUrnsPrimitives(pipeline, knownUrns);\n   }\n \n   private static RunnerApi.Pipeline makeKnownUrnsPrimitives(\n       RunnerApi.Pipeline pipeline, Set<String> knownUrns) {\n     RunnerApi.Pipeline.Builder trimmedPipeline = pipeline.toBuilder();\n     for (String ptransformId : pipeline.getComponents().getTransformsMap().keySet()) {\n-      if (knownUrns.contains(\n-          pipeline.getComponents().getTransformsOrThrow(ptransformId).getSpec().getUrn())) {\n-        LOG.debug(\"Removing descendants of known PTransform {}\" + ptransformId);\n+      // Skip over previously removed transforms from the original pipeline.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTY5MA=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzg3OTQ0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pipeline.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoxNzo1MFrOGU5ZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo0MDowNlrOGVF-5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NTAwNA==", "bodyText": "Can we add an assert similar to PipelineValidator.java ?", "url": "https://github.com/apache/beam/pull/11670#discussion_r424565004", "createdAt": "2020-05-13T16:17:50Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -123,20 +123,16 @@ class Pipeline(object):\n   should be used to designate new names\n   (e.g. ``input | \"label\" >> my_transform``).\n   \"\"\"\n-\n-  # TODO: BEAM-9001 - set environment ID in all transforms and allow runners to\n-  # override.\n   @classmethod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3Mjk1NQ==", "bodyText": "Where do you suggest the assert go?\nThe PipelineValidator does the assertion since it is used by the Runner once the entire pipeline is constructed.", "url": "https://github.com/apache/beam/pull/11670#discussion_r424572955", "createdAt": "2020-05-13T16:29:54Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -123,20 +123,16 @@ class Pipeline(object):\n   should be used to designate new names\n   (e.g. ``input | \"label\" >> my_transform``).\n   \"\"\"\n-\n-  # TODO: BEAM-9001 - set environment ID in all transforms and allow runners to\n-  # override.\n   @classmethod", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NTAwNA=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3MTMwMw==", "bodyText": "Probably we can introduce a new visitor and update runners to use that similar to following ?\nhttps://github.com/apache/beam/blob/master/sdks/python/apache_beam/runners/dataflow/dataflow_runner.py#L557\nBut this is not a blocker.", "url": "https://github.com/apache/beam/pull/11670#discussion_r424771303", "createdAt": "2020-05-13T22:40:06Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -123,20 +123,16 @@ class Pipeline(object):\n   should be used to designate new names\n   (e.g. ``input | \"label\" >> my_transform``).\n   \"\"\"\n-\n-  # TODO: BEAM-9001 - set environment ID in all transforms and allow runners to\n-  # override.\n   @classmethod", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NTAwNA=="}, "originalCommit": {"oid": "58a470914dd88617962b65138d6d88fa897075bf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDU5ODA4OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTozNDoxOVrOGVAlEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0MjoxM1rOGVA11A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4Mjc3MA==", "bodyText": "So, it's now the case that Composite Transforms should have environments?", "url": "https://github.com/apache/beam/pull/11670#discussion_r424682770", "createdAt": "2020-05-13T19:34:19Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -213,6 +213,7 @@ func (m *marshaller) addScopeTree(s *ScopeTree) string {\n \ttransform := &pipepb.PTransform{\n \t\tUniqueName:    s.Scope.Name,\n \t\tSubtransforms: subtransforms,\n+\t\tEnvironmentId: m.addDefaultEnv(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9a55b702a237fc3f0f531f0ea70c43689d474e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzA2MA==", "bodyText": "Yes.\nIt was to cover the case where the runner knows what the composite transform means such as a combiner and lifts it appropriately.", "url": "https://github.com/apache/beam/pull/11670#discussion_r424687060", "createdAt": "2020-05-13T19:42:13Z", "author": {"login": "lukecwik"}, "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -213,6 +213,7 @@ func (m *marshaller) addScopeTree(s *ScopeTree) string {\n \ttransform := &pipepb.PTransform{\n \t\tUniqueName:    s.Scope.Name,\n \t\tSubtransforms: subtransforms,\n+\t\tEnvironmentId: m.addDefaultEnv(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4Mjc3MA=="}, "originalCommit": {"oid": "bb9a55b702a237fc3f0f531f0ea70c43689d474e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3901, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}