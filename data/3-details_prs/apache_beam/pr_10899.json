{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTA3Mjk0", "number": 10899, "title": "[BEAM-8335] Background Caching job", "bodyText": "Exposed source data capture (implemented by background caching job) control APIs in\ninteractive_beam module.\nAbstract background caching job into a standalone class where\npipeline jobs and limit checkers are self-contained.\nAdded test_stream_service related control and tracking inside\nbackground_caching_job and interactive_environment.\nTODO items: 1) integrate streaming_cache once it implements\ncache_manager; 2) add implementation of capture_size control, now\nthe capture size limit checker is simply a thread ends whenever the\ncapture elapse limit checker terminates the infinitely running background\ncaching job; 3) wire test_stream_service's creation when the dependencies are ready.\n\nPlease add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-02-19T00:42:54Z", "url": "https://github.com/apache/beam/pull/10899", "merged": true, "mergeCommit": {"oid": "09c4b8cb8d44b9e68b30a8b4c0064687d31431dc"}, "closed": true, "closedAt": "2020-02-26T18:56:34Z", "author": {"login": "KevinGG"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF7HTogFqTM2MTM0NTcwNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIKIlNAFqTM2NTA5NTMwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzQ1NzA1", "url": "https://github.com/apache/beam/pull/10899#pullrequestreview-361345705", "createdAt": "2020-02-19T18:48:06Z", "commit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDI2MjM3", "url": "https://github.com/apache/beam/pull/10899#pullrequestreview-361426237", "createdAt": "2020-02-19T20:50:07Z", "commit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1MDowN1rOFr3HbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMTowN1rOFr3wCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNjEwOQ==", "bodyText": "Why?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381536109", "createdAt": "2020-02-19T20:50:07Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -15,6 +15,16 @@\n # limitations under the License.\n #\n \n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzMxNA==", "bodyText": "Is this needed? This will override otherthings.", "url": "https://github.com/apache/beam/pull/10899#discussion_r381537314", "createdAt": "2020-02-19T20:52:43Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzUzMQ==", "bodyText": "Why disk is in [] ?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381537531", "createdAt": "2020-02-19T20:53:12Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNzkzNA==", "bodyText": "There are other terminal states like FAILED ? What happens in those cases?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381537934", "createdAt": "2020-02-19T20:53:59Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.\n+\n+  A background caching job successfully terminates in 2 conditions:\n+\n+    #. The job is finite and runs into DONE state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MTQyOA==", "bodyText": "Should we set the daemon flag?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381541428", "createdAt": "2020-02-19T21:00:40Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -19,29 +19,113 @@\n \n For internal use only; no backwards-compatibility guarantees.\n \n-A background caching job is a job that caches events for all unbounded sources\n-of a given pipeline. With Interactive Beam, one such job is started when a\n-pipeline run happens (which produces a main job in contrast to the background\n+A background caching job is a job that captures events for all capturable\n+sources of a given pipeline. With Interactive Beam, one such job is started when\n+a pipeline run happens (which produces a main job in contrast to the background\n caching job) and meets the following conditions:\n \n-  #. The pipeline contains unbounded sources.\n+  #. The pipeline contains capturable sources, configured through\n+     interactive_beam.options.capturable_sources.\n   #. No such background job is running.\n   #. No such background job has completed successfully and the cached events are\n-     still valid (invalidated when unbounded sources change in the pipeline).\n+     still valid (invalidated when capturable sources change in the pipeline).\n \n Once started, the background caching job runs asynchronously until it hits some\n-cache size limit. Meanwhile, the main job and future main jobs from the pipeline\n-will run using the deterministic replay-able cached events until they are\n-invalidated.\n+capture limit configured in interactive_beam.options. Meanwhile, the main job\n+and future main jobs from the pipeline will run using the deterministic\n+replayable captured events until they are invalidated.\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n \n+import logging\n+import threading\n+import time\n+\n import apache_beam as beam\n-from apache_beam import runners\n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.caching import streaming_cache\n+from apache_beam.runners.runner import PipelineState\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class BackgroundCachingJob(object):\n+  \"\"\"A simple abstraction that controls necessary components of a timed and\n+  [disk] space limited background caching job.\n+\n+  A background caching job successfully terminates in 2 conditions:\n+\n+    #. The job is finite and runs into DONE state;\n+    #. The job is infinite but hits an interactive_beam.options configured limit\n+       and gets cancelled into CANCELLED/CANCELLING state.\n+\n+  In both situations, the background caching job should be treated as done\n+  successfully.\n+  \"\"\"\n+  def __init__(self, pipeline_result, start_limit_checkers=True):\n+    self._pipeline_result = pipeline_result\n+    self._timer = threading.Timer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NDA3Mw==", "bodyText": "Half sentence In order to have a deterministic replay of your pipeline ... What happens in this case?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381544073", "createdAt": "2020-02-19T21:06:01Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -132,7 +256,22 @@ def is_source_to_cache_changed(user_pipeline):\n   is_changed = not current_signature.issubset(recorded_signature)\n   # The computation of extract_unbounded_source_signature is expensive, track on\n   # change by default.\n-  if is_changed:\n+  if is_changed and update_cached_source_signature:\n+    if ie.current_env().options.enable_capture_replay:\n+      if not recorded_signature:\n+        _LOGGER.info(\n+            'Interactive Beam has detected you have unbounded sources '\n+            'in your pipeline. In order to have a deterministic replay '\n+            'of your pipeline: {}'.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTI1Nw==", "bodyText": "How do they set it?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381545257", "createdAt": "2020-02-19T21:08:35Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -34,6 +34,58 @@\n from __future__ import absolute_import\n \n from apache_beam.runners.interactive import interactive_environment as ie\n+from apache_beam.runners.interactive.options import interactive_options\n+\n+\n+class Options(interactive_options.InteractiveOptions):\n+  \"\"\"Options that guide how Interactive Beam works.\"\"\"\n+  @property\n+  def enable_capture_replay(self):\n+    \"\"\"Whether replayable source data capture should be replayed for multiple\n+    PCollection evaluations and pipeline runs as long as the data captured is\n+    still valid.\"\"\"\n+    return self.capture_control._enable_capture_replay\n+\n+  @enable_capture_replay.setter\n+  def enable_capture_replay(self, value):\n+    \"\"\"Sets whether source data capture should be replayed. True - Enables\n+    capture of replayable source data so that following PCollection evaluations\n+    and pipeline runs always use the same data captured; False - Disables\n+    capture of replayable source data so that following PCollection evaluation\n+    and pipeline runs always use new data from sources.\"\"\"\n+    self.capture_control._enable_capture_replay = value\n+\n+  @property\n+  def capturable_sources(self):\n+    \"\"\"Interactive Beam automatically captures data from sources in this set.\"\"\"\n+    return self.capture_control._capturable_sources\n+\n+  @property\n+  def capture_duration(self):\n+    \"\"\"The data capture of sources ends as soon as the background caching job\n+    has run for this long.\"\"\"\n+    return self.capture_control._capture_duration\n+\n+  @capture_duration.setter\n+  def capture_duration(self, value):\n+    \"\"\"Sets the capture duration as a timedelta.\n+\n+    Example::\n+\n+      # Sets the capture duration limit to 10 seconds.\n+      interactive_beam.options.capture_duration = timedelta(seconds=10)\n+      # Evicts all captured data if there is any.\n+      interactive_beam.evict_captured_data()\n+      # The next PCollection evaluation will capture fresh data from sources,\n+      # and the data captured will be replayed until another eviction.\n+    \"\"\"\n+    self.capture_control._capture_duration = value\n+\n+  # TODO(BEAM-8335): add capture_size options when they are supported.\n+\n+\n+# Users can set options to guide how Interactive Beam works.\n+options = Options()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjAzMg==", "bodyText": "Why is the options defined globally in a different file, but setter is here?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381546032", "createdAt": "2020-02-19T21:10:05Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -130,6 +139,17 @@ def __init__(self, cache_manager=None):\n           'You have limited Interactive Beam features since your '\n           'ipython kernel is not connected any notebook frontend.')\n \n+  @property\n+  def options(self):\n+    \"\"\"A reference to the global interactive options.\n+\n+    Provided to avoid import loop or excessive dynamic import. All internal\n+    Interactive Beam modules should access interactive_beam.options through\n+    this property.\n+    \"\"\"\n+    from apache_beam.runners.interactive.interactive_beam import options\n+    return options", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjMzOA==", "bodyText": "Do you need it?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381546338", "createdAt": "2020-02-19T21:10:44Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+from datetime import timedelta\n+\n+from apache_beam.io.gcp.pubsub import ReadFromPubSub\n+from apache_beam.runners.interactive import background_caching_job as bcj\n+from apache_beam.runners.interactive import interactive_environment as ie\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjUwNw==", "bodyText": "why, disable yapf here?", "url": "https://github.com/apache/beam/pull/10899#discussion_r381546507", "createdAt": "2020-02-19T21:11:07Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/capture_control.py", "diffHunk": "@@ -0,0 +1,80 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Module to control how Interactive Beam captures data from sources for\n+deterministic replayable PCollection evaluation and pipeline runs.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import logging\n+from datetime import timedelta\n+\n+from apache_beam.io.gcp.pubsub import ReadFromPubSub\n+from apache_beam.runners.interactive import background_caching_job as bcj\n+from apache_beam.runners.interactive import interactive_environment as ie\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.setLevel(logging.INFO)\n+\n+\n+class CaptureControl(object):\n+  \"\"\"Options and their utilities that controls how Interactive Beam captures\n+  deterministic replayable data from sources.\"\"\"\n+  def __init__(self):\n+    self._enable_capture_replay = True\n+    self._capturable_sources = {\n+        ReadFromPubSub,\n+    }  # yapf: disable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f977fc904658c70b0f0e98246166e949b86f266"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3106916e83d16c24b0c427904087e1fe3a21a6", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1a3106916e83d16c24b0c427904087e1fe3a21a6", "committedDate": "2020-02-25T02:31:32Z", "message": "[BEAM-8335] Background Caching job\n\n1. Exposed source data capture (implemented by background caching job) control APIs in interactive_beam module.\n2. Abstract background caching job into a standalone class where\n   pipeline jobs and limit checkers are self-contained.\n3. Added test_stream_service related control and tracking inside\n   background_caching_job and interactive_environment.\n4. TODO items: 1) integrate streaming_cache once it implements\n   cache_manager; 2) add implementation of `capture_size` control, now\n   the capture size limit checker is simply a thread ends whenever the\n   capture elapse limit checker terminates the infinitely running background\n   caching job; 3) wire test_stream_service's creation when the\n   dependencies are ready."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902ebb03543c64dd590ca0e0962e94826be8476b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/902ebb03543c64dd590ca0e0962e94826be8476b", "committedDate": "2020-02-25T02:31:48Z", "message": "fix lint and wire capturable sources into the pipeline_instrument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6197cb04dc436bfc5a3fcee1a7cc8bde2a4cfdd9", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/6197cb04dc436bfc5a3fcee1a7cc8bde2a4cfdd9", "committedDate": "2020-02-25T02:31:48Z", "message": "Fix for comments\n\nChange-Id: Ia6f8b0461f16e9b137250e5ef79194af72aec06a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd04b0e63437a8046ca7ea8ad781e5251e7fbd1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0dd04b0e63437a8046ca7ea8ad781e5251e7fbd1", "committedDate": "2020-02-25T02:31:48Z", "message": "Remove overriding logging level and rephrase some logs.\n\nChange-Id: I35fcc94c8d094bf9c36a13f49b053613a7d78f86"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dcfc19f425427de789e10ca88ee7774cd9e8d8b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1dcfc19f425427de789e10ca88ee7774cd9e8d8b", "committedDate": "2020-02-25T02:31:48Z", "message": "fix lint and format\n\nChange-Id: I1ad03d27fe2116bd3b1e53f7686af714f84ea6be"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222483bdc525d8f3d67ecb97208d3caa91a5ee1c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/222483bdc525d8f3d67ecb97208d3caa91a5ee1c", "committedDate": "2020-02-25T02:31:48Z", "message": "More lint and formatter fixes\n\nChange-Id: I5b4338ff52ebfd883bd4ea69b5d49bcf1be18e57"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9decbbe75d88153e84f2f24af279735ded225c65", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/9decbbe75d88153e84f2f24af279735ded225c65", "committedDate": "2020-02-25T01:22:10Z", "message": "More lint and formatter fixes\n\nChange-Id: I5b4338ff52ebfd883bd4ea69b5d49bcf1be18e57"}, "afterCommit": {"oid": "222483bdc525d8f3d67ecb97208d3caa91a5ee1c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/222483bdc525d8f3d67ecb97208d3caa91a5ee1c", "committedDate": "2020-02-25T02:31:48Z", "message": "More lint and formatter fixes\n\nChange-Id: I5b4338ff52ebfd883bd4ea69b5d49bcf1be18e57"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MDk1MzAw", "url": "https://github.com/apache/beam/pull/10899#pullrequestreview-365095300", "createdAt": "2020-02-26T17:25:54Z", "commit": {"oid": "222483bdc525d8f3d67ecb97208d3caa91a5ee1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3241, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}