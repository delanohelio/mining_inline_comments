{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjkzNDM1", "number": 13055, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo0MjozOVrOEsNHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODozMToxN1rOEupGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg3NjU5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo0MjozOVrOHfZXPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjoxNDo0M1rOHgO6kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MzQ1NA==", "bodyText": "Does this have to write TableRows? Why not also have the option to return the user type itself? (perhaps it's a lot of trouble to implement given the existing types?)\nWhat are some examples where users may want to recover a different tablerow than the one that was sent to BQ?", "url": "https://github.com/apache/beam/pull/13055#discussion_r502683454", "createdAt": "2020-10-09T21:42:39Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "diffHunk": "@@ -2002,6 +2006,11 @@ static String getExtractDestinationUri(String extractDestinationDir) {\n       return toBuilder().setFormatFunction(formatFunction).build();\n     }\n \n+    /** Formats the user's type into a {@link TableRow} to be written to an error collector. */\n+     public Write<T> withFailsafeFormatFunction(SerializableFunction<T, TableRow> formatFunction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a95c064c4dfc156886ed90465d97318d44e6a6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwMTgwNg==", "bodyText": "Currently the design is for the ErrorContainer to return TableRow's (or BigQueryError).  My worry is that it wouldn't be backwards compatible to make this generic, though I agree it would be more valuable.\nI think this question is important and is my only big open question around this design", "url": "https://github.com/apache/beam/pull/13055#discussion_r502701806", "createdAt": "2020-10-09T22:45:28Z", "author": {"login": "dhercher"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "diffHunk": "@@ -2002,6 +2006,11 @@ static String getExtractDestinationUri(String extractDestinationDir) {\n       return toBuilder().setFormatFunction(formatFunction).build();\n     }\n \n+    /** Formats the user's type into a {@link TableRow} to be written to an error collector. */\n+     public Write<T> withFailsafeFormatFunction(SerializableFunction<T, TableRow> formatFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MzQ1NA=="}, "originalCommit": {"oid": "93a95c064c4dfc156886ed90465d97318d44e6a6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MDg1MA==", "bodyText": "I've been looking into this feature and it will require a number of additional changes.  IMO it makes more sense to merge this first feature, then add a second issue / PR for the dynamic typing as it appears to be a relatively complex addon", "url": "https://github.com/apache/beam/pull/13055#discussion_r503560850", "createdAt": "2020-10-12T22:14:43Z", "author": {"login": "dhercher"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "diffHunk": "@@ -2002,6 +2006,11 @@ static String getExtractDestinationUri(String extractDestinationDir) {\n       return toBuilder().setFormatFunction(formatFunction).build();\n     }\n \n+    /** Formats the user's type into a {@link TableRow} to be written to an error collector. */\n+     public Write<T> withFailsafeFormatFunction(SerializableFunction<T, TableRow> formatFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MzQ1NA=="}, "originalCommit": {"oid": "93a95c064c4dfc156886ed90465d97318d44e6a6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg3NzY4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/RowWriterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo0MzoyMlrOHfZX4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoxOTozMlrOHfbmLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MzYxNg==", "bodyText": "yum yum? : ) remove?", "url": "https://github.com/apache/beam/pull/13055#discussion_r502683616", "createdAt": "2020-10-09T21:43:22Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/RowWriterFactory.java", "diffHunk": "@@ -40,23 +40,35 @@ private RowWriterFactory() {}\n       String tempFilePrefix, DestinationT destination) throws Exception;\n \n   static <ElementT, DestinationT> RowWriterFactory<ElementT, DestinationT> tableRows(\n-      SerializableFunction<ElementT, TableRow> toRow) {\n-    return new TableRowWriterFactory<ElementT, DestinationT>(toRow);\n+      SerializableFunction<ElementT, TableRow> toRow,\n+      SerializableFunction<ElementT, TableRow> toFailsafeRow) {\n+    return new TableRowWriterFactory<ElementT, DestinationT>(toRow, toFailsafeRow);\n   }\n \n   static final class TableRowWriterFactory<ElementT, DestinationT>\n       extends RowWriterFactory<ElementT, DestinationT> {\n \n     private final SerializableFunction<ElementT, TableRow> toRow;\n+    private final SerializableFunction<ElementT, TableRow> toFailsafeRow;\n \n-    private TableRowWriterFactory(SerializableFunction<ElementT, TableRow> toRow) {\n+    private TableRowWriterFactory(\n+        SerializableFunction<ElementT, TableRow> toRow,\n+        SerializableFunction<ElementT, TableRow> toFailsafeRow) {\n       this.toRow = toRow;\n+      this.toFailsafeRow = toFailsafeRow; // TODO yummy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a95c064c4dfc156886ed90465d97318d44e6a6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMDA0NQ==", "bodyText": "haha, removed", "url": "https://github.com/apache/beam/pull/13055#discussion_r502720045", "createdAt": "2020-10-10T00:19:32Z", "author": {"login": "dhercher"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/RowWriterFactory.java", "diffHunk": "@@ -40,23 +40,35 @@ private RowWriterFactory() {}\n       String tempFilePrefix, DestinationT destination) throws Exception;\n \n   static <ElementT, DestinationT> RowWriterFactory<ElementT, DestinationT> tableRows(\n-      SerializableFunction<ElementT, TableRow> toRow) {\n-    return new TableRowWriterFactory<ElementT, DestinationT>(toRow);\n+      SerializableFunction<ElementT, TableRow> toRow,\n+      SerializableFunction<ElementT, TableRow> toFailsafeRow) {\n+    return new TableRowWriterFactory<ElementT, DestinationT>(toRow, toFailsafeRow);\n   }\n \n   static final class TableRowWriterFactory<ElementT, DestinationT>\n       extends RowWriterFactory<ElementT, DestinationT> {\n \n     private final SerializableFunction<ElementT, TableRow> toRow;\n+    private final SerializableFunction<ElementT, TableRow> toFailsafeRow;\n \n-    private TableRowWriterFactory(SerializableFunction<ElementT, TableRow> toRow) {\n+    private TableRowWriterFactory(\n+        SerializableFunction<ElementT, TableRow> toRow,\n+        SerializableFunction<ElementT, TableRow> toFailsafeRow) {\n       this.toRow = toRow;\n+      this.toFailsafeRow = toFailsafeRow; // TODO yummy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MzYxNg=="}, "originalCommit": {"oid": "93a95c064c4dfc156886ed90465d97318d44e6a6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQzMjUyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODozMToxN1rOHjLtpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyMDoxMlrOHjRSJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NDExOA==", "bodyText": "Just one change request:\n\nPerhaps can we rename this to something that doesn't assume this fail-safe keyword is known by users? Perhaps withFailedInsertFormatFunction?\nAnd can you add some detail to the Javadoc so users will understand what this does?\n\nThanks", "url": "https://github.com/apache/beam/pull/13055#discussion_r506654118", "createdAt": "2020-10-16T18:31:17Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "diffHunk": "@@ -2002,6 +2007,11 @@ static String getExtractDestinationUri(String extractDestinationDir) {\n       return toBuilder().setFormatFunction(formatFunction).build();\n     }\n \n+    /** Formats the user's type into a {@link TableRow} to be written to an error collector. */\n+    public Write<T> withFailsafeFormatFunction(SerializableFunction<T, TableRow> formatFunction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f931fd65f154c55bc91afbf66ed6aabeba8de340"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNTYxMw==", "bodyText": "Sounds good, renaming it to\nwithFormatRecordOnFailureFunction\nAnd adding more in the Javadoc", "url": "https://github.com/apache/beam/pull/13055#discussion_r506715613", "createdAt": "2020-10-16T20:52:02Z", "author": {"login": "dhercher"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "diffHunk": "@@ -2002,6 +2007,11 @@ static String getExtractDestinationUri(String extractDestinationDir) {\n       return toBuilder().setFormatFunction(formatFunction).build();\n     }\n \n+    /** Formats the user's type into a {@link TableRow} to be written to an error collector. */\n+    public Write<T> withFailsafeFormatFunction(SerializableFunction<T, TableRow> formatFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NDExOA=="}, "originalCommit": {"oid": "f931fd65f154c55bc91afbf66ed6aabeba8de340"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NTM4Mg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/13055#discussion_r506745382", "createdAt": "2020-10-16T22:20:12Z", "author": {"login": "dhercher"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "diffHunk": "@@ -2002,6 +2007,11 @@ static String getExtractDestinationUri(String extractDestinationDir) {\n       return toBuilder().setFormatFunction(formatFunction).build();\n     }\n \n+    /** Formats the user's type into a {@link TableRow} to be written to an error collector. */\n+    public Write<T> withFailsafeFormatFunction(SerializableFunction<T, TableRow> formatFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NDExOA=="}, "originalCommit": {"oid": "f931fd65f154c55bc91afbf66ed6aabeba8de340"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3153, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}