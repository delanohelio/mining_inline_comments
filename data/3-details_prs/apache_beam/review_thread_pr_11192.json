{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDU1MDU1", "number": 11192, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyMToxNFrODqeglQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyMToxNFrODqeglQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODY2NjQ1OnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowPipelineTranslator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyMToxNFrOF6P5QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzozMTowNVrOF6QUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjE0NQ==", "bodyText": "Just curious what if someone has SDF without provide WatermarkEstimator?", "url": "https://github.com/apache/beam/pull/11192#discussion_r396622145", "createdAt": "2020-03-23T17:21:14Z", "author": {"login": "boyuanzz"}, "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowPipelineTranslator.java", "diffHunk": "@@ -978,12 +978,16 @@ public void translate(ParDo.MultiOutput transform, TranslationContext context) {\n             if (context.isFnApi()) {\n               DoFnSignature signature = DoFnSignatures.signatureForDoFn(transform.getFn());\n               if (signature.processElement().isSplittable()) {\n-                Coder<?> restrictionCoder =\n-                    DoFnInvokers.invokerFor(transform.getFn())\n-                        .invokeGetRestrictionCoder(\n-                            context.getInput(transform).getPipeline().getCoderRegistry());\n+                DoFnInvoker<?, ?> doFnInvoker = DoFnInvokers.invokerFor(transform.getFn());\n+                Coder<?> restrictionAndWatermarkStateCoder =\n+                    KvCoder.of(\n+                        doFnInvoker.invokeGetRestrictionCoder(\n+                            context.getInput(transform).getPipeline().getCoderRegistry()),\n+                        doFnInvoker.invokeGetWatermarkEstimatorStateCoder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6912011bd7b9745d5a3fd195165482bcc39ffa32"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNDE1MQ==", "bodyText": "The default watermark estimator state is void and always returns the min timestamp.\nSee:\n\n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java\n    \n    \n         Line 665\n      in\n      7310ec2\n    \n    \n    \n    \n\n        \n          \n              *   <li>It <i>may</i> define a {@link GetInitialWatermarkEstimatorState} method. If none is", "url": "https://github.com/apache/beam/pull/11192#discussion_r396624151", "createdAt": "2020-03-23T17:24:10Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowPipelineTranslator.java", "diffHunk": "@@ -978,12 +978,16 @@ public void translate(ParDo.MultiOutput transform, TranslationContext context) {\n             if (context.isFnApi()) {\n               DoFnSignature signature = DoFnSignatures.signatureForDoFn(transform.getFn());\n               if (signature.processElement().isSplittable()) {\n-                Coder<?> restrictionCoder =\n-                    DoFnInvokers.invokerFor(transform.getFn())\n-                        .invokeGetRestrictionCoder(\n-                            context.getInput(transform).getPipeline().getCoderRegistry());\n+                DoFnInvoker<?, ?> doFnInvoker = DoFnInvokers.invokerFor(transform.getFn());\n+                Coder<?> restrictionAndWatermarkStateCoder =\n+                    KvCoder.of(\n+                        doFnInvoker.invokeGetRestrictionCoder(\n+                            context.getInput(transform).getPipeline().getCoderRegistry()),\n+                        doFnInvoker.invokeGetWatermarkEstimatorStateCoder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjE0NQ=="}, "originalCommit": {"oid": "6912011bd7b9745d5a3fd195165482bcc39ffa32"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyOTEwNA==", "bodyText": "Thanks for the explanation!", "url": "https://github.com/apache/beam/pull/11192#discussion_r396629104", "createdAt": "2020-03-23T17:31:05Z", "author": {"login": "boyuanzz"}, "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowPipelineTranslator.java", "diffHunk": "@@ -978,12 +978,16 @@ public void translate(ParDo.MultiOutput transform, TranslationContext context) {\n             if (context.isFnApi()) {\n               DoFnSignature signature = DoFnSignatures.signatureForDoFn(transform.getFn());\n               if (signature.processElement().isSplittable()) {\n-                Coder<?> restrictionCoder =\n-                    DoFnInvokers.invokerFor(transform.getFn())\n-                        .invokeGetRestrictionCoder(\n-                            context.getInput(transform).getPipeline().getCoderRegistry());\n+                DoFnInvoker<?, ?> doFnInvoker = DoFnInvokers.invokerFor(transform.getFn());\n+                Coder<?> restrictionAndWatermarkStateCoder =\n+                    KvCoder.of(\n+                        doFnInvoker.invokeGetRestrictionCoder(\n+                            context.getInput(transform).getPipeline().getCoderRegistry()),\n+                        doFnInvoker.invokeGetWatermarkEstimatorStateCoder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjE0NQ=="}, "originalCommit": {"oid": "6912011bd7b9745d5a3fd195165482bcc39ffa32"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1736, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}