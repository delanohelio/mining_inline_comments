{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTI5Mzg3", "number": 12670, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDoyMToyN1rOEfxDFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDo0NDo1MFrOEfxZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzQ0OTE3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/elasticsearch-tests/elasticsearch-tests-2/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDoyMToyN1rOHMQaLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDowMDowN1rOHMfa8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMzgwNQ==", "bodyText": "Not really your problem but this is my first time looking at these tests, and this structure tests seems really odd to me. It looks like we could get rid of a lof of duplicate code if we just implemented both ElasticsearchIOIT and ElasticsearchIOTest  in elasticsearch common, then the implementations for each version could inherit from those with an (almost) empty implementation.\nAgain, not asking to do anything here, but I might try to tackle this myself, let me know if you think that's not possible.", "url": "https://github.com/apache/beam/pull/12670#discussion_r482613805", "createdAt": "2020-09-03T00:21:27Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/elasticsearch-tests/elasticsearch-tests-2/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOIT.java", "diffHunk": "@@ -140,4 +140,38 @@ public void testWritePartialUpdate() throws Exception {\n     elasticsearchIOTestCommonUpdate.setPipeline(pipeline);\n     elasticsearchIOTestCommonUpdate.testWritePartialUpdate();\n   }\n+\n+  /**\n+   * This test verifies volume deletes of Elasticsearch. The test dataset index is cloned and then\n+   * around half of the documents are deleted and the other half is partially updated using bulk\n+   * delete request. The test then asserts the documents were deleted successfully.\n+   */\n+  @Test\n+  public void testWriteWithIsDeletedFnWithPartialUpdates() throws Exception {\n+    ElasticsearchIOTestUtils.copyIndex(\n+        restClient,\n+        readConnectionConfiguration.getIndex(),\n+        updateConnectionConfiguration.getIndex());\n+    ElasticsearchIOTestCommon elasticsearchIOTestCommonDeleteFn =\n+        new ElasticsearchIOTestCommon(updateConnectionConfiguration, restClient, true);\n+    elasticsearchIOTestCommonDeleteFn.setPipeline(pipeline);\n+    elasticsearchIOTestCommonDeleteFn.testWriteWithIsDeletedFnWithPartialUpdates();\n+  }\n+\n+  /**\n+   * This test verifies volume deletes of Elasticsearch. The test dataset index is cloned and then\n+   * around half of the documents are deleted using bulk delete request. The test then asserts the\n+   * documents were deleted successfully.\n+   */\n+  @Test\n+  public void testWriteWithIsDeletedFnWithoutPartialUpdate() throws Exception {\n+    ElasticsearchIOTestUtils.copyIndex(\n+        restClient,\n+        readConnectionConfiguration.getIndex(),\n+        updateConnectionConfiguration.getIndex());\n+    ElasticsearchIOTestCommon elasticsearchIOTestCommonDeleteFn =\n+        new ElasticsearchIOTestCommon(updateConnectionConfiguration, restClient, true);\n+    elasticsearchIOTestCommonDeleteFn.setPipeline(pipeline);\n+    elasticsearchIOTestCommonDeleteFn.testWriteWithIsDeletedFnWithoutPartialUpdate();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1329404413b959e9f62f003fc3fe2cf469df50"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1OTc2Mw==", "bodyText": "Hi @TheNeuralBit I am also new to the Apache Beam code base \ud83d\ude05. But I also think there is a good opportunity to remove duplicate codes.", "url": "https://github.com/apache/beam/pull/12670#discussion_r482859763", "createdAt": "2020-09-03T10:00:07Z", "author": {"login": "jithin-sukumar"}, "path": "sdks/java/io/elasticsearch-tests/elasticsearch-tests-2/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOIT.java", "diffHunk": "@@ -140,4 +140,38 @@ public void testWritePartialUpdate() throws Exception {\n     elasticsearchIOTestCommonUpdate.setPipeline(pipeline);\n     elasticsearchIOTestCommonUpdate.testWritePartialUpdate();\n   }\n+\n+  /**\n+   * This test verifies volume deletes of Elasticsearch. The test dataset index is cloned and then\n+   * around half of the documents are deleted and the other half is partially updated using bulk\n+   * delete request. The test then asserts the documents were deleted successfully.\n+   */\n+  @Test\n+  public void testWriteWithIsDeletedFnWithPartialUpdates() throws Exception {\n+    ElasticsearchIOTestUtils.copyIndex(\n+        restClient,\n+        readConnectionConfiguration.getIndex(),\n+        updateConnectionConfiguration.getIndex());\n+    ElasticsearchIOTestCommon elasticsearchIOTestCommonDeleteFn =\n+        new ElasticsearchIOTestCommon(updateConnectionConfiguration, restClient, true);\n+    elasticsearchIOTestCommonDeleteFn.setPipeline(pipeline);\n+    elasticsearchIOTestCommonDeleteFn.testWriteWithIsDeletedFnWithPartialUpdates();\n+  }\n+\n+  /**\n+   * This test verifies volume deletes of Elasticsearch. The test dataset index is cloned and then\n+   * around half of the documents are deleted using bulk delete request. The test then asserts the\n+   * documents were deleted successfully.\n+   */\n+  @Test\n+  public void testWriteWithIsDeletedFnWithoutPartialUpdate() throws Exception {\n+    ElasticsearchIOTestUtils.copyIndex(\n+        restClient,\n+        readConnectionConfiguration.getIndex(),\n+        updateConnectionConfiguration.getIndex());\n+    ElasticsearchIOTestCommon elasticsearchIOTestCommonDeleteFn =\n+        new ElasticsearchIOTestCommon(updateConnectionConfiguration, restClient, true);\n+    elasticsearchIOTestCommonDeleteFn.setPipeline(pipeline);\n+    elasticsearchIOTestCommonDeleteFn.testWriteWithIsDeletedFnWithoutPartialUpdate();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMzgwNQ=="}, "originalCommit": {"oid": "2f1329404413b959e9f62f003fc3fe2cf469df50"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzQ5OTQ1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/elasticsearch/src/main/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDozOTo1N1rOHMQ7eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDowMTozNVrOHMfeRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyMjMyOQ==", "bodyText": "Could we instead just verify that IdFn is specified whenever DeleteFn is specified? Then we could move this check out to Write#expand and raise an exception when constructing the pipeline, rather than when it's executing. WDYT?", "url": "https://github.com/apache/beam/pull/12670#discussion_r482622329", "createdAt": "2020-09-03T00:39:57Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/elasticsearch/src/main/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIO.java", "diffHunk": "@@ -1346,17 +1359,36 @@ private static String lowerCaseOrNull(String input) {\n \n       @ProcessElement\n       public void processElement(ProcessContext context) throws Exception {\n-        String document = context.element();\n-        String documentMetadata = getDocumentMetadata(document);\n-\n-        // index is an insert/upsert and update is a partial update (or insert if not existing)\n-        if (spec.getUsePartialUpdate()) {\n-          batch.add(\n-              String.format(\n-                  \"{ \\\"update\\\" : %s }%n{ \\\"doc\\\" : %s, \\\"doc_as_upsert\\\" : true }%n\",\n-                  documentMetadata, document));\n+        String document = context.element(); // use configuration and auto-generated document IDs\n+        String documentMetadata = \"{}\";\n+        boolean isDelete = false;\n+        if (spec.getIndexFn() != null || spec.getTypeFn() != null || spec.getIdFn() != null) {\n+          // parse once and reused for efficiency\n+          JsonNode parsedDocument = OBJECT_MAPPER.readTree(document);\n+          documentMetadata = getDocumentMetadata(parsedDocument);\n+          if (spec.getIsDeleteFn() != null) {\n+            isDelete = spec.getIsDeleteFn().apply(parsedDocument);\n+            // if it is a delete opration, then it is mandatory to specify the document id using\n+            // getIdFn\n+            checkArgument(\n+                !(isDelete && spec.getIdFn() == null),\n+                \"Id needs to be specified by withIdFn for delete operation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1329404413b959e9f62f003fc3fe2cf469df50"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2MDYxNA==", "bodyText": "Yes, I think that is a better way to handle it. I fixed it.\nThanks.", "url": "https://github.com/apache/beam/pull/12670#discussion_r482860614", "createdAt": "2020-09-03T10:01:35Z", "author": {"login": "jithin-sukumar"}, "path": "sdks/java/io/elasticsearch/src/main/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIO.java", "diffHunk": "@@ -1346,17 +1359,36 @@ private static String lowerCaseOrNull(String input) {\n \n       @ProcessElement\n       public void processElement(ProcessContext context) throws Exception {\n-        String document = context.element();\n-        String documentMetadata = getDocumentMetadata(document);\n-\n-        // index is an insert/upsert and update is a partial update (or insert if not existing)\n-        if (spec.getUsePartialUpdate()) {\n-          batch.add(\n-              String.format(\n-                  \"{ \\\"update\\\" : %s }%n{ \\\"doc\\\" : %s, \\\"doc_as_upsert\\\" : true }%n\",\n-                  documentMetadata, document));\n+        String document = context.element(); // use configuration and auto-generated document IDs\n+        String documentMetadata = \"{}\";\n+        boolean isDelete = false;\n+        if (spec.getIndexFn() != null || spec.getTypeFn() != null || spec.getIdFn() != null) {\n+          // parse once and reused for efficiency\n+          JsonNode parsedDocument = OBJECT_MAPPER.readTree(document);\n+          documentMetadata = getDocumentMetadata(parsedDocument);\n+          if (spec.getIsDeleteFn() != null) {\n+            isDelete = spec.getIsDeleteFn().apply(parsedDocument);\n+            // if it is a delete opration, then it is mandatory to specify the document id using\n+            // getIdFn\n+            checkArgument(\n+                !(isDelete && spec.getIdFn() == null),\n+                \"Id needs to be specified by withIdFn for delete operation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyMjMyOQ=="}, "originalCommit": {"oid": "2f1329404413b959e9f62f003fc3fe2cf469df50"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzUwNzQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/elasticsearch/src/main/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDo0NDo1MFrOHMRAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDo0MDozNlrOHMguLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyMzUyOA==", "bodyText": "nit: I'd probably write this the other way so we don't have to reason about the double-negative:\nif (isDelete) {\n  // do a delete\n} else {\n  // do an insert/upsert\n}\nBut that's a big nit, feel free to leave it this way if you prefer.", "url": "https://github.com/apache/beam/pull/12670#discussion_r482623528", "createdAt": "2020-09-03T00:44:50Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/elasticsearch/src/main/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIO.java", "diffHunk": "@@ -1346,17 +1359,36 @@ private static String lowerCaseOrNull(String input) {\n \n       @ProcessElement\n       public void processElement(ProcessContext context) throws Exception {\n-        String document = context.element();\n-        String documentMetadata = getDocumentMetadata(document);\n-\n-        // index is an insert/upsert and update is a partial update (or insert if not existing)\n-        if (spec.getUsePartialUpdate()) {\n-          batch.add(\n-              String.format(\n-                  \"{ \\\"update\\\" : %s }%n{ \\\"doc\\\" : %s, \\\"doc_as_upsert\\\" : true }%n\",\n-                  documentMetadata, document));\n+        String document = context.element(); // use configuration and auto-generated document IDs\n+        String documentMetadata = \"{}\";\n+        boolean isDelete = false;\n+        if (spec.getIndexFn() != null || spec.getTypeFn() != null || spec.getIdFn() != null) {\n+          // parse once and reused for efficiency\n+          JsonNode parsedDocument = OBJECT_MAPPER.readTree(document);\n+          documentMetadata = getDocumentMetadata(parsedDocument);\n+          if (spec.getIsDeleteFn() != null) {\n+            isDelete = spec.getIsDeleteFn().apply(parsedDocument);\n+            // if it is a delete opration, then it is mandatory to specify the document id using\n+            // getIdFn\n+            checkArgument(\n+                !(isDelete && spec.getIdFn() == null),\n+                \"Id needs to be specified by withIdFn for delete operation\");\n+          }\n+        }\n+\n+        if (!isDelete) {\n+          // index is an insert/upsert and update is a partial update (or insert if not existing)\n+          if (spec.getUsePartialUpdate()) {\n+            batch.add(\n+                String.format(\n+                    \"{ \\\"update\\\" : %s }%n{ \\\"doc\\\" : %s, \\\"doc_as_upsert\\\" : true }%n\",\n+                    documentMetadata, document));\n+          } else {\n+            batch.add(String.format(\"{ \\\"index\\\" : %s }%n%s%n\", documentMetadata, document));\n+          }\n         } else {\n-          batch.add(String.format(\"{ \\\"index\\\" : %s }%n%s%n\", documentMetadata, document));\n+          // delete request used for deleting a document.\n+          batch.add(String.format(\"{ \\\"delete\\\" : %s }%n\", documentMetadata));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1329404413b959e9f62f003fc3fe2cf469df50"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MTA3MA==", "bodyText": "Sure, that is better for readability.", "url": "https://github.com/apache/beam/pull/12670#discussion_r482881070", "createdAt": "2020-09-03T10:40:36Z", "author": {"login": "jithin-sukumar"}, "path": "sdks/java/io/elasticsearch/src/main/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIO.java", "diffHunk": "@@ -1346,17 +1359,36 @@ private static String lowerCaseOrNull(String input) {\n \n       @ProcessElement\n       public void processElement(ProcessContext context) throws Exception {\n-        String document = context.element();\n-        String documentMetadata = getDocumentMetadata(document);\n-\n-        // index is an insert/upsert and update is a partial update (or insert if not existing)\n-        if (spec.getUsePartialUpdate()) {\n-          batch.add(\n-              String.format(\n-                  \"{ \\\"update\\\" : %s }%n{ \\\"doc\\\" : %s, \\\"doc_as_upsert\\\" : true }%n\",\n-                  documentMetadata, document));\n+        String document = context.element(); // use configuration and auto-generated document IDs\n+        String documentMetadata = \"{}\";\n+        boolean isDelete = false;\n+        if (spec.getIndexFn() != null || spec.getTypeFn() != null || spec.getIdFn() != null) {\n+          // parse once and reused for efficiency\n+          JsonNode parsedDocument = OBJECT_MAPPER.readTree(document);\n+          documentMetadata = getDocumentMetadata(parsedDocument);\n+          if (spec.getIsDeleteFn() != null) {\n+            isDelete = spec.getIsDeleteFn().apply(parsedDocument);\n+            // if it is a delete opration, then it is mandatory to specify the document id using\n+            // getIdFn\n+            checkArgument(\n+                !(isDelete && spec.getIdFn() == null),\n+                \"Id needs to be specified by withIdFn for delete operation\");\n+          }\n+        }\n+\n+        if (!isDelete) {\n+          // index is an insert/upsert and update is a partial update (or insert if not existing)\n+          if (spec.getUsePartialUpdate()) {\n+            batch.add(\n+                String.format(\n+                    \"{ \\\"update\\\" : %s }%n{ \\\"doc\\\" : %s, \\\"doc_as_upsert\\\" : true }%n\",\n+                    documentMetadata, document));\n+          } else {\n+            batch.add(String.format(\"{ \\\"index\\\" : %s }%n%s%n\", documentMetadata, document));\n+          }\n         } else {\n-          batch.add(String.format(\"{ \\\"index\\\" : %s }%n%s%n\", documentMetadata, document));\n+          // delete request used for deleting a document.\n+          batch.add(String.format(\"{ \\\"delete\\\" : %s }%n\", documentMetadata));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyMzUyOA=="}, "originalCommit": {"oid": "2f1329404413b959e9f62f003fc3fe2cf469df50"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 571, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}