{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTE4MTA0", "number": 12027, "title": "[BEAM-9179] Refactor Beam ZetaSQL type translation code", "bodyText": "This PR refactors Beam ZetaSQL type translation code.\nAfter the refactor:\nZetaSqlBeamTranslationUtils.java contains utility methods for translation between ZetaSQL and Beam.\nZetaSqlCalciteTranslationUtils.java contains utility methods for translation between ZetaSQL and Calcite.\nr: @robinyqiu\ncc: @apilloud\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-17T21:59:28Z", "url": "https://github.com/apache/beam/pull/12027", "merged": true, "mergeCommit": {"oid": "99055cffc040d991e4fe73953da06bcc56764fc7"}, "closed": true, "closedAt": "2020-06-19T05:06:39Z", "author": {"login": "ZijieSong946"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsRAtvgH2gAyNDM2MTE4MTA0OjZjNWMwZDExOWM4YzRhYjcwMGUzMDA0MDRhNzNjOGE4NGUxYTQ2MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsmwFmAH2gAyNDM2MTE4MTA0OjE1NjQ0OWY1YWZjMTEwMmNiMGFhZWVkYTc0ZDM2NzQwMDkzYWViMzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "committedDate": "2020-06-17T21:47:55Z", "message": "[BEAM-9179] Refactor Beam ZetaSQL type translation code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODEwMDE5", "url": "https://github.com/apache/beam/pull/12027#pullrequestreview-432810019", "createdAt": "2020-06-17T22:05:29Z", "commit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowNToyOVrOGlZAWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1ODo0NlrOGl4PNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDE4Ng==", "bodyText": "You can write 100L to create a java Long literal.", "url": "https://github.com/apache/beam/pull/12027#discussion_r441860186", "createdAt": "2020-06-17T22:05:29Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java", "diffHunk": "@@ -195,7 +195,8 @@ private static void initializeCalciteEnvironmentWithContext(Context... extraCont\n   private static void initializeBeamTableProvider() {\n     Table projectTable = getTable(\"InMemoryTableProject\", PushDownOptions.PROJECT);\n     Table bothTable = getTable(\"InMemoryTableBoth\", PushDownOptions.BOTH);\n-    Row[] rows = {row(BASIC_SCHEMA, 100, 1, \"one\", 100), row(BASIC_SCHEMA, 200, 2, \"two\", 200)};\n+    Row[] rows = {row(BASIC_SCHEMA, (long) 100, (long) 1, \"one\", (long) 100),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDYyNQ==", "bodyText": "Could you mark this utility class as final and add a private constructor, like ZetaSqlBeamTranslationUtils.java?", "url": "https://github.com/apache/beam/pull/12027#discussion_r442354625", "createdAt": "2020-06-18T16:30:42Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg==", "bodyText": "We don't have TIME support at this point. Can we get this entry removed?\n(Also, just curious can the MAP entry below be removed as well? Not sure if any code is using that.)", "url": "https://github.com/apache/beam/pull/12027#discussion_r442371892", "createdAt": "2020-06-18T16:58:46Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTQ1NjA0", "url": "https://github.com/apache/beam/pull/12027#pullrequestreview-433545604", "createdAt": "2020-06-18T18:33:16Z", "commit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMzoxNlrOGl7blg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozNDowOFrOGl7dTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNDIxNA==", "bodyText": "I believe #10158 dropped the need for MAP. You might verify it can be removed with @TheNeuralBit", "url": "https://github.com/apache/beam/pull/12027#discussion_r442424214", "createdAt": "2020-06-18T18:33:16Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNDY1Mg==", "bodyText": "Thanks for cleaning up after my C developer instinct to call itoa everywhere.", "url": "https://github.com/apache/beam/pull/12027#discussion_r442424652", "createdAt": "2020-06-18T18:34:08Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -134,7 +138,7 @@ public static RelDataType toArrayRelDataType(\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n       if (\"\".equals(name)) {\n-        name = \"$col\" + String.valueOf(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cfdceee2df3e8404f3a001fcbb8ae9060967564", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/5cfdceee2df3e8404f3a001fcbb8ae9060967564", "committedDate": "2020-06-18T20:38:54Z", "message": "[BEAM-9179] Refactor Beam ZetaSQL type translation code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjUwNTEy", "url": "https://github.com/apache/beam/pull/12027#pullrequestreview-433650512", "createdAt": "2020-06-18T21:11:37Z", "commit": {"oid": "5cfdceee2df3e8404f3a001fcbb8ae9060967564"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "156449f5afc1102cb0aaeeda74d36740093aeb38", "author": {"user": {"login": "ZijieSong946", "name": "Zijie Song"}}, "url": "https://github.com/apache/beam/commit/156449f5afc1102cb0aaeeda74d36740093aeb38", "committedDate": "2020-06-18T23:07:40Z", "message": "CheckStyle bug fixed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3555, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}