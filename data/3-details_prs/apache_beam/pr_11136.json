{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MTczODAx", "number": 11136, "title": "[BEAM-7505] Add side input load test to Python SDK ", "bodyText": "Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-16T11:38:36Z", "url": "https://github.com/apache/beam/pull/11136", "merged": true, "mergeCommit": {"oid": "789d2ee3791f711d8f2b681ed85d261671d9476f"}, "closed": true, "closedAt": "2020-03-26T10:33:17Z", "author": {"login": "kamilwu"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOMST6gH2gAyMzg5MTczODAxOjBiMzIwMDEzMTljMjMxNzZmYzRhNjM5ZjMxY2U0ZmNkZDBiYjcyNWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPonCHgFqTM3ODg1MjU1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b32001319c23176fc4a639f31ce4fcdd0bb725f", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/0b32001319c23176fc4a639f31ce4fcdd0bb725f", "committedDate": "2020-03-16T11:19:53Z", "message": "[BEAM-7505] Remove old side input test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c", "committedDate": "2020-03-16T11:29:14Z", "message": "[BEAM-7505] Add side input load test to Python SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzM2NDYx", "url": "https://github.com/apache/beam/pull/11136#pullrequestreview-377336461", "createdAt": "2020-03-19T00:28:41Z", "commit": {"oid": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowMjoyNFrOF46UJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxODo1NlrOF465VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMDAwNQ==", "bodyText": "It'd be helpful to list the types here, too.", "url": "https://github.com/apache/beam/pull/11136#discussion_r395220005", "createdAt": "2020-03-19T18:02:24Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -47,65 +49,154 @@\n or:\n \n ./gradlew -PloadTest.args=\"\n-    --publish_to_big_query=true\n-    --project=...\n-    --metrics_dataset=python_load_tests\n-    --metrics_table=side_input\n+    --side_input_type=iter\n     --input_options='{\n-      \\\"num_records\\\": 1,\n-      \\\"key_size\\\": 1,\n-      \\\"value_size\\\": 1}'\n-    --runner=DirectRunner\" \\\n+      \\\"num_records\\\": 300,\n+      \\\"key_size\\\": 5,\n+      \\\"value_size\\\": 15}'\" \\\n -PloadTest.mainClass=apache_beam.testing.load_tests.sideinput_test \\\n -Prunner=DirectRunner :sdks:python:apache_beam:testing:load_tests:run\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n+from __future__ import division\n \n import logging\n \n import apache_beam as beam\n-from apache_beam.pvalue import AsIter\n from apache_beam.testing.load_tests.load_test import LoadTest\n from apache_beam.testing.load_tests.load_test_metrics_utils import MeasureTime\n from apache_beam.testing.synthetic_pipeline import SyntheticSource\n \n \n class SideInputTest(LoadTest):\n+  SIDE_INPUT_TYPES = {\n+      'iter': beam.pvalue.AsIter,\n+      'list': beam.pvalue.AsList,\n+      'dict': beam.pvalue.AsDict,\n+  }\n+\n   def __init__(self):\n     super(SideInputTest, self).__init__()\n-    self.iterations = self.get_option_or_default(\n-        'number_of_counter_operations', 1)\n+    self.windows = self.get_option_or_default('window_count', default=0)\n+    self.access_percentage = self.get_option_or_default(\n+        'access_percentage', default=100)\n+    if self.access_percentage < 0 or self.access_percentage > 100:\n+      raise ValueError(\n+          'access_percentage: Invalid value. Should be in range '\n+          'from 0 to 100, got {} instead'.format(self.access_percentage))\n+\n+    self.side_input_size = self.get_option_or_default(\n+        'side_input_size', default=0)\n+    if self.side_input_size == 0:\n+      self.side_input_size = self.input_options.get('num_records')\n+\n+    self.side_input_type = self.pipeline.get_option('side_input_type')\n+    if self.side_input_type is None:\n+      raise ValueError('side_input_type is required')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTYzNg==", "bodyText": "For first_n < len(side_input), wouldn't we access a total of first_n + 1 elements?", "url": "https://github.com/apache/beam/pull/11136#discussion_r395225636", "createdAt": "2020-03-19T18:12:13Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -47,65 +49,154 @@\n or:\n \n ./gradlew -PloadTest.args=\"\n-    --publish_to_big_query=true\n-    --project=...\n-    --metrics_dataset=python_load_tests\n-    --metrics_table=side_input\n+    --side_input_type=iter\n     --input_options='{\n-      \\\"num_records\\\": 1,\n-      \\\"key_size\\\": 1,\n-      \\\"value_size\\\": 1}'\n-    --runner=DirectRunner\" \\\n+      \\\"num_records\\\": 300,\n+      \\\"key_size\\\": 5,\n+      \\\"value_size\\\": 15}'\" \\\n -PloadTest.mainClass=apache_beam.testing.load_tests.sideinput_test \\\n -Prunner=DirectRunner :sdks:python:apache_beam:testing:load_tests:run\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n+from __future__ import division\n \n import logging\n \n import apache_beam as beam\n-from apache_beam.pvalue import AsIter\n from apache_beam.testing.load_tests.load_test import LoadTest\n from apache_beam.testing.load_tests.load_test_metrics_utils import MeasureTime\n from apache_beam.testing.synthetic_pipeline import SyntheticSource\n \n \n class SideInputTest(LoadTest):\n+  SIDE_INPUT_TYPES = {\n+      'iter': beam.pvalue.AsIter,\n+      'list': beam.pvalue.AsList,\n+      'dict': beam.pvalue.AsDict,\n+  }\n+\n   def __init__(self):\n     super(SideInputTest, self).__init__()\n-    self.iterations = self.get_option_or_default(\n-        'number_of_counter_operations', 1)\n+    self.windows = self.get_option_or_default('window_count', default=0)\n+    self.access_percentage = self.get_option_or_default(\n+        'access_percentage', default=100)\n+    if self.access_percentage < 0 or self.access_percentage > 100:\n+      raise ValueError(\n+          'access_percentage: Invalid value. Should be in range '\n+          'from 0 to 100, got {} instead'.format(self.access_percentage))\n+\n+    self.side_input_size = self.get_option_or_default(\n+        'side_input_size', default=0)\n+    if self.side_input_size == 0:\n+      self.side_input_size = self.input_options.get('num_records')\n+\n+    self.side_input_type = self.pipeline.get_option('side_input_type')\n+    if self.side_input_type is None:\n+      raise ValueError('side_input_type is required')\n+\n+  def materialize_as(self):\n+    try:\n+      return self.SIDE_INPUT_TYPES[self.side_input_type]\n+    except KeyError:\n+      raise ValueError(\n+          'Unknown side input type. You have to provide one of '\n+          'these: {}'.format(list(self.SIDE_INPUT_TYPES.keys())))\n \n   def test(self):\n-    def join_fn(element, side_input, iterations):\n-      result = []\n-      for i in range(iterations):\n-        for key, value in side_input:\n-          if i == iterations - 1:\n-            result.append({key: element[1] + value})\n-      yield result\n-\n-    main_input = (\n+    class SequenceSideInputTestDoFn(beam.DoFn):\n+      \"\"\"Iterate over first n side_input elements. Iterate over all\n+      elements if `first_n` is :data:`None`.\"\"\"\n+      def __init__(self, first_n=None):\n+        self._first_n = first_n\n+\n+      def process(self, unused_element, side_input):\n+        for i, _ in enumerate(side_input):\n+          if self._first_n and i >= self._first_n:\n+            return\n+          # No-op. We only make sure that the element is accessed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTUyNQ==", "bodyText": "Is there any particular reason we need to use the real time? If not, it would be easier to read timestamps if we start at 0.", "url": "https://github.com/apache/beam/pull/11136#discussion_r395229525", "createdAt": "2020-03-19T18:18:56Z", "author": {"login": "ibzib"}, "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -47,65 +49,154 @@\n or:\n \n ./gradlew -PloadTest.args=\"\n-    --publish_to_big_query=true\n-    --project=...\n-    --metrics_dataset=python_load_tests\n-    --metrics_table=side_input\n+    --side_input_type=iter\n     --input_options='{\n-      \\\"num_records\\\": 1,\n-      \\\"key_size\\\": 1,\n-      \\\"value_size\\\": 1}'\n-    --runner=DirectRunner\" \\\n+      \\\"num_records\\\": 300,\n+      \\\"key_size\\\": 5,\n+      \\\"value_size\\\": 15}'\" \\\n -PloadTest.mainClass=apache_beam.testing.load_tests.sideinput_test \\\n -Prunner=DirectRunner :sdks:python:apache_beam:testing:load_tests:run\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n+from __future__ import division\n \n import logging\n \n import apache_beam as beam\n-from apache_beam.pvalue import AsIter\n from apache_beam.testing.load_tests.load_test import LoadTest\n from apache_beam.testing.load_tests.load_test_metrics_utils import MeasureTime\n from apache_beam.testing.synthetic_pipeline import SyntheticSource\n \n \n class SideInputTest(LoadTest):\n+  SIDE_INPUT_TYPES = {\n+      'iter': beam.pvalue.AsIter,\n+      'list': beam.pvalue.AsList,\n+      'dict': beam.pvalue.AsDict,\n+  }\n+\n   def __init__(self):\n     super(SideInputTest, self).__init__()\n-    self.iterations = self.get_option_or_default(\n-        'number_of_counter_operations', 1)\n+    self.windows = self.get_option_or_default('window_count', default=0)\n+    self.access_percentage = self.get_option_or_default(\n+        'access_percentage', default=100)\n+    if self.access_percentage < 0 or self.access_percentage > 100:\n+      raise ValueError(\n+          'access_percentage: Invalid value. Should be in range '\n+          'from 0 to 100, got {} instead'.format(self.access_percentage))\n+\n+    self.side_input_size = self.get_option_or_default(\n+        'side_input_size', default=0)\n+    if self.side_input_size == 0:\n+      self.side_input_size = self.input_options.get('num_records')\n+\n+    self.side_input_type = self.pipeline.get_option('side_input_type')\n+    if self.side_input_type is None:\n+      raise ValueError('side_input_type is required')\n+\n+  def materialize_as(self):\n+    try:\n+      return self.SIDE_INPUT_TYPES[self.side_input_type]\n+    except KeyError:\n+      raise ValueError(\n+          'Unknown side input type. You have to provide one of '\n+          'these: {}'.format(list(self.SIDE_INPUT_TYPES.keys())))\n \n   def test(self):\n-    def join_fn(element, side_input, iterations):\n-      result = []\n-      for i in range(iterations):\n-        for key, value in side_input:\n-          if i == iterations - 1:\n-            result.append({key: element[1] + value})\n-      yield result\n-\n-    main_input = (\n+    class SequenceSideInputTestDoFn(beam.DoFn):\n+      \"\"\"Iterate over first n side_input elements. Iterate over all\n+      elements if `first_n` is :data:`None`.\"\"\"\n+      def __init__(self, first_n=None):\n+        self._first_n = first_n\n+\n+      def process(self, unused_element, side_input):\n+        for i, _ in enumerate(side_input):\n+          if self._first_n and i >= self._first_n:\n+            return\n+          # No-op. We only make sure that the element is accessed.\n+\n+    class MappingSideInputTestDoFn(beam.DoFn):\n+      \"\"\"Take a sequence of keys as an additional side input and for each\n+      key in the sequence checks the value for key in the dictionary.\"\"\"\n+      def process(self, unused_element, dict_side_input, keys_to_check):\n+        for key in keys_to_check:\n+          # No-op. We only make sure that the element is accessed.\n+          dict_side_input[key]\n+\n+    class GetRandomKeys(beam.DoFn):\n+      def __init__(self, n):\n+        self._n = n\n+\n+      def process(self, unused_element, dict_side_input):\n+        import random\n+        n = min(self._n, len(dict_side_input))\n+        return random.sample(dict_side_input.keys(), n)\n+\n+    class AddEventTimestamps(beam.DoFn):\n+      \"\"\"Assign timestamp to each element of PCollection, starting from the\n+      current Unix seconds-since-epoch timestamp.\"\"\"\n+      def setup(self):\n+        import time\n+        self.current_time = int(time.time())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c"}, "originalPosition": 163}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1641f324fd4f0ba3d6798de09d645c9f5178ba4a", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/1641f324fd4f0ba3d6798de09d645c9f5178ba4a", "committedDate": "2020-03-20T13:17:04Z", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* assign timestamps starting from 0"}, "afterCommit": {"oid": "933022ac5f18a185f2fd62c157bb3578738000fe", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/933022ac5f18a185f2fd62c157bb3578738000fe", "committedDate": "2020-03-20T14:32:47Z", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* assign timestamps starting from 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce6d540dc57760e1c092739b743947cf954b912", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/2ce6d540dc57760e1c092739b743947cf954b912", "committedDate": "2020-03-20T14:37:24Z", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* use while loop for iterating over a sequence\n* assign timestamps starting from 0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "933022ac5f18a185f2fd62c157bb3578738000fe", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/933022ac5f18a185f2fd62c157bb3578738000fe", "committedDate": "2020-03-20T14:32:47Z", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* assign timestamps starting from 0"}, "afterCommit": {"oid": "2ce6d540dc57760e1c092739b743947cf954b912", "author": {"user": {"login": "kamilwu", "name": "Kamil Wasilewski"}}, "url": "https://github.com/apache/beam/commit/2ce6d540dc57760e1c092739b743947cf954b912", "committedDate": "2020-03-20T14:37:24Z", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* use while loop for iterating over a sequence\n* assign timestamps starting from 0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODUyNTUy", "url": "https://github.com/apache/beam/pull/11136#pullrequestreview-378852552", "createdAt": "2020-03-20T22:53:47Z", "commit": {"oid": "2ce6d540dc57760e1c092739b743947cf954b912"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4962, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}