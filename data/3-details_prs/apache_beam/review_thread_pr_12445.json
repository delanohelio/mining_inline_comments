{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzI5OTU5", "number": 12445, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyOTo0NVrOEUw5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1NzozM1rOEZQuzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA4MDc0OnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ValidateRunnerXlangTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyOTo0NVrOG7JWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNTo0NlrOG7zYBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MjM3OQ==", "bodyText": "Let's keep these unrelated documentation updates in a separate PR.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464672379", "createdAt": "2020-08-03T21:29:45Z", "author": {"login": "chamikaramj"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ValidateRunnerXlangTest.java", "diffHunk": "@@ -177,6 +232,14 @@ public void coGroupByKeyTest() {\n     PAssert.that(col).containsInAnyOrder(\"0:1,2,4\", \"1:3,5,6\");\n   }\n \n+  /**\n+   * Motivation behind combineGloballyTest.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDkwMQ==", "bodyText": "Resolving since this was caused due to botched git workflows and have since been corrected.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465360901", "createdAt": "2020-08-04T22:15:46Z", "author": {"login": "pskevin"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ValidateRunnerXlangTest.java", "diffHunk": "@@ -177,6 +232,14 @@ public void coGroupByKeyTest() {\n     PAssert.that(col).containsInAnyOrder(\"0:1,2,4\", \"1:3,5,6\");\n   }\n \n+  /**\n+   * Motivation behind combineGloballyTest.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MjM3OQ=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA4MzI4OnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/input", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozMDozM1rOG7JX8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNjowNlrOG7zYeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3Mjc1Mg==", "bodyText": "Is it possible to use a generated input for tests instead of committing this file ?", "url": "https://github.com/apache/beam/pull/12445#discussion_r464672752", "createdAt": "2020-08-03T21:30:33Z", "author": {"login": "chamikaramj"}, "path": "sdks/go/examples/xlang/wordcount/input", "diffHunk": "@@ -0,0 +1,5 @@\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris id tellus vehicula, rutrum turpis quis, suscipit est. Quisque vehicula nec ex a interdum. Phasellus vulputate nunc sit amet nisl dapibus tincidunt ut ullamcorper nisi. Mauris gravida porta leo vel congue. Duis sit amet arcu eu nisl pharetra interdum a eget enim. Nulla facilisis massa ut egestas interdum. Nunc elit dui, hendrerit at pharetra a, pellentesque non turpis. Integer auctor vulputate congue. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Ut sagittis convallis lorem non semper. Ut ultrices elit a enim pulvinar fermentum.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNzI5MA==", "bodyText": "+1. For example/demo reasons, we can just do an \"in memory\" file instead.\nAKA, copy pasted this into a variable (note the back tics for go's Raw string handling, eg for the newlines.)\nconst lorem = `\nLorem ipsum...\n`\n, and load that into beam.Create. One of the wordcount examples does this.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464717290", "createdAt": "2020-08-03T23:39:29Z", "author": {"login": "lostluck"}, "path": "sdks/go/examples/xlang/wordcount/input", "diffHunk": "@@ -0,0 +1,5 @@\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris id tellus vehicula, rutrum turpis quis, suscipit est. Quisque vehicula nec ex a interdum. Phasellus vulputate nunc sit amet nisl dapibus tincidunt ut ullamcorper nisi. Mauris gravida porta leo vel congue. Duis sit amet arcu eu nisl pharetra interdum a eget enim. Nulla facilisis massa ut egestas interdum. Nunc elit dui, hendrerit at pharetra a, pellentesque non turpis. Integer auctor vulputate congue. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Ut sagittis convallis lorem non semper. Ut ultrices elit a enim pulvinar fermentum.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3Mjc1Mg=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTAxOA==", "bodyText": "Makes sense! Ack.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465361018", "createdAt": "2020-08-04T22:16:06Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/input", "diffHunk": "@@ -0,0 +1,5 @@\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris id tellus vehicula, rutrum turpis quis, suscipit est. Quisque vehicula nec ex a interdum. Phasellus vulputate nunc sit amet nisl dapibus tincidunt ut ullamcorper nisi. Mauris gravida porta leo vel congue. Duis sit amet arcu eu nisl pharetra interdum a eget enim. Nulla facilisis massa ut egestas interdum. Nunc elit dui, hendrerit at pharetra a, pellentesque non turpis. Integer auctor vulputate congue. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Ut sagittis convallis lorem non semper. Ut ultrices elit a enim pulvinar fermentum.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3Mjc1Mg=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA4Mzg0OnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozMDo0N1rOG7JYRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNjoyOFrOG7zZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MjgzNw==", "bodyText": "You need to add Apache license to all new files.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464672837", "createdAt": "2020-08-03T21:30:47Z", "author": {"login": "chamikaramj"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTI0Mw==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465361243", "createdAt": "2020-08-04T22:16:28Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MjgzNw=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA4NjgzOnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozMTo1MFrOG7JZ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozMTo1MFrOG7JZ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MzI2Ng==", "bodyText": "Woohoo!", "url": "https://github.com/apache/beam/pull/12445#discussion_r464673266", "createdAt": "2020-08-03T21:31:50Z", "author": {"login": "chamikaramj"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.\n+\tflag.Parse()\n+\t// beam.Init() is an initialization hook that must be called on startup. On\n+\t// distributed runners, it is used to intercept control.\n+\tbeam.Init()\n+\n+\t// Input validation is done as usual. Note that it must be after Init().\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\t// Concepts #3 and #4: The pipeline uses the named transform and DoFn.\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\t// Convert lines of text into individual words.\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA5MTEwOnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozMzoyMVrOG7JcgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoyNzowOFrOG7zo1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MzkyMA==", "bodyText": "Can we directly setup 'CrossLanguage' transform as the primary user API instead of having to setup a separate ExternalTransform struct ?", "url": "https://github.com/apache/beam/pull/12445#discussion_r464673920", "createdAt": "2020-08-03T21:33:21Z", "author": {"login": "chamikaramj"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.\n+\tflag.Parse()\n+\t// beam.Init() is an initialization hook that must be called on startup. On\n+\t// distributed runners, it is used to intercept control.\n+\tbeam.Init()\n+\n+\t// Input validation is done as usual. Note that it must be after Init().\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\t// Concepts #3 and #4: The pipeline uses the named transform and DoFn.\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\t// Convert lines of text into individual words.\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",\n+\t\tOut:           []typex.FullType{outputType},\n+\t\tBounded:       true, // TODO(pskevin): Infer this value from output PCollection(s) part of the expanded tranform\n+\t}\n+\tcounted := beam.CrossLanguage(s, p, external) // TODO(pskevin): Add external transform to Pipeline without passing it to the transform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTI1Ng==", "bodyText": "+1 I would strongly prefer not having a separate ExternalTransform struct. Pass the arguments in. I wouldn't worry about trying to accommodate the previous External api.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464719256", "createdAt": "2020-08-03T23:46:14Z", "author": {"login": "lostluck"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.\n+\tflag.Parse()\n+\t// beam.Init() is an initialization hook that must be called on startup. On\n+\t// distributed runners, it is used to intercept control.\n+\tbeam.Init()\n+\n+\t// Input validation is done as usual. Note that it must be after Init().\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\t// Concepts #3 and #4: The pipeline uses the named transform and DoFn.\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\t// Convert lines of text into individual words.\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",\n+\t\tOut:           []typex.FullType{outputType},\n+\t\tBounded:       true, // TODO(pskevin): Infer this value from output PCollection(s) part of the expanded tranform\n+\t}\n+\tcounted := beam.CrossLanguage(s, p, external) // TODO(pskevin): Add external transform to Pipeline without passing it to the transform", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MzkyMA=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NTIwNg==", "bodyText": "Ack.\nAll references to the previous API are just placeholders where (in the future) code to port the legacy API will go. They don't influence how the current API is being developed. In fact it's just a bonus that the previous API can be cleanly supported.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465365206", "createdAt": "2020-08-04T22:27:08Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.\n+\tflag.Parse()\n+\t// beam.Init() is an initialization hook that must be called on startup. On\n+\t// distributed runners, it is used to intercept control.\n+\tbeam.Init()\n+\n+\t// Input validation is done as usual. Note that it must be after Init().\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\t// Concepts #3 and #4: The pipeline uses the named transform and DoFn.\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\t// Convert lines of text into individual words.\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",\n+\t\tOut:           []typex.FullType{outputType},\n+\t\tBounded:       true, // TODO(pskevin): Infer this value from output PCollection(s) part of the expanded tranform\n+\t}\n+\tcounted := beam.CrossLanguage(s, p, external) // TODO(pskevin): Add external transform to Pipeline without passing it to the transform", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MzkyMA=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA5ODkzOnYy", "diffSide": "RIGHT", "path": "sdks/python/Pipfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozNjozMlrOG7JhfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxODoyNVrOG7zcDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTE5Nw==", "bodyText": "Do we need this ?", "url": "https://github.com/apache/beam/pull/12445#discussion_r464675197", "createdAt": "2020-08-03T21:36:32Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/Pipfile", "diffHunk": "@@ -0,0 +1,12 @@\n+[[source]]\n+name = \"pypi\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTkzNA==", "bodyText": "Resolving since this was caused due to botched git workflows and have since been corrected.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465361934", "createdAt": "2020-08-04T22:18:25Z", "author": {"login": "pskevin"}, "path": "sdks/python/Pipfile", "diffHunk": "@@ -0,0 +1,12 @@\n+[[source]]\n+name = \"pypi\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTE5Nw=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA5OTMxOnYy", "diffSide": "RIGHT", "path": "sdks/python/Pipfile.lock", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozNjo0M1rOG7Jhvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxODozMlrOG7zcLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTI2Mw==", "bodyText": "Ditto.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464675263", "createdAt": "2020-08-03T21:36:43Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/Pipfile.lock", "diffHunk": "@@ -0,0 +1,946 @@\n+{\n+    \"_meta\": {\n+        \"hash\": {\n+            \"sha256\": \"4d830f0b6c127288985ac4b35fef456c1bfcd8ffb2d771f32593d302e04bb80c\"\n+        },\n+        \"pipfile-spec\": 6,\n+        \"requires\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTk2Nw==", "bodyText": "Resolving since this was caused due to botched git workflows and have since been corrected.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465361967", "createdAt": "2020-08-04T22:18:32Z", "author": {"login": "pskevin"}, "path": "sdks/python/Pipfile.lock", "diffHunk": "@@ -0,0 +1,946 @@\n+{\n+    \"_meta\": {\n+        \"hash\": {\n+            \"sha256\": \"4d830f0b6c127288985ac4b35fef456c1bfcd8ffb2d771f32593d302e04bb80c\"\n+        },\n+        \"pipfile-spec\": 6,\n+        \"requires\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTI2Mw=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjEwMTE2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/wordcount_docker.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozNzoyNFrOG7Ji0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxODo0OVrOG7zclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTUzNg==", "bodyText": "Probably extract out these wordcount_xxx updates to a separate PR.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464675536", "createdAt": "2020-08-03T21:37:24Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/examples/wordcount_docker.py", "diffHunk": "@@ -0,0 +1,148 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MjA2OQ==", "bodyText": "Resolving since this was caused due to botched git workflows and have since been corrected.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465362069", "createdAt": "2020-08-04T22:18:49Z", "author": {"login": "pskevin"}, "path": "sdks/python/apache_beam/examples/wordcount_docker.py", "diffHunk": "@@ -0,0 +1,148 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTUzNg=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjEwMjk0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/validate_runner_xlang_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozODowM1rOG7Jj9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxODozOVrOG7zcVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTgyOQ==", "bodyText": "Ditto regarding keeping these documentation updates in the other PR.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464675829", "createdAt": "2020-08-03T21:38:03Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/transforms/validate_runner_xlang_test.py", "diffHunk": "@@ -14,6 +14,42 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n #\n+\n+\"\"\"\n+###########################################################\n+Runner Validation Test Suite for Cross-language Transforms\n+###########################################################\n+ As per Beams's Portability Framework design, Cross-language transforms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MjAwNw==", "bodyText": "Resolving since this was caused due to botched git workflows and have since been corrected.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465362007", "createdAt": "2020-08-04T22:18:39Z", "author": {"login": "pskevin"}, "path": "sdks/python/apache_beam/transforms/validate_runner_xlang_test.py", "diffHunk": "@@ -14,6 +14,42 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n #\n+\n+\"\"\"\n+###########################################################\n+Runner Validation Test Suite for Cross-language Transforms\n+###########################################################\n+ As per Beams's Portability Framework design, Cross-language transforms", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NTgyOQ=="}, "originalCommit": {"oid": "f04e9faf616717bb8c4bb3dbf4b6be70fcbb01a6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM4MzQ2OnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0MTo1MFrOG7MIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoyODowM1rOG7zqAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNzk5Ng==", "bodyText": "Arguably we can remove this line for debugging.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464717996", "createdAt": "2020-08-03T23:41:50Z", "author": {"login": "lostluck"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NTUwNg==", "bodyText": "Thanks for catching that! Ack.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465365506", "createdAt": "2020-08-04T22:28:03Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNzk5Ng=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM4NjkxOnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0MzozOVrOG7MKrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNToxODoxNVrOG76jWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxODUxMA==", "bodyText": "Go packages and binaries should have a doc string with a blank line between it and the apache license.\n// xlang_wordcount use a cross language transform from Python to count words from a file.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464718510", "createdAt": "2020-08-03T23:43:39Z", "author": {"login": "lostluck"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ3ODQ5MA==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465478490", "createdAt": "2020-08-05T05:18:15Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxODUxMA=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM4OTIyOnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0NDo1MlrOG7ML_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo0MzoyMVrOG7z-vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxODg0NQ==", "bodyText": "Feel free to delete the copy pasted documentation from the original wordcount here, it doesn't need to be repeated as it draws focus away from the important part: Cross Language.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464718845", "createdAt": "2020-08-03T23:44:52Z", "author": {"login": "lostluck"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MDgxMw==", "bodyText": "Thanks for catching that! Will do.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465370813", "createdAt": "2020-08-04T22:43:21Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxODg0NQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM5MjQxOnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0NjoyOVrOG7MN4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo0MzozOVrOG7z_HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTMzMQ==", "bodyText": "Same comment here: Delete the unnecessary extra documentation.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464719331", "createdAt": "2020-08-03T23:46:29Z", "author": {"login": "lostluck"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.\n+\tflag.Parse()\n+\t// beam.Init() is an initialization hook that must be called on startup. On\n+\t// distributed runners, it is used to intercept control.\n+\tbeam.Init()\n+\n+\t// Input validation is done as usual. Note that it must be after Init().\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\t// Concepts #3 and #4: The pipeline uses the named transform and DoFn.\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\t// Convert lines of text into individual words.\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",\n+\t\tOut:           []typex.FullType{outputType},\n+\t\tBounded:       true, // TODO(pskevin): Infer this value from output PCollection(s) part of the expanded tranform\n+\t}\n+\tcounted := beam.CrossLanguage(s, p, external) // TODO(pskevin): Add external transform to Pipeline without passing it to the transform\n+\n+\tformatted := beam.ParDo(s, formatFn, counted[0])\n+\ttextio.Write(s, *output, formatted)\n+\n+\t// Concept #1: The beamx.Run convenience wrapper allows a number of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MDkwOA==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465370908", "createdAt": "2020-08-04T22:43:39Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,100 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\tfmt.Println(w, c)\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\t// If beamx or Go flags are used, flags must be parsed first.\n+\tflag.Parse()\n+\t// beam.Init() is an initialization hook that must be called on startup. On\n+\t// distributed runners, it is used to intercept control.\n+\tbeam.Init()\n+\n+\t// Input validation is done as usual. Note that it must be after Init().\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\t// Concepts #3 and #4: The pipeline uses the named transform and DoFn.\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\t// Convert lines of text into individual words.\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",\n+\t\tOut:           []typex.FullType{outputType},\n+\t\tBounded:       true, // TODO(pskevin): Infer this value from output PCollection(s) part of the expanded tranform\n+\t}\n+\tcounted := beam.CrossLanguage(s, p, external) // TODO(pskevin): Add external transform to Pipeline without passing it to the transform\n+\n+\tformatted := beam.ParDo(s, formatFn, counted[0])\n+\ttextio.Write(s, *output, formatted)\n+\n+\t// Concept #1: The beamx.Run convenience wrapper allows a number of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTMzMQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM5MzkzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0NzoyOFrOG7MO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowOToyMlrOG8S46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTU4MA==", "bodyText": "As mentioned, don't worry about the legacy API at this point, focus on a clean implementation of the new API.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464719580", "createdAt": "2020-08-03T23:47:28Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NzIyNA==", "bodyText": "Note, by this comment, the intent was for you to remove this dead code, as it's unnecessary.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465877224", "createdAt": "2020-08-05T17:09:22Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTU4MA=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM5NTAzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0ODowNVrOG7MPgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1MDoyMlrOG70Ijw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTc0NQ==", "bodyText": "Uncomment this validation please, and remove the print out.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464719745", "createdAt": "2020-08-03T23:48:05Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MzMyNw==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465373327", "createdAt": "2020-08-04T22:50:22Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTc0NQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM5NTczOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0ODozOVrOG7MP-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNToyMTowMlrOG76mpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTg2NQ==", "bodyText": "Either remove this block comment entirely, or convert it to a line comment and fix the typo.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464719865", "createdAt": "2020-08-03T23:48:39Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MzI5Ng==", "bodyText": "I'm definitely missing something since I can't see any typo. Could you be more explicit?\nAlso, the block comments were meant just to separate sections of independent logic which I expect to break down into functions during clean up. Should I remove all the block comments?", "url": "https://github.com/apache/beam/pull/12445#discussion_r465373296", "createdAt": "2020-08-04T22:50:16Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTg2NQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MDU2Mw==", "bodyText": "ExternalTranform should be ExternalTransform.\nI'd prefer no block comments. They're uncommon in Go code.\nTo be clear, commenting on what the next sections of code is what comments are for. They don't need to take up so much space though.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465380563", "createdAt": "2020-08-04T23:12:25Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTg2NQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4MDgyMQ==", "bodyText": "To be pedantically clear: No block comments doesn't mean no comments. In my original comment, I suggested the line comment alternative.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465380821", "createdAt": "2020-08-04T23:13:19Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTg2NQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ3OTMzMg==", "bodyText": "Thanks for clarifying in detail. Reflected the changes.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465479332", "createdAt": "2020-08-05T05:21:02Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTg2NQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjM5NzE2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0OToyMVrOG7MQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0OToyMVrOG7MQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMDA3OA==", "bodyText": "Same here, uncomment the error return and remove the fmt.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464720078", "createdAt": "2020-08-03T23:49:21Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQwMTY5OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo1MTozNFrOG7MTgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNToxODo1NFrOG76kCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMDc3MA==", "bodyText": "Have both a TryCrossLanguage, which has an error return (to handle all the newly uncommented validations) and CrossLanguage without the error return. You can see how External passes the TryExternal results to a Must, so errors can be panicked if necesarry but otherwise propagated properly if Try is used.\n\n  \n    \n      beam/sdks/go/pkg/beam/external.go\n    \n    \n         Line 170\n      in\n      43a4a11\n    \n    \n    \n    \n\n        \n          \n           return MustN(TryExternal(s, spec, payload, in, out, bounded))", "url": "https://github.com/apache/beam/pull/12445#discussion_r464720770", "createdAt": "2020-08-03T23:51:34Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ3ODY2NA==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465478664", "createdAt": "2020-08-05T05:18:54Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMDc3MA=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQwNDE1OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo1Mjo1NlrOG7MVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo0OToyM1rOHB8Bjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMTE4MA==", "bodyText": "As discussed, this data can be part of the graph.External node (or a new graph.CrossLanguage struct if desired) which keeps it as part of the graph and can be handled appropriately in graphx/translate.go. There's absolutely no need to add a new way to pass information in through the pipeline OR the suggestion you have for scope.\nUse the existing abstraction. If it's not sufficient, please articulate why.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464721180", "createdAt": "2020-08-03T23:52:56Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NDA2Mw==", "bodyText": "Ack. Updated!", "url": "https://github.com/apache/beam/pull/12445#discussion_r471794063", "createdAt": "2020-08-17T21:49:23Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMTE4MA=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQwOTcxOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo1NTo0OVrOG7MYdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1MTowNFrOG70Jfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMjAzOQ==", "bodyText": "Change to a return once this can return errors.\nreturn errors.Wrapf(err, \"unable to connect to expansion service at %v, e.ExpansionAddr)", "url": "https://github.com/apache/beam/pull/12445#discussion_r464722039", "createdAt": "2020-08-03T23:55:49Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e\n+\n+\t/*\n+\t\tBuild the ExpansionRequest\n+\t*/\n+\t// Obtaining the components and transform proto representing this transform\n+\tpipeline, err := graphx.Marshal([]*graph.MultiEdge{edge}, &graphx.Options{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\t// Adding fake impulses to each input as required for correct expansion\n+\t// TODO(pskevin): Remove these fake impulses from final Pipeline since multiple producers of the same PCollections is logically wrong\n+\ttransforms := pipeline.Components.Transforms\n+\trootTransformID := pipeline.RootTransformIds[0]\n+\tfor tag, id := range transforms[rootTransformID].Inputs {\n+\t\tkey := fmt.Sprintf(\"%s_%s\", \"impulse\", tag)\n+\n+\t\toutput := map[string]string{\"out\": id}\n+\t\timpulse := &pipepb.PTransform{\n+\t\t\tUniqueName: key,\n+\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\tUrn: graphx.URNImpulse,\n+\t\t\t},\n+\t\t\tOutputs: output,\n+\t\t}\n+\n+\t\ttransforms[key] = impulse\n+\t}\n+\n+\t// Assembling ExpansionRequest proto\n+\treq := &jobpb.ExpansionRequest{\n+\t\tComponents: pipeline.Components,\n+\t\tTransform:  transforms[rootTransformID],\n+\t\tNamespace:  s.String(),\n+\t}\n+\n+\t/*\n+\t\tQuerying Expansion Service\n+\t*/\n+\t// Setting grpc client\n+\tconn, err := grpc.Dial(e.ExpansionAddr, grpc.WithInsecure())\n+\tif err != nil {\n+\t\tpanic(err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MzU2Nw==", "bodyText": "Ack! Thanks for also exemplifying the correct function to use.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465373567", "createdAt": "2020-08-04T22:51:04Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e\n+\n+\t/*\n+\t\tBuild the ExpansionRequest\n+\t*/\n+\t// Obtaining the components and transform proto representing this transform\n+\tpipeline, err := graphx.Marshal([]*graph.MultiEdge{edge}, &graphx.Options{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\t// Adding fake impulses to each input as required for correct expansion\n+\t// TODO(pskevin): Remove these fake impulses from final Pipeline since multiple producers of the same PCollections is logically wrong\n+\ttransforms := pipeline.Components.Transforms\n+\trootTransformID := pipeline.RootTransformIds[0]\n+\tfor tag, id := range transforms[rootTransformID].Inputs {\n+\t\tkey := fmt.Sprintf(\"%s_%s\", \"impulse\", tag)\n+\n+\t\toutput := map[string]string{\"out\": id}\n+\t\timpulse := &pipepb.PTransform{\n+\t\t\tUniqueName: key,\n+\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\tUrn: graphx.URNImpulse,\n+\t\t\t},\n+\t\t\tOutputs: output,\n+\t\t}\n+\n+\t\ttransforms[key] = impulse\n+\t}\n+\n+\t// Assembling ExpansionRequest proto\n+\treq := &jobpb.ExpansionRequest{\n+\t\tComponents: pipeline.Components,\n+\t\tTransform:  transforms[rootTransformID],\n+\t\tNamespace:  s.String(),\n+\t}\n+\n+\t/*\n+\t\tQuerying Expansion Service\n+\t*/\n+\t// Setting grpc client\n+\tconn, err := grpc.Dial(e.ExpansionAddr, grpc.WithInsecure())\n+\tif err != nil {\n+\t\tpanic(err)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMjAzOQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQxNTUzOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo1OTowMlrOG7Mbzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo0OTo0NlrOHB8CPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMjg5NA==", "bodyText": "Note these can be added as fields (in one form or another), as an exported field on graph.MultiEdge\nhttps://github.com/apache/beam/blob/master/sdks/go/pkg/beam/core/graph/edge.go#L143\nFor now disregard the restriction on dealing with protos in graph.\nTechnically, one other approach to avoid the dependencies is to simply re-Marshal the received protos back to []byte and Unmarshal them in graphx/translate.go. As always, get it working first before trying to fix this dependency knot.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464722894", "createdAt": "2020-08-03T23:59:02Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e\n+\n+\t/*\n+\t\tBuild the ExpansionRequest\n+\t*/\n+\t// Obtaining the components and transform proto representing this transform\n+\tpipeline, err := graphx.Marshal([]*graph.MultiEdge{edge}, &graphx.Options{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\t// Adding fake impulses to each input as required for correct expansion\n+\t// TODO(pskevin): Remove these fake impulses from final Pipeline since multiple producers of the same PCollections is logically wrong\n+\ttransforms := pipeline.Components.Transforms\n+\trootTransformID := pipeline.RootTransformIds[0]\n+\tfor tag, id := range transforms[rootTransformID].Inputs {\n+\t\tkey := fmt.Sprintf(\"%s_%s\", \"impulse\", tag)\n+\n+\t\toutput := map[string]string{\"out\": id}\n+\t\timpulse := &pipepb.PTransform{\n+\t\t\tUniqueName: key,\n+\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\tUrn: graphx.URNImpulse,\n+\t\t\t},\n+\t\t\tOutputs: output,\n+\t\t}\n+\n+\t\ttransforms[key] = impulse\n+\t}\n+\n+\t// Assembling ExpansionRequest proto\n+\treq := &jobpb.ExpansionRequest{\n+\t\tComponents: pipeline.Components,\n+\t\tTransform:  transforms[rootTransformID],\n+\t\tNamespace:  s.String(),\n+\t}\n+\n+\t/*\n+\t\tQuerying Expansion Service\n+\t*/\n+\t// Setting grpc client\n+\tconn, err := grpc.Dial(e.ExpansionAddr, grpc.WithInsecure())\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tdefer conn.Close()\n+\tclient := jobpb.NewExpansionServiceClient(conn)\n+\n+\t// Handling ExpansionResponse\n+\tres, err := client.Expand(context.Background(), req)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\te.Components = res.GetComponents()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4NTMxNw==", "bodyText": "I don't know why it didn't occur to me before, but if the deserialized proto object needs to be \"stored\" on an object in the graph package, that field can just be an interface{} and be commented that it's expected to be the proto type. As the fields are only usable by beam framework internals, it's fine to assume that they'll be the correct types by construction (validated by unit tests at some juncture).", "url": "https://github.com/apache/beam/pull/12445#discussion_r465885317", "createdAt": "2020-08-05T17:23:21Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e\n+\n+\t/*\n+\t\tBuild the ExpansionRequest\n+\t*/\n+\t// Obtaining the components and transform proto representing this transform\n+\tpipeline, err := graphx.Marshal([]*graph.MultiEdge{edge}, &graphx.Options{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\t// Adding fake impulses to each input as required for correct expansion\n+\t// TODO(pskevin): Remove these fake impulses from final Pipeline since multiple producers of the same PCollections is logically wrong\n+\ttransforms := pipeline.Components.Transforms\n+\trootTransformID := pipeline.RootTransformIds[0]\n+\tfor tag, id := range transforms[rootTransformID].Inputs {\n+\t\tkey := fmt.Sprintf(\"%s_%s\", \"impulse\", tag)\n+\n+\t\toutput := map[string]string{\"out\": id}\n+\t\timpulse := &pipepb.PTransform{\n+\t\t\tUniqueName: key,\n+\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\tUrn: graphx.URNImpulse,\n+\t\t\t},\n+\t\t\tOutputs: output,\n+\t\t}\n+\n+\t\ttransforms[key] = impulse\n+\t}\n+\n+\t// Assembling ExpansionRequest proto\n+\treq := &jobpb.ExpansionRequest{\n+\t\tComponents: pipeline.Components,\n+\t\tTransform:  transforms[rootTransformID],\n+\t\tNamespace:  s.String(),\n+\t}\n+\n+\t/*\n+\t\tQuerying Expansion Service\n+\t*/\n+\t// Setting grpc client\n+\tconn, err := grpc.Dial(e.ExpansionAddr, grpc.WithInsecure())\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tdefer conn.Close()\n+\tclient := jobpb.NewExpansionServiceClient(conn)\n+\n+\t// Handling ExpansionResponse\n+\tres, err := client.Expand(context.Background(), req)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\te.Components = res.GetComponents()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMjg5NA=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NDIzOQ==", "bodyText": "That's a great suggestion. I've updated it to be in line with it.", "url": "https://github.com/apache/beam/pull/12445#discussion_r471794239", "createdAt": "2020-08-17T21:49:46Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e\n+\n+\t/*\n+\t\tBuild the ExpansionRequest\n+\t*/\n+\t// Obtaining the components and transform proto representing this transform\n+\tpipeline, err := graphx.Marshal([]*graph.MultiEdge{edge}, &graphx.Options{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\t// Adding fake impulses to each input as required for correct expansion\n+\t// TODO(pskevin): Remove these fake impulses from final Pipeline since multiple producers of the same PCollections is logically wrong\n+\ttransforms := pipeline.Components.Transforms\n+\trootTransformID := pipeline.RootTransformIds[0]\n+\tfor tag, id := range transforms[rootTransformID].Inputs {\n+\t\tkey := fmt.Sprintf(\"%s_%s\", \"impulse\", tag)\n+\n+\t\toutput := map[string]string{\"out\": id}\n+\t\timpulse := &pipepb.PTransform{\n+\t\t\tUniqueName: key,\n+\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\tUrn: graphx.URNImpulse,\n+\t\t\t},\n+\t\t\tOutputs: output,\n+\t\t}\n+\n+\t\ttransforms[key] = impulse\n+\t}\n+\n+\t// Assembling ExpansionRequest proto\n+\treq := &jobpb.ExpansionRequest{\n+\t\tComponents: pipeline.Components,\n+\t\tTransform:  transforms[rootTransformID],\n+\t\tNamespace:  s.String(),\n+\t}\n+\n+\t/*\n+\t\tQuerying Expansion Service\n+\t*/\n+\t// Setting grpc client\n+\tconn, err := grpc.Dial(e.ExpansionAddr, grpc.WithInsecure())\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tdefer conn.Close()\n+\tclient := jobpb.NewExpansionServiceClient(conn)\n+\n+\t// Handling ExpansionResponse\n+\tres, err := client.Expand(context.Background(), req)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\te.Components = res.GetComponents()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMjg5NA=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQyMjU2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDowMjo1M1rOG7MfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1MToyNVrOG70J8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMzg5Nw==", "bodyText": "Since the next change will handle PCollection mappings by user provided string keys, we can probably get rid of this for now. Do add a TODO(lostluck) to remind me to plug in the schema coders here instead of what we're doing for the output types.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464723897", "createdAt": "2020-08-04T00:02:53Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e\n+\n+\t/*\n+\t\tBuild the ExpansionRequest\n+\t*/\n+\t// Obtaining the components and transform proto representing this transform\n+\tpipeline, err := graphx.Marshal([]*graph.MultiEdge{edge}, &graphx.Options{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\t// Adding fake impulses to each input as required for correct expansion\n+\t// TODO(pskevin): Remove these fake impulses from final Pipeline since multiple producers of the same PCollections is logically wrong\n+\ttransforms := pipeline.Components.Transforms\n+\trootTransformID := pipeline.RootTransformIds[0]\n+\tfor tag, id := range transforms[rootTransformID].Inputs {\n+\t\tkey := fmt.Sprintf(\"%s_%s\", \"impulse\", tag)\n+\n+\t\toutput := map[string]string{\"out\": id}\n+\t\timpulse := &pipepb.PTransform{\n+\t\t\tUniqueName: key,\n+\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\tUrn: graphx.URNImpulse,\n+\t\t\t},\n+\t\t\tOutputs: output,\n+\t\t}\n+\n+\t\ttransforms[key] = impulse\n+\t}\n+\n+\t// Assembling ExpansionRequest proto\n+\treq := &jobpb.ExpansionRequest{\n+\t\tComponents: pipeline.Components,\n+\t\tTransform:  transforms[rootTransformID],\n+\t\tNamespace:  s.String(),\n+\t}\n+\n+\t/*\n+\t\tQuerying Expansion Service\n+\t*/\n+\t// Setting grpc client\n+\tconn, err := grpc.Dial(e.ExpansionAddr, grpc.WithInsecure())\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tdefer conn.Close()\n+\tclient := jobpb.NewExpansionServiceClient(conn)\n+\n+\t// Handling ExpansionResponse\n+\tres, err := client.Expand(context.Background(), req)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\te.Components = res.GetComponents()\n+\te.ExpandedTransform = res.GetTransform()\n+\te.Requirements = res.GetRequirements()\n+\n+\t/*\n+\t\tAssociating output PCollections of the expanded transform with correct internal outbound links and nodes\n+\t*/\n+\t// No information about the output types and bounded nature has been explicitly passed by the user\n+\tif len(e.Out) == 0 || cap(e.Out) == 0 {\n+\t\t// Infer output types from ExpansionResponse and update e.Out\n+\t\tif e.Out == nil {\n+\t\t\t// Use reverse schema encoding\n+\t\t} else {\n+\t\t\t// Use the coders list and map from coder id to internal FullType?\n+\t\t}\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MzY4MA==", "bodyText": "Makes sense. Will do!", "url": "https://github.com/apache/beam/pull/12445#discussion_r465373680", "createdAt": "2020-08-04T22:51:25Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,151 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+// TODO(pskevin): Handle errors using the TryN and Must strategies instead one function handling multiple points of failure\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t/*\n+\t\tAdd ExternalTranform to the Graph\n+\t*/\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\t// return nil, errors.New(\"invalid scope\")\n+\t\tfmt.Println(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\t// return nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t\tfmt.Printf(\"\\ninvalid pcollection to external: index %v\", i)\n+\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n+\tpayload := &graph.Payload{\n+\t\tURN:  e.Urn,\n+\t\tData: e.Payload,\n+\t}\n+\tvar ins []*graph.Node\n+\tfor _, col := range e.In {\n+\t\tins = append(ins, col.n)\n+\t}\n+\tedge := graph.NewCrossLanguage(s.real, s.scope, ins, payload)\n+\n+\t// TODO(pskevin): There needs to be a better way of associating this ExternalTransform to the pipeline\n+\t// Adding ExternalTransform to pipeline referenced by MultiEdge ID\n+\tif p.ExpandedTransforms == nil {\n+\t\tp.ExpandedTransforms = make(map[string]*ExternalTransform)\n+\t}\n+\tp.ExpandedTransforms[fmt.Sprintf(\"e%v\", edge.ID())] = e\n+\n+\t/*\n+\t\tBuild the ExpansionRequest\n+\t*/\n+\t// Obtaining the components and transform proto representing this transform\n+\tpipeline, err := graphx.Marshal([]*graph.MultiEdge{edge}, &graphx.Options{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\t// Adding fake impulses to each input as required for correct expansion\n+\t// TODO(pskevin): Remove these fake impulses from final Pipeline since multiple producers of the same PCollections is logically wrong\n+\ttransforms := pipeline.Components.Transforms\n+\trootTransformID := pipeline.RootTransformIds[0]\n+\tfor tag, id := range transforms[rootTransformID].Inputs {\n+\t\tkey := fmt.Sprintf(\"%s_%s\", \"impulse\", tag)\n+\n+\t\toutput := map[string]string{\"out\": id}\n+\t\timpulse := &pipepb.PTransform{\n+\t\t\tUniqueName: key,\n+\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\tUrn: graphx.URNImpulse,\n+\t\t\t},\n+\t\t\tOutputs: output,\n+\t\t}\n+\n+\t\ttransforms[key] = impulse\n+\t}\n+\n+\t// Assembling ExpansionRequest proto\n+\treq := &jobpb.ExpansionRequest{\n+\t\tComponents: pipeline.Components,\n+\t\tTransform:  transforms[rootTransformID],\n+\t\tNamespace:  s.String(),\n+\t}\n+\n+\t/*\n+\t\tQuerying Expansion Service\n+\t*/\n+\t// Setting grpc client\n+\tconn, err := grpc.Dial(e.ExpansionAddr, grpc.WithInsecure())\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tdefer conn.Close()\n+\tclient := jobpb.NewExpansionServiceClient(conn)\n+\n+\t// Handling ExpansionResponse\n+\tres, err := client.Expand(context.Background(), req)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\te.Components = res.GetComponents()\n+\te.ExpandedTransform = res.GetTransform()\n+\te.Requirements = res.GetRequirements()\n+\n+\t/*\n+\t\tAssociating output PCollections of the expanded transform with correct internal outbound links and nodes\n+\t*/\n+\t// No information about the output types and bounded nature has been explicitly passed by the user\n+\tif len(e.Out) == 0 || cap(e.Out) == 0 {\n+\t\t// Infer output types from ExpansionResponse and update e.Out\n+\t\tif e.Out == nil {\n+\t\t\t// Use reverse schema encoding\n+\t\t} else {\n+\t\t\t// Use the coders list and map from coder id to internal FullType?\n+\t\t}\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMzg5Nw=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQyNjI5OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/pipeline.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDowNTowN1rOG7Mh1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo1MDowMVrOHB8Cpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNDQzNw==", "bodyText": "As discussed, we don't want to have to hang the expanded transforms on the pipeline here.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464724437", "createdAt": "2020-08-04T00:05:07Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/pipeline.go", "diffHunk": "@@ -60,7 +60,8 @@ func (s Scope) String() string {\n // Pipelines can safely be executed concurrently.\n type Pipeline struct {\n \t// real is the deferred execution Graph as it is being constructed.\n-\treal *graph.Graph\n+\treal               *graph.Graph\n+\tExpandedTransforms map[string]*ExternalTransform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NDM0Mg==", "bodyText": "Removed from pipeline.", "url": "https://github.com/apache/beam/pull/12445#discussion_r471794342", "createdAt": "2020-08-17T21:50:01Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/pipeline.go", "diffHunk": "@@ -60,7 +60,8 @@ func (s Scope) String() string {\n // Pipelines can safely be executed concurrently.\n type Pipeline struct {\n \t// real is the deferred execution Graph as it is being constructed.\n-\treal *graph.Graph\n+\treal               *graph.Graph\n+\tExpandedTransforms map[string]*ExternalTransform", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNDQzNw=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQyODQyOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/runners/universal/universal.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDowNjowN1rOG7Mi_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo1MDo1MlrOHB8D9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNDczMg==", "bodyText": "Similarly, this code should be moved into graphx/translate.go (though TBH this is substantial enough that having things isolated in function in a graphx/xlang.go which are then called in translate.go would be a good move.)", "url": "https://github.com/apache/beam/pull/12445#discussion_r464724732", "createdAt": "2020-08-04T00:06:07Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/universal/universal.go", "diffHunk": "@@ -82,6 +82,54 @@ func Execute(ctx context.Context, p *beam.Pipeline) error {\n \t\treturn errors.WithContextf(err, \"generating model pipeline\")\n \t}\n \n+\t// Adding Expanded transforms to their counterparts in the Pipeline\n+\tfor id, external := range p.ExpandedTransforms {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NDY3OA==", "bodyText": "I've reorganized much of the code. Your opinions would be helpful to understand which of them are not relevant.", "url": "https://github.com/apache/beam/pull/12445#discussion_r471794678", "createdAt": "2020-08-17T21:50:52Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/runners/universal/universal.go", "diffHunk": "@@ -82,6 +82,54 @@ func Execute(ctx context.Context, p *beam.Pipeline) error {\n \t\treturn errors.WithContextf(err, \"generating model pipeline\")\n \t}\n \n+\t// Adding Expanded transforms to their counterparts in the Pipeline\n+\tfor id, external := range p.ExpandedTransforms {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNDczMg=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjQzMjY5OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/runners/universal/universal.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMDowODozN1rOG7MlZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1MTo1OFrOG70Kvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNTM1MQ==", "bodyText": "You should be able to clean this up with pipelinex.Update\nhttps://github.com/apache/beam/blob/master/sdks/go/pkg/beam/core/runtime/pipelinex/replace.go#L32\nNote that you'll need to delete the \"go\" entry from the environments first to do that safely for the loopback mode fix.", "url": "https://github.com/apache/beam/pull/12445#discussion_r464725351", "createdAt": "2020-08-04T00:08:37Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/runners/universal/universal.go", "diffHunk": "@@ -82,6 +82,54 @@ func Execute(ctx context.Context, p *beam.Pipeline) error {\n \t\treturn errors.WithContextf(err, \"generating model pipeline\")\n \t}\n \n+\t// Adding Expanded transforms to their counterparts in the Pipeline\n+\tfor id, external := range p.ExpandedTransforms {\n+\t\tpipeline.Requirements = append(pipeline.Requirements, external.Requirements...)\n+\n+\t\t// Correct update of transform corresponding to the ExpandedTransform\n+\t\t// TODO(pskevin): Figure if there is a better way of supporting multiple outputs\n+\t\ttransform := pipeline.Components.Transforms[id]\n+\t\texistingInput := \"\"\n+\t\tnewInput := \"\"\n+\t\tfor _, v := range transform.Outputs {\n+\t\t\texistingInput = v\n+\t\t}\n+\t\tfor _, v := range external.ExpandedTransform.Outputs {\n+\t\t\tnewInput = v\n+\t\t}\n+\n+\t\tfor _, t := range pipeline.Components.Transforms {\n+\t\t\tfor idx, i := range t.Inputs {\n+\t\t\t\tif i == existingInput {\n+\t\t\t\t\tt.Inputs[idx] = newInput\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Adding components of the Expanded Transforms to the current Pipeline\n+\t\tfor k, v := range external.Components.Transforms {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3Mzg4Nw==", "bodyText": "That's an awesome helper. Thanks for pointing it out.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465373887", "createdAt": "2020-08-04T22:51:58Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/runners/universal/universal.go", "diffHunk": "@@ -82,6 +82,54 @@ func Execute(ctx context.Context, p *beam.Pipeline) error {\n \t\treturn errors.WithContextf(err, \"generating model pipeline\")\n \t}\n \n+\t// Adding Expanded transforms to their counterparts in the Pipeline\n+\tfor id, external := range p.ExpandedTransforms {\n+\t\tpipeline.Requirements = append(pipeline.Requirements, external.Requirements...)\n+\n+\t\t// Correct update of transform corresponding to the ExpandedTransform\n+\t\t// TODO(pskevin): Figure if there is a better way of supporting multiple outputs\n+\t\ttransform := pipeline.Components.Transforms[id]\n+\t\texistingInput := \"\"\n+\t\tnewInput := \"\"\n+\t\tfor _, v := range transform.Outputs {\n+\t\t\texistingInput = v\n+\t\t}\n+\t\tfor _, v := range external.ExpandedTransform.Outputs {\n+\t\t\tnewInput = v\n+\t\t}\n+\n+\t\tfor _, t := range pipeline.Components.Transforms {\n+\t\t\tfor idx, i := range t.Inputs {\n+\t\t\t\tif i == existingInput {\n+\t\t\t\t\tt.Inputs[idx] = newInput\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Adding components of the Expanded Transforms to the current Pipeline\n+\t\tfor k, v := range external.Components.Transforms {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNTM1MQ=="}, "originalCommit": {"oid": "43a4a119bf0d95a1fc33c65842b99ef0ebbcf041"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTgzNjc4OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxMzo0M1rOG8TCqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODo1Mjo1MFrOG8WY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3OTcyMA==", "bodyText": "Per the other thread, please move these to parameters on CrossLanguage and TryCrossLanguage instead. Do not try to force in compatibility with the legacy External, it's OK for them to have two separate calls and paths.\nBy having them as a struct it's not clear what is required and what is not, and the compiler won't help the user by failing at compile time.\nAn aside: The other issue here is you've mixed up user side parameters with internal implementation details, and made them part of the API surface. APIs are easiest to use when the user knows how to fill everything and what is required or not. The components and Expanded transform and requirements fields are not something that users would be filling in for example. Types are cheap. Make a new type instead of trying to reuse something that almost fits.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465879720", "createdAt": "2020-08-05T17:13:43Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,144 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNDU5MA==", "bodyText": "The current version was never meant to be representative of what the final API would be. Only after discussing code organization was the API surface meant to be refined.\nThanks for the new type idea! It'll make separation of concerns much clearer.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465934590", "createdAt": "2020-08-05T18:52:50Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,144 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3OTcyMA=="}, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTg1NTg3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoxODo0N1rOG8TOXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODo1MzoyNlrOG8WaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MjcxOA==", "bodyText": "Move these to a graph.CrossLanguage struct, but have their proto types be interface{} instead, with a comment about what the types should be. Given those fields are only used by beam framework internals, there's little risk in using type assertions for them in the right places, such as the graphx package.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465882718", "createdAt": "2020-08-05T17:18:47Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,144 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNDkwNg==", "bodyText": "Awesome suggestion. Will work on it.", "url": "https://github.com/apache/beam/pull/12445#discussion_r465934906", "createdAt": "2020-08-05T18:53:26Z", "author": {"login": "pskevin"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,144 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MjcxOA=="}, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDkzMTY5OnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoxMDoyOFrOG8dpZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo0NTo0MlrOHB77xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzQ3OA==", "bodyText": "Expansion address seems like a good candidate to be a flag instead.", "url": "https://github.com/apache/beam/pull/12445#discussion_r466053478", "createdAt": "2020-08-05T23:10:28Z", "author": {"login": "youngoli"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,107 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// xlang_wordcount exemplifies using a cross language transform from Python to count words\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\tflag.Parse()\n+\tbeam.Init()\n+\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MjkxMg==", "bodyText": "Alas, it's got to be a parameter. Users may request transforms from multiple independent expansion servers (eg. a Java one, a python one, a dataflow one...)", "url": "https://github.com/apache/beam/pull/12445#discussion_r466552912", "createdAt": "2020-08-06T16:57:43Z", "author": {"login": "lostluck"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,107 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// xlang_wordcount exemplifies using a cross language transform from Python to count words\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\tflag.Parse()\n+\tbeam.Init()\n+\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzQ3OA=="}, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1ODY0OQ==", "bodyText": "Gotcha, but it might still be a good idea in this example if the expansion servers' addresses can change. I'd expect that if you were a user writing and running cross language pipelines, you wouldn't want to change the address in your code each time, you'd want some flag you can change instead. Same if you have multiple different expansion servers.\nOf course, if expansion servers are expected to have a consistent address then this seems good as-is.", "url": "https://github.com/apache/beam/pull/12445#discussion_r466758649", "createdAt": "2020-08-07T00:41:00Z", "author": {"login": "youngoli"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,107 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// xlang_wordcount exemplifies using a cross language transform from Python to count words\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\tflag.Parse()\n+\tbeam.Init()\n+\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzQ3OA=="}, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5MjU4MQ==", "bodyText": "Thanks for that suggestion @youngoli! I've updated it.", "url": "https://github.com/apache/beam/pull/12445#discussion_r471792581", "createdAt": "2020-08-17T21:45:42Z", "author": {"login": "pskevin"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,107 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// xlang_wordcount exemplifies using a cross language transform from Python to count words\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/io/textio\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\t// Set this option to choose a different input file or glob.\n+\tinput = flag.String(\"input\", \"./input\", \"File(s) to read.\")\n+\n+\t// Set this required option to specify where to write the output.\n+\toutput = flag.String(\"output\", \"./output\", \"Output file (required).\")\n+)\n+\n+var (\n+\twordRE  = regexp.MustCompile(`[a-zA-Z]+('[a-z])?`)\n+\tempty   = beam.NewCounter(\"extract\", \"emptyLines\")\n+\tlineLen = beam.NewDistribution(\"extract\", \"lineLenDistro\")\n+)\n+\n+// extractFn is a DoFn that emits the words in a given line.\n+func extractFn(ctx context.Context, line string, emit func(string)) {\n+\tlineLen.Update(ctx, int64(len(line)))\n+\tif len(strings.TrimSpace(line)) == 0 {\n+\t\tempty.Inc(ctx, 1)\n+\t}\n+\tfor _, word := range wordRE.FindAllString(line, -1) {\n+\t\temit(word)\n+\t}\n+}\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c int64) string {\n+\treturn fmt.Sprintf(\"%s: %v\", w, c)\n+}\n+\n+func init() {\n+\tbeam.RegisterFunction(extractFn)\n+\tbeam.RegisterFunction(formatFn)\n+}\n+\n+func main() {\n+\tflag.Parse()\n+\tbeam.Init()\n+\n+\tif *output == \"\" {\n+\t\tlog.Fatal(\"No output provided\")\n+\t}\n+\n+\tp := beam.NewPipeline()\n+\ts := p.Root()\n+\n+\tlines := textio.Read(s, *input)\n+\tcol := beam.ParDo(s, extractFn, lines)\n+\n+\t// Using Cross-language Count from Python's test expansion service\n+\t// TODO(pskevin): Cleaner using-face API\n+\toutputType := typex.NewKV(typex.New(reflectx.String), typex.New(reflectx.Int64))\n+\texternal := &beam.ExternalTransform{\n+\t\tIn:            []beam.PCollection{col},\n+\t\tUrn:           \"beam:transforms:xlang:count\",\n+\t\tExpansionAddr: \"localhost:8118\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzQ3OA=="}, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDk1MzU3OnYy", "diffSide": "RIGHT", "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoyMDozN1rOG8d1vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoyMDozN1rOG8d1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1NjYzNg==", "bodyText": "This example requires running an expansion service separately in order to work, right? I'd add instructions to the package comment on how to run that so people can run this example without existing knowledge of how xlang works. See the stringsplit example for an example of this. It requires running on a job service that supports splitting, so I included instructions for running an external job service.", "url": "https://github.com/apache/beam/pull/12445#discussion_r466056636", "createdAt": "2020-08-05T23:20:37Z", "author": {"login": "youngoli"}, "path": "sdks/go/examples/xlang/wordcount/xlang_wordcount.go", "diffHunk": "@@ -0,0 +1,107 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// xlang_wordcount exemplifies using a cross language transform from Python to count words\n+package main", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA2OTM0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/external.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoxOTo0OFrOG8e5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoxOTo0OFrOG8e5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDExMQ==", "bodyText": "Nit: Typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)\n          \n          \n            \n            \t// Using existing MultiEdge format to represent ExternalTransform (already backwards compatible)", "url": "https://github.com/apache/beam/pull/12445#discussion_r466074111", "createdAt": "2020-08-06T00:19:48Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/external.go", "diffHunk": "@@ -16,10 +16,144 @@\n package beam\n \n import (\n+\t\"context\"\n+\t\"fmt\"\n+\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"google.golang.org/grpc\"\n )\n \n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tid                int\n+\tUrn               string\n+\tPayload           []byte\n+\tIn                []PCollection\n+\tOut               []FullType\n+\tBounded           bool\n+\tExpansionAddr     string\n+\tComponents        *pipepb.Components\n+\tExpandedTransform *pipepb.PTransform\n+\tRequirements      []string\n+}\n+\n+// CrossLanguage is the temporary API to execute external transforms\n+func CrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) []PCollection {\n+\treturn MustN(TryCrossLanguage(s, p, e))\n+}\n+\n+func TryCrossLanguage(s Scope, p *Pipeline, e *ExternalTransform) ([]PCollection, error) {\n+\tif e.ExpansionAddr == \"\" { // TODO(pskevin): Better way to check if the value was ever set\n+\t\t// return Legacy External API\n+\t}\n+\n+\t// Add ExternalTransform to the Graph\n+\n+\t// Validating scope and inputs\n+\tif !s.IsValid() {\n+\t\treturn nil, errors.New(\"invalid scope\")\n+\t}\n+\tfor i, col := range e.In {\n+\t\tif !col.IsValid() {\n+\t\t\treturn nil, errors.Errorf(\"invalid pcollection to external: index %v\", i)\n+\t\t}\n+\t}\n+\n+\t// Using exisiting MultiEdge format to represent ExternalTransform (already backwards compatible)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2742680c0adb7c84ee019fa31c6b35628ca5f1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTIzOTgyOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/graph/xlang.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1NzozM1rOHB-qgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1NzozM1rOHB-qgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNzMxMw==", "bodyText": "Good use of a value method here and the similar functions.", "url": "https://github.com/apache/beam/pull/12445#discussion_r471837313", "createdAt": "2020-08-17T23:57:33Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/graph/xlang.go", "diffHunk": "@@ -0,0 +1,129 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package graph\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+)\n+\n+type ExpandedTransform struct {\n+\tComponents_     interface{} // *pipepb.Components\n+\tTransform_      interface{} //*pipepb.PTransform\n+\tRequirements_   []string\n+\tBoundedOutputs_ map[string]bool\n+}\n+\n+func (exp *ExpandedTransform) Components() *pipepb.Components {\n+\tif c, ok := exp.Components_.(*pipepb.Components); ok {\n+\t\treturn c\n+\t}\n+\tpanic(errors.Errorf(\"malformed components; %v lacks a conforming pipeline component\", exp))\n+}\n+\n+func (exp *ExpandedTransform) Transform() *pipepb.PTransform {\n+\tif t, ok := exp.Transform_.(*pipepb.PTransform); ok {\n+\t\treturn t\n+\t}\n+\tpanic(errors.Errorf(\"malformed transform; %v lacks a conforming pipeline ptransform\", exp))\n+}\n+\n+func (exp *ExpandedTransform) Requirements() []string {\n+\tif exp.Requirements_ != nil {\n+\t\treturn exp.Requirements_\n+\t}\n+\treturn nil\n+}\n+\n+func (exp *ExpandedTransform) BoundedOutputs() map[string]bool {\n+\tif exp.BoundedOutputs_ != nil {\n+\t\treturn exp.BoundedOutputs_\n+\t}\n+\treturn nil\n+}\n+\n+// ExternalTransform represents the cross-language transform in and out of the Pipeline as a MultiEdge and Expanded proto respectively\n+type ExternalTransform struct {\n+\tUrn           string\n+\tPayload       []byte\n+\tExpansionAddr string\n+\n+\t//replace all input/output fields with Inbound and Outbound id maps referencing the orginal Multiedge\n+\n+\tinputs      map[string]*Node\n+\tOutputs     map[string]*Node\n+\toutputTypes map[string]typex.FullType\n+\n+\tExpanded_ *ExpandedTransform\n+}\n+\n+func (ext ExternalTransform) WithNamedInputs(inputs map[string]*Node) ExternalTransform {\n+\tif ext.inputs != nil {\n+\t\tpanic(errors.Errorf(\"inputs already set as: \\n%v\", ext.inputs))\n+\t}\n+\text.inputs = inputs\n+\treturn ext\n+}\n+\n+func (ext ExternalTransform) WithNamedOutputs(outputTypes map[string]typex.FullType) ExternalTransform {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2f49c31efdf1e87c1ba35056a5c176dcf87e2d"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 786, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}