{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjgxNzI3", "number": 11174, "title": "[BEAM-7923] Pop failed transform when error is raised", "bodyText": "The problem: when the CombineGlobally raises the ValueError, it\nbreaks out the process of transform apply where the current transform\nhas been pushed into a transform stack, to be expanded and then popped out in the end.\nWithout the popping out, the pipeline will hold a current transform that\nis referring the failed CombineGlobally transform and never changes,\nmeaning the pipeline will not accept any new transforms after.\nIt did not affect non-interactive usages because when the pipeline\nconstruction runs into an error, the user has to restart the whole\nprogram and nothing has been executed at the point the error is raised,\nso no side-effects.\nIt did leave the pipeline in a dead state when the user constructs\npipelines in an interactive environment.\nThe pop before raising the error allows the transform stack to\nrecover from the failed state.\n\nPlease add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-19T23:19:04Z", "url": "https://github.com/apache/beam/pull/11174", "merged": true, "mergeCommit": {"oid": "cfb87acaf82680c12fe8d977b520920a8dd00b85"}, "closed": true, "closedAt": "2020-03-24T17:44:06Z", "author": {"login": "KevinGG"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPUVPhgH2gAyMzkxMjgxNzI3OjM0NjllNWRjYTEzMWE1Y2Q4ZjUzZjcxNzRjNGFlMDMxMGY3MWMwOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQkcgDgH2gAyMzkxMjgxNzI3OjliNjdjZDQ2MTcyYTVhNTM3ZDg0NzE2YzVhNGVmZjU2NDgzZTc0ZjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3469e5dca131a5cd8f53f7174c4ae0310f71c097", "author": {"user": {"login": "KevinGG", "name": "Ning Kang"}}, "url": "https://github.com/apache/beam/commit/3469e5dca131a5cd8f53f7174c4ae0310f71c097", "committedDate": "2020-03-19T23:16:15Z", "message": "[BEAM-7923] Pop failed transform in CombineGlobally\n\n1. The problem: when the CombineGlobally raises the ValueError, it\nbreaks out the process of transform `apply` where the current transform\nhas been pushed into a transform stack, to be expanded and then popped out in the end.\nWithout the popping out, the pipeline will hold a current transform that\nis referring the failed CombineGlobally transform and never changes,\nmeaning the pipeline will not accept any new transforms after.\n2. It did not affect non-interactive usages because when the pipeline\nconstruction runs into an error, the user has to restart the whole\nprogram and nothing has been executed at the point the error is raised,\nso no side-effects.\n3. It did leave the pipeline in a dead state when the user constructs\npipelines in an interactive environment.\n4. The pop before raising the error allows the transform stack to\nrecover from the failed state."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTY5NDM0", "url": "https://github.com/apache/beam/pull/11174#pullrequestreview-378169434", "createdAt": "2020-03-19T23:55:19Z", "commit": {"oid": "3469e5dca131a5cd8f53f7174c4ae0310f71c097"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODAyMDY2", "url": "https://github.com/apache/beam/pull/11174#pullrequestreview-378802066", "createdAt": "2020-03-20T20:47:15Z", "commit": {"oid": "3469e5dca131a5cd8f53f7174c4ae0310f71c097"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0NzoxNlrOF5ivNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0NzoxNlrOF5ivNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4MjI5Mw==", "bodyText": "This is not the right place to pop this (internal) stack. Instead, we should popping from the stack in a finally clause of a try block that pushes to the stack. (Alternatively, we could manage the stack with a Python context, but that might be overkill.)", "url": "https://github.com/apache/beam/pull/11174#discussion_r395882293", "createdAt": "2020-03-20T20:47:16Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -1811,6 +1811,8 @@ def add_input_types(transform):\n       return view\n     else:\n       if pcoll.windowing.windowfn != GlobalWindows():\n+        # Remove the broken transform when running into value error.\n+        pcoll.pipeline.transforms_stack.pop()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3469e5dca131a5cd8f53f7174c4ae0310f71c097"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f8e4b23f7aaccdcd18e9799e1ebe61a9956b8e", "author": {"user": {"login": "KevinGG", "name": "Ning Kang"}}, "url": "https://github.com/apache/beam/commit/d3f8e4b23f7aaccdcd18e9799e1ebe61a9956b8e", "committedDate": "2020-03-20T21:22:36Z", "message": "Apply try-append-finally-pop logic to both transform apply and replace."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODM2ODE2", "url": "https://github.com/apache/beam/pull/11174#pullrequestreview-378836816", "createdAt": "2020-03-20T22:04:19Z", "commit": {"oid": "d3f8e4b23f7aaccdcd18e9799e1ebe61a9956b8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODY0NDU4", "url": "https://github.com/apache/beam/pull/11174#pullrequestreview-378864458", "createdAt": "2020-03-20T23:41:38Z", "commit": {"oid": "d3f8e4b23f7aaccdcd18e9799e1ebe61a9956b8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzo0MTozOVrOF5l3pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzo0MTozOVrOF5l3pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzYwNA==", "bodyText": "This is a python newbie question. Does list.append() ever throw an exception? If so, should we move this out of the try block so that we don't pop() if list.append() fails?", "url": "https://github.com/apache/beam/pull/11174#discussion_r395933604", "createdAt": "2020-03-20T23:41:39Z", "author": {"login": "davidyan74"}, "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -307,58 +307,61 @@ def _replace_if_needed(self, original_transform_node):\n           elif len(inputs) == 0:\n             input_node = pvalue.PBegin(self.pipeline)\n \n-          # We have to add the new AppliedTransform to the stack before expand()\n-          # and pop it out later to make sure that parts get added correctly.\n-          self.pipeline.transforms_stack.append(replacement_transform_node)\n-\n-          # Keeping the same label for the replaced node but recursively\n-          # removing labels of child transforms of original transform since they\n-          # will be replaced during the expand below. This is needed in case\n-          # the replacement contains children that have labels that conflicts\n-          # with labels of the children of the original.\n-          self.pipeline._remove_labels_recursively(original_transform_node)\n-\n-          new_output = replacement_transform.expand(input_node)\n-          assert isinstance(\n-              new_output, (dict, pvalue.PValue, pvalue.DoOutputsTuple))\n-\n-          if isinstance(new_output, pvalue.PValue):\n-            new_output.element_type = None\n-            self.pipeline._infer_result_type(\n-                replacement_transform, inputs, new_output)\n-\n-          if isinstance(new_output, dict):\n-            for new_tag, new_pcoll in new_output.items():\n-              replacement_transform_node.add_output(new_pcoll, new_tag)\n-          elif isinstance(new_output, pvalue.DoOutputsTuple):\n-            replacement_transform_node.add_output(\n-                new_output, new_output._main_tag)\n-          else:\n-            replacement_transform_node.add_output(new_output, new_output.tag)\n-\n-          # Recording updated outputs. This cannot be done in the same visitor\n-          # since if we dynamically update output type here, we'll run into\n-          # errors when visiting child nodes.\n-          #\n-          # NOTE: When replacing multiple outputs, the replacement PCollection\n-          # tags must have a matching tag in the original transform.\n-          if isinstance(new_output, pvalue.PValue):\n-            if not new_output.producer:\n-              new_output.producer = replacement_transform_node\n-            output_map[original_transform_node.outputs[new_output.tag]] = \\\n-                new_output\n-          elif isinstance(new_output, (pvalue.DoOutputsTuple, tuple)):\n-            for pcoll in new_output:\n-              if not pcoll.producer:\n-                pcoll.producer = replacement_transform_node\n-              output_map[original_transform_node.outputs[pcoll.tag]] = pcoll\n-          elif isinstance(new_output, dict):\n-            for tag, pcoll in new_output.items():\n-              if not pcoll.producer:\n-                pcoll.producer = replacement_transform_node\n-              output_map[original_transform_node.outputs[tag]] = pcoll\n-\n-          self.pipeline.transforms_stack.pop()\n+          try:\n+            # We have to add the new AppliedTransform to the stack before\n+            # expand() and pop it out later to make sure that parts get added\n+            # correctly.\n+            self.pipeline.transforms_stack.append(replacement_transform_node)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f8e4b23f7aaccdcd18e9799e1ebe61a9956b8e"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b67cd46172a5a537d84716c5a4eff56483e74f5", "author": {"user": {"login": "KevinGG", "name": "Ning Kang"}}, "url": "https://github.com/apache/beam/commit/9b67cd46172a5a537d84716c5a4eff56483e74f5", "committedDate": "2020-03-23T20:36:35Z", "message": "Fixed tests that passed in the past due to broken state when error is raised."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2851, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}