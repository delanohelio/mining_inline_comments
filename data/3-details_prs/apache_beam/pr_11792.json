{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjk5ODAw", "number": 11792, "title": "[BEAM-10435] Add ValidatesRunner task for local_job_service and Java SDK harness", "bodyText": "This adds a ValidatesRunner suite for the Java SDK against the local Python ULR.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n[n/a] Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-22T03:54:21Z", "url": "https://github.com/apache/beam/pull/11792", "merged": true, "mergeCommit": {"oid": "b14c0910350933357a104b03c78abbf6afdb7513"}, "closed": true, "closedAt": "2020-07-14T21:36:25Z", "author": {"login": "kennknowles"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjqH2SgBqjMzNjMxNDE4Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0nfDzABqjM1NDExODQ4OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/1cdd67b3dcec4fe33ce74131ba77cc27e846c268", "committedDate": "2020-05-22T03:52:44Z", "message": "Add ability to specify stdout and stderr files for local_job_service"}, "afterCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/46252f59cf1b6c032abd26eb4b2890d965cd088f", "committedDate": "2020-05-22T03:57:35Z", "message": "Add ability to specify stdout and stderr files for local_job_service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjMyMDk2", "url": "https://github.com/apache/beam/pull/11792#pullrequestreview-416632096", "createdAt": "2020-05-22T03:54:55Z", "commit": {"oid": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo1NDo1NVrOGZJ44A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo1OTo1MlrOGZJ8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTYwMA==", "bodyText": "@robertwb @lukecwik first thing I hit putting this together was exceeding message size limit", "url": "https://github.com/apache/beam/pull/11792#discussion_r429029600", "createdAt": "2020-05-22T03:54:55Z", "author": {"login": "kennknowles"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/artifact/ArtifactRetrievalService.java", "diffHunk": "@@ -39,7 +39,7 @@\n public class ArtifactRetrievalService\n     extends ArtifactRetrievalServiceGrpc.ArtifactRetrievalServiceImplBase implements FnService {\n \n-  public static final int DEFAULT_BUFFER_SIZE = 4 << 20; // 4 MB\n+  public static final int DEFAULT_BUFFER_SIZE = 2 << 20; // 2 MB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTc4Ng==", "bodyText": "TODO(me): remove these imports\nI first went through the \"normal\" route of using all this stuff to watch for the pid file but it was verbose and had race conditions. No point. Just check and sleep, now.", "url": "https://github.com/apache/beam/pull/11792#discussion_r429029786", "createdAt": "2020-05-22T03:55:45Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -1,3 +1,13 @@\n+import groovy.json.JsonOutput\n+\n+import java.nio.file.FileSystems", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDMzMw==", "bodyText": "TODO(me): remove this once we get past the sanity checking phase", "url": "https://github.com/apache/beam/pull/11792#discussion_r429030333", "createdAt": "2020-05-22T03:58:34Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {\n+  doLast {\n+    exec {\n+      commandLine \"virtualenv\", virtualenvDir, \"--python=python3\"\n+    }\n+    execInVirtualenv \"pip\", \"install\", \"--retries\", \"10\", \"--upgrade\", \"tox==3.11.1\", \"--requirement\", \"${project.rootDir}/sdks/python/build-requirements.txt\"\n+    execInVirtualenv \"python\", \"setup.py\", \"build\", \"--build-base=${buildDir}\"\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"\n+  }\n+}\n+\n+task startLocalJobService {\n+  dependsOn virtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+\n+    File pidFile = new File(localJobServicePidFile)\n+    int totalSleep = 0\n+    while (!pidFile.exists()) {\n+      sleep(500)\n+      totalSleep += 500\n+      if (totalSleep > 5000) {\n+        throw new RuntimeException(\"Local job service pid file never showed up\");\n+      }\n+    }\n+  }\n+}\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {\n+    dependsOn startLocalJobService\n+  }\n+\n+  group = \"Verification\"\n+  description \"PortableRunner Java subprocess ValidatesRunner suite\"\n+  classpath = configurations.validatesRunner\n+  systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+      \"--runner=TestUniversalRunner\",\n+      \"--localJobServicePortFile=${localJobServicePortFile}\"\n+  ])\n+  testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+  useJUnit {\n+    includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+  }\n+  filter {\n+    includeTestsMatching 'ImpulseTest'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDQ2Mg==", "bodyText": "It would be nicer for the port to be an output of the task and read it in by the other task, but that plumbing seems to be unnatural based on gradle docs I could find.", "url": "https://github.com/apache/beam/pull/11792#discussion_r429030462", "createdAt": "2020-05-22T03:59:13Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {\n+  doLast {\n+    exec {\n+      commandLine \"virtualenv\", virtualenvDir, \"--python=python3\"\n+    }\n+    execInVirtualenv \"pip\", \"install\", \"--retries\", \"10\", \"--upgrade\", \"tox==3.11.1\", \"--requirement\", \"${project.rootDir}/sdks/python/build-requirements.txt\"\n+    execInVirtualenv \"python\", \"setup.py\", \"build\", \"--build-base=${buildDir}\"\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"\n+  }\n+}\n+\n+task startLocalJobService {\n+  dependsOn virtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDU5Mw==", "bodyText": "Had to add this, because TestPortableRunner couples \"check that the job succeeds\" logic with a bunch of other things having to do with launching an existing Java runner as a portable runner, not relevant to actual portable runner services.", "url": "https://github.com/apache/beam/pull/11792#discussion_r429030593", "createdAt": "2020-05-22T03:59:52Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.options.Validation;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjM0MjUy", "url": "https://github.com/apache/beam/pull/11792#pullrequestreview-416634252", "createdAt": "2020-05-22T04:03:45Z", "commit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDowMzo0NVrOGZJ_ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDowMzo0NVrOGZJ_ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTM1NA==", "bodyText": "This verbosity is because Gradle exec tasks do not terminate when there are open subprocesses.", "url": "https://github.com/apache/beam/pull/11792#discussion_r429031354", "createdAt": "2020-05-22T04:03:45Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjM0Mzkw", "url": "https://github.com/apache/beam/pull/11792#pullrequestreview-416634390", "createdAt": "2020-05-22T04:04:18Z", "commit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDowNDoxOFrOGZKALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDowNDoxOFrOGZKALQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTQ2OQ==", "bodyText": "This verbosity is because ProcessBuilder.inheritIO does not work in this context (don't know if it is Gradle or Groovy breaking it)", "url": "https://github.com/apache/beam/pull/11792#discussion_r429031469", "createdAt": "2020-05-22T04:04:18Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjM0NTI1", "url": "https://github.com/apache/beam/pull/11792#pullrequestreview-416634525", "createdAt": "2020-05-22T04:04:55Z", "commit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDowNDo1NVrOGZKAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDowNDo1NVrOGZKAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng==", "bodyText": "I tried registering outputs.dir virtualenvDir and inputs.dir pythonSdkDir but it did not result in incremental build.", "url": "https://github.com/apache/beam/pull/11792#discussion_r429031586", "createdAt": "2020-05-22T04:04:55Z", "author": {"login": "kennknowles"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTU1MTc2", "url": "https://github.com/apache/beam/pull/11792#pullrequestreview-418555176", "createdAt": "2020-05-26T18:12:50Z", "commit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoxMjo1MFrOGaqb0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoyMjozOVrOGaqxmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxMTQxMQ==", "bodyText": "You shouldn't have to watch, when the --background flag is set it waits for the service to be up before terminating.", "url": "https://github.com/apache/beam/pull/11792#discussion_r430611411", "createdAt": "2020-05-26T18:12:50Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -1,3 +1,13 @@\n+import groovy.json.JsonOutput\n+\n+import java.nio.file.FileSystems", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTc4Ng=="}, "originalCommit": {"oid": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxMjQ1Nw==", "bodyText": "Can we use the existing virtualenv tasks we have?", "url": "https://github.com/apache/beam/pull/11792#discussion_r430612457", "createdAt": "2020-05-26T18:14:42Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDE3MQ==", "bodyText": "We shouldn't have to wait, once the above exec completes it should be there (or not). Does the above task error if the return code is non-zero?", "url": "https://github.com/apache/beam/pull/11792#discussion_r430614171", "createdAt": "2020-05-26T18:17:51Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {\n+  doLast {\n+    exec {\n+      commandLine \"virtualenv\", virtualenvDir, \"--python=python3\"\n+    }\n+    execInVirtualenv \"pip\", \"install\", \"--retries\", \"10\", \"--upgrade\", \"tox==3.11.1\", \"--requirement\", \"${project.rootDir}/sdks/python/build-requirements.txt\"\n+    execInVirtualenv \"python\", \"setup.py\", \"build\", \"--build-base=${buildDir}\"\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"\n+  }\n+}\n+\n+task startLocalJobService {\n+  dependsOn virtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+\n+    File pidFile = new File(localJobServicePidFile)\n+    int totalSleep = 0\n+    while (!pidFile.exists()) {\n+      sleep(500)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNjk4NA==", "bodyText": "I'm not sure what happens here when this process exits (and possibly tries to close these files?).", "url": "https://github.com/apache/beam/pull/11792#discussion_r430616984", "createdAt": "2020-05-26T18:22:39Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/local_job_service_main.py", "diffHunk": "@@ -99,11 +105,23 @@ def run(argv):\n       options.port_file = os.path.splitext(options.pid_file)[0] + '.port'\n       argv.append('--port_file')\n       argv.append(options.port_file)\n+\n+    if not options.stdout_file:\n+      raise RuntimeError('--stdout_file must be specified with --background')\n+    stdout_dest = open(options.stdout_file, mode='w')\n+\n+    if options.stderr_file:\n+      stderr_dest=open(options.stderr_file, mode='w')\n+    else:\n+      stderr_dest=subprocess.STDOUT\n+\n     subprocess.Popen([\n         sys.executable,\n         '-m',\n         'apache_beam.runners.portability.local_job_service_main'\n-    ] + argv)\n+    ] + argv,\n+        stderr=stderr_dest,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/46252f59cf1b6c032abd26eb4b2890d965cd088f", "committedDate": "2020-05-22T03:57:35Z", "message": "Add ability to specify stdout and stderr files for local_job_service"}, "afterCommit": {"oid": "ca74559e39a1d51250e638bb17c90172a441e39f", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/ca74559e39a1d51250e638bb17c90172a441e39f", "committedDate": "2020-06-16T21:33:02Z", "message": "Add ability to specify stdout and stderr files for local_job_service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca74559e39a1d51250e638bb17c90172a441e39f", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/ca74559e39a1d51250e638bb17c90172a441e39f", "committedDate": "2020-06-16T21:33:02Z", "message": "Add ability to specify stdout and stderr files for local_job_service"}, "afterCommit": {"oid": "56cec5f3586e6361f1a93e02e91665ef4b524a0b", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/56cec5f3586e6361f1a93e02e91665ef4b524a0b", "committedDate": "2020-07-08T18:45:17Z", "message": "Add ability to specify stdout and stderr files for local_job_service;"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0772398a50a23bb214958c81ab712e37082ab228", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/0772398a50a23bb214958c81ab712e37082ab228", "committedDate": "2020-07-09T21:15:17Z", "message": "final set of exclusions"}, "afterCommit": {"oid": "c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "committedDate": "2020-07-09T21:20:12Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "committedDate": "2020-07-09T21:20:12Z", "message": "Add validatesRunner suite for local job service"}, "afterCommit": {"oid": "f156314f115d2fd6767fd18096f8e1bd9d58e462", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/f156314f115d2fd6767fd18096f8e1bd9d58e462", "committedDate": "2020-07-09T21:36:02Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f156314f115d2fd6767fd18096f8e1bd9d58e462", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/f156314f115d2fd6767fd18096f8e1bd9d58e462", "committedDate": "2020-07-09T21:36:02Z", "message": "Add validatesRunner suite for local job service"}, "afterCommit": {"oid": "cbb175a309560a39315742b4920b53b28a7eb3e3", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/cbb175a309560a39315742b4920b53b28a7eb3e3", "committedDate": "2020-07-09T21:57:51Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbb175a309560a39315742b4920b53b28a7eb3e3", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/cbb175a309560a39315742b4920b53b28a7eb3e3", "committedDate": "2020-07-09T21:57:51Z", "message": "Add validatesRunner suite for local job service"}, "afterCommit": {"oid": "65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "committedDate": "2020-07-09T22:19:21Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "committedDate": "2020-07-09T22:19:21Z", "message": "Add validatesRunner suite for local job service"}, "afterCommit": {"oid": "07c38633ab1a6a4dceac99757bc185c25d8f66cf", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/07c38633ab1a6a4dceac99757bc185c25d8f66cf", "committedDate": "2020-07-09T22:32:51Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07c38633ab1a6a4dceac99757bc185c25d8f66cf", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/07c38633ab1a6a4dceac99757bc185c25d8f66cf", "committedDate": "2020-07-09T22:32:51Z", "message": "Add validatesRunner suite for local job service"}, "afterCommit": {"oid": "e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "committedDate": "2020-07-09T22:36:12Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "committedDate": "2020-07-09T22:36:12Z", "message": "Add validatesRunner suite for local job service"}, "afterCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/da4acef9b5c62069632978612c9692d7feace03c", "committedDate": "2020-07-09T22:39:46Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTQ2NDY1", "url": "https://github.com/apache/beam/pull/11792#pullrequestreview-446546465", "createdAt": "2020-07-10T16:43:36Z", "commit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo0MzozNlrOGv-MjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1NjowMlrOGv-kXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NTI3Ng==", "bodyText": "These lines can be removed now, right?", "url": "https://github.com/apache/beam/pull/11792#discussion_r452955276", "createdAt": "2020-07-10T16:43:36Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NTYwMg==", "bodyText": "Very convenient.", "url": "https://github.com/apache/beam/pull/11792#discussion_r452955602", "createdAt": "2020-07-10T16:44:11Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//\n+//    File pidFile = new File(localJobServicePidFile)\n+//    int totalSleep = 0\n+//    while (!pidFile.exists()) {\n+//      sleep(500)\n+//      totalSleep += 500\n+//      if (totalSleep > 5000) {\n+//        throw new RuntimeException(\"Local job service pid file never showed up\");\n+//      }\n+//    }\n+  }\n }\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjExNw==", "bodyText": "Consider passing --defaultEnvironmentType=LOOPBACK. You can then remove the docker dependency as well. (Maybe we could run one test with docker, but all of them seems overkill and expensive.)", "url": "https://github.com/apache/beam/pull/11792#discussion_r452956117", "createdAt": "2020-07-10T16:45:16Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//\n+//    File pidFile = new File(localJobServicePidFile)\n+//    int totalSleep = 0\n+//    while (!pidFile.exists()) {\n+//      sleep(500)\n+//      totalSleep += 500\n+//      if (totalSleep > 5000) {\n+//        throw new RuntimeException(\"Local job service pid file never showed up\");\n+//      }\n+//    }\n+  }\n }\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {\n+    dependsOn startLocalJobService\n+  }\n+\n+  group = \"Verification\"\n+  description \"PortableRunner Java subprocess ValidatesRunner suite\"\n+  classpath = configurations.validatesRunner\n+  systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+      \"--runner=TestUniversalRunner\",\n+      \"--experiments=beam_fn_api\",\n+      \"--localJobServicePortFile=${localJobServicePortFile}\"\n+  ])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjY3Mg==", "bodyText": "Could you create JIRAs for these (at whatever granularity seems appropriate) and add them here?", "url": "https://github.com/apache/beam/pull/11792#discussion_r452956672", "createdAt": "2020-07-10T16:46:21Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//\n+//    File pidFile = new File(localJobServicePidFile)\n+//    int totalSleep = 0\n+//    while (!pidFile.exists()) {\n+//      sleep(500)\n+//      totalSleep += 500\n+//      if (totalSleep > 5000) {\n+//        throw new RuntimeException(\"Local job service pid file never showed up\");\n+//      }\n+//    }\n+  }\n }\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {\n+    dependsOn startLocalJobService\n+  }\n+\n+  group = \"Verification\"\n+  description \"PortableRunner Java subprocess ValidatesRunner suite\"\n+  classpath = configurations.validatesRunner\n+  systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+      \"--runner=TestUniversalRunner\",\n+      \"--experiments=beam_fn_api\",\n+      \"--localJobServicePortFile=${localJobServicePortFile}\"\n+  ])\n+  testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+  useJUnit {\n+    includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesMapState'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesSetState'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesTestStreamWithMultipleStages'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesTimersInParDo'\n+  }\n+  filter {\n+    // There is not currently a category for excluding these _only_ in committed mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTAyMg==", "bodyText": "Nit: I'd make this more local (it's thrown only at Files.readAllBytes).", "url": "https://github.com/apache/beam/pull/11792#discussion_r452959022", "createdAt": "2020-07-10T16:51:15Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n+    return new TestUniversalRunner(options);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    try {\n+      Options testOptions = options.as(Options.class);\n+      String endpoint =\n+          \"localhost:\"\n+              + new String(\n+                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n+                      Charsets.UTF_8)\n+                  .trim();\n+\n+      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n+      portableOptions.setJobEndpoint(endpoint);\n+      portableOptions.setRunner(PortableRunner.class);\n+      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n+      PipelineResult result = runner.run(pipeline);\n+      assertThat(\n+          \"Pipeline did not succeed.\",\n+          result.waitUntilFinish(),\n+          Matchers.is(PipelineResult.State.DONE));\n+      return result;\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw==", "bodyText": "Logically, it would make sense to let this be optional (e.g. one could instead provide jobEndpoint directly). A point could be made that the testing infrastructure should be the one reading the file and setting jobEndpoint, rather than passing the file path as an option (but I don't know how much messier that'd make things).", "url": "https://github.com/apache/beam/pull/11792#discussion_r452959763", "createdAt": "2020-07-10T16:52:47Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n+    return new TestUniversalRunner(options);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    try {\n+      Options testOptions = options.as(Options.class);\n+      String endpoint =\n+          \"localhost:\"\n+              + new String(\n+                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n+                      Charsets.UTF_8)\n+                  .trim();\n+\n+      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n+      portableOptions.setJobEndpoint(endpoint);\n+      portableOptions.setRunner(PortableRunner.class);\n+      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n+      PipelineResult result = runner.run(pipeline);\n+      assertThat(\n+          \"Pipeline did not succeed.\",\n+          result.waitUntilFinish(),\n+          Matchers.is(PipelineResult.State.DONE));\n+      return result;\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  public interface Options extends TestPipelineOptions, PortablePipelineOptions {\n+    /**\n+     * A file containing the job service port, since Gradle needs to know this filename statically\n+     * to provide it in Beam testing options.\n+     */\n+    @Description(\"File containing local job service port.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTM3Mg==", "bodyText": "I think I mentioned this before, but is it an issue that these file descriptors might get closed on completion of this process?", "url": "https://github.com/apache/beam/pull/11792#discussion_r452961372", "createdAt": "2020-07-10T16:56:02Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/local_job_service_main.py", "diffHunk": "@@ -99,11 +104,23 @@ def run(argv):\n       options.port_file = os.path.splitext(options.pid_file)[0] + '.port'\n       argv.append('--port_file')\n       argv.append(options.port_file)\n+\n+    if not options.stdout_file:\n+      raise RuntimeError('--stdout_file must be specified with --background')\n+    stdout_dest = open(options.stdout_file, mode='w')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzI4NDYw", "url": "https://github.com/apache/beam/pull/11792#pullrequestreview-446728460", "createdAt": "2020-07-10T22:13:54Z", "commit": {"oid": "b488bab9896b4600b75821a7773dc5a070b4d210"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoxMzo1NFrOGwHFTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoxNDoyN1rOGwHF6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMDg3Nw==", "bodyText": "We already have the plain jobEndpoint option, just make (re)setting it conditional on LocalJobServicePortFile being set.", "url": "https://github.com/apache/beam/pull/11792#discussion_r453100877", "createdAt": "2020-07-10T22:13:54Z", "author": {"login": "robertwb"}, "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n+    return new TestUniversalRunner(options);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    try {\n+      Options testOptions = options.as(Options.class);\n+      String endpoint =\n+          \"localhost:\"\n+              + new String(\n+                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n+                      Charsets.UTF_8)\n+                  .trim();\n+\n+      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n+      portableOptions.setJobEndpoint(endpoint);\n+      portableOptions.setRunner(PortableRunner.class);\n+      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n+      PipelineResult result = runner.run(pipeline);\n+      assertThat(\n+          \"Pipeline did not succeed.\",\n+          result.waitUntilFinish(),\n+          Matchers.is(PipelineResult.State.DONE));\n+      return result;\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  public interface Options extends TestPipelineOptions, PortablePipelineOptions {\n+    /**\n+     * A file containing the job service port, since Gradle needs to know this filename statically\n+     * to provide it in Beam testing options.\n+     */\n+    @Description(\"File containing local job service port.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw=="}, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTAzMw==", "bodyText": "No problem. My comment was from something like a mont ago. Thanks for the references.", "url": "https://github.com/apache/beam/pull/11792#discussion_r453101033", "createdAt": "2020-07-10T22:14:27Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/local_job_service_main.py", "diffHunk": "@@ -99,11 +104,23 @@ def run(argv):\n       options.port_file = os.path.splitext(options.pid_file)[0] + '.port'\n       argv.append('--port_file')\n       argv.append(options.port_file)\n+\n+    if not options.stdout_file:\n+      raise RuntimeError('--stdout_file must be specified with --background')\n+    stdout_dest = open(options.stdout_file, mode='w')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTM3Mg=="}, "originalCommit": {"oid": "da4acef9b5c62069632978612c9692d7feace03c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d261b9567bf9c9e78414f3be1f54c5332ce88390", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/d261b9567bf9c9e78414f3be1f54c5332ce88390", "committedDate": "2020-07-13T20:01:37Z", "message": "Only add test task in applyPythonNature if it does not already exist"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e1ccd6ceef2bd3b49c864be5d5cd33609faf90", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/73e1ccd6ceef2bd3b49c864be5d5cd33609faf90", "committedDate": "2020-07-13T20:01:37Z", "message": "Add UsesTimersInParDo to test that was missing it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe66ea00525518429c22d48eb377afac47febc89", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/fe66ea00525518429c22d48eb377afac47febc89", "committedDate": "2020-07-13T20:01:37Z", "message": "Reduce Java portable ArtifactRetrieval chunk size to avoid breaking limit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f4cb7235d33426d56550ee04ec1193d4a8a4ce6", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/1f4cb7235d33426d56550ee04ec1193d4a8a4ce6", "committedDate": "2020-07-13T20:01:38Z", "message": "Add ability to specify stdout and stderr files for local_job_service;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60e03d4e2f2126f09e0accbfe27b368a25a12abf", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/60e03d4e2f2126f09e0accbfe27b368a25a12abf", "committedDate": "2020-07-13T20:30:13Z", "message": "Create TestUniversalRunner for testing against Python ULR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fec66720fd2e8feaffe198ddb714fed5da312a02", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/fec66720fd2e8feaffe198ddb714fed5da312a02", "committedDate": "2020-07-13T20:30:13Z", "message": "Add validatesRunner suite for local job service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b488bab9896b4600b75821a7773dc5a070b4d210", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/b488bab9896b4600b75821a7773dc5a070b4d210", "committedDate": "2020-07-10T18:09:34Z", "message": "fixup! Create TestUniversalRunner for testing against Python ULR"}, "afterCommit": {"oid": "fec66720fd2e8feaffe198ddb714fed5da312a02", "author": {"user": {"login": "kennknowles", "name": "Kenn Knowles"}}, "url": "https://github.com/apache/beam/commit/fec66720fd2e8feaffe198ddb714fed5da312a02", "committedDate": "2020-07-13T20:30:13Z", "message": "Add validatesRunner suite for local job service"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4270, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}