{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNzY0Mjgx", "number": 12934, "title": "[BEAM-10959] Store a fixed amount of known process bundle instructions to prevent failures due to concurrency within a runner.", "bodyText": "Thank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-25T00:23:25Z", "url": "https://github.com/apache/beam/pull/12934", "merged": true, "mergeCommit": {"oid": "38403698934c422968320a0bdd834e8b9ae598a3"}, "closed": true, "closedAt": "2020-09-25T21:13:22Z", "author": {"login": "lukecwik"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMKjORgH2gAyNDkyNzY0MjgxOmE1OGMxYTExZmVmMDBlMmMzMDZhZjQ4OTFhMjcyZGU5ZTM0OGY4NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMccgIAFqTQ5Njg2NjY4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/a58c1a11fef00e2c306af4891a272de9e348f856", "committedDate": "2020-09-25T00:21:51Z", "message": "[BEAM-10959] Store a fixed amount of known process bundle instructions to prevent failures due to concurrency within a runner."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDMzMTY2", "url": "https://github.com/apache/beam/pull/12934#pullrequestreview-496033166", "createdAt": "2020-09-25T00:24:44Z", "commit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNDo0NFrOHXw5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNDo0NFrOHXw5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDQ5Mw==", "bodyText": "this .get() was necessary to prevent a race condition where the pipeline could shutdown before finalization happened.", "url": "https://github.com/apache/beam/pull/12934#discussion_r494680493", "createdAt": "2020-09-25T00:24:44Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -894,7 +897,10 @@ def process_bundle(self,\n       finalize_request = beam_fn_api_pb2.InstructionRequest(\n           finalize_bundle=beam_fn_api_pb2.FinalizeBundleRequest(\n               instruction_id=process_bundle_id))\n-      self._worker_handler.control_conn.push(finalize_request)\n+      finalize_response = self._worker_handler.control_conn.push(\n+          finalize_request).get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDMzMjY0", "url": "https://github.com/apache/beam/pull/12934#pullrequestreview-496033264", "createdAt": "2020-09-25T00:25:06Z", "commit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNTowNlrOHXw6Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyNTowNlrOHXw6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDYxOA==", "bodyText": "This logic is now handled by the BundleProcessorCache", "url": "https://github.com/apache/beam/pull/12934#discussion_r494680618", "createdAt": "2020-09-25T00:25:06Z", "author": {"login": "lukecwik"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -286,22 +294,9 @@ def _request_process_bundle_progress(self, request):\n \n   def _request_process_bundle_action(self, request):\n     # type: (beam_fn_api_pb2.InstructionRequest) -> None\n-\n     def task():\n-      instruction_id = getattr(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/715f41743827f45e5ba6830c69b21abd91f7de33", "committedDate": "2020-09-25T14:00:20Z", "message": "fixup! Fix typo in typing information"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NjIyMTE2", "url": "https://github.com/apache/beam/pull/12934#pullrequestreview-496622116", "createdAt": "2020-09-25T17:41:41Z", "commit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzo1NTo1MVrOHYNSag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODozNToyN1rOHYOeYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0NTU3OA==", "bodyText": "Seems that if we lock here we won't have to duplicate code", "url": "https://github.com/apache/beam/pull/12934#discussion_r495145578", "createdAt": "2020-09-25T17:55:51Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NTAyNA==", "bodyText": "Is it by design that we pop the items in LIFO order?", "url": "https://github.com/apache/beam/pull/12934#discussion_r495165024", "createdAt": "2020-09-25T18:35:27Z", "author": {"login": "y1chi"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]\n+        except KeyError:\n+          # The instruction may have not been pre-registered before execution\n+          # since activate() may have never been invoked\n+          pass\n+        return processor\n+      except IndexError:\n+        pass\n+\n+    # Make sure we instantiate the processor while not holding the lock.\n+    processor = bundle_processor.BundleProcessor(\n+        self.fns[bundle_descriptor_id],\n+        self.state_handler_factory.create_state_handler(\n+            self.fns[bundle_descriptor_id].state_api_service_descriptor),\n+        self.data_channel_factory)\n+    with self._lock:\n+      self.active_bundle_processors[\n         instruction_id] = bundle_descriptor_id, processor\n+      try:\n+        del self.known_not_running_instruction_ids[instruction_id]\n+      except KeyError:\n+        # The instruction may have not been pre-registered before execution\n+        # since activate() may have never been invoked\n+        pass\n     return processor\n \n   def lookup(self, instruction_id):\n     # type: (str) -> Optional[bundle_processor.BundleProcessor]\n \n     \"\"\"\n     Return the requested ``BundleProcessor`` from the cache.\n+\n+    Will return ``None`` if the BundleProcessor is known but not yet ready. Will\n+    raise an error if the ``instruction_id`` is not known or has been discarded.\n     \"\"\"\n-    return self.active_bundle_processors.get(instruction_id, (None, None))[-1]\n+    with self._lock:\n+      if instruction_id in self.failed_instruction_ids:\n+        raise RuntimeError(\n+            'Bundle processing associated with %s has failed. '\n+            'Check prior failing response for details.' % instruction_id)\n+      processor = self.active_bundle_processors.get(\n+          instruction_id, (None, None))[-1]\n+      if processor:\n+        return processor\n+      if instruction_id in self.known_not_running_instruction_ids:\n+        return None\n+      raise RuntimeError('Unknown process bundle id %s.' % instruction_id)\n \n   def discard(self, instruction_id):\n     # type: (str) -> None\n \n     \"\"\"\n-    Remove the ``BundleProcessor`` from the cache.\n+    Marks the instruction id as failed shutting down the ``BundleProcessor``.\n     \"\"\"\n-    self.active_bundle_processors[instruction_id][1].shutdown()\n-    del self.active_bundle_processors[instruction_id]\n+    with self._lock:\n+      self.failed_instruction_ids[instruction_id] = True\n+      while len(self.failed_instruction_ids) > MAX_FAILED_INSTRUCTIONS:\n+        self.failed_instruction_ids.popitem()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NjM1NTQ0", "url": "https://github.com/apache/beam/pull/12934#pullrequestreview-496635544", "createdAt": "2020-09-25T18:02:17Z", "commit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODowMjoxN1rOHYNeqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTowMzoyOFrOHYPSVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0ODcxNA==", "bodyText": "This this bug is unrelated to SDF, right? Would this be erroneously reporting successful bundle processing, or is it a minor issue since the pipeline is being shut down?", "url": "https://github.com/apache/beam/pull/12934#discussion_r495148714", "createdAt": "2020-09-25T18:02:17Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -894,7 +897,10 @@ def process_bundle(self,\n       finalize_request = beam_fn_api_pb2.InstructionRequest(\n           finalize_bundle=beam_fn_api_pb2.FinalizeBundleRequest(\n               instruction_id=process_bundle_id))\n-      self._worker_handler.control_conn.push(finalize_request)\n+      finalize_response = self._worker_handler.control_conn.push(\n+          finalize_request).get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDQ5Mw=="}, "originalCommit": {"oid": "a58c1a11fef00e2c306af4891a272de9e348f856"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3ODMyNg==", "bodyText": "Not sure if any locking needs to be done in this method. Perhaps known_not_running_instruction_ids should be cleared?\nIt seems that this is called when no more requests will be processed (end of SdkHarness.run()), so this should be fine.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495178326", "createdAt": "2020-09-25T19:03:28Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -415,10 +465,19 @@ def release(self, instruction_id):\n     Resets the ``BundleProcessor`` and moves it from the active to the\n     inactive cache.\n     \"\"\"\n-    descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n+    with self._lock:\n+      self.known_not_running_instruction_ids[instruction_id] = True\n+      while len(self.known_not_running_instruction_ids\n+                ) > MAX_KNOWN_NOT_RUNNING_INSTRUCTIONS:\n+        self.known_not_running_instruction_ids.popitem()\n+      descriptor_id, processor = (\n+          self.active_bundle_processors.pop(instruction_id))\n+\n+    # Make sure that we reset the processor while not holding the lock.\n     processor.reset()\n-    self.last_access_times[descriptor_id] = time.time()\n-    self.cached_bundle_processors[descriptor_id].append(processor)\n+    with self._lock:\n+      self.last_access_times[descriptor_id] = time.time()\n+      self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715f41743827f45e5ba6830c69b21abd91f7de33"}, "originalPosition": 195}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd", "committedDate": "2020-09-25T19:46:07Z", "message": "fixup! Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NzgzNzU2", "url": "https://github.com/apache/beam/pull/12934#pullrequestreview-496783756", "createdAt": "2020-09-25T20:04:04Z", "commit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNDowNVrOHYQ8vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNDowNVrOHYQ8vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTU2NQ==", "bodyText": "Aren't all instruction ids unique for a given SDK harness/runner combo anyway? If this is the first time we've seen this instruction, why would the instruction be repeated?  I thought only the bundle descriptor ids were re-used?", "url": "https://github.com/apache/beam/pull/12934#discussion_r495205565", "createdAt": "2020-09-25T20:04:05Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -376,35 +385,76 @@ def get(self, instruction_id, bundle_descriptor_id):\n \n     Moves the ``BundleProcessor`` from the inactive to the active cache.\n     \"\"\"\n-    try:\n-      # pop() is threadsafe\n-      processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n-    except IndexError:\n-      processor = bundle_processor.BundleProcessor(\n-          self.fns[bundle_descriptor_id],\n-          self.state_handler_factory.create_state_handler(\n-              self.fns[bundle_descriptor_id].state_api_service_descriptor),\n-          self.data_channel_factory)\n-    self.active_bundle_processors[\n+    with self._lock:\n+      try:\n+        # pop() is threadsafe\n+        processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+        self.active_bundle_processors[\n+          instruction_id] = bundle_descriptor_id, processor\n+        try:\n+          del self.known_not_running_instruction_ids[instruction_id]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2Nzg5Mzc3", "url": "https://github.com/apache/beam/pull/12934#pullrequestreview-496789377", "createdAt": "2020-09-25T20:09:09Z", "commit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowOTowOVrOHYRElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowOTowOVrOHYRElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU3Mg==", "bodyText": "So, the correct response if something hasn't previously failed, and isn't running is an empty response for both Splits and Progress requests?\nThat's easy enough to fix. Go current fails, but it's very easy to swap that up.", "url": "https://github.com/apache/beam/pull/12934#discussion_r495207572", "createdAt": "2020-09-25T20:09:09Z", "author": {"login": "lostluck"}, "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -543,15 +602,19 @@ def process_bundle_split(self,\n                            instruction_id  # type: str\n                           ):\n     # type: (...) -> beam_fn_api_pb2.InstructionResponse\n-    processor = self.bundle_processor_cache.lookup(request.instruction_id)\n-    if processor:\n-      return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          process_bundle_split=processor.try_split(request))\n-    else:\n+    try:\n+      processor = self.bundle_processor_cache.lookup(request.instruction_id)\n+    except RuntimeError:\n       return beam_fn_api_pb2.InstructionResponse(\n-          instruction_id=instruction_id,\n-          error='Instruction not running: %s' % instruction_id)\n+          instruction_id=instruction_id, error=traceback.format_exc())\n+    # Return an empty response if we aren't running. This can happen\n+    # if the ProcessBundleRequest has not started or already finished.\n+    process_bundle_split = (\n+        processor.try_split(request)\n+        if processor else beam_fn_api_pb2.ProcessBundleSplitResponse())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2ODY2Njg0", "url": "https://github.com/apache/beam/pull/12934#pullrequestreview-496866684", "createdAt": "2020-09-25T21:12:48Z", "commit": {"oid": "28b604c898bd01193d3d9fe4c5c0b9ed3cba41fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2552, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}