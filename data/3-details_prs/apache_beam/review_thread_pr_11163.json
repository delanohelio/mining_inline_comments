{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjY3Mjcz", "number": 11163, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyNjo1MFrODqj7Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzowNjo1NlrODqlljA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTU1MzY2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyNjo1MFrOF6YvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MDozNlrOF6720A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2Njk4Ng==", "bodyText": "I hadn't stopeed to think that labels are a file name too, huh? I guess the final file name is the PCollection variable name? If so, users may name their PCollections something that is not supported by the OS? (or maybe not since they have to be Python variable names?)\nAnyway this is not for this PR. But just to think about.", "url": "https://github.com/apache/beam/pull/11163#discussion_r396766986", "createdAt": "2020-03-23T21:26:50Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -166,13 +169,15 @@ def _wait_until_file_exists(self, timeout_secs=30):\n \n     # Wait for up to `timeout_secs` for the file to be available.\n     start = time.time()\n-    path = os.path.join(self._cache_dir, *self._labels)\n-    while not os.path.exists(path):\n+    while not os.path.exists(self._path):\n       time.sleep(1)\n       if time.time() - start > timeout_timestamp_secs:\n+        from apache_beam.runners.interactive.pipeline_instrument import CacheKey\n+        pcollection_var = CacheKey.from_str(self._labels[-1]).var", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa5ed4d7b694cdd57080a778517a0ea0b22a64d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MjQxNg==", "bodyText": "Yeah, because these are Python variables, they have very strict naming conventions which is ok to use for file names (alphanumeric with the addition of an underscore).", "url": "https://github.com/apache/beam/pull/11163#discussion_r397342416", "createdAt": "2020-03-24T17:40:36Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -166,13 +169,15 @@ def _wait_until_file_exists(self, timeout_secs=30):\n \n     # Wait for up to `timeout_secs` for the file to be available.\n     start = time.time()\n-    path = os.path.join(self._cache_dir, *self._labels)\n-    while not os.path.exists(path):\n+    while not os.path.exists(self._path):\n       time.sleep(1)\n       if time.time() - start > timeout_timestamp_secs:\n+        from apache_beam.runners.interactive.pipeline_instrument import CacheKey\n+        pcollection_var = CacheKey.from_str(self._labels[-1]).var", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2Njk4Ng=="}, "originalCommit": {"oid": "4fa5ed4d7b694cdd57080a778517a0ea0b22a64d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTU1OTU2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyODo0OVrOF6YytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MzoyN1rOF67-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzkyNA==", "bodyText": "Do we just skip? This may mean that the file is corrupted? Should we stop consuming (i.e. rethrow the exception)?", "url": "https://github.com/apache/beam/pull/11163#discussion_r396767924", "createdAt": "2020-03-23T21:28:49Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -202,14 +207,24 @@ def _emit_from_file(self, fh, tail):\n         # The first line at pos = 0 is always the header. Read the line without\n         # the new line.\n         to_decode = line[:-1]\n-        if pos == 0:\n-          header = TestStreamFileHeader()\n-          header.ParseFromString(self._coder.decode(to_decode))\n-          yield header\n+        proto_cls = TestStreamFileHeader if pos == 0 else TestStreamFileRecord\n+        msg = self._try_parse_as(proto_cls, to_decode)\n+        if msg:\n+          yield msg\n         else:\n-          record = TestStreamFileRecord()\n-          record.ParseFromString(self._coder.decode(to_decode))\n-          yield record\n+          break\n+\n+  def _try_parse_as(self, proto_cls, to_decode):\n+    try:\n+      msg = proto_cls()\n+      msg.ParseFromString(self._coder.decode(to_decode))\n+    except DecodeError:\n+      _LOGGER.error(\n+          'Could not parse as %s. This can indicate that the cache is '\n+          'corruputed. Please restart the kernel. '\n+          '\\nfile: %s \\nmessage: %s', proto_cls, self._path, to_decode)\n+      msg = None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa5ed4d7b694cdd57080a778517a0ea0b22a64d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDQxMQ==", "bodyText": "No, if we rethrow the exception, it will get handled by the GRPC layer above and get turned into gobbledygook. This does stop processing because it returns msg = None which breaks out of the loop.", "url": "https://github.com/apache/beam/pull/11163#discussion_r397344411", "createdAt": "2020-03-24T17:43:27Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -202,14 +207,24 @@ def _emit_from_file(self, fh, tail):\n         # The first line at pos = 0 is always the header. Read the line without\n         # the new line.\n         to_decode = line[:-1]\n-        if pos == 0:\n-          header = TestStreamFileHeader()\n-          header.ParseFromString(self._coder.decode(to_decode))\n-          yield header\n+        proto_cls = TestStreamFileHeader if pos == 0 else TestStreamFileRecord\n+        msg = self._try_parse_as(proto_cls, to_decode)\n+        if msg:\n+          yield msg\n         else:\n-          record = TestStreamFileRecord()\n-          record.ParseFromString(self._coder.decode(to_decode))\n-          yield record\n+          break\n+\n+  def _try_parse_as(self, proto_cls, to_decode):\n+    try:\n+      msg = proto_cls()\n+      msg.ParseFromString(self._coder.decode(to_decode))\n+    except DecodeError:\n+      _LOGGER.error(\n+          'Could not parse as %s. This can indicate that the cache is '\n+          'corruputed. Please restart the kernel. '\n+          '\\nfile: %s \\nmessage: %s', proto_cls, self._path, to_decode)\n+      msg = None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzkyNA=="}, "originalCommit": {"oid": "4fa5ed4d7b694cdd57080a778517a0ea0b22a64d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTgyNjA0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzowNjo1NlrOF6bYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0Nzo0MFrOF68JYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMDM0MA==", "bodyText": "Same as above. Do we just log and not stop processing?", "url": "https://github.com/apache/beam/pull/11163#discussion_r396810340", "createdAt": "2020-03-23T23:06:56Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_runner.py", "diffHunk": "@@ -170,8 +170,13 @@ def run_pipeline(self, pipeline, options):\n               user_pipeline)):\n         streaming_cache_manager = ie.current_env().cache_manager()\n         if streaming_cache_manager:\n+\n+          def exception_handler(e):\n+            _LOGGER.error(str(e))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa5ed4d7b694cdd57080a778517a0ea0b22a64d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzE2OQ==", "bodyText": "For here, we this is caught at the TestStreamService level and for the same reason, we just log the error so that it's easier for the user to understand. Because it's caught at the service level, it means that we have already stopped processing.", "url": "https://github.com/apache/beam/pull/11163#discussion_r397347169", "createdAt": "2020-03-24T17:47:40Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_runner.py", "diffHunk": "@@ -170,8 +170,13 @@ def run_pipeline(self, pipeline, options):\n               user_pipeline)):\n         streaming_cache_manager = ie.current_env().cache_manager()\n         if streaming_cache_manager:\n+\n+          def exception_handler(e):\n+            _LOGGER.error(str(e))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMDM0MA=="}, "originalCommit": {"oid": "4fa5ed4d7b694cdd57080a778517a0ea0b22a64d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1688, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}