{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDIyNzI2", "number": 11096, "title": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream", "bodyText": "This replaces the current implementation of a custom output stream wrapped by standard PrintStream, removing a possible deadlock between the PrintStream and handler.  The\ndeadlock can occur if something beneath the handler lock attempts to use System.err, reversing\nthe normal locking order.\nBy using PrintStream we can use a StringBuffer instead of a ByteBuffer, which also avoids extra encoding and decoding between byte arrays and Strings.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-11T00:14:16Z", "url": "https://github.com/apache/beam/pull/11096", "merged": true, "mergeCommit": {"oid": "0f50e1e7858c5b8e4ee698d65b8668cc66638feb"}, "closed": true, "closedAt": "2020-03-31T19:52:59Z", "author": {"login": "scwhittle"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMpKn0gFqTM3Mjg5MDY2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTGS2oAFqTM4NDkzODExMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODkwNjYz", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-372890663", "createdAt": "2020-03-11T15:50:53Z", "commit": {"oid": "08bfb704ff0aa68cf4f6d5f1a0505092f646cf41"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODc3MDc4", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-372877078", "createdAt": "2020-03-11T15:36:41Z", "commit": {"oid": "08bfb704ff0aa68cf4f6d5f1a0505092f646cf41"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTo0ODoxOVrOF09Gaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTo1MzoxOFrOF09Vvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA3MTMzOQ==", "bodyText": "Would it be an issue for multi-byte wide characters that have been split?", "url": "https://github.com/apache/beam/pull/11096#discussion_r391071339", "createdAt": "2020-03-11T15:48:19Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/logging/JulHandlerPrintStreamAdapterFactory.java", "diffHunk": "@@ -37,114 +37,272 @@\n class JulHandlerPrintStreamAdapterFactory {\n   private static final AtomicBoolean outputWarning = new AtomicBoolean(false);\n \n-  /**\n-   * Creates a {@link PrintStream} which redirects all output to the JUL {@link Handler} with the\n-   * specified {@code loggerName} and {@code level}.\n-   */\n-  static PrintStream create(Handler handler, String loggerName, Level messageLevel) {\n-    try {\n-      return new PrintStream(\n-          new JulHandlerAdapterOutputStream(handler, loggerName, messageLevel),\n-          false,\n-          StandardCharsets.UTF_8.name());\n-    } catch (UnsupportedEncodingException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  /**\n-   * An output stream adapter which is able to take a stream of UTF-8 data and output to a named JUL\n-   * log handler. The log messages will be buffered until the system dependent new line separator is\n-   * seen, at which point the buffered string will be output.\n-   */\n-  private static class JulHandlerAdapterOutputStream extends OutputStream {\n+  private static class JulHandlerPrintStream extends PrintStream {\n     private static final String LOGGING_DISCLAIMER =\n         String.format(\n             \"Please use a logger instead of System.out or System.err.%n\"\n                 + \"Please switch to using org.slf4j.Logger.%n\"\n                 + \"See: https://cloud.google.com/dataflow/pipelines/logging\");\n-    // This limits the number of bytes which we buffer in case we don't see a newline character.\n-    private static final int BUFFER_LIMIT = 1 << 14; // 16384 bytes\n-    private static final byte[] NEW_LINE = System.lineSeparator().getBytes(StandardCharsets.UTF_8);\n+    // This limits the number of bytes which we buffer in case we don't have a flush.\n+    private static final int BUFFER_LIMIT = 1 << 10; // 1024 chars\n \n     /** Hold reference of named logger to check configured {@link Level}. */\n     private Logger logger;\n \n     private Handler handler;\n     private String loggerName;\n-    private ByteArrayOutputStream baos;\n+    private StringBuilder buffer;\n     private Level messageLevel;\n-    private int matched = 0;\n \n-    private JulHandlerAdapterOutputStream(Handler handler, String loggerName, Level logLevel) {\n+    private JulHandlerPrintStream(Handler handler, String loggerName, Level logLevel) {\n+      super(\n+          new OutputStream() {\n+            @Override\n+            public void write(int i) throws IOException {\n+              throw new RuntimeException(\"All methods should be overwritten so this is unused\");\n+            }\n+          });\n       this.handler = handler;\n       this.loggerName = loggerName;\n       this.messageLevel = logLevel;\n       this.logger = Logger.getLogger(loggerName);\n-      this.baos = new ByteArrayOutputStream(BUFFER_LIMIT);\n+      this.buffer = new StringBuilder(BUFFER_LIMIT);\n     }\n \n     @Override\n-    public void write(int b) {\n-      if (outputWarning.compareAndSet(false, true)) {\n-        publish(Level.WARNING, LOGGING_DISCLAIMER);\n+    public void flush() {\n+      publish(flushToString());\n+    }\n+\n+    private synchronized String flushToString() {\n+      if (buffer.length() > 0 && buffer.charAt(buffer.length() - 1) == '\\n') {\n+        buffer.setLength(buffer.length() - 1);\n       }\n+      String result = buffer.toString();\n+      buffer.setLength(0);\n+      return result;\n+    }\n \n-      baos.write(b);\n-      // Check to see if the next byte matches further into new line string.\n-      if (NEW_LINE[matched] == b) {\n-        matched += 1;\n-        // If we have matched the entire new line, output the contents of the buffer.\n-        if (matched == NEW_LINE.length) {\n-          output();\n-        }\n-      } else {\n-        // Reset the match\n-        matched = 0;\n+    @Override\n+    public void close() {\n+      flush();\n+    }\n+\n+    @Override\n+    public boolean checkError() {\n+      return false;\n+    }\n+\n+    @Override\n+    public synchronized void write(int i) {\n+      buffer.append(i);\n+    }\n+\n+    @Override\n+    public void write(byte[] a, int start, int limit) {\n+      // XXX this enforces decoding on boundaries where before it didn't, does that matter?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08bfb704ff0aa68cf4f6d5f1a0505092f646cf41"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA3NTI2Mg==", "bodyText": "Either use assert !Thread.holdsLock(this) : \"BEAM-9399: This thread should never hold this lock\"; or checkState(!Thread.holdsLock(this), \"BEAM-9399: This thread should never hold this lock\"); to guard against this case.\nhttps://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#holdsLock%28java.lang.Object%29", "url": "https://github.com/apache/beam/pull/11096#discussion_r391075262", "createdAt": "2020-03-11T15:53:18Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/logging/JulHandlerPrintStreamAdapterFactory.java", "diffHunk": "@@ -37,114 +37,272 @@\n class JulHandlerPrintStreamAdapterFactory {\n   private static final AtomicBoolean outputWarning = new AtomicBoolean(false);\n \n-  /**\n-   * Creates a {@link PrintStream} which redirects all output to the JUL {@link Handler} with the\n-   * specified {@code loggerName} and {@code level}.\n-   */\n-  static PrintStream create(Handler handler, String loggerName, Level messageLevel) {\n-    try {\n-      return new PrintStream(\n-          new JulHandlerAdapterOutputStream(handler, loggerName, messageLevel),\n-          false,\n-          StandardCharsets.UTF_8.name());\n-    } catch (UnsupportedEncodingException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  /**\n-   * An output stream adapter which is able to take a stream of UTF-8 data and output to a named JUL\n-   * log handler. The log messages will be buffered until the system dependent new line separator is\n-   * seen, at which point the buffered string will be output.\n-   */\n-  private static class JulHandlerAdapterOutputStream extends OutputStream {\n+  private static class JulHandlerPrintStream extends PrintStream {\n     private static final String LOGGING_DISCLAIMER =\n         String.format(\n             \"Please use a logger instead of System.out or System.err.%n\"\n                 + \"Please switch to using org.slf4j.Logger.%n\"\n                 + \"See: https://cloud.google.com/dataflow/pipelines/logging\");\n-    // This limits the number of bytes which we buffer in case we don't see a newline character.\n-    private static final int BUFFER_LIMIT = 1 << 14; // 16384 bytes\n-    private static final byte[] NEW_LINE = System.lineSeparator().getBytes(StandardCharsets.UTF_8);\n+    // This limits the number of bytes which we buffer in case we don't have a flush.\n+    private static final int BUFFER_LIMIT = 1 << 10; // 1024 chars\n \n     /** Hold reference of named logger to check configured {@link Level}. */\n     private Logger logger;\n \n     private Handler handler;\n     private String loggerName;\n-    private ByteArrayOutputStream baos;\n+    private StringBuilder buffer;\n     private Level messageLevel;\n-    private int matched = 0;\n \n-    private JulHandlerAdapterOutputStream(Handler handler, String loggerName, Level logLevel) {\n+    private JulHandlerPrintStream(Handler handler, String loggerName, Level logLevel) {\n+      super(\n+          new OutputStream() {\n+            @Override\n+            public void write(int i) throws IOException {\n+              throw new RuntimeException(\"All methods should be overwritten so this is unused\");\n+            }\n+          });\n       this.handler = handler;\n       this.loggerName = loggerName;\n       this.messageLevel = logLevel;\n       this.logger = Logger.getLogger(loggerName);\n-      this.baos = new ByteArrayOutputStream(BUFFER_LIMIT);\n+      this.buffer = new StringBuilder(BUFFER_LIMIT);\n     }\n \n     @Override\n-    public void write(int b) {\n-      if (outputWarning.compareAndSet(false, true)) {\n-        publish(Level.WARNING, LOGGING_DISCLAIMER);\n+    public void flush() {\n+      publish(flushToString());\n+    }\n+\n+    private synchronized String flushToString() {\n+      if (buffer.length() > 0 && buffer.charAt(buffer.length() - 1) == '\\n') {\n+        buffer.setLength(buffer.length() - 1);\n       }\n+      String result = buffer.toString();\n+      buffer.setLength(0);\n+      return result;\n+    }\n \n-      baos.write(b);\n-      // Check to see if the next byte matches further into new line string.\n-      if (NEW_LINE[matched] == b) {\n-        matched += 1;\n-        // If we have matched the entire new line, output the contents of the buffer.\n-        if (matched == NEW_LINE.length) {\n-          output();\n-        }\n-      } else {\n-        // Reset the match\n-        matched = 0;\n+    @Override\n+    public void close() {\n+      flush();\n+    }\n+\n+    @Override\n+    public boolean checkError() {\n+      return false;\n+    }\n+\n+    @Override\n+    public synchronized void write(int i) {\n+      buffer.append(i);\n+    }\n+\n+    @Override\n+    public void write(byte[] a, int start, int limit) {\n+      // XXX this enforces decoding on boundaries where before it didn't, does that matter?\n+      print(new String(a, start, limit, Charset.defaultCharset()));\n+    }\n+\n+    @Override\n+    public synchronized void print(boolean b) {\n+      buffer.append(b ? \"true\" : \"false\");\n+    }\n+\n+    @Override\n+    public synchronized void print(char c) {\n+      buffer.append(c);\n+    }\n+\n+    @Override\n+    public synchronized void print(int i) {\n+      buffer.append(i);\n+    }\n+\n+    @Override\n+    public synchronized void print(long l) {\n+      buffer.append(l);\n+    }\n+\n+    @Override\n+    public synchronized void print(float f) {\n+      buffer.append(f);\n+    }\n+\n+    @Override\n+    public synchronized void print(double d) {\n+      buffer.append(d);\n+    }\n+\n+    @Override\n+    public synchronized void print(char[] a) {\n+      buffer.append(a);\n+    }\n+\n+    @Override\n+    public synchronized void print(String s) {\n+      buffer.append(s);\n+    }\n+\n+    @Override\n+    public synchronized void print(Object o) {\n+      buffer.append(o);\n+    }\n+\n+    @Override\n+    public void println() {\n+      flush();\n+    }\n+\n+    @Override\n+    public void println(boolean b) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(b);\n+        msg = flushToString();\n       }\n-      if (baos.size() == BUFFER_LIMIT) {\n-        output();\n+      publish(msg);\n+    }\n+\n+    @Override\n+    public void println(char c) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(c);\n+        msg = flushToString();\n       }\n+      publish(msg);\n     }\n \n     @Override\n-    public void flush() throws IOException {\n-      output();\n+    public void println(int i) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(i);\n+        msg = flushToString();\n+      }\n+      publish(msg);\n     }\n \n     @Override\n-    public void close() throws IOException {\n-      output();\n+    public void println(long l) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(l);\n+        msg = flushToString();\n+      }\n+      publish(msg);\n     }\n \n-    private void output() {\n-      // If nothing was output, do not log anything\n-      if (baos.size() == 0) {\n-        return;\n+    @Override\n+    public void println(float f) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(f);\n+        msg = flushToString();\n       }\n-      try {\n-        String message = baos.toString(StandardCharsets.UTF_8.name());\n-        // Strip the new line if it exists\n-        if (message.endsWith(System.lineSeparator())) {\n-          message = message.substring(0, message.length() - System.lineSeparator().length());\n-        }\n+      publish(msg);\n+    }\n+\n+    @Override\n+    public void println(double d) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(d);\n+        msg = flushToString();\n+      }\n+      publish(msg);\n+    }\n+\n+    @Override\n+    public void println(char[] a) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(a);\n+        msg = flushToString();\n+      }\n+      publish(msg);\n+    }\n+\n+    @Override\n+    public void println(String s) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(s);\n+        msg = flushToString();\n+      }\n+      publish(msg);\n+    }\n \n-        publish(messageLevel, message);\n-      } catch (UnsupportedEncodingException e) {\n-        publish(\n-            Level.SEVERE, String.format(\"Unable to decode string output to stdout/stderr %s\", e));\n+    @Override\n+    public void println(Object o) {\n+      String msg;\n+      synchronized (this) {\n+        buffer.append(o);\n+        msg = flushToString();\n       }\n-      matched = 0;\n-      baos.reset();\n+      publish(msg);\n     }\n \n-    private void publish(Level level, String message) {\n-      if (logger.isLoggable(level)) {\n-        LogRecord log = new LogRecord(level, message);\n+    @Override\n+    public PrintStream format(String format, Object... args) {\n+      return format(Locale.getDefault(), format, args);\n+    }\n+\n+    @Override\n+    public PrintStream format(Locale locale, String format, Object... args) {\n+      String flushed;\n+      int newlineIndex;\n+      synchronized (this) {\n+        int startLength = buffer.length();\n+        Formatter formatter = new Formatter(buffer, locale);\n+        formatter.format(format, args);\n+        newlineIndex = buffer.indexOf(\"\\n\", startLength);\n+        if (newlineIndex < 0) {\n+          return this;\n+        }\n+        flushed = flushToString();\n+      }\n+      while (newlineIndex > 0) {\n+        publish(flushed.substring(0, newlineIndex));\n+        flushed = flushed.substring(newlineIndex + 1);\n+        newlineIndex = flushed.indexOf('\\n');\n+      }\n+      publish(flushed);\n+      return this;\n+    }\n+\n+    @Override\n+    public synchronized PrintStream append(CharSequence cs, int start, int limit) {\n+      buffer.append(cs.subSequence(start, limit));\n+      return this;\n+    }\n+\n+    // Note to avoid a deadlock, publish may never be called synchronized. See BEAM-9399.\n+    private void publish(Level messageLevel, String message) {\n+      if (logger.isLoggable(messageLevel)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08bfb704ff0aa68cf4f6d5f1a0505092f646cf41"}, "originalPosition": 330}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTA2NDc5", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-372906479", "createdAt": "2020-03-11T16:07:56Z", "commit": {"oid": "08bfb704ff0aa68cf4f6d5f1a0505092f646cf41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowNzo1NlrOF09_1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowNzo1NlrOF09_1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NjAzNw==", "bodyText": "It makes a lot more sense to move all the newline handling into publish and for it to check for new lines. If you want to avoid the cost of indexOf/substring call, you could create an internal method that publishWithNewLines that does all the substring/indexOf work and only use publish for the trivial println methods", "url": "https://github.com/apache/beam/pull/11096#discussion_r391086037", "createdAt": "2020-03-11T16:07:56Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/logging/JulHandlerPrintStreamAdapterFactory.java", "diffHunk": "@@ -37,114 +37,272 @@\n class JulHandlerPrintStreamAdapterFactory {\n   private static final AtomicBoolean outputWarning = new AtomicBoolean(false);\n \n-  /**\n-   * Creates a {@link PrintStream} which redirects all output to the JUL {@link Handler} with the\n-   * specified {@code loggerName} and {@code level}.\n-   */\n-  static PrintStream create(Handler handler, String loggerName, Level messageLevel) {\n-    try {\n-      return new PrintStream(\n-          new JulHandlerAdapterOutputStream(handler, loggerName, messageLevel),\n-          false,\n-          StandardCharsets.UTF_8.name());\n-    } catch (UnsupportedEncodingException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  /**\n-   * An output stream adapter which is able to take a stream of UTF-8 data and output to a named JUL\n-   * log handler. The log messages will be buffered until the system dependent new line separator is\n-   * seen, at which point the buffered string will be output.\n-   */\n-  private static class JulHandlerAdapterOutputStream extends OutputStream {\n+  private static class JulHandlerPrintStream extends PrintStream {\n     private static final String LOGGING_DISCLAIMER =\n         String.format(\n             \"Please use a logger instead of System.out or System.err.%n\"\n                 + \"Please switch to using org.slf4j.Logger.%n\"\n                 + \"See: https://cloud.google.com/dataflow/pipelines/logging\");\n-    // This limits the number of bytes which we buffer in case we don't see a newline character.\n-    private static final int BUFFER_LIMIT = 1 << 14; // 16384 bytes\n-    private static final byte[] NEW_LINE = System.lineSeparator().getBytes(StandardCharsets.UTF_8);\n+    // This limits the number of bytes which we buffer in case we don't have a flush.\n+    private static final int BUFFER_LIMIT = 1 << 10; // 1024 chars\n \n     /** Hold reference of named logger to check configured {@link Level}. */\n     private Logger logger;\n \n     private Handler handler;\n     private String loggerName;\n-    private ByteArrayOutputStream baos;\n+    private StringBuilder buffer;\n     private Level messageLevel;\n-    private int matched = 0;\n \n-    private JulHandlerAdapterOutputStream(Handler handler, String loggerName, Level logLevel) {\n+    private JulHandlerPrintStream(Handler handler, String loggerName, Level logLevel) {\n+      super(\n+          new OutputStream() {\n+            @Override\n+            public void write(int i) throws IOException {\n+              throw new RuntimeException(\"All methods should be overwritten so this is unused\");\n+            }\n+          });\n       this.handler = handler;\n       this.loggerName = loggerName;\n       this.messageLevel = logLevel;\n       this.logger = Logger.getLogger(loggerName);\n-      this.baos = new ByteArrayOutputStream(BUFFER_LIMIT);\n+      this.buffer = new StringBuilder(BUFFER_LIMIT);\n     }\n \n     @Override\n-    public void write(int b) {\n-      if (outputWarning.compareAndSet(false, true)) {\n-        publish(Level.WARNING, LOGGING_DISCLAIMER);\n+    public void flush() {\n+      publish(flushToString());\n+    }\n+\n+    private synchronized String flushToString() {\n+      if (buffer.length() > 0 && buffer.charAt(buffer.length() - 1) == '\\n') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08bfb704ff0aa68cf4f6d5f1a0505092f646cf41"}, "originalPosition": 89}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08bfb704ff0aa68cf4f6d5f1a0505092f646cf41", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/08bfb704ff0aa68cf4f6d5f1a0505092f646cf41", "committedDate": "2020-03-11T00:09:11Z", "message": "Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}, "afterCommit": {"oid": "abf4d7b10f5a6d6cd44f67b0571eef5f083a10f2", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/abf4d7b10f5a6d6cd44f67b0571eef5f083a10f2", "committedDate": "2020-03-11T19:25:12Z", "message": "Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abf4d7b10f5a6d6cd44f67b0571eef5f083a10f2", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/abf4d7b10f5a6d6cd44f67b0571eef5f083a10f2", "committedDate": "2020-03-11T19:25:12Z", "message": "Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}, "afterCommit": {"oid": "fd4beaf93b25a49e72e3f342479d502cda507b02", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/fd4beaf93b25a49e72e3f342479d502cda507b02", "committedDate": "2020-03-11T20:25:04Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTMwNDM0", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-373930434", "createdAt": "2020-03-12T21:59:10Z", "commit": {"oid": "fd4beaf93b25a49e72e3f342479d502cda507b02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1OToxMFrOF1xc3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1OToxMFrOF1xc3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyOTA1Mg==", "bodyText": "You need to use the stateful version of the CharsetDecoder.decode since this method assumes that the byte[] range represents a whole valid String.\nIn the other methods you would need to finish the decoding if there is a partial decoding in flight.", "url": "https://github.com/apache/beam/pull/11096#discussion_r391929052", "createdAt": "2020-03-12T21:59:10Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/logging/JulHandlerPrintStreamAdapterFactory.java", "diffHunk": "@@ -37,114 +43,328 @@\n class JulHandlerPrintStreamAdapterFactory {\n   private static final AtomicBoolean outputWarning = new AtomicBoolean(false);\n \n-  /**\n-   * Creates a {@link PrintStream} which redirects all output to the JUL {@link Handler} with the\n-   * specified {@code loggerName} and {@code level}.\n-   */\n-  static PrintStream create(Handler handler, String loggerName, Level messageLevel) {\n-    try {\n-      return new PrintStream(\n-          new JulHandlerAdapterOutputStream(handler, loggerName, messageLevel),\n-          false,\n-          StandardCharsets.UTF_8.name());\n-    } catch (UnsupportedEncodingException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  /**\n-   * An output stream adapter which is able to take a stream of UTF-8 data and output to a named JUL\n-   * log handler. The log messages will be buffered until the system dependent new line separator is\n-   * seen, at which point the buffered string will be output.\n-   */\n-  private static class JulHandlerAdapterOutputStream extends OutputStream {\n+  private static class JulHandlerPrintStream extends PrintStream {\n     private static final String LOGGING_DISCLAIMER =\n         String.format(\n             \"Please use a logger instead of System.out or System.err.%n\"\n                 + \"Please switch to using org.slf4j.Logger.%n\"\n                 + \"See: https://cloud.google.com/dataflow/pipelines/logging\");\n-    // This limits the number of bytes which we buffer in case we don't see a newline character.\n-    private static final int BUFFER_LIMIT = 1 << 14; // 16384 bytes\n-    private static final byte[] NEW_LINE = System.lineSeparator().getBytes(StandardCharsets.UTF_8);\n+    // This limits the number of bytes which we buffer in case we don't have a flush.\n+    private static final int BUFFER_LIMIT = 1 << 10; // 1024 chars\n \n     /** Hold reference of named logger to check configured {@link Level}. */\n-    private Logger logger;\n+    private final Logger logger;\n \n-    private Handler handler;\n-    private String loggerName;\n-    private ByteArrayOutputStream baos;\n-    private Level messageLevel;\n-    private int matched = 0;\n+    private final Handler handler;\n+    private final String loggerName;\n+    private final StringBuilder buffer;\n+    private final Level messageLevel;\n+    private final CharsetDecoder decoder;\n \n-    private JulHandlerAdapterOutputStream(Handler handler, String loggerName, Level logLevel) {\n+\n+    private JulHandlerPrintStream(Handler handler, String loggerName, Level logLevel) {\n+      super(\n+          new OutputStream() {\n+            @Override\n+            public void write(int i) throws IOException {\n+              throw new RuntimeException(\"All methods should be overwritten so this is unused\");\n+            }\n+          });\n       this.handler = handler;\n       this.loggerName = loggerName;\n       this.messageLevel = logLevel;\n       this.logger = Logger.getLogger(loggerName);\n-      this.baos = new ByteArrayOutputStream(BUFFER_LIMIT);\n+      this.buffer = new StringBuilder(BUFFER_LIMIT);\n+      this.decoder = Charset.defaultCharset().newDecoder();\n+    }\n+\n+    @Override\n+    public void flush() {\n+      publish(flushToString());\n+    }\n+\n+    private synchronized String flushToString() {\n+      if (buffer.length() > 0 && buffer.charAt(buffer.length() - 1) == '\\n') {\n+        buffer.setLength(buffer.length() - 1);\n+      }\n+      String result = buffer.toString();\n+      buffer.setLength(0);\n+      return result;\n+    }\n+\n+    @Override\n+    public void close() {\n+      flush();\n+    }\n+\n+    @Override\n+    public boolean checkError() {\n+      return false;\n+    }\n+\n+    @Override\n+    public synchronized void write(int i) {\n+      buffer.append(i);\n+    }\n+\n+    @Override\n+    public void write(byte[] a, int start, int limit) {\n+      CharBuffer decoded;\n+      synchronized (decoder) {\n+        try {\n+          decoded = decoder.decode(ByteBuffer.wrap(a, start, limit));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4beaf93b25a49e72e3f342479d502cda507b02"}, "originalPosition": 127}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd4beaf93b25a49e72e3f342479d502cda507b02", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/fd4beaf93b25a49e72e3f342479d502cda507b02", "committedDate": "2020-03-11T20:25:04Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}, "afterCommit": {"oid": "d0b54ab1d0cf2145a9e49f7d1f86013219326382", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/d0b54ab1d0cf2145a9e49f7d1f86013219326382", "committedDate": "2020-03-19T20:00:57Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0b54ab1d0cf2145a9e49f7d1f86013219326382", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/d0b54ab1d0cf2145a9e49f7d1f86013219326382", "committedDate": "2020-03-19T20:00:57Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}, "afterCommit": {"oid": "9651178f2fb72961aa81ddbb2d4ea289afc3c3ad", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/9651178f2fb72961aa81ddbb2d4ea289afc3c3ad", "committedDate": "2020-03-19T21:40:19Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjQ3NzE5", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-384247719", "createdAt": "2020-03-30T21:33:33Z", "commit": {"oid": "9651178f2fb72961aa81ddbb2d4ea289afc3c3ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTozMzozM1rOF99DsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTozMzozM1rOF99DsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwNzgyNA==", "bodyText": "You have to use the default charset for getBytes since you use the default charset in the CharsetDecoder.", "url": "https://github.com/apache/beam/pull/11096#discussion_r400507824", "createdAt": "2020-03-30T21:33:33Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/logging/JulHandlerPrintStreamAdapterFactoryTest.java", "diffHunk": "@@ -115,6 +116,22 @@ public void testLogOnClose() {\n     assertThat(handler.getLogs(), hasLogItem(\"blah\"));\n   }\n \n+  @Test\n+  public void testLogRawBytes() {\n+    PrintStream printStream = createPrintStreamAdapter();\n+    String msg = \"\u2660 \u2661 \u2662 \u2663 \u2664 \u2665 \u2666 \u2667\";\n+    byte[] bytes = msg.getBytes(UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9651178f2fb72961aa81ddbb2d4ea289afc3c3ad"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjQ5NjE0", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-384249614", "createdAt": "2020-03-30T21:36:45Z", "commit": {"oid": "9651178f2fb72961aa81ddbb2d4ea289afc3c3ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072ddc01bca5f97541957634355a2e3bc367d120", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/072ddc01bca5f97541957634355a2e3bc367d120", "committedDate": "2020-03-30T22:50:15Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9651178f2fb72961aa81ddbb2d4ea289afc3c3ad", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/9651178f2fb72961aa81ddbb2d4ea289afc3c3ad", "committedDate": "2020-03-19T21:40:19Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}, "afterCommit": {"oid": "072ddc01bca5f97541957634355a2e3bc367d120", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/072ddc01bca5f97541957634355a2e3bc367d120", "committedDate": "2020-03-30T22:50:15Z", "message": "[BEAM-9399] Change the redirection of System.err to be a custom PrintStream\ninstead of a custom output stream wrapped by standard PrintStream."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODI3NTQw", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-384827540", "createdAt": "2020-03-31T15:05:14Z", "commit": {"oid": "072ddc01bca5f97541957634355a2e3bc367d120"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODc3OTU0", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-384877954", "createdAt": "2020-03-31T15:58:03Z", "commit": {"oid": "072ddc01bca5f97541957634355a2e3bc367d120"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2e8b62ea57af30daa279cd1c42409eb437a3900", "author": {"user": {"login": "scwhittle", "name": null}}, "url": "https://github.com/apache/beam/commit/e2e8b62ea57af30daa279cd1c42409eb437a3900", "committedDate": "2020-03-31T17:02:24Z", "message": "Fix missing test import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTM4MTEz", "url": "https://github.com/apache/beam/pull/11096#pullrequestreview-384938113", "createdAt": "2020-03-31T17:10:40Z", "commit": {"oid": "e2e8b62ea57af30daa279cd1c42409eb437a3900"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4888, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}