{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzc2MjE1", "number": 11154, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzoyNToxOVrODp3cwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0OTo1NVrOD20RTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjI2NjkwOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzoyNToxOVrOF5TiAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0NDowMVrOF5UOiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzMzE1NQ==", "bodyText": "you'll need the change to StreamingDataflowWorker as well, without it, the key will always be null.", "url": "https://github.com/apache/beam/pull/11154#discussion_r395633155", "createdAt": "2020-03-20T13:25:19Z", "author": {"login": "steveniemitz"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -361,6 +361,7 @@ private void processUserTimer(TimerData timer) throws Exception {\n       fnRunner.onTimer(\n           timer.getTimerId(),\n           timer.getTimerFamilyId(),\n+          this.stepContext.stateInternals().getKey(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c36afa3a8e40cc9a4b0305b0d56ebec2c1b9541"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NDU1Mg==", "bodyText": "@steveniemitz added.", "url": "https://github.com/apache/beam/pull/11154#discussion_r395644552", "createdAt": "2020-03-20T13:44:01Z", "author": {"login": "rehmanmuradali"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -361,6 +361,7 @@ private void processUserTimer(TimerData timer) throws Exception {\n       fnRunner.onTimer(\n           timer.getTimerId(),\n           timer.getTimerFamilyId(),\n+          this.stepContext.stateInternals().getKey(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzMzE1NQ=="}, "originalCommit": {"oid": "3c36afa3a8e40cc9a4b0305b0d56ebec2c1b9541"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg1ODYzOnYy", "diffSide": "RIGHT", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToyMzowMVrOF5jlGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzo0Njo0M1rOF7HPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5NjA5MQ==", "bodyText": "should this instead return KeyT?", "url": "https://github.com/apache/beam/pull/11154#discussion_r395896091", "createdAt": "2020-03-20T21:23:01Z", "author": {"login": "reuvenlax"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java", "diffHunk": "@@ -686,6 +697,11 @@ public TimeDomain timeDomain() {\n       return timeDomain;\n     }\n \n+    @Override\n+    public Object key() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyODkyNw==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11154#discussion_r397528927", "createdAt": "2020-03-24T23:46:43Z", "author": {"login": "rehmanmuradali"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java", "diffHunk": "@@ -686,6 +697,11 @@ public TimeDomain timeDomain() {\n       return timeDomain;\n     }\n \n+    @Override\n+    public Object key() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5NjA5MQ=="}, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg2MzYxOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkStatefulDoFnFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToyNToyOFrOF5joeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzo0Njo1NlrOF7HPtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5Njk1Mg==", "bodyText": "It looks like it should be easy to set the correct key here.", "url": "https://github.com/apache/beam/pull/11154#discussion_r395896952", "createdAt": "2020-03-20T21:25:28Z", "author": {"login": "reuvenlax"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkStatefulDoFnFunction.java", "diffHunk": "@@ -218,6 +218,7 @@ private void fireTimer(TimerInternals.TimerData timer, DoFnRunner<KV<K, V>, Outp\n     doFnRunner.onTimer(\n         timer.getTimerId(),\n         timer.getTimerFamilyId(),\n+        \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTAxMg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11154#discussion_r397529012", "createdAt": "2020-03-24T23:46:56Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkStatefulDoFnFunction.java", "diffHunk": "@@ -218,6 +218,7 @@ private void fireTimer(TimerInternals.TimerData timer, DoFnRunner<KV<K, V>, Outp\n     doFnRunner.onTimer(\n         timer.getTimerId(),\n         timer.getTimerFamilyId(),\n+        \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5Njk1Mg=="}, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg2NTkxOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToyNjoyMFrOF5jp3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzo0NzowN1rOF7HP5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5NzMwOA==", "bodyText": "Also should be easy to do here.", "url": "https://github.com/apache/beam/pull/11154#discussion_r395897308", "createdAt": "2020-03-20T21:26:20Z", "author": {"login": "reuvenlax"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -847,6 +847,7 @@ protected void fireTimer(InternalTimer<ByteBuffer, TimerData> timer) {\n     pushbackDoFnRunner.onTimer(\n         timerData.getTimerId(),\n         timerData.getTimerFamilyId(),\n+        \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTA2MA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11154#discussion_r397529060", "createdAt": "2020-03-24T23:47:07Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -847,6 +847,7 @@ protected void fireTimer(InternalTimer<ByteBuffer, TimerData> timer) {\n     pushbackDoFnRunner.onTimer(\n         timerData.getTimerId(),\n         timerData.getTimerFamilyId(),\n+        \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5NzMwOA=="}, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODQ5ODUyOnYy", "diffSide": "RIGHT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0MjowOVrOF6OMcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1NTo1OVrOF6Ozdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NDI4OQ==", "bodyText": "I'm not sure I understand why this is needed.", "url": "https://github.com/apache/beam/pull/11154#discussion_r396594289", "createdAt": "2020-03-23T16:42:09Z", "author": {"login": "reuvenlax"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1155,6 +1156,10 @@ public Instant getStateStartTime() {\n     // Note that TimerOrElementCoder is a backwards-compatibility class\n     // that is really a FakeKeyedWorkItemCoder\n     Coder<?> valueCoder = ((WindowedValueCoder<?>) readCoder).getValueCoder();\n+\n+    if (valueCoder instanceof KvCoder<?, ?>) {\n+      return ((KvCoder<?, ?>) valueCoder).getKeyCoder();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNDI3OA==", "bodyText": "without it, the key passed into the WindmillStateInternals constructor is always null.  This coder is used to deserialize the user key from the work item key here:\nhttps://github.com/apache/beam/blob/master/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java#L1340\nIt doesn't look like it was ever really used before other than for debug messages.", "url": "https://github.com/apache/beam/pull/11154#discussion_r396604278", "createdAt": "2020-03-23T16:55:59Z", "author": {"login": "steveniemitz"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -1155,6 +1156,10 @@ public Instant getStateStartTime() {\n     // Note that TimerOrElementCoder is a backwards-compatibility class\n     // that is really a FakeKeyedWorkItemCoder\n     Coder<?> valueCoder = ((WindowedValueCoder<?>) readCoder).getValueCoder();\n+\n+    if (valueCoder instanceof KvCoder<?, ?>) {\n+      return ((KvCoder<?, ?>) valueCoder).getKeyCoder();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NDI4OQ=="}, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODUwODE3OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NDoxNVrOF6OSow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzo0Nzo0MFrOF7HQiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NTg3NQ==", "bodyText": "I think should just be named Key, not KeyId.\nAlso I wouldn't reference OnTimer here, as @key also makes sense in processElement (instead of getting a KV you should be able to get they key and the value in separate parameters.", "url": "https://github.com/apache/beam/pull/11154#discussion_r396595875", "createdAt": "2020-03-23T16:44:15Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java", "diffHunk": "@@ -481,6 +481,12 @@ public Duration getAllowedTimestampSkew() {\n     String value();\n   }\n \n+  /** Parameter annotation for the input element key for {@link OnTimer} methods. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTIyNQ==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/11154#discussion_r397529225", "createdAt": "2020-03-24T23:47:40Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java", "diffHunk": "@@ -481,6 +481,12 @@ public Duration getAllowedTimestampSkew() {\n     String value();\n   }\n \n+  /** Parameter annotation for the input element key for {@link OnTimer} methods. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NTg3NQ=="}, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODUxMjk0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NToyM1rOF6OVsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzo0Nzo1MlrOF7HQ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NjY1Nw==", "bodyText": "Need javadoc", "url": "https://github.com/apache/beam/pull/11154#discussion_r396596657", "createdAt": "2020-03-23T16:45:23Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java", "diffHunk": "@@ -167,6 +167,8 @@ void invokeOnTimer(\n     /** Provide a reference to the input element. */\n     InputT element(DoFn<InputT, OutputT> doFn);\n \n+    Object key();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTMwMg==", "bodyText": "Added", "url": "https://github.com/apache/beam/pull/11154#discussion_r397529302", "createdAt": "2020-03-24T23:47:52Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java", "diffHunk": "@@ -167,6 +167,8 @@ void invokeOnTimer(\n     /** Provide a reference to the input element. */\n     InputT element(DoFn<InputT, OutputT> doFn);\n \n+    Object key();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NjY1Nw=="}, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODUxODM0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0NjozM1rOF6OZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzo0ODozMlrOF7HRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NzUxNQ==", "bodyText": "I think we also need to verify that the input type is a KV", "url": "https://github.com/apache/beam/pull/11154#discussion_r396597515", "createdAt": "2020-03-23T16:46:33Z", "author": {"login": "reuvenlax"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java", "diffHunk": "@@ -1282,6 +1283,14 @@ private static Parameter analyzeExtraParameter(\n           rawType.equals(Instant.class),\n           \"@Timestamp argument must have type org.joda.time.Instant.\");\n       return Parameter.timestampParameter();\n+    } else if (hasAnnotation(DoFn.KeyId.class, param.getAnnotations())) {\n+      Type keyType = ((ParameterizedType) inputT.getType()).getActualTypeArguments()[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTUzNg==", "bodyText": "@reuvenlax , Added with a test case", "url": "https://github.com/apache/beam/pull/11154#discussion_r397529536", "createdAt": "2020-03-24T23:48:32Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java", "diffHunk": "@@ -1282,6 +1283,14 @@ private static Parameter analyzeExtraParameter(\n           rawType.equals(Instant.class),\n           \"@Timestamp argument must have type org.joda.time.Instant.\");\n       return Parameter.timestampParameter();\n+    } else if (hasAnnotation(DoFn.KeyId.class, param.getAnnotations())) {\n+      Type keyType = ((ParameterizedType) inputT.getType()).getActualTypeArguments()[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NzUxNQ=="}, "originalCommit": {"oid": "0dd289bd9599bfd27a42d0fd4e4981938dd2891e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Njk2MjI3OnYy", "diffSide": "LEFT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferedElements.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTozOTozMFrOF_9d0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0NDoyM1rOGAbG3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMTY2NQ==", "bodyText": "Can we pass the key through here?  We might need to include it in the coder for BufferedElements.Timer", "url": "https://github.com/apache/beam/pull/11154#discussion_r402611665", "createdAt": "2020-04-02T21:39:30Z", "author": {"login": "reuvenlax"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferedElements.java", "diffHunk": "@@ -90,7 +90,8 @@ public int hashCode() {\n \n     @Override\n     public void processWith(DoFnRunner doFnRunner) {\n-      doFnRunner.onTimer(timerId, timerFamilyId, window, timestamp, outputTimestamp, timeDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f82e74f39c4bad228b44753c616f2065a3742bc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NzMxMQ==", "bodyText": "@reuvenlax  done", "url": "https://github.com/apache/beam/pull/11154#discussion_r403097311", "createdAt": "2020-04-03T15:44:23Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferedElements.java", "diffHunk": "@@ -90,7 +90,8 @@ public int hashCode() {\n \n     @Override\n     public void processWith(DoFnRunner doFnRunner) {\n-      doFnRunner.onTimer(timerId, timerFamilyId, window, timestamp, outputTimestamp, timeDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMTY2NQ=="}, "originalCommit": {"oid": "1f82e74f39c4bad228b44753c616f2065a3742bc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzUyNzg4OnYy", "diffSide": "RIGHT", "path": "examples/java/src/main/java/org/apache/beam/examples/complete/AutoComplete.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoxMjoyMlrOGACvKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0NTo1MlrOGAbKwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5ODAyNA==", "bodyText": "the changes in this file don't seem necessary. We've got rid of an import but introduced a fully qualified class name for the same import instead.", "url": "https://github.com/apache/beam/pull/11154#discussion_r402698024", "createdAt": "2020-04-03T02:12:22Z", "author": {"login": "shehzaadn-vd"}, "path": "examples/java/src/main/java/org/apache/beam/examples/complete/AutoComplete.java", "diffHunk": "@@ -386,7 +385,8 @@ public FormatForDatastore(String kind, String ancestorKey) {\n     @ProcessElement\n     public void processElement(ProcessContext c) {\n       Entity.Builder entityBuilder = Entity.newBuilder();\n-      Key key = makeKey(makeKey(kind, ancestorKey).build(), kind, c.element().getKey()).build();\n+      com.google.datastore.v1.Key key =\n+          makeKey(makeKey(kind, ancestorKey).build(), kind, c.element().getKey()).build();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f82e74f39c4bad228b44753c616f2065a3742bc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5ODMwNQ==", "bodyText": "The mentioned Key was conflicting with our DoFn.Key interface.", "url": "https://github.com/apache/beam/pull/11154#discussion_r403098305", "createdAt": "2020-04-03T15:45:52Z", "author": {"login": "rehmanmuradali"}, "path": "examples/java/src/main/java/org/apache/beam/examples/complete/AutoComplete.java", "diffHunk": "@@ -386,7 +385,8 @@ public FormatForDatastore(String kind, String ancestorKey) {\n     @ProcessElement\n     public void processElement(ProcessContext c) {\n       Entity.Builder entityBuilder = Entity.newBuilder();\n-      Key key = makeKey(makeKey(kind, ancestorKey).build(), kind, c.element().getKey()).build();\n+      com.google.datastore.v1.Key key =\n+          makeKey(makeKey(kind, ancestorKey).build(), kind, c.element().getKey()).build();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5ODAyNA=="}, "originalCommit": {"oid": "1f82e74f39c4bad228b44753c616f2065a3742bc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzUxMTc0OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferingDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMjozNzowM1rOGA2t6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0MTozOVrOGBghnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU0OTY3Mg==", "bodyText": "On a closer look, I think adding to the Coder is the wrong way to preserve the key. DoFnOperator has a stateInternals() which should provide access to the current key, and that way we don't have to encode the key again.\nSorry for the bad suggestion.", "url": "https://github.com/apache/beam/pull/11154#discussion_r403549672", "createdAt": "2020-04-04T22:37:03Z", "author": {"login": "reuvenlax"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferingDoFnRunner.java", "diffHunk": "@@ -125,8 +129,8 @@ public void processElement(WindowedValue<InputT> elem) {\n       Instant outputTimestamp,\n       TimeDomain timeDomain) {\n     currentBufferingElementsHandler.buffer(\n-        new BufferedElements.Timer(\n-            timerId, timerFamilyId, window, timestamp, outputTimestamp, timeDomain));\n+        new BufferedElements.Timer<>(\n+            timerId, timerFamilyId, key, window, timestamp, outputTimestamp, timeDomain));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac020cdfceefa245e8fc7aadbfff4fb7b573a63"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDY1Mg==", "bodyText": "@reuvenlax  done", "url": "https://github.com/apache/beam/pull/11154#discussion_r404234652", "createdAt": "2020-04-06T16:41:39Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/stableinput/BufferingDoFnRunner.java", "diffHunk": "@@ -125,8 +129,8 @@ public void processElement(WindowedValue<InputT> elem) {\n       Instant outputTimestamp,\n       TimeDomain timeDomain) {\n     currentBufferingElementsHandler.buffer(\n-        new BufferedElements.Timer(\n-            timerId, timerFamilyId, window, timestamp, outputTimestamp, timeDomain));\n+        new BufferedElements.Timer<>(\n+            timerId, timerFamilyId, key, window, timestamp, outputTimestamp, timeDomain));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU0OTY3Mg=="}, "originalCommit": {"oid": "9ac020cdfceefa245e8fc7aadbfff4fb7b573a63"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzU5NTM1OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxNToyOVrOGGs9yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo0Mzo1MlrOGJJntQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ==", "bodyText": "@mxm Can you take a quick look and verify that this key handling is correct here?", "url": "https://github.com/apache/beam/pull/11154#discussion_r409681355", "createdAt": "2020-04-16T16:15:29Z", "author": {"login": "reuvenlax"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NjUwOQ==", "bodyText": "The key is always stored as ByteBuffer. This is also reflected in the method calls to this method. Please change the signature of the method to be\nvoid fireTimerInternal(ByteBuffer key, TimerData timerdata)", "url": "https://github.com/apache/beam/pull/11154#discussion_r410196509", "createdAt": "2020-04-17T12:43:15Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyNDE4NQ==", "bodyText": "@mxm, upon debugging, I noticed that timer.getKey() returns String, Integer, as well as ByteBuffer. That's why when I changed the method signature, DoFnOperatorTest failed with ClassCastException. And I have added an instanceof check", "url": "https://github.com/apache/beam/pull/11154#discussion_r410224185", "createdAt": "2020-04-17T13:32:01Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzOTY1Mw==", "bodyText": "Isn't timer.getKey() a new interface? Keys are always internally stored encoded as ByteBuffer. The keys itself can of course be of any type. The test might not instrument the code correctly.", "url": "https://github.com/apache/beam/pull/11154#discussion_r410239653", "createdAt": "2020-04-17T13:55:58Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1MDYzOA==", "bodyText": "@mxm should I use a different interface to get the encoded key? Isn't timer.getKey was supposed to return ByteBuffer always?", "url": "https://github.com/apache/beam/pull/11154#discussion_r410250638", "createdAt": "2020-04-17T14:13:08Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMjg4Ng==", "bodyText": "The key is always encoded at this point. The issue is that some unit tests use a non-encoded key which is incorrect. We have to fix this to change the method signature to ByteBuffer here. As a workaround you could use keyedStateInternals.getCurrentKey() which will return a decoded version of the key.", "url": "https://github.com/apache/beam/pull/11154#discussion_r411312886", "createdAt": "2020-04-20T11:47:26Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMzM2Mw==", "bodyText": "If you do, please add a // TODO comment alongside with it.", "url": "https://github.com/apache/beam/pull/11154#discussion_r411313363", "createdAt": "2020-04-20T11:48:17Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0NTE1OA==", "bodyText": "keyStateInternal.getKey() internally assumes that the key is of type ByteBuffer and tries to decode it. Since we have some test that uses decoded key, we get ClassCastException here as well. To prevent it I have added a key instanceof java.nio.ByteBuffer check on timer.getKey(). This will let me know when to decode, as a workaround. @mxm", "url": "https://github.com/apache/beam/pull/11154#discussion_r411345158", "createdAt": "2020-04-20T12:42:07Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3Mjg1OQ==", "bodyText": "Yes, it assumes that the key is of type ByteBuffer because the key type we pass to Flink is always ByteBuffer. We shouldn't be adding instanceof checks to the main code in order for tests to pass. Let's adapt the tests instead. You need to ensure that the KeySelector used in the tests returns ByteBuffer. I can help you in case you get stuck.", "url": "https://github.com/apache/beam/pull/11154#discussion_r411372859", "createdAt": "2020-04-20T13:23:04Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0Nzk4OQ==", "bodyText": "Thanks for providing the lead. I am on it.", "url": "https://github.com/apache/beam/pull/11154#discussion_r412247989", "createdAt": "2020-04-21T14:43:52Z", "author": {"login": "rehmanmuradali"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MTM1NQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njg1MjgxOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjo0NToxNlrOGHMeLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyNjozM1rOGKHSTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NzU0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected void fireTimerInternal(Object key, TimerData timerData) {\n          \n          \n            \n              protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {", "url": "https://github.com/apache/beam/pull/11154#discussion_r410197549", "createdAt": "2020-04-17T12:45:16Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1ODMxOQ==", "bodyText": "Can we change this to ByteBuffer now? Same in ExecutableStageDoFnOperator where it is overridden.", "url": "https://github.com/apache/beam/pull/11154#discussion_r413258319", "createdAt": "2020-04-22T19:26:33Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NzU0OQ=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njg1NDIxOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjo0NTozOVrOGHMfCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjo0OToyNFrOGHMm7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5Nzc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected void fireTimer(Object key, TimerData timerData) {\n          \n          \n            \n              protected void fireTimer(ByteBuffer key, TimerData timerData) {", "url": "https://github.com/apache/beam/pull/11154#discussion_r410197770", "createdAt": "2020-04-17T12:45:39Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);\n+    }\n+\n+    fireTimer(key, timerData);\n   }\n \n   // allow overriding this in WindowDoFnOperator\n-  protected void fireTimer(TimerData timerData) {\n+  protected void fireTimer(Object key, TimerData timerData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5OTc4OA==", "bodyText": "If you decide the decode the key already in the calling method, then use the key type here.", "url": "https://github.com/apache/beam/pull/11154#discussion_r410199788", "createdAt": "2020-04-17T12:49:24Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -837,11 +837,15 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(Object key, TimerData timerData) {\n-    fireTimer(timerData);\n+    if (key instanceof java.nio.ByteBuffer) {\n+      key = FlinkKeyUtils.decodeKey((ByteBuffer) key, keyCoder);\n+    }\n+\n+    fireTimer(key, timerData);\n   }\n \n   // allow overriding this in WindowDoFnOperator\n-  protected void fireTimer(TimerData timerData) {\n+  protected void fireTimer(Object key, TimerData timerData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5Nzc3MA=="}, "originalCommit": {"oid": "0cb32299b1627a91cbe174ebb1fe0dfcbb3f4d8e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODA2MDk1OnYy", "diffSide": "LEFT", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0OTo1NVrOGMwCKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0ODo1M1rOGNL88w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzA4MA==", "bodyText": "The intent of these context objects was to not create a new one when processing each element/timer and instead to reference a member variable as can be seen in:\n\n  \n    \n      beam/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n    \n    \n         Line 1468\n      in\n      591de34\n    \n    \n    \n    \n\n        \n          \n           return pipelineOptions; \n        \n    \n  \n\n\n\n  \n    \n      beam/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n    \n    \n         Line 1506\n      in\n      591de34\n    \n    \n    \n    \n\n        \n          \n           return currentElement.getValue(); \n        \n    \n  \n\n\nIt would have made more sense to have OnTimerContext just return currentTimer.getUserKey()", "url": "https://github.com/apache/beam/pull/11154#discussion_r416023080", "createdAt": "2020-04-27T17:49:55Z", "author": {"login": "lukecwik"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -560,7 +560,6 @@ public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n         throw new IllegalStateException(\n             String.format(\"Unknown URN %s\", pTransform.getSpec().getUrn()));\n     }\n-    this.onTimerContext = new OnTimerContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4ef9604faa8761e2159e4b13a2ed2791646a27"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzODk2MA==", "bodyText": "+1 Let's fix these in a follow-up.", "url": "https://github.com/apache/beam/pull/11154#discussion_r416038960", "createdAt": "2020-04-27T18:12:12Z", "author": {"login": "mxm"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -560,7 +560,6 @@ public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n         throw new IllegalStateException(\n             String.format(\"Unknown URN %s\", pTransform.getSpec().getUrn()));\n     }\n-    this.onTimerContext = new OnTimerContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzA4MA=="}, "originalCommit": {"oid": "4c4ef9604faa8761e2159e4b13a2ed2791646a27"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4MjIzMw==", "bodyText": "And document the intent.", "url": "https://github.com/apache/beam/pull/11154#discussion_r416282233", "createdAt": "2020-04-28T02:34:03Z", "author": {"login": "kennknowles"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -560,7 +560,6 @@ public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n         throw new IllegalStateException(\n             String.format(\"Unknown URN %s\", pTransform.getSpec().getUrn()));\n     }\n-    this.onTimerContext = new OnTimerContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzA4MA=="}, "originalCommit": {"oid": "4c4ef9604faa8761e2159e4b13a2ed2791646a27"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ0NTg5Ng==", "bodyText": "And document the intent.\n\n! :)\n@rehmanmuradali Do you have time to look into this?", "url": "https://github.com/apache/beam/pull/11154#discussion_r416445896", "createdAt": "2020-04-28T08:55:24Z", "author": {"login": "mxm"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -560,7 +560,6 @@ public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n         throw new IllegalStateException(\n             String.format(\"Unknown URN %s\", pTransform.getSpec().getUrn()));\n     }\n-    this.onTimerContext = new OnTimerContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzA4MA=="}, "originalCommit": {"oid": "4c4ef9604faa8761e2159e4b13a2ed2791646a27"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3ODgxOA==", "bodyText": "+1 worth to create a JIRA to track it.", "url": "https://github.com/apache/beam/pull/11154#discussion_r416478818", "createdAt": "2020-04-28T09:46:18Z", "author": {"login": "iemejia"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -560,7 +560,6 @@ public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n         throw new IllegalStateException(\n             String.format(\"Unknown URN %s\", pTransform.getSpec().getUrn()));\n     }\n-    this.onTimerContext = new OnTimerContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzA4MA=="}, "originalCommit": {"oid": "4c4ef9604faa8761e2159e4b13a2ed2791646a27"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDQ5OQ==", "bodyText": "@mxm  I am currently working on BEAM-1589, BEAM-8543. I will get back to it after that. The Jira is filed here: https://issues.apache.org/jira/browse/BEAM-9839", "url": "https://github.com/apache/beam/pull/11154#discussion_r416480499", "createdAt": "2020-04-28T09:48:53Z", "author": {"login": "rehmanmuradali"}, "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -560,7 +560,6 @@ public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n         throw new IllegalStateException(\n             String.format(\"Unknown URN %s\", pTransform.getSpec().getUrn()));\n     }\n-    this.onTimerContext = new OnTimerContext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzA4MA=="}, "originalCommit": {"oid": "4c4ef9604faa8761e2159e4b13a2ed2791646a27"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1679, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}