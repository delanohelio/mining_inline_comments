{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzI1OTMy", "number": 13588, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1NToxNFrOFH9bBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTowMzowN1rOFJ52XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODkwNjkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1NToxNFrOIJoepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMzoxMzowOFrOIMDtTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTMwMQ==", "bodyText": "Rather than making these functions public so our internal code can use them, could we try to move the internal code into Beam? I think it should be possible to move it into DataCatalogTableProvider", "url": "https://github.com/apache/beam/pull/13588#discussion_r546971301", "createdAt": "2020-12-21T22:55:14Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -53,7 +53,7 @@\n           .build();\n \n   /** Convert DataCatalog schema to Beam schema. */\n-  static Schema fromDataCatalog(com.google.cloud.datacatalog.v1beta1.Schema dcSchema) {\n+  public static Schema fromDataCatalog(com.google.cloud.datacatalog.v1beta1.Schema dcSchema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxNDU3NA==", "bodyText": "Done. PTAL.", "url": "https://github.com/apache/beam/pull/13588#discussion_r549514574", "createdAt": "2020-12-28T23:13:08Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -53,7 +53,7 @@\n           .build();\n \n   /** Convert DataCatalog schema to Beam schema. */\n-  static Schema fromDataCatalog(com.google.cloud.datacatalog.v1beta1.Schema dcSchema) {\n+  public static Schema fromDataCatalog(com.google.cloud.datacatalog.v1beta1.Schema dcSchema) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTMwMQ=="}, "originalCommit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODkxMDY1OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1NjoxNFrOIJogsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzoxMDo0NVrOIMaMHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTgyNw==", "bodyText": "Could you add unit tests that convert to/from data catalog types?", "url": "https://github.com/apache/beam/pull/13588#discussion_r546971827", "createdAt": "2020-12-21T22:56:14Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -98,4 +98,91 @@ private static FieldType getBeamFieldType(ColumnSchema column) {\n     throw new UnsupportedOperationException(\n         \"Field type '\" + dcFieldType + \"' is not supported (field '\" + column.getColumn() + \"')\");\n   }\n+\n+  /** Convert Beam schema to DataCatalog schema. */\n+  public static com.google.cloud.datacatalog.v1beta1.Schema toDataCatalog(Schema schema) {\n+    com.google.cloud.datacatalog.v1beta1.Schema.Builder schemaBuilder =\n+        com.google.cloud.datacatalog.v1beta1.Schema.newBuilder();\n+    for (Schema.Field field : schema.getFields()) {\n+      schemaBuilder.addColumns(fromBeamField(field));\n+    }\n+    return schemaBuilder.build();\n+  }\n+\n+  private static ColumnSchema fromBeamField(Schema.Field field) {\n+    Schema.FieldType fieldType = field.getType();\n+    if (fieldType.getTypeName().equals(Schema.TypeName.ARRAY)) {\n+      if (fieldType.getNullable()) {\n+        throw new UnsupportedOperationException(\n+            \"Nullable array type is not supported in DataCatalog schemas: \" + fieldType);\n+      } else if (fieldType.getCollectionElementType().getNullable()) {\n+        throw new UnsupportedOperationException(\n+            \"Nullable array element type is not supported in DataCatalog schemas: \" + fieldType);\n+      } else if (fieldType.getCollectionElementType().getTypeName().equals(Schema.TypeName.ARRAY)) {\n+        throw new UnsupportedOperationException(\n+            \"Array of arrays not supported in DataCatalog schemas: \" + fieldType);\n+      }\n+      ColumnSchema column =\n+          fromBeamField(Field.of(field.getName(), fieldType.getCollectionElementType()));\n+      if (!column.getMode().isEmpty()) {\n+        // We should have bailed out earlier for any cases that would result in mode being set.\n+        throw new AssertionError(\n+            \"ColumnSchema for collection element type has non-empty mode: \" + fieldType);\n+      }\n+      return column.toBuilder().setMode(\"REPEATED\").build();\n+    } else { // struct or primitive type\n+      ColumnSchema.Builder colBuilder =\n+          ColumnSchema.newBuilder().setType(getDataCatalogType(fieldType));\n+\n+      if (fieldType.getNullable()) {\n+        colBuilder.setMode(\"NULLABLE\");\n+      }\n+\n+      // if this is a struct, add the child columns\n+      if (fieldType.getTypeName().equals(Schema.TypeName.ROW)) {\n+        for (Schema.Field subField : fieldType.getRowSchema().getFields()) {\n+          colBuilder.addSubcolumns(fromBeamField(subField));\n+        }\n+      }\n+\n+      return colBuilder.setColumn(field.getName()).build();\n+    }\n+  }\n+\n+  private static String getDataCatalogType(FieldType fieldType) {\n+    switch (fieldType.getTypeName()) {\n+      case INT32:\n+      case INT64:\n+      case BYTES:\n+      case DOUBLE:\n+      case STRING:\n+        return fieldType.getTypeName().name();\n+      case BOOLEAN:\n+        return \"BOOL\";\n+      case DATETIME:\n+        return \"TIMESTAMP\";\n+      case DECIMAL:\n+        return \"NUMERIC\";\n+      case LOGICAL_TYPE:\n+        Schema.LogicalType logical = fieldType.getLogicalType();\n+        if (SqlTypes.TIME.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"TIME\";\n+        } else if (SqlTypes.DATE.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"DATE\";\n+        } else if (SqlTypes.DATETIME.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"DATETIME\";\n+        } else {\n+          throw new UnsupportedOperationException(\"Unsupported logical type: \" + logical);\n+        }\n+      case ROW:\n+        return \"STRUCT\";\n+      case MAP:\n+        return String.format(\n+            \"MAP<%s,%s>\",\n+            getDataCatalogType(fieldType.getMapKeyType()),\n+            getDataCatalogType(fieldType.getMapValueType()));\n+      default:\n+        throw new UnsupportedOperationException(\"Unsupported type: \" + fieldType);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4MjkxMA==", "bodyText": "Tests added. While implementing the test I found a inconsistency in our implementation:\n\nIn fromDataCatalog we treat a DC field without any mode set as NULLABLE\nIn toDataCatalog we do not set any mode for a Beam field whose getNullable returns false, where I think we should set REQUIRED (fixed in the last commit, PTAL)", "url": "https://github.com/apache/beam/pull/13588#discussion_r549882910", "createdAt": "2020-12-29T23:10:45Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -98,4 +98,91 @@ private static FieldType getBeamFieldType(ColumnSchema column) {\n     throw new UnsupportedOperationException(\n         \"Field type '\" + dcFieldType + \"' is not supported (field '\" + column.getColumn() + \"')\");\n   }\n+\n+  /** Convert Beam schema to DataCatalog schema. */\n+  public static com.google.cloud.datacatalog.v1beta1.Schema toDataCatalog(Schema schema) {\n+    com.google.cloud.datacatalog.v1beta1.Schema.Builder schemaBuilder =\n+        com.google.cloud.datacatalog.v1beta1.Schema.newBuilder();\n+    for (Schema.Field field : schema.getFields()) {\n+      schemaBuilder.addColumns(fromBeamField(field));\n+    }\n+    return schemaBuilder.build();\n+  }\n+\n+  private static ColumnSchema fromBeamField(Schema.Field field) {\n+    Schema.FieldType fieldType = field.getType();\n+    if (fieldType.getTypeName().equals(Schema.TypeName.ARRAY)) {\n+      if (fieldType.getNullable()) {\n+        throw new UnsupportedOperationException(\n+            \"Nullable array type is not supported in DataCatalog schemas: \" + fieldType);\n+      } else if (fieldType.getCollectionElementType().getNullable()) {\n+        throw new UnsupportedOperationException(\n+            \"Nullable array element type is not supported in DataCatalog schemas: \" + fieldType);\n+      } else if (fieldType.getCollectionElementType().getTypeName().equals(Schema.TypeName.ARRAY)) {\n+        throw new UnsupportedOperationException(\n+            \"Array of arrays not supported in DataCatalog schemas: \" + fieldType);\n+      }\n+      ColumnSchema column =\n+          fromBeamField(Field.of(field.getName(), fieldType.getCollectionElementType()));\n+      if (!column.getMode().isEmpty()) {\n+        // We should have bailed out earlier for any cases that would result in mode being set.\n+        throw new AssertionError(\n+            \"ColumnSchema for collection element type has non-empty mode: \" + fieldType);\n+      }\n+      return column.toBuilder().setMode(\"REPEATED\").build();\n+    } else { // struct or primitive type\n+      ColumnSchema.Builder colBuilder =\n+          ColumnSchema.newBuilder().setType(getDataCatalogType(fieldType));\n+\n+      if (fieldType.getNullable()) {\n+        colBuilder.setMode(\"NULLABLE\");\n+      }\n+\n+      // if this is a struct, add the child columns\n+      if (fieldType.getTypeName().equals(Schema.TypeName.ROW)) {\n+        for (Schema.Field subField : fieldType.getRowSchema().getFields()) {\n+          colBuilder.addSubcolumns(fromBeamField(subField));\n+        }\n+      }\n+\n+      return colBuilder.setColumn(field.getName()).build();\n+    }\n+  }\n+\n+  private static String getDataCatalogType(FieldType fieldType) {\n+    switch (fieldType.getTypeName()) {\n+      case INT32:\n+      case INT64:\n+      case BYTES:\n+      case DOUBLE:\n+      case STRING:\n+        return fieldType.getTypeName().name();\n+      case BOOLEAN:\n+        return \"BOOL\";\n+      case DATETIME:\n+        return \"TIMESTAMP\";\n+      case DECIMAL:\n+        return \"NUMERIC\";\n+      case LOGICAL_TYPE:\n+        Schema.LogicalType logical = fieldType.getLogicalType();\n+        if (SqlTypes.TIME.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"TIME\";\n+        } else if (SqlTypes.DATE.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"DATE\";\n+        } else if (SqlTypes.DATETIME.getIdentifier().equals(logical.getIdentifier())) {\n+          return \"DATETIME\";\n+        } else {\n+          throw new UnsupportedOperationException(\"Unsupported logical type: \" + logical);\n+        }\n+      case ROW:\n+        return \"STRUCT\";\n+      case MAP:\n+        return String.format(\n+            \"MAP<%s,%s>\",\n+            getDataCatalogType(fieldType.getMapKeyType()),\n+            getDataCatalogType(fieldType.getMapValueType()));\n+      default:\n+        throw new UnsupportedOperationException(\"Unsupported type: \" + fieldType);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTgyNw=="}, "originalCommit": {"oid": "d56041e6c43db954810f76d605adb10e96cd3622"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTI4NzUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogTableProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMDo1NzoyNFrOIMbSTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDo0NDowNVrOIM0_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwMDg3OQ==", "bodyText": "This really shouldn't be public either, it would be best if this functionality was exposed through the existing public API (probably DataCatalogTableProvider.createTable). If you'd rather just keep this as-is for now, lets mark this function @Internal so Beam users don't expect backwards compatibility.", "url": "https://github.com/apache/beam/pull/13588#discussion_r549900879", "createdAt": "2020-12-30T00:57:24Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogTableProvider.java", "diffHunk": "@@ -178,6 +214,23 @@ private Table toCalciteTable(String tableName, Entry entry) {\n     return tableBuilder.get().schema(schema).name(tableName).build();\n   }\n \n+  public boolean setSchemaIfNotPresent(String resource, Schema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22abe994db3310ade53cb9131297383d6f66317"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMyMTkyMg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13588#discussion_r550321922", "createdAt": "2020-12-30T20:44:05Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/DataCatalogTableProvider.java", "diffHunk": "@@ -178,6 +214,23 @@ private Table toCalciteTable(String tableName, Entry entry) {\n     return tableBuilder.get().schema(schema).name(tableName).build();\n   }\n \n+  public boolean setSchemaIfNotPresent(String resource, Schema schema) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwMDg3OQ=="}, "originalCommit": {"oid": "e22abe994db3310ade53cb9131297383d6f66317"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTI5MzA4OnYy", "diffSide": "LEFT", "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTowMzowN1rOIMbVIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDo0NDowMFrOIM0-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwMTYwMw==", "bodyText": "This assertion could still be there and change to column.getMode().equals(\"REQUIRED\")", "url": "https://github.com/apache/beam/pull/13588#discussion_r549901603", "createdAt": "2020-12-30T01:03:07Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -128,18 +128,15 @@ private static ColumnSchema fromBeamField(Schema.Field field) {\n       }\n       ColumnSchema column =\n           fromBeamField(Field.of(field.getName(), fieldType.getCollectionElementType()));\n-      if (!column.getMode().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde1023c1569ce6ecff0e20a65b33dc721d577a5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMyMTkwOA==", "bodyText": "Done.\nI think this check is redundant for now because the only place that sets mode is the else branch below that the array element check will surely enter, because we already checked array element is not ARRAY type. And we have also checked the array element is not nullable above so it is always REQUIRED. But I agree leaving this check here can prevent code change that breaks this in the future.", "url": "https://github.com/apache/beam/pull/13588#discussion_r550321908", "createdAt": "2020-12-30T20:44:00Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/datacatalog/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datacatalog/SchemaUtils.java", "diffHunk": "@@ -128,18 +128,15 @@ private static ColumnSchema fromBeamField(Schema.Field field) {\n       }\n       ColumnSchema column =\n           fromBeamField(Field.of(field.getName(), fieldType.getCollectionElementType()));\n-      if (!column.getMode().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwMTYwMw=="}, "originalCommit": {"oid": "dde1023c1569ce6ecff0e20a65b33dc721d577a5"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2419, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}