{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDI3NzUw", "number": 11333, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNDo1NVrODyRu9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoyNToxOFrOD3v5fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ1OTQxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslAggregationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNDo1NVrOGGO2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNDo1NVrOGGO2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NzkyMA==", "bodyText": "Please import concrete Java imports than .*", "url": "https://github.com/apache/beam/pull/11333#discussion_r409187920", "createdAt": "2020-04-15T23:14:55Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslAggregationTest.java", "diffHunk": "@@ -24,11 +24,8 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;\n-\n import java.math.BigDecimal;\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.List;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ2MDE4OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslAggregationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNToxOVrOGGO2wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNToxOVrOGGO2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4ODAzMw==", "bodyText": "run ./gradlew spotlessApply to fix style issues.", "url": "https://github.com/apache/beam/pull/11333#discussion_r409188033", "createdAt": "2020-04-15T23:15:19Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslAggregationTest.java", "diffHunk": "@@ -241,6 +238,53 @@ private void runAggregationFunctions(PCollection<Row> input) throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  /** GROUP-BY with the any_value aggregation function. */\n+  @Test\n+  public void testAnyValueFunction() throws Exception {\n+    pipeline.enableAbandonedNodeEnforcement(false);\n+\n+    Schema schema =\n+            Schema.builder().addInt32Field(\"key\").addInt32Field(\"col\").build();\n+\n+    PCollection<Row> inputRows =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ3NjY2OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMjo0M1rOGGPAUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMjo0M1rOGGPAUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDQ4Mg==", "bodyText": "Same. If you are using inteliij, I think you will need to disable: https://www.jetbrains.com/help/idea/creating-and-optimizing-imports.html#import-packages-instead-of-single-classes", "url": "https://github.com/apache/beam/pull/11333#discussion_r409190482", "createdAt": "2020-04-15T23:22:43Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -33,12 +33,8 @@\n import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n import org.apache.beam.sdk.schemas.Schema;\n import org.apache.beam.sdk.schemas.Schema.FieldType;\n-import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de65de9e39427d2f55fd212993787002ea4bf10"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzgxNzUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoyMTozOFrOGOLYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDozODoxM1rOGO5eOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxOTc5Nw==", "bodyText": "Why ? as a part of template? (just asking. I am not familiar with how it should be used)", "url": "https://github.com/apache/beam/pull/11333#discussion_r417519797", "createdAt": "2020-04-29T18:21:38Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "diffHunk": "@@ -58,6 +58,14 @@\n     return new SampleAnyCombineFn<>(sampleSize);\n   }\n \n+  /**\n+   * Returns a {@link CombineFn} that computes a single and potentially non-uniform sample value of\n+   * its inputs.\n+   */\n+  public static <T> CombineFn<T, ?, T> anyValueCombineFn() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3NDg3NQ==", "bodyText": "To be frank with you, I copied the the method anyCombineFn and just adapted it. So, I am not sure the reason behind the template usage, I wanted to stick to existing methods.", "url": "https://github.com/apache/beam/pull/11333#discussion_r418274875", "createdAt": "2020-04-30T20:38:13Z", "author": {"login": "jhnmora000"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "diffHunk": "@@ -58,6 +58,14 @@\n     return new SampleAnyCombineFn<>(sampleSize);\n   }\n \n+  /**\n+   * Returns a {@link CombineFn} that computes a single and potentially non-uniform sample value of\n+   * its inputs.\n+   */\n+  public static <T> CombineFn<T, ?, T> anyValueCombineFn() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxOTc5Nw=="}, "originalCommit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzgzMDM4OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoyNToxOFrOGOLhOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1Nzo0MVrOGO6EZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMTk3Nw==", "bodyText": "I think this is right to return a null.\nper 1, if empty or input rows are all null, return null.\nThough returning null in Java sometimes do causing problems (not the problem in SQL layer, but in Java world). But in BeamSQL we just did it so far.", "url": "https://github.com/apache/beam/pull/11333#discussion_r417521977", "createdAt": "2020-04-29T18:25:18Z", "author": {"login": "amaliujia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "diffHunk": "@@ -246,6 +254,36 @@ private SampleAnyCombineFn(long limit) {\n     }\n   }\n \n+  /** A {@link CombineFn} that combines into a single element. */\n+  private static class AnyValueCombineFn<T> extends CombineFn<T, List<T>, T> {\n+    private SampleAnyCombineFn internal;\n+\n+    private AnyValueCombineFn() {\n+      internal = new SampleAnyCombineFn<>(1);\n+    }\n+\n+    @Override\n+    public List<T> createAccumulator() {\n+      return internal.createAccumulator();\n+    }\n+\n+    @Override\n+    public List<T> addInput(List<T> accumulator, T input) {\n+      return internal.addInput(accumulator, input);\n+    }\n+\n+    @Override\n+    public List<T> mergeAccumulators(Iterable<List<T>> accumulators) {\n+      return internal.mergeAccumulators(accumulators);\n+    }\n+\n+    @Override\n+    public T extractOutput(List<T> accumulator) {\n+      Iterator<T> it = internal.extractOutput(accumulator).iterator();\n+      return it.hasNext() ? it.next() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3OTE1Ng==", "bodyText": "Yes, I was aware of that. I thought that I could have used java Optional<T> or similar, but I was not sure it would be compliant with other components. Are there other functions that return optional or nullable objects in the Java SDK?, I could give them a look.", "url": "https://github.com/apache/beam/pull/11333#discussion_r418279156", "createdAt": "2020-04-30T20:46:47Z", "author": {"login": "jhnmora000"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "diffHunk": "@@ -246,6 +254,36 @@ private SampleAnyCombineFn(long limit) {\n     }\n   }\n \n+  /** A {@link CombineFn} that combines into a single element. */\n+  private static class AnyValueCombineFn<T> extends CombineFn<T, List<T>, T> {\n+    private SampleAnyCombineFn internal;\n+\n+    private AnyValueCombineFn() {\n+      internal = new SampleAnyCombineFn<>(1);\n+    }\n+\n+    @Override\n+    public List<T> createAccumulator() {\n+      return internal.createAccumulator();\n+    }\n+\n+    @Override\n+    public List<T> addInput(List<T> accumulator, T input) {\n+      return internal.addInput(accumulator, input);\n+    }\n+\n+    @Override\n+    public List<T> mergeAccumulators(Iterable<List<T>> accumulators) {\n+      return internal.mergeAccumulators(accumulators);\n+    }\n+\n+    @Override\n+    public T extractOutput(List<T> accumulator) {\n+      Iterator<T> it = internal.extractOutput(accumulator).iterator();\n+      return it.hasNext() ? it.next() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMTk3Nw=="}, "originalCommit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NDY0Nw==", "bodyText": "BTW, I created an issue for OVER/window clauses as you suggested.", "url": "https://github.com/apache/beam/pull/11333#discussion_r418284647", "createdAt": "2020-04-30T20:57:41Z", "author": {"login": "jhnmora000"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sample.java", "diffHunk": "@@ -246,6 +254,36 @@ private SampleAnyCombineFn(long limit) {\n     }\n   }\n \n+  /** A {@link CombineFn} that combines into a single element. */\n+  private static class AnyValueCombineFn<T> extends CombineFn<T, List<T>, T> {\n+    private SampleAnyCombineFn internal;\n+\n+    private AnyValueCombineFn() {\n+      internal = new SampleAnyCombineFn<>(1);\n+    }\n+\n+    @Override\n+    public List<T> createAccumulator() {\n+      return internal.createAccumulator();\n+    }\n+\n+    @Override\n+    public List<T> addInput(List<T> accumulator, T input) {\n+      return internal.addInput(accumulator, input);\n+    }\n+\n+    @Override\n+    public List<T> mergeAccumulators(Iterable<List<T>> accumulators) {\n+      return internal.mergeAccumulators(accumulators);\n+    }\n+\n+    @Override\n+    public T extractOutput(List<T> accumulator) {\n+      Iterator<T> it = internal.extractOutput(accumulator).iterator();\n+      return it.hasNext() ? it.next() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMTk3Nw=="}, "originalCommit": {"oid": "27876f035e3afdd478ef5e7f21d8524d17b59e13"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1402, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}