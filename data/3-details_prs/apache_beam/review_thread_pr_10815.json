{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDEwMTkw", "number": 10815, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo1MjowNlrODeXvDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxNzoxOFrODpNKrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTcyNzQ5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo1MjowNlrOFnd6-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODozMTowOVrOF4kYcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTAxOA==", "bodyText": "This was required to keep the Read class immutable. This is some kind of magic I did not know before in case you did not too https://lingpipe-blog.com/2009/08/10/serializing-immutable-singletons-serialization-proxy/", "url": "https://github.com/apache/beam/pull/10815#discussion_r376929018", "createdAt": "2020-02-10T08:52:06Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -240,63 +245,109 @@ private Read(\n     @Override\n     public void populateDisplayData(DisplayData.Builder builder) {\n       super.populateDisplayData(builder);\n-      builder.add(DisplayData.item(\"configuration\", serializableConfiguration.get().toString()));\n+      builder.add(DisplayData.item(\"configuration\", configuration.toString()));\n       builder.add(DisplayData.item(\"tableId\", tableId));\n-      builder.addIfNotNull(DisplayData.item(\"scan\", serializableScan.get().toString()));\n+      builder.addIfNotNull(DisplayData.item(\"scan\", scan.toString()));\n     }\n \n     public Configuration getConfiguration() {\n-      return serializableConfiguration.get();\n+      return configuration;\n     }\n \n     public String getTableId() {\n       return tableId;\n     }\n \n     public Scan getScan() {\n-      return serializableScan.get();\n+      return scan;\n     }\n \n     /** Returns the range of keys that will be read from the table. */\n     public ByteKeyRange getKeyRange() {\n-      byte[] startRow = serializableScan.get().getStartRow();\n-      byte[] stopRow = serializableScan.get().getStopRow();\n+      byte[] startRow = scan.getStartRow();\n+      byte[] stopRow = scan.getStopRow();\n       return ByteKeyRange.of(ByteKey.copyFrom(startRow), ByteKey.copyFrom(stopRow));\n     }\n \n-    private final SerializableConfiguration serializableConfiguration;\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Read read = (Read) o;\n+      return configuration.toString().equals(read.configuration.toString())\n+          && Objects.equals(tableId, read.tableId)\n+          && scan.toString().equals(read.scan.toString());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(configuration, tableId, scan);\n+    }\n+\n+    private Object writeReplace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxNTI4Mw==", "bodyText": "Add it into method Javadoc please", "url": "https://github.com/apache/beam/pull/10815#discussion_r394515283", "createdAt": "2020-03-18T17:21:34Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -240,63 +245,109 @@ private Read(\n     @Override\n     public void populateDisplayData(DisplayData.Builder builder) {\n       super.populateDisplayData(builder);\n-      builder.add(DisplayData.item(\"configuration\", serializableConfiguration.get().toString()));\n+      builder.add(DisplayData.item(\"configuration\", configuration.toString()));\n       builder.add(DisplayData.item(\"tableId\", tableId));\n-      builder.addIfNotNull(DisplayData.item(\"scan\", serializableScan.get().toString()));\n+      builder.addIfNotNull(DisplayData.item(\"scan\", scan.toString()));\n     }\n \n     public Configuration getConfiguration() {\n-      return serializableConfiguration.get();\n+      return configuration;\n     }\n \n     public String getTableId() {\n       return tableId;\n     }\n \n     public Scan getScan() {\n-      return serializableScan.get();\n+      return scan;\n     }\n \n     /** Returns the range of keys that will be read from the table. */\n     public ByteKeyRange getKeyRange() {\n-      byte[] startRow = serializableScan.get().getStartRow();\n-      byte[] stopRow = serializableScan.get().getStopRow();\n+      byte[] startRow = scan.getStartRow();\n+      byte[] stopRow = scan.getStopRow();\n       return ByteKeyRange.of(ByteKey.copyFrom(startRow), ByteKey.copyFrom(stopRow));\n     }\n \n-    private final SerializableConfiguration serializableConfiguration;\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Read read = (Read) o;\n+      return configuration.toString().equals(read.configuration.toString())\n+          && Objects.equals(tableId, read.tableId)\n+          && scan.toString().equals(read.scan.toString());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(configuration, tableId, scan);\n+    }\n+\n+    private Object writeReplace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTAxOA=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2MDY1Nw==", "bodyText": "good idea, doing it.", "url": "https://github.com/apache/beam/pull/10815#discussion_r394860657", "createdAt": "2020-03-19T08:31:09Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -240,63 +245,109 @@ private Read(\n     @Override\n     public void populateDisplayData(DisplayData.Builder builder) {\n       super.populateDisplayData(builder);\n-      builder.add(DisplayData.item(\"configuration\", serializableConfiguration.get().toString()));\n+      builder.add(DisplayData.item(\"configuration\", configuration.toString()));\n       builder.add(DisplayData.item(\"tableId\", tableId));\n-      builder.addIfNotNull(DisplayData.item(\"scan\", serializableScan.get().toString()));\n+      builder.addIfNotNull(DisplayData.item(\"scan\", scan.toString()));\n     }\n \n     public Configuration getConfiguration() {\n-      return serializableConfiguration.get();\n+      return configuration;\n     }\n \n     public String getTableId() {\n       return tableId;\n     }\n \n     public Scan getScan() {\n-      return serializableScan.get();\n+      return scan;\n     }\n \n     /** Returns the range of keys that will be read from the table. */\n     public ByteKeyRange getKeyRange() {\n-      byte[] startRow = serializableScan.get().getStartRow();\n-      byte[] stopRow = serializableScan.get().getStopRow();\n+      byte[] startRow = scan.getStartRow();\n+      byte[] stopRow = scan.getStopRow();\n       return ByteKeyRange.of(ByteKey.copyFrom(startRow), ByteKey.copyFrom(stopRow));\n     }\n \n-    private final SerializableConfiguration serializableConfiguration;\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Read read = (Read) o;\n+      return configuration.toString().equals(read.configuration.toString())\n+          && Objects.equals(tableId, read.tableId)\n+          && scan.toString().equals(read.scan.toString());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(configuration, tableId, scan);\n+    }\n+\n+    private Object writeReplace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTAxOA=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTczNzY4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseReadSplittableDoFn.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo1NTo0N1rOFneBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoyODoyNFrOF4kTPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMDYxOQ==", "bodyText": "This creates a connection for each Read element, this is arguable costly because its nature is 1 to many, but it is an acceptable trade-off to support multiple Configurations and have the multi cluster flexibility.\nConnection initialization could be improved in the future via some sort of class based Pool mechanism (as we do for JdbcIO).", "url": "https://github.com/apache/beam/pull/10815#discussion_r376930619", "createdAt": "2020-02-10T08:55:47Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseReadSplittableDoFn.java", "diffHunk": "@@ -32,65 +31,50 @@\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n import org.apache.hadoop.hbase.client.Result;\n import org.apache.hadoop.hbase.client.ResultScanner;\n-import org.apache.hadoop.hbase.client.Scan;\n import org.apache.hadoop.hbase.client.Table;\n \n /** A SplittableDoFn to read from HBase. */\n @BoundedPerElement\n-class HBaseReadSplittableDoFn extends DoFn<HBaseQuery, Result> {\n-  private final SerializableConfiguration serializableConfiguration;\n-\n-  private transient Connection connection;\n-\n-  HBaseReadSplittableDoFn(SerializableConfiguration serializableConfiguration) {\n-    this.serializableConfiguration = serializableConfiguration;\n-  }\n-\n-  @Setup\n-  public void setup() throws Exception {\n-    connection = ConnectionFactory.createConnection(serializableConfiguration.get());\n-  }\n-\n-  private static Scan newScanInRange(Scan scan, ByteKeyRange range) throws IOException {\n-    return new Scan(scan)\n-        .setStartRow(range.getStartKey().getBytes())\n-        .setStopRow(range.getEndKey().getBytes());\n-  }\n+class HBaseReadSplittableDoFn extends DoFn<Read, Result> {\n+  HBaseReadSplittableDoFn() {}\n \n   @ProcessElement\n-  public void processElement(ProcessContext c, RestrictionTracker<ByteKeyRange, ByteKey> tracker)\n+  public void processElement(\n+      @Element Read read,\n+      OutputReceiver<Result> out,\n+      RestrictionTracker<ByteKeyRange, ByteKey> tracker)\n       throws Exception {\n-    final HBaseQuery query = c.element();\n-    TableName tableName = TableName.valueOf(query.getTableId());\n+    Connection connection = ConnectionFactory.createConnection(read.getConfiguration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzNDA5Mw==", "bodyText": "Please, add TODO about that.  Did you try to run performance test to see how much it's slower?", "url": "https://github.com/apache/beam/pull/10815#discussion_r394534093", "createdAt": "2020-03-18T17:51:04Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseReadSplittableDoFn.java", "diffHunk": "@@ -32,65 +31,50 @@\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n import org.apache.hadoop.hbase.client.Result;\n import org.apache.hadoop.hbase.client.ResultScanner;\n-import org.apache.hadoop.hbase.client.Scan;\n import org.apache.hadoop.hbase.client.Table;\n \n /** A SplittableDoFn to read from HBase. */\n @BoundedPerElement\n-class HBaseReadSplittableDoFn extends DoFn<HBaseQuery, Result> {\n-  private final SerializableConfiguration serializableConfiguration;\n-\n-  private transient Connection connection;\n-\n-  HBaseReadSplittableDoFn(SerializableConfiguration serializableConfiguration) {\n-    this.serializableConfiguration = serializableConfiguration;\n-  }\n-\n-  @Setup\n-  public void setup() throws Exception {\n-    connection = ConnectionFactory.createConnection(serializableConfiguration.get());\n-  }\n-\n-  private static Scan newScanInRange(Scan scan, ByteKeyRange range) throws IOException {\n-    return new Scan(scan)\n-        .setStartRow(range.getStartKey().getBytes())\n-        .setStopRow(range.getEndKey().getBytes());\n-  }\n+class HBaseReadSplittableDoFn extends DoFn<Read, Result> {\n+  HBaseReadSplittableDoFn() {}\n \n   @ProcessElement\n-  public void processElement(ProcessContext c, RestrictionTracker<ByteKeyRange, ByteKey> tracker)\n+  public void processElement(\n+      @Element Read read,\n+      OutputReceiver<Result> out,\n+      RestrictionTracker<ByteKeyRange, ByteKey> tracker)\n       throws Exception {\n-    final HBaseQuery query = c.element();\n-    TableName tableName = TableName.valueOf(query.getTableId());\n+    Connection connection = ConnectionFactory.createConnection(read.getConfiguration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMDYxOQ=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1OTMyNA==", "bodyText": "Better filled https://issues.apache.org/jira/browse/BEAM-9554 to track this. No I did not test performance because this is a quite particular case as I mention, for users doing 1 to n queries when n is big this time would not be considerable, the real issue can manifest mostly in pipelines with streaming where we would like to do reads per window with multiple windows kind of similar to what we found for JdbcIO writes (but this case is waaay more common).", "url": "https://github.com/apache/beam/pull/10815#discussion_r394859324", "createdAt": "2020-03-19T08:28:24Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseReadSplittableDoFn.java", "diffHunk": "@@ -32,65 +31,50 @@\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n import org.apache.hadoop.hbase.client.Result;\n import org.apache.hadoop.hbase.client.ResultScanner;\n-import org.apache.hadoop.hbase.client.Scan;\n import org.apache.hadoop.hbase.client.Table;\n \n /** A SplittableDoFn to read from HBase. */\n @BoundedPerElement\n-class HBaseReadSplittableDoFn extends DoFn<HBaseQuery, Result> {\n-  private final SerializableConfiguration serializableConfiguration;\n-\n-  private transient Connection connection;\n-\n-  HBaseReadSplittableDoFn(SerializableConfiguration serializableConfiguration) {\n-    this.serializableConfiguration = serializableConfiguration;\n-  }\n-\n-  @Setup\n-  public void setup() throws Exception {\n-    connection = ConnectionFactory.createConnection(serializableConfiguration.get());\n-  }\n-\n-  private static Scan newScanInRange(Scan scan, ByteKeyRange range) throws IOException {\n-    return new Scan(scan)\n-        .setStartRow(range.getStartKey().getBytes())\n-        .setStopRow(range.getEndKey().getBytes());\n-  }\n+class HBaseReadSplittableDoFn extends DoFn<Read, Result> {\n+  HBaseReadSplittableDoFn() {}\n \n   @ProcessElement\n-  public void processElement(ProcessContext c, RestrictionTracker<ByteKeyRange, ByteKey> tracker)\n+  public void processElement(\n+      @Element Read read,\n+      OutputReceiver<Result> out,\n+      RestrictionTracker<ByteKeyRange, ByteKey> tracker)\n       throws Exception {\n-    final HBaseQuery query = c.element();\n-    TableName tableName = TableName.valueOf(query.getTableId());\n+    Connection connection = ConnectionFactory.createConnection(read.getConfiguration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMDYxOQ=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTA3Mzc5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1OTowM1rOFpd3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTowMjoxM1rOF4lYYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyNTI4Nw==", "bodyText": "Is it a breaking change of users API?", "url": "https://github.com/apache/beam/pull/10815#discussion_r379025287", "createdAt": "2020-02-13T17:59:03Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -240,63 +245,109 @@ private Read(\n     @Override\n     public void populateDisplayData(DisplayData.Builder builder) {\n       super.populateDisplayData(builder);\n-      builder.add(DisplayData.item(\"configuration\", serializableConfiguration.get().toString()));\n+      builder.add(DisplayData.item(\"configuration\", configuration.toString()));\n       builder.add(DisplayData.item(\"tableId\", tableId));\n-      builder.addIfNotNull(DisplayData.item(\"scan\", serializableScan.get().toString()));\n+      builder.addIfNotNull(DisplayData.item(\"scan\", scan.toString()));\n     }\n \n     public Configuration getConfiguration() {\n-      return serializableConfiguration.get();\n+      return configuration;\n     }\n \n     public String getTableId() {\n       return tableId;\n     }\n \n     public Scan getScan() {\n-      return serializableScan.get();\n+      return scan;\n     }\n \n     /** Returns the range of keys that will be read from the table. */\n     public ByteKeyRange getKeyRange() {\n-      byte[] startRow = serializableScan.get().getStartRow();\n-      byte[] stopRow = serializableScan.get().getStopRow();\n+      byte[] startRow = scan.getStartRow();\n+      byte[] stopRow = scan.getStopRow();\n       return ByteKeyRange.of(ByteKey.copyFrom(startRow), ByteKey.copyFrom(stopRow));\n     }\n \n-    private final SerializableConfiguration serializableConfiguration;\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Read read = (Read) o;\n+      return configuration.toString().equals(read.configuration.toString())\n+          && Objects.equals(tableId, read.tableId)\n+          && scan.toString().equals(read.scan.toString());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(configuration, tableId, scan);\n+    }\n+\n+    private Object writeReplace() {\n+      return new SerializationProxy(this);\n+    }\n+\n+    private static class SerializationProxy implements Serializable {\n+      public SerializationProxy() {}\n+\n+      public SerializationProxy(Read read) {\n+        configuration = read.configuration;\n+        tableId = read.tableId;\n+        scan = read.scan;\n+      }\n+\n+      private void writeObject(ObjectOutputStream out) throws IOException {\n+        SerializableCoder.of(SerializableConfiguration.class)\n+            .encode(new SerializableConfiguration(this.configuration), out);\n+        StringUtf8Coder.of().encode(this.tableId, out);\n+        ProtobufUtil.toScan(this.scan).writeDelimitedTo(out);\n+      }\n+\n+      private void readObject(ObjectInputStream in) throws IOException {\n+        this.configuration = SerializableCoder.of(SerializableConfiguration.class).decode(in).get();\n+        this.tableId = StringUtf8Coder.of().decode(in);\n+        this.scan = ProtobufUtil.toScan(ClientProtos.Scan.parseDelimitedFrom(in));\n+      }\n+\n+      Object readResolve() {\n+        return HBaseIO.read().withConfiguration(configuration).withTableId(tableId).withScan(scan);\n+      }\n+\n+      private Configuration configuration;\n+      private String tableId;\n+      private Scan scan;\n+    }\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Configuration configuration;\n+\n     private final String tableId;\n-    private final SerializableScan serializableScan;\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Scan scan;\n   }\n \n   /**\n    * A {@link PTransform} that works like {@link #read}, but executes read operations coming from a\n-   * {@link PCollection} of {@link HBaseQuery}.\n+   * {@link PCollection} of {@link Read}.\n    */\n   public static ReadAll readAll() {\n-    return new ReadAll(null);\n+    return new ReadAll();\n   }\n \n   /** Implementation of {@link #readAll}. */\n-  public static class ReadAll extends PTransform<PCollection<HBaseQuery>, PCollection<Result>> {\n-\n-    private ReadAll(SerializableConfiguration serializableConfiguration) {\n-      this.serializableConfiguration = serializableConfiguration;\n-    }\n-\n-    /** Reads from the HBase instance indicated by the* given configuration. */\n-    public ReadAll withConfiguration(Configuration configuration) {\n-      checkArgument(configuration != null, \"configuration can not be null\");\n-      return new ReadAll(new SerializableConfiguration(configuration));\n-    }\n+  public static class ReadAll extends PTransform<PCollection<Read>, PCollection<Result>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MjM1OA==", "bodyText": "Yes and it is intended, notice however that the only breaking change is for the SDF based read transform ReadAll. Also let's not forget that HBaseIO is still Experimental and Reads based on SDF for HBaseIO are Experimental^2. However after this change I seriously doubt the API will change in the future.", "url": "https://github.com/apache/beam/pull/10815#discussion_r379162358", "createdAt": "2020-02-13T22:47:11Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -240,63 +245,109 @@ private Read(\n     @Override\n     public void populateDisplayData(DisplayData.Builder builder) {\n       super.populateDisplayData(builder);\n-      builder.add(DisplayData.item(\"configuration\", serializableConfiguration.get().toString()));\n+      builder.add(DisplayData.item(\"configuration\", configuration.toString()));\n       builder.add(DisplayData.item(\"tableId\", tableId));\n-      builder.addIfNotNull(DisplayData.item(\"scan\", serializableScan.get().toString()));\n+      builder.addIfNotNull(DisplayData.item(\"scan\", scan.toString()));\n     }\n \n     public Configuration getConfiguration() {\n-      return serializableConfiguration.get();\n+      return configuration;\n     }\n \n     public String getTableId() {\n       return tableId;\n     }\n \n     public Scan getScan() {\n-      return serializableScan.get();\n+      return scan;\n     }\n \n     /** Returns the range of keys that will be read from the table. */\n     public ByteKeyRange getKeyRange() {\n-      byte[] startRow = serializableScan.get().getStartRow();\n-      byte[] stopRow = serializableScan.get().getStopRow();\n+      byte[] startRow = scan.getStartRow();\n+      byte[] stopRow = scan.getStopRow();\n       return ByteKeyRange.of(ByteKey.copyFrom(startRow), ByteKey.copyFrom(stopRow));\n     }\n \n-    private final SerializableConfiguration serializableConfiguration;\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Read read = (Read) o;\n+      return configuration.toString().equals(read.configuration.toString())\n+          && Objects.equals(tableId, read.tableId)\n+          && scan.toString().equals(read.scan.toString());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(configuration, tableId, scan);\n+    }\n+\n+    private Object writeReplace() {\n+      return new SerializationProxy(this);\n+    }\n+\n+    private static class SerializationProxy implements Serializable {\n+      public SerializationProxy() {}\n+\n+      public SerializationProxy(Read read) {\n+        configuration = read.configuration;\n+        tableId = read.tableId;\n+        scan = read.scan;\n+      }\n+\n+      private void writeObject(ObjectOutputStream out) throws IOException {\n+        SerializableCoder.of(SerializableConfiguration.class)\n+            .encode(new SerializableConfiguration(this.configuration), out);\n+        StringUtf8Coder.of().encode(this.tableId, out);\n+        ProtobufUtil.toScan(this.scan).writeDelimitedTo(out);\n+      }\n+\n+      private void readObject(ObjectInputStream in) throws IOException {\n+        this.configuration = SerializableCoder.of(SerializableConfiguration.class).decode(in).get();\n+        this.tableId = StringUtf8Coder.of().decode(in);\n+        this.scan = ProtobufUtil.toScan(ClientProtos.Scan.parseDelimitedFrom(in));\n+      }\n+\n+      Object readResolve() {\n+        return HBaseIO.read().withConfiguration(configuration).withTableId(tableId).withScan(scan);\n+      }\n+\n+      private Configuration configuration;\n+      private String tableId;\n+      private Scan scan;\n+    }\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Configuration configuration;\n+\n     private final String tableId;\n-    private final SerializableScan serializableScan;\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Scan scan;\n   }\n \n   /**\n    * A {@link PTransform} that works like {@link #read}, but executes read operations coming from a\n-   * {@link PCollection} of {@link HBaseQuery}.\n+   * {@link PCollection} of {@link Read}.\n    */\n   public static ReadAll readAll() {\n-    return new ReadAll(null);\n+    return new ReadAll();\n   }\n \n   /** Implementation of {@link #readAll}. */\n-  public static class ReadAll extends PTransform<PCollection<HBaseQuery>, PCollection<Result>> {\n-\n-    private ReadAll(SerializableConfiguration serializableConfiguration) {\n-      this.serializableConfiguration = serializableConfiguration;\n-    }\n-\n-    /** Reads from the HBase instance indicated by the* given configuration. */\n-    public ReadAll withConfiguration(Configuration configuration) {\n-      checkArgument(configuration != null, \"configuration can not be null\");\n-      return new ReadAll(new SerializableConfiguration(configuration));\n-    }\n+  public static class ReadAll extends PTransform<PCollection<Read>, PCollection<Result>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyNTI4Nw=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzMDQzMA==", "bodyText": "Please, add this warning/note to top class Javadoc", "url": "https://github.com/apache/beam/pull/10815#discussion_r394530430", "createdAt": "2020-03-18T17:45:11Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -240,63 +245,109 @@ private Read(\n     @Override\n     public void populateDisplayData(DisplayData.Builder builder) {\n       super.populateDisplayData(builder);\n-      builder.add(DisplayData.item(\"configuration\", serializableConfiguration.get().toString()));\n+      builder.add(DisplayData.item(\"configuration\", configuration.toString()));\n       builder.add(DisplayData.item(\"tableId\", tableId));\n-      builder.addIfNotNull(DisplayData.item(\"scan\", serializableScan.get().toString()));\n+      builder.addIfNotNull(DisplayData.item(\"scan\", scan.toString()));\n     }\n \n     public Configuration getConfiguration() {\n-      return serializableConfiguration.get();\n+      return configuration;\n     }\n \n     public String getTableId() {\n       return tableId;\n     }\n \n     public Scan getScan() {\n-      return serializableScan.get();\n+      return scan;\n     }\n \n     /** Returns the range of keys that will be read from the table. */\n     public ByteKeyRange getKeyRange() {\n-      byte[] startRow = serializableScan.get().getStartRow();\n-      byte[] stopRow = serializableScan.get().getStopRow();\n+      byte[] startRow = scan.getStartRow();\n+      byte[] stopRow = scan.getStopRow();\n       return ByteKeyRange.of(ByteKey.copyFrom(startRow), ByteKey.copyFrom(stopRow));\n     }\n \n-    private final SerializableConfiguration serializableConfiguration;\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Read read = (Read) o;\n+      return configuration.toString().equals(read.configuration.toString())\n+          && Objects.equals(tableId, read.tableId)\n+          && scan.toString().equals(read.scan.toString());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(configuration, tableId, scan);\n+    }\n+\n+    private Object writeReplace() {\n+      return new SerializationProxy(this);\n+    }\n+\n+    private static class SerializationProxy implements Serializable {\n+      public SerializationProxy() {}\n+\n+      public SerializationProxy(Read read) {\n+        configuration = read.configuration;\n+        tableId = read.tableId;\n+        scan = read.scan;\n+      }\n+\n+      private void writeObject(ObjectOutputStream out) throws IOException {\n+        SerializableCoder.of(SerializableConfiguration.class)\n+            .encode(new SerializableConfiguration(this.configuration), out);\n+        StringUtf8Coder.of().encode(this.tableId, out);\n+        ProtobufUtil.toScan(this.scan).writeDelimitedTo(out);\n+      }\n+\n+      private void readObject(ObjectInputStream in) throws IOException {\n+        this.configuration = SerializableCoder.of(SerializableConfiguration.class).decode(in).get();\n+        this.tableId = StringUtf8Coder.of().decode(in);\n+        this.scan = ProtobufUtil.toScan(ClientProtos.Scan.parseDelimitedFrom(in));\n+      }\n+\n+      Object readResolve() {\n+        return HBaseIO.read().withConfiguration(configuration).withTableId(tableId).withScan(scan);\n+      }\n+\n+      private Configuration configuration;\n+      private String tableId;\n+      private Scan scan;\n+    }\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Configuration configuration;\n+\n     private final String tableId;\n-    private final SerializableScan serializableScan;\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Scan scan;\n   }\n \n   /**\n    * A {@link PTransform} that works like {@link #read}, but executes read operations coming from a\n-   * {@link PCollection} of {@link HBaseQuery}.\n+   * {@link PCollection} of {@link Read}.\n    */\n   public static ReadAll readAll() {\n-    return new ReadAll(null);\n+    return new ReadAll();\n   }\n \n   /** Implementation of {@link #readAll}. */\n-  public static class ReadAll extends PTransform<PCollection<HBaseQuery>, PCollection<Result>> {\n-\n-    private ReadAll(SerializableConfiguration serializableConfiguration) {\n-      this.serializableConfiguration = serializableConfiguration;\n-    }\n-\n-    /** Reads from the HBase instance indicated by the* given configuration. */\n-    public ReadAll withConfiguration(Configuration configuration) {\n-      checkArgument(configuration != null, \"configuration can not be null\");\n-      return new ReadAll(new SerializableConfiguration(configuration));\n-    }\n+  public static class ReadAll extends PTransform<PCollection<Read>, PCollection<Result>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyNTI4Nw=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3NzAyNg==", "bodyText": "I better do this in the CHANGES.md release notes file, so this gets announced with the release notes. Java will cover making users aware at the code level :)", "url": "https://github.com/apache/beam/pull/10815#discussion_r394877026", "createdAt": "2020-03-19T09:02:13Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -240,63 +245,109 @@ private Read(\n     @Override\n     public void populateDisplayData(DisplayData.Builder builder) {\n       super.populateDisplayData(builder);\n-      builder.add(DisplayData.item(\"configuration\", serializableConfiguration.get().toString()));\n+      builder.add(DisplayData.item(\"configuration\", configuration.toString()));\n       builder.add(DisplayData.item(\"tableId\", tableId));\n-      builder.addIfNotNull(DisplayData.item(\"scan\", serializableScan.get().toString()));\n+      builder.addIfNotNull(DisplayData.item(\"scan\", scan.toString()));\n     }\n \n     public Configuration getConfiguration() {\n-      return serializableConfiguration.get();\n+      return configuration;\n     }\n \n     public String getTableId() {\n       return tableId;\n     }\n \n     public Scan getScan() {\n-      return serializableScan.get();\n+      return scan;\n     }\n \n     /** Returns the range of keys that will be read from the table. */\n     public ByteKeyRange getKeyRange() {\n-      byte[] startRow = serializableScan.get().getStartRow();\n-      byte[] stopRow = serializableScan.get().getStopRow();\n+      byte[] startRow = scan.getStartRow();\n+      byte[] stopRow = scan.getStopRow();\n       return ByteKeyRange.of(ByteKey.copyFrom(startRow), ByteKey.copyFrom(stopRow));\n     }\n \n-    private final SerializableConfiguration serializableConfiguration;\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Read read = (Read) o;\n+      return configuration.toString().equals(read.configuration.toString())\n+          && Objects.equals(tableId, read.tableId)\n+          && scan.toString().equals(read.scan.toString());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(configuration, tableId, scan);\n+    }\n+\n+    private Object writeReplace() {\n+      return new SerializationProxy(this);\n+    }\n+\n+    private static class SerializationProxy implements Serializable {\n+      public SerializationProxy() {}\n+\n+      public SerializationProxy(Read read) {\n+        configuration = read.configuration;\n+        tableId = read.tableId;\n+        scan = read.scan;\n+      }\n+\n+      private void writeObject(ObjectOutputStream out) throws IOException {\n+        SerializableCoder.of(SerializableConfiguration.class)\n+            .encode(new SerializableConfiguration(this.configuration), out);\n+        StringUtf8Coder.of().encode(this.tableId, out);\n+        ProtobufUtil.toScan(this.scan).writeDelimitedTo(out);\n+      }\n+\n+      private void readObject(ObjectInputStream in) throws IOException {\n+        this.configuration = SerializableCoder.of(SerializableConfiguration.class).decode(in).get();\n+        this.tableId = StringUtf8Coder.of().decode(in);\n+        this.scan = ProtobufUtil.toScan(ClientProtos.Scan.parseDelimitedFrom(in));\n+      }\n+\n+      Object readResolve() {\n+        return HBaseIO.read().withConfiguration(configuration).withTableId(tableId).withScan(scan);\n+      }\n+\n+      private Configuration configuration;\n+      private String tableId;\n+      private Scan scan;\n+    }\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Configuration configuration;\n+\n     private final String tableId;\n-    private final SerializableScan serializableScan;\n+\n+    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+    private final Scan scan;\n   }\n \n   /**\n    * A {@link PTransform} that works like {@link #read}, but executes read operations coming from a\n-   * {@link PCollection} of {@link HBaseQuery}.\n+   * {@link PCollection} of {@link Read}.\n    */\n   public static ReadAll readAll() {\n-    return new ReadAll(null);\n+    return new ReadAll();\n   }\n \n   /** Implementation of {@link #readAll}. */\n-  public static class ReadAll extends PTransform<PCollection<HBaseQuery>, PCollection<Result>> {\n-\n-    private ReadAll(SerializableConfiguration serializableConfiguration) {\n-      this.serializableConfiguration = serializableConfiguration;\n-    }\n-\n-    /** Reads from the HBase instance indicated by the* given configuration. */\n-    public ReadAll withConfiguration(Configuration configuration) {\n-      checkArgument(configuration != null, \"configuration can not be null\");\n-      return new ReadAll(new SerializableConfiguration(configuration));\n-    }\n+  public static class ReadAll extends PTransform<PCollection<Read>, PCollection<Result>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyNTI4Nw=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTMzNzY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxNjo1NFrOF4PHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODowMDo1NFrOF4jgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjI1MA==", "bodyText": "type \"scancan\"", "url": "https://github.com/apache/beam/pull/10815#discussion_r394512250", "createdAt": "2020-03-18T17:16:54Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -173,33 +182,33 @@ public static Read read() {\n     /** Reads from the HBase instance indicated by the* given configuration. */\n     public Read withConfiguration(Configuration configuration) {\n       checkArgument(configuration != null, \"configuration can not be null\");\n-      return new Read(new SerializableConfiguration(configuration), tableId, serializableScan);\n+      return new Read(new Configuration(configuration), tableId, scan);\n     }\n \n     /** Reads from the specified table. */\n     public Read withTableId(String tableId) {\n       checkArgument(tableId != null, \"tableIdcan not be null\");\n-      return new Read(serializableConfiguration, tableId, serializableScan);\n+      return new Read(configuration, tableId, scan);\n     }\n \n     /** Filters the rows read from HBase using the given* scan. */\n     public Read withScan(Scan scan) {\n       checkArgument(scan != null, \"scancan not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NjIxOA==", "bodyText": "good one, fixing it", "url": "https://github.com/apache/beam/pull/10815#discussion_r394846218", "createdAt": "2020-03-19T08:00:54Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -173,33 +182,33 @@ public static Read read() {\n     /** Reads from the HBase instance indicated by the* given configuration. */\n     public Read withConfiguration(Configuration configuration) {\n       checkArgument(configuration != null, \"configuration can not be null\");\n-      return new Read(new SerializableConfiguration(configuration), tableId, serializableScan);\n+      return new Read(new Configuration(configuration), tableId, scan);\n     }\n \n     /** Reads from the specified table. */\n     public Read withTableId(String tableId) {\n       checkArgument(tableId != null, \"tableIdcan not be null\");\n-      return new Read(serializableConfiguration, tableId, serializableScan);\n+      return new Read(configuration, tableId, scan);\n     }\n \n     /** Filters the rows read from HBase using the given* scan. */\n     public Read withScan(Scan scan) {\n       checkArgument(scan != null, \"scancan not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjI1MA=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTMzOTMzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxNzoxOFrOF4PIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1NDo0MFrOF4nNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjUwNA==", "bodyText": "typo \"tableIdcan\"", "url": "https://github.com/apache/beam/pull/10815#discussion_r394512504", "createdAt": "2020-03-18T17:17:18Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -173,33 +182,33 @@ public static Read read() {\n     /** Reads from the HBase instance indicated by the* given configuration. */\n     public Read withConfiguration(Configuration configuration) {\n       checkArgument(configuration != null, \"configuration can not be null\");\n-      return new Read(new SerializableConfiguration(configuration), tableId, serializableScan);\n+      return new Read(new Configuration(configuration), tableId, scan);\n     }\n \n     /** Reads from the specified table. */\n     public Read withTableId(String tableId) {\n       checkArgument(tableId != null, \"tableIdcan not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NjM2MQ==", "bodyText": "fixing it, actually they were more ocurrencdes of this 'can' mistake I fixed them all now.", "url": "https://github.com/apache/beam/pull/10815#discussion_r394846361", "createdAt": "2020-03-19T08:01:19Z", "author": {"login": "iemejia"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -173,33 +182,33 @@ public static Read read() {\n     /** Reads from the HBase instance indicated by the* given configuration. */\n     public Read withConfiguration(Configuration configuration) {\n       checkArgument(configuration != null, \"configuration can not be null\");\n-      return new Read(new SerializableConfiguration(configuration), tableId, serializableScan);\n+      return new Read(new Configuration(configuration), tableId, scan);\n     }\n \n     /** Reads from the specified table. */\n     public Read withTableId(String tableId) {\n       checkArgument(tableId != null, \"tableIdcan not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjUwNA=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNzA0NA==", "bodyText": "thanks", "url": "https://github.com/apache/beam/pull/10815#discussion_r394907044", "createdAt": "2020-03-19T09:54:40Z", "author": {"login": "aromanenko-dev"}, "path": "sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseIO.java", "diffHunk": "@@ -173,33 +182,33 @@ public static Read read() {\n     /** Reads from the HBase instance indicated by the* given configuration. */\n     public Read withConfiguration(Configuration configuration) {\n       checkArgument(configuration != null, \"configuration can not be null\");\n-      return new Read(new SerializableConfiguration(configuration), tableId, serializableScan);\n+      return new Read(new Configuration(configuration), tableId, scan);\n     }\n \n     /** Reads from the specified table. */\n     public Read withTableId(String tableId) {\n       checkArgument(tableId != null, \"tableIdcan not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjUwNA=="}, "originalCommit": {"oid": "df531f48a8dbf3e567036e5acbd9bcc4633e9924"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1967, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}