{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjc1MzAw", "number": 11020, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NjoxMFrODkyo-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDowMDowMFrODky8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA1MDE3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NjoxMFrOFxUCbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoyNTo1NlrOFxd7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjg0NA==", "bodyText": "Why this one does not have the catch statement?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387252844", "createdAt": "2020-03-03T19:46:10Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");\n+              }}\"\"\"\n+_OVERVIEW_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-overview id=\"{display_id}\"></facets-overview>\n             <script>\n               document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2ODk4NA==", "bodyText": "This is kernel (server) side rendering, the HTML is not in DOM yet, so the element must be there when the HTML gets rendered in browser.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387268984", "createdAt": "2020-03-03T20:16:39Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");\n+              }}\"\"\"\n+_OVERVIEW_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-overview id=\"{display_id}\"></facets-overview>\n             <script>\n               document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjg0NA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1NzU3NQ==", "bodyText": "Maybe I do not understand. The script in the script tag is it executed on the server side?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387357575", "createdAt": "2020-03-03T23:31:14Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");\n+              }}\"\"\"\n+_OVERVIEW_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-overview id=\"{display_id}\"></facets-overview>\n             <script>\n               document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjg0NA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxNDg5OA==", "bodyText": "Sorry, let me put it in an example.\nThe HTML+JS template is formatted into an HTML obj and gets displayed into the frontend. Inside this little piece of HTML, the document.querySelector(\"#{display_id}\") will always return such queried element because the element is created within the HTML itself.\nThen this little piece of HTML is embedded in the notebook's DOM. It resides in the output area of a cell in the notebook.\nIf the user \"clears all outputs\" from the notebook, the HTML is deleted from the DOM.\nNow, document.querySelector(\"#{display_id}\") will return undefined.\nThe user will see Javascript error being populated in the output area that just got cleared.\nThe output continuously increases at the show interval (1 second) until the visualization is done.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387414898", "createdAt": "2020-03-04T02:25:56Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");\n+              }}\"\"\"\n+_OVERVIEW_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-overview id=\"{display_id}\"></facets-overview>\n             <script>\n               document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjg0NA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA1MDc5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NjoyMlrOFxUCzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozNzozNlrOFx47ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjk0MA==", "bodyText": "Could we wait for document onLoad?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387252940", "createdAt": "2020-03-03T19:46:22Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NzQxMA==", "bodyText": "Facets widgets doesn't depend on the jQuery we setup.\nThe JS also doesn't depend on the webcomponent (it's for HTML import).\nSo there is no need to wait for onload of anything.\nThe DOM changes when the output area containing the widgets being updated gets deleted by the user in the notebook and some JS exceptions could be thrown out.\nThis is to avoid display_javascript polluting the output area of notebooks in this scenario.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387267410", "createdAt": "2020-03-03T20:13:30Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjk0MA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTM3NA==", "bodyText": "If this try fails, what happens?\nIs the console.log statement valuable in this case?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387359374", "createdAt": "2020-03-03T23:36:39Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjk0MA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxNTk0MQ==", "bodyText": "If this fails, it means the initially displayed widgets have been cleared from the DOM or the initial display hasn't completed yet (maybe because of some racing conditions). NOOP should be the right way to handle it because it either means the user has cleared the output or the script has no target to execute on.\nThe error is supposed to be logged in the console. However, if not caught, it also gets displayed in notebook output areas. By doing this, we kept the log and also avoid the output area pollution.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387415941", "createdAt": "2020-03-04T02:29:26Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjk0MA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODc5Nw==", "bodyText": "The error is supposed to be logged in the console. However, if not caught, it also gets displayed in notebook output areas. By doing this, we kept the log and also avoid the output area pollution.\nThis make sense. Do you even need it in the console log? After catching, we could choose to not log it. Is it useful to log?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387828797", "createdAt": "2020-03-04T17:44:45Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjk0MA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NzI1OA==", "bodyText": "I think it's most useful only when we do debugging because end users of notebooks wouldn't open a developer tool.\nI'll remove the logging, but keep the catch clause.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387857258", "createdAt": "2020-03-04T18:37:36Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjk0MA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA1NjkzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0ODoxMFrOFxUGhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxNzo0NlrOFxVDdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mzg5Mg==", "bodyText": "You can probably drop these comments. They are pretty obvious form variable names and use up to this point.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387253892", "createdAt": "2020-03-03T19:48:10Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -181,6 +247,12 @@ def __init__(self, pcoll):\n     self._overview_display_id = 'facets_overview_{}_{}'.format(\n         self._cache_key, id(self))\n     self._df_display_id = 'df_{}_{}'.format(self._cache_key, id(self))\n+    # Whether the visualization should include window info.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2OTQ5Mg==", "bodyText": "Got it, removing these comments.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387269492", "createdAt": "2020-03-03T20:17:46Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -181,6 +247,12 @@ def __init__(self, pcoll):\n     self._overview_display_id = 'facets_overview_{}_{}'.format(\n         self._cache_key, id(self))\n     self._df_display_id = 'df_{}_{}'.format(self._cache_key, id(self))\n+    # Whether the visualization should include window info.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mzg5Mg=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA2MjE2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0OTozMlrOFxUJjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDozMzowNFrOFxVgww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NDY2OQ==", "bodyText": "Why are we copying data?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387254669", "createdAt": "2020-03-03T19:49:32Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -215,20 +287,32 @@ def display_facets(self, updating_pv=None):\n     # Ensures that dive, overview and table render the same data because the\n     # materialized PCollection data might being updated continuously.\n     data = self._to_dataframe()\n+    # String-ify the dictionaries for display because elements of type dict\n+    # cannot be ordered.\n+    data = data.applymap(lambda x: str(x) if isinstance(x, dict) else x)\n     if updating_pv:\n-      self._display_dive(data, updating_pv._dive_display_id)\n-      self._display_overview(data, updating_pv._overview_display_id)\n-      self._display_dataframe(data, updating_pv._df_display_id)\n+      # Only updates when data is not empty. Otherwise, consider it a bad\n+      # iteration and noop since there is nothing to be updated.\n+      if data.empty:\n+        _LOGGER.debug('Skip a visualization update due to empty data.')\n+      else:\n+        self._display_dataframe(data.copy(deep=True), updating_pv)\n+        if self._display_facets:\n+          self._display_dive(data.copy(deep=True), updating_pv)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3Njk5NQ==", "bodyText": "Because we make different changes (such as formatting and dropping some columns) to the dataframe before displaying it in these 3 widgets.\nFor example, window info needs to be formatted for facets-dive and datatable while getting dropped in facets-overview.\nIf they share the same instance, the 3 widgets will be altering the same dataframe object in arbitrary order, get arbitrary mixed output or run into all kinds of mapping errors.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387276995", "createdAt": "2020-03-03T20:33:04Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -215,20 +287,32 @@ def display_facets(self, updating_pv=None):\n     # Ensures that dive, overview and table render the same data because the\n     # materialized PCollection data might being updated continuously.\n     data = self._to_dataframe()\n+    # String-ify the dictionaries for display because elements of type dict\n+    # cannot be ordered.\n+    data = data.applymap(lambda x: str(x) if isinstance(x, dict) else x)\n     if updating_pv:\n-      self._display_dive(data, updating_pv._dive_display_id)\n-      self._display_overview(data, updating_pv._overview_display_id)\n-      self._display_dataframe(data, updating_pv._df_display_id)\n+      # Only updates when data is not empty. Otherwise, consider it a bad\n+      # iteration and noop since there is nothing to be updated.\n+      if data.empty:\n+        _LOGGER.debug('Skip a visualization update due to empty data.')\n+      else:\n+        self._display_dataframe(data.copy(deep=True), updating_pv)\n+        if self._display_facets:\n+          self._display_dive(data.copy(deep=True), updating_pv)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NDY2OQ=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA2OTA3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1MToxOVrOFxUNpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjo0Mjo0N1rOFxeNtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTcxNw==", "bodyText": "What is happening in here in the next few lines?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387255717", "createdAt": "2020-03-03T19:51:19Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -238,31 +322,57 @@ def _display_dive(self, data, update=None):\n       display(HTML(html))\n \n   def _display_overview(self, data, update=None):\n+    if (not data.empty and self._include_window_info and\n+        all(column in data.columns\n+            for column in ('event_time', 'windows', 'pane_info'))):\n+      data = data.drop(['event_time', 'windows', 'pane_info'], axis=1)\n+\n     gfsg = GenericFeatureStatisticsGenerator()\n     proto = gfsg.ProtoFromDataFrames([{'name': 'data', 'table': data}])\n     protostr = base64.b64encode(proto.SerializeToString()).decode('utf-8')\n     if update:\n       script = _OVERVIEW_SCRIPT_TEMPLATE.format(\n-          display_id=update, protostr=protostr)\n+          display_id=update._overview_display_id, protostr=protostr)\n       display_javascript(Javascript(script))\n     else:\n       html = _OVERVIEW_HTML_TEMPLATE.format(\n           display_id=self._overview_display_id, protostr=protostr)\n       display(HTML(html))\n \n   def _display_dataframe(self, data, update=None):\n-    if update:\n-      table_id = 'table_{}'.format(update)\n-      html = _DATAFRAME_PAGINATION_TEMPLATE.format(\n-          dataframe_html=data.to_html(notebook=True, table_id=table_id),\n-          table_id=table_id)\n-      update_display(HTML(html), display_id=update)\n+    table_id = 'table_{}'.format(\n+        update._df_display_id if update else self._df_display_id)\n+    columns = [{\n+        'title': ''\n+    }] + [{\n+        'title': str(column)\n+    } for column in data.columns]\n+    format_window_info_in_dataframe(data)\n+    rows = data.applymap(lambda x: str(x)).to_dict('split')['data']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MTk5OA==", "bodyText": "First, we get all the string data from the split orient of dataframe.to_dict.\nNow the rows is a list of rows of values.\nEach row looks like [column_1_val, column_2_val, ...]\nThen we are going to add datatable column index for the values in each row.\nThe index starts from 1 because we are also going to add a column 0 later., so we have {k+1: v}.\nEach row now becomes {1: column_1_val, 2: column_2_val, ...}\nThen we add column 0 (row[0] = k) of the datatable with values of int based index (which will be the default order column just as the original dataframe).\nEach row now becomes {1: column_1_val, 2: column_2_val, ..., 0: int_index_in_dataframe}\nThen the list of above rows get supplied as string in the Javascript to load the data into the table.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387281998", "createdAt": "2020-03-03T20:43:36Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -238,31 +322,57 @@ def _display_dive(self, data, update=None):\n       display(HTML(html))\n \n   def _display_overview(self, data, update=None):\n+    if (not data.empty and self._include_window_info and\n+        all(column in data.columns\n+            for column in ('event_time', 'windows', 'pane_info'))):\n+      data = data.drop(['event_time', 'windows', 'pane_info'], axis=1)\n+\n     gfsg = GenericFeatureStatisticsGenerator()\n     proto = gfsg.ProtoFromDataFrames([{'name': 'data', 'table': data}])\n     protostr = base64.b64encode(proto.SerializeToString()).decode('utf-8')\n     if update:\n       script = _OVERVIEW_SCRIPT_TEMPLATE.format(\n-          display_id=update, protostr=protostr)\n+          display_id=update._overview_display_id, protostr=protostr)\n       display_javascript(Javascript(script))\n     else:\n       html = _OVERVIEW_HTML_TEMPLATE.format(\n           display_id=self._overview_display_id, protostr=protostr)\n       display(HTML(html))\n \n   def _display_dataframe(self, data, update=None):\n-    if update:\n-      table_id = 'table_{}'.format(update)\n-      html = _DATAFRAME_PAGINATION_TEMPLATE.format(\n-          dataframe_html=data.to_html(notebook=True, table_id=table_id),\n-          table_id=table_id)\n-      update_display(HTML(html), display_id=update)\n+    table_id = 'table_{}'.format(\n+        update._df_display_id if update else self._df_display_id)\n+    columns = [{\n+        'title': ''\n+    }] + [{\n+        'title': str(column)\n+    } for column in data.columns]\n+    format_window_info_in_dataframe(data)\n+    rows = data.applymap(lambda x: str(x)).to_dict('split')['data']", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTcxNw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTU4NQ==", "bodyText": "Could you explain that in a comment there?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387359585", "createdAt": "2020-03-03T23:37:24Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -238,31 +322,57 @@ def _display_dive(self, data, update=None):\n       display(HTML(html))\n \n   def _display_overview(self, data, update=None):\n+    if (not data.empty and self._include_window_info and\n+        all(column in data.columns\n+            for column in ('event_time', 'windows', 'pane_info'))):\n+      data = data.drop(['event_time', 'windows', 'pane_info'], axis=1)\n+\n     gfsg = GenericFeatureStatisticsGenerator()\n     proto = gfsg.ProtoFromDataFrames([{'name': 'data', 'table': data}])\n     protostr = base64.b64encode(proto.SerializeToString()).decode('utf-8')\n     if update:\n       script = _OVERVIEW_SCRIPT_TEMPLATE.format(\n-          display_id=update, protostr=protostr)\n+          display_id=update._overview_display_id, protostr=protostr)\n       display_javascript(Javascript(script))\n     else:\n       html = _OVERVIEW_HTML_TEMPLATE.format(\n           display_id=self._overview_display_id, protostr=protostr)\n       display(HTML(html))\n \n   def _display_dataframe(self, data, update=None):\n-    if update:\n-      table_id = 'table_{}'.format(update)\n-      html = _DATAFRAME_PAGINATION_TEMPLATE.format(\n-          dataframe_html=data.to_html(notebook=True, table_id=table_id),\n-          table_id=table_id)\n-      update_display(HTML(html), display_id=update)\n+    table_id = 'table_{}'.format(\n+        update._df_display_id if update else self._df_display_id)\n+    columns = [{\n+        'title': ''\n+    }] + [{\n+        'title': str(column)\n+    } for column in data.columns]\n+    format_window_info_in_dataframe(data)\n+    rows = data.applymap(lambda x: str(x)).to_dict('split')['data']", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTcxNw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxOTU3Mg==", "bodyText": "Added the comments.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387419572", "createdAt": "2020-03-04T02:42:47Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -238,31 +322,57 @@ def _display_dive(self, data, update=None):\n       display(HTML(html))\n \n   def _display_overview(self, data, update=None):\n+    if (not data.empty and self._include_window_info and\n+        all(column in data.columns\n+            for column in ('event_time', 'windows', 'pane_info'))):\n+      data = data.drop(['event_time', 'windows', 'pane_info'], axis=1)\n+\n     gfsg = GenericFeatureStatisticsGenerator()\n     proto = gfsg.ProtoFromDataFrames([{'name': 'data', 'table': data}])\n     protostr = base64.b64encode(proto.SerializeToString()).decode('utf-8')\n     if update:\n       script = _OVERVIEW_SCRIPT_TEMPLATE.format(\n-          display_id=update, protostr=protostr)\n+          display_id=update._overview_display_id, protostr=protostr)\n       display_javascript(Javascript(script))\n     else:\n       html = _OVERVIEW_HTML_TEMPLATE.format(\n           display_id=self._overview_display_id, protostr=protostr)\n       display(HTML(html))\n \n   def _display_dataframe(self, data, update=None):\n-    if update:\n-      table_id = 'table_{}'.format(update)\n-      html = _DATAFRAME_PAGINATION_TEMPLATE.format(\n-          dataframe_html=data.to_html(notebook=True, table_id=table_id),\n-          table_id=table_id)\n-      update_display(HTML(html), display_id=update)\n+    table_id = 'table_{}'.format(\n+        update._df_display_id if update else self._df_display_id)\n+    columns = [{\n+        'title': ''\n+    }] + [{\n+        'title': str(column)\n+    } for column in data.columns]\n+    format_window_info_in_dataframe(data)\n+    rows = data.applymap(lambda x: str(x)).to_dict('split')['data']", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTcxNw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA3NDI0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1MzowM1rOFxURHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzozNzo0OVrOFxaj9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjYwNA==", "bodyText": "is it possible to use strftime?\nhttps://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes", "url": "https://github.com/apache/beam/pull/11020#discussion_r387256604", "createdAt": "2020-03-03T19:53:03Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -291,3 +402,81 @@ def _to_dataframe(self):\n \n   def _is_one_dimension_type(self, val):\n     return type(val) in _one_dimension_types\n+\n+\n+def format_window_info_in_dataframe(data):\n+  if 'event_time' in data.columns:\n+    data['event_time'] = data['event_time'].apply(event_time_formatter)\n+  if 'windows' in data.columns:\n+    data['windows'] = data['windows'].apply(windows_formatter)\n+  if 'pane_info' in data.columns:\n+    data['pane_info'] = data['pane_info'].apply(pane_info_formatter)\n+\n+\n+def event_time_formatter(event_time_us):\n+  options = ie.current_env().options\n+  to_tz = options.display_timezone\n+  try:\n+    return (\n+        datetime.datetime.utcfromtimestamp(event_time_us / 1000000).replace(\n+            tzinfo=tz.tzutc()).astimezone(to_tz).strftime(\n+                options.display_timestamp_format))\n+  except ValueError:\n+    if event_time_us < 0:\n+      return 'Min Timestamp'\n+    return 'Max Timestamp'\n+\n+\n+def windows_formatter(windows):\n+  result = []\n+  for w in windows:\n+    if isinstance(w, GlobalWindow):\n+      result.append(str(w))\n+    elif isinstance(w, IntervalWindow):\n+      # First get the duration in terms of hours, minutes, seconds, and\n+      # micros.\n+      duration = w.end.micros - w.start.micros\n+      duration_secs = duration // 1000000\n+      hours, remainder = divmod(duration_secs, 3600)\n+      minutes, seconds = divmod(remainder, 60)\n+      micros = (duration - duration_secs * 1000000) % 1000000\n+\n+      # Construct the duration string. Try and write the string in such a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyMDc1MQ==", "bodyText": "This is trying to format a duration potentially with precision at micros, not exactly a datetime.  It's more like pretty print a timedelta. So the strftime function is not applicable.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387320751", "createdAt": "2020-03-03T22:02:00Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -291,3 +402,81 @@ def _to_dataframe(self):\n \n   def _is_one_dimension_type(self, val):\n     return type(val) in _one_dimension_types\n+\n+\n+def format_window_info_in_dataframe(data):\n+  if 'event_time' in data.columns:\n+    data['event_time'] = data['event_time'].apply(event_time_formatter)\n+  if 'windows' in data.columns:\n+    data['windows'] = data['windows'].apply(windows_formatter)\n+  if 'pane_info' in data.columns:\n+    data['pane_info'] = data['pane_info'].apply(pane_info_formatter)\n+\n+\n+def event_time_formatter(event_time_us):\n+  options = ie.current_env().options\n+  to_tz = options.display_timezone\n+  try:\n+    return (\n+        datetime.datetime.utcfromtimestamp(event_time_us / 1000000).replace(\n+            tzinfo=tz.tzutc()).astimezone(to_tz).strftime(\n+                options.display_timestamp_format))\n+  except ValueError:\n+    if event_time_us < 0:\n+      return 'Min Timestamp'\n+    return 'Max Timestamp'\n+\n+\n+def windows_formatter(windows):\n+  result = []\n+  for w in windows:\n+    if isinstance(w, GlobalWindow):\n+      result.append(str(w))\n+    elif isinstance(w, IntervalWindow):\n+      # First get the duration in terms of hours, minutes, seconds, and\n+      # micros.\n+      duration = w.end.micros - w.start.micros\n+      duration_secs = duration // 1000000\n+      hours, remainder = divmod(duration_secs, 3600)\n+      minutes, seconds = divmod(remainder, 60)\n+      micros = (duration - duration_secs * 1000000) % 1000000\n+\n+      # Construct the duration string. Try and write the string in such a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjYwNA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTczMw==", "bodyText": "Is there any other standard function that will do this?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387359733", "createdAt": "2020-03-03T23:37:49Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -291,3 +402,81 @@ def _to_dataframe(self):\n \n   def _is_one_dimension_type(self, val):\n     return type(val) in _one_dimension_types\n+\n+\n+def format_window_info_in_dataframe(data):\n+  if 'event_time' in data.columns:\n+    data['event_time'] = data['event_time'].apply(event_time_formatter)\n+  if 'windows' in data.columns:\n+    data['windows'] = data['windows'].apply(windows_formatter)\n+  if 'pane_info' in data.columns:\n+    data['pane_info'] = data['pane_info'].apply(pane_info_formatter)\n+\n+\n+def event_time_formatter(event_time_us):\n+  options = ie.current_env().options\n+  to_tz = options.display_timezone\n+  try:\n+    return (\n+        datetime.datetime.utcfromtimestamp(event_time_us / 1000000).replace(\n+            tzinfo=tz.tzutc()).astimezone(to_tz).strftime(\n+                options.display_timestamp_format))\n+  except ValueError:\n+    if event_time_us < 0:\n+      return 'Min Timestamp'\n+    return 'Max Timestamp'\n+\n+\n+def windows_formatter(windows):\n+  result = []\n+  for w in windows:\n+    if isinstance(w, GlobalWindow):\n+      result.append(str(w))\n+    elif isinstance(w, IntervalWindow):\n+      # First get the duration in terms of hours, minutes, seconds, and\n+      # micros.\n+      duration = w.end.micros - w.start.micros\n+      duration_secs = duration // 1000000\n+      hours, remainder = divmod(duration_secs, 3600)\n+      minutes, seconds = divmod(remainder, 60)\n+      micros = (duration - duration_secs * 1000000) % 1000000\n+\n+      # Construct the duration string. Try and write the string in such a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjYwNA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 374}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA4MTgzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1NToxOVrOFxUVtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzozODoyNFrOFxakxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Nzc4Mw==", "bodyText": "Where is the default defined?\nIf defined somewhere else, let's not repeat these in comments. It will require sync both places going forward.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387257783", "createdAt": "2020-03-03T19:55:19Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -86,10 +85,57 @@ def capture_duration(self, value):\n       # The next PCollection evaluation will capture fresh data from sources,\n       # and the data captured will be replayed until another eviction.\n     \"\"\"\n+    assert value.total_seconds() > 0, 'Duration must be a positive value.'\n     self.capture_control._capture_duration = value\n \n   # TODO(BEAM-8335): add capture_size options when they are supported.\n \n+  @property\n+  def display_timestamp_format(self):\n+    \"\"\"The format in which timestamps are displayed.\n+\n+    Default is '%Y-%m-%d %H:%M:%S.%f%z', e.g. 2020-02-01 15:05:06.000015-08:00.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NTEzMQ==", "bodyText": "docstrings in this module are for notebook users. So keeping them here allows Shift+Tab in notebooks to invoke the docstrings pop up. They function as in-notebook user guide.\nThe default is defined in the interactive_options module where we hide the implementation details that are not exposed APIs.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387285131", "createdAt": "2020-03-03T20:49:57Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -86,10 +85,57 @@ def capture_duration(self, value):\n       # The next PCollection evaluation will capture fresh data from sources,\n       # and the data captured will be replayed until another eviction.\n     \"\"\"\n+    assert value.total_seconds() > 0, 'Duration must be a positive value.'\n     self.capture_control._capture_duration = value\n \n   # TODO(BEAM-8335): add capture_size options when they are supported.\n \n+  @property\n+  def display_timestamp_format(self):\n+    \"\"\"The format in which timestamps are displayed.\n+\n+    Default is '%Y-%m-%d %H:%M:%S.%f%z', e.g. 2020-02-01 15:05:06.000015-08:00.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Nzc4Mw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTk0MA==", "bodyText": "How do we plan to keep the defaults in sync between here and interactive_options?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387359940", "createdAt": "2020-03-03T23:38:24Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -86,10 +85,57 @@ def capture_duration(self, value):\n       # The next PCollection evaluation will capture fresh data from sources,\n       # and the data captured will be replayed until another eviction.\n     \"\"\"\n+    assert value.total_seconds() > 0, 'Duration must be a positive value.'\n     self.capture_control._capture_duration = value\n \n   # TODO(BEAM-8335): add capture_size options when they are supported.\n \n+  @property\n+  def display_timestamp_format(self):\n+    \"\"\"The format in which timestamps are displayed.\n+\n+    Default is '%Y-%m-%d %H:%M:%S.%f%z', e.g. 2020-02-01 15:05:06.000015-08:00.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Nzc4Mw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA4NjY3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1Njo0MFrOFxUYqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjozMTowM1rOFxZBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODUzNg==", "bodyText": "import at top?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387258536", "createdAt": "2020-03-03T19:56:40Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -211,20 +280,27 @@ def show(*pcolls):\n         watched_pcollections.add(val)\n   for pcoll in pcolls:\n     if pcoll not in watched_pcollections:\n-      watch({re.sub(r'[\\[\\]\\(\\)]', '_', str(pcoll)): pcoll})\n+      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n+  import warnings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMzNDQwMg==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387334402", "createdAt": "2020-03-03T22:31:03Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -211,20 +280,27 @@ def show(*pcolls):\n         watched_pcollections.add(val)\n   for pcoll in pcolls:\n     if pcoll not in watched_pcollections:\n-      watch({re.sub(r'[\\[\\]\\(\\)]', '_', str(pcoll)): pcoll})\n+      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n+  import warnings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODUzNg=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA4OTEwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1NzoxNlrOFxUaFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo1MDoyNFrOFxZg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODkwMw==", "bodyText": "This will filter out all deprecation warnings. Not a good outcome, if we would like user to see deprecation warnings.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387258903", "createdAt": "2020-03-03T19:57:16Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -211,20 +280,27 @@ def show(*pcolls):\n         watched_pcollections.add(val)\n   for pcoll in pcolls:\n     if pcoll not in watched_pcollections:\n-      watch({re.sub(r'[\\[\\]\\(\\)]', '_', str(pcoll)): pcoll})\n+      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n+  import warnings\n+  warnings.filterwarnings('ignore', category=DeprecationWarning)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjU1MQ==", "bodyText": "Change the filtering to catch a specific message and only takes effect when is_in_ipython when the user invokes show for the first time.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387342551", "createdAt": "2020-03-03T22:50:24Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -211,20 +280,27 @@ def show(*pcolls):\n         watched_pcollections.add(val)\n   for pcoll in pcolls:\n     if pcoll not in watched_pcollections:\n-      watch({re.sub(r'[\\[\\]\\(\\)]', '_', str(pcoll)): pcoll})\n+      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n+  import warnings\n+  warnings.filterwarnings('ignore', category=DeprecationWarning)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODkwMw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA5MTYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1ODowM1rOFxUbpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjo0NzowMlrOFxeSLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTMwMw==", "bodyText": "what is jquery341 ?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387259303", "createdAt": "2020-03-03T19:58:03Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MjE3Nw==", "bodyText": "It's an arbitrary name we give to the jQuery v3.4.1 we imported. It's like a namesapce. Note the magic happens in window.jquery341 = jQuery.noConflict(true);.\nThe problem here is that:\n\nA frontend can connect to the kernel at any time: code executed by kernel in the past does not have any effect to new frontends.\nMultiple frontends can connect to the same kernel: each frontend has its own state (browser: HTML and JS), the rendered HTML+JS cannot assume the existence of any global variable, function definition or libraries.\n\nThis ensures no matter how many jQuery gets imported at any time, the interactive notebook always checks and uses the single jQuery configured by interactive modules with Datatable plugin initialized.\nAnd the function($) signature ensures that any customized script executed will use $ as the singleton instance  window.jquery341. This ensures that code reading $ as jQuery will always work.\nThe advantage of doing this isolation is:\n\nThe JS imported by interactive modules to any frontend does not alter their existing states. Everything in the notebook still works as it was no matter what libraries and global vars have been used.\nHTML with JS rendered by interactive modules will have determined behavior because it always uses the same libraries.\nWhether/when a frontend is connected to the kernel doesn't matter now. The visualization HTML contains everything it needs to setup and/or execute scripts.\nArbitrary DOM changes doesn't matter now. Even if the user screws the notebook's HTML, the data visualization broadcast from kernels will always be rendered correctly.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387292177", "createdAt": "2020-03-03T21:03:52Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTMwMw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2MDQ5Mg==", "bodyText": "jquery341 is probably not a good name. What would happen if we upgrade to a different jquery version? Maybe it would be better to call it jquery_singleton or something like that?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387360492", "createdAt": "2020-03-03T23:40:12Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTMwMw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyMDcxOQ==", "bodyText": "I've changed it to interactive_beam_jquery.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387420719", "createdAt": "2020-03-04T02:47:02Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTMwMw=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA5NDczOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1ODo1MFrOFxUdaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo0OTozMVrOFx3W6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTc1Mg==", "bodyText": "what does this do?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387259752", "createdAt": "2020-03-03T19:58:50Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{\n+          var jqueryScript = document.createElement('script');\n+          jqueryScript.src = 'https://code.jquery.com/jquery-3.4.1.slim.min.js';\n+          jqueryScript.type = 'text/javascript';\n+          jqueryScript.onload = function() {{\n+            var datatableScript = document.createElement('script');\n+            datatableScript.src = 'https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js';\n+            datatableScript.type = 'text/javascript';\n+            datatableScript.onload = function() {{\n+              window.jquery341 = jQuery.noConflict(true);\n+              window.jquery341(document).ready(function($){{\n+                {customized_script}\n+              }});\n+            }}\n+            document.head.appendChild(datatableScript);\n+          }};\n+          document.head.appendChild(jqueryScript);\n+        }} else {{\n+          window.jquery341(document).ready(function($){{\n+            {customized_script}\n+          }});\n+        }}\"\"\"\n+\n+_HTML_IMPORT_TEMPLATE = \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNTU4OQ==", "bodyText": "This uses something called HTML import where static HTML will be imported and embedded into current HTML.\nHere the HTML we desire is facets-jupyter.html.\nThis feature is not supported by chrome anymore, thus requires the webcomponents JS lib.\nSimilar to the jQuery template, we check if HTML import is supported by the browser, if so, import HTMLs else setup webcomponents and chain the HTML import to the end of onload.\nNote, we import HTMLs in the head for several reasons:\n\nIn a notebook, DOM changes all the time. Keeping imported HTMLs in head makes sure all dependency HTMLs available all the time.\nHTML import only happens once per page load. There is no way to recover an imported HTML if you delete it from DOM unless you refresh the page.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387315589", "createdAt": "2020-03-03T21:51:36Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{\n+          var jqueryScript = document.createElement('script');\n+          jqueryScript.src = 'https://code.jquery.com/jquery-3.4.1.slim.min.js';\n+          jqueryScript.type = 'text/javascript';\n+          jqueryScript.onload = function() {{\n+            var datatableScript = document.createElement('script');\n+            datatableScript.src = 'https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js';\n+            datatableScript.type = 'text/javascript';\n+            datatableScript.onload = function() {{\n+              window.jquery341 = jQuery.noConflict(true);\n+              window.jquery341(document).ready(function($){{\n+                {customized_script}\n+              }});\n+            }}\n+            document.head.appendChild(datatableScript);\n+          }};\n+          document.head.appendChild(jqueryScript);\n+        }} else {{\n+          window.jquery341(document).ready(function($){{\n+            {customized_script}\n+          }});\n+        }}\"\"\"\n+\n+_HTML_IMPORT_TEMPLATE = \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTc1Mg=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2MDcwNA==", "bodyText": "could you add comments related to this?\nWhy is it no longer supported by chrome?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387360704", "createdAt": "2020-03-03T23:40:50Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{\n+          var jqueryScript = document.createElement('script');\n+          jqueryScript.src = 'https://code.jquery.com/jquery-3.4.1.slim.min.js';\n+          jqueryScript.type = 'text/javascript';\n+          jqueryScript.onload = function() {{\n+            var datatableScript = document.createElement('script');\n+            datatableScript.src = 'https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js';\n+            datatableScript.type = 'text/javascript';\n+            datatableScript.onload = function() {{\n+              window.jquery341 = jQuery.noConflict(true);\n+              window.jquery341(document).ready(function($){{\n+                {customized_script}\n+              }});\n+            }}\n+            document.head.appendChild(datatableScript);\n+          }};\n+          document.head.appendChild(jqueryScript);\n+        }} else {{\n+          window.jquery341(document).ready(function($){{\n+            {customized_script}\n+          }});\n+        }}\"\"\"\n+\n+_HTML_IMPORT_TEMPLATE = \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTc1Mg=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyMjkxNw==", "bodyText": "Added comments.\nhttps://developer.mozilla.org/en-US/docs/Web/Web_Components/HTML_Imports explains it.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387422917", "createdAt": "2020-03-04T02:52:05Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{\n+          var jqueryScript = document.createElement('script');\n+          jqueryScript.src = 'https://code.jquery.com/jquery-3.4.1.slim.min.js';\n+          jqueryScript.type = 'text/javascript';\n+          jqueryScript.onload = function() {{\n+            var datatableScript = document.createElement('script');\n+            datatableScript.src = 'https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js';\n+            datatableScript.type = 'text/javascript';\n+            datatableScript.onload = function() {{\n+              window.jquery341 = jQuery.noConflict(true);\n+              window.jquery341(document).ready(function($){{\n+                {customized_script}\n+              }});\n+            }}\n+            document.head.appendChild(datatableScript);\n+          }};\n+          document.head.appendChild(jqueryScript);\n+        }} else {{\n+          window.jquery341(document).ready(function($){{\n+            {customized_script}\n+          }});\n+        }}\"\"\"\n+\n+_HTML_IMPORT_TEMPLATE = \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTc1Mg=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMTUyOQ==", "bodyText": "Strange. So we rely on a polyfill. Seems fine for now.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387831529", "createdAt": "2020-03-04T17:49:31Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{\n+          var jqueryScript = document.createElement('script');\n+          jqueryScript.src = 'https://code.jquery.com/jquery-3.4.1.slim.min.js';\n+          jqueryScript.type = 'text/javascript';\n+          jqueryScript.onload = function() {{\n+            var datatableScript = document.createElement('script');\n+            datatableScript.src = 'https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js';\n+            datatableScript.type = 'text/javascript';\n+            datatableScript.onload = function() {{\n+              window.jquery341 = jQuery.noConflict(true);\n+              window.jquery341(document).ready(function($){{\n+                {customized_script}\n+              }});\n+            }}\n+            document.head.appendChild(datatableScript);\n+          }};\n+          document.head.appendChild(jqueryScript);\n+        }} else {{\n+          window.jquery341(document).ready(function($){{\n+            {customized_script}\n+          }});\n+        }}\"\"\"\n+\n+_HTML_IMPORT_TEMPLATE = \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTc1Mg=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA5ODkwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/options/interactive_options.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDowMDowMFrOFxUf3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjoyMjo0MFrOFxYymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2MDM4MA==", "bodyText": "Are we using timezone from pytz or tz from dateutil?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387260380", "createdAt": "2020-03-03T20:00:00Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/interactive_options.py", "diffHunk": "@@ -24,6 +24,8 @@\n \n from __future__ import absolute_import\n \n+from dateutil import tz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMzMDcxNA==", "bodyText": "The user can use both. Here internally we use dateutil.tz get the local timezone info.\nExternally, the user can use pytz.timezone or dateutil.tz.gettz because the to_tz just needs to be a subclass of datetime.tzinfo.\nAdded the comments in the exposed API.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387330714", "createdAt": "2020-03-03T22:22:40Z", "author": {"login": "KevinGG"}, "path": "sdks/python/apache_beam/runners/interactive/options/interactive_options.py", "diffHunk": "@@ -24,6 +24,8 @@\n \n from __future__ import absolute_import\n \n+from dateutil import tz", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2MDM4MA=="}, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1761, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}