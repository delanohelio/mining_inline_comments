{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDIyNTAx", "number": 13362, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNDoxM1rOE6tMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoyOTozMVrOE7L93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTkzMzgxOnYy", "diffSide": "RIGHT", "path": ".test-infra/jenkins/CommonTestProperties.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNDoxM1rOH18Lzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo0Mjo1OFrOH2W-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMjYzOQ==", "bodyText": "No need to do it now, but for compatibility and infrastructure convenience there's no reason we can't re-register the various execution functions with additional aliases that match Java and Python which appear to require full class names.\nThat is, there's no reason why we can't have a package that imports all the runners and adds the aliases for these load tests (or for the runner files to do it themselves for common use).\n// if done in a separate package\nfunc init() {\n  beam.RegisterRunner(\"SparkRunner\", spark.Execute)\n}\n\n// if done in the spark runner package\nfunc init() {\n  beam.RegisterRunner(\"spark\", Execute)\n  beam.RegisterRunner(\"SparkRunner\", Execute)\n}", "url": "https://github.com/apache/beam/pull/13362#discussion_r526322639", "createdAt": "2020-11-18T18:24:13Z", "author": {"login": "lostluck"}, "path": ".test-infra/jenkins/CommonTestProperties.groovy", "diffHunk": "@@ -21,17 +21,36 @@\n class CommonTestProperties {\n   enum SDK {\n     PYTHON,\n-    JAVA\n+    JAVA,\n+    GO,\n   }\n \n   enum Runner {\n-    DATAFLOW(\"DataflowRunner\"),\n-    TEST_DATAFLOW(\"TestDataflowRunner\"),\n-    SPARK(\"SparkRunner\"),\n-    SPARK_STRUCTURED_STREAMING(\"SparkStructuredStreamingRunner\"),\n-    FLINK(\"FlinkRunner\"),\n-    DIRECT(\"DirectRunner\"),\n-    PORTABLE(\"PortableRunner\")\n+    DATAFLOW,\n+    TEST_DATAFLOW,\n+    SPARK,\n+    SPARK_STRUCTURED_STREAMING,\n+    FLINK,\n+    DIRECT,\n+    PORTABLE,\n+\n+    def runnerNames = [\n+      DATAFLOW: \"DataflowRunner\",\n+      TEST_DATAFLOW: \"TestDataflowRunner\",\n+      SPARK: \"SparkRunner\",\n+      SPARK_STRUCTURED_STREAMING: \"SparkStructuredStreamingRunner\",\n+      FLINK: \"FlinkRunner\",\n+      DIRECT: \"DirectRunner\",\n+      PORTABLE: \"PortableRunner\",\n+    ]\n+\n+    def goRunnerNames = [\n+      DATAFLOW: \"dataflow\",\n+      SPARK: \"spark\",\n+      FLINK: \"flink\",\n+      DIRECT: \"direct\",\n+      PORTABLE: \"universal\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2MTcyNg==", "bodyText": "I think it's worth doing it now. That will make a big part of infra changes unnecessary. I personally prefer the second option, which registers additional alias in the same package.", "url": "https://github.com/apache/beam/pull/13362#discussion_r526761726", "createdAt": "2020-11-19T10:42:58Z", "author": {"login": "kamilwu"}, "path": ".test-infra/jenkins/CommonTestProperties.groovy", "diffHunk": "@@ -21,17 +21,36 @@\n class CommonTestProperties {\n   enum SDK {\n     PYTHON,\n-    JAVA\n+    JAVA,\n+    GO,\n   }\n \n   enum Runner {\n-    DATAFLOW(\"DataflowRunner\"),\n-    TEST_DATAFLOW(\"TestDataflowRunner\"),\n-    SPARK(\"SparkRunner\"),\n-    SPARK_STRUCTURED_STREAMING(\"SparkStructuredStreamingRunner\"),\n-    FLINK(\"FlinkRunner\"),\n-    DIRECT(\"DirectRunner\"),\n-    PORTABLE(\"PortableRunner\")\n+    DATAFLOW,\n+    TEST_DATAFLOW,\n+    SPARK,\n+    SPARK_STRUCTURED_STREAMING,\n+    FLINK,\n+    DIRECT,\n+    PORTABLE,\n+\n+    def runnerNames = [\n+      DATAFLOW: \"DataflowRunner\",\n+      TEST_DATAFLOW: \"TestDataflowRunner\",\n+      SPARK: \"SparkRunner\",\n+      SPARK_STRUCTURED_STREAMING: \"SparkStructuredStreamingRunner\",\n+      FLINK: \"FlinkRunner\",\n+      DIRECT: \"DirectRunner\",\n+      PORTABLE: \"PortableRunner\",\n+    ]\n+\n+    def goRunnerNames = [\n+      DATAFLOW: \"dataflow\",\n+      SPARK: \"spark\",\n+      FLINK: \"flink\",\n+      DIRECT: \"direct\",\n+      PORTABLE: \"universal\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMjYzOQ=="}, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDE2ODgzOnYy", "diffSide": "RIGHT", "path": "sdks/go/test/load/util.go", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyMzoyOFrOH1-bFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODo0MDowNFrOH2selg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTMxOQ==", "bodyText": "Note, Unix only provides second granularity. If seconds is too coarse (or doesn't match Java and Python), consider using UnixNano() and converting to the correct granularity (millis or micros).\nhttps://golang.org/pkg/time/#Time.Unix", "url": "https://github.com/apache/beam/pull/13362#discussion_r526359319", "createdAt": "2020-11-18T19:23:28Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().Unix())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwOTc0Ng==", "bodyText": "(Notionally I think this is the only thing I need confirmation on before merging this)", "url": "https://github.com/apache/beam/pull/13362#discussion_r526509746", "createdAt": "2020-11-19T00:20:54Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().Unix())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTMxOQ=="}, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxNDUxMQ==", "bodyText": "I think there's no reason we can't use UnixNano(). The database expects the number of seconds, but the fractional part can provide valuable information, especially for small tests.", "url": "https://github.com/apache/beam/pull/13362#discussion_r526814511", "createdAt": "2020-11-19T12:03:29Z", "author": {"login": "kamilwu"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().Unix())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTMxOQ=="}, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExMzg3OA==", "bodyText": "SGTM As long as it ends up with the right units for the DB vs Java and Python, it's fine. I'm less familiar so I must ask :).", "url": "https://github.com/apache/beam/pull/13362#discussion_r527113878", "createdAt": "2020-11-19T18:40:04Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().Unix())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTMxOQ=="}, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDE2OTQ5OnYy", "diffSide": "RIGHT", "path": "sdks/go/test/load/util.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyMzo0MVrOH1-bnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyMzo0MVrOH1-bnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1OTQ1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // It uses a distribution metric which is updated every time new bundle\n          \n          \n            \n            // It uses a distribution metric which is updated every time a new bundle", "url": "https://github.com/apache/beam/pull/13362#discussion_r526359453", "createdAt": "2020-11-18T19:23:41Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time new bundle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f565b6d533525af79484a8f405b47168561d6e82"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDk3NTAyOnYy", "diffSide": "RIGHT", "path": "sdks/go/test/load/util.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoyOTozMVrOH2sGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0MToxNFrOH3IOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNzU4OA==", "bodyText": "Should this be UnixNano as well? Or do the published loadTestResults require second granularity?", "url": "https://github.com/apache/beam/pull/13362#discussion_r527107588", "createdAt": "2020-11-19T18:29:31Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time a new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// FinishBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) FinishBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// ProcessElement emits unmodified input elements.\n+func (fn *RuntimeMonitor) ProcessElement(key, value []byte, emit func([]byte, []byte)) {\n+\temit(key, value)\n+}\n+\n+type influxDBOptions struct {\n+\tmeasurement string\n+\tdbName      string\n+\thostname    string\n+\tuser        string\n+\tpassword    string\n+}\n+\n+func newInfluxDBOptions() *influxDBOptions {\n+\treturn &influxDBOptions{\n+\t\tmeasurement: *influxMeasurement,\n+\t\tdbName:      *influxDatabase,\n+\t\thostname:    *influxHost,\n+\t\tuser:        os.Getenv(\"INFLUXDB_USER\"),\n+\t\tpassword:    os.Getenv(\"INFLUXDB_USER_PASSWORD\")}\n+}\n+\n+func (options influxDBOptions) validate() bool {\n+\treturn options.measurement != \"\" && options.dbName != \"\"\n+}\n+\n+func (options influxDBOptions) httpAuthEnabled() bool {\n+\treturn options.user != \"\" && options.password != \"\"\n+}\n+\n+// loadTestResult represents a single data record that has: a timestamp,\n+// a type of a metric, and a value.\n+type loadTestResult struct {\n+\ttimestamp int64\n+\tmetric    string\n+\tvalue     float64\n+}\n+\n+func newLoadTestResult(value float64) loadTestResult {\n+\tmetric := \"\"\n+\tif *influxNamespace == \"\" {\n+\t\tmetric = runtimeMetricName\n+\t} else {\n+\t\tmetric = fmt.Sprintf(\"%v_%v\", *influxNamespace, runtimeMetricName)\n+\t}\n+\treturn loadTestResult{timestamp: time.Now().Unix(), metric: metric, value: value}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf83e7b489b5a06279255338003e0d780bd52398"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExNDE4Ng==", "bodyText": "I'm pretty sure this is correct, re-reading it all.", "url": "https://github.com/apache/beam/pull/13362#discussion_r527114186", "createdAt": "2020-11-19T18:40:37Z", "author": {"login": "lostluck"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time a new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// FinishBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) FinishBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// ProcessElement emits unmodified input elements.\n+func (fn *RuntimeMonitor) ProcessElement(key, value []byte, emit func([]byte, []byte)) {\n+\temit(key, value)\n+}\n+\n+type influxDBOptions struct {\n+\tmeasurement string\n+\tdbName      string\n+\thostname    string\n+\tuser        string\n+\tpassword    string\n+}\n+\n+func newInfluxDBOptions() *influxDBOptions {\n+\treturn &influxDBOptions{\n+\t\tmeasurement: *influxMeasurement,\n+\t\tdbName:      *influxDatabase,\n+\t\thostname:    *influxHost,\n+\t\tuser:        os.Getenv(\"INFLUXDB_USER\"),\n+\t\tpassword:    os.Getenv(\"INFLUXDB_USER_PASSWORD\")}\n+}\n+\n+func (options influxDBOptions) validate() bool {\n+\treturn options.measurement != \"\" && options.dbName != \"\"\n+}\n+\n+func (options influxDBOptions) httpAuthEnabled() bool {\n+\treturn options.user != \"\" && options.password != \"\"\n+}\n+\n+// loadTestResult represents a single data record that has: a timestamp,\n+// a type of a metric, and a value.\n+type loadTestResult struct {\n+\ttimestamp int64\n+\tmetric    string\n+\tvalue     float64\n+}\n+\n+func newLoadTestResult(value float64) loadTestResult {\n+\tmetric := \"\"\n+\tif *influxNamespace == \"\" {\n+\t\tmetric = runtimeMetricName\n+\t} else {\n+\t\tmetric = fmt.Sprintf(\"%v_%v\", *influxNamespace, runtimeMetricName)\n+\t}\n+\treturn loadTestResult{timestamp: time.Now().Unix(), metric: metric, value: value}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNzU4OA=="}, "originalCommit": {"oid": "cf83e7b489b5a06279255338003e0d780bd52398"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2ODU3Ng==", "bodyText": "Yes, this is correct. The test is going to run every 24 hours, so second precision is totally fine. It works the same in Python and Java tests.", "url": "https://github.com/apache/beam/pull/13362#discussion_r527568576", "createdAt": "2020-11-20T09:41:14Z", "author": {"login": "kamilwu"}, "path": "sdks/go/test/load/util.go", "diffHunk": "@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package load\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/metrics\"\n+)\n+\n+const (\n+\truntimeMetricNamespace = \"RuntimeMonitor\"\n+\truntimeMetricName      = \"runtime\"\n+)\n+\n+var (\n+\tinfluxMeasurement = flag.String(\n+\t\t\"influx_measurement\",\n+\t\t\"\",\n+\t\t`An InfluxDB measurement where metrics should be published to.\n+\t\tIf empty, no metrics will be send to InfluxDB.`)\n+\tinfluxDatabase = flag.String(\n+\t\t\"influx_db_name\",\n+\t\t\"\",\n+\t\t\"InfluxDB database name. If empty, no metrics will be send to InfluxDB.\")\n+\tinfluxHost = flag.String(\n+\t\t\"influx_hostname\",\n+\t\t\"http://localhost:8086\",\n+\t\t\"Hostname and port to connect to InfluxDB. Defaults to http://localhost:8086.\")\n+\tinfluxNamespace = flag.String(\n+\t\t\"influx_namespace\",\n+\t\t\"\",\n+\t\t`A namespace to be used when constructing InfluxDB's data points.\n+\t\tUsed to make some points different from others within the same measurement.`)\n+\truntime = beam.NewDistribution(runtimeMetricNamespace, runtimeMetricName)\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*RuntimeMonitor)(nil)).Elem())\n+}\n+\n+// RuntimeMonitor is a DoFn to record processing time in the pipeline.\n+//\n+// It uses a distribution metric which is updated every time a new bundle\n+// starts or finishes. The processing time can be extracted by calculating\n+// the difference of the maximum and the minimum value of the distribution\n+// metric.\n+type RuntimeMonitor struct{}\n+\n+// StartBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) StartBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// FinishBundle updates a distribution metric.\n+func (fn *RuntimeMonitor) FinishBundle(ctx context.Context, emit func([]byte, []byte)) {\n+\truntime.Update(ctx, time.Now().UnixNano())\n+}\n+\n+// ProcessElement emits unmodified input elements.\n+func (fn *RuntimeMonitor) ProcessElement(key, value []byte, emit func([]byte, []byte)) {\n+\temit(key, value)\n+}\n+\n+type influxDBOptions struct {\n+\tmeasurement string\n+\tdbName      string\n+\thostname    string\n+\tuser        string\n+\tpassword    string\n+}\n+\n+func newInfluxDBOptions() *influxDBOptions {\n+\treturn &influxDBOptions{\n+\t\tmeasurement: *influxMeasurement,\n+\t\tdbName:      *influxDatabase,\n+\t\thostname:    *influxHost,\n+\t\tuser:        os.Getenv(\"INFLUXDB_USER\"),\n+\t\tpassword:    os.Getenv(\"INFLUXDB_USER_PASSWORD\")}\n+}\n+\n+func (options influxDBOptions) validate() bool {\n+\treturn options.measurement != \"\" && options.dbName != \"\"\n+}\n+\n+func (options influxDBOptions) httpAuthEnabled() bool {\n+\treturn options.user != \"\" && options.password != \"\"\n+}\n+\n+// loadTestResult represents a single data record that has: a timestamp,\n+// a type of a metric, and a value.\n+type loadTestResult struct {\n+\ttimestamp int64\n+\tmetric    string\n+\tvalue     float64\n+}\n+\n+func newLoadTestResult(value float64) loadTestResult {\n+\tmetric := \"\"\n+\tif *influxNamespace == \"\" {\n+\t\tmetric = runtimeMetricName\n+\t} else {\n+\t\tmetric = fmt.Sprintf(\"%v_%v\", *influxNamespace, runtimeMetricName)\n+\t}\n+\treturn loadTestResult{timestamp: time.Now().Unix(), metric: metric, value: value}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNzU4OA=="}, "originalCommit": {"oid": "cf83e7b489b5a06279255338003e0d780bd52398"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2823, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}