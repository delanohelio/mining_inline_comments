{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjczNDgw", "number": 12149, "title": "[BEAM-9897] Add cross-language support to SnowflakeIO.Read", "bodyText": "This PR is part of adding SnowflakeIO to Java SDK BEAM-9893. Mainly this PR is adding support for cross-language read operation (BEAM-9897) .\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-01T12:41:36Z", "url": "https://github.com/apache/beam/pull/12149", "merged": true, "mergeCommit": {"oid": "3558c969e960575beb707a02493f1e4cf176db60"}, "closed": true, "closedAt": "2020-08-05T13:10:47Z", "author": {"login": "purbanow"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwp3M7gBqjM1MDIzNDM4NjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7raTsABqjM2MjE1OTExODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d42c255afd82c58f49ffc17752bf5ae7fb005cff", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/d42c255afd82c58f49ffc17752bf5ae7fb005cff", "committedDate": "2020-07-01T12:30:49Z", "message": "[BEAM-9897] add xlang support for SnowflakeIO.read"}, "afterCommit": {"oid": "808d858339d162e30586f9e21e3388e50afc726a", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/808d858339d162e30586f9e21e3388e50afc726a", "committedDate": "2020-07-01T13:00:17Z", "message": "[BEAM-9897] add xlang support for SnowflakeIO.read"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTcxMDIz", "url": "https://github.com/apache/beam/pull/12149#pullrequestreview-446971023", "createdAt": "2020-07-13T04:15:42Z", "commit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDoxNTo0MlrOGwa6Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNDoyOTozMVrOGwbFHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNTcwMg==", "bodyText": "You should not need this. You just have to make sure that dependencies correctly get determined (and staged) during cross language expansion.", "url": "https://github.com/apache/beam/pull/12149#discussion_r453425702", "createdAt": "2020-07-13T04:15:42Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/container/boot.go", "diffHunk": "@@ -122,6 +122,7 @@ func main() {\n \t\tfilepath.Join(jarsDir, \"beam-sdks-java-harness.jar\"),\n \t\tfilepath.Join(jarsDir, \"beam-sdks-java-io-kafka.jar\"),\n \t\tfilepath.Join(jarsDir, \"kafka-clients.jar\"),\n+\t\tfilepath.Join(jarsDir, \"beam-sdks-java-io-snowflake.jar\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNTgwNQ==", "bodyText": "Ditto.", "url": "https://github.com/apache/beam/pull/12149#discussion_r453425805", "createdAt": "2020-07-13T04:16:08Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/container/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ dependencies {\n   dockerDependency project(\":sdks:java:io:kafka\")\n   // This dependency is set to 'provided' scope in :sdks:java:io:kafka\n   dockerDependency library.java.kafka_clients\n+  dockerDependency project(path: \":sdks:java:io:snowflake\", configuration: \"shadow\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNTg2NQ==", "bodyText": "Ditto.", "url": "https://github.com/apache/beam/pull/12149#discussion_r453425865", "createdAt": "2020-07-13T04:16:20Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/container/build.gradle", "diffHunk": "@@ -60,6 +61,8 @@ task copyDockerfileDependencies(type: Copy) {\n   rename 'beam-sdks-java-harness-.*.jar', 'beam-sdks-java-harness.jar'\n   rename 'beam-sdks-java-io-kafka.*.jar', 'beam-sdks-java-io-kafka.jar'\n   rename 'kafka-clients.*.jar', 'kafka-clients.jar'\n+  rename 'beam-sdks-java-io-snowflake.*SNAPSHOT.jar', 'beam-sdks-java-io-snowflake.jar'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNTk2OA==", "bodyText": "Why are we adding a dependency here ?", "url": "https://github.com/apache/beam/pull/12149#discussion_r453425968", "createdAt": "2020-07-13T04:16:45Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/expansion-service/build.gradle", "diffHunk": "@@ -42,6 +42,8 @@ dependencies {\n   compile library.java.slf4j_api\n   runtimeOnly library.java.slf4j_jdk14\n   testCompile library.java.junit\n+\n+  runtime project(\":sdks:java:io:snowflake\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNjQ2OQ==", "bodyText": "Why are we implementing separate methods here ? Also probably this should be a separate PR.", "url": "https://github.com/apache/beam/pull/12149#discussion_r453426469", "createdAt": "2020-07-13T04:19:17Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -960,26 +953,44 @@ public static DataSourceConfiguration create(DataSource dataSource) {\n      * @param credentials - an instance of {@link SnowflakeCredentials}.\n      */\n     public static DataSourceConfiguration create(SnowflakeCredentials credentials) {\n-      if (credentials instanceof UsernamePasswordSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setUsername(((UsernamePasswordSnowflakeCredentials) credentials).getUsername())\n-            .setPassword(((UsernamePasswordSnowflakeCredentials) credentials).getPassword())\n-            .build();\n-      } else if (credentials instanceof OAuthTokenSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setOauthToken(((OAuthTokenSnowflakeCredentials) credentials).getToken())\n-            .build();\n-      } else if (credentials instanceof KeyPairSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setUsername(((KeyPairSnowflakeCredentials) credentials).getUsername())\n-            .setPrivateKey(((KeyPairSnowflakeCredentials) credentials).getPrivateKey())\n-            .build();\n-      }\n-      throw new IllegalArgumentException(\n-          \"Can't create DataSourceConfiguration from given credentials\");\n+      return credentials.createSnowflakeDataSourceConfiguration();\n+    }\n+\n+    /**\n+     * Creates {@link DataSourceConfiguration} from instance of {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNjkyMA==", "bodyText": "I suggest moving changes to credentials to a separate PR since this seems to be unrelated to x-lang changes.", "url": "https://github.com/apache/beam/pull/12149#discussion_r453426920", "createdAt": "2020-07-13T04:21:12Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/credentials/OAuthTokenSnowflakeCredentials.java", "diffHunk": "@@ -28,4 +30,9 @@ public OAuthTokenSnowflakeCredentials(String token) {\n   public String getToken() {\n     return token;\n   }\n+\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNzE2MA==", "bodyText": "Probably just leave this in the package \"org.apache.beam.sdk.io.snowflake\" ? Is there a need to add a new package ? (and if so probably use long form \"crosslanguage\").", "url": "https://github.com/apache/beam/pull/12149#discussion_r453427160", "createdAt": "2020-07-13T04:22:35Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/Configuration.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.xlang;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNzM5Ng==", "bodyText": "Probably call this SnowflakeReadRegistrar.", "url": "https://github.com/apache/beam/pull/12149#discussion_r453427396", "createdAt": "2020-07-13T04:23:57Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/ExternalRead.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.xlang;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.nio.charset.Charset;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.snowflake.SnowflakeIO;\n+import org.apache.beam.sdk.io.snowflake.credentials.SnowflakeCredentials;\n+import org.apache.beam.sdk.io.snowflake.credentials.SnowflakeCredentialsFactory;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link SnowflakeIO.Read} as an external transform for cross-language usage. */\n+@Experimental\n+@AutoService(ExternalTransformRegistrar.class)\n+public final class ExternalRead implements ExternalTransformRegistrar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyODE5Ng==", "bodyText": "You have to either add snowflake jars to \"io:expansion-service\" or expose a new Snowflake shadow jar that this wrapper can use (for expansion and for staging for runtime). What will be the size diff of \"sdks:java:io:expansion-service:shadowJar\" after including Snowflake ? If that is large we should go for the second option since this jar is shared by a bunch of cross-language wrappers.", "url": "https://github.com/apache/beam/pull/12149#discussion_r453428196", "createdAt": "2020-07-13T04:27:48Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/snowflake.py", "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+import apache_beam as beam\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = ['ReadFromSnowflake']\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyODUwOQ==", "bodyText": "Have you tested this against portable Flink/Spark and or Dataflow. Please mention here the runners this have been tested for and supported. Also mention details about prerequisites for the user. See following for an example.\nhttps://github.com/apache/beam/blob/master/sdks/python/apache_beam/io/kafka.py#L18", "url": "https://github.com/apache/beam/pull/12149#discussion_r453428509", "createdAt": "2020-07-13T04:29:31Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/snowflake.py", "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+import apache_beam as beam\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = ['ReadFromSnowflake']\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+ReadFromSnowflakeSchema = typing.NamedTuple(\n+    'WriteToSnowflakeSchema',\n+    [\n+        ('server_name', unicode),\n+        ('schema', unicode),\n+        ('database', unicode),\n+        ('staging_bucket_name', unicode),\n+        ('storage_integration_name', unicode),\n+        ('username', typing.Optional[unicode]),\n+        ('password', typing.Optional[unicode]),\n+        ('private_key_path', typing.Optional[unicode]),\n+        ('private_key_passphrase', typing.Optional[unicode]),\n+        ('o_auth_token', typing.Optional[unicode]),\n+        ('table', typing.Optional[unicode]),\n+        ('query', typing.Optional[unicode]),\n+    ])\n+\n+\n+class ReadFromSnowflake(beam.PTransform):\n+  \"\"\"An external PTransform which reads from Snowflake.\"\"\"\n+\n+  URN = 'beam:external:java:snowflake:read:v1'\n+\n+  def __init__(\n+      self,\n+      server_name,\n+      schema,\n+      database,\n+      staging_bucket_name,\n+      storage_integration_name,\n+      csv_mapper,\n+      username=None,\n+      password=None,\n+      private_key_path=None,\n+      private_key_passphrase=None,\n+      o_auth_token=None,\n+      table=None,\n+      query=None,\n+      expansion_service=None):\n+    \"\"\"\n+    Initializes a read operation from Snowflake.\n+\n+    Required parameters:\n+    :param server_name: full Snowflake server name with the following format\n+        account.region.gcp.snowflakecomputing.com.\n+    :param schema: name of the Snowflake schema in the database to use.\n+    :param database: name of the Snowflake database to use.\n+    :param staging_bucket_name: name of the Google Cloud Storage bucket.\n+        Bucket will be used as a temporary location for storing CSV files.\n+        Those temporary directories will be named\n+        `sf_copy_csv_DATE_TIME_RANDOMSUFFIX`\n+        and they will be removed automatically once Read operation finishes.\n+    :param storage_integration_name: is the name of storage integration\n+        object created according to Snowflake documentation.\n+    :param csv_mapper: specifies a function which must translate\n+        user-defined object to array of strings.\n+        SnowflakeIO uses a COPY INTO <location> statement to\n+        move data from a Snowflake table to Google Cloud Storage as CSV files.\n+        These files are then downloaded via FileIO and processed line by line.\n+        Each line is split into an array of Strings using the OpenCSV\n+        The csv_mapper function job is to give the user the possibility to\n+        convert the array of Strings to a user-defined type,\n+        ie. GenericRecord for Avro or Parquet files, or custom objects.\n+            Example:\n+                ```\n+                    def csv_mapper(strings_array):\n+ \t\t                return User(strings_array[0], int(strings_array[1])))\n+                ```\n+    :param table or query: specifies a Snowflake table name or custom SQL query\n+    :param expansion_service: specifies URL of expansion service.\n+\n+    Authentication parameters:\n+    It's required to pass one of the following combinations of valid parameters:\n+    :param username and password: specifies username and password\n+        for username/password authentication method.\n+    :param private_key_path and private_key_passphrase:\n+        specifies a private key file and password\n+        for key/ pair authentication method.\n+    :param o_auth_token: specifies access token for OAuth authentication method.\n+    \"\"\"\n+\n+    self.params = ReadFromSnowflakeSchema(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 119}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd75b8d5a9daef9b14f9e00c9dad8bd40f16aea0", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/fd75b8d5a9daef9b14f9e00c9dad8bd40f16aea0", "committedDate": "2020-07-13T09:02:55Z", "message": "revert auth mechanism"}, "afterCommit": {"oid": "4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "committedDate": "2020-07-13T09:54:43Z", "message": "refactor: revert auth mechanism and add missing docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "committedDate": "2020-07-13T09:54:43Z", "message": "refactor: revert auth mechanism and add missing docs"}, "afterCommit": {"oid": "90c2f62fcdb6c6217a10b6fa208d9233278e5e26", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/90c2f62fcdb6c6217a10b6fa208d9233278e5e26", "committedDate": "2020-07-13T09:59:38Z", "message": "refactor: revert auth mechanism and add missing docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90c2f62fcdb6c6217a10b6fa208d9233278e5e26", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/90c2f62fcdb6c6217a10b6fa208d9233278e5e26", "committedDate": "2020-07-13T09:59:38Z", "message": "refactor: revert auth mechanism and add missing docs"}, "afterCommit": {"oid": "984fb159a651dbff00d1247aef30b14e5dad3fea", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/984fb159a651dbff00d1247aef30b14e5dad3fea", "committedDate": "2020-07-13T10:04:38Z", "message": "refactor: revert auth mechanism and add missing docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "984fb159a651dbff00d1247aef30b14e5dad3fea", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/984fb159a651dbff00d1247aef30b14e5dad3fea", "committedDate": "2020-07-13T10:04:38Z", "message": "refactor: revert auth mechanism and add missing docs"}, "afterCommit": {"oid": "a680d37ec635d2142dd2bfefaf5c62b61a1b3d7d", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/a680d37ec635d2142dd2bfefaf5c62b61a1b3d7d", "committedDate": "2020-07-13T10:10:01Z", "message": "refactor: revert auth mechanism and add missing docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a680d37ec635d2142dd2bfefaf5c62b61a1b3d7d", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/a680d37ec635d2142dd2bfefaf5c62b61a1b3d7d", "committedDate": "2020-07-13T10:10:01Z", "message": "refactor: revert auth mechanism and add missing docs"}, "afterCommit": {"oid": "d80540dc993103b33b133afe8a2aa998aa9c7cdf", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/d80540dc993103b33b133afe8a2aa998aa9c7cdf", "committedDate": "2020-07-13T10:11:54Z", "message": "refactor: revert auth mechanism and add missing docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ2MjU0", "url": "https://github.com/apache/beam/pull/12149#pullrequestreview-458846254", "createdAt": "2020-07-31T00:23:48Z", "commit": {"oid": "9f42a997c017828f731db07ec40b33d7bceef139"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyMzo0OFrOG54Hvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDoyNjoyNlrOG54KhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTUwMw==", "bodyText": "Pls drop \"This option is only available for Beam 2.22.0 and later\". This was just for Kafka.", "url": "https://github.com/apache/beam/pull/12149#discussion_r463341503", "createdAt": "2020-07-31T00:23:48Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/snowflake.py", "diffHunk": "@@ -0,0 +1,185 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+import apache_beam as beam\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+\"\"\"Snowflake transforms tested against Flink portable runner.\n+  **Setup**\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+  There are several ways to setup cross-language Snowflake transforms.\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+  See below for details regarding each of these options.\n+  *Option 1: Use the default expansion service*\n+  This is the recommended and easiest setup option for using Python Kafka\n+  transforms. This option is only available for Beam 2.22.0 and later.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f42a997c017828f731db07ec40b33d7bceef139"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjIxMw==", "bodyText": "I added instructions for running Kafka against Dataflow for HEAD to here: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/examples/kafkataxi/README.md\nFor example, you need to setup \"--experiments=use_runner_v2\" and \"--sdk_harness_container_image_overrides\". Feel free to try this out and update the pydoc above if successful.", "url": "https://github.com/apache/beam/pull/12149#discussion_r463342213", "createdAt": "2020-07-31T00:26:26Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/snowflake.py", "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+import apache_beam as beam\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = ['ReadFromSnowflake']\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+ReadFromSnowflakeSchema = typing.NamedTuple(\n+    'WriteToSnowflakeSchema',\n+    [\n+        ('server_name', unicode),\n+        ('schema', unicode),\n+        ('database', unicode),\n+        ('staging_bucket_name', unicode),\n+        ('storage_integration_name', unicode),\n+        ('username', typing.Optional[unicode]),\n+        ('password', typing.Optional[unicode]),\n+        ('private_key_path', typing.Optional[unicode]),\n+        ('private_key_passphrase', typing.Optional[unicode]),\n+        ('o_auth_token', typing.Optional[unicode]),\n+        ('table', typing.Optional[unicode]),\n+        ('query', typing.Optional[unicode]),\n+    ])\n+\n+\n+class ReadFromSnowflake(beam.PTransform):\n+  \"\"\"An external PTransform which reads from Snowflake.\"\"\"\n+\n+  URN = 'beam:external:java:snowflake:read:v1'\n+\n+  def __init__(\n+      self,\n+      server_name,\n+      schema,\n+      database,\n+      staging_bucket_name,\n+      storage_integration_name,\n+      csv_mapper,\n+      username=None,\n+      password=None,\n+      private_key_path=None,\n+      private_key_passphrase=None,\n+      o_auth_token=None,\n+      table=None,\n+      query=None,\n+      expansion_service=None):\n+    \"\"\"\n+    Initializes a read operation from Snowflake.\n+\n+    Required parameters:\n+    :param server_name: full Snowflake server name with the following format\n+        account.region.gcp.snowflakecomputing.com.\n+    :param schema: name of the Snowflake schema in the database to use.\n+    :param database: name of the Snowflake database to use.\n+    :param staging_bucket_name: name of the Google Cloud Storage bucket.\n+        Bucket will be used as a temporary location for storing CSV files.\n+        Those temporary directories will be named\n+        `sf_copy_csv_DATE_TIME_RANDOMSUFFIX`\n+        and they will be removed automatically once Read operation finishes.\n+    :param storage_integration_name: is the name of storage integration\n+        object created according to Snowflake documentation.\n+    :param csv_mapper: specifies a function which must translate\n+        user-defined object to array of strings.\n+        SnowflakeIO uses a COPY INTO <location> statement to\n+        move data from a Snowflake table to Google Cloud Storage as CSV files.\n+        These files are then downloaded via FileIO and processed line by line.\n+        Each line is split into an array of Strings using the OpenCSV\n+        The csv_mapper function job is to give the user the possibility to\n+        convert the array of Strings to a user-defined type,\n+        ie. GenericRecord for Avro or Parquet files, or custom objects.\n+            Example:\n+                ```\n+                    def csv_mapper(strings_array):\n+ \t\t                return User(strings_array[0], int(strings_array[1])))\n+                ```\n+    :param table or query: specifies a Snowflake table name or custom SQL query\n+    :param expansion_service: specifies URL of expansion service.\n+\n+    Authentication parameters:\n+    It's required to pass one of the following combinations of valid parameters:\n+    :param username and password: specifies username and password\n+        for username/password authentication method.\n+    :param private_key_path and private_key_passphrase:\n+        specifies a private key file and password\n+        for key/ pair authentication method.\n+    :param o_auth_token: specifies access token for OAuth authentication method.\n+    \"\"\"\n+\n+    self.params = ReadFromSnowflakeSchema(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyODUwOQ=="}, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 119}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f42a997c017828f731db07ec40b33d7bceef139", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/9f42a997c017828f731db07ec40b33d7bceef139", "committedDate": "2020-07-28T14:00:44Z", "message": "feat: add custom expansion-service"}, "afterCommit": {"oid": "412a8b3feef3685a188d47bef67886066a0768fc", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/412a8b3feef3685a188d47bef67886066a0768fc", "committedDate": "2020-07-31T08:47:53Z", "message": "feat: add custom expansion-service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzA1MjA4", "url": "https://github.com/apache/beam/pull/12149#pullrequestreview-459305208", "createdAt": "2020-07-31T16:29:13Z", "commit": {"oid": "412a8b3feef3685a188d47bef67886066a0768fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoyOToxM1rOG6On1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoyOToxM1rOG6On1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxMDE2NQ==", "bodyText": "Thanks. This is potentially due to https://issues.apache.org/jira/browse/BEAM-10507.", "url": "https://github.com/apache/beam/pull/12149#discussion_r463710165", "createdAt": "2020-07-31T16:29:13Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/snowflake.py", "diffHunk": "@@ -0,0 +1,144 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+import apache_beam as beam\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = ['ReadFromSnowflake']\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+ReadFromSnowflakeSchema = typing.NamedTuple(\n+    'WriteToSnowflakeSchema',\n+    [\n+        ('server_name', unicode),\n+        ('schema', unicode),\n+        ('database', unicode),\n+        ('staging_bucket_name', unicode),\n+        ('storage_integration_name', unicode),\n+        ('username', typing.Optional[unicode]),\n+        ('password', typing.Optional[unicode]),\n+        ('private_key_path', typing.Optional[unicode]),\n+        ('private_key_passphrase', typing.Optional[unicode]),\n+        ('o_auth_token', typing.Optional[unicode]),\n+        ('table', typing.Optional[unicode]),\n+        ('query', typing.Optional[unicode]),\n+    ])\n+\n+\n+class ReadFromSnowflake(beam.PTransform):\n+  \"\"\"An external PTransform which reads from Snowflake.\"\"\"\n+\n+  URN = 'beam:external:java:snowflake:read:v1'\n+\n+  def __init__(\n+      self,\n+      server_name,\n+      schema,\n+      database,\n+      staging_bucket_name,\n+      storage_integration_name,\n+      csv_mapper,\n+      username=None,\n+      password=None,\n+      private_key_path=None,\n+      private_key_passphrase=None,\n+      o_auth_token=None,\n+      table=None,\n+      query=None,\n+      expansion_service=None):\n+    \"\"\"\n+    Initializes a read operation from Snowflake.\n+\n+    Required parameters:\n+    :param server_name: full Snowflake server name with the following format\n+        account.region.gcp.snowflakecomputing.com.\n+    :param schema: name of the Snowflake schema in the database to use.\n+    :param database: name of the Snowflake database to use.\n+    :param staging_bucket_name: name of the Google Cloud Storage bucket.\n+        Bucket will be used as a temporary location for storing CSV files.\n+        Those temporary directories will be named\n+        `sf_copy_csv_DATE_TIME_RANDOMSUFFIX`\n+        and they will be removed automatically once Read operation finishes.\n+    :param storage_integration_name: is the name of storage integration\n+        object created according to Snowflake documentation.\n+    :param csv_mapper: specifies a function which must translate\n+        user-defined object to array of strings.\n+        SnowflakeIO uses a COPY INTO <location> statement to\n+        move data from a Snowflake table to Google Cloud Storage as CSV files.\n+        These files are then downloaded via FileIO and processed line by line.\n+        Each line is split into an array of Strings using the OpenCSV\n+        The csv_mapper function job is to give the user the possibility to\n+        convert the array of Strings to a user-defined type,\n+        ie. GenericRecord for Avro or Parquet files, or custom objects.\n+            Example:\n+                ```\n+                    def csv_mapper(strings_array):\n+ \t\t                return User(strings_array[0], int(strings_array[1])))\n+                ```\n+    :param table or query: specifies a Snowflake table name or custom SQL query\n+    :param expansion_service: specifies URL of expansion service.\n+\n+    Authentication parameters:\n+    It's required to pass one of the following combinations of valid parameters:\n+    :param username and password: specifies username and password\n+        for username/password authentication method.\n+    :param private_key_path and private_key_passphrase:\n+        specifies a private key file and password\n+        for key/ pair authentication method.\n+    :param o_auth_token: specifies access token for OAuth authentication method.\n+    \"\"\"\n+\n+    self.params = ReadFromSnowflakeSchema(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyODUwOQ=="}, "originalCommit": {"oid": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72"}, "originalPosition": 119}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "412a8b3feef3685a188d47bef67886066a0768fc", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/412a8b3feef3685a188d47bef67886066a0768fc", "committedDate": "2020-07-31T08:47:53Z", "message": "feat: add custom expansion-service"}, "afterCommit": {"oid": "888abcfff81852e1a6e8729ca8422b9e11597e2f", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/888abcfff81852e1a6e8729ca8422b9e11597e2f", "committedDate": "2020-08-01T09:58:46Z", "message": "feat: add custom expansion-service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "888abcfff81852e1a6e8729ca8422b9e11597e2f", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/888abcfff81852e1a6e8729ca8422b9e11597e2f", "committedDate": "2020-08-01T09:58:46Z", "message": "feat: add custom expansion-service"}, "afterCommit": {"oid": "ff960e31d5bc78587730b5e9c5113dbecb34db32", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/ff960e31d5bc78587730b5e9c5113dbecb34db32", "committedDate": "2020-08-01T12:41:02Z", "message": "feat: add custom expansion-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37fe29336955c8df4c3faee88dc70ff18bc89135", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/37fe29336955c8df4c3faee88dc70ff18bc89135", "committedDate": "2020-08-04T16:11:39Z", "message": "[BEAM-9897] improve credentials mechanism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad69cb2617d91903cb3c475cfefede8ace4782d", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/0ad69cb2617d91903cb3c475cfefede8ace4782d", "committedDate": "2020-08-04T16:11:39Z", "message": "[BEAM-9897] add xlang support for SnowflakeIO.read"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "535a9054e7af371ae7925fab1325d9bb01c1ae37", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/535a9054e7af371ae7925fab1325d9bb01c1ae37", "committedDate": "2020-08-04T16:11:39Z", "message": "fix: python lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f632a8a7a4447463180a8deda2f1d404b5865753", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/f632a8a7a4447463180a8deda2f1d404b5865753", "committedDate": "2020-08-04T16:11:39Z", "message": "refactor: revert auth mechanism and add missing docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5867b3a2beefb865ba729d0145ea357b864f951a", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/5867b3a2beefb865ba729d0145ea357b864f951a", "committedDate": "2020-08-04T16:11:40Z", "message": "feat: add custom expansion-service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4062c61cc0ec41c67135aba68f681bb127bacc75", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/4062c61cc0ec41c67135aba68f681bb127bacc75", "committedDate": "2020-08-04T12:05:03Z", "message": "fix: CI"}, "afterCommit": {"oid": "0ac450195554a20d489e143d91f689f8e7be1b2f", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/0ac450195554a20d489e143d91f689f8e7be1b2f", "committedDate": "2020-08-04T16:11:40Z", "message": "fix: CI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ac450195554a20d489e143d91f689f8e7be1b2f", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/0ac450195554a20d489e143d91f689f8e7be1b2f", "committedDate": "2020-08-04T16:11:40Z", "message": "fix: CI"}, "afterCommit": {"oid": "b1a1c5f57f6de6f41f8e4f37de91e1c8bfd84781", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/b1a1c5f57f6de6f41f8e4f37de91e1c8bfd84781", "committedDate": "2020-08-04T16:15:21Z", "message": "fix: CI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1a1c5f57f6de6f41f8e4f37de91e1c8bfd84781", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/b1a1c5f57f6de6f41f8e4f37de91e1c8bfd84781", "committedDate": "2020-08-04T16:15:21Z", "message": "fix: CI"}, "afterCommit": {"oid": "ac8b0ca7d017e4d4bb7c8dc5668ee88cba3a7991", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/ac8b0ca7d017e4d4bb7c8dc5668ee88cba3a7991", "committedDate": "2020-08-04T18:44:16Z", "message": "fix: CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "committedDate": "2020-08-04T19:01:50Z", "message": "fix: CI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac8b0ca7d017e4d4bb7c8dc5668ee88cba3a7991", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/ac8b0ca7d017e4d4bb7c8dc5668ee88cba3a7991", "committedDate": "2020-08-04T18:44:16Z", "message": "fix: CI"}, "afterCommit": {"oid": "951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "author": {"user": {"login": "purbanow", "name": null}}, "url": "https://github.com/apache/beam/commit/951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "committedDate": "2020-08-04T19:01:50Z", "message": "fix: CI"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3290, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}