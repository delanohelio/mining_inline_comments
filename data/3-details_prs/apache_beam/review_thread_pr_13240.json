{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNDYxMjg1", "number": 13240, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0OToyMFrOE0gg_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTowODoxMlrOE0tsaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDk0MTQzOnYy", "diffSide": "RIGHT", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0OToyMFrOHsRdUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0OToyMFrOHsRdUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NTQyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private SerializablePipelineOptions pipelineOptions;\n          \n          \n            \n                private final SerializablePipelineOptions pipelineOptions;", "url": "https://github.com/apache/beam/pull/13240#discussion_r516185424", "createdAt": "2020-11-02T18:49:20Z", "author": {"login": "mxm"}, "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -1194,29 +1200,35 @@ public void verifyDeterministic() throws NonDeterministicException {\n     private Map<TupleTag<?>, Integer> tagsToIds;\n     private Map<TupleTag<?>, OutputTag<WindowedValue<?>>> tagsToOutputTags;\n     private Map<TupleTag<?>, Coder<WindowedValue<?>>> tagsToCoders;\n+    private SerializablePipelineOptions pipelineOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52943de2c1e6afbd2d752ccf0549126d42476c00"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDk0ODc0OnYy", "diffSide": "RIGHT", "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1MTozMVrOHsRhyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo1MTozMVrOHsRhyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NjU3MA==", "bodyText": "Perhaps, create a static factory method for all of these defaults? E.g. FlinkPipelineOptions.default()", "url": "https://github.com/apache/beam/pull/13240#discussion_r516186570", "createdAt": "2020-11-02T18:51:31Z", "author": {"login": "mxm"}, "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperatorTest.java", "diffHunk": "@@ -761,7 +797,9 @@ void testSideInputs(boolean keyed) throws Exception {\n               doFnOperator,\n               keySelector,\n               null,\n-              new CoderTypeInformation<>(FlinkKeyUtils.ByteBufferCoder.of()));\n+              new CoderTypeInformation<>(\n+                  FlinkKeyUtils.ByteBufferCoder.of(),\n+                  PipelineOptionsFactory.as(FlinkPipelineOptions.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52943de2c1e6afbd2d752ccf0549126d42476c00"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzA5ODc2OnYy", "diffSide": "RIGHT", "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTowNzo0MVrOHslgSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo0OTo0MlrOHstURw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA==", "bodyText": "Small suggestion, can we name this zeroCopy, as that is actually what it is.", "url": "https://github.com/apache/beam/pull/13240#discussion_r516513864", "createdAt": "2020-11-03T09:07:41Z", "author": {"login": "je-ik"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4MDQxMQ==", "bodyText": "I thought about zeroCopy as a name, but for me this is associated with the lower level concept and I thought it might create confusion. The name fasterCopy came from the idea that it is making the copying faster, but I am very much open to other names!", "url": "https://github.com/apache/beam/pull/13240#discussion_r516580411", "createdAt": "2020-11-03T10:55:57Z", "author": {"login": "rHermes"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4MjM2NA==", "bodyText": "Okay, what about disableValueClone, I think that fasterCopy is a little misleading as well. Faster than what? And why it was slower before? :) It would be good for the flag to describe direct effect (disable, enable something), not a consequence (being faster).", "url": "https://github.com/apache/beam/pull/13240#discussion_r516582364", "createdAt": "2020-11-03T10:59:24Z", "author": {"login": "je-ik"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4ODE5Mg==", "bodyText": "Very much agree with the name being descriptive. How about we go more opinionated, something like disableExcessCopy? There where some back and forth on the mailing list about this point, so I don't want to sneak in my opinion if that is not right. What do you think @mxm ?", "url": "https://github.com/apache/beam/pull/13240#discussion_r516588192", "createdAt": "2020-11-03T11:09:39Z", "author": {"login": "rHermes"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwNzgyNg==", "bodyText": "Folks, this is an internal boolean flag which is only used at a single place. If in doubt, one can clearly see what it does. We could add a /** */ Javadoc field comment for it if you will. IMHO the name is really personal preference and I have nothing against fasterCopy as it clearly indicates that the copy() method will return faster. Nothing semantically wrong about that. zeroCopy is not 100% true because we will perform a copy for primitive types but please let's not argue about that. DisableExcessCopy is too opinionated IMHO \ud83d\ude07", "url": "https://github.com/apache/beam/pull/13240#discussion_r516607826", "createdAt": "2020-11-03T11:46:27Z", "author": {"login": "mxm"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyOTg3Mg==", "bodyText": "I agree with DisableExcessCopy being too opinionated. My vote is for fasterCopy, but it is not a hill I will die on :P", "url": "https://github.com/apache/beam/pull/13240#discussion_r516629872", "createdAt": "2020-11-03T12:28:04Z", "author": {"login": "rHermes"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzNjU0OA==", "bodyText": "To make it clear - although I put my comment to the internal field, I was having in mind mostly the flag in PipelineOptions. These should be aligned.", "url": "https://github.com/apache/beam/pull/13240#discussion_r516636548", "createdAt": "2020-11-03T12:40:07Z", "author": {"login": "je-ik"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzOTEyNA==", "bodyText": "Agree that this is not 100% important, but if possible, we should make options passed in PipelineOptions the most self-explanatory as possible, because these options are user-facing.", "url": "https://github.com/apache/beam/pull/13240#discussion_r516639124", "createdAt": "2020-11-03T12:44:55Z", "author": {"login": "je-ik"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0MTg2Mw==", "bodyText": "I've been talking about the user facing flag from the beginning, so I understood you.", "url": "https://github.com/apache/beam/pull/13240#discussion_r516641863", "createdAt": "2020-11-03T12:49:42Z", "author": {"login": "rHermes"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzEwMDU5OnYy", "diffSide": "RIGHT", "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTowODoxMlrOHslhbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDowMToyMFrOHsniZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNDE1Ng==", "bodyText": "Maybe rename to copyIfNeeded, as when the flag is on, it doesn't copy anything.", "url": "https://github.com/apache/beam/pull/13240#discussion_r516514156", "createdAt": "2020-11-03T09:08:12Z", "author": {"login": "je-ik"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -82,10 +81,14 @@ public T createInstance() {\n \n   @Override\n   public T copy(T t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMTI2Ng==", "bodyText": "This is a Flink interface method which we can't rename.", "url": "https://github.com/apache/beam/pull/13240#discussion_r516531266", "createdAt": "2020-11-03T09:36:56Z", "author": {"login": "mxm"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -82,10 +81,14 @@ public T createInstance() {\n \n   @Override\n   public T copy(T t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNDE1Ng=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzE3Mw==", "bodyText": "Ah, I missed the @Override annotation. Understood.", "url": "https://github.com/apache/beam/pull/13240#discussion_r516547173", "createdAt": "2020-11-03T10:01:20Z", "author": {"login": "je-ik"}, "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -82,10 +81,14 @@ public T createInstance() {\n \n   @Override\n   public T copy(T t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNDE1Ng=="}, "originalCommit": {"oid": "c8ff19db299dc3c231939efdce140bb33185e121"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2900, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}