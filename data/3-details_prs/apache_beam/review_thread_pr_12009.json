{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Mjg0Mzky", "number": 12009, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMTozNFrOEGB3eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1Nzo0N1rOESocQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzU3NDk3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/ptransform.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMTozNFrOGkk2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMTozNFrOGkk2SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNTY0MQ==", "bodyText": "Please stay consistent with existing code: one import per line.", "url": "https://github.com/apache/beam/pull/12009#discussion_r441005641", "createdAt": "2020-06-16T17:01:34Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/transforms/ptransform.py", "diffHunk": "@@ -72,7 +72,7 @@ class and wrapper class that allows lambda functions to be used as\n from apache_beam.transforms.display import HasDisplayData\n from apache_beam.typehints import native_type_compatibility\n from apache_beam.typehints import typehints\n-from apache_beam.typehints.decorators import TypeCheckError\n+from apache_beam.typehints.decorators import TypeCheckError, IOTypeHints, get_type_hints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzU5NTA2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pvalue.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowNzoyNVrOGklDfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoyMjoxM1rOGn8pIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwOTAyMQ==", "bodyText": "I would really prefer it if all type constraint classes were in the same module (typehints).", "url": "https://github.com/apache/beam/pull/12009#discussion_r441009021", "createdAt": "2020-06-16T17:07:25Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -158,6 +159,20 @@ def __ne__(self, other):\n   def __hash__(self):\n     return hash((self.tag, self.producer))\n \n+  class PCollectionTypeConstraint(SequenceTypeConstraint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1MTUxNQ==", "bodyText": "Moved it back to the typehints module\nBoth files import from each other causing a circular import error so the current (hacky) workaround is to put the import inside of PCollectionTypeConstraint's class_getitem function, which works. There are no performance drawbacks to this approach but it's not consistent with the existing styling so I will look for a better solution.", "url": "https://github.com/apache/beam/pull/12009#discussion_r441851515", "createdAt": "2020-06-17T21:44:04Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -158,6 +159,20 @@ def __ne__(self, other):\n   def __hash__(self):\n     return hash((self.tag, self.producer))\n \n+  class PCollectionTypeConstraint(SequenceTypeConstraint):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwOTAyMQ=="}, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0MTIxOQ==", "bodyText": "This PR uses the built-in Generic[T] instead of a new TypeConstraint so this is no longer relevant.", "url": "https://github.com/apache/beam/pull/12009#discussion_r444541219", "createdAt": "2020-06-23T22:22:13Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -158,6 +159,20 @@ def __ne__(self, other):\n   def __hash__(self):\n     return hash((self.tag, self.producer))\n \n+  class PCollectionTypeConstraint(SequenceTypeConstraint):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwOTAyMQ=="}, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYyMzQ0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pvalue.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxNTo1MFrOGklWOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTozNTo1NlrOGlYQnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzgxOQ==", "bodyText": "This should stay Generic[T], as it provides the same [] functionality but is understood by tools like mypy and is familiar to Python users.", "url": "https://github.com/apache/beam/pull/12009#discussion_r441013819", "createdAt": "2020-06-16T17:15:50Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -141,7 +142,7 @@ def __or__(self, ptransform):\n     return self.pipeline.apply(ptransform, self)\n \n \n-class PCollection(PValue, Generic[T]):\n+class PCollection(PValue, CompositeTypeHint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0Nzk2Nw==", "bodyText": "Switched it back", "url": "https://github.com/apache/beam/pull/12009#discussion_r441847967", "createdAt": "2020-06-17T21:35:56Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -141,7 +142,7 @@ def __or__(self, ptransform):\n     return self.pipeline.apply(ptransform, self)\n \n \n-class PCollection(PValue, Generic[T]):\n+class PCollection(PValue, CompositeTypeHint):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzgxOQ=="}, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYzMDY4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pvalue.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxNzo1M1rOGkla_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoyMzozNlrOGn8q-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTAzOQ==", "bodyText": "Are these whitespace changes coming from yapf? This particularly seems to have moved the comment to the line above it.", "url": "https://github.com/apache/beam/pull/12009#discussion_r441015039", "createdAt": "2020-06-16T17:17:53Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -425,8 +441,7 @@ def _from_runtime_iterable(it, options):\n \n   def _view_options(self):\n     return {\n-        'data': self._data,\n-        # For non-fn-api runners.\n+        'data': self._data,  # For non-fn-api runners.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1Mjc4Mw==", "bodyText": "Yeah, yapf did that. I'm not sure why. When I run \"yapf -ir .\" from the root python directory, a lot of files are re-formatted. Is this unexpected behavior? If it's not, I can create an PR with just yapf changes to the entire apache_beam module. Thoughts?", "url": "https://github.com/apache/beam/pull/12009#discussion_r441852783", "createdAt": "2020-06-17T21:47:04Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -425,8 +441,7 @@ def _from_runtime_iterable(it, options):\n \n   def _view_options(self):\n     return {\n-        'data': self._data,\n-        # For non-fn-api runners.\n+        'data': self._data,  # For non-fn-api runners.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTAzOQ=="}, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2OTU3Ng==", "bodyText": "That is unexpected, yes.\nTry running tox -e py3-yapf. Perhaps the yapf you have installed is a newer version than tox's (0.29.0).", "url": "https://github.com/apache/beam/pull/12009#discussion_r443069576", "createdAt": "2020-06-19T22:47:02Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -425,8 +441,7 @@ def _from_runtime_iterable(it, options):\n \n   def _view_options(self):\n     return {\n-        'data': self._data,\n-        # For non-fn-api runners.\n+        'data': self._data,  # For non-fn-api runners.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTAzOQ=="}, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0MTY5MQ==", "bodyText": "Some of the YAPF changes are fixed but a few whitespace changes remain that I'll look into soon.", "url": "https://github.com/apache/beam/pull/12009#discussion_r444541691", "createdAt": "2020-06-23T22:23:36Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -425,8 +441,7 @@ def _from_runtime_iterable(it, options):\n \n   def _view_options(self):\n     return {\n-        'data': self._data,\n-        # For non-fn-api runners.\n+        'data': self._data,  # For non-fn-api runners.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTAzOQ=="}, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDQzNDQzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pvalue.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMzowNDoxNFrOGmjB6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDozMDo0M1rOGnP5yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3MzAwMA==", "bodyText": "I believe this method is unnecessary, since Generic[T] implements something similar. You can can inspect a PCollection to get its arguments.\nFor example:\n>>> import typing\n>>> T = typing.TypeVar('T')\n>>> class A(typing.Generic[T]):\n...   pass\n... \n>>> A[int].__args__\n(<class 'int'>,)", "url": "https://github.com/apache/beam/pull/12009#discussion_r443073000", "createdAt": "2020-06-19T23:04:14Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -158,6 +158,10 @@ def __ne__(self, other):\n   def __hash__(self):\n     return hash((self.tag, self.producer))\n \n+  def __class_getitem__(cls, type_param):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b890ed5a625cfc6c777ee4ef8daef6e1bc05f04e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwODIwMA==", "bodyText": "Thanks, fixed.", "url": "https://github.com/apache/beam/pull/12009#discussion_r443808200", "createdAt": "2020-06-22T20:30:43Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -158,6 +158,10 @@ def __ne__(self, other):\n   def __hash__(self):\n     return hash((self.tag, self.producer))\n \n+  def __class_getitem__(cls, type_param):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3MzAwMA=="}, "originalCommit": {"oid": "b890ed5a625cfc6c777ee4ef8daef6e1bc05f04e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI2MzUxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0MDozNFrOGonrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowOTowOVrOGpNgpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjI1MA==", "bodyText": "Did you mean to leave this test here? It looks like a copy of the one in AnnotationsTest.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445246250", "createdAt": "2020-06-25T00:40:34Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -40,6 +40,14 @@ def process(self, element: int) -> typehints.Tuple[str]:\n     with self.assertRaisesRegex(typehints.TypeCheckError,\n                                 r'requires.*int.*got.*str'):\n       _ = ['a', 'b', 'c'] | beam.ParDo(MyDoFn())\n+  def test_pardo_dofn(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODY1Mg==", "bodyText": "Or perhaps this was also a git merge result", "url": "https://github.com/apache/beam/pull/12009#discussion_r445268652", "createdAt": "2020-06-25T02:09:01Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -40,6 +40,14 @@ def process(self, element: int) -> typehints.Tuple[str]:\n     with self.assertRaisesRegex(typehints.TypeCheckError,\n                                 r'requires.*int.*got.*str'):\n       _ = ['a', 'b', 'c'] | beam.ParDo(MyDoFn())\n+  def test_pardo_dofn(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjI1MA=="}, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjE1MA==", "bodyText": "That was an accident, thanks", "url": "https://github.com/apache/beam/pull/12009#discussion_r445866150", "createdAt": "2020-06-25T22:09:09Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -40,6 +40,14 @@ def process(self, element: int) -> typehints.Tuple[str]:\n     with self.assertRaisesRegex(typehints.TypeCheckError,\n                                 r'requires.*int.*got.*str'):\n       _ = ['a', 'b', 'c'] | beam.ParDo(MyDoFn())\n+  def test_pardo_dofn(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjI1MA=="}, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI3MTU0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0NToyNlrOGonwFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0NToyNlrOGonwFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NzUxMQ==", "bodyText": "There is no need to assert that no exceptions are raised. The test will already fail if exceptions are raised.\nIf I need to be explicit I usually put a comment above the line that shouldn't fail.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445247511", "createdAt": "2020-06-25T00:45:26Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -257,6 +265,65 @@ def fn2(element: int) -> int:\n     result = [1, 2, 3] | beam.FlatMap(fn) | beam.Map(fn2)\n     self.assertCountEqual([4, 6], result)\n \n+  def test_typed_ptransform_with_no_error(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[int]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    try:\n+      _ = ['1', '2', '3'] | StrToInt() | IntToStr()\n+    except Exception:\n+      self.fail('An unexpected error was raised during a pipeline with correct typehints.')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI3Nzk1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0OTozN1rOGon0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0OTozN1rOGon0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0ODUxNA==", "bodyText": "Please use with self.assertRaisesRegex(..) above instead of separately checking the exception text.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445248514", "createdAt": "2020-06-25T00:49:37Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -257,6 +265,65 @@ def fn2(element: int) -> int:\n     result = [1, 2, 3] | beam.FlatMap(fn) | beam.Map(fn2)\n     self.assertCountEqual([4, 6], result)\n \n+  def test_typed_ptransform_with_no_error(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[int]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    try:\n+      _ = ['1', '2', '3'] | StrToInt() | IntToStr()\n+    except Exception:\n+      self.fail('An unexpected error was raised during a pipeline with correct typehints.')\n+\n+  def test_typed_ptransform_with_bad_typehints(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    with self.assertRaises(typehints.TypeCheckError) as error:\n+      # raises error because of mismatched typehints between StrToInt and IntToStr\n+      _ = ['1', '2', '3'] | StrToInt() | IntToStr()\n+\n+    self.assertTrue(\"Input type hint violation at IntToStr: expected <class 'str'>, got <class 'int'>\" in str(error.exception))\n+\n+  def test_typed_ptransform_with_bad_input(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[int]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    with self.assertRaises(typehints.TypeCheckError) as error:\n+      # Feed integers to a PTransform that expects strings\n+      _ = [1, 2, 3] | StrToInt() | IntToStr()\n+\n+    self.assertTrue(\"Input type hint violation at StrToInt: expected <class 'str'>, got <class 'int'>\" in str(error.exception))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDM3NTY0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMTo0OTo0OVrOGoov6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMzo0N1rOGpsLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2Mzg0OA==", "bodyText": "This is valid. The type hint should convert to Any.\nQuoting from https://docs.python.org/3/library/typing.html:\n\nUsing a generic class without specifying type parameters assumes Any for each position.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445263848", "createdAt": "2020-06-25T01:49:49Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,61 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    with self.assertRaises(TypeCheckError) as error:\n+      _th = MyPTransform().get_type_hints()\n+\n+    self.assertEqual(str(error.exception), 'An input typehint to a PTransform must be a single (or nested) type '\n+                                           'wrapped by a PCollection.')\n+\n+  def test_annotations_without_internal_type(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection) -> PCollection:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2ODY2Mw==", "bodyText": "Thanks, fixed.", "url": "https://github.com/apache/beam/pull/12009#discussion_r446368663", "createdAt": "2020-06-26T19:23:47Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,61 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    with self.assertRaises(TypeCheckError) as error:\n+      _th = MyPTransform().get_type_hints()\n+\n+    self.assertEqual(str(error.exception), 'An input typehint to a PTransform must be a single (or nested) type '\n+                                           'wrapped by a PCollection.')\n+\n+  def test_annotations_without_internal_type(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection) -> PCollection:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2Mzg0OA=="}, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDM5NzE1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/decorators.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowMjo0NFrOGoo8wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowMjo0NFrOGoo8wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzEzOA==", "bodyText": "Please handle cases where self.input_types is None or the number of arguments is not 1.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445267138", "createdAt": "2020-06-25T02:02:44Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,43 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    input_type = self.input_types[0][0]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDM5NzkzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/decorators.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowMzoyMVrOGoo9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowMzoyMVrOGoo9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzI3MQ==", "bodyText": "As a general rule, don't catch all exceptions but only the ones you expect to be raised.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445267271", "createdAt": "2020-06-25T02:03:21Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,43 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    input_type = self.input_types[0][0]\n+    if isinstance(input_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    try:\n+      input_type = input_type.__args__[0]\n+    except:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQwMzEwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/ptransform.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowNjo0M1rOGopAXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowNjo0M1rOGopAXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODA2MQ==", "bodyText": "Bad merge?", "url": "https://github.com/apache/beam/pull/12009#discussion_r445268061", "createdAt": "2020-06-25T02:06:43Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/transforms/ptransform.py", "diffHunk": "@@ -616,24 +627,14 @@ def register_urn(\n     # type: (...) -> Callable[[Union[type, Callable[[beam_runner_api_pb2.PTransform, T, PipelineContext], Any]]], Callable[[T, PipelineContext], Any]]\n     pass\n \n-  @classmethod\n-  @overload\n-  def register_urn(\n-      cls,\n-      urn,  # type: str\n-      parameter_type,  # type: None\n-  ):\n-    # type: (...) -> Callable[[Union[type, Callable[[beam_runner_api_pb2.PTransform, bytes, PipelineContext], Any]]], Callable[[bytes, PipelineContext], Any]]\n-    pass\n-\n   @classmethod\n   @overload\n   def register_urn(cls,\n                    urn,  # type: str\n                    parameter_type,  # type: Type[T]\n                    constructor  # type: Callable[[beam_runner_api_pb2.PTransform, T, PipelineContext], Any]\n                   ):\n-    # type: (...) -> None\n+    # type: (...) -> Callable[[Union[type, Callable[[beam_runner_api_pb2.PTransform, bytes, PipelineContext], Any]]], Callable[[bytes, PipelineContext], Any]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQwNDM5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/ptransform.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowNzoyOVrOGopBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowNzoyOVrOGopBJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODI2MQ==", "bodyText": "You can chain the 2 function calls.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445268261", "createdAt": "2020-06-25T02:07:29Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/transforms/ptransform.py", "diffHunk": "@@ -364,6 +366,15 @@ def default_label(self):\n     # type: () -> str\n     return self.__class__.__name__\n \n+  def default_type_hints(self):\n+    fn_type_hints = IOTypeHints.from_callable(self.expand)\n+    if fn_type_hints is not None:\n+      fn_type_hints = fn_type_hints.strip_pcoll_input()\n+      fn_type_hints = fn_type_hints.strip_pcoll_output()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQwOTgzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjoxMDo1M1rOGopEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjoxMDo1M1rOGopEbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2OTEwMA==", "bodyText": "Also test when the output typehint is unsupported.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445269100", "createdAt": "2020-06-25T02:10:53Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,61 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    with self.assertRaises(TypeCheckError) as error:\n+      _th = MyPTransform().get_type_hints()\n+\n+    self.assertEqual(str(error.exception), 'An input typehint to a PTransform must be a single (or nested) type '", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQzNzMzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/decorators.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjoyODoxMFrOGopUiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjoyODoxMFrOGopUiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3MzIyNA==", "bodyText": "Also verify that input_type is a PCollection or PBegin.\nPCollection or PDone for output type", "url": "https://github.com/apache/beam/pull/12009#discussion_r445273224", "createdAt": "2020-06-25T02:28:10Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,43 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    input_type = self.input_types[0][0]\n+    if isinstance(input_type, typehints.AnyTypeConstraint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODE0NDE5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoyNDowNVrOGpN2pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo1Mjo0OVrOGprWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3MTc4MA==", "bodyText": "Any idea why this test is failing? It says the strings don't match in stdout but they appear to match.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445871780", "createdAt": "2020-06-25T22:24:05Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,59 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or PBegin. '\n+\n+    with self.assertRaisesRegex(TypeCheckError, error_str):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0MjMxOQ==", "bodyText": "Probably because there are unescaped regex control characters in that string: ().", "url": "https://github.com/apache/beam/pull/12009#discussion_r445942319", "createdAt": "2020-06-26T02:57:03Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,59 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or PBegin. '\n+\n+    with self.assertRaisesRegex(TypeCheckError, error_str):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3MTc4MA=="}, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NTEwOA==", "bodyText": "Thanks, that fixed it", "url": "https://github.com/apache/beam/pull/12009#discussion_r446355108", "createdAt": "2020-06-26T18:52:49Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,59 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or PBegin. '\n+\n+    with self.assertRaisesRegex(TypeCheckError, error_str):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3MTc4MA=="}, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODE3NzM4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/decorators.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjozOTo0M1rOGpOLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToyODowMVrOGuU8jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NzA1MA==", "bodyText": "Now that I think about it this can be a simple try/catch IndexError instead of manually checking for None", "url": "https://github.com/apache/beam/pull/12009#discussion_r445877050", "createdAt": "2020-06-25T22:39:43Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,61 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or ' \\\n+                'PBegin. '\n+\n+    if any(element is None for element in [self.input_types, self.input_types[0], self.input_types[0][0]]):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0MTA2NQ==", "bodyText": "This line will raise an exception when self.input_types is None, compared to:\nif self.input_types is None or len(self.input_types[0]) != 1:\nIt doesn't take advantage of short-circuit evaluation.\nself.input_types = None is a valid value. It means nothing was set. (We should get rid of that and always have ((), {}) as the input/output_types value if there are no type hints, but I haven't had the chance to do that.)\nSame goes for having zero type hints: it's valid and there's nothing to do.\nMight be useful to reuse: self._has_input_types, self.has_simple_output_type.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445941065", "createdAt": "2020-06-26T02:51:28Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,61 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or ' \\\n+                'PBegin. '\n+\n+    if any(element is None for element in [self.input_types, self.input_types[0], self.input_types[0][0]]):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NzA1MA=="}, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1OTI4OA==", "bodyText": "I thought they were equivalent because any() supports short-circuiting.\nThanks, just pushed a fix that replaces the messy check with those helper functions. Also just to clarify, in those situations, the typehint is valid so we can just return self right?", "url": "https://github.com/apache/beam/pull/12009#discussion_r446359288", "createdAt": "2020-06-26T19:02:23Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,61 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or ' \\\n+                'PBegin. '\n+\n+    if any(element is None for element in [self.input_types, self.input_types[0], self.input_types[0][0]]):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NzA1MA=="}, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMDg2MQ==", "bodyText": "It does support short-circuiting, but the list [self.input_types, self.input_types[0], self.input_types[0][0]] is first completely evaluated.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451230861", "createdAt": "2020-07-08T01:28:01Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,61 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or ' \\\n+                'PBegin. '\n+\n+    if any(element is None for element in [self.input_types, self.input_types[0], self.input_types[0][0]]):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NzA1MA=="}, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzI3NzEwOnYy", "diffSide": "RIGHT", "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToxNDo1MVrOGuUvZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjowOToyMlrOG16H6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw==", "bodyText": "@robertwb are PBegin and PDone part of the public API?", "url": "https://github.com/apache/beam/pull/12009#discussion_r451227493", "createdAt": "2020-07-08T01:14:51Z", "author": {"login": "udim"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMzUyNA==", "bodyText": "Good question. Responded on the list.", "url": "https://github.com/apache/beam/pull/12009#discussion_r454713524", "createdAt": "2020-07-15T00:04:44Z", "author": {"login": "robertwb"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIxMzY4Mw==", "bodyText": "The dev list discussion seems to have a consensus:\n\nMake PBegin public (add to __all__ list)\nDeprecate PDone return type in favor of None. We still need to be backwards compatible, but update this PR to support the None return type for expand.\n\nAdditional documentation will be tracked in https://issues.apache.org/jira/browse/BEAM-10495", "url": "https://github.com/apache/beam/pull/12009#discussion_r455213683", "createdAt": "2020-07-15T17:26:21Z", "author": {"login": "udim"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMDU3NA==", "bodyText": "Sounds good.\nShould we update documentation here and here to note the existence of PBegin?", "url": "https://github.com/apache/beam/pull/12009#discussion_r455230574", "createdAt": "2020-07-15T17:46:22Z", "author": {"login": "saavannanavati"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0MjMzMg==", "bodyText": "I would like to split the programming guide update into a separate PR, since it will include examples from multiple languages and possibly some more discussion. This will be tracked in BEAM-10495, and you can take it on if you wish.\nThe python-type-safety update in this PR already mentions PBegin. Did you want to add more details?", "url": "https://github.com/apache/beam/pull/12009#discussion_r455342332", "createdAt": "2020-07-15T21:03:02Z", "author": {"login": "udim"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTk2MQ==", "bodyText": "Sounds good\n\nThe python-type-safety update in this PR already mentions PBegin. Did you want to add more details?\n\nIt also mentions PDone, do we want to remove that?\n\nI would like to split the programming guide update into a separate PR, since it will include examples from multiple languages and possibly some more discussion. This will be tracked in BEAM-10495, and you can take it on if you wish.\n\nI'll focus on benchmarking the runtime type checking system for now but if time permits afterwards, sure", "url": "https://github.com/apache/beam/pull/12009#discussion_r456109961", "createdAt": "2020-07-16T22:18:08Z", "author": {"login": "saavannanavati"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MDAwOA==", "bodyText": "Please also accept None wherever PDone is accepted, so as to not break existing pipelines.", "url": "https://github.com/apache/beam/pull/12009#discussion_r459180008", "createdAt": "2020-07-23T02:09:22Z", "author": {"login": "udim"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzI4MDYzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pvalue.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToxNzowOFrOGuUxiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxODowMjoxM1rOGuzbUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyODA0MA==", "bodyText": "PBegin and Done do not contain elements like a PCollection. I think of them as placeholders for transforms that don't have inputs or outputs, respectively.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451228040", "createdAt": "2020-07-08T01:17:08Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -222,7 +222,7 @@ class _InvalidUnpickledPCollection(object):\n   pass\n \n \n-class PBegin(PValue):\n+class PBegin(PValue, Generic[T]):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTczMDI1OQ==", "bodyText": "Oh ok makes sense", "url": "https://github.com/apache/beam/pull/12009#discussion_r451730259", "createdAt": "2020-07-08T18:02:13Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -222,7 +222,7 @@ class _InvalidUnpickledPCollection(object):\n   pass\n \n \n-class PBegin(PValue):\n+class PBegin(PValue, Generic[T]):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyODA0MA=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzMxMzc1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/decorators.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTozNzoxNVrOGuVFqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMToxNzozNFrOGw6M7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzE5Mw==", "bodyText": "Are string representations necessary here? We typically don't compare by string.\nYou can also write if not isinstance(my_type, valid_classes).", "url": "https://github.com/apache/beam/pull/12009#discussion_r451233193", "createdAt": "2020-07-08T01:37:15Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,56 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   {'input_types': None},\n+                                   ['apache_beam.pvalue.PBegin'],\n+                                   'An input typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   {'output_types': None},\n+                                   ['apache_beam.pvalue.PDone'],\n+                                   'An output typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PDone. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      kwarg_dict,         # type: Dict[str, any]\n+      my_valid_classes,   # type: List[str]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+\n+    if not has_my_type() or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    valid_classes = ['apache_beam.pvalue.PCollection'] + my_valid_classes\n+\n+    if not any(valid_class in str(my_type) for valid_class in valid_classes):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTczMzcwNg==", "bodyText": "I tried using isinstance initially but it doesn't work well with generic types\nAnother option is to use __origin__ but I don't know if that's fully backwards compatible\nStrings are a wacky solution though.. do you have any other ideas?", "url": "https://github.com/apache/beam/pull/12009#discussion_r451733706", "createdAt": "2020-07-08T18:08:27Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,56 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   {'input_types': None},\n+                                   ['apache_beam.pvalue.PBegin'],\n+                                   'An input typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   {'output_types': None},\n+                                   ['apache_beam.pvalue.PDone'],\n+                                   'An output typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PDone. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      kwarg_dict,         # type: Dict[str, any]\n+      my_valid_classes,   # type: List[str]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+\n+    if not has_my_type() or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    valid_classes = ['apache_beam.pvalue.PCollection'] + my_valid_classes\n+\n+    if not any(valid_class in str(my_type) for valid_class in valid_classes):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzE5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkzODQxNQ==", "bodyText": "TBD: Try using __origin__ instead for subscripted types and non-subscripted types", "url": "https://github.com/apache/beam/pull/12009#discussion_r453938415", "createdAt": "2020-07-13T21:17:34Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,56 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   {'input_types': None},\n+                                   ['apache_beam.pvalue.PBegin'],\n+                                   'An input typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   {'output_types': None},\n+                                   ['apache_beam.pvalue.PDone'],\n+                                   'An output typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PDone. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      kwarg_dict,         # type: Dict[str, any]\n+      my_valid_classes,   # type: List[str]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+\n+    if not has_my_type() or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    valid_classes = ['apache_beam.pvalue.PCollection'] + my_valid_classes\n+\n+    if not any(valid_class in str(my_type) for valid_class in valid_classes):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzE5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzMyMzEzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/decorators.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTo0Mjo1NVrOGuVLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTo0Mjo1NVrOGuVLYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDY1Nw==", "bodyText": "The next(iter(kwarg_dict)) call hard to read. Since there is only one item in the dict, you could pass the key instead and create the dictionary below.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451234657", "createdAt": "2020-07-08T01:42:55Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,56 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   {'input_types': None},\n+                                   ['apache_beam.pvalue.PBegin'],\n+                                   'An input typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   {'output_types': None},\n+                                   ['apache_beam.pvalue.PDone'],\n+                                   'An output typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PDone. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      kwarg_dict,         # type: Dict[str, any]\n+      my_valid_classes,   # type: List[str]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+\n+    if not has_my_type() or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    valid_classes = ['apache_beam.pvalue.PCollection'] + my_valid_classes\n+\n+    if not any(valid_class in str(my_type) for valid_class in valid_classes):\n+      raise TypeCheckError(error_str)\n+\n+    if not hasattr(my_type, '__args__'):  # e.g. PCollection\n+      kwarg_dict[next(iter(kwarg_dict))] = ((typehints.Any, ), {})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzM1ODQ4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/snippets/snippets_test_py3.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjowNDowN1rOGuVgqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjowNDowN1rOGuVgqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MDEwNg==", "bodyText": "I think this line was not updated to use IntToStr.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451240106", "createdAt": "2020-07-08T02:04:07Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/examples/snippets/snippets_test_py3.py", "diffHunk": "@@ -96,6 +96,18 @@ def my_fn(element: int) -> str:\n       ids = numbers | 'to_id' >> beam.Map(my_fn)\n       # [END type_hints_map_annotations]\n \n+    # Example using an annotated PTransform.\n+    with self.assertRaises(typehints.TypeCheckError):\n+      # [START type_hints_ptransforms]\n+      from apache_beam.pvalue import PCollection\n+\n+      class IntToStr(beam.PTransform):\n+        def expand(pcoll: PCollection[int]) -> PCollection[str]:\n+          return pcoll | beam.Map(lambda elem: str(elem))\n+\n+      ids = numbers | 'convert to str' >> beam.Map(my_fn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e451941b5c4ed2c42fdef72227598578b532f3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTcyNDE2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/typehints/decorators.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1Nzo0N1rOG36x3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1Nzo0N1rOG36x3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NzkwMw==", "bodyText": "Nit: This error message doesn't say what the incorrect type was. Ex:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  raise TypeCheckError(error_str)\n          \n          \n            \n                  raise TypeCheckError(error_str + ' Got: %s' % my_type)", "url": "https://github.com/apache/beam/pull/12009#discussion_r461287903", "createdAt": "2020-07-28T02:57:47Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,67 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    from apache_beam.pvalue import PBegin\n+    from apache_beam.pvalue import PDone\n+\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   'input_types',\n+                                    [PBegin],\n+                                   'An input typehint to a PTransform must be '\n+                                   'a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   'output_types',\n+                                   [PDone, None],\n+                                   'An output typehint to a PTransform must be '\n+                                   'a single (or nested) type wrapped by '\n+                                   'a PCollection, PDone, or None. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      my_key,             # type: str\n+      special_containers,   # type: List[Union[PBegin, PDone, PCollection]]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+    from apache_beam.pvalue import PCollection\n+\n+    if not has_my_type() or not my_type or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    special_containers += [PCollection]\n+\n+    if (my_type not in special_containers and\n+        getattr(my_type, '__origin__', None) != PCollection):\n+      raise TypeCheckError(error_str)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c6f4c5d3d30676716f106e887be6bb12038998"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3521, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}