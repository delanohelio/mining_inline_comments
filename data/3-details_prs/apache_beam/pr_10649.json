{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTg0NTA3", "number": 10649, "title": "[BEAM-8042] [ZetaSQL] Fix aggregate column reference", "bodyText": "Some aggregate operations do not require a column reference (Ex: COUNT(*), unlike COUNT(id)).\nSuch expressions should not increment reference offset when construction LogicalAggregate.\nR: @amaliujia\nCC: @kanterov\nCC: @apilloud\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-21T23:37:10Z", "url": "https://github.com/apache/beam/pull/10649", "merged": true, "mergeCommit": {"oid": "a0103ddb92cc20a6e360d3d6143459f4b8a946c4"}, "closed": true, "closedAt": "2020-01-30T20:10:28Z", "author": {"login": "11moon11"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8p5dLgH2gAyMzY1NTg0NTA3OjQyYTM5Y2Q4NDAwYzIwMWUzMjU0YWM1ZDQ5YmQ1YzYzNTg5ZGY4NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb84ygTAFqTM0Njc1MDA1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "42a39cd8400c201e3254ac5d49bd5c63589df860", "author": {"user": {"login": "11moon11", "name": "Kirill Kozlov"}}, "url": "https://github.com/apache/beam/commit/42a39cd8400c201e3254ac5d49bd5c63589df860", "committedDate": "2020-01-21T23:39:15Z", "message": "Fix aggregates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b205dacf8ca25e3a70623a3d35d52e835e0d61f", "author": {"user": {"login": "11moon11", "name": "Kirill Kozlov"}}, "url": "https://github.com/apache/beam/commit/3b205dacf8ca25e3a70623a3d35d52e835e0d61f", "committedDate": "2020-01-21T23:31:10Z", "message": "Fix aggregates"}, "afterCommit": {"oid": "42a39cd8400c201e3254ac5d49bd5c63589df860", "author": {"user": {"login": "11moon11", "name": "Kirill Kozlov"}}, "url": "https://github.com/apache/beam/commit/42a39cd8400c201e3254ac5d49bd5c63589df860", "committedDate": "2020-01-21T23:39:15Z", "message": "Fix aggregates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjY3Mjg5", "url": "https://github.com/apache/beam/pull/10649#pullrequestreview-346267289", "createdAt": "2020-01-21T23:43:17Z", "commit": {"oid": "42a39cd8400c201e3254ac5d49bd5c63589df860"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjY3NTgy", "url": "https://github.com/apache/beam/pull/10649#pullrequestreview-346267582", "createdAt": "2020-01-21T23:44:09Z", "commit": {"oid": "42a39cd8400c201e3254ac5d49bd5c63589df860"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo0NDoxMFrOFgMgqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo0NDoxMFrOFgMgqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMzcyMg==", "bodyText": "Might want to use named parameters to not rely on hard-coded values.", "url": "https://github.com/apache/beam/pull/10649#discussion_r369303722", "createdAt": "2020-01-21T23:44:10Z", "author": {"login": "11moon11"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -1347,6 +1347,44 @@ public void testZetaSQLStructFieldAccessInTumble() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testAggregateWithAndWithoutColumnRefs() {\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+\n+    String sql =\n+        \"SELECT \\n\"\n+            + \"  id, \\n\"\n+            + \"  SUM(has_f1) as f1_count, \\n\"\n+            + \"  SUM(has_f2) as f2_count, \\n\"\n+            + \"  SUM(has_f3) as f3_count, \\n\"\n+            + \"  SUM(has_f4) as f4_count, \\n\"\n+            + \"  SUM(has_f5) as f5_count, \\n\"\n+            + \"  COUNT(*) as count, \\n\"\n+            + \"  SUM(has_f6) as f6_count  \\n\"\n+            + \"FROM (select 0 as id, 1 as has_f1, 2 as has_f2, 3 as has_f3, 4 as has_f4, 5 as has_f5, 6 as has_f6)\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a39cd8400c201e3254ac5d49bd5c63589df860"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjY3NzY4", "url": "https://github.com/apache/beam/pull/10649#pullrequestreview-346267768", "createdAt": "2020-01-21T23:44:41Z", "commit": {"oid": "42a39cd8400c201e3254ac5d49bd5c63589df860"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo0NDo0MlrOFgMhMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo0NDo0MlrOFgMhMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMzg1Nw==", "bodyText": "Nit: you might can include a comment like \"this test is used to verify BEAM-8042\", which can provide some context for readers. But it's not required.", "url": "https://github.com/apache/beam/pull/10649#discussion_r369303857", "createdAt": "2020-01-21T23:44:42Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -1347,6 +1347,44 @@ public void testZetaSQLStructFieldAccessInTumble() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testAggregateWithAndWithoutColumnRefs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a39cd8400c201e3254ac5d49bd5c63589df860"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63b5e42b0398000c40e3276609fe3cafdfbe583a", "author": {"user": {"login": "11moon11", "name": "Kirill Kozlov"}}, "url": "https://github.com/apache/beam/commit/63b5e42b0398000c40e3276609fe3cafdfbe583a", "committedDate": "2020-01-21T23:57:50Z", "message": "Add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzUwMDU4", "url": "https://github.com/apache/beam/pull/10649#pullrequestreview-346750058", "createdAt": "2020-01-22T17:00:14Z", "commit": {"oid": "63b5e42b0398000c40e3276609fe3cafdfbe583a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowMDoxNFrOFgju8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowMDoxNFrOFgju8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NDIxMQ==", "bodyText": "What happens if there is an aggregate function with more then a single argument, for instance, COUNTIF?", "url": "https://github.com/apache/beam/pull/10649#discussion_r369684211", "createdAt": "2020-01-22T17:00:14Z", "author": {"login": "kanterov"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/AggregateScanConverter.java", "diffHunk": "@@ -88,8 +88,13 @@ public RelNode convert(ResolvedAggregateScan zetaNode, List<RelNode> inputs) {\n       // For aggregate calls, their input ref follow after GROUP BY input ref.\n       int columnRefoff = groupFieldsListSize;\n       for (ResolvedComputedColumn computedColumn : zetaNode.getAggregateList()) {\n-        aggregateCalls.add(convertAggCall(computedColumn, columnRefoff));\n-        columnRefoff++;\n+        AggregateCall aggCall = convertAggCall(computedColumn, columnRefoff);\n+        aggregateCalls.add(aggCall);\n+        if (!aggCall.getArgList().isEmpty()) {\n+          // Only increment column reference offset when aggregates use them (BEAM-8042).\n+          // Ex: COUNT(*) does not have arguments, while COUNT(`field`) does.\n+          columnRefoff++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b5e42b0398000c40e3276609fe3cafdfbe583a"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3552, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}