{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NTg5NDQy", "number": 12083, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyMzo0OFrOEKYKkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjozMzo0MlrOEKYUgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE3MTM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyMzo0OFrOGrYUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowNzoxMFrOGr6Dug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDM5NA==", "bodyText": "I believe the protos might be immutable, and creating new instances when you call setX on them. You can do the whole thing fluently:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Map<String, String> labelMap = new HashMap<>();\n          \n          \n            \n                  JobConfiguration config = new JobConfiguration();\n          \n          \n            \n                  config.setCopy(copyConfig);\n          \n          \n            \n                  config.setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap));\n          \n          \n            \n                  Job job = new Job().setJobReference(jobRef).setConfiguration(config);\n          \n          \n            \n                  Job job = new Job()\n          \n          \n            \n                        .setJobReference(jobRef)\n          \n          \n            \n                        .setConfiguration(new JobConfiguration()\n          \n          \n            \n                              .setCopy(copyConfig)\n          \n          \n            \n                              .setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap)));", "url": "https://github.com/apache/beam/pull/12083#discussion_r448140394", "createdAt": "2020-07-01T06:23:48Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -216,11 +221,11 @@ public void startQueryJob(JobReference jobRef, JobConfigurationQuery queryConfig\n     @Override\n     public void startCopyJob(JobReference jobRef, JobConfigurationTableCopy copyConfig)\n         throws IOException, InterruptedException {\n-      Job job =\n-          new Job()\n-              .setJobReference(jobRef)\n-              .setConfiguration(new JobConfiguration().setCopy(copyConfig));\n-\n+      Map<String, String> labelMap = new HashMap<>();\n+      JobConfiguration config = new JobConfiguration();\n+      config.setCopy(copyConfig);\n+      config.setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap));\n+      Job job = new Job().setJobReference(jobRef).setConfiguration(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDUzNA==", "bodyText": "Same for other occurrences in this file", "url": "https://github.com/apache/beam/pull/12083#discussion_r448140534", "createdAt": "2020-07-01T06:24:14Z", "author": {"login": "pabloem"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -216,11 +221,11 @@ public void startQueryJob(JobReference jobRef, JobConfigurationQuery queryConfig\n     @Override\n     public void startCopyJob(JobReference jobRef, JobConfigurationTableCopy copyConfig)\n         throws IOException, InterruptedException {\n-      Job job =\n-          new Job()\n-              .setJobReference(jobRef)\n-              .setConfiguration(new JobConfiguration().setCopy(copyConfig));\n-\n+      Map<String, String> labelMap = new HashMap<>();\n+      JobConfiguration config = new JobConfiguration();\n+      config.setCopy(copyConfig);\n+      config.setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap));\n+      Job job = new Job().setJobReference(jobRef).setConfiguration(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDM5NA=="}, "originalCommit": {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzE3OA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12083#discussion_r448693178", "createdAt": "2020-07-02T01:07:10Z", "author": {"login": "ajamato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -216,11 +221,11 @@ public void startQueryJob(JobReference jobRef, JobConfigurationQuery queryConfig\n     @Override\n     public void startCopyJob(JobReference jobRef, JobConfigurationTableCopy copyConfig)\n         throws IOException, InterruptedException {\n-      Job job =\n-          new Job()\n-              .setJobReference(jobRef)\n-              .setConfiguration(new JobConfiguration().setCopy(copyConfig));\n-\n+      Map<String, String> labelMap = new HashMap<>();\n+      JobConfiguration config = new JobConfiguration();\n+      config.setCopy(copyConfig);\n+      config.setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap));\n+      Job job = new Job().setJobReference(jobRef).setConfiguration(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDM5NA=="}, "originalCommit": {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE5MjU4OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjozMTo1MlrOGrYg4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo1NDozOVrOGr521A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MzU4NQ==", "bodyText": "Same as Python - will this timeout first, or fail immediately?", "url": "https://github.com/apache/beam/pull/12083#discussion_r448143585", "createdAt": "2020-07-01T06:31:52Z", "author": {"login": "pabloem"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.CharStreams;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+\n+/** */\n+public class GceMetadataUtil {\n+  private static final String BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\";\n+\n+  static String fetchMetadata(String key) {\n+    int timeoutMillis = 5000;\n+    final HttpParams httpParams = new BasicHttpParams();\n+    HttpConnectionParams.setConnectionTimeout(httpParams, timeoutMillis);\n+    HttpClient client = new DefaultHttpClient(httpParams);\n+    HttpGet request = new HttpGet(BASE_METADATA_URL + key);\n+    request.setHeader(\"Metadata-Flavor\", \"Google\");\n+\n+    try {\n+      HttpResponse response = client.execute(request);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        // May mean its running on a non DataflowRunner, in which case it's perfectly normal.\n+        return \"\";\n+      }\n+      InputStream in = response.getEntity().getContent();\n+      try (final Reader reader = new InputStreamReader(in, Charset.defaultCharset())) {\n+        return CharStreams.toString(reader);\n+      }\n+    } catch (IOException e) {\n+      // May mean its running on a non DataflowRunner, in which case it's perfectly normal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4OTg3Ng==", "bodyText": "As discussed on the python PR. It shouldn't resolve the address and return much faster than the timeout.\nIf it does resolve for some reason (as you suggested running on a GCE VM+setting the metadata, but not via Dataflow), I still validate the returned job_id string is a valid cloud label before attaching it as a bq job label.", "url": "https://github.com/apache/beam/pull/12083#discussion_r448689876", "createdAt": "2020-07-02T00:54:39Z", "author": {"login": "ajamato"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.CharStreams;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+\n+/** */\n+public class GceMetadataUtil {\n+  private static final String BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\";\n+\n+  static String fetchMetadata(String key) {\n+    int timeoutMillis = 5000;\n+    final HttpParams httpParams = new BasicHttpParams();\n+    HttpConnectionParams.setConnectionTimeout(httpParams, timeoutMillis);\n+    HttpClient client = new DefaultHttpClient(httpParams);\n+    HttpGet request = new HttpGet(BASE_METADATA_URL + key);\n+    request.setHeader(\"Metadata-Flavor\", \"Google\");\n+\n+    try {\n+      HttpResponse response = client.execute(request);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        // May mean its running on a non DataflowRunner, in which case it's perfectly normal.\n+        return \"\";\n+      }\n+      InputStream in = response.getEntity().getContent();\n+      try (final Reader reader = new InputStreamReader(in, Charset.defaultCharset())) {\n+        return CharStreams.toString(reader);\n+      }\n+    } catch (IOException e) {\n+      // May mean its running on a non DataflowRunner, in which case it's perfectly normal.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MzU4NQ=="}, "originalCommit": {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE5NjgwOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjozMzo0MlrOGrYjWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0NTo0NlrOGr5uiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NDIxNg==", "bodyText": "An intersting example: What if the worker running this code is a GCE VM, but not on Dataflow (e.g. Dataproc, DirectRunner on GCE VM)? Will that case be handled properly? This should be exercised by postcommits, I'd think...", "url": "https://github.com/apache/beam/pull/12083#discussion_r448144216", "createdAt": "2020-07-01T06:33:42Z", "author": {"login": "pabloem"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.CharStreams;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+\n+/** */\n+public class GceMetadataUtil {\n+  private static final String BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\";\n+\n+  static String fetchMetadata(String key) {\n+    int timeoutMillis = 5000;\n+    final HttpParams httpParams = new BasicHttpParams();\n+    HttpConnectionParams.setConnectionTimeout(httpParams, timeoutMillis);\n+    HttpClient client = new DefaultHttpClient(httpParams);\n+    HttpGet request = new HttpGet(BASE_METADATA_URL + key);\n+    request.setHeader(\"Metadata-Flavor\", \"Google\");\n+\n+    try {\n+      HttpResponse response = client.execute(request);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        // May mean its running on a non DataflowRunner, in which case it's perfectly normal.\n+        return \"\";\n+      }\n+      InputStream in = response.getEntity().getContent();\n+      try (final Reader reader = new InputStreamReader(in, Charset.defaultCharset())) {\n+        return CharStreams.toString(reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4Nzc1Mw==", "bodyText": "If a valid cloud label string is provided job_id is defined in the metadata, it will be pulled in and added a s a beam_job_id label to the BQ jobs. Shouldn't break anything, and if the job_id is meaningful it could be quite useful. It would actually be a good thing to do intentionally, IMO. Might be worth suggesting to dataproc.", "url": "https://github.com/apache/beam/pull/12083#discussion_r448687753", "createdAt": "2020-07-02T00:45:46Z", "author": {"login": "ajamato"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.CharStreams;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+\n+/** */\n+public class GceMetadataUtil {\n+  private static final String BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\";\n+\n+  static String fetchMetadata(String key) {\n+    int timeoutMillis = 5000;\n+    final HttpParams httpParams = new BasicHttpParams();\n+    HttpConnectionParams.setConnectionTimeout(httpParams, timeoutMillis);\n+    HttpClient client = new DefaultHttpClient(httpParams);\n+    HttpGet request = new HttpGet(BASE_METADATA_URL + key);\n+    request.setHeader(\"Metadata-Flavor\", \"Google\");\n+\n+    try {\n+      HttpResponse response = client.execute(request);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        // May mean its running on a non DataflowRunner, in which case it's perfectly normal.\n+        return \"\";\n+      }\n+      InputStream in = response.getEntity().getContent();\n+      try (final Reader reader = new InputStreamReader(in, Charset.defaultCharset())) {\n+        return CharStreams.toString(reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NDIxNg=="}, "originalCommit": {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3581, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}