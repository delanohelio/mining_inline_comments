{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTY0MDA4", "number": 11397, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTozMzowOFrODw7jbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjowM1rODyKn5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjMzOTY2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTozMzowOFrOGEL2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoxNDo1OVrOGG9hsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg==", "bodyText": "I'm not sure if I can/should make these better.\nIf the channel does not follow Javadoc description and keeps returning 0 without throwing,\nit might have an infinite loop.\nThat might be channel's problem, but not sure if I have to add something like hard limit on the number of retry.", "url": "https://github.com/apache/beam/pull/11397#discussion_r407041552", "createdAt": "2020-04-11T09:33:08Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +715,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }\n+\n+    @VisibleForTesting\n+    static void writeFully(WritableByteChannel channel, ByteBuffer buffer) throws IOException {\n+      while (buffer.hasRemaining()) {\n+        channel.write(buffer);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MjI4MA==", "bodyText": "Or I can make the loop condition stricter since I am pretty sure, within beam, all channels will read/write at least 1 byte.", "url": "https://github.com/apache/beam/pull/11397#discussion_r407042280", "createdAt": "2020-04-11T09:40:47Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +715,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }\n+\n+    @VisibleForTesting\n+    static void writeFully(WritableByteChannel channel, ByteBuffer buffer) throws IOException {\n+      while (buffer.hasRemaining()) {\n+        channel.write(buffer);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg=="}, "originalCommit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTUzMg==", "bodyText": "This will only become a busy loop on async channels but will still make progress successfully. If this becomes an issue, the code can be expanded to correctly handle the busy loop.", "url": "https://github.com/apache/beam/pull/11397#discussion_r408989532", "createdAt": "2020-04-15T16:51:41Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +715,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }\n+\n+    @VisibleForTesting\n+    static void writeFully(WritableByteChannel channel, ByteBuffer buffer) throws IOException {\n+      while (buffer.hasRemaining()) {\n+        channel.write(buffer);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg=="}, "originalCommit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1MjY5MQ==", "bodyText": "Thanks for the confirmation :)", "url": "https://github.com/apache/beam/pull/11397#discussion_r409952691", "createdAt": "2020-04-17T02:14:59Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +715,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }\n+\n+    @VisibleForTesting\n+    static void writeFully(WritableByteChannel channel, ByteBuffer buffer) throws IOException {\n+      while (buffer.hasRemaining()) {\n+        channel.write(buffer);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg=="}, "originalCommit": {"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTI2MDIwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzowMjo1MFrOGGDKqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoxMjo0NFrOGG9few==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjUyMA==", "bodyText": "You want to ensure that the exception is because of having a truncated read so it is useful to check that the message contains a part of what you think it should have such as expected and but got. Check out https://junit.org/junit4/javadoc/4.12/org/junit/rules/ExpectedException.html or anything like it.", "url": "https://github.com/apache/beam/pull/11397#discussion_r408996520", "createdAt": "2020-04-15T17:02:50Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "diffHunk": "@@ -440,4 +456,115 @@ public void processElement(ProcessContext c) {\n       c.output(c.element().getBytes(Charsets.UTF_8));\n     }\n   }\n+\n+  static boolean maybeThisTime() {\n+    return ThreadLocalRandom.current().nextBoolean();\n+  }\n+\n+  static class PickyReadChannel extends FilterInputStream implements ReadableByteChannel {\n+    protected PickyReadChannel(InputStream in) {\n+      super(in);\n+    }\n+\n+    @Override\n+    public int read(byte[] b, int off, int len) {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int read(ByteBuffer dst) throws IOException {\n+      if (!maybeThisTime() || !dst.hasRemaining()) {\n+        return 0;\n+      }\n+      int n = read();\n+      if (n == -1) {\n+        return -1;\n+      }\n+      dst.put((byte) n);\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  static class PickyWriteChannel extends FilterOutputStream implements WritableByteChannel {\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    public PickyWriteChannel(OutputStream out) {\n+      super(out);\n+    }\n+\n+    @Override\n+    public int write(ByteBuffer src) throws IOException {\n+      if (!maybeThisTime() || !src.hasRemaining()) {\n+        return 0;\n+      }\n+      write(src.get());\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  @Test\n+  public void testReadFully() throws IOException {\n+    byte[] data = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n+    ReadableByteChannel chan = new PickyReadChannel(new ByteArrayInputStream(data));\n+\n+    ByteBuffer buffer = ByteBuffer.allocate(data.length);\n+    TFRecordCodec.readFully(chan, buffer);\n+\n+    assertArrayEquals(data, buffer.array());\n+  }\n+\n+  @Test(expected = IOException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1MjEyMw==", "bodyText": "done! changed to use ExpectedExcepton", "url": "https://github.com/apache/beam/pull/11397#discussion_r409952123", "createdAt": "2020-04-17T02:12:44Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "diffHunk": "@@ -440,4 +456,115 @@ public void processElement(ProcessContext c) {\n       c.output(c.element().getBytes(Charsets.UTF_8));\n     }\n   }\n+\n+  static boolean maybeThisTime() {\n+    return ThreadLocalRandom.current().nextBoolean();\n+  }\n+\n+  static class PickyReadChannel extends FilterInputStream implements ReadableByteChannel {\n+    protected PickyReadChannel(InputStream in) {\n+      super(in);\n+    }\n+\n+    @Override\n+    public int read(byte[] b, int off, int len) {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int read(ByteBuffer dst) throws IOException {\n+      if (!maybeThisTime() || !dst.hasRemaining()) {\n+        return 0;\n+      }\n+      int n = read();\n+      if (n == -1) {\n+        return -1;\n+      }\n+      dst.put((byte) n);\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  static class PickyWriteChannel extends FilterOutputStream implements WritableByteChannel {\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    public PickyWriteChannel(OutputStream out) {\n+      super(out);\n+    }\n+\n+    @Override\n+    public int write(ByteBuffer src) throws IOException {\n+      if (!maybeThisTime() || !src.hasRemaining()) {\n+        return 0;\n+      }\n+      write(src.get());\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  @Test\n+  public void testReadFully() throws IOException {\n+    byte[] data = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n+    ReadableByteChannel chan = new PickyReadChannel(new ByteArrayInputStream(data));\n+\n+    ByteBuffer buffer = ByteBuffer.allocate(data.length);\n+    TFRecordCodec.readFully(chan, buffer);\n+\n+    assertArrayEquals(data, buffer.array());\n+  }\n+\n+  @Test(expected = IOException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjUyMA=="}, "originalCommit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTI5NDQ0OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjowM1rOGGDgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjoxMjoxM1rOGG9fFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n          \n          \n            \n                  int n, read = 0;\n          \n          \n            \n                  while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n          \n          \n            \n                    read += n;\n          \n          \n            \n                  }\n          \n          \n            \n                  return read;\n          \n          \n            \n                }\n          \n          \n            \n                private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n          \n          \n            \n                  int expected = bb.remaining();\n          \n          \n            \n                  while (bb.hasRemaining() && in.read(bb) >= 0) {\n          \n          \n            \n                  }\n          \n          \n            \n                  return expected - bb.remaining();\n          \n          \n            \n                }", "url": "https://github.com/apache/beam/pull/11397#discussion_r409002145", "createdAt": "2020-04-15T17:12:03Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +716,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, actual));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1MjAyMQ==", "bodyText": "Done! (spotlessApply forced me to change bracket loc)", "url": "https://github.com/apache/beam/pull/11397#discussion_r409952021", "createdAt": "2020-04-17T02:12:13Z", "author": {"login": "lukemin89"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +716,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, actual));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjE0NQ=="}, "originalCommit": {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1247, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}