{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTMzODY3", "number": 12481, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo1MzozN1rOEV7siw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwODo1NTozOFrOEWjnWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDMzNjExOnYy", "diffSide": "RIGHT", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ValidateRunnerXlangTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo1MzozN1rOG8-MOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0NTowMlrOG8_5Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4NjY4Mw==", "bodyText": "So this is a design decision?\nthis configRow is a Row with a String field and the payload is already a string/byte array. At least in this case it seems that without a scheme that payload can still be constructed back to a Row.\nThe schema looks right in general when payload is not a string/byte array", "url": "https://github.com/apache/beam/pull/12481#discussion_r466586683", "createdAt": "2020-08-06T17:53:37Z", "author": {"login": "amaliujia"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ValidateRunnerXlangTest.java", "diffHunk": "@@ -222,14 +228,21 @@ public void partitionTest() {\n   }\n \n   private byte[] toStringPayloadBytes(String data) throws IOException {\n+    Row configRow =\n+        Row.withSchema(Schema.of(Field.of(\"data\", FieldType.STRING)))\n+            .withFieldValue(\"data\", data)\n+            .build();\n+\n+    ByteString.Output outputStream = ByteString.newOutput();\n+    try {\n+      RowCoder.of(configRow.getSchema()).encode(configRow, outputStream);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n     ExternalTransforms.ExternalConfigurationPayload payload =\n         ExternalTransforms.ExternalConfigurationPayload.newBuilder()\n-            .putConfiguration(\n-                \"data\",\n-                ExternalTransforms.ConfigValue.newBuilder()\n-                    .addCoderUrn(\"beam:coder:string_utf8:v1\")\n-                    .setPayload(ByteString.copyFrom(encodeString(data)))\n-                    .build())\n+            .setSchema(SchemaTranslation.schemaToProto(configRow.getSchema(), false))\n+            .setPayload(outputStream.toByteString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8936db44dff1e889365fd3c676160af24f91f2f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjYzMw==", "bodyText": "This is just mirroring what was there before, which used the old ExternalConfigurationPayload to encode a single field \"data\" with the string_utf8 coder. The equivalent with the new version  of ExternalConfigurationPayload is to encode a single field \"data\" with type STRING.", "url": "https://github.com/apache/beam/pull/12481#discussion_r466592633", "createdAt": "2020-08-06T18:03:54Z", "author": {"login": "TheNeuralBit"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ValidateRunnerXlangTest.java", "diffHunk": "@@ -222,14 +228,21 @@ public void partitionTest() {\n   }\n \n   private byte[] toStringPayloadBytes(String data) throws IOException {\n+    Row configRow =\n+        Row.withSchema(Schema.of(Field.of(\"data\", FieldType.STRING)))\n+            .withFieldValue(\"data\", data)\n+            .build();\n+\n+    ByteString.Output outputStream = ByteString.newOutput();\n+    try {\n+      RowCoder.of(configRow.getSchema()).encode(configRow, outputStream);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n     ExternalTransforms.ExternalConfigurationPayload payload =\n         ExternalTransforms.ExternalConfigurationPayload.newBuilder()\n-            .putConfiguration(\n-                \"data\",\n-                ExternalTransforms.ConfigValue.newBuilder()\n-                    .addCoderUrn(\"beam:coder:string_utf8:v1\")\n-                    .setPayload(ByteString.copyFrom(encodeString(data)))\n-                    .build())\n+            .setSchema(SchemaTranslation.schemaToProto(configRow.getSchema(), false))\n+            .setPayload(outputStream.toByteString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4NjY4Mw=="}, "originalCommit": {"oid": "b8936db44dff1e889365fd3c676160af24f91f2f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNDYzMA==", "bodyText": "Got it. Thanks for clarification.", "url": "https://github.com/apache/beam/pull/12481#discussion_r466614630", "createdAt": "2020-08-06T18:45:02Z", "author": {"login": "amaliujia"}, "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ValidateRunnerXlangTest.java", "diffHunk": "@@ -222,14 +228,21 @@ public void partitionTest() {\n   }\n \n   private byte[] toStringPayloadBytes(String data) throws IOException {\n+    Row configRow =\n+        Row.withSchema(Schema.of(Field.of(\"data\", FieldType.STRING)))\n+            .withFieldValue(\"data\", data)\n+            .build();\n+\n+    ByteString.Output outputStream = ByteString.newOutput();\n+    try {\n+      RowCoder.of(configRow.getSchema()).encode(configRow, outputStream);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n     ExternalTransforms.ExternalConfigurationPayload payload =\n         ExternalTransforms.ExternalConfigurationPayload.newBuilder()\n-            .putConfiguration(\n-                \"data\",\n-                ExternalTransforms.ConfigValue.newBuilder()\n-                    .addCoderUrn(\"beam:coder:string_utf8:v1\")\n-                    .setPayload(ByteString.copyFrom(encodeString(data)))\n-                    .build())\n+            .setSchema(SchemaTranslation.schemaToProto(configRow.getSchema(), false))\n+            .setPayload(outputStream.toByteString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4NjY4Mw=="}, "originalCommit": {"oid": "b8936db44dff1e889365fd3c676160af24f91f2f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDMzNzIwOnYy", "diffSide": "RIGHT", "path": "sdks/java/expansion-service/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo1Mzo1OVrOG8-M_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozOTo1NVrOG8_vHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4Njg3Nw==", "bodyText": "Split this comment to multiple lines?", "url": "https://github.com/apache/beam/pull/12481#discussion_r466586877", "createdAt": "2020-08-06T17:53:59Z", "author": {"login": "amaliujia"}, "path": "sdks/java/expansion-service/build.gradle", "diffHunk": "@@ -44,6 +44,8 @@ dependencies {\n   compile library.java.slf4j_api\n   runtimeOnly library.java.slf4j_jdk14\n   testCompile library.java.junit\n+  // TODO(BEAM-10632): Remove this. Currently Schema inference (used in ExpansionServiceTest) hits an NPE when checker is enabled, and checkerframework is not in the classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8936db44dff1e889365fd3c676160af24f91f2f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMTk5OQ==", "bodyText": "Done, thanks", "url": "https://github.com/apache/beam/pull/12481#discussion_r466611999", "createdAt": "2020-08-06T18:39:55Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/expansion-service/build.gradle", "diffHunk": "@@ -44,6 +44,8 @@ dependencies {\n   compile library.java.slf4j_api\n   runtimeOnly library.java.slf4j_jdk14\n   testCompile library.java.junit\n+  // TODO(BEAM-10632): Remove this. Currently Schema inference (used in ExpansionServiceTest) hits an NPE when checker is enabled, and checkerframework is not in the classpath.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4Njg3Nw=="}, "originalCommit": {"oid": "b8936db44dff1e889365fd3c676160af24f91f2f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDg3NjQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwODo1NTozOFrOG95ZrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwODo1NTozOFrOG95ZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1Njc4MQ==", "bodyText": "Comment should be updated (no byte arrays anymore).", "url": "https://github.com/apache/beam/pull/12481#discussion_r467556781", "createdAt": "2020-08-09T08:55:38Z", "author": {"login": "mxm"}, "path": "sdks/java/io/kafka/src/main/java/org/apache/beam/sdk/io/kafka/KafkaIO.java", "diffHunk": "@@ -1452,12 +1446,12 @@ public void populateDisplayData(DisplayData.Builder builder) {\n       public static class Configuration {\n \n         // All byte arrays are UTF-8 encoded strings\n-        private Iterable<KV<String, String>> producerConfig;\n+        private Map<String, String> producerConfig;\n         private String topic;\n         private String keySerializer;\n         private String valueSerializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee80c8d67734e21f83d46ca01819e482ca8e6cf"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 843, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}