{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4ODM2Nzcz", "number": 12420, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo0MzozOFrOET4Zag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozMjoxMVrOEW_6-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjgyNDEwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/stats.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo0MzozOFrOG53cJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDoyOToyNFrOG_NsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMDM0Mw==", "bodyText": "Can we add weighted as the last argument? So we'll have a change that's backwards compatible", "url": "https://github.com/apache/beam/pull/12420#discussion_r463330343", "createdAt": "2020-07-30T23:43:38Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.\n       key: (optional) Key is  a mapping of elements to a comparable key, similar\n         to the key argument of Python's sorting methods.\n       reverse: (optional) whether to order things smallest to largest, rather\n         than largest to smallest\n     \"\"\"\n-    def __init__(self, num_quantiles, key=None, reverse=False):\n+    def __init__(self, num_quantiles, weighted=False, key=None, reverse=False):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzczMg==", "bodyText": "Ah, yes, of course.", "url": "https://github.com/apache/beam/pull/12420#discussion_r468937732", "createdAt": "2020-08-12T00:29:24Z", "author": {"login": "iindyk"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.\n       key: (optional) Key is  a mapping of elements to a comparable key, similar\n         to the key argument of Python's sorting methods.\n       reverse: (optional) whether to order things smallest to largest, rather\n         than largest to smallest\n     \"\"\"\n-    def __init__(self, num_quantiles, key=None, reverse=False):\n+    def __init__(self, num_quantiles, weighted=False, key=None, reverse=False):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMDM0Mw=="}, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjgzMjk4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/stats.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo0ODowOVrOG53hVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDoyOTozOVrOG_NsPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMTY2OA==", "bodyText": "I don't know much math, so I wonder: How come the error bound for the approximation for weighted elements is not f(N)?", "url": "https://github.com/apache/beam/pull/12420#discussion_r463331668", "createdAt": "2020-07-30T23:48:09Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -398,8 +424,8 @@ class ApproximateQuantilesCombineFn(CombineFn):\n   http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.6.6513&rep=rep1\n   &type=pdf\n \n-  The default error bound is (1 / N), though in practice the accuracy\n-  tends to be much better.\n+  The default error bound is (1 / N) for uniformly distributed data and 1e-2 for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzc4OA==", "bodyText": "I think N rarely exceeds 100 and most of the time is <10, so I changed to 1e-2 to increase accuracy for the weighted case. This was done to reflect the fact that, although we guarantee this error bound, the bound itself is on the weight concentrated between the returned value and the actual quantile. If the weights are uneven, then there may potentially be a lot of values between those.\nBut looking at it again, I think you're right and it would make more sense to set it to min(1e-2, 1/N).", "url": "https://github.com/apache/beam/pull/12420#discussion_r468937788", "createdAt": "2020-08-12T00:29:39Z", "author": {"login": "iindyk"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -398,8 +424,8 @@ class ApproximateQuantilesCombineFn(CombineFn):\n   http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.6.6513&rep=rep1\n   &type=pdf\n \n-  The default error bound is (1 / N), though in practice the accuracy\n-  tends to be much better.\n+  The default error bound is (1 / N) for uniformly distributed data and 1e-2 for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMTY2OA=="}, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDM2NjI1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/stats.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoyNjozMFrOG-YReg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDoyOTo1MlrOG_Nscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjU4Ng==", "bodyText": "Perhaps show an example of this in a code snippet?", "url": "https://github.com/apache/beam/pull/12420#discussion_r468062586", "createdAt": "2020-08-10T17:26:30Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MzAzNg==", "bodyText": "Perhaps under the ApproximateQuantiles transform pydoc, rather than on these args (so it'll work for perKey and globally)? Up to you.", "url": "https://github.com/apache/beam/pull/12420#discussion_r468063036", "createdAt": "2020-08-10T17:27:15Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjU4Ng=="}, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzg0Mg==", "bodyText": "Done. Although I wasn't able to find a pattern for examples (like for DocTest). Let me know if I should change the format", "url": "https://github.com/apache/beam/pull/12420#discussion_r468937842", "createdAt": "2020-08-12T00:29:52Z", "author": {"login": "iindyk"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjU4Ng=="}, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUxNDE5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/transforms/stats.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozMjoxMVrOG-jMmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDozMDowOVrOG_NsxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MTU2MQ==", "bodyText": "I wonder if it's possible to do this without duplicating the code in both branches? I understand that separating branches may help performance, but it decreases on readability...  WDYT?", "url": "https://github.com/apache/beam/pull/12420#discussion_r468241561", "createdAt": "2020-08-10T23:32:11Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -576,17 +633,34 @@ def _interpolate(self, i_buffers, count, step, offset):\n     weighted_element = next(sorted_elem)\n     current = weighted_element[1]\n     j = 0\n-    while j < count:\n-      target = j * step + offset\n-      j = j + 1\n-      try:\n-        while current <= target:\n-          weighted_element = next(sorted_elem)\n-          current = current + weighted_element[1]\n-      except StopIteration:\n-        pass\n-      new_elements.append(weighted_element[0])\n-    return new_elements\n+    if self._weighted:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzNzkyNA==", "bodyText": "I tried to avoid affecting the performance of the existing codepath, but after a closer look I think the overhead caused by the if in the loop is negligible compared to the time taken by the inner loop and append. Merged the branches.", "url": "https://github.com/apache/beam/pull/12420#discussion_r468937924", "createdAt": "2020-08-12T00:30:09Z", "author": {"login": "iindyk"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -576,17 +633,34 @@ def _interpolate(self, i_buffers, count, step, offset):\n     weighted_element = next(sorted_elem)\n     current = weighted_element[1]\n     j = 0\n-    while j < count:\n-      target = j * step + offset\n-      j = j + 1\n-      try:\n-        while current <= target:\n-          weighted_element = next(sorted_elem)\n-          current = current + weighted_element[1]\n-      except StopIteration:\n-        pass\n-      new_elements.append(weighted_element[0])\n-    return new_elements\n+    if self._weighted:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MTU2MQ=="}, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 340}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 744, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}