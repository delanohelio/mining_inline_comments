{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Mjg0Mzky", "number": 12009, "title": "[BEAM-10258] Support type hint annotations on PTransform's expand()", "bodyText": "This PR provides support for type hint annotations for PCollections in the expand function of PTransforms.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-15T04:50:43Z", "url": "https://github.com/apache/beam/pull/12009", "merged": true, "mergeCommit": {"oid": "277832ee9e5084e10434b22eb724042d999bea1c"}, "closed": true, "closedAt": "2020-08-06T16:45:34Z", "author": {"login": "saavannanavati"}, "timelineItems": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr4nezAFqTQzMTcxMzc5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8IZcNAH2gAyNDM0Mjg0MzkyOjNjMDFiZmQwNWU0NGMyNDQyNzAxZjc1MjJmYzU2NGQ1YjVhYjRkN2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzEzNzkx", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-431713791", "createdAt": "2020-06-16T17:01:34Z", "commit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMTozNFrOGkk2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxNzo1M1rOGkla_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNTY0MQ==", "bodyText": "Please stay consistent with existing code: one import per line.", "url": "https://github.com/apache/beam/pull/12009#discussion_r441005641", "createdAt": "2020-06-16T17:01:34Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/transforms/ptransform.py", "diffHunk": "@@ -72,7 +72,7 @@ class and wrapper class that allows lambda functions to be used as\n from apache_beam.transforms.display import HasDisplayData\n from apache_beam.typehints import native_type_compatibility\n from apache_beam.typehints import typehints\n-from apache_beam.typehints.decorators import TypeCheckError\n+from apache_beam.typehints.decorators import TypeCheckError, IOTypeHints, get_type_hints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwOTAyMQ==", "bodyText": "I would really prefer it if all type constraint classes were in the same module (typehints).", "url": "https://github.com/apache/beam/pull/12009#discussion_r441009021", "createdAt": "2020-06-16T17:07:25Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -158,6 +159,20 @@ def __ne__(self, other):\n   def __hash__(self):\n     return hash((self.tag, self.producer))\n \n+  class PCollectionTypeConstraint(SequenceTypeConstraint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzgxOQ==", "bodyText": "This should stay Generic[T], as it provides the same [] functionality but is understood by tools like mypy and is familiar to Python users.", "url": "https://github.com/apache/beam/pull/12009#discussion_r441013819", "createdAt": "2020-06-16T17:15:50Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -141,7 +142,7 @@ def __or__(self, ptransform):\n     return self.pipeline.apply(ptransform, self)\n \n \n-class PCollection(PValue, Generic[T]):\n+class PCollection(PValue, CompositeTypeHint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTAzOQ==", "bodyText": "Are these whitespace changes coming from yapf? This particularly seems to have moved the comment to the line above it.", "url": "https://github.com/apache/beam/pull/12009#discussion_r441015039", "createdAt": "2020-06-16T17:17:53Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -425,8 +441,7 @@ def _from_runtime_iterable(it, options):\n \n   def _view_options(self):\n     return {\n-        'data': self._data,\n-        # For non-fn-api runners.\n+        'data': self._data,  # For non-fn-api runners.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80461081778450e887db6ea97a127f1db34c751e"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0Mzc0OTM2", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-434374936", "createdAt": "2020-06-19T23:04:13Z", "commit": {"oid": "b890ed5a625cfc6c777ee4ef8daef6e1bc05f04e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMzowNDoxNFrOGmjB6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMzowNDoxNFrOGmjB6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3MzAwMA==", "bodyText": "I believe this method is unnecessary, since Generic[T] implements something similar. You can can inspect a PCollection to get its arguments.\nFor example:\n>>> import typing\n>>> T = typing.TypeVar('T')\n>>> class A(typing.Generic[T]):\n...   pass\n... \n>>> A[int].__args__\n(<class 'int'>,)", "url": "https://github.com/apache/beam/pull/12009#discussion_r443073000", "createdAt": "2020-06-19T23:04:14Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -158,6 +158,10 @@ def __ne__(self, other):\n   def __hash__(self):\n     return hash((self.tag, self.producer))\n \n+  def __class_getitem__(cls, type_param):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b890ed5a625cfc6c777ee4ef8daef6e1bc05f04e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDk2NDM4", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-437096438", "createdAt": "2020-06-25T00:40:33Z", "commit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0MDozNFrOGonrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjoyODoxMFrOGopUiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjI1MA==", "bodyText": "Did you mean to leave this test here? It looks like a copy of the one in AnnotationsTest.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445246250", "createdAt": "2020-06-25T00:40:34Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -40,6 +40,14 @@ def process(self, element: int) -> typehints.Tuple[str]:\n     with self.assertRaisesRegex(typehints.TypeCheckError,\n                                 r'requires.*int.*got.*str'):\n       _ = ['a', 'b', 'c'] | beam.ParDo(MyDoFn())\n+  def test_pardo_dofn(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NzUxMQ==", "bodyText": "There is no need to assert that no exceptions are raised. The test will already fail if exceptions are raised.\nIf I need to be explicit I usually put a comment above the line that shouldn't fail.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445247511", "createdAt": "2020-06-25T00:45:26Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -257,6 +265,65 @@ def fn2(element: int) -> int:\n     result = [1, 2, 3] | beam.FlatMap(fn) | beam.Map(fn2)\n     self.assertCountEqual([4, 6], result)\n \n+  def test_typed_ptransform_with_no_error(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[int]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    try:\n+      _ = ['1', '2', '3'] | StrToInt() | IntToStr()\n+    except Exception:\n+      self.fail('An unexpected error was raised during a pipeline with correct typehints.')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0ODUxNA==", "bodyText": "Please use with self.assertRaisesRegex(..) above instead of separately checking the exception text.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445248514", "createdAt": "2020-06-25T00:49:37Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -257,6 +265,65 @@ def fn2(element: int) -> int:\n     result = [1, 2, 3] | beam.FlatMap(fn) | beam.Map(fn2)\n     self.assertCountEqual([4, 6], result)\n \n+  def test_typed_ptransform_with_no_error(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[int]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    try:\n+      _ = ['1', '2', '3'] | StrToInt() | IntToStr()\n+    except Exception:\n+      self.fail('An unexpected error was raised during a pipeline with correct typehints.')\n+\n+  def test_typed_ptransform_with_bad_typehints(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    with self.assertRaises(typehints.TypeCheckError) as error:\n+      # raises error because of mismatched typehints between StrToInt and IntToStr\n+      _ = ['1', '2', '3'] | StrToInt() | IntToStr()\n+\n+    self.assertTrue(\"Input type hint violation at IntToStr: expected <class 'str'>, got <class 'int'>\" in str(error.exception))\n+\n+  def test_typed_ptransform_with_bad_input(self):\n+    class StrToInt(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[str]) -> beam.pvalue.PCollection[int]:\n+        return pcoll | beam.Map(lambda x: int(x))\n+\n+    class IntToStr(beam.PTransform):\n+      def expand(self, pcoll: beam.pvalue.PCollection[int]) -> beam.pvalue.PCollection[str]:\n+        return pcoll | beam.Map(lambda x: str(x))\n+\n+    with self.assertRaises(typehints.TypeCheckError) as error:\n+      # Feed integers to a PTransform that expects strings\n+      _ = [1, 2, 3] | StrToInt() | IntToStr()\n+\n+    self.assertTrue(\"Input type hint violation at StrToInt: expected <class 'str'>, got <class 'int'>\" in str(error.exception))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2Mzg0OA==", "bodyText": "This is valid. The type hint should convert to Any.\nQuoting from https://docs.python.org/3/library/typing.html:\n\nUsing a generic class without specifying type parameters assumes Any for each position.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445263848", "createdAt": "2020-06-25T01:49:49Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,61 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    with self.assertRaises(TypeCheckError) as error:\n+      _th = MyPTransform().get_type_hints()\n+\n+    self.assertEqual(str(error.exception), 'An input typehint to a PTransform must be a single (or nested) type '\n+                                           'wrapped by a PCollection.')\n+\n+  def test_annotations_without_internal_type(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection) -> PCollection:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzEzOA==", "bodyText": "Please handle cases where self.input_types is None or the number of arguments is not 1.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445267138", "createdAt": "2020-06-25T02:02:44Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,43 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    input_type = self.input_types[0][0]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzI3MQ==", "bodyText": "As a general rule, don't catch all exceptions but only the ones you expect to be raised.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445267271", "createdAt": "2020-06-25T02:03:21Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,43 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    input_type = self.input_types[0][0]\n+    if isinstance(input_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    try:\n+      input_type = input_type.__args__[0]\n+    except:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODA2MQ==", "bodyText": "Bad merge?", "url": "https://github.com/apache/beam/pull/12009#discussion_r445268061", "createdAt": "2020-06-25T02:06:43Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/transforms/ptransform.py", "diffHunk": "@@ -616,24 +627,14 @@ def register_urn(\n     # type: (...) -> Callable[[Union[type, Callable[[beam_runner_api_pb2.PTransform, T, PipelineContext], Any]]], Callable[[T, PipelineContext], Any]]\n     pass\n \n-  @classmethod\n-  @overload\n-  def register_urn(\n-      cls,\n-      urn,  # type: str\n-      parameter_type,  # type: None\n-  ):\n-    # type: (...) -> Callable[[Union[type, Callable[[beam_runner_api_pb2.PTransform, bytes, PipelineContext], Any]]], Callable[[bytes, PipelineContext], Any]]\n-    pass\n-\n   @classmethod\n   @overload\n   def register_urn(cls,\n                    urn,  # type: str\n                    parameter_type,  # type: Type[T]\n                    constructor  # type: Callable[[beam_runner_api_pb2.PTransform, T, PipelineContext], Any]\n                   ):\n-    # type: (...) -> None\n+    # type: (...) -> Callable[[Union[type, Callable[[beam_runner_api_pb2.PTransform, bytes, PipelineContext], Any]]], Callable[[bytes, PipelineContext], Any]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODI2MQ==", "bodyText": "You can chain the 2 function calls.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445268261", "createdAt": "2020-06-25T02:07:29Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/transforms/ptransform.py", "diffHunk": "@@ -364,6 +366,15 @@ def default_label(self):\n     # type: () -> str\n     return self.__class__.__name__\n \n+  def default_type_hints(self):\n+    fn_type_hints = IOTypeHints.from_callable(self.expand)\n+    if fn_type_hints is not None:\n+      fn_type_hints = fn_type_hints.strip_pcoll_input()\n+      fn_type_hints = fn_type_hints.strip_pcoll_output()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODY1Mg==", "bodyText": "Or perhaps this was also a git merge result", "url": "https://github.com/apache/beam/pull/12009#discussion_r445268652", "createdAt": "2020-06-25T02:09:01Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typed_pipeline_test_py3.py", "diffHunk": "@@ -40,6 +40,14 @@ def process(self, element: int) -> typehints.Tuple[str]:\n     with self.assertRaisesRegex(typehints.TypeCheckError,\n                                 r'requires.*int.*got.*str'):\n       _ = ['a', 'b', 'c'] | beam.ParDo(MyDoFn())\n+  def test_pardo_dofn(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjI1MA=="}, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2OTEwMA==", "bodyText": "Also test when the output typehint is unsupported.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445269100", "createdAt": "2020-06-25T02:10:53Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,61 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    with self.assertRaises(TypeCheckError) as error:\n+      _th = MyPTransform().get_type_hints()\n+\n+    self.assertEqual(str(error.exception), 'An input typehint to a PTransform must be a single (or nested) type '", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3MzIyNA==", "bodyText": "Also verify that input_type is a PCollection or PBegin.\nPCollection or PDone for output type", "url": "https://github.com/apache/beam/pull/12009#discussion_r445273224", "createdAt": "2020-06-25T02:28:10Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,43 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    input_type = self.input_types[0][0]\n+    if isinstance(input_type, typehints.AnyTypeConstraint):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1e38e353d3bf4f7c924be47734d331671e72f1"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a81f57fdb2e6f8e8cb8a0de63a28cc49d0138a31", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a81f57fdb2e6f8e8cb8a0de63a28cc49d0138a31", "committedDate": "2020-06-25T22:00:18Z", "message": "Support PDone, PBegin, and handle None error cases"}, "afterCommit": {"oid": "5ba396ba9f0389f708e3f71ff62289a0de3a25d1", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/5ba396ba9f0389f708e3f71ff62289a0de3a25d1", "committedDate": "2020-06-25T22:04:34Z", "message": "Support PDone, PBegin, and better handling of error cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTAwMjk1", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-437900295", "createdAt": "2020-06-25T22:24:05Z", "commit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoyNDowNVrOGpN2pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoyNDowNVrOGpN2pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3MTc4MA==", "bodyText": "Any idea why this test is failing? It says the strings don't match in stdout but they appear to match.", "url": "https://github.com/apache/beam/pull/12009#discussion_r445871780", "createdAt": "2020-06-25T22:24:05Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/typehints_test_py3.py", "diffHunk": "@@ -46,11 +51,59 @@ class MyDoFn(DoFn):\n       def process(self, element: int) -> Iterable[str]:\n         pass\n \n-    print(MyDoFn().get_type_hints())\n     th = MyDoFn().get_type_hints()\n     self.assertEqual(th.input_types, ((int, ), {}))\n     self.assertEqual(th.output_types, ((str, ), {}))\n \n \n+class TestPTransformAnnotations(unittest.TestCase):\n+  def test_pep484_annotations(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: PCollection[int]) -> PCollection[str]:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    th = MyPTransform().get_type_hints()\n+    self.assertEqual(th.input_types, ((int, ), {}))\n+    self.assertEqual(th.output_types, ((str, ), {}))\n+\n+  def test_annotations_without_pcollection_wrapper(self):\n+    class MyPTransform(PTransform):\n+      def expand(self, pcoll: int) -> str:\n+        return pcoll | Map(lambda num: str(num))\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or PBegin. '\n+\n+    with self.assertRaisesRegex(TypeCheckError, error_str):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTA2NzMx", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-437906731", "createdAt": "2020-06-25T22:39:42Z", "commit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjozOTo0M1rOGpOLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjozOTo0M1rOGpOLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NzA1MA==", "bodyText": "Now that I think about it this can be a simple try/catch IndexError instead of manually checking for None", "url": "https://github.com/apache/beam/pull/12009#discussion_r445877050", "createdAt": "2020-06-25T22:39:43Z", "author": {"login": "saavannanavati"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,61 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or ' \\\n+                'PBegin. '\n+\n+    if any(element is None for element in [self.input_types, self.input_types[0], self.input_types[0][0]]):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5f42ba7be0e6269ae40499c6066f8f95cf028e0", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/c5f42ba7be0e6269ae40499c6066f8f95cf028e0", "committedDate": "2020-06-26T18:51:56Z", "message": "Refactors strip_pcoll_input() and strip_pcoll_output() to a shared function"}, "afterCommit": {"oid": "9de4a722a21182601d2d9a2c032f02d010e83ff2", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/9de4a722a21182601d2d9a2c032f02d010e83ff2", "committedDate": "2020-06-26T18:55:29Z", "message": "Refactors strip_pcoll_input() and strip_pcoll_output() to a shared function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzQ4ODQz", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-444348843", "createdAt": "2020-07-08T01:14:51Z", "commit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToxNDo1MVrOGuUvZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjowNDowN1rOGuVgqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw==", "bodyText": "@robertwb are PBegin and PDone part of the public API?", "url": "https://github.com/apache/beam/pull/12009#discussion_r451227493", "createdAt": "2020-07-08T01:14:51Z", "author": {"login": "udim"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyODA0MA==", "bodyText": "PBegin and Done do not contain elements like a PCollection. I think of them as placeholders for transforms that don't have inputs or outputs, respectively.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451228040", "createdAt": "2020-07-08T01:17:08Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -222,7 +222,7 @@ class _InvalidUnpickledPCollection(object):\n   pass\n \n \n-class PBegin(PValue):\n+class PBegin(PValue, Generic[T]):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMDg2MQ==", "bodyText": "It does support short-circuiting, but the list [self.input_types, self.input_types[0], self.input_types[0][0]] is first completely evaluated.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451230861", "createdAt": "2020-07-08T01:28:01Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,61 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll_input(self):\n+    # type: () -> IOTypeHints\n+\n+    error_str = 'An input typehint to a PTransform must be a single (or nested) type wrapped by a PCollection or ' \\\n+                'PBegin. '\n+\n+    if any(element is None for element in [self.input_types, self.input_types[0], self.input_types[0][0]]):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NzA1MA=="}, "originalCommit": {"oid": "e3baf2aaf40475c0747f6eb4273f5d6f9153a6d3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzE5Mw==", "bodyText": "Are string representations necessary here? We typically don't compare by string.\nYou can also write if not isinstance(my_type, valid_classes).", "url": "https://github.com/apache/beam/pull/12009#discussion_r451233193", "createdAt": "2020-07-08T01:37:15Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,56 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   {'input_types': None},\n+                                   ['apache_beam.pvalue.PBegin'],\n+                                   'An input typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   {'output_types': None},\n+                                   ['apache_beam.pvalue.PDone'],\n+                                   'An output typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PDone. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      kwarg_dict,         # type: Dict[str, any]\n+      my_valid_classes,   # type: List[str]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+\n+    if not has_my_type() or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    valid_classes = ['apache_beam.pvalue.PCollection'] + my_valid_classes\n+\n+    if not any(valid_class in str(my_type) for valid_class in valid_classes):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDY1Nw==", "bodyText": "The next(iter(kwarg_dict)) call hard to read. Since there is only one item in the dict, you could pass the key instead and create the dictionary below.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451234657", "createdAt": "2020-07-08T01:42:55Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +378,56 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   {'input_types': None},\n+                                   ['apache_beam.pvalue.PBegin'],\n+                                   'An input typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   {'output_types': None},\n+                                   ['apache_beam.pvalue.PDone'],\n+                                   'An output typehint to a PTransform must be'\n+                                   ' a single (or nested) type wrapped by '\n+                                   'a PCollection or PDone. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      kwarg_dict,         # type: Dict[str, any]\n+      my_valid_classes,   # type: List[str]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+\n+    if not has_my_type() or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    valid_classes = ['apache_beam.pvalue.PCollection'] + my_valid_classes\n+\n+    if not any(valid_class in str(my_type) for valid_class in valid_classes):\n+      raise TypeCheckError(error_str)\n+\n+    if not hasattr(my_type, '__args__'):  # e.g. PCollection\n+      kwarg_dict[next(iter(kwarg_dict))] = ((typehints.Any, ), {})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MDEwNg==", "bodyText": "I think this line was not updated to use IntToStr.", "url": "https://github.com/apache/beam/pull/12009#discussion_r451240106", "createdAt": "2020-07-08T02:04:07Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/examples/snippets/snippets_test_py3.py", "diffHunk": "@@ -96,6 +96,18 @@ def my_fn(element: int) -> str:\n       ids = numbers | 'to_id' >> beam.Map(my_fn)\n       # [END type_hints_map_annotations]\n \n+    # Example using an annotated PTransform.\n+    with self.assertRaises(typehints.TypeCheckError):\n+      # [START type_hints_ptransforms]\n+      from apache_beam.pvalue import PCollection\n+\n+      class IntToStr(beam.PTransform):\n+        def expand(pcoll: PCollection[int]) -> PCollection[str]:\n+          return pcoll | beam.Map(lambda elem: str(elem))\n+\n+      ids = numbers | 'convert to str' >> beam.Map(my_fn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e451941b5c4ed2c42fdef72227598578b532f3"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4df77b9e099f458c5a5230d2ad46b83f5385c8f1", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/4df77b9e099f458c5a5230d2ad46b83f5385c8f1", "committedDate": "2020-07-16T20:53:56Z", "message": "Use classes instead of strings during typecheck, and add tests"}, "afterCommit": {"oid": "ec772c17c5592963f4ddbb592084aaf316e55a11", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/ec772c17c5592963f4ddbb592084aaf316e55a11", "committedDate": "2020-07-16T22:08:58Z", "message": "Use classes instead of strings during typecheck, and add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68f16f84b44a02870a470882ef06587c9a632b97", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/68f16f84b44a02870a470882ef06587c9a632b97", "committedDate": "2020-07-21T19:09:12Z", "message": "Add back accidentally removed test"}, "afterCommit": {"oid": "3a1572c38b2122834302024e9cedcea1f660d243", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3a1572c38b2122834302024e9cedcea1f660d243", "committedDate": "2020-07-21T19:10:14Z", "message": "Add back accidentally removed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "047a0a088aaf1ffcb3078584c3e3ce086be01f18", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/047a0a088aaf1ffcb3078584c3e3ce086be01f18", "committedDate": "2020-07-21T23:35:58Z", "message": "[BEAM-10258] Support type hint annotations on PTransform's expand()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0826bb3ed72f54330a50fb09222071dd79d8dfb5", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0826bb3ed72f54330a50fb09222071dd79d8dfb5", "committedDate": "2020-07-21T23:35:58Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27983088c5b0ccb351089b7e4c69161e7aae79e8", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/27983088c5b0ccb351089b7e4c69161e7aae79e8", "committedDate": "2020-07-21T23:35:58Z", "message": "Moving PCollectionTypeConstraint to typehints.py"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34233493c482cf7c7155ab844da1006b5faf7357", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/34233493c482cf7c7155ab844da1006b5faf7357", "committedDate": "2020-07-21T23:35:58Z", "message": "Uses Generic[T] instead of PCollectionTypeConstraint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54d587bcee6ad620383cccff641252d8208839aa", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/54d587bcee6ad620383cccff641252d8208839aa", "committedDate": "2020-07-21T23:35:58Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e35eb3b19997431608f4cd915e0e11ec6046eee7", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e35eb3b19997431608f4cd915e0e11ec6046eee7", "committedDate": "2020-07-21T23:35:58Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2db8a3af3b95809f812c593720f95bdbefe678c", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/f2db8a3af3b95809f812c593720f95bdbefe678c", "committedDate": "2020-07-21T23:35:58Z", "message": "Force user to wrap typehints in PCollections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96a2aab52ca110273df5b469ecfc0b46a33bfb90", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/96a2aab52ca110273df5b469ecfc0b46a33bfb90", "committedDate": "2020-07-21T23:35:58Z", "message": "Add unit tests for various usages of typehints on PTransforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35dd79e74ef37a398269e5e87c74b9317354da0a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/35dd79e74ef37a398269e5e87c74b9317354da0a", "committedDate": "2020-07-21T23:35:58Z", "message": "Add tests that use typehints on real pipelines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a67cc60e6da0bc8b5176da87c2b2e90e00fb12b", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/9a67cc60e6da0bc8b5176da87c2b2e90e00fb12b", "committedDate": "2020-07-21T23:35:58Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c51343f3d3c40ec023080b6420a0a6d1575830", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/59c51343f3d3c40ec023080b6420a0a6d1575830", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix bad merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a511450b028fbea183c887e6ea26e95b0386e4", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a3a511450b028fbea183c887e6ea26e95b0386e4", "committedDate": "2020-07-21T23:35:58Z", "message": "Support PDone, PBegin, and better handling of error cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90a93357e46977b8fffe44ea99a68d21c8302c5b", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/90a93357e46977b8fffe44ea99a68d21c8302c5b", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix test syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1143587996ef6b0cba81aca651d4a5e7f92e84c9", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/1143587996ef6b0cba81aca651d4a5e7f92e84c9", "committedDate": "2020-07-21T23:35:58Z", "message": "Refactors strip_pcoll_input() and strip_pcoll_output() to a shared function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eafcdd1d35fdb8808f93032a9e4cc0f0c3d8ec85", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/eafcdd1d35fdb8808f93032a9e4cc0f0c3d8ec85", "committedDate": "2020-07-21T23:35:58Z", "message": "Add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913197f0921bc100cf03e70d200cdfbe862f2f7b", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/913197f0921bc100cf03e70d200cdfbe862f2f7b", "committedDate": "2020-07-21T23:35:58Z", "message": "Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8196c151b346dc42717845a73a35530176d38062", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/8196c151b346dc42717845a73a35530176d38062", "committedDate": "2020-07-21T23:35:58Z", "message": "Add website documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3532abfbd871b290246b9cfa0bd3b4ed6ca771eb", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3532abfbd871b290246b9cfa0bd3b4ed6ca771eb", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix linting issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c443369a1b557e28188021cfddf568866a0334", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/63c443369a1b557e28188021cfddf568866a0334", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix linting issue by using multi-line function annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3535ee0a1aa11ac3a27a064622de688a27373cbf", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3535ee0a1aa11ac3a27a064622de688a27373cbf", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix more lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d0e2b63b6660d43613a234187eb16a6c23ec76", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/33d0e2b63b6660d43613a234187eb16a6c23ec76", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix import order, and other changes for PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "689c792581095284529c7829870fcbdcee328266", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/689c792581095284529c7829870fcbdcee328266", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix ungrouped-imports error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fb01eb1d4ace0e5b9dfc4773536169a24cdde34", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/9fb01eb1d4ace0e5b9dfc4773536169a24cdde34", "committedDate": "2020-07-21T23:35:58Z", "message": "Alphabetically order the imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "437c83b1b240598a214d08f46a645e1eeab89c99", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/437c83b1b240598a214d08f46a645e1eeab89c99", "committedDate": "2020-07-21T23:35:58Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54fd032c0fbf680ce54a6d2018bfbed1ad68e576", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/54fd032c0fbf680ce54a6d2018bfbed1ad68e576", "committedDate": "2020-07-21T23:35:58Z", "message": "Fixes a bug where a type can have an empty __args__ attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "725ba0848ed478bcf3f987841b7a45fe699393ec", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/725ba0848ed478bcf3f987841b7a45fe699393ec", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix bug in website snippet code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5ecd01aa54ecf45c226bb556d7448b821a259df", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/e5ecd01aa54ecf45c226bb556d7448b821a259df", "committedDate": "2020-07-21T23:35:58Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9469a5d771f0f2053f2022575fade9914e525ece", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/9469a5d771f0f2053f2022575fade9914e525ece", "committedDate": "2020-07-21T23:35:58Z", "message": "Fixup: apply YAPF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd080160f2bae20772cb071a42bb0cf72a6bfe6", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/4cd080160f2bae20772cb071a42bb0cf72a6bfe6", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix NoneType error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42454da466e5bb13719071d23e5c6d1b533a29e6", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/42454da466e5bb13719071d23e5c6d1b533a29e6", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix NoneType error part 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17c30a65ccb2407f6d97f0ae7cca0b4f1878a7f9", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/17c30a65ccb2407f6d97f0ae7cca0b4f1878a7f9", "committedDate": "2020-07-21T23:35:58Z", "message": "Use classes instead of strings during typecheck, and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27cb6f3cdb8f563850e3f380b2ac795cc0614fa7", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/27cb6f3cdb8f563850e3f380b2ac795cc0614fa7", "committedDate": "2020-07-21T23:35:58Z", "message": "Resolve circular import error and fix readability issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c36eefebd176e14acf183b3188df9db7d06f4af1", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/c36eefebd176e14acf183b3188df9db7d06f4af1", "committedDate": "2020-07-21T23:35:58Z", "message": "Fix lint errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e6f19e438464fd34fa89a946f9c4f74a78315f1", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0e6f19e438464fd34fa89a946f9c4f74a78315f1", "committedDate": "2020-07-21T23:35:58Z", "message": "Add back accidentally removed test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a1572c38b2122834302024e9cedcea1f660d243", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3a1572c38b2122834302024e9cedcea1f660d243", "committedDate": "2020-07-21T19:10:14Z", "message": "Add back accidentally removed test"}, "afterCommit": {"oid": "0e6f19e438464fd34fa89a946f9c4f74a78315f1", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/0e6f19e438464fd34fa89a946f9c4f74a78315f1", "committedDate": "2020-07-21T23:35:58Z", "message": "Add back accidentally removed test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzk4OTky", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-453798992", "createdAt": "2020-07-23T02:09:22Z", "commit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjowOToyMlrOG16H6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjowOToyMlrOG16H6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MDAwOA==", "bodyText": "Please also accept None wherever PDone is accepted, so as to not break existing pipelines.", "url": "https://github.com/apache/beam/pull/12009#discussion_r459180008", "createdAt": "2020-07-23T02:09:22Z", "author": {"login": "udim"}, "path": "website/www/site/content/en/documentation/sdks/python-type-safety.md", "diffHunk": "@@ -90,6 +91,15 @@ The following code declares an `int` input and a `str` output type hint on the `\n {{< code_sample \"sdks/python/apache_beam/examples/snippets/snippets_test_py3.py\" type_hints_map_annotations >}}\n {{< /highlight >}}\n \n+The following code demonstrates how to use annotations on `PTransform` subclasses. \n+A valid annotation is a `PCollection`, `PBegin`, or `PDone` that wraps an internal (nested) type. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNzQ5Mw=="}, "originalCommit": {"oid": "b3dbe65f13b6a9894f1b7bf7dab49c08502e200f"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82c6f4c5d3d30676716f106e887be6bb12038998", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/82c6f4c5d3d30676716f106e887be6bb12038998", "committedDate": "2020-07-27T19:27:48Z", "message": "Support None as an output annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTQyOTE5", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-456142919", "createdAt": "2020-07-27T21:18:48Z", "commit": {"oid": "82c6f4c5d3d30676716f106e887be6bb12038998"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MjY4Mzg1", "url": "https://github.com/apache/beam/pull/12009#pullrequestreview-456268385", "createdAt": "2020-07-28T02:57:47Z", "commit": {"oid": "82c6f4c5d3d30676716f106e887be6bb12038998"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1Nzo0N1rOG36x3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1Nzo0N1rOG36x3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NzkwMw==", "bodyText": "Nit: This error message doesn't say what the incorrect type was. Ex:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  raise TypeCheckError(error_str)\n          \n          \n            \n                  raise TypeCheckError(error_str + ' Got: %s' % my_type)", "url": "https://github.com/apache/beam/pull/12009#discussion_r461287903", "createdAt": "2020-07-28T02:57:47Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -378,6 +379,67 @@ def has_simple_output_type(self):\n         self.output_types and len(self.output_types[0]) == 1 and\n         not self.output_types[1])\n \n+  def strip_pcoll(self):\n+    from apache_beam.pvalue import PBegin\n+    from apache_beam.pvalue import PDone\n+\n+    return self.strip_pcoll_helper(self.input_types,\n+                                   self._has_input_types,\n+                                   'input_types',\n+                                    [PBegin],\n+                                   'An input typehint to a PTransform must be '\n+                                   'a single (or nested) type wrapped by '\n+                                   'a PCollection or PBegin. ',\n+                                   'strip_pcoll_input()').\\\n+                strip_pcoll_helper(self.output_types,\n+                                   self.has_simple_output_type,\n+                                   'output_types',\n+                                   [PDone, None],\n+                                   'An output typehint to a PTransform must be '\n+                                   'a single (or nested) type wrapped by '\n+                                   'a PCollection, PDone, or None. ',\n+                                   'strip_pcoll_output()')\n+\n+  def strip_pcoll_helper(\n+      self,\n+      my_type,            # type: any\n+      has_my_type,        # type: Callable[[], bool]\n+      my_key,             # type: str\n+      special_containers,   # type: List[Union[PBegin, PDone, PCollection]]\n+      error_str,          # type: str\n+      source_str          # type: str\n+      ):\n+    # type: (...) -> IOTypeHints\n+    from apache_beam.pvalue import PCollection\n+\n+    if not has_my_type() or not my_type or len(my_type[0]) != 1:\n+      return self\n+\n+    my_type = my_type[0][0]\n+\n+    if isinstance(my_type, typehints.AnyTypeConstraint):\n+      return self\n+\n+    special_containers += [PCollection]\n+\n+    if (my_type not in special_containers and\n+        getattr(my_type, '__origin__', None) != PCollection):\n+      raise TypeCheckError(error_str)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c6f4c5d3d30676716f106e887be6bb12038998"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ef9bdc286d16b1718a7ce2b50bff49afe4b124", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/39ef9bdc286d16b1718a7ce2b50bff49afe4b124", "committedDate": "2020-07-28T05:46:50Z", "message": "Show incorrect type in error message\n\nCo-authored-by: Udi Meiri <udim@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a30800c3850be824bacc0de91fe866270863d3dd", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a30800c3850be824bacc0de91fe866270863d3dd", "committedDate": "2020-07-29T22:31:34Z", "message": "Allow Pipeline as an input"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56e947c97938338321a4325d10a4facd785a213", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/a56e947c97938338321a4325d10a4facd785a213", "committedDate": "2020-07-29T23:43:36Z", "message": "Fix import bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3df884881433b3353435956d2fe2c9ebcad3f4", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/6d3df884881433b3353435956d2fe2c9ebcad3f4", "committedDate": "2020-07-30T06:03:58Z", "message": "Alphabetically order imports inside function (but really this is just to force re-run the tests)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444f5f44713e14ca2e29207e74f549e39ea3ff8a", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/444f5f44713e14ca2e29207e74f549e39ea3ff8a", "committedDate": "2020-07-31T23:37:03Z", "message": "Display warning instead of throwing error for oddly formed type hints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "107e8e69f02f143bb38e50310f89d5558061c114", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/107e8e69f02f143bb38e50310f89d5558061c114", "committedDate": "2020-08-04T19:15:15Z", "message": "Convert to Beam types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c046d6f1436f52c8c7482344f78cbbb66bcb80d", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/2c046d6f1436f52c8c7482344f78cbbb66bcb80d", "committedDate": "2020-08-04T19:29:41Z", "message": "Add test for generic TypeVars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc54c04dc2be9fe37b0285fa05dacaf936d924d5", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/fc54c04dc2be9fe37b0285fa05dacaf936d924d5", "committedDate": "2020-08-04T19:32:56Z", "message": "Fix bug by skipping DoOutputsTuple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb97557906732322c624c2c283077a33e7d73388", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/cb97557906732322c624c2c283077a33e7d73388", "committedDate": "2020-08-04T23:30:20Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73891931f165e8bf86df0210ab252ef8d56aa345", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/73891931f165e8bf86df0210ab252ef8d56aa345", "committedDate": "2020-08-05T06:37:04Z", "message": "Add test for DoOutputsTuple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c01bfd05e44c2442701f7522fc564d5b5ab4d7f", "author": {"user": {"login": "saavannanavati", "name": "Saavan Nanavati"}}, "url": "https://github.com/apache/beam/commit/3c01bfd05e44c2442701f7522fc564d5b5ab4d7f", "committedDate": "2020-08-06T04:48:34Z", "message": "Fix lint errors"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3437, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}