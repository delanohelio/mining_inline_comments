{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDcyMTk1", "number": 10992, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MToxN1rODn3HDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MToxN1rODn3HDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIzOTgwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MToxN1rOF2GoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MToxN1rOF2GoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTk4OA==", "bodyText": "Note that this terminology deviates from the current getCheckpointMark(). I like it though.", "url": "https://github.com/apache/beam/pull/10992#discussion_r392275988", "createdAt": "2020-03-13T14:51:17Z", "author": {"login": "mxm"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java", "diffHunk": "@@ -1070,6 +1091,120 @@ public Duration getAllowedTimestampSkew() {\n   @Experimental(Kind.SPLITTABLE_DO_FN)\n   public @interface NewTracker {}\n \n+  /**\n+   * Annotation for the method that maps an element and restriction to initial watermark estimator\n+   * state for a <a href=\"https://s.apache.org/splittable-do-fn\">splittable</a> {@link DoFn}.\n+   *\n+   * <p>Signature: {@code WatermarkEstimatorStateT getInitialWatermarkState(<arguments>);}\n+   *\n+   * <p>This method must satisfy the following constraints:\n+   *\n+   * <ul>\n+   *   <li>The return type {@code WatermarkEstimatorStateT} defines the watermark state type used\n+   *       within this splittable DoFn. All other methods that use a {@link\n+   *       WatermarkEstimatorState @WatermarkEstimatorState} parameter must use the same type that\n+   *       is used here. It is suggested to use as narrow of a return type definition as possible\n+   *       (for example prefer to use a square type over a shape type as a square is a type of a\n+   *       shape).\n+   *   <li>If one of its arguments is tagged with the {@link Element} annotation, then it will be\n+   *       passed the current element being processed; the argument must be of type {@code InputT}.\n+   *       Note that automatic conversion of {@link Row}s and {@link FieldAccess} parameters are\n+   *       currently unsupported.\n+   *   <li>If one of its arguments is tagged with the {@link Restriction} annotation, then it will\n+   *       be passed the current restriction being processed; the argument must be of type {@code\n+   *       RestrictionT}.\n+   *   <li>If one of its arguments is tagged with the {@link Timestamp} annotation, then it will be\n+   *       passed the timestamp of the current element being processed; the argument must be of type\n+   *       {@link Instant}.\n+   *   <li>If one of its arguments is a subtype of {@link BoundedWindow}, then it will be passed the\n+   *       window of the current element. When applied by {@link ParDo} the subtype of {@link\n+   *       BoundedWindow} must match the type of windows on the input {@link PCollection}. If the\n+   *       window is not accessed a runner may perform additional optimizations.\n+   *   <li>If one of its arguments is of type {@link PaneInfo}, then it will be passed information\n+   *       about the current triggering pane.\n+   *   <li>If one of the parameters is of type {@link PipelineOptions}, then it will be passed the\n+   *       options for the current pipeline.\n+   * </ul>\n+   */\n+  @Documented\n+  @Retention(RetentionPolicy.RUNTIME)\n+  @Target(ElementType.METHOD)\n+  @Experimental(Kind.SPLITTABLE_DO_FN)\n+  public @interface GetInitialWatermarkEstimatorState {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feea2ba610aa35344d30bae23a76d18e7b6afe93"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1940, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}