{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTQzNzUz", "number": 12024, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1NTozMFrOEGXHmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowMjoxM1rOEGXTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA1NjkxOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Side Input/Side Input/task.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1NTozMFrOGlG8mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1NTozMFrOGlG8mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NDMxNQ==", "bodyText": "This code snippet needs to have no indentation to render properly.", "url": "https://github.com/apache/beam/pull/12024#discussion_r441564315", "createdAt": "2020-06-17T13:55:30Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/task.md", "diffHunk": "@@ -0,0 +1,68 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# Side Input\n+\n+In addition to the main input PCollection, you can provide additional inputs to a ParDo transform \n+in the form of side inputs. A side input is an additional input that your DoFn can access each time \n+it processes an element in the input PCollection. When you specify a side input, you create a view \n+of some other data that can be read from within the ParDo transform\u2019s DoFn while processing each \n+element.\n+\n+Side inputs are useful if your ParDo needs to inject additional data when processing each element \n+in the input PCollection, but the additional data needs to be determined at runtime (and not \n+hard-coded). Such values might be determined by the input data, or depend on a different branch of \n+your pipeline.\n+\n+**Kata:** Please enrich each Person with the country based on the city he/she lives in.\n+\n+<div class=\"hint\">\n+    Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#hdr-Side_Inputs\">\n+    beam.SideInput</a> to create a side input of the citiesToCountries PCollection\n+</div>\n+\n+<div class=\"hint\">\n+    Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n+    beam.ParDo</a> with a DoFn that accepts a\n+    <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#hdr-Side_Inputs\">\n+    beam.SideInput</a>.\n+</div>\n+\n+<div class=\"hint\">\n+    Refer to the Beam Programming Guide\n+    <a href=\"https://beam.apache.org/documentation/programming-guide/#side-inputs\">\"Side inputs\"</a>\n+    section for more information.\n+</div>\n+\n+<div class=\"hint\">\n+    A ParDo that has a PCollection KV as side input expects a DoFn that looks like the following.    \n+    \n+    ```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA3ODg5OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowMDoxM1rOGlHLBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowMDoxM1rOGlHLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2ODAwNA==", "bodyText": "Add break statement here?", "url": "https://github.com/apache/beam/pull/12024#discussion_r441568004", "createdAt": "2020-06-17T14:00:13Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+type Person struct {\n+\tName, City, Country string\n+}\n+\n+func ApplyTransform(s beam.Scope, personsKV beam.PCollection, citiesToCountries beam.PCollection) beam.PCollection {\n+\tcitiesToCountriesView := beam.SideInput{\n+\t\tInput: citiesToCountries,\n+\t}\n+\treturn beam.ParDo(s, joinFn, personsKV, citiesToCountriesView)\n+}\n+\n+func joinFn(person Person, citiesToCountriesIter func(*string, *string) bool, emit func(Person)) {\n+\tvar city, country string\n+\tfor citiesToCountriesIter(&city, &country) {\n+\t\tif person.City == city {\n+\t\t\temit(Person{\n+\t\t\t\tName:    person.Name,\n+\t\t\t\tCity:    city,\n+\t\t\t\tCountry: country,\n+\t\t\t})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA4NzE3OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowMjoxM1rOGlHQog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDo0NjowMFrOGmH4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTQ0Mg==", "bodyText": "Is there a way to use a KV-like API (e.g. get(key)) instead of iterating each of the KV pair?\nThe way this works seems like a List collection with a tuple.\nOr probably the naming KV is misleading?", "url": "https://github.com/apache/beam/pull/12024#discussion_r441569442", "createdAt": "2020-06-17T14:02:13Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+type Person struct {\n+\tName, City, Country string\n+}\n+\n+func ApplyTransform(s beam.Scope, personsKV beam.PCollection, citiesToCountries beam.PCollection) beam.PCollection {\n+\tcitiesToCountriesView := beam.SideInput{\n+\t\tInput: citiesToCountries,\n+\t}\n+\treturn beam.ParDo(s, joinFn, personsKV, citiesToCountriesView)\n+}\n+\n+func joinFn(person Person, citiesToCountriesIter func(*string, *string) bool, emit func(Person)) {\n+\tvar city, country string\n+\tfor citiesToCountriesIter(&city, &country) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MTY0Ng==", "bodyText": "This is the only Side Input iterating KV API in the Go SDK at present.\nWhile generics in Go are making progress it's not something we can use at this time. Maybe late next year, we'll be able to add a beam.KV type.\nFurther, sideinputs are not guaranteed grouped or ordered in any way, so we'd be getting pairs in one form or another regardless.", "url": "https://github.com/apache/beam/pull/12024#discussion_r441691646", "createdAt": "2020-06-17T16:57:30Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+type Person struct {\n+\tName, City, Country string\n+}\n+\n+func ApplyTransform(s beam.Scope, personsKV beam.PCollection, citiesToCountries beam.PCollection) beam.PCollection {\n+\tcitiesToCountriesView := beam.SideInput{\n+\t\tInput: citiesToCountries,\n+\t}\n+\treturn beam.ParDo(s, joinFn, personsKV, citiesToCountriesView)\n+}\n+\n+func joinFn(person Person, citiesToCountriesIter func(*string, *string) bool, emit func(Person)) {\n+\tvar city, country string\n+\tfor citiesToCountriesIter(&city, &country) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTQ0Mg=="}, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2MzE3Mg==", "bodyText": "Is the state of Side Input iterating of KV in the Go SDK currently preventing this kata from being helpful?  Should we hold off on a Side Input lesson at this time or change the example to a singleton Side Input like what is done in the documentation?", "url": "https://github.com/apache/beam/pull/12024#discussion_r441763172", "createdAt": "2020-06-17T18:54:54Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+type Person struct {\n+\tName, City, Country string\n+}\n+\n+func ApplyTransform(s beam.Scope, personsKV beam.PCollection, citiesToCountries beam.PCollection) beam.PCollection {\n+\tcitiesToCountriesView := beam.SideInput{\n+\t\tInput: citiesToCountries,\n+\t}\n+\treturn beam.ParDo(s, joinFn, personsKV, citiesToCountriesView)\n+}\n+\n+func joinFn(person Person, citiesToCountriesIter func(*string, *string) bool, emit func(Person)) {\n+\tvar city, country string\n+\tfor citiesToCountriesIter(&city, &country) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTQ0Mg=="}, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMzc4Mg==", "bodyText": "Good question!\nNo.\nIt's a valid way to iterate through KV PCollections as Side inputs. Eg. You know your set of KVs is short, but dynamic, and you'll need all of them at random while processing a DoFn.\nIdeally we also have an alternate Map/Get style random access to KV side inputs as well, but it would be in addition to the existing way.\nWith generics for Go taking their next steps, maybe next year we could bolster the iteration API with any official Iteration format, in addition to the current methods.\nEdit: There's also the ordinary PCollection approach, which wouldn't be KVs, which would also demonstrate Side input iteration. Side inputs iterators don't have to be KVs.", "url": "https://github.com/apache/beam/pull/12024#discussion_r442603782", "createdAt": "2020-06-19T02:52:31Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+type Person struct {\n+\tName, City, Country string\n+}\n+\n+func ApplyTransform(s beam.Scope, personsKV beam.PCollection, citiesToCountries beam.PCollection) beam.PCollection {\n+\tcitiesToCountriesView := beam.SideInput{\n+\t\tInput: citiesToCountries,\n+\t}\n+\treturn beam.ParDo(s, joinFn, personsKV, citiesToCountriesView)\n+}\n+\n+func joinFn(person Person, citiesToCountriesIter func(*string, *string) bool, emit func(Person)) {\n+\tvar city, country string\n+\tfor citiesToCountriesIter(&city, &country) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTQ0Mg=="}, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyMTQ2MA==", "bodyText": "@lostluck / @henryken I'll keep close to the corresponding Java kata and use the KV<string, string> form as a source of the side input.", "url": "https://github.com/apache/beam/pull/12024#discussion_r442621460", "createdAt": "2020-06-19T04:14:30Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+type Person struct {\n+\tName, City, Country string\n+}\n+\n+func ApplyTransform(s beam.Scope, personsKV beam.PCollection, citiesToCountries beam.PCollection) beam.PCollection {\n+\tcitiesToCountriesView := beam.SideInput{\n+\t\tInput: citiesToCountries,\n+\t}\n+\treturn beam.ParDo(s, joinFn, personsKV, citiesToCountriesView)\n+}\n+\n+func joinFn(person Person, citiesToCountriesIter func(*string, *string) bool, emit func(Person)) {\n+\tvar city, country string\n+\tfor citiesToCountriesIter(&city, &country) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTQ0Mg=="}, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyODE3Mg==", "bodyText": "Thanks for the explanation @lostluck.\nI think we can keep it as it is.", "url": "https://github.com/apache/beam/pull/12024#discussion_r442628172", "createdAt": "2020-06-19T04:46:00Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Side Input/Side Input/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+type Person struct {\n+\tName, City, Country string\n+}\n+\n+func ApplyTransform(s beam.Scope, personsKV beam.PCollection, citiesToCountries beam.PCollection) beam.PCollection {\n+\tcitiesToCountriesView := beam.SideInput{\n+\t\tInput: citiesToCountries,\n+\t}\n+\treturn beam.ParDo(s, joinFn, personsKV, citiesToCountriesView)\n+}\n+\n+func joinFn(person Person, citiesToCountriesIter func(*string, *string) bool, emit func(Person)) {\n+\tvar city, country string\n+\tfor citiesToCountriesIter(&city, &country) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTQ0Mg=="}, "originalCommit": {"oid": "981fcba119ad6b850bb4e76b233077a9d7888748"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3536, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}