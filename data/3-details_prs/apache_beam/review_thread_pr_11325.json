{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODc4MTYx", "number": 11325, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1MToxNlrODvTNWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTowMDo1MFrODvTa_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTI0Mzc3OnYy", "diffSide": "RIGHT", "path": "model/fn-execution/src/main/proto/beam_fn_api.proto", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1MToxNlrOGBpY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo1NjoxMFrOGBrZeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTg4Ng==", "bodyText": "Why are these also deprecated now?\nWill you be only using the bytes map now? I don't really get how this will work by looking at the ProcessBundle(Progress)Response protos. It seems like you would need the MonitoringInfo at least once to have enough metadata be able to decode the bytes and associate multiple updates together. I don't really understand the protocol that you have in mind here.", "url": "https://github.com/apache/beam/pull/11325#discussion_r404379886", "createdAt": "2020-04-06T20:51:16Z", "author": {"login": "ajamato"}, "path": "model/fn-execution/src/main/proto/beam_fn_api.proto", "diffHunk": "@@ -253,18 +253,13 @@ message ProcessBundleRequest {\n }\n \n message ProcessBundleResponse {\n-  // (Optional) If metrics reporting is supported by the SDK, this represents\n-  // the final metrics to record for this bundle.\n-  // DEPRECATED\n-  Metrics metrics = 1;\n-\n   // (Optional) Specifies that the bundle has not been completed and the\n   // following applications need to be scheduled and executed in the future.\n   // A runner that does not yet support residual roots MUST still check that\n   // this is empty for correctness.\n   repeated DelayedBundleApplication residual_roots = 2;\n \n-  // (Required) The list of metrics or other MonitoredState\n+  // DEPRECATED (Required) The list of metrics or other MonitoredState\n   // collected while processing this bundle.\n   repeated org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4ODUxNg==", "bodyText": "The plan is to go with short ids system as the one and only implementation and may not have enough time to remove these two fields before the 2.21 release.\nI want to have the option to un-deprecate them or remove them after the release.", "url": "https://github.com/apache/beam/pull/11325#discussion_r404388516", "createdAt": "2020-04-06T21:07:01Z", "author": {"login": "lukecwik"}, "path": "model/fn-execution/src/main/proto/beam_fn_api.proto", "diffHunk": "@@ -253,18 +253,13 @@ message ProcessBundleRequest {\n }\n \n message ProcessBundleResponse {\n-  // (Optional) If metrics reporting is supported by the SDK, this represents\n-  // the final metrics to record for this bundle.\n-  // DEPRECATED\n-  Metrics metrics = 1;\n-\n   // (Optional) Specifies that the bundle has not been completed and the\n   // following applications need to be scheduled and executed in the future.\n   // A runner that does not yet support residual roots MUST still check that\n   // this is empty for correctness.\n   repeated DelayedBundleApplication residual_roots = 2;\n \n-  // (Required) The list of metrics or other MonitoredState\n+  // DEPRECATED (Required) The list of metrics or other MonitoredState\n   // collected while processing this bundle.\n   repeated org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTg4Ng=="}, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMjc5NA==", "bodyText": "sgtm, Using ProcessBundleProgressMetadata should be called after the get the IDs, makes sense.", "url": "https://github.com/apache/beam/pull/11325#discussion_r404412794", "createdAt": "2020-04-06T21:56:10Z", "author": {"login": "ajamato"}, "path": "model/fn-execution/src/main/proto/beam_fn_api.proto", "diffHunk": "@@ -253,18 +253,13 @@ message ProcessBundleRequest {\n }\n \n message ProcessBundleResponse {\n-  // (Optional) If metrics reporting is supported by the SDK, this represents\n-  // the final metrics to record for this bundle.\n-  // DEPRECATED\n-  Metrics metrics = 1;\n-\n   // (Optional) Specifies that the bundle has not been completed and the\n   // following applications need to be scheduled and executed in the future.\n   // A runner that does not yet support residual roots MUST still check that\n   // this is empty for correctness.\n   repeated DelayedBundleApplication residual_roots = 2;\n \n-  // (Required) The list of metrics or other MonitoredState\n+  // DEPRECATED (Required) The list of metrics or other MonitoredState\n   // collected while processing this bundle.\n   repeated org.apache.beam.model.pipeline.v1.MonitoringInfo monitoring_infos = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTg4Ng=="}, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTI3MjE5OnYy", "diffSide": "LEFT", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/BeamFnMapTaskExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1OTowMFrOGBpqOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo1NjoyNFrOGBrZ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NDMxNA==", "bodyText": "Are you sure this won't break existing integrations? I believe only the Python and Java SDK have moved everything to MonitoringInfos. The Go SDK has not yet", "url": "https://github.com/apache/beam/pull/11325#discussion_r404384314", "createdAt": "2020-04-06T20:59:00Z", "author": {"login": "ajamato"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/BeamFnMapTaskExecutor.java", "diffHunk": "@@ -341,30 +339,16 @@ void updateProgress() {\n           grpcWriteOperation.abortWait();\n         }\n \n-        // TODO(BEAM-6189): Replace getProcessBundleProgress with getMonitoringInfos when Metrics\n-        // is deprecated.\n         ProcessBundleProgressResponse processBundleProgressResponse =\n             MoreFutures.get(bundleProcessOperation.getProcessBundleProgress());\n \n         final List<MonitoringInfo> monitoringInfosList =\n             processBundleProgressResponse.getMonitoringInfosList();\n \n-        // Supporting deprecated metrics until all supported runners are migrated to using\n-        // MonitoringInfos\n-        Metrics metrics = processBundleProgressResponse.getMetrics();\n-        double elementsConsumed =\n-            bundleProcessOperation.getInputElementsConsumed(monitoringInfosList);\n-\n-        if (elementsConsumed == 0) {\n-          elementsConsumed = bundleProcessOperation.getInputElementsConsumed(metrics);\n-        }\n-\n         updateMetrics(monitoringInfosList);\n-        updateMetricsDeprecated(metrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4OTMyMw==", "bodyText": "Go SDK has, @lostluck and I worked on the changes. See: \n  \n    \n      beam/sdks/go/pkg/beam/core/runtime/harness/monitoring.go\n    \n    \n         Line 204\n      in\n      aff4461\n    \n    \n    \n    \n\n        \n          \n           func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo, map[string][]byte) {", "url": "https://github.com/apache/beam/pull/11325#discussion_r404389323", "createdAt": "2020-04-06T21:08:42Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/BeamFnMapTaskExecutor.java", "diffHunk": "@@ -341,30 +339,16 @@ void updateProgress() {\n           grpcWriteOperation.abortWait();\n         }\n \n-        // TODO(BEAM-6189): Replace getProcessBundleProgress with getMonitoringInfos when Metrics\n-        // is deprecated.\n         ProcessBundleProgressResponse processBundleProgressResponse =\n             MoreFutures.get(bundleProcessOperation.getProcessBundleProgress());\n \n         final List<MonitoringInfo> monitoringInfosList =\n             processBundleProgressResponse.getMonitoringInfosList();\n \n-        // Supporting deprecated metrics until all supported runners are migrated to using\n-        // MonitoringInfos\n-        Metrics metrics = processBundleProgressResponse.getMetrics();\n-        double elementsConsumed =\n-            bundleProcessOperation.getInputElementsConsumed(monitoringInfosList);\n-\n-        if (elementsConsumed == 0) {\n-          elementsConsumed = bundleProcessOperation.getInputElementsConsumed(metrics);\n-        }\n-\n         updateMetrics(monitoringInfosList);\n-        updateMetricsDeprecated(metrics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NDMxNA=="}, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMjg5Ng==", "bodyText": "SGTM", "url": "https://github.com/apache/beam/pull/11325#discussion_r404412896", "createdAt": "2020-04-06T21:56:24Z", "author": {"login": "ajamato"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/BeamFnMapTaskExecutor.java", "diffHunk": "@@ -341,30 +339,16 @@ void updateProgress() {\n           grpcWriteOperation.abortWait();\n         }\n \n-        // TODO(BEAM-6189): Replace getProcessBundleProgress with getMonitoringInfos when Metrics\n-        // is deprecated.\n         ProcessBundleProgressResponse processBundleProgressResponse =\n             MoreFutures.get(bundleProcessOperation.getProcessBundleProgress());\n \n         final List<MonitoringInfo> monitoringInfosList =\n             processBundleProgressResponse.getMonitoringInfosList();\n \n-        // Supporting deprecated metrics until all supported runners are migrated to using\n-        // MonitoringInfos\n-        Metrics metrics = processBundleProgressResponse.getMetrics();\n-        double elementsConsumed =\n-            bundleProcessOperation.getInputElementsConsumed(monitoringInfosList);\n-\n-        if (elementsConsumed == 0) {\n-          elementsConsumed = bundleProcessOperation.getInputElementsConsumed(metrics);\n-        }\n-\n         updateMetrics(monitoringInfosList);\n-        updateMetricsDeprecated(metrics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NDMxNA=="}, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTI3ODcwOnYy", "diffSide": "LEFT", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTowMDo1MFrOGBpuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo1Nzo1MFrOGBrcaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NTM0Mw==", "bodyText": "You way want to add this back, if you truly cannot yet delete the deprecated metrics", "url": "https://github.com/apache/beam/pull/11325#discussion_r404385343", "createdAt": "2020-04-06T21:00:50Z", "author": {"login": "ajamato"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperationTest.java", "diffHunk": "@@ -242,200 +240,6 @@ public void close() {}\n     operation.finish();\n   }\n \n-  @Test\n-  public void testTentativeUserMetrics() throws Exception {\n-    IdGenerator idGenerator = makeIdGeneratorStartingFrom(777L);\n-\n-    CountDownLatch processBundleLatch = new CountDownLatch(1);\n-\n-    final String stepName = \"fakeStepNameWithUserMetrics\";\n-    final String namespace = \"sdk/whatever\";\n-    final String name = \"someCounter\";\n-    final long counterValue = 42;\n-\n-    final BeamFnApi.Metrics.User.MetricName metricName =\n-        BeamFnApi.Metrics.User.MetricName.newBuilder()\n-            .setNamespace(namespace)\n-            .setName(name)\n-            .build();\n-\n-    InstructionRequestHandler instructionRequestHandler =\n-        new InstructionRequestHandler() {\n-          @Override\n-          public CompletionStage<InstructionResponse> handle(InstructionRequest request) {\n-            switch (request.getRequestCase()) {\n-              case REGISTER:\n-                return CompletableFuture.completedFuture(responseFor(request).build());\n-              case PROCESS_BUNDLE:\n-                return MoreFutures.supplyAsync(\n-                    () -> {\n-                      processBundleLatch.await();\n-                      return responseFor(request).build();\n-                    });\n-              case PROCESS_BUNDLE_PROGRESS:\n-                return CompletableFuture.completedFuture(\n-                    responseFor(request)\n-                        .setProcessBundleProgress(\n-                            BeamFnApi.ProcessBundleProgressResponse.newBuilder()\n-                                .setMetrics(\n-                                    BeamFnApi.Metrics.newBuilder()\n-                                        .putPtransforms(\n-                                            stepName,\n-                                            BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                .addUser(\n-                                                    BeamFnApi.Metrics.User.newBuilder()\n-                                                        .setMetricName(metricName)\n-                                                        .setCounterData(\n-                                                            BeamFnApi.Metrics.User.CounterData\n-                                                                .newBuilder()\n-                                                                .setValue(counterValue)))\n-                                                .build())))\n-                        .build());\n-              default:\n-                // block forever\n-                return new CompletableFuture<>();\n-            }\n-          }\n-\n-          @Override\n-          public void close() {}\n-        };\n-\n-    RegisterAndProcessBundleOperation operation =\n-        new RegisterAndProcessBundleOperation(\n-            idGenerator,\n-            instructionRequestHandler,\n-            mockBeamFnStateDelegator,\n-            REGISTER_REQUEST,\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableTable.of(),\n-            ImmutableMap.of(),\n-            mockContext);\n-\n-    operation.start();\n-\n-    BeamFnApi.Metrics metrics = MoreFutures.get(operation.getProcessBundleProgress()).getMetrics();\n-    assertThat(metrics.getPtransformsOrThrow(stepName).getUserCount(), equalTo(1));\n-\n-    BeamFnApi.Metrics.User userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), equalTo(counterValue));\n-\n-    processBundleLatch.countDown();\n-    operation.finish();\n-  }\n-\n-  @Test\n-  public void testFinalUserMetrics() throws Exception {\n-    List<BeamFnApi.InstructionRequest> requests = new ArrayList<>();\n-    IdGenerator idGenerator = makeIdGeneratorStartingFrom(777L);\n-    ExecutorService executorService = Executors.newCachedThreadPool();\n-\n-    CountDownLatch processBundleLatch = new CountDownLatch(1);\n-\n-    final String stepName = \"fakeStepNameWithUserMetrics\";\n-    final String namespace = \"sdk/whatever\";\n-    final String name = \"someCounter\";\n-    final long counterValue = 42;\n-    final long finalCounterValue = 77;\n-\n-    final BeamFnApi.Metrics.User.MetricName metricName =\n-        BeamFnApi.Metrics.User.MetricName.newBuilder()\n-            .setNamespace(namespace)\n-            .setName(name)\n-            .build();\n-\n-    InstructionRequestHandler instructionRequestHandler =\n-        new InstructionRequestHandler() {\n-          @Override\n-          public CompletionStage<InstructionResponse> handle(InstructionRequest request) {\n-            switch (request.getRequestCase()) {\n-              case REGISTER:\n-                return CompletableFuture.completedFuture(responseFor(request).build());\n-              case PROCESS_BUNDLE:\n-                return MoreFutures.supplyAsync(\n-                    () -> {\n-                      processBundleLatch.await();\n-                      return responseFor(request)\n-                          .setProcessBundle(\n-                              BeamFnApi.ProcessBundleResponse.newBuilder()\n-                                  .setMetrics(\n-                                      BeamFnApi.Metrics.newBuilder()\n-                                          .putPtransforms(\n-                                              stepName,\n-                                              BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                  .addUser(\n-                                                      BeamFnApi.Metrics.User.newBuilder()\n-                                                          .setMetricName(metricName)\n-                                                          .setCounterData(\n-                                                              BeamFnApi.Metrics.User.CounterData\n-                                                                  .newBuilder()\n-                                                                  .setValue(finalCounterValue)))\n-                                                  .build())))\n-                          .build();\n-                    });\n-              case PROCESS_BUNDLE_PROGRESS:\n-                return CompletableFuture.completedFuture(\n-                    responseFor(request)\n-                        .setProcessBundleProgress(\n-                            BeamFnApi.ProcessBundleProgressResponse.newBuilder()\n-                                .setMetrics(\n-                                    BeamFnApi.Metrics.newBuilder()\n-                                        .putPtransforms(\n-                                            stepName,\n-                                            BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                .addUser(\n-                                                    BeamFnApi.Metrics.User.newBuilder()\n-                                                        .setMetricName(metricName)\n-                                                        .setCounterData(\n-                                                            BeamFnApi.Metrics.User.CounterData\n-                                                                .newBuilder()\n-                                                                .setValue(counterValue)))\n-                                                .build())))\n-                        .build());\n-              default:\n-                // block forever\n-                return new CompletableFuture<>();\n-            }\n-          }\n-\n-          @Override\n-          public void close() {}\n-        };\n-\n-    RegisterAndProcessBundleOperation operation =\n-        new RegisterAndProcessBundleOperation(\n-            idGenerator,\n-            instructionRequestHandler,\n-            mockBeamFnStateDelegator,\n-            REGISTER_REQUEST,\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableTable.of(),\n-            ImmutableMap.of(),\n-            mockContext);\n-\n-    operation.start();\n-\n-    // Force some intermediate metrics to test crosstalk is not introduced\n-    BeamFnApi.Metrics metrics = MoreFutures.get(operation.getProcessBundleProgress()).getMetrics();\n-    BeamFnApi.Metrics.User userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), not(equalTo(finalCounterValue)));\n-\n-    processBundleLatch.countDown();\n-    operation.finish();\n-\n-    metrics = MoreFutures.get(operation.getFinalMetrics());\n-\n-    userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), equalTo(finalCounterValue));\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4OTY5Nw==", "bodyText": "Which deprecated metrics are you referring to?", "url": "https://github.com/apache/beam/pull/11325#discussion_r404389697", "createdAt": "2020-04-06T21:09:26Z", "author": {"login": "lukecwik"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperationTest.java", "diffHunk": "@@ -242,200 +240,6 @@ public void close() {}\n     operation.finish();\n   }\n \n-  @Test\n-  public void testTentativeUserMetrics() throws Exception {\n-    IdGenerator idGenerator = makeIdGeneratorStartingFrom(777L);\n-\n-    CountDownLatch processBundleLatch = new CountDownLatch(1);\n-\n-    final String stepName = \"fakeStepNameWithUserMetrics\";\n-    final String namespace = \"sdk/whatever\";\n-    final String name = \"someCounter\";\n-    final long counterValue = 42;\n-\n-    final BeamFnApi.Metrics.User.MetricName metricName =\n-        BeamFnApi.Metrics.User.MetricName.newBuilder()\n-            .setNamespace(namespace)\n-            .setName(name)\n-            .build();\n-\n-    InstructionRequestHandler instructionRequestHandler =\n-        new InstructionRequestHandler() {\n-          @Override\n-          public CompletionStage<InstructionResponse> handle(InstructionRequest request) {\n-            switch (request.getRequestCase()) {\n-              case REGISTER:\n-                return CompletableFuture.completedFuture(responseFor(request).build());\n-              case PROCESS_BUNDLE:\n-                return MoreFutures.supplyAsync(\n-                    () -> {\n-                      processBundleLatch.await();\n-                      return responseFor(request).build();\n-                    });\n-              case PROCESS_BUNDLE_PROGRESS:\n-                return CompletableFuture.completedFuture(\n-                    responseFor(request)\n-                        .setProcessBundleProgress(\n-                            BeamFnApi.ProcessBundleProgressResponse.newBuilder()\n-                                .setMetrics(\n-                                    BeamFnApi.Metrics.newBuilder()\n-                                        .putPtransforms(\n-                                            stepName,\n-                                            BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                .addUser(\n-                                                    BeamFnApi.Metrics.User.newBuilder()\n-                                                        .setMetricName(metricName)\n-                                                        .setCounterData(\n-                                                            BeamFnApi.Metrics.User.CounterData\n-                                                                .newBuilder()\n-                                                                .setValue(counterValue)))\n-                                                .build())))\n-                        .build());\n-              default:\n-                // block forever\n-                return new CompletableFuture<>();\n-            }\n-          }\n-\n-          @Override\n-          public void close() {}\n-        };\n-\n-    RegisterAndProcessBundleOperation operation =\n-        new RegisterAndProcessBundleOperation(\n-            idGenerator,\n-            instructionRequestHandler,\n-            mockBeamFnStateDelegator,\n-            REGISTER_REQUEST,\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableTable.of(),\n-            ImmutableMap.of(),\n-            mockContext);\n-\n-    operation.start();\n-\n-    BeamFnApi.Metrics metrics = MoreFutures.get(operation.getProcessBundleProgress()).getMetrics();\n-    assertThat(metrics.getPtransformsOrThrow(stepName).getUserCount(), equalTo(1));\n-\n-    BeamFnApi.Metrics.User userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), equalTo(counterValue));\n-\n-    processBundleLatch.countDown();\n-    operation.finish();\n-  }\n-\n-  @Test\n-  public void testFinalUserMetrics() throws Exception {\n-    List<BeamFnApi.InstructionRequest> requests = new ArrayList<>();\n-    IdGenerator idGenerator = makeIdGeneratorStartingFrom(777L);\n-    ExecutorService executorService = Executors.newCachedThreadPool();\n-\n-    CountDownLatch processBundleLatch = new CountDownLatch(1);\n-\n-    final String stepName = \"fakeStepNameWithUserMetrics\";\n-    final String namespace = \"sdk/whatever\";\n-    final String name = \"someCounter\";\n-    final long counterValue = 42;\n-    final long finalCounterValue = 77;\n-\n-    final BeamFnApi.Metrics.User.MetricName metricName =\n-        BeamFnApi.Metrics.User.MetricName.newBuilder()\n-            .setNamespace(namespace)\n-            .setName(name)\n-            .build();\n-\n-    InstructionRequestHandler instructionRequestHandler =\n-        new InstructionRequestHandler() {\n-          @Override\n-          public CompletionStage<InstructionResponse> handle(InstructionRequest request) {\n-            switch (request.getRequestCase()) {\n-              case REGISTER:\n-                return CompletableFuture.completedFuture(responseFor(request).build());\n-              case PROCESS_BUNDLE:\n-                return MoreFutures.supplyAsync(\n-                    () -> {\n-                      processBundleLatch.await();\n-                      return responseFor(request)\n-                          .setProcessBundle(\n-                              BeamFnApi.ProcessBundleResponse.newBuilder()\n-                                  .setMetrics(\n-                                      BeamFnApi.Metrics.newBuilder()\n-                                          .putPtransforms(\n-                                              stepName,\n-                                              BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                  .addUser(\n-                                                      BeamFnApi.Metrics.User.newBuilder()\n-                                                          .setMetricName(metricName)\n-                                                          .setCounterData(\n-                                                              BeamFnApi.Metrics.User.CounterData\n-                                                                  .newBuilder()\n-                                                                  .setValue(finalCounterValue)))\n-                                                  .build())))\n-                          .build();\n-                    });\n-              case PROCESS_BUNDLE_PROGRESS:\n-                return CompletableFuture.completedFuture(\n-                    responseFor(request)\n-                        .setProcessBundleProgress(\n-                            BeamFnApi.ProcessBundleProgressResponse.newBuilder()\n-                                .setMetrics(\n-                                    BeamFnApi.Metrics.newBuilder()\n-                                        .putPtransforms(\n-                                            stepName,\n-                                            BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                .addUser(\n-                                                    BeamFnApi.Metrics.User.newBuilder()\n-                                                        .setMetricName(metricName)\n-                                                        .setCounterData(\n-                                                            BeamFnApi.Metrics.User.CounterData\n-                                                                .newBuilder()\n-                                                                .setValue(counterValue)))\n-                                                .build())))\n-                        .build());\n-              default:\n-                // block forever\n-                return new CompletableFuture<>();\n-            }\n-          }\n-\n-          @Override\n-          public void close() {}\n-        };\n-\n-    RegisterAndProcessBundleOperation operation =\n-        new RegisterAndProcessBundleOperation(\n-            idGenerator,\n-            instructionRequestHandler,\n-            mockBeamFnStateDelegator,\n-            REGISTER_REQUEST,\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableTable.of(),\n-            ImmutableMap.of(),\n-            mockContext);\n-\n-    operation.start();\n-\n-    // Force some intermediate metrics to test crosstalk is not introduced\n-    BeamFnApi.Metrics metrics = MoreFutures.get(operation.getProcessBundleProgress()).getMetrics();\n-    BeamFnApi.Metrics.User userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), not(equalTo(finalCounterValue)));\n-\n-    processBundleLatch.countDown();\n-    operation.finish();\n-\n-    metrics = MoreFutures.get(operation.getFinalMetrics());\n-\n-    userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), equalTo(finalCounterValue));\n-  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NTM0Mw=="}, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMzU0NA==", "bodyText": "The legacy metrics proto deleted in this PR. You may want to check with to make sure no other runner is consuming this.", "url": "https://github.com/apache/beam/pull/11325#discussion_r404413544", "createdAt": "2020-04-06T21:57:50Z", "author": {"login": "ajamato"}, "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperationTest.java", "diffHunk": "@@ -242,200 +240,6 @@ public void close() {}\n     operation.finish();\n   }\n \n-  @Test\n-  public void testTentativeUserMetrics() throws Exception {\n-    IdGenerator idGenerator = makeIdGeneratorStartingFrom(777L);\n-\n-    CountDownLatch processBundleLatch = new CountDownLatch(1);\n-\n-    final String stepName = \"fakeStepNameWithUserMetrics\";\n-    final String namespace = \"sdk/whatever\";\n-    final String name = \"someCounter\";\n-    final long counterValue = 42;\n-\n-    final BeamFnApi.Metrics.User.MetricName metricName =\n-        BeamFnApi.Metrics.User.MetricName.newBuilder()\n-            .setNamespace(namespace)\n-            .setName(name)\n-            .build();\n-\n-    InstructionRequestHandler instructionRequestHandler =\n-        new InstructionRequestHandler() {\n-          @Override\n-          public CompletionStage<InstructionResponse> handle(InstructionRequest request) {\n-            switch (request.getRequestCase()) {\n-              case REGISTER:\n-                return CompletableFuture.completedFuture(responseFor(request).build());\n-              case PROCESS_BUNDLE:\n-                return MoreFutures.supplyAsync(\n-                    () -> {\n-                      processBundleLatch.await();\n-                      return responseFor(request).build();\n-                    });\n-              case PROCESS_BUNDLE_PROGRESS:\n-                return CompletableFuture.completedFuture(\n-                    responseFor(request)\n-                        .setProcessBundleProgress(\n-                            BeamFnApi.ProcessBundleProgressResponse.newBuilder()\n-                                .setMetrics(\n-                                    BeamFnApi.Metrics.newBuilder()\n-                                        .putPtransforms(\n-                                            stepName,\n-                                            BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                .addUser(\n-                                                    BeamFnApi.Metrics.User.newBuilder()\n-                                                        .setMetricName(metricName)\n-                                                        .setCounterData(\n-                                                            BeamFnApi.Metrics.User.CounterData\n-                                                                .newBuilder()\n-                                                                .setValue(counterValue)))\n-                                                .build())))\n-                        .build());\n-              default:\n-                // block forever\n-                return new CompletableFuture<>();\n-            }\n-          }\n-\n-          @Override\n-          public void close() {}\n-        };\n-\n-    RegisterAndProcessBundleOperation operation =\n-        new RegisterAndProcessBundleOperation(\n-            idGenerator,\n-            instructionRequestHandler,\n-            mockBeamFnStateDelegator,\n-            REGISTER_REQUEST,\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableTable.of(),\n-            ImmutableMap.of(),\n-            mockContext);\n-\n-    operation.start();\n-\n-    BeamFnApi.Metrics metrics = MoreFutures.get(operation.getProcessBundleProgress()).getMetrics();\n-    assertThat(metrics.getPtransformsOrThrow(stepName).getUserCount(), equalTo(1));\n-\n-    BeamFnApi.Metrics.User userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), equalTo(counterValue));\n-\n-    processBundleLatch.countDown();\n-    operation.finish();\n-  }\n-\n-  @Test\n-  public void testFinalUserMetrics() throws Exception {\n-    List<BeamFnApi.InstructionRequest> requests = new ArrayList<>();\n-    IdGenerator idGenerator = makeIdGeneratorStartingFrom(777L);\n-    ExecutorService executorService = Executors.newCachedThreadPool();\n-\n-    CountDownLatch processBundleLatch = new CountDownLatch(1);\n-\n-    final String stepName = \"fakeStepNameWithUserMetrics\";\n-    final String namespace = \"sdk/whatever\";\n-    final String name = \"someCounter\";\n-    final long counterValue = 42;\n-    final long finalCounterValue = 77;\n-\n-    final BeamFnApi.Metrics.User.MetricName metricName =\n-        BeamFnApi.Metrics.User.MetricName.newBuilder()\n-            .setNamespace(namespace)\n-            .setName(name)\n-            .build();\n-\n-    InstructionRequestHandler instructionRequestHandler =\n-        new InstructionRequestHandler() {\n-          @Override\n-          public CompletionStage<InstructionResponse> handle(InstructionRequest request) {\n-            switch (request.getRequestCase()) {\n-              case REGISTER:\n-                return CompletableFuture.completedFuture(responseFor(request).build());\n-              case PROCESS_BUNDLE:\n-                return MoreFutures.supplyAsync(\n-                    () -> {\n-                      processBundleLatch.await();\n-                      return responseFor(request)\n-                          .setProcessBundle(\n-                              BeamFnApi.ProcessBundleResponse.newBuilder()\n-                                  .setMetrics(\n-                                      BeamFnApi.Metrics.newBuilder()\n-                                          .putPtransforms(\n-                                              stepName,\n-                                              BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                  .addUser(\n-                                                      BeamFnApi.Metrics.User.newBuilder()\n-                                                          .setMetricName(metricName)\n-                                                          .setCounterData(\n-                                                              BeamFnApi.Metrics.User.CounterData\n-                                                                  .newBuilder()\n-                                                                  .setValue(finalCounterValue)))\n-                                                  .build())))\n-                          .build();\n-                    });\n-              case PROCESS_BUNDLE_PROGRESS:\n-                return CompletableFuture.completedFuture(\n-                    responseFor(request)\n-                        .setProcessBundleProgress(\n-                            BeamFnApi.ProcessBundleProgressResponse.newBuilder()\n-                                .setMetrics(\n-                                    BeamFnApi.Metrics.newBuilder()\n-                                        .putPtransforms(\n-                                            stepName,\n-                                            BeamFnApi.Metrics.PTransform.newBuilder()\n-                                                .addUser(\n-                                                    BeamFnApi.Metrics.User.newBuilder()\n-                                                        .setMetricName(metricName)\n-                                                        .setCounterData(\n-                                                            BeamFnApi.Metrics.User.CounterData\n-                                                                .newBuilder()\n-                                                                .setValue(counterValue)))\n-                                                .build())))\n-                        .build());\n-              default:\n-                // block forever\n-                return new CompletableFuture<>();\n-            }\n-          }\n-\n-          @Override\n-          public void close() {}\n-        };\n-\n-    RegisterAndProcessBundleOperation operation =\n-        new RegisterAndProcessBundleOperation(\n-            idGenerator,\n-            instructionRequestHandler,\n-            mockBeamFnStateDelegator,\n-            REGISTER_REQUEST,\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableMap.of(),\n-            ImmutableTable.of(),\n-            ImmutableMap.of(),\n-            mockContext);\n-\n-    operation.start();\n-\n-    // Force some intermediate metrics to test crosstalk is not introduced\n-    BeamFnApi.Metrics metrics = MoreFutures.get(operation.getProcessBundleProgress()).getMetrics();\n-    BeamFnApi.Metrics.User userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), not(equalTo(finalCounterValue)));\n-\n-    processBundleLatch.countDown();\n-    operation.finish();\n-\n-    metrics = MoreFutures.get(operation.getFinalMetrics());\n-\n-    userMetric = metrics.getPtransformsOrThrow(stepName).getUser(0);\n-    assertThat(userMetric.getMetricName(), equalTo(metricName));\n-    assertThat(userMetric.getCounterData().getValue(), equalTo(finalCounterValue));\n-  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NTM0Mw=="}, "originalCommit": {"oid": "bc44a01dedd07c69223b7015ab90d4c09b24289e"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1384, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}