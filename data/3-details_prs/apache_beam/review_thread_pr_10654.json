{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjIzMDM1", "number": 10654, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo1MTo0NVrODZ9MAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTozNjowNlrODZ-9ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTQzNDg4OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo1MTo0NVrOFgo8CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDozMDoyMFrOFgvnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTQ4MQ==", "bodyText": "Nit: Is part of the comment missing, or was this just a typo of a comma instead of a period?", "url": "https://github.com/apache/beam/pull/10654#discussion_r369769481", "createdAt": "2020-01-22T19:51:45Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NzU2OQ==", "bodyText": "Thanks! This is a sentence fragment. I'll fix it in the next PR which needs to update this code a bit anyway.", "url": "https://github.com/apache/beam/pull/10654#discussion_r369877569", "createdAt": "2020-01-23T00:25:25Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTQ4MQ=="}, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3ODgzNw==", "bodyText": "sgtm", "url": "https://github.com/apache/beam/pull/10654#discussion_r369878837", "createdAt": "2020-01-23T00:30:20Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTQ4MQ=="}, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTcyNjExOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTozNjowNlrOFgr0IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDozMDowOFrOFgvnAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNjYwOA==", "bodyText": "and lifts the values for metrics keys for value for faster lookups.\n\nThis is hard for me to parse. Is there a typo in there?", "url": "https://github.com/apache/beam/pull/10654#discussion_r369816608", "createdAt": "2020-01-22T21:36:06Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,\n+\tcounters      map[nameHash]*counter\n+\tdistributions map[nameHash]*distribution\n+\tgauges        map[nameHash]*gauge\n+}\n+\n type ctxKey string\n \n-const bundleKey ctxKey = \"beam:bundle\"\n-const ptransformKey ctxKey = \"beam:ptransform\"\n+const (\n+\tbundleKey     ctxKey = \"beam:bundle\"\n+\tptransformKey ctxKey = \"beam:ptransform\"\n+\tcounterSetKey ctxKey = \"beam:counterset\"\n+)\n \n // beamCtx is a caching context for IDs necessary to place metric updates.\n-//  Allocating contexts and searching for PTransformIDs for every element\n+// Allocating contexts and searching for PTransformIDs for every element\n // is expensive, so we avoid it if possible.\n type beamCtx struct {\n \tcontext.Context\n \tbundleID, ptransformID string\n+\tbs                     *perBundle\n+\tcs                     *ptCounterSet\n }\n \n-// Value lifts the beam contLift the keys value for faster lookups when not available.\n+// Value implements context.Value for beamCtx, and lifts the\n+// values for metrics keys for value for faster lookups.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3ODEyMw==", "bodyText": "That last \"for value\" is definitely out of place.\nIn the next PR, I'll replace it with the following:\nValue implements the context.Value interface method for beamCtx. The implementation lifts the\nstored values for metrics keys to the top level beamCtx for faster lookups.", "url": "https://github.com/apache/beam/pull/10654#discussion_r369878123", "createdAt": "2020-01-23T00:27:31Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,\n+\tcounters      map[nameHash]*counter\n+\tdistributions map[nameHash]*distribution\n+\tgauges        map[nameHash]*gauge\n+}\n+\n type ctxKey string\n \n-const bundleKey ctxKey = \"beam:bundle\"\n-const ptransformKey ctxKey = \"beam:ptransform\"\n+const (\n+\tbundleKey     ctxKey = \"beam:bundle\"\n+\tptransformKey ctxKey = \"beam:ptransform\"\n+\tcounterSetKey ctxKey = \"beam:counterset\"\n+)\n \n // beamCtx is a caching context for IDs necessary to place metric updates.\n-//  Allocating contexts and searching for PTransformIDs for every element\n+// Allocating contexts and searching for PTransformIDs for every element\n // is expensive, so we avoid it if possible.\n type beamCtx struct {\n \tcontext.Context\n \tbundleID, ptransformID string\n+\tbs                     *perBundle\n+\tcs                     *ptCounterSet\n }\n \n-// Value lifts the beam contLift the keys value for faster lookups when not available.\n+// Value implements context.Value for beamCtx, and lifts the\n+// values for metrics keys for value for faster lookups.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNjYwOA=="}, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3ODc4NA==", "bodyText": "That works really well, sounds good", "url": "https://github.com/apache/beam/pull/10654#discussion_r369878784", "createdAt": "2020-01-23T00:30:08Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/metrics/metrics.go", "diffHunk": "@@ -64,22 +67,57 @@ import (\n // using metrics requires the PTransform have a context.Context\n // argument.\n \n+// perBundle is a struct that retains per transform countersets.\n+// TODO(lostluck): Migrate the exec package to use these to extract\n+// metric data for export to runner, rather than the global store.\n+type perBundle struct {\n+\tmu  sync.Mutex\n+\tcss []*ptCounterSet\n+}\n+\n+type nameHash uint64\n+\n+// ptCounterSet is the internal tracking struct for a single ptransform\n+// in a single bundle for all counter types.\n+type ptCounterSet struct {\n+\t// We store the user path access to the cells in metric type segregated\n+\t// maps. At present, caching the name hash,\n+\tcounters      map[nameHash]*counter\n+\tdistributions map[nameHash]*distribution\n+\tgauges        map[nameHash]*gauge\n+}\n+\n type ctxKey string\n \n-const bundleKey ctxKey = \"beam:bundle\"\n-const ptransformKey ctxKey = \"beam:ptransform\"\n+const (\n+\tbundleKey     ctxKey = \"beam:bundle\"\n+\tptransformKey ctxKey = \"beam:ptransform\"\n+\tcounterSetKey ctxKey = \"beam:counterset\"\n+)\n \n // beamCtx is a caching context for IDs necessary to place metric updates.\n-//  Allocating contexts and searching for PTransformIDs for every element\n+// Allocating contexts and searching for PTransformIDs for every element\n // is expensive, so we avoid it if possible.\n type beamCtx struct {\n \tcontext.Context\n \tbundleID, ptransformID string\n+\tbs                     *perBundle\n+\tcs                     *ptCounterSet\n }\n \n-// Value lifts the beam contLift the keys value for faster lookups when not available.\n+// Value implements context.Value for beamCtx, and lifts the\n+// values for metrics keys for value for faster lookups.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNjYwOA=="}, "originalCommit": {"oid": "5a5c4cf12c13b3773111823de894945a4a909e95"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2237, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}