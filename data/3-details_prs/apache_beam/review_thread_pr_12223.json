{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjE0NjIz", "number": 12223, "reviewThreads": {"totalCount": 67, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNDo1NVrOEPpnSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowMjo0MVrOEfth1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ1ODk2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNDo1NlrOGzeovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNDo1NlrOGzeovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMjUxMQ==", "bodyText": "getSplit() can be False. You can mark getSplit() as not null with False as default value.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456632511", "createdAt": "2020-07-17T19:24:56Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -190,12 +227,19 @@ public Read withAvroDataModel(GenericData model) {\n     @Override\n     public PCollection<GenericRecord> expand(PBegin input) {\n       checkNotNull(getFilepattern(), \"Filepattern cannot be null.\");\n-\n-      return input\n-          .apply(\"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n-          .apply(FileIO.matchAll())\n-          .apply(FileIO.readMatches())\n-          .apply(readFiles(getSchema()).withAvroDataModel(getAvroDataModel()));\n+      if (getSplit() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ2MDc1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNTozNlrOGzep2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyNTozNlrOGzep2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMjc5Mw==", "bodyText": "Same above.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456632793", "createdAt": "2020-07-17T19:25:36Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODUxNDkyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo0NToyMlrOGzfKtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo0NToyMlrOGzfKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0MTIwNw==", "bodyText": "L231-L234 and L237-L240 are the same. We can make them as common part and set readFiles differently.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456641207", "createdAt": "2020-07-17T19:45:22Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -190,12 +227,19 @@ public Read withAvroDataModel(GenericData model) {\n     @Override\n     public PCollection<GenericRecord> expand(PBegin input) {\n       checkNotNull(getFilepattern(), \"Filepattern cannot be null.\");\n-\n-      return input\n-          .apply(\"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n-          .apply(FileIO.matchAll())\n-          .apply(FileIO.readMatches())\n-          .apply(readFiles(getSchema()).withAvroDataModel(getAvroDataModel()));\n+      if (getSplit() != null) {\n+        return input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODUyNDI4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo0ODo0MFrOGzfQlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo0ODo0MFrOGzfQlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0MjcxMQ==", "bodyText": "you can replace filename  with file.getMetadata().resourceId() directly instead of creating a local var.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456642711", "createdAt": "2020-07-17T19:48:40Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODUzOTMxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo1NDowMFrOGzfaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzozNzowNVrOG4jZ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw==", "bodyText": "Are you sure you want to split the OffsetRange initially into one offset per range? It seems too much to me. Also one offset per range means no more further split could happen.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456645127", "createdAt": "2020-07-17T19:54:00Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3MzM4NA==", "bodyText": "I will change it into dividing the range into half each time.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456673384", "createdAt": "2020-07-17T21:03:36Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODM0Mg==", "bodyText": "The split  here is for initial split, not for dynamic split. For example, if you have one file(2 row groups in total) as input, after initial split you will get (file, [group1]), (file, [group2]) as the input of your process fn. Usually, we expose an API from IO to let the end user to set desired initial splits.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456698342", "createdAt": "2020-07-17T22:22:31Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMTM3MA==", "bodyText": "I think Split into half as the initial splits should be fine as our purpose for making it into splittable doFn is for the read process to be faster. User might not need to put in an actual split info as they might not know exact information about the file before they read them.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456821370", "createdAt": "2020-07-18T19:41:58Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwOTQ5OA==", "bodyText": "I feel like it may not feasible to hardcode the initial split. @chamikaramj What do you think?", "url": "https://github.com/apache/beam/pull/12223#discussion_r457709498", "createdAt": "2020-07-20T21:45:13Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MDg4MQ==", "bodyText": "Usual pattern for files is to initial split into 64MB blocks and dynamic split further as needed. I believe this is the tried and tested method for existing file-based sources. This might require changing to a tracker that use byte positions (0 to size of file) instead of a tracker that goes from 0 to number of blocks.", "url": "https://github.com/apache/beam/pull/12223#discussion_r461190881", "createdAt": "2020-07-27T21:49:58Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MzE3OQ==", "bodyText": "@boyuanzz do you think we should add an abstract block-based SDF implementation/utility that will be shared between multiple source implementations (for example, Parquet, Avro) similar to [1] for bounded sources ?\n[1] https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/BlockBasedSource.java", "url": "https://github.com/apache/beam/pull/12223#discussion_r461193179", "createdAt": "2020-07-27T21:55:05Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDUyMA==", "bodyText": "May be we should add a BlockBasedTracker that extends OffsetRangeTracker that goes from 0 to size of file and can split at block boundaries but can provide better progress signals (based on element estimates).", "url": "https://github.com/apache/beam/pull/12223#discussion_r461200520", "createdAt": "2020-07-27T22:12:52Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5Njk1Mw==", "bodyText": "It seems like what Jiadai is trying to do is taking a file as element and the number of row group as restriction. When SDF.process() is called, it will read all row groups defined in the restriction for one file. If using BlockBasedTracker, the restriction will be the number of blocks. I think the key point here is to define what should be the element and restriction for this source.", "url": "https://github.com/apache/beam/pull/12223#discussion_r461796953", "createdAt": "2020-07-28T18:47:44Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyODc0MQ==", "bodyText": "I have tried to Implement a block tracker which still provide the information of progress in bytes. So the restriction is still block but the progress method built inside the range tracker tracks the estimate progress.", "url": "https://github.com/apache/beam/pull/12223#discussion_r461928741", "createdAt": "2020-07-28T22:26:59Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MzQ4OQ==", "bodyText": "Yes, I think we can build a BlockBasedTracker that uses number of blocks for restriction but aware of byte positions. This will allow it to better perform initial splitting and provide a better progress signal based on estimated element positions (by overriding getProgress()).\nWe do something like this for progress in existing block-based source: https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/BlockBasedSource.java#L241", "url": "https://github.com/apache/beam/pull/12223#discussion_r461953489", "createdAt": "2020-07-28T23:37:05Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);\n+              current += 1;\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTEyNw=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODU5NTA1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoxNDo0N1rOGzf8ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxOTo0MjoyN1rOGzqKkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MzkzMA==", "bodyText": "I would get the start position by tracker.currentRestriction().getFrom() and have a util function to move the cursor of reader to such index. Then you can do a while loop like while(tracker.tryClaim(i)).", "url": "https://github.com/apache/beam/pull/12223#discussion_r456653930", "createdAt": "2020-07-17T20:14:47Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3MzE2NQ==", "bodyText": "But I think I need to skipped the blocks before the starting position because there is no method to get the position of the blocks directly like what we usually did with the offset.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456673165", "createdAt": "2020-07-17T21:03:05Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MzkzMA=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MzE2NQ==", "bodyText": "Yeah I understand. You could do something like:\ncurrent = tracker.currentRestriction().getFrom();\nmoveReadToCurrent(reader, current);\nwhile(tracker.tryClaim(current)) {\n  doSomething;\n  current += 1;\n}", "url": "https://github.com/apache/beam/pull/12223#discussion_r456743165", "createdAt": "2020-07-18T03:33:24Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MzkzMA=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMTM5NQ==", "bodyText": "Ok, I have made the relevant change.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456821395", "createdAt": "2020-07-18T19:42:27Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MzkzMA=="}, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODU5NzQ0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoxNTozOVrOGzf91Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoxNTozOVrOGzf91Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1NDI5Mw==", "bodyText": "You could do  outputReceiver.output(recordReader.read()) to get rid of local var.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456654293", "createdAt": "2020-07-17T20:15:39Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +284,151 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (getSplit() != null) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          ResourceId filename = file.getMetadata().resourceId();\n+          throw new RuntimeException(String.format(\"File has to be seekable: %s\", filename));\n+        }\n+\n+        SeekableByteChannel seekableByteChannel = file.openSeekable();\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = new BeamParquetInputFile(seekableByteChannel);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        for (int i = 0; i < reader.getRowGroups().size(); i++) {\n+          if (i < tracker.currentRestriction().getFrom()) {\n+            reader.skipNextRowGroup();\n+            continue;\n+          }\n+          if (tracker.tryClaim((long) i)) {\n+            PageReadStore pages = reader.readNextRowGroup();\n+            i += 1;\n+            RecordReader<GenericRecord> recordReader =\n+                columnIO.getRecordReader(\n+                    pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+            GenericRecord read;\n+            long current = 0;\n+            long totalRows = pages.getRowCount();\n+            while (current < totalRows) {\n+              read = recordReader.read();\n+              outputReceiver.output(read);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce22bf692c0939f6d4c9f7ff616cfe044dd0bbc4"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODk0NzEzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzowMDo0NlrOGzjOcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoxMTozNFrOG1ECWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNzY5Nw==", "bodyText": "You will also need to implement @ GetRestrictionCoder which returns a OffsetRange.Coder. Also you may want to consider implementing @GetSize to give a better sizing information.\nFor more references:\nhttps://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L661-L698\nhttps://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L1006\nhttps://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java#L995", "url": "https://github.com/apache/beam/pull/12223#discussion_r456707697", "createdAt": "2020-07-17T23:00:46Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +281,147 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c164c34ce06e6b8450357d3c6f7c16553c0cd11"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMDY4Mw==", "bodyText": "I am not sure if GetRestrictionCoder is needed as the default one should work well. I have implement the GetSize to use the record count as the sizing information.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456820683", "createdAt": "2020-07-18T19:33:32Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +281,147 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNzY5Nw=="}, "originalCommit": {"oid": "0c164c34ce06e6b8450357d3c6f7c16553c0cd11"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwOTQ2Mg==", "bodyText": "I would prefer make it explicitly.", "url": "https://github.com/apache/beam/pull/12223#discussion_r457709462", "createdAt": "2020-07-20T21:45:08Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +281,147 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNzY5Nw=="}, "originalCommit": {"oid": "0c164c34ce06e6b8450357d3c6f7c16553c0cd11"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5Mzg1MQ==", "bodyText": "Method added.", "url": "https://github.com/apache/beam/pull/12223#discussion_r458293851", "createdAt": "2020-07-21T18:11:34Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +281,147 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNzY5Nw=="}, "originalCommit": {"oid": "0c164c34ce06e6b8450357d3c6f7c16553c0cd11"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODk4NzQ4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzoyNjo1M1rOGzjkrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxOTowNToyNVrOGzp_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMzM5MA==", "bodyText": "It's possible that model is null. Is it expected?", "url": "https://github.com/apache/beam/pull/12223#discussion_r456713390", "createdAt": "2020-07-17T23:26:53Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +281,147 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c164c34ce06e6b8450357d3c6f7c16553c0cd11"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgxODUyOA==", "bodyText": "if it is null, then the readSupport will create a new AvroReadSupport with null as its parameter.", "url": "https://github.com/apache/beam/pull/12223#discussion_r456818528", "createdAt": "2020-07-18T19:05:25Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +281,147 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxMzM5MA=="}, "originalCommit": {"oid": "0c164c34ce06e6b8450357d3c6f7c16553c0cd11"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjEzOTU5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTo0Njo0N1rOG0gaMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTo0Njo0N1rOG0gaMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMDEzMA==", "bodyText": "If the restriction is null, it should means there is no more work.", "url": "https://github.com/apache/beam/pull/12223#discussion_r457710130", "createdAt": "2020-07-20T21:46:47Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +283,164 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          GenericRecord read;\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            outputReceiver.output(recordReader.read());\n+            currentRow += 1;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {\n+        for (OffsetRange range : restriction.split(1, 0)) {\n+          out.output(range);\n+        }\n+      }\n+\n+      @NewTracker\n+      public OffsetRangeTracker newTracker(@Restriction OffsetRange restriction) {\n+        return new OffsetRangeTracker(restriction);\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return reader.getRecordCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d529b85b19ffc263c2285fcfacc7dfb4446497e"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjE1NjAyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTo1MjoyOFrOG0gj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1MTo0NlrOG306JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMjYwNg==", "bodyText": "If it's feasible, it would be nice to track an estimated avg row size like KafkaIO. Then the size will be avgSize * rowCount. @chamikaramj Do you think it's necessary to do so?", "url": "https://github.com/apache/beam/pull/12223#discussion_r457712606", "createdAt": "2020-07-20T21:52:28Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +283,164 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          GenericRecord read;\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            outputReceiver.output(recordReader.read());\n+            currentRow += 1;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {\n+        for (OffsetRange range : restriction.split(1, 0)) {\n+          out.output(range);\n+        }\n+      }\n+\n+      @NewTracker\n+      public OffsetRangeTracker newTracker(@Restriction OffsetRange restriction) {\n+        return new OffsetRangeTracker(restriction);\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return reader.getRecordCount();\n+        } else {\n+          long start = restriction.getFrom();\n+          long end = restriction.getTo();\n+          List<BlockMetaData> blocks = reader.getRowGroups();\n+          double size = 0;\n+          for (long i = start; i < end; i++) {\n+            size += blocks.get((int) i).getRowCount();\n+          }\n+          return size;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d529b85b19ffc263c2285fcfacc7dfb4446497e"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NzQ0Nw==", "bodyText": "I think get size is used to get an idea of the current process and for the purpose of optimized split. Since the size of each row is similar for a given file, the number of row is a fairly accurate representation of the work, multiply with a constant does not change too much when we compare. The previous methods of printing the progress also used number of rows(records) in their progress report.", "url": "https://github.com/apache/beam/pull/12223#discussion_r458297447", "createdAt": "2020-07-21T18:17:47Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +283,164 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          GenericRecord read;\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            outputReceiver.output(recordReader.read());\n+            currentRow += 1;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {\n+        for (OffsetRange range : restriction.split(1, 0)) {\n+          out.output(range);\n+        }\n+      }\n+\n+      @NewTracker\n+      public OffsetRangeTracker newTracker(@Restriction OffsetRange restriction) {\n+        return new OffsetRangeTracker(restriction);\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return reader.getRecordCount();\n+        } else {\n+          long start = restriction.getFrom();\n+          long end = restriction.getTo();\n+          List<BlockMetaData> blocks = reader.getRowGroups();\n+          double size = 0;\n+          for (long i = start; i < end; i++) {\n+            size += blocks.get((int) i).getRowCount();\n+          }\n+          return size;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMjYwNg=="}, "originalCommit": {"oid": "2d529b85b19ffc263c2285fcfacc7dfb4446497e"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTcxNw==", "bodyText": "If you use byte sizes for tracking implementation here will end up being trivial.", "url": "https://github.com/apache/beam/pull/12223#discussion_r461191717", "createdAt": "2020-07-27T21:51:46Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +283,164 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          GenericRecord read;\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            outputReceiver.output(recordReader.read());\n+            currentRow += 1;\n+          }\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(@Restriction OffsetRange restriction, OutputReceiver<OffsetRange> out) {\n+        for (OffsetRange range : restriction.split(1, 0)) {\n+          out.output(range);\n+        }\n+      }\n+\n+      @NewTracker\n+      public OffsetRangeTracker newTracker(@Restriction OffsetRange restriction) {\n+        return new OffsetRangeTracker(restriction);\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return reader.getRecordCount();\n+        } else {\n+          long start = restriction.getFrom();\n+          long end = restriction.getTo();\n+          List<BlockMetaData> blocks = reader.getRowGroups();\n+          double size = 0;\n+          for (long i = start; i < end; i++) {\n+            size += blocks.get((int) i).getRowCount();\n+          }\n+          return size;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMjYwNg=="}, "originalCommit": {"oid": "2d529b85b19ffc263c2285fcfacc7dfb4446497e"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTA5MDMzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1Mjo0N1rOG3073A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo0MzozOFrOG5zI0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjE1Ng==", "bodyText": "Does this mean that we will be incrementing progress (obtained by the runner through restriction tracker) only when a new block  is read ? This might be too coarse grained.", "url": "https://github.com/apache/beam/pull/12223#discussion_r461192156", "createdAt": "2020-07-27T21:52:47Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +277,195 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+                  columnIO.getRecordReader(\n+                          pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(format(\"Can not read value at %d in block %d in file %s\", currentRow, currentBlock, file.toString()), e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+\n+\n+\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f507a33b506eb7c0aac011b4b021eb22dfffb277"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1OTg1OQ==", "bodyText": "I have change the initial split to be either 64MB or single row group(if the row group size is larger than 64mb).", "url": "https://github.com/apache/beam/pull/12223#discussion_r463259859", "createdAt": "2020-07-30T20:43:38Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -235,12 +277,195 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+                  columnIO.getRecordReader(\n+                          pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(format(\"Can not read value at %d in block %d in file %s\", currentRow, currentBlock, file.toString()), e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+\n+\n+\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjE1Ng=="}, "originalCommit": {"oid": "f507a33b506eb7c0aac011b4b021eb22dfffb277"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTk5NzM5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTowMDowN1rOG7Ij1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo0NTo1NFrOG7LFBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1OTQxNQ==", "bodyText": "Why do we need this option ? We should be able to safely always enable splitting for runners that support SDF without an explicit flag from the user.", "url": "https://github.com/apache/beam/pull/12223#discussion_r464659415", "createdAt": "2020-08-03T21:00:07Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -177,6 +214,10 @@ public Read from(String filepattern) {\n       return from(ValueProvider.StaticValueProvider.of(filepattern));\n     }\n \n+    public Read withSplit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMDY3OA==", "bodyText": "I think Splittable dofn is not available for all runners yet so maybe we should still keep both function.", "url": "https://github.com/apache/beam/pull/12223#discussion_r464700678", "createdAt": "2020-08-03T22:45:54Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -177,6 +214,10 @@ public Read from(String filepattern) {\n       return from(ValueProvider.StaticValueProvider.of(filepattern));\n     }\n \n+    public Read withSplit() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1OTQxNQ=="}, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTk5ODc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTowMDozMlrOG7IktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTowMDozMlrOG7IktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1OTYzNw==", "bodyText": "We should be able to get rid of this fork by using a single DoFn.", "url": "https://github.com/apache/beam/pull/12223#discussion_r464659637", "createdAt": "2020-08-03T21:00:32Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjAwNTQwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTowMjo1NVrOG7Io5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTowMjo1NVrOG7Io5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2MDcwOQ==", "bodyText": "Why do we need a separate DoFn ? We should be able to use the same DoFn but implement SDF specific methods as well (which will also allow us to better reuse code).", "url": "https://github.com/apache/beam/pull/12223#discussion_r464660709", "createdAt": "2020-08-03T21:02:55Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjAyOTI0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxMTozNFrOG7I3gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzowMToyNFrOG7LYTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NDQ1MA==", "bodyText": "How expensive will this be ? Note that input file can be arbitrary long (for example, petabytes) and we don't want the newTracker() call to hang forever.  BTW I think we can safely assume that records are of equal size. So if we can more efficiently determine the number of records per block/row group that should be adequate (for example, we do this for Avro).", "url": "https://github.com/apache/beam/pull/12223#discussion_r464664450", "createdAt": "2020-08-03T21:11:34Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNTYxNQ==", "bodyText": "Row counts are stored in each BlockMetaData so the complexity should be O(n) given that the range has n blocks.", "url": "https://github.com/apache/beam/pull/12223#discussion_r464705615", "createdAt": "2020-08-03T23:01:24Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NDQ1MA=="}, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjAzNjk3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxNDoxOVrOG7I8Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxNDoxOVrOG7I8Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NTY0Ng==", "bodyText": "Nice!", "url": "https://github.com/apache/beam/pull/12223#discussion_r464665646", "createdAt": "2020-08-03T21:14:19Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA0Nzg5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxNzo1N1rOG7JCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo0OTozOVrOG7LJ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NzMyOQ==", "bodyText": "Let's call this approximateRecordSize", "url": "https://github.com/apache/beam/pull/12223#discussion_r464667329", "createdAt": "2020-08-03T21:17:57Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+          }\n+          return recordCount;\n+        }\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          double size = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+          }\n+          return size;\n+        }\n+      }\n+    }\n+\n+    private static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long recordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalWork, long recordCount) {\n+        super(range);\n+        this.recordSize = totalWork / recordCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 417}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTkzMw==", "bodyText": "Sure!", "url": "https://github.com/apache/beam/pull/12223#discussion_r464701933", "createdAt": "2020-08-03T22:49:39Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+          }\n+          return recordCount;\n+        }\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          double size = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+          }\n+          return size;\n+        }\n+      }\n+    }\n+\n+    private static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long recordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalWork, long recordCount) {\n+        super(range);\n+        this.recordSize = totalWork / recordCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NzMyOQ=="}, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 417}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA1MDM3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxODo1NlrOG7JESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo0OToyNlrOG7LJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NzcyMg==", "bodyText": "this.totalWork = totalWork", "url": "https://github.com/apache/beam/pull/12223#discussion_r464667722", "createdAt": "2020-08-03T21:18:56Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+          }\n+          return recordCount;\n+        }\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          double size = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+          }\n+          return size;\n+        }\n+      }\n+    }\n+\n+    private static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long recordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalWork, long recordCount) {\n+        super(range);\n+        this.recordSize = totalWork / recordCount;\n+        this.totalWork = recordSize * recordCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 418}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTg2OQ==", "bodyText": "I am not sure if there will be a round-off for the record size and the totalWork will be different from the product.", "url": "https://github.com/apache/beam/pull/12223#discussion_r464701869", "createdAt": "2020-08-03T22:49:26Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+          }\n+          return recordCount;\n+        }\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          double size = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+          }\n+          return size;\n+        }\n+      }\n+    }\n+\n+    private static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long recordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalWork, long recordCount) {\n+        super(range);\n+        this.recordSize = totalWork / recordCount;\n+        this.totalWork = recordSize * recordCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NzcyMg=="}, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 418}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA1NTQ3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyMDo0NFrOG7JHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyMDo0NFrOG7JHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2ODQ5NA==", "bodyText": "If restriction is null that means we'll be reading the whole file. So what we return here should be the size of the file I believe.", "url": "https://github.com/apache/beam/pull/12223#discussion_r464668494", "createdAt": "2020-08-03T21:20:44Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+          }\n+          return recordCount;\n+        }\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA1Nzg0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyMTozOVrOG7JIvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMjo1NjowNFrOG7LR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2ODg2MQ==", "bodyText": "How expensive is this operation ?", "url": "https://github.com/apache/beam/pull/12223#discussion_r464668861", "createdAt": "2020-08-03T21:21:39Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+          }\n+          return recordCount;\n+        }\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          double size = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            size += reader.getRowGroups().get((int) i).getTotalByteSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMzk2OQ==", "bodyText": "It should be a O(N) operation while N is the number of blocks.", "url": "https://github.com/apache/beam/pull/12223#discussion_r464703969", "createdAt": "2020-08-03T22:56:04Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,12 +281,271 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n-      return input\n-          .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n-          .setCoder(AvroCoder.of(getSchema()));\n+      if (!getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      } else {\n+        return input\n+            .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n+    }\n+\n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      private InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        for (String property : options.getPropertyNames()) {\n+          conf.set(property, options.getProperty(property));\n+        }\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+        while (tracker.tryClaim(currentBlock)) {\n+\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      private Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        long start = restriction.getFrom();\n+        long end = restriction.getFrom();\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        long totalSize = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          totalSize += rowGroups.get((int) i).getTotalByteSize();\n+          end += 1;\n+          if (totalSize > SPLIT_LIMIT) {\n+            start = end;\n+            totalSize = 0;\n+            out.output(new OffsetRange(start, end));\n+          }\n+        }\n+        if (totalSize != 0) {\n+          out.output(new OffsetRange(start, end));\n+        }\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          long recordCount = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+          }\n+          return recordCount;\n+        }\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        if (restriction == null) {\n+          return 0;\n+        } else {\n+          double size = 0;\n+          for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+            size += reader.getRowGroups().get((int) i).getTotalByteSize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2ODg2MQ=="}, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 403}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA2MzAzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyMzozOFrOG7JL1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToyMzozOFrOG7JL1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2OTY1Mw==", "bodyText": "Please add a comprehensive set of unit tests for ParquetIO and BlockTracker splitting and progress tracking. You can use following for inspiration.\nhttps://github.com/apache/beam/blob/master/sdks/java/core/src/test/java/org/apache/beam/sdk/io/AvroSourceTest.java", "url": "https://github.com/apache/beam/pull/12223#discussion_r464669653", "createdAt": "2020-08-03T21:23:38Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "diffHunk": "@@ -84,11 +85,31 @@ public void testWriteAndRead() {\n     PCollection<GenericRecord> readBack =\n         readPipeline.apply(\n             ParquetIO.read(SCHEMA).from(temporaryFolder.getRoot().getAbsolutePath() + \"/*\"));\n-\n     PAssert.that(readBack).containsInAnyOrder(records);\n     readPipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testWriteAndReadWithSplit() {\n+    List<GenericRecord> records = generateGenericRecords(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cd39ccaf60b0f0ace7d3c1e4be3c04e6e52d59"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcxMzgxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MDoxOFrOG8bm0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMzoyM1rOG9jp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDA0OA==", "bodyText": "Should it be if (getSplit()) ?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466020048", "createdAt": "2020-08-05T21:40:18Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -187,12 +229,18 @@ public Read withAvroDataModel(GenericData model) {\n     @Override\n     public PCollection<GenericRecord> expand(PBegin input) {\n       checkNotNull(getFilepattern(), \"Filepattern cannot be null.\");\n-\n-      return input\n-          .apply(\"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n-          .apply(FileIO.matchAll())\n-          .apply(FileIO.readMatches())\n-          .apply(readFiles(getSchema()).withAvroDataModel(getAvroDataModel()));\n+      PCollection<FileIO.ReadableFile> inputFiles =\n+          input\n+              .apply(\n+                  \"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n+              .apply(FileIO.matchAll())\n+              .apply(FileIO.readMatches());\n+      if (!getSplit()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48b28cade88ab3e40ff355edb07d85051678dc0"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDUxMA==", "bodyText": "changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467200510", "createdAt": "2020-08-07T18:23:23Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -187,12 +229,18 @@ public Read withAvroDataModel(GenericData model) {\n     @Override\n     public PCollection<GenericRecord> expand(PBegin input) {\n       checkNotNull(getFilepattern(), \"Filepattern cannot be null.\");\n-\n-      return input\n-          .apply(\"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n-          .apply(FileIO.matchAll())\n-          .apply(FileIO.readMatches())\n-          .apply(readFiles(getSchema()).withAvroDataModel(getAvroDataModel()));\n+      PCollection<FileIO.ReadableFile> inputFiles =\n+          input\n+              .apply(\n+                  \"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n+              .apply(FileIO.matchAll())\n+              .apply(FileIO.readMatches());\n+      if (!getSplit()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDA0OA=="}, "originalCommit": {"oid": "b48b28cade88ab3e40ff355edb07d85051678dc0"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcxNjI3OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MToxOVrOG8boXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyODozNVrOG9jzVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDQ0Ng==", "bodyText": "isSplittable?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466020446", "createdAt": "2020-08-05T21:41:19Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -154,10 +187,15 @@ public static ReadFiles readFiles(Schema schema) {\n \n     abstract @Nullable GenericData getAvroDataModel();\n \n+    abstract boolean getSplit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48b28cade88ab3e40ff355edb07d85051678dc0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczOTY5OQ==", "bodyText": "+1\nalso setSplittable instead of setSplit", "url": "https://github.com/apache/beam/pull/12223#discussion_r466739699", "createdAt": "2020-08-06T23:31:38Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -154,10 +187,15 @@ public static ReadFiles readFiles(Schema schema) {\n \n     abstract @Nullable GenericData getAvroDataModel();\n \n+    abstract boolean getSplit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDQ0Ng=="}, "originalCommit": {"oid": "b48b28cade88ab3e40ff355edb07d85051678dc0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMjkwMw==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467202903", "createdAt": "2020-08-07T18:28:35Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -154,10 +187,15 @@ public static ReadFiles readFiles(Schema schema) {\n \n     abstract @Nullable GenericData getAvroDataModel();\n \n+    abstract boolean getSplit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMDQ0Ng=="}, "originalCommit": {"oid": "b48b28cade88ab3e40ff355edb07d85051678dc0"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcyMDkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0Mjo1NVrOG8brKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMzowN1rOG9jphQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMTE2MQ==", "bodyText": "We can drop this redundant else.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466021161", "createdAt": "2020-08-05T21:42:55Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -187,12 +229,18 @@ public Read withAvroDataModel(GenericData model) {\n     @Override\n     public PCollection<GenericRecord> expand(PBegin input) {\n       checkNotNull(getFilepattern(), \"Filepattern cannot be null.\");\n-\n-      return input\n-          .apply(\"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n-          .apply(FileIO.matchAll())\n-          .apply(FileIO.readMatches())\n-          .apply(readFiles(getSchema()).withAvroDataModel(getAvroDataModel()));\n+      PCollection<FileIO.ReadableFile> inputFiles =\n+          input\n+              .apply(\n+                  \"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n+              .apply(FileIO.matchAll())\n+              .apply(FileIO.readMatches());\n+      if (!getSplit()) {\n+        return inputFiles.apply(\n+            readFiles(getSchema()).withSplit().withAvroDataModel(getAvroDataModel()));\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48b28cade88ab3e40ff355edb07d85051678dc0"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDM4OQ==", "bodyText": "removed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467200389", "createdAt": "2020-08-07T18:23:07Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -187,12 +229,18 @@ public Read withAvroDataModel(GenericData model) {\n     @Override\n     public PCollection<GenericRecord> expand(PBegin input) {\n       checkNotNull(getFilepattern(), \"Filepattern cannot be null.\");\n-\n-      return input\n-          .apply(\"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n-          .apply(FileIO.matchAll())\n-          .apply(FileIO.readMatches())\n-          .apply(readFiles(getSchema()).withAvroDataModel(getAvroDataModel()));\n+      PCollection<FileIO.ReadableFile> inputFiles =\n+          input\n+              .apply(\n+                  \"Create filepattern\", Create.ofProvider(getFilepattern(), StringUtf8Coder.of()))\n+              .apply(FileIO.matchAll())\n+              .apply(FileIO.readMatches());\n+      if (!getSplit()) {\n+        return inputFiles.apply(\n+            readFiles(getSchema()).withSplit().withAvroDataModel(getAvroDataModel()));\n+      } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMTE2MQ=="}, "originalCommit": {"oid": "b48b28cade88ab3e40ff355edb07d85051678dc0"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTMyMzE4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzozODoyNVrOG9HppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMjo1NlrOG9jpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MTY2OA==", "bodyText": "What's the unit of SPLIT_LIMIT? Please put a comment that how to interpret the number.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466741668", "createdAt": "2020-08-06T23:38:25Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDMwOA==", "bodyText": "Comment added. the unit is bytes.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467200308", "createdAt": "2020-08-07T18:22:56Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MTY2OA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTM0ODAxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzo1MTo0N1rOG9H4TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMjozM1rOG9jojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0NTQyMA==", "bodyText": "one liner: Maps.transformValues(map, ImmutableSet::of)", "url": "https://github.com/apache/beam/pull/12223#discussion_r466745420", "createdAt": "2020-08-06T23:51:47Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDE0MA==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467200140", "createdAt": "2020-08-07T18:22:33Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0NTQyMA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTM1MjYzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzo1NDoyM1rOG9H69Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMjozMVrOG9joZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0NjEwMQ==", "bodyText": "one liner: new BeamParquetInputFile(file.openSeekable())\nisReadSeekEfficient check is not necessary.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466746101", "createdAt": "2020-08-06T23:54:23Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDEwMw==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467200103", "createdAt": "2020-08-07T18:22:31Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0NjEwMQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQwNzA4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoyMzoxNlrOG9IZ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMjoyNlrOG9joPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1NDAwMA==", "bodyText": "I think this method needs better name that explains what it exactly does e.g. getConfWithDefaultAvroCompatibility", "url": "https://github.com/apache/beam/pull/12223#discussion_r466754000", "createdAt": "2020-08-07T00:23:16Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDA2MQ==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467200061", "createdAt": "2020-08-07T18:22:26Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1NDAwMA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQxNjQwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoyODozOVrOG9IfIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMDoyNlrOG9jSdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1NTM2MQ==", "bodyText": "Should we create a new instance of Configuration  and ParquetReadOptions multiple times in each method? Is it possible to make options an instance variable?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466755361", "createdAt": "2020-08-07T00:28:39Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDQ4Ng==", "bodyText": "I find that options and Configuration does not implements Serializable so they can be passed as instance.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467194486", "createdAt": "2020-08-07T18:10:26Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1NTM2MQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQyMDE0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDozMDozMFrOG9IhFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMTozMlrOG9jmjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1NTg2Mw==", "bodyText": "please avoid reassignment. use conf from above or create a new variable with a meaningful name.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466755863", "createdAt": "2020-08-07T00:30:30Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTYzMQ==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467199631", "createdAt": "2020-08-07T18:21:32Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1NTg2Mw=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQ0NDQ1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo0Mzo1OFrOG9Iuvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMTo0MVrOG9jmvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1OTM1OA==", "bodyText": "The rhs expression could be embedded since it's only used onetime.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466759358", "createdAt": "2020-08-07T00:43:58Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTY3OA==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467199678", "createdAt": "2020-08-07T18:21:41Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1OTM1OA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQ0NDk0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo0NDoxNlrOG9IvBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMTo0N1rOG9jnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1OTQzMA==", "bodyText": "ditto.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466759430", "createdAt": "2020-08-07T00:44:16Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTc0OA==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467199748", "createdAt": "2020-08-07T18:21:47Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1OTQzMA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTU3MjAxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1NjozN1rOG9J3xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNzoxN1rOG9hZ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODA1Mg==", "bodyText": "How many logs will this print? How important is this log? Why not debug?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466778052", "createdAt": "2020-08-07T01:56:37Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MzYxMg==", "bodyText": "It will print once for each block. Should be an important info to tell. Maybe I should move it to after finishing the reading   and merge it with the number of record read.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467163612", "createdAt": "2020-08-07T17:07:17Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODA1Mg=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTU3NzY4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1OTo0OFrOG9J7Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo0OToxOVrOHLJeHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODg5NA==", "bodyText": "Why debug? It seems more important than debug since it's a failure.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466778894", "createdAt": "2020-08-07T01:59:48Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2ODg0Mg==", "bodyText": "The LOG info and debug for reading record followed the original code.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467168842", "createdAt": "2020-08-07T17:17:57Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODg5NA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1MTU1MQ==", "bodyText": "I think this should be warn not debug. WDYT @chamikaramj ?\nAlso, it would be great if we print out some additional info from the exception like e.getMessage().", "url": "https://github.com/apache/beam/pull/12223#discussion_r481451551", "createdAt": "2020-09-01T21:49:19Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODg5NA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTU4ODQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjowNjoyNFrOG9KBUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo1MzozM1rOHLJk9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MDQ5OA==", "bodyText": "This log doesn't deliver enough information for debugging. Probably there will be too many of them also.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466780498", "createdAt": "2020-08-07T02:06:24Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1MzMwMg==", "bodyText": "ditto.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481453302", "createdAt": "2020-09-01T21:53:33Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MDQ5OA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTU5MjIzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjowODozN1rOG9KDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDo0NjoyN1rOHMF_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MTA0MQ==", "bodyText": "not so much helpful. better to be something like \"finished reading # rows in row group #\"", "url": "https://github.com/apache/beam/pull/12223#discussion_r466781041", "createdAt": "2020-08-07T02:08:37Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1MzEyNg==", "bodyText": "We need to print out the block number with the log message at least. Otherwise it would be hard to debug with this string constant message.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481453126", "createdAt": "2020-09-01T21:53:07Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MTA0MQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0MzEwNA==", "bodyText": "There is a debug on L371 before this line that will print out the row group number and a debug after this L408 to give the information of how many lines are read.", "url": "https://github.com/apache/beam/pull/12223#discussion_r482443104", "createdAt": "2020-09-02T20:46:27Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MTA0MQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTU5ODI0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjoxMTo1OVrOG9KG3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo1Nzo1N1rOG9hHVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MTkxNw==", "bodyText": "why 3?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466781917", "createdAt": "2020-08-07T02:11:59Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODg2OQ==", "bodyText": "sorry this is a change for testing that was forgot to get removed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467158869", "createdAt": "2020-08-07T16:57:57Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MTkxNw=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTYwMjg0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjoxNDoxMVrOG9KJWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDo1Njo0NlrOHMG3Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MjU1Mg==", "bodyText": "Isn't rangeEnd == i+1?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466782552", "createdAt": "2020-08-07T02:14:11Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 353}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1OTA4MA==", "bodyText": "they should have the same value.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467159080", "createdAt": "2020-08-07T16:58:22Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MjU1Mg=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 353}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1MTE5OA==", "bodyText": "How about renaming i to rangeEnd and removing the separate rangeEnd variable?", "url": "https://github.com/apache/beam/pull/12223#discussion_r481451198", "createdAt": "2020-09-01T21:48:28Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MjU1Mg=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 353}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ1NzQxMQ==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r482457411", "createdAt": "2020-09-02T20:56:46Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4MjU1Mg=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 353}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTYxOTE4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjoyMzo0OFrOG9KSoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxODo0MlrOG9hvlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NDkyOA==", "bodyText": "These four lines\nInputFile inputFile = getInputFile(file);\nConfiguration conf = setConf();\nParquetReadOptions options = HadoopReadOptions.builder(conf).build();\nParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n\nare repeated in many methods. Could we extract them into a new method?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466784928", "createdAt": "2020-08-07T02:23:48Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTE3NQ==", "bodyText": "Yes, I think we should extract them into a new method.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467169175", "createdAt": "2020-08-07T17:18:42Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NDkyOA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTYyNDQ0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjoyNzowM1rOG9KVxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjoyNzowM1rOG9KVxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NTczMg==", "bodyText": "for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {", "url": "https://github.com/apache/beam/pull/12223#discussion_r466785732", "createdAt": "2020-08-07T02:27:03Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 391}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTYyNjY5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjoyODoxOVrOG9KXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowMDo0MlrOG9hNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NjA3Nw==", "bodyText": "Is this downcasting safe?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466786077", "createdAt": "2020-08-07T02:28:19Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MDM5MQ==", "bodyText": "The number of row group should be able to be represented by int safely. Since the range tracker we use extends the offset tracker, they use long to track offset.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467160391", "createdAt": "2020-08-07T17:00:42Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NjA3Nw=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 392}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTYzMDc0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjozMDozNlrOG9KZZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMjoxMFrOG9jnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NjY2MA==", "bodyText": "We should merge this method with getRecordCount. Don't need to iterate twice.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466786660", "createdAt": "2020-08-07T02:30:36Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 397}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTk0MA==", "bodyText": "merged.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467199940", "createdAt": "2020-08-07T18:22:10Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NjY2MA=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 397}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTYzOTk5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjozNjowMFrOG9KeoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMToxOVrOG9jmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4ODAwMQ==", "bodyText": "work is too ambiguous. Please rename it to totalBytesSize", "url": "https://github.com/apache/beam/pull/12223#discussion_r466788001", "createdAt": "2020-08-07T02:36:00Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 417}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTU2MQ==", "bodyText": "Changed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467199561", "createdAt": "2020-08-07T18:21:19Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4ODAwMQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 417}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTY0NDcxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjozODo0MVrOG9KhUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDo1MzoyMFrOHMGlFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4ODY4OQ==", "bodyText": "Why not just use work? What's difference between work and totalWork?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466788689", "createdAt": "2020-08-07T02:38:41Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 421}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MTAxNQ==", "bodyText": "want to make sure that totalwork==approximateRecordSize * recordCount. Since work / recordCount can be rounded to the nearest integer.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467161015", "createdAt": "2020-08-07T17:01:56Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4ODY4OQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 421}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0OTk2OQ==", "bodyText": "Please put a comment then.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481449969", "createdAt": "2020-09-01T21:45:38Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4ODY4OQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 421}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ1Mjc1OQ==", "bodyText": "Comment added", "url": "https://github.com/apache/beam/pull/12223#discussion_r482452759", "createdAt": "2020-09-02T20:53:20Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4ODY4OQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 421}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTY4OTM5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzowNjozMlrOG9K7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMDo0OFrOG9jlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5NTM4OQ==", "bodyText": "Do we need BigDecimal conversion? I think Progress.from(0, this.totalWork) would just work.", "url": "https://github.com/apache/beam/pull/12223#discussion_r466795389", "createdAt": "2020-08-07T03:06:32Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;\n+        if (progress > totalWork) {\n+          throw new IOException(\"Making progress out of range\");\n+        }\n+      }\n+\n+      @Override\n+      public Progress getProgress() {\n+        if (this.lastAttemptedOffset == null) {\n+          return Progress.from(0.0D, BigDecimal.valueOf(this.totalWork).doubleValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTMzMA==", "bodyText": "Yes, I think so.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467199330", "createdAt": "2020-08-07T18:20:48Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;\n+        if (progress > totalWork) {\n+          throw new IOException(\"Making progress out of range\");\n+        }\n+      }\n+\n+      @Override\n+      public Progress getProgress() {\n+        if (this.lastAttemptedOffset == null) {\n+          return Progress.from(0.0D, BigDecimal.valueOf(this.totalWork).doubleValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5NTM4OQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 436}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTY5MzQ0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzowODo0OVrOG9K9xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyMTowOVrOG9jl_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5NTk3NQ==", "bodyText": "How many logs will this print? Why not debug?", "url": "https://github.com/apache/beam/pull/12223#discussion_r466795975", "createdAt": "2020-08-07T03:08:49Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;\n+        if (progress > totalWork) {\n+          throw new IOException(\"Making progress out of range\");\n+        }\n+      }\n+\n+      @Override\n+      public Progress getProgress() {\n+        if (this.lastAttemptedOffset == null) {\n+          return Progress.from(0.0D, BigDecimal.valueOf(this.totalWork).doubleValue());\n+        } else {\n+          BigDecimal workRemaining =\n+              BigDecimal.valueOf(this.totalWork)\n+                  .subtract(BigDecimal.valueOf(this.progress), MathContext.DECIMAL128)\n+                  .max(BigDecimal.ZERO);\n+          BigDecimal work = BigDecimal.valueOf(this.totalWork);\n+          LOG.info(\"total work: \" + work + \" work remaining: \" + workRemaining);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTQ4Ng==", "bodyText": "This is only for test purpose. It is now removed.", "url": "https://github.com/apache/beam/pull/12223#discussion_r467199486", "createdAt": "2020-08-07T18:21:09Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;\n+        if (progress > totalWork) {\n+          throw new IOException(\"Making progress out of range\");\n+        }\n+      }\n+\n+      @Override\n+      public Progress getProgress() {\n+        if (this.lastAttemptedOffset == null) {\n+          return Progress.from(0.0D, BigDecimal.valueOf(this.totalWork).doubleValue());\n+        } else {\n+          BigDecimal workRemaining =\n+              BigDecimal.valueOf(this.totalWork)\n+                  .subtract(BigDecimal.valueOf(this.progress), MathContext.DECIMAL128)\n+                  .max(BigDecimal.ZERO);\n+          BigDecimal work = BigDecimal.valueOf(this.totalWork);\n+          LOG.info(\"total work: \" + work + \" work remaining: \" + workRemaining);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5NTk3NQ=="}, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 443}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTcwMDIzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzoxMzowNVrOG9LBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzoxMzowNVrOG9LBqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5Njk2OQ==", "bodyText": "I think we could just write Progress.from(this.progress, this.totalWork - this.progress).", "url": "https://github.com/apache/beam/pull/12223#discussion_r466796969", "createdAt": "2020-08-07T03:13:05Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +281,284 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplit(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (getSplit()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      private static final long SPLIT_LIMIT = 64000000;\n+      ReadSupport<GenericRecord> readSupport;\n+\n+      SplitReadFn(GenericData model) {\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      private static <K, V> Map<K, Set<V>> toSetMultiMap(Map<K, V> map) {\n+        Map<K, Set<V>> setMultiMap = new HashMap<K, Set<V>>();\n+        for (Map.Entry<K, V> entry : map.entrySet()) {\n+          Set<V> set = new HashSet<V>();\n+          set.add(entry.getValue());\n+          setMultiMap.put(entry.getKey(), Collections.unmodifiableSet(set));\n+        }\n+        return Collections.unmodifiableMap(setMultiMap);\n+      }\n+\n+      public InputFile getInputFile(FileIO.ReadableFile file) throws IOException {\n+        if (!file.getMetadata().isReadSeekEfficient()) {\n+          throw new RuntimeException(\n+              String.format(\"File has to be seekable: %s\", file.getMetadata().resourceId()));\n+        }\n+        return new BeamParquetInputFile(file.openSeekable());\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        ReadSupport<GenericRecord> readSupport;\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        readSupport = new AvroReadSupport<GenericRecord>(model);\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        conf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(new InitContext(conf, toSetMultiMap(fileMetadata), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(conf, fileMetadata, fileSchema, readContext);\n+        boolean strictTypeChecking = options.isEnabled(STRICT_TYPE_CHECKING, true);\n+        boolean filterRecords = options.useRecordFilter();\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO =\n+            columnIOFactory.getColumnIO(requestedSchema, fileSchema, strictTypeChecking);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          LOG.info(\"reading block\" + currentBlock);\n+          PageReadStore pages = reader.readNextRowGroup();\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, filterRecords ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"finish read \" + currentRow + \" rows\");\n+        }\n+      }\n+\n+      public Configuration setConf() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 3)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        return new BlockTracker(\n+            restriction, (long) getSize(file, restriction), getRecordCount(file, restriction));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      public long getRecordCount(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        long start = 0;\n+        long end = 0;\n+        start = restriction.getFrom();\n+        end = restriction.getTo();\n+        long recordCount = 0;\n+        for (long i = start; i < end; i++) {\n+          recordCount += reader.getRowGroups().get((int) i).getRowCount();\n+        }\n+        return recordCount;\n+      }\n+\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        InputFile inputFile = getInputFile(file);\n+        Configuration conf = setConf();\n+        ParquetReadOptions options = HadoopReadOptions.builder(conf).build();\n+        ParquetFileReader reader = ParquetFileReader.open(inputFile, options);\n+        double size = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          size += reader.getRowGroups().get((int) i).getTotalByteSize();\n+        }\n+        return size;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private static final Logger LOG = LoggerFactory.getLogger(BlockTracker.class);\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long work, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = work / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;\n+        if (progress > totalWork) {\n+          throw new IOException(\"Making progress out of range\");\n+        }\n+      }\n+\n+      @Override\n+      public Progress getProgress() {\n+        if (this.lastAttemptedOffset == null) {\n+          return Progress.from(0.0D, BigDecimal.valueOf(this.totalWork).doubleValue());\n+        } else {\n+          BigDecimal workRemaining =\n+              BigDecimal.valueOf(this.totalWork)\n+                  .subtract(BigDecimal.valueOf(this.progress), MathContext.DECIMAL128)\n+                  .max(BigDecimal.ZERO);\n+          BigDecimal work = BigDecimal.valueOf(this.totalWork);\n+          LOG.info(\"total work: \" + work + \" work remaining: \" + workRemaining);\n+          return Progress.from(\n+              work.subtract(workRemaining, MathContext.DECIMAL128).doubleValue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8194f52cc0971ba5f2befcf91aba01a5556485"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzY1MjUxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDoyMzoxMlrOHJTdDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMjo1MDowNFrOHKYcnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxNzk2NA==", "bodyText": "Please add javadoc above to explain what withSplit() will do.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479517964", "createdAt": "2020-08-28T20:23:12Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -133,15 +161,18 @@\n    * pattern).\n    */\n   public static Read read(Schema schema) {\n-    return new AutoValue_ParquetIO_Read.Builder().setSchema(schema).build();\n+    return new AutoValue_ParquetIO_Read.Builder().setSchema(schema).setSplittable(false).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0ODM0OQ==", "bodyText": "It seems like this comment is not addressed yet. Can you add related explanation(what's this option for and what will happens if the option is set to true) and code snippet(how to enable this option) into L89-L155? You can also link your design doc there if that helps end users to use this attribute.", "url": "https://github.com/apache/beam/pull/12223#discussion_r480648349", "createdAt": "2020-09-01T02:50:04Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -133,15 +161,18 @@\n    * pattern).\n    */\n   public static Read read(Schema schema) {\n-    return new AutoValue_ParquetIO_Read.Builder().setSchema(schema).build();\n+    return new AutoValue_ParquetIO_Read.Builder().setSchema(schema).setSplittable(false).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxNzk2NA=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzY1NTI4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDoyNDoxOFrOHJTeqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDoyNDoxOFrOHJTeqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxODM3Nw==", "bodyText": "Do we really need this log?", "url": "https://github.com/apache/beam/pull/12223#discussion_r479518377", "createdAt": "2020-08-28T20:24:18Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzY5MDMwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDozODowMFrOHJTztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDozODowMFrOHJTztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyMzc2NA==", "bodyText": "Same above. I'm thinking about whether we really these INFO log since it looks too much if per element per offset.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479523764", "createdAt": "2020-08-28T20:38:00Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzY5NjMxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo0MDozMlrOHJT3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTo1Nzo0NFrOHJVgTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyNDY2Mw==", "bodyText": "Same above.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479524663", "createdAt": "2020-08-28T20:40:32Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MTU2NQ==", "bodyText": "Changed all the log to debug", "url": "https://github.com/apache/beam/pull/12223#discussion_r479551565", "createdAt": "2020-08-28T21:57:44Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyNDY2Mw=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzY5OTkxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo0MTo1N1rOHJT5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTo1Nzo1N1rOHJVghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyNTE5NA==", "bodyText": "Any reason to use SPLIT_LIMIT / 1000?", "url": "https://github.com/apache/beam/pull/12223#discussion_r479525194", "createdAt": "2020-08-28T20:41:57Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MTYyMw==", "bodyText": "Sorry, was for the testing purpose", "url": "https://github.com/apache/beam/pull/12223#discussion_r479551623", "createdAt": "2020-08-28T21:57:57Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyNTE5NA=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzczNDg2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo1NjoyNFrOHJUO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjoxOTozNlrOHJV34Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMDcxNg==", "bodyText": "Can we have a simple AutoValue class for countAndSize?", "url": "https://github.com/apache/beam/pull/12223#discussion_r479530716", "createdAt": "2020-08-28T20:56:24Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MTk3MQ==", "bodyText": "It's a bit hard to do so since we need to access the footer of the file.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479551971", "createdAt": "2020-08-28T21:59:12Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMDcxNg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NTc4MA==", "bodyText": "Can you explain more about the difficulty on this? My point is we can create a simple object to represent the countAndSize, instead of a List.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479555780", "createdAt": "2020-08-28T22:12:45Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMDcxNg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NzYwMQ==", "bodyText": "Ok, I think I misunderstood it.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479557601", "createdAt": "2020-08-28T22:19:36Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMDcxNg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc0MDA5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo1ODo0MVrOHJUSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjowMDowMFrOHJVi5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMTU1NQ==", "bodyText": "To compare 2 double, you can use assertEquals(double expected, double actual, double epsilon)", "url": "https://github.com/apache/beam/pull/12223#discussion_r479531555", "createdAt": "2020-08-28T20:58:41Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "diffHunk": "@@ -69,6 +76,44 @@\n         \"Faraday\", \"Newton\", \"Bohr\", \"Galilei\", \"Maxwell\"\n       };\n \n+  @Test\n+  public void testBlockTracker() throws Exception {\n+    OffsetRange range = new OffsetRange(0, 1);\n+    ParquetIO.ReadFiles.BlockTracker tracker = new ParquetIO.ReadFiles.BlockTracker(range, 7, 3);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 6) < 0.01);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjIzMQ==", "bodyText": "Noted!", "url": "https://github.com/apache/beam/pull/12223#discussion_r479552231", "createdAt": "2020-08-28T22:00:00Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "diffHunk": "@@ -69,6 +76,44 @@\n         \"Faraday\", \"Newton\", \"Bohr\", \"Galilei\", \"Maxwell\"\n       };\n \n+  @Test\n+  public void testBlockTracker() throws Exception {\n+    OffsetRange range = new OffsetRange(0, 1);\n+    ParquetIO.ReadFiles.BlockTracker tracker = new ParquetIO.ReadFiles.BlockTracker(range, 7, 3);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 6) < 0.01);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMTU1NQ=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc0MzM2OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMDowNFrOHJUUTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjowMDoxN1rOHJVjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjEwOQ==", "bodyText": "assertEquals?", "url": "https://github.com/apache/beam/pull/12223#discussion_r479532109", "createdAt": "2020-08-28T21:00:04Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "diffHunk": "@@ -69,6 +76,44 @@\n         \"Faraday\", \"Newton\", \"Bohr\", \"Galilei\", \"Maxwell\"\n       };\n \n+  @Test\n+  public void testBlockTracker() throws Exception {\n+    OffsetRange range = new OffsetRange(0, 1);\n+    ParquetIO.ReadFiles.BlockTracker tracker = new ParquetIO.ReadFiles.BlockTracker(range, 7, 3);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 6) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted()) < 0.01);\n+    tracker.tryClaim((long) 0);\n+    tracker.makeProgress();\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 4) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted() - 2) < 0.01);\n+    assertThrows(RuntimeException.class, () -> tracker.tryClaim((long) 0));\n+    tracker.makeProgress();\n+    tracker.makeProgress();\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 0) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted() - 6) < 0.01);\n+    assertThrows(\"Making progress out of range\", IOException.class, () -> tracker.makeProgress());\n+  }\n+\n+  @Test\n+  public void testSplitBlockWithLimit() {\n+    ParquetIO.ReadFiles.SplitReadFn testFn = new ParquetIO.ReadFiles.SplitReadFn(null);\n+    ArrayList<BlockMetaData> blockList = new ArrayList<BlockMetaData>();\n+    ArrayList<OffsetRange> rangeList;\n+    BlockMetaData testBlock = mock(BlockMetaData.class);\n+    when(testBlock.getTotalByteSize()).thenReturn((long) 60);\n+    rangeList = testFn.splitBlockWithLimit(0, blockList.size(), blockList, 200);\n+    assertTrue(rangeList.isEmpty());\n+    for (int i = 0; i < 6; i++) {\n+      blockList.add(testBlock);\n+    }\n+    rangeList = testFn.splitBlockWithLimit(1, blockList.size(), blockList, 200);\n+    assertTrue(rangeList.get(0).getFrom() == (long) 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjMxOA==", "bodyText": "Okay!", "url": "https://github.com/apache/beam/pull/12223#discussion_r479552318", "createdAt": "2020-08-28T22:00:17Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "diffHunk": "@@ -69,6 +76,44 @@\n         \"Faraday\", \"Newton\", \"Bohr\", \"Galilei\", \"Maxwell\"\n       };\n \n+  @Test\n+  public void testBlockTracker() throws Exception {\n+    OffsetRange range = new OffsetRange(0, 1);\n+    ParquetIO.ReadFiles.BlockTracker tracker = new ParquetIO.ReadFiles.BlockTracker(range, 7, 3);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 6) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted()) < 0.01);\n+    tracker.tryClaim((long) 0);\n+    tracker.makeProgress();\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 4) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted() - 2) < 0.01);\n+    assertThrows(RuntimeException.class, () -> tracker.tryClaim((long) 0));\n+    tracker.makeProgress();\n+    tracker.makeProgress();\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 0) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted() - 6) < 0.01);\n+    assertThrows(\"Making progress out of range\", IOException.class, () -> tracker.makeProgress());\n+  }\n+\n+  @Test\n+  public void testSplitBlockWithLimit() {\n+    ParquetIO.ReadFiles.SplitReadFn testFn = new ParquetIO.ReadFiles.SplitReadFn(null);\n+    ArrayList<BlockMetaData> blockList = new ArrayList<BlockMetaData>();\n+    ArrayList<OffsetRange> rangeList;\n+    BlockMetaData testBlock = mock(BlockMetaData.class);\n+    when(testBlock.getTotalByteSize()).thenReturn((long) 60);\n+    rangeList = testFn.splitBlockWithLimit(0, blockList.size(), blockList, 200);\n+    assertTrue(rangeList.isEmpty());\n+    for (int i = 0; i < 6; i++) {\n+      blockList.add(testBlock);\n+    }\n+    rangeList = testFn.splitBlockWithLimit(1, blockList.size(), blockList, 200);\n+    assertTrue(rangeList.get(0).getFrom() == (long) 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjEwOQ=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc0NjcxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowMToyOVrOHJUWaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMjowMDoxMlrOHJVjEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjY0OQ==", "bodyText": "you can use 0L to represent that 0 is a long.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479532649", "createdAt": "2020-08-28T21:01:29Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "diffHunk": "@@ -69,6 +76,44 @@\n         \"Faraday\", \"Newton\", \"Bohr\", \"Galilei\", \"Maxwell\"\n       };\n \n+  @Test\n+  public void testBlockTracker() throws Exception {\n+    OffsetRange range = new OffsetRange(0, 1);\n+    ParquetIO.ReadFiles.BlockTracker tracker = new ParquetIO.ReadFiles.BlockTracker(range, 7, 3);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 6) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted()) < 0.01);\n+    tracker.tryClaim((long) 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjI3NA==", "bodyText": "Noted!", "url": "https://github.com/apache/beam/pull/12223#discussion_r479552274", "createdAt": "2020-08-28T22:00:12Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/test/java/org/apache/beam/sdk/io/parquet/ParquetIOTest.java", "diffHunk": "@@ -69,6 +76,44 @@\n         \"Faraday\", \"Newton\", \"Bohr\", \"Galilei\", \"Maxwell\"\n       };\n \n+  @Test\n+  public void testBlockTracker() throws Exception {\n+    OffsetRange range = new OffsetRange(0, 1);\n+    ParquetIO.ReadFiles.BlockTracker tracker = new ParquetIO.ReadFiles.BlockTracker(range, 7, 3);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkRemaining() - 6) < 0.01);\n+    assertTrue(Math.abs(tracker.getProgress().getWorkCompleted()) < 0.01);\n+    tracker.tryClaim((long) 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzMjY0OQ=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzgwNTgyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyNTo1MFrOHJU5Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzoyMDo1N1rOHJWvIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTU0Mg==", "bodyText": "It seems like in the DoFn body, you will call tracker.makeProgress() for each record. It doesn't work under fnapi context since we only expose limit APIs: \n  \n    \n      beam/sdks/java/fn-execution/src/main/java/org/apache/beam/sdk/fn/splittabledofn/RestrictionTrackers.java\n    \n    \n        Lines 91 to 104\n      in\n      7fb07ff\n    \n    \n    \n    \n\n        \n          \n           private static class RestrictionTrackerObserverWithProgress<RestrictionT, PositionT> \n        \n\n        \n          \n               extends RestrictionTrackerObserver<RestrictionT, PositionT> implements HasProgress { \n        \n\n        \n          \n            \n        \n\n        \n          \n             protected RestrictionTrackerObserverWithProgress( \n        \n\n        \n          \n                 RestrictionTracker<RestrictionT, PositionT> delegate, \n        \n\n        \n          \n                 ClaimObserver<PositionT> claimObserver) { \n        \n\n        \n          \n               super(delegate, claimObserver); \n        \n\n        \n          \n             } \n        \n\n        \n          \n            \n        \n\n        \n          \n             @Override \n        \n\n        \n          \n             public synchronized Progress getProgress() { \n        \n\n        \n          \n               return ((HasProgress) delegate).getProgress(); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           }", "url": "https://github.com/apache/beam/pull/12223#discussion_r479541542", "createdAt": "2020-08-28T21:25:50Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();\n+        countAndSize.add(recordCount);\n+        countAndSize.add(size);\n+        return countAndSize;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MTk5Nw==", "bodyText": "Do you mean that we do not pass in the restriction tracker created by the user to the DoFn but instead pass in a delegate ? If so, I think this is a significant limitation since that will not allow users to adequately customize the way RestrictionTracker is used.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479551997", "createdAt": "2020-08-28T21:59:15Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();\n+        countAndSize.add(recordCount);\n+        countAndSize.add(size);\n+        return countAndSize;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTU0Mg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1Mzk5MA==", "bodyText": "Yes, we wrap the user-defined tracker with certain locking guarantee.\ncc @lukecwik for exposing APIs discussion.\nThe purpose of wrapper is to reduce user effort on complex things, like locking. And in most case. we don't really expect the user to alter the tracker by calling non-exposing APIs.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479553990", "createdAt": "2020-08-28T22:06:08Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();\n+        countAndSize.add(recordCount);\n+        countAndSize.add(size);\n+        return countAndSize;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTU0Mg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1NDE4Mg==", "bodyText": "For any block based source (Avro, Parquet, etc), I think it's important to report an approximate progress within blocks instead of just reporting the progress of blocks. We do this for the current sources: https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/BlockBasedSource.java#L241\ncc: @lukecwik @robertwb", "url": "https://github.com/apache/beam/pull/12223#discussion_r479554182", "createdAt": "2020-08-28T22:06:47Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();\n+        countAndSize.add(recordCount);\n+        countAndSize.add(size);\n+        return countAndSize;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTU0Mg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2ODIwMQ==", "bodyText": "@chamikaramj Customizing the restriction tracker allows the user to mutate it's state in many ways and leads to lots of concurrency issues and also correctness guarantees.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479568201", "createdAt": "2020-08-28T23:03:06Z", "author": {"login": "lukecwik"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();\n+        countAndSize.add(recordCount);\n+        countAndSize.add(size);\n+        return countAndSize;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTU0Mg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MTc0NA==", "bodyText": "I agree that current implementation might be safer but seems like it significantly limits the usability of RestrictionTrackers as well. I think source authors are advanced users. So it might be OK to stay in the side of usability in some cases over safety. But this is debatable.\nAnother option might be to add a method to the RestrictionTracker to mark progress without claiming. We have such a method in the old RangeTracker interface: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/io/iobase.py#L393", "url": "https://github.com/apache/beam/pull/12223#discussion_r479571744", "createdAt": "2020-08-28T23:20:57Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();\n+        countAndSize.add(recordCount);\n+        countAndSize.add(size);\n+        return countAndSize;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTU0Mg=="}, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 403}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzgyNTU0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTozNDo0OVrOHJVE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTozNDo0OVrOHJVE4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0NDU0Ng==", "bodyText": "Also if makeProgress() is never called because of the guard you have, the progress will always be (0, totalWork), which is not correct to some extent.", "url": "https://github.com/apache/beam/pull/12223#discussion_r479544546", "createdAt": "2020-08-28T21:34:49Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -230,14 +279,255 @@ public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n \n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n+\n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.info(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.info(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (tracker instanceof BlockTracker) {\n+                ((BlockTracker) tracker).makeProgress();\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.info(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT / 1000)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        List<Double> recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.get(1)),\n+            Math.round(recordCountAndSize.get(0)));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).get(1);\n+      }\n+\n+      public List<Double> getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        List<Double> countAndSize = new ArrayList<>();\n+        countAndSize.add(recordCount);\n+        countAndSize.add(size);\n+        return countAndSize;\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;\n+        if (progress > totalWork) {\n+          throw new IOException(\"Making progress out of range\");\n+        }\n+      }\n+\n+      @Override\n+      public Progress getProgress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1149881eee8d9508f423a8a45306fd826ca8bbbd"}, "originalPosition": 410}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTM3MzkzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMjo0NDo0NVrOHKX_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMjo0NDo0NVrOHKX_6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0MTAwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // TODO:[BEAM-10842] A more precise progress update\n          \n          \n            \n                  // TODO(BEAM-10842): Refine the BlockTracker to provide better progress.", "url": "https://github.com/apache/beam/pull/12223#discussion_r480641000", "createdAt": "2020-09-01T02:44:45Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.debug(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        CountAndSize recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.getSize()),\n+            Math.round(recordCountAndSize.getCount()));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).getSize();\n+      }\n+\n+      public CountAndSize getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        CountAndSize countAndSize = CountAndSize.create(recordCount, size);\n+        return countAndSize;\n+      }\n+\n+      @AutoValue\n+      abstract static class CountAndSize {\n+        static CountAndSize create(double count, double size) {\n+          return new AutoValue_ParquetIO_ReadFiles_SplitReadFn_CountAndSize(count, size);\n+        }\n+\n+        abstract double getCount();\n+\n+        abstract double getSize();\n+      }\n+    }\n+\n+    public static class BlockTracker extends OffsetRangeTracker {\n+      private long totalWork;\n+      private long progress;\n+      private long approximateRecordSize;\n+\n+      public BlockTracker(OffsetRange range, long totalByteSize, long recordCount) {\n+        super(range);\n+        if (recordCount != 0) {\n+          this.approximateRecordSize = totalByteSize / recordCount;\n+          this.totalWork = approximateRecordSize * recordCount;\n+          this.progress = 0;\n+        }\n+      }\n+\n+      public void makeProgress() throws Exception {\n+        progress += approximateRecordSize;\n+        if (progress > totalWork) {\n+          throw new IOException(\"Making progress out of range\");\n+        }\n+      }\n+\n+      @Override\n+      // TODO:[BEAM-10842] A more precise progress update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 418}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTQ0OTE1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMjo1NDoyNFrOHKYzNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMjo1NDoyNFrOHKYzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY1NDEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while ((tracker).tryClaim(currentBlock)) {\n          \n          \n            \n                    while (tracker.tryClaim(currentBlock)) {", "url": "https://github.com/apache/beam/pull/12223#discussion_r480654132", "createdAt": "2020-09-01T02:54:24Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTUwMTk0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzowMToxN1rOHKZXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDoxMzozNFrOHLViLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY2MzM1Nw==", "bodyText": "IIUC, it seems like there is no need to track currentRow, we can do something like\nrecord = recordReader.read();\nwhile(record != null) {\n  // do something\n  record = recordReader.read();\n}\nIf that's true, we can have a follow-up PR to clean up.", "url": "https://github.com/apache/beam/pull/12223#discussion_r480663357", "createdAt": "2020-09-01T03:01:17Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNDAzNQ==", "bodyText": "I have tried that once and it might have some issue when reading out of the range, the original ParquetReader also tracked the row number when reading.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481334035", "createdAt": "2020-09-01T18:05:35Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY2MzM1Nw=="}, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0OTE5OQ==", "bodyText": "I see. Thanks for the explanation!", "url": "https://github.com/apache/beam/pull/12223#discussion_r481649199", "createdAt": "2020-09-02T04:13:34Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY2MzM1Nw=="}, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTUyMzMwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzowNDowNFrOHKZmOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzowNDowNFrOHKZmOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY2NzE5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n          \n          \n            \n                      FileIO.ReadableFile file,  OffsetRange restriction)\n          \n      \n    \n    \n  \n\nThe annotations like @Element and @Restriction are only for common APIs of a DoFn.", "url": "https://github.com/apache/beam/pull/12223#discussion_r480667195", "createdAt": "2020-09-01T03:04:04Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.debug(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        CountAndSize recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.getSize()),\n+            Math.round(recordCountAndSize.getCount()));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).getSize();\n+      }\n+\n+      public CountAndSize getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTUyNzQzOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzowNDo0MFrOHKZpSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNDoxNToyOFrOHKffxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY2Nzk3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  public CountAndSize getRecordCountAndSize(\n          \n          \n            \n                 private CountAndSize getRecordCountAndSize(\n          \n      \n    \n    \n  \n\ngetRecordCountAndSize is only for this DoFn, right?", "url": "https://github.com/apache/beam/pull/12223#discussion_r480667978", "createdAt": "2020-09-01T03:04:40Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.debug(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        CountAndSize recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.getSize()),\n+            Math.round(recordCountAndSize.getCount()));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).getSize();\n+      }\n+\n+      public CountAndSize getRecordCountAndSize(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDc2Mzg0NA==", "bodyText": "Yes, private should be used here.", "url": "https://github.com/apache/beam/pull/12223#discussion_r480763844", "createdAt": "2020-09-01T04:15:28Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.debug(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        CountAndSize recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.getSize()),\n+            Math.round(recordCountAndSize.getCount()));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).getSize();\n+      }\n+\n+      public CountAndSize getRecordCountAndSize(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY2Nzk3OA=="}, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTU1ODkyOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzowODozN1rOHKZ-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowNDoxMlrOHLCQBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY3MzQ2Mg==", "bodyText": "Any reason to use double for count and size? If that's not preferable, we can have a follow-up PR to clean up.", "url": "https://github.com/apache/beam/pull/12223#discussion_r480673462", "createdAt": "2020-09-01T03:08:37Z", "author": {"login": "boyuanzz"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.debug(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        CountAndSize recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.getSize()),\n+            Math.round(recordCountAndSize.getCount()));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).getSize();\n+      }\n+\n+      public CountAndSize getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        CountAndSize countAndSize = CountAndSize.create(recordCount, size);\n+        return countAndSize;\n+      }\n+\n+      @AutoValue\n+      abstract static class CountAndSize {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMzI1Mw==", "bodyText": "Because the return type for getSize is double.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481333253", "createdAt": "2020-09-01T18:04:12Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +279,259 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while ((tracker).tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\"skipping a corrupt record\");\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\"filtered record reader reached end of block\");\n+                break;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\"skipping record\");\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.debug(\"Finish processing \" + currentRow + \" rows from block \" + (currentBlock - 1));\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;\n+        for (long i = start; i < end; i++) {\n+          totalSize += blockList.get((int) i).getTotalByteSize();\n+          rangeEnd += 1;\n+          if (totalSize >= limit) {\n+            offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+            rangeStart = rangeEnd;\n+            totalSize = 0;\n+          }\n+        }\n+        if (totalSize != 0) {\n+          offsetList.add(new OffsetRange(rangeStart, rangeEnd));\n+        }\n+        return offsetList;\n+      }\n+\n+      @NewTracker\n+      public RestrictionTracker<OffsetRange, Long> newTracker(\n+          @Restriction OffsetRange restriction, @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        CountAndSize recordCountAndSize = getRecordCountAndSize(file, restriction);\n+        return new BlockTracker(\n+            restriction,\n+            Math.round(recordCountAndSize.getSize()),\n+            Math.round(recordCountAndSize.getCount()));\n+      }\n+\n+      @GetRestrictionCoder\n+      public OffsetRange.Coder getRestrictionCoder() {\n+        return new OffsetRange.Coder();\n+      }\n+\n+      @GetSize\n+      public double getSize(@Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        return getRecordCountAndSize(file, restriction).getSize();\n+      }\n+\n+      public CountAndSize getRecordCountAndSize(\n+          @Element FileIO.ReadableFile file, @Restriction OffsetRange restriction)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        double size = 0;\n+        double recordCount = 0;\n+        for (long i = restriction.getFrom(); i < restriction.getTo(); i++) {\n+          BlockMetaData block = reader.getRowGroups().get((int) i);\n+          recordCount += block.getRowCount();\n+          size += block.getTotalByteSize();\n+        }\n+        CountAndSize countAndSize = CountAndSize.create(recordCount, size);\n+        return countAndSize;\n+      }\n+\n+      @AutoValue\n+      abstract static class CountAndSize {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY3MzQ2Mg=="}, "originalCommit": {"oid": "8c80d30e298f8e1bd2495fa6a9998d36a8ddcd4b"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDQzMjM5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjowNzoyNFrOHLJ7bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoyOTowMVrOHLKcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTA1NA==", "bodyText": "looks like these two lines could be also replaced with getParquetFileReader().", "url": "https://github.com/apache/beam/pull/12223#discussion_r481459054", "createdAt": "2020-09-01T22:07:24Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +290,258 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cc8819a9b21e0cfc25a5f207e50dc0b2e9b746"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NTc0NA==", "bodyText": "The debug was from the Hadoop Parquet reader also. So in Hadoop the message is categorized in debug. So maybe they will allow the corrupted record to be skipped.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481465744", "createdAt": "2020-09-01T22:24:15Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +290,258 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTA1NA=="}, "originalCommit": {"oid": "11cc8819a9b21e0cfc25a5f207e50dc0b2e9b746"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NjIwOA==", "bodyText": "The options need to be used later so we might as well leave these two lines.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481466208", "createdAt": "2020-09-01T22:25:27Z", "author": {"login": "danielxjd"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +290,258 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTA1NA=="}, "originalCommit": {"oid": "11cc8819a9b21e0cfc25a5f207e50dc0b2e9b746"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NzQ4MA==", "bodyText": "The options need to be used later so we might as well leave these two lines.\n\nMake sense.", "url": "https://github.com/apache/beam/pull/12223#discussion_r481467480", "createdAt": "2020-09-01T22:29:01Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +290,258 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1OTA1NA=="}, "originalCommit": {"oid": "11cc8819a9b21e0cfc25a5f207e50dc0b2e9b746"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjg3MjU1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowMjo0MVrOHMKlsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowMjo0MVrOHMKlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODQ0OQ==", "bodyText": "We could remove rangeEnd here (and change rangeEnd at L478 to end.", "url": "https://github.com/apache/beam/pull/12223#discussion_r482518449", "createdAt": "2020-09-02T22:02:41Z", "author": {"login": "ihji"}, "path": "sdks/java/io/parquet/src/main/java/org/apache/beam/sdk/io/parquet/ParquetIO.java", "diffHunk": "@@ -229,15 +290,273 @@ public void populateDisplayData(DisplayData.Builder builder) {\n     public ReadFiles withAvroDataModel(GenericData model) {\n       return toBuilder().setAvroDataModel(model).build();\n     }\n+    /** Enable the Splittable reading. */\n+    public ReadFiles withSplit() {\n+      return toBuilder().setSplittable(true).build();\n+    }\n \n     @Override\n     public PCollection<GenericRecord> expand(PCollection<FileIO.ReadableFile> input) {\n       checkNotNull(getSchema(), \"Schema can not be null\");\n+      if (isSplittable()) {\n+        return input\n+            .apply(ParDo.of(new SplitReadFn(getAvroDataModel())))\n+            .setCoder(AvroCoder.of(getSchema()));\n+      }\n       return input\n           .apply(ParDo.of(new ReadFn(getAvroDataModel())))\n           .setCoder(AvroCoder.of(getSchema()));\n     }\n \n+    @DoFn.BoundedPerElement\n+    static class SplitReadFn extends DoFn<FileIO.ReadableFile, GenericRecord> {\n+      private Class<? extends GenericData> modelClass;\n+      private static final Logger LOG = LoggerFactory.getLogger(SplitReadFn.class);\n+      // Default initial splitting the file into blocks of 64MB. Unit of SPLIT_LIMIT is byte.\n+      private static final long SPLIT_LIMIT = 64000000;\n+\n+      SplitReadFn(GenericData model) {\n+\n+        this.modelClass = model != null ? model.getClass() : null;\n+      }\n+\n+      ParquetFileReader getParquetFileReader(FileIO.ReadableFile file) throws Exception {\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        return ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+      }\n+\n+      @ProcessElement\n+      public void processElement(\n+          @Element FileIO.ReadableFile file,\n+          RestrictionTracker<OffsetRange, Long> tracker,\n+          OutputReceiver<GenericRecord> outputReceiver)\n+          throws Exception {\n+        LOG.debug(\n+            \"start \"\n+                + tracker.currentRestriction().getFrom()\n+                + \" to \"\n+                + tracker.currentRestriction().getTo());\n+        ParquetReadOptions options = HadoopReadOptions.builder(getConfWithModelClass()).build();\n+        ParquetFileReader reader =\n+            ParquetFileReader.open(new BeamParquetInputFile(file.openSeekable()), options);\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        ReadSupport<GenericRecord> readSupport = new AvroReadSupport<GenericRecord>(model);\n+\n+        Filter filter = checkNotNull(options.getRecordFilter(), \"filter\");\n+        Configuration hadoopConf = ((HadoopReadOptions) options).getConf();\n+        FileMetaData parquetFileMetadata = reader.getFooter().getFileMetaData();\n+        MessageType fileSchema = parquetFileMetadata.getSchema();\n+        Map<String, String> fileMetadata = parquetFileMetadata.getKeyValueMetaData();\n+\n+        ReadSupport.ReadContext readContext =\n+            readSupport.init(\n+                new InitContext(\n+                    hadoopConf, Maps.transformValues(fileMetadata, ImmutableSet::of), fileSchema));\n+        ColumnIOFactory columnIOFactory = new ColumnIOFactory(parquetFileMetadata.getCreatedBy());\n+        MessageType requestedSchema = readContext.getRequestedSchema();\n+        RecordMaterializer<GenericRecord> recordConverter =\n+            readSupport.prepareForRead(hadoopConf, fileMetadata, fileSchema, readContext);\n+        reader.setRequestedSchema(requestedSchema);\n+        MessageColumnIO columnIO = columnIOFactory.getColumnIO(requestedSchema, fileSchema, true);\n+        long currentBlock = tracker.currentRestriction().getFrom();\n+        for (int i = 0; i < currentBlock; i++) {\n+          reader.skipNextRowGroup();\n+        }\n+\n+        while (tracker.tryClaim(currentBlock)) {\n+          PageReadStore pages = reader.readNextRowGroup();\n+          LOG.debug(\"block {} read in memory. row count = {}\", currentBlock, pages.getRowCount());\n+          currentBlock += 1;\n+          RecordReader<GenericRecord> recordReader =\n+              columnIO.getRecordReader(\n+                  pages, recordConverter, options.useRecordFilter() ? filter : FilterCompat.NOOP);\n+          long currentRow = 0;\n+          long totalRows = pages.getRowCount();\n+          while (currentRow < totalRows) {\n+            try {\n+              GenericRecord record;\n+              currentRow += 1;\n+              try {\n+                record = recordReader.read();\n+              } catch (RecordMaterializer.RecordMaterializationException e) {\n+                LOG.debug(\n+                    \"skipping a corrupt record at {} in block {} in file {}\",\n+                    currentRow,\n+                    currentBlock,\n+                    file.toString());\n+                continue;\n+              }\n+              if (record == null) {\n+                // only happens with FilteredRecordReader at end of block\n+                LOG.debug(\n+                    \"filtered record reader reached end of block in block {} in file {}\",\n+                    currentBlock,\n+                    file.toString());\n+                break;\n+              }\n+              if (recordReader.shouldSkipCurrentRecord()) {\n+                // this record is being filtered via the filter2 package\n+                LOG.debug(\n+                    \"skipping record at {} in block {} in file {}\",\n+                    currentRow,\n+                    currentBlock,\n+                    file.toString());\n+                continue;\n+              }\n+              outputReceiver.output(record);\n+            } catch (RuntimeException e) {\n+\n+              throw new ParquetDecodingException(\n+                  format(\n+                      \"Can not read value at %d in block %d in file %s\",\n+                      currentRow, currentBlock, file.toString()),\n+                  e);\n+            }\n+          }\n+          LOG.debug(\n+              \"Finish processing {} rows from block {} in file {}\",\n+              currentRow,\n+              currentBlock - 1,\n+              file.toString());\n+        }\n+      }\n+\n+      public Configuration getConfWithModelClass() throws Exception {\n+        Configuration conf = new Configuration();\n+        GenericData model = null;\n+        if (modelClass != null) {\n+          model = (GenericData) modelClass.getMethod(\"get\").invoke(null);\n+        }\n+        if (model != null\n+            && (model.getClass() == GenericData.class || model.getClass() == SpecificData.class)) {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, true);\n+        } else {\n+          conf.setBoolean(AvroReadSupport.AVRO_COMPATIBILITY, false);\n+        }\n+        return conf;\n+      }\n+\n+      @GetInitialRestriction\n+      public OffsetRange getInitialRestriction(@Element FileIO.ReadableFile file) throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        return new OffsetRange(0, reader.getRowGroups().size());\n+      }\n+\n+      @SplitRestriction\n+      public void split(\n+          @Restriction OffsetRange restriction,\n+          OutputReceiver<OffsetRange> out,\n+          @Element FileIO.ReadableFile file)\n+          throws Exception {\n+        ParquetFileReader reader = getParquetFileReader(file);\n+        List<BlockMetaData> rowGroups = reader.getRowGroups();\n+        for (OffsetRange offsetRange :\n+            splitBlockWithLimit(\n+                restriction.getFrom(), restriction.getTo(), rowGroups, SPLIT_LIMIT)) {\n+          out.output(offsetRange);\n+        }\n+      }\n+\n+      public ArrayList<OffsetRange> splitBlockWithLimit(\n+          long start, long end, List<BlockMetaData> blockList, long limit) {\n+        ArrayList<OffsetRange> offsetList = new ArrayList<OffsetRange>();\n+        long totalSize = 0;\n+        long rangeStart = start;\n+        long rangeEnd = start;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05bb16fe43f752588e2459bef947e0db89c77d0"}, "originalPosition": 364}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1020, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}