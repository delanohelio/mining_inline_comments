{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Mjc3ODYw", "number": 12367, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyMToxNVrOEVgaAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyMToxNVrOEVgaAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTg2NDk4OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzoyMToxNVrOG8TUDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0NzowNVrOHROKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4NDE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        getter = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, fieldName.replace(\"_\", \"\"));\n          \n          \n            \n                        getter = CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fieldName.replace(\"_\", \"\"));", "url": "https://github.com/apache/beam/pull/12367#discussion_r465884172", "createdAt": "2020-08-05T17:21:15Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -601,12 +601,26 @@ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundE\n     private Map<String, String> getMapping(Schema schema) {\n       Map<String, String> mapping = Maps.newHashMap();\n       for (Field field : schema.getFields()) {\n-        String underscore = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, field.getName());\n-        mapping.put(underscore, field.getName());\n+        String fieldName = field.getName();\n+        String getter;\n+        if (fieldName.contains(\"_\")) {\n+          if (Character.isLowerCase(fieldName.charAt(0))) {\n+            // field_name -> fieldName\n+            getter = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fieldName);\n+          } else {\n+            // FIELD_NAME -> fIELDNAME\n+            getter = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, fieldName.replace(\"_\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09041ce7f45bc9fb666a433412873b5515463676"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NjgwMA==", "bodyText": "When Avro compiles a schema to a Java class, it will take a field named FIELD_NAME and create a getter named getFIELDNAME.  So this method needs to produce getter field name fIELDNAME.\nAfter some trial and error, I found I could produce this if I remove the underscore and convert it from UPPER_CAMEL.  When I use UPPER_UNDERSCORE (with or without the underscore in the field name), it produces a getter field name of fieldName or fieldname, which won't map to the getFIELDNAME method.", "url": "https://github.com/apache/beam/pull/12367#discussion_r472156800", "createdAt": "2020-08-18T12:48:48Z", "author": {"login": "rworley-monster"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -601,12 +601,26 @@ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundE\n     private Map<String, String> getMapping(Schema schema) {\n       Map<String, String> mapping = Maps.newHashMap();\n       for (Field field : schema.getFields()) {\n-        String underscore = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, field.getName());\n-        mapping.put(underscore, field.getName());\n+        String fieldName = field.getName();\n+        String getter;\n+        if (fieldName.contains(\"_\")) {\n+          if (Character.isLowerCase(fieldName.charAt(0))) {\n+            // field_name -> fieldName\n+            getter = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fieldName);\n+          } else {\n+            // FIELD_NAME -> fIELDNAME\n+            getter = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, fieldName.replace(\"_\", \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4NDE3Mg=="}, "originalCommit": {"oid": "09041ce7f45bc9fb666a433412873b5515463676"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDAxNA==", "bodyText": "Ok, please update the comment to reflect that and add some tests to prevent a regression.", "url": "https://github.com/apache/beam/pull/12367#discussion_r474994014", "createdAt": "2020-08-21T22:21:18Z", "author": {"login": "lukecwik"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -601,12 +601,26 @@ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundE\n     private Map<String, String> getMapping(Schema schema) {\n       Map<String, String> mapping = Maps.newHashMap();\n       for (Field field : schema.getFields()) {\n-        String underscore = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, field.getName());\n-        mapping.put(underscore, field.getName());\n+        String fieldName = field.getName();\n+        String getter;\n+        if (fieldName.contains(\"_\")) {\n+          if (Character.isLowerCase(fieldName.charAt(0))) {\n+            // field_name -> fieldName\n+            getter = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fieldName);\n+          } else {\n+            // FIELD_NAME -> fIELDNAME\n+            getter = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, fieldName.replace(\"_\", \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4NDE3Mg=="}, "originalCommit": {"oid": "09041ce7f45bc9fb666a433412873b5515463676"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIwMDg1MQ==", "bodyText": "Sure, I will add tests for all of the cases as soon as I have time.  Hopefully within one or two weeks.", "url": "https://github.com/apache/beam/pull/12367#discussion_r481200851", "createdAt": "2020-09-01T14:55:52Z", "author": {"login": "rworley-monster"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -601,12 +601,26 @@ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundE\n     private Map<String, String> getMapping(Schema schema) {\n       Map<String, String> mapping = Maps.newHashMap();\n       for (Field field : schema.getFields()) {\n-        String underscore = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, field.getName());\n-        mapping.put(underscore, field.getName());\n+        String fieldName = field.getName();\n+        String getter;\n+        if (fieldName.contains(\"_\")) {\n+          if (Character.isLowerCase(fieldName.charAt(0))) {\n+            // field_name -> fieldName\n+            getter = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fieldName);\n+          } else {\n+            // FIELD_NAME -> fIELDNAME\n+            getter = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, fieldName.replace(\"_\", \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4NDE3Mg=="}, "originalCommit": {"oid": "09041ce7f45bc9fb666a433412873b5515463676"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxOTgwNg==", "bodyText": "I have added an extended comment for this conversion and updated the existing test Avro schema to cover the new mappable field name styles.  Can you please confirm that this is acceptable?", "url": "https://github.com/apache/beam/pull/12367#discussion_r487819806", "createdAt": "2020-09-14T10:47:05Z", "author": {"login": "rworley-monster"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/utils/AvroUtils.java", "diffHunk": "@@ -601,12 +601,26 @@ private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundE\n     private Map<String, String> getMapping(Schema schema) {\n       Map<String, String> mapping = Maps.newHashMap();\n       for (Field field : schema.getFields()) {\n-        String underscore = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, field.getName());\n-        mapping.put(underscore, field.getName());\n+        String fieldName = field.getName();\n+        String getter;\n+        if (fieldName.contains(\"_\")) {\n+          if (Character.isLowerCase(fieldName.charAt(0))) {\n+            // field_name -> fieldName\n+            getter = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, fieldName);\n+          } else {\n+            // FIELD_NAME -> fIELDNAME\n+            getter = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, fieldName.replace(\"_\", \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4NDE3Mg=="}, "originalCommit": {"oid": "09041ce7f45bc9fb666a433412873b5515463676"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 948, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}