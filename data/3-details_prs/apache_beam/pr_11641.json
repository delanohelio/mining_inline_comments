{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MjgxMDk1", "number": 11641, "title": "[BEAM-9931] Support custom Avro DatumReaders in AvroIO", "bodyText": "Similar to PR #11479, it would be useful to be able to explicitly pass a DatumReader factory to AvroIO, and have it use that instead of GenericDatumReader or SpecificDatumReader.\nThis PR adds withDatumReaderFactory to AvroIO and plumbs it through into AvroSource.\nR: @iemejia\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-05-08T15:05:32Z", "url": "https://github.com/apache/beam/pull/11641", "merged": true, "mergeCommit": {"oid": "494256fbc1528c1ca7d0740188c1d96e23a93756"}, "closed": true, "closedAt": "2020-05-13T20:37:29Z", "author": {"login": "steveniemitz"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfTSRGgBqjMzMTczMTE5NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg_BZMAFqTQxMTI3MzM3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72ccb34729215dc4400cc213809df84cc9a60f6c", "author": {"user": {"login": "steveniemitz", "name": "Steven Niemitz"}}, "url": "https://github.com/apache/beam/commit/72ccb34729215dc4400cc213809df84cc9a60f6c", "committedDate": "2020-05-04T14:36:39Z", "message": "Allow users of AvroIO to specify a custom DatumReader implementation"}, "afterCommit": {"oid": "c6ae3512abcf2a6d15ff4d386b7b2ae3e6dd7e3c", "author": {"user": {"login": "steveniemitz", "name": "Steven Niemitz"}}, "url": "https://github.com/apache/beam/commit/c6ae3512abcf2a6d15ff4d386b7b2ae3e6dd7e3c", "committedDate": "2020-05-08T15:05:46Z", "message": "Allow users of AvroIO to specify a custom DatumReader implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6ae3512abcf2a6d15ff4d386b7b2ae3e6dd7e3c", "author": {"user": {"login": "steveniemitz", "name": "Steven Niemitz"}}, "url": "https://github.com/apache/beam/commit/c6ae3512abcf2a6d15ff4d386b7b2ae3e6dd7e3c", "committedDate": "2020-05-08T15:05:46Z", "message": "Allow users of AvroIO to specify a custom DatumReader implementation"}, "afterCommit": {"oid": "9c3a87b588dfb498481fdffb6df4927ed791f38a", "author": {"user": {"login": "steveniemitz", "name": "Steven Niemitz"}}, "url": "https://github.com/apache/beam/commit/9c3a87b588dfb498481fdffb6df4927ed791f38a", "committedDate": "2020-05-10T20:13:01Z", "message": "Allow users of AvroIO to specify a custom DatumReader implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ca19961dc3b4182dc18e3bc160342bdeff2a5a", "author": {"user": {"login": "steveniemitz", "name": "Steven Niemitz"}}, "url": "https://github.com/apache/beam/commit/d2ca19961dc3b4182dc18e3bc160342bdeff2a5a", "committedDate": "2020-05-10T20:19:13Z", "message": "Allow users of AvroIO to specify a custom DatumReader implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c3a87b588dfb498481fdffb6df4927ed791f38a", "author": {"user": {"login": "steveniemitz", "name": "Steven Niemitz"}}, "url": "https://github.com/apache/beam/commit/9c3a87b588dfb498481fdffb6df4927ed791f38a", "committedDate": "2020-05-10T20:13:01Z", "message": "Allow users of AvroIO to specify a custom DatumReader implementation"}, "afterCommit": {"oid": "d2ca19961dc3b4182dc18e3bc160342bdeff2a5a", "author": {"user": {"login": "steveniemitz", "name": "Steven Niemitz"}}, "url": "https://github.com/apache/beam/commit/d2ca19961dc3b4182dc18e3bc160342bdeff2a5a", "committedDate": "2020-05-10T20:19:13Z", "message": "Allow users of AvroIO to specify a custom DatumReader implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzY2NjI2", "url": "https://github.com/apache/beam/pull/11641#pullrequestreview-409766626", "createdAt": "2020-05-12T07:25:30Z", "commit": {"oid": "d2ca19961dc3b4182dc18e3bc160342bdeff2a5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzY4Mzky", "url": "https://github.com/apache/beam/pull/11641#pullrequestreview-409768392", "createdAt": "2020-05-12T07:28:07Z", "commit": {"oid": "d2ca19961dc3b4182dc18e3bc160342bdeff2a5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzoyODowN1rOGT5i4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzoyODowN1rOGT5i4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxODk0Nw==", "bodyText": "Nice, avoids the input stream wrapper.", "url": "https://github.com/apache/beam/pull/11641#discussion_r423518947", "createdAt": "2020-05-12T07:28:07Z", "author": {"login": "RyanSkraba"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/AvroSource.java", "diffHunk": "@@ -576,11 +619,16 @@ private static InputStream decodeAsInputStream(byte[] data, String codec) throws\n       Schema readerSchema =\n           internOrParseSchemaString(\n               MoreObjects.firstNonNull(mode.readerSchemaString, writerSchemaString));\n-      this.reader =\n-          (mode.type == GenericRecord.class)\n-              ? new GenericDatumReader<T>(writerSchema, readerSchema)\n-              : new ReflectDatumReader<T>(writerSchema, readerSchema);\n-      this.decoder = DecoderFactory.get().binaryDecoder(decodeAsInputStream(data, codec), null);\n+\n+      this.reader = mode.createReader(writerSchema, readerSchema);\n+\n+      if (codec.equals(DataFileConstants.NULL_CODEC)) {\n+        // Avro can read from a byte[] using a more efficient implementation.  If the input is not\n+        // compressed, pass the data in directly.\n+        this.decoder = DecoderFactory.get().binaryDecoder(data, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ca19961dc3b4182dc18e3bc160342bdeff2a5a"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjczMzc1", "url": "https://github.com/apache/beam/pull/11641#pullrequestreview-411273375", "createdAt": "2020-05-13T20:26:21Z", "commit": {"oid": "d2ca19961dc3b4182dc18e3bc160342bdeff2a5a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyNjoyMVrOGVCSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyNjoyMVrOGVCSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDY3OA==", "bodyText": "Neat!", "url": "https://github.com/apache/beam/pull/11641#discussion_r424710678", "createdAt": "2020-05-13T20:26:21Z", "author": {"login": "iemejia"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/AvroSource.java", "diffHunk": "@@ -576,11 +619,16 @@ private static InputStream decodeAsInputStream(byte[] data, String codec) throws\n       Schema readerSchema =\n           internOrParseSchemaString(\n               MoreObjects.firstNonNull(mode.readerSchemaString, writerSchemaString));\n-      this.reader =\n-          (mode.type == GenericRecord.class)\n-              ? new GenericDatumReader<T>(writerSchema, readerSchema)\n-              : new ReflectDatumReader<T>(writerSchema, readerSchema);\n-      this.decoder = DecoderFactory.get().binaryDecoder(decodeAsInputStream(data, codec), null);\n+\n+      this.reader = mode.createReader(writerSchema, readerSchema);\n+\n+      if (codec.equals(DataFileConstants.NULL_CODEC)) {\n+        // Avro can read from a byte[] using a more efficient implementation.  If the input is not\n+        // compressed, pass the data in directly.\n+        this.decoder = DecoderFactory.get().binaryDecoder(data, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxODk0Nw=="}, "originalCommit": {"oid": "d2ca19961dc3b4182dc18e3bc160342bdeff2a5a"}, "originalPosition": 181}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4897, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}