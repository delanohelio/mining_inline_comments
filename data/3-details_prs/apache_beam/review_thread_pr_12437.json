{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNDE0Nzk3", "number": 12437, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMzowNToyOFrOEUOfPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjozMzowNlrOEUP1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjQ0MzUwOnYy", "diffSide": "RIGHT", "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMzowNToyOFrOG6ZCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyNDo0MlrOG7CHSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4MDg0MQ==", "bodyText": "maximum -> mean, across the doc.", "url": "https://github.com/apache/beam/pull/12437#discussion_r463880841", "createdAt": "2020-07-31T23:05:28Z", "author": {"login": "aaltay"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "diffHunk": "@@ -16,23 +16,64 @@ limitations under the License.\n -->\n \n # Mean\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.combiners.html?highlight=mean#apache_beam.transforms.combiners.Mean\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Mean\" >}}\n \n Transforms for computing the arithmetic mean of the elements in a collection,\n or the mean of the values associated with each key in a collection of\n key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [CombineGlobally](/documentation/transforms/python/aggregation/combineglobally) to combine elements.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the element with the maximum value in different ways.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22c689d2338080b2ed461893b13557c5b2692b3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MzgwMA==", "bodyText": "Thanks!", "url": "https://github.com/apache/beam/pull/12437#discussion_r464553800", "createdAt": "2020-08-03T17:24:42Z", "author": {"login": "davidcavazos"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "diffHunk": "@@ -16,23 +16,64 @@ limitations under the License.\n -->\n \n # Mean\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.combiners.html?highlight=mean#apache_beam.transforms.combiners.Mean\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Mean\" >}}\n \n Transforms for computing the arithmetic mean of the elements in a collection,\n or the mean of the values associated with each key in a collection of\n key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [CombineGlobally](/documentation/transforms/python/aggregation/combineglobally) to combine elements.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the element with the maximum value in different ways.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4MDg0MQ=="}, "originalCommit": {"oid": "e22c689d2338080b2ed461893b13557c5b2692b3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjY2NDkyOnYy", "diffSide": "RIGHT", "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjozMzowNlrOG6a1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyNDo1MFrOG7CHkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMDE4Mg==", "bodyText": "Replace \"avareage\" with \"average\"", "url": "https://github.com/apache/beam/pull/12437#discussion_r463910182", "createdAt": "2020-08-01T02:33:06Z", "author": {"login": "rosetn"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "diffHunk": "@@ -16,23 +16,64 @@ limitations under the License.\n -->\n \n # Mean\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.combiners.html?highlight=mean#apache_beam.transforms.combiners.Mean\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Mean\" >}}\n \n Transforms for computing the arithmetic mean of the elements in a collection,\n or the mean of the values associated with each key in a collection of\n key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [CombineGlobally](/documentation/transforms/python/aggregation/combineglobally) to combine elements.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the element with the maximum value in different ways.\n+\n+### Example 1: Maximum element in a PCollection\n+\n+We use `Mean.Globally()` to get the average of the elements from the *entire* `PCollection`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean.py\" mean_globally >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean_test.py\" mean_element >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean.py\" >}}\n+\n+### Example 2: Maximum elements for each key\n+\n+We use `Mean.PerKey()` to get the avareage of the elements for each unique key in a `PCollection` of key-values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22c689d2338080b2ed461893b13557c5b2692b3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1Mzg3NQ==", "bodyText": "Thanks!", "url": "https://github.com/apache/beam/pull/12437#discussion_r464553875", "createdAt": "2020-08-03T17:24:50Z", "author": {"login": "davidcavazos"}, "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "diffHunk": "@@ -16,23 +16,64 @@ limitations under the License.\n -->\n \n # Mean\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.combiners.html?highlight=mean#apache_beam.transforms.combiners.Mean\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Mean\" >}}\n \n Transforms for computing the arithmetic mean of the elements in a collection,\n or the mean of the values associated with each key in a collection of\n key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [CombineGlobally](/documentation/transforms/python/aggregation/combineglobally) to combine elements.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the element with the maximum value in different ways.\n+\n+### Example 1: Maximum element in a PCollection\n+\n+We use `Mean.Globally()` to get the average of the elements from the *entire* `PCollection`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean.py\" mean_globally >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean_test.py\" mean_element >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean.py\" >}}\n+\n+### Example 2: Maximum elements for each key\n+\n+We use `Mean.PerKey()` to get the avareage of the elements for each unique key in a `PCollection` of key-values.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMDE4Mg=="}, "originalCommit": {"oid": "e22c689d2338080b2ed461893b13557c5b2692b3"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 775, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}