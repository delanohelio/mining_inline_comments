{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjIyNjQz", "number": 12474, "title": "[BEAM-10650] OrderedListState API", "bodyText": "This PR adds the API and and in-memory implementation for the timestamp-ordered list state. The API is currently marked experimental and is still subject to change.", "createdAt": "2020-08-05T20:22:15Z", "url": "https://github.com/apache/beam/pull/12474", "merged": true, "mergeCommit": {"oid": "edb42952f6b0aa99477f5c7baca6d6a0d93deb4f"}, "closed": true, "closedAt": "2020-08-08T20:29:32Z", "author": {"login": "reuvenlax"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8BeEOgBqjM2MjYzNzE3MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8wbe6ABqjM2MzUzMTQyMzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db71322ad9a738d8edf08bf40bce0a87b34e725e", "author": {"user": {"login": "reuvenlax", "name": null}}, "url": "https://github.com/apache/beam/commit/db71322ad9a738d8edf08bf40bce0a87b34e725e", "committedDate": "2020-08-05T20:27:48Z", "message": "remove mapstate code"}, "afterCommit": {"oid": "dc72b71ecbcb2069a7fdbb3d2f5092ce0a42e236", "author": {"user": {"login": "reuvenlax", "name": null}}, "url": "https://github.com/apache/beam/commit/dc72b71ecbcb2069a7fdbb3d2f5092ce0a42e236", "committedDate": "2020-08-05T20:43:54Z", "message": "OrderedListState API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzYwMDg4", "url": "https://github.com/apache/beam/pull/12474#pullrequestreview-462760088", "createdAt": "2020-08-06T18:08:38Z", "commit": {"oid": "38a58fa67313c91fb86670fc74cfea3aa0f074df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowODozOFrOG8-tcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTozOTowOVrOG9BofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NTE4Ng==", "bodyText": "Need a readRangeLater(...) too", "url": "https://github.com/apache/beam/pull/12474#discussion_r466595186", "createdAt": "2020-08-06T18:08:38Z", "author": {"login": "dpmills"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+\n+  /** Read the entire list ordered by timestamp. */\n+  @Override\n+  Iterable<TimestampedValue<T>> read();\n+\n+  /**\n+   * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling\n+   * iterable.\n+   */\n+  Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  /** Clear all values in the list. */\n+  @Override\n+  void clear();\n+\n+  /**\n+   * Clear a timestamp-limited subrange of the list.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be removed from the\n+   * list.\n+   */\n+  void clearRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  @Override\n+  OrderedListState<T> readLater();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a58fa67313c91fb86670fc74cfea3aa0f074df"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NjUwMQ==", "bodyText": "If you are intentionally not implementing this for streaming DataflowRunner yet, better to throw an UnsupportedOperationException instead of returning null for these methods.\nAlso add a comment to the class saying that it's unsupported, maybe linking to a JIRA issue that tracks support", "url": "https://github.com/apache/beam/pull/12474#discussion_r466596501", "createdAt": "2020-08-06T18:10:59Z", "author": {"login": "dpmills"}, "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillStateInternals.java", "diffHunk": "@@ -456,6 +470,64 @@ protected WorkItemCommitRequest persistDirectly(WindmillStateCache.ForKey cache)\n     }\n   }\n \n+  private static class WindmillOrderedList<T> extends SimpleWindmillState\n+      implements OrderedListState<T> {\n+\n+    private final StateNamespace namespace;\n+    private final StateTag<OrderedListState<T>> spec;\n+    private final ByteString stateKey;\n+    private final String stateFamily;\n+    private final Coder<T> elemCoder;\n+\n+    private WindmillOrderedList(\n+        StateNamespace namespace,\n+        StateTag<OrderedListState<T>> spec,\n+        String stateFamily,\n+        Coder<T> elemCoder,\n+        boolean isNewKey) {\n+      this.namespace = namespace;\n+      this.spec = spec;\n+      this.stateKey = encodeKey(namespace, spec);\n+      this.stateFamily = stateFamily;\n+      this.elemCoder = elemCoder;\n+    }\n+\n+    @Override\n+    public Iterable<TimestampedValue<T>> read() {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a58fa67313c91fb86670fc74cfea3aa0f074df"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MDkxMg==", "bodyText": "Don't need to include the inherited methods here.  If you do include them, include all of them, including isEmpty", "url": "https://github.com/apache/beam/pull/12474#discussion_r466640912", "createdAt": "2020-08-06T19:35:03Z", "author": {"login": "dpmills"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+\n+  /** Read the entire list ordered by timestamp. */\n+  @Override\n+  Iterable<TimestampedValue<T>> read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a58fa67313c91fb86670fc74cfea3aa0f074df"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MzA2OQ==", "bodyText": "Using an exclusive upper limit means that Instant(Long.MAX_VALUE) isn't a supported timestamp.  Do we care?  Regardless, document the exact supported timestamps for this interface", "url": "https://github.com/apache/beam/pull/12474#discussion_r466643069", "createdAt": "2020-08-06T19:39:09Z", "author": {"login": "dpmills"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+\n+  /** Read the entire list ordered by timestamp. */\n+  @Override\n+  Iterable<TimestampedValue<T>> read();\n+\n+  /**\n+   * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a58fa67313c91fb86670fc74cfea3aa0f074df"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODY1NjUz", "url": "https://github.com/apache/beam/pull/12474#pullrequestreview-462865653", "createdAt": "2020-08-06T20:48:07Z", "commit": {"oid": "56a6a7c906ee8eb2c156c5812964d538401f317a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0ODowN1rOG9Du1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0ODowN1rOG9Du1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzQ2Mw==", "bodyText": "Add a method comment", "url": "https://github.com/apache/beam/pull/12474#discussion_r466677463", "createdAt": "2020-08-06T20:48:07Z", "author": {"login": "dpmills"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+  /**\n+   * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling\n+   * iterable. This means that only timestamps strictly less than\n+   * Instant.ofEpochMilli(Long.MAX_VALUE) can be used as timestamps.\n+   */\n+  Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  /**\n+   * Clear a timestamp-limited subrange of the list.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be removed from the\n+   * list.\n+   */\n+  void clearRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  OrderedListState<T> readRangeLater(Instant minTimestamp, Instant limitTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a6a7c906ee8eb2c156c5812964d538401f317a"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f0ebfeb48e3ed33610864362bea3818c6824520", "author": {"user": {"login": "reuvenlax", "name": null}}, "url": "https://github.com/apache/beam/commit/7f0ebfeb48e3ed33610864362bea3818c6824520", "committedDate": "2020-08-06T21:25:37Z", "message": "address code-review comment"}, "afterCommit": {"oid": "48aaa023f1327a554b20965883546d5748937878", "author": {"user": {"login": "reuvenlax", "name": null}}, "url": "https://github.com/apache/beam/commit/48aaa023f1327a554b20965883546d5748937878", "committedDate": "2020-08-07T06:38:01Z", "message": "OrderedListState API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "author": {"user": {"login": "reuvenlax", "name": null}}, "url": "https://github.com/apache/beam/commit/9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "committedDate": "2020-08-08T03:26:19Z", "message": "OrderedListState API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11ce792429582ece5370950bc9085e55fca71dff", "author": {"user": {"login": "reuvenlax", "name": null}}, "url": "https://github.com/apache/beam/commit/11ce792429582ece5370950bc9085e55fca71dff", "committedDate": "2020-08-07T21:44:25Z", "message": "add exclusions"}, "afterCommit": {"oid": "9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "author": {"user": {"login": "reuvenlax", "name": null}}, "url": "https://github.com/apache/beam/commit/9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "committedDate": "2020-08-08T03:26:19Z", "message": "OrderedListState API"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3739, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}