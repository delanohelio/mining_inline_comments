{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4ODM2Nzcz", "number": 12420, "title": "Extending ApproximateQuantiles functionality to deal with non-uniform weights.", "bodyText": "Extending functionality of ApproximateQuantiles PTransform to calculate quantiles of a data stream with custom weights. In case of weighted quantiles, input PCollection is expected to contain tuples of elements with their weight.\nAlso adding add_inputs function to the corresponding CombineFn for efficient processing of batched inputs.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-30T03:02:59Z", "url": "https://github.com/apache/beam/pull/12420", "merged": true, "mergeCommit": {"oid": "699f872ea1ef3bdb1588a029fc6b1e3185e986a6"}, "closed": true, "closedAt": "2020-08-13T21:30:45Z", "author": {"login": "iindyk"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc518pzgH2gAyNDU4ODM2NzczOjJlZDM2NTU3OWQ2ODNhNDZhNTc1YzUxM2Q0MzM1ODRkNTk1ODlmOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-SIaaAH2gAyNDU4ODM2NzczOmY4MjZhMDc1MmZkZDIzYWE0MmRlODcwYWFlNjRjYjQxNTQxMmQyMzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ed365579d683a46a575c513d433584d59589f8a", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/2ed365579d683a46a575c513d433584d59589f8a", "committedDate": "2020-07-30T02:10:59Z", "message": "Extending ApproximateQuantiles functionality to deal with non-uniform weights."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f907301a37b306b2f1c275e1d14ae07ab4d0ddb", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/2f907301a37b306b2f1c275e1d14ae07ab4d0ddb", "committedDate": "2020-07-30T02:19:03Z", "message": "Merge pull request #1 from iindyk/weighted_quantiles\n\nExtending ApproximateQuantiles functionality to deal with non-uniform weights."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f0a736fd3c552c6fa61e5c20cbb129b1a90414e", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/5f0a736fd3c552c6fa61e5c20cbb129b1a90414e", "committedDate": "2020-07-30T02:34:53Z", "message": "Extending ApproximateQuantiles functionality to deal with non-uniform weights."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad5a28a738622aad9049e05e192558c3a4873bd0", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/ad5a28a738622aad9049e05e192558c3a4873bd0", "committedDate": "2020-07-30T02:37:17Z", "message": "Extending ApproximateQuantiles functionality to deal with non-uniform weights."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/5e7edfd19de07eb41ebde667140ab715ad0655e7", "committedDate": "2020-07-30T13:52:16Z", "message": "Extending ApproximateQuantiles functionality to deal with non-uniform weights."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODM0MDUz", "url": "https://github.com/apache/beam/pull/12420#pullrequestreview-458834053", "createdAt": "2020-07-30T23:43:38Z", "commit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo0MzozOFrOG53cJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozMjoxMVrOG-jMmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMDM0Mw==", "bodyText": "Can we add weighted as the last argument? So we'll have a change that's backwards compatible", "url": "https://github.com/apache/beam/pull/12420#discussion_r463330343", "createdAt": "2020-07-30T23:43:38Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.\n       key: (optional) Key is  a mapping of elements to a comparable key, similar\n         to the key argument of Python's sorting methods.\n       reverse: (optional) whether to order things smallest to largest, rather\n         than largest to smallest\n     \"\"\"\n-    def __init__(self, num_quantiles, key=None, reverse=False):\n+    def __init__(self, num_quantiles, weighted=False, key=None, reverse=False):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMTY2OA==", "bodyText": "I don't know much math, so I wonder: How come the error bound for the approximation for weighted elements is not f(N)?", "url": "https://github.com/apache/beam/pull/12420#discussion_r463331668", "createdAt": "2020-07-30T23:48:09Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -398,8 +424,8 @@ class ApproximateQuantilesCombineFn(CombineFn):\n   http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.6.6513&rep=rep1\n   &type=pdf\n \n-  The default error bound is (1 / N), though in practice the accuracy\n-  tends to be much better.\n+  The default error bound is (1 / N) for uniformly distributed data and 1e-2 for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjU4Ng==", "bodyText": "Perhaps show an example of this in a code snippet?", "url": "https://github.com/apache/beam/pull/12420#discussion_r468062586", "createdAt": "2020-08-10T17:26:30Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MzAzNg==", "bodyText": "Perhaps under the ApproximateQuantiles transform pydoc, rather than on these args (so it'll work for perKey and globally)? Up to you.", "url": "https://github.com/apache/beam/pull/12420#discussion_r468063036", "createdAt": "2020-08-10T17:27:15Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -263,30 +265,38 @@ class Globally(PTransform):\n \n     Args:\n       num_quantiles: number of elements in the resulting quantiles values list.\n+      weighted: (optional) if set to True, the transform returns weighted\n+        quantiles. The input PCollection is then expected to contain tuples of\n+        input values with the corresponding weight.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjU4Ng=="}, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MTU2MQ==", "bodyText": "I wonder if it's possible to do this without duplicating the code in both branches? I understand that separating branches may help performance, but it decreases on readability...  WDYT?", "url": "https://github.com/apache/beam/pull/12420#discussion_r468241561", "createdAt": "2020-08-10T23:32:11Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -576,17 +633,34 @@ def _interpolate(self, i_buffers, count, step, offset):\n     weighted_element = next(sorted_elem)\n     current = weighted_element[1]\n     j = 0\n-    while j < count:\n-      target = j * step + offset\n-      j = j + 1\n-      try:\n-        while current <= target:\n-          weighted_element = next(sorted_elem)\n-          current = current + weighted_element[1]\n-      except StopIteration:\n-        pass\n-      new_elements.append(weighted_element[0])\n-    return new_elements\n+    if self._weighted:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7edfd19de07eb41ebde667140ab715ad0655e7"}, "originalPosition": 340}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2441e0d5263d4dda4d2043da24d7ba4e5e50cf47", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/2441e0d5263d4dda4d2043da24d7ba4e5e50cf47", "committedDate": "2020-08-12T00:28:23Z", "message": "Added example to ApproximateQuantiles docstring, made weighted argument the last and modified _interpolate for readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "170d0cb5a403b02129f9276dd26d9b8671d187a5", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/170d0cb5a403b02129f9276dd26d9b8671d187a5", "committedDate": "2020-08-12T00:51:28Z", "message": "Added example to ApproximateQuantiles docstring, made weighted argument the last and modified _interpolate for readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff2db21c821137abcd7a4a961cc25e8644e33022", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/ff2db21c821137abcd7a4a961cc25e8644e33022", "committedDate": "2020-08-12T02:20:46Z", "message": "Added example to ApproximateQuantiles docstring, made weighted argument the last and modified _interpolate for readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4f2a9b34ecd888ab8abd35cc8b65de190c561c6", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/b4f2a9b34ecd888ab8abd35cc8b65de190c561c6", "committedDate": "2020-08-12T15:54:02Z", "message": "Added example to ApproximateQuantiles docstring, made weighted argument the last and modified _interpolate for readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f826a0752fdd23aa42de870aae64cb415412d231", "author": {"user": {"login": "iindyk", "name": "Ihor Indyk"}}, "url": "https://github.com/apache/beam/commit/f826a0752fdd23aa42de870aae64cb415412d231", "committedDate": "2020-08-12T21:16:52Z", "message": "Added example to ApproximateQuantiles docstring, made weighted argument the last and modified _interpolate for readability."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3618, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}