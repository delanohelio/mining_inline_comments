{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzk4NzQ2", "number": 13593, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzowNDozMFrOFIAV6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToyOToyN1rOFIRrVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTM4NTM5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzowNDozMFrOIJsvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzowMDo1MFrOIKLqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ==", "bodyText": "Why is this in zetasql? How will it work for the calcite dialect?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547041171", "createdAt": "2020-12-22T03:04:30Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NzAxMw==", "bodyText": "I think the PR description mentions the reason: The Method will be passed to createUdfOperator in a future PR.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547087013", "createdAt": "2020-12-22T06:08:28Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzU1NA==", "bodyText": "How will that work for the calcite dialect?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547403554", "createdAt": "2020-12-22T17:25:41Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMjYzMA==", "bodyText": "There's nothing specific to ZetaSQL in this class, I can move it somewhere else.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547422630", "createdAt": "2020-12-22T18:05:28Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MTcyOQ==", "bodyText": "createUdfOperator is actually in ZetaSQL only now. But I agree we can move this code to the sql module and later might bring createUdfOperator to that module as well.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547451729", "createdAt": "2020-12-22T19:01:57Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2MzQ2MQ==", "bodyText": "Great. My concern here is that there already exists code to do this for Calcite SQL, if so we should just reuse that. It looks like Calcite SQL support just wasn't part of the prototype?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547463461", "createdAt": "2020-12-22T19:23:51Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NTY0MQ==", "bodyText": "My concern here is that there already exists code to do this for Calcite SQL, if so we should just reuse that.\n\nWe do something similar in Calcite SQL, but not exactly because the interfaces are different.\n\nIt looks like Calcite SQL support just wasn't part of the prototype?\n\nYeah, how (if at all) we want to integrate the new APIs into Calcite SQL is an open question.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547475641", "createdAt": "2020-12-22T19:47:39Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NzkyMg==", "bodyText": "What I hope happens it that the UDFs are loaded into the schema in BeamSqlEnvBuilder, then both Calcite and ZetaSQL dialects pull them from there.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547477922", "createdAt": "2020-12-22T19:53:00Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0NzY3Nw==", "bodyText": "What I hope happens it that the UDFs are loaded into the schema in BeamSqlEnvBuilder, then both Calcite and ZetaSQL dialects pull them from there.\n\nI will try doing that for the next PR in this series.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547547677", "createdAt": "2020-12-22T23:00:50Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MTE3MQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTcwNjM1OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowNzoxNFrOIJvhQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODowMjozNFrOIKD8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NjY1OA==", "bodyText": "Makes sense that it has to be public, but why cannot be static? (is it because that implementation overwrites the interface function which is not static)?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547086658", "createdAt": "2020-12-22T06:07:14Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Implementation logic for {@link ScalarFn}. */\n+public class ScalarFnImpl {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public and\n+   * non-static.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match\n+    // or it should be an extension of the other matches (which came from parent\n+    // classes).\n+    Method first = matches.iterator().next();\n+    for (Method other : matches) {\n+      if (!first.getName().equals(other.getName())\n+          || !Arrays.equals(first.getParameterTypes(), other.getParameterTypes())) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Found multiple methods annotated with @%s. [%s] and [%s]\",\n+                ScalarFn.ApplyMethod.class.getSimpleName(),\n+                ReflectHelpers.formatMethod(first),\n+                ReflectHelpers.formatMethod(other)));\n+      }\n+    }\n+\n+    // Method must be public and non-static.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMTM2NQ==", "bodyText": "Actually, in our current implementation, I don't think there is any reason it can't be static. I just tested it and it seems to work fine. I will remove this restriction.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547421365", "createdAt": "2020-12-22T18:02:34Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Implementation logic for {@link ScalarFn}. */\n+public class ScalarFnImpl {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public and\n+   * non-static.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match\n+    // or it should be an extension of the other matches (which came from parent\n+    // classes).\n+    Method first = matches.iterator().next();\n+    for (Method other : matches) {\n+      if (!first.getName().equals(other.getName())\n+          || !Arrays.equals(first.getParameterTypes(), other.getParameterTypes())) {\n+        throw new IllegalArgumentException(\n+            String.format(\n+                \"Found multiple methods annotated with @%s. [%s] and [%s]\",\n+                ScalarFn.ApplyMethod.class.getSimpleName(),\n+                ReflectHelpers.formatMethod(first),\n+                ReflectHelpers.formatMethod(other)));\n+      }\n+    }\n+\n+    // Method must be public and non-static.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NjY1OA=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTcwNzI4OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjowNzo1MVrOIJvh1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToxMTozNFrOIKGD_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NjgwNQ==", "bodyText": "What will happen if we choose one to execute (can print which is chosen and other methods into log)?", "url": "https://github.com/apache/beam/pull/13593#discussion_r547086805", "createdAt": "2020-12-22T06:07:51Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Implementation logic for {@link ScalarFn}. */\n+public class ScalarFnImpl {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public and\n+   * non-static.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match\n+    // or it should be an extension of the other matches (which came from parent\n+    // classes).\n+    Method first = matches.iterator().next();\n+    for (Method other : matches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMzM3Nw==", "bodyText": "This is standard inheritance, it shouldn't be any surprise to the user that a child class's implementation of a method overrides a parent class.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547413377", "createdAt": "2020-12-22T17:45:44Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Implementation logic for {@link ScalarFn}. */\n+public class ScalarFnImpl {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public and\n+   * non-static.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match\n+    // or it should be an extension of the other matches (which came from parent\n+    // classes).\n+    Method first = matches.iterator().next();\n+    for (Method other : matches) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NjgwNQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NTk5OA==", "bodyText": "makes sense!", "url": "https://github.com/apache/beam/pull/13593#discussion_r547455998", "createdAt": "2020-12-22T19:11:34Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/impl/ScalarFnImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.zetasql.translation.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Implementation logic for {@link ScalarFn}. */\n+public class ScalarFnImpl {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public and\n+   * non-static.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match\n+    // or it should be an extension of the other matches (which came from parent\n+    // classes).\n+    Method first = matches.iterator().next();\n+    for (Method other : matches) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NjgwNQ=="}, "originalCommit": {"oid": "b2e1054297df577385ad93c9f39281833354600b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjIyNTQ5OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/ScalarFnReflector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToyOToyN1rOIKGxiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMDowOToyOFrOIKMzlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzY1OQ==", "bodyText": "Is there a test you could add to validate inheritance works as expected here? (Will the outer most class always be first?)", "url": "https://github.com/apache/beam/pull/13593#discussion_r547467659", "createdAt": "2020-12-22T19:29:27Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/ScalarFnReflector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Reflection-based implementation logic for {@link ScalarFn}. */\n+public class ScalarFnReflector {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b593dcf66081d836876d48d67ac3d68340a8940"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NjQ4Nw==", "bodyText": "Added tests.", "url": "https://github.com/apache/beam/pull/13593#discussion_r547566487", "createdAt": "2020-12-23T00:09:28Z", "author": {"login": "ibzib"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/ScalarFnReflector.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.extensions.sql.udf.ScalarFn;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+\n+/** Reflection-based implementation logic for {@link ScalarFn}. */\n+public class ScalarFnReflector {\n+  /**\n+   * Gets the method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod} from {@code scalarFn}.\n+   *\n+   * <p>There must be exactly one method annotated with {@link\n+   * org.apache.beam.sdk.extensions.sql.udf.ScalarFn.ApplyMethod}, and it must be public.\n+   */\n+  public static Method getApplyMethod(ScalarFn scalarFn) {\n+    Class<? extends ScalarFn> clazz = scalarFn.getClass();\n+    Collection<Method> matches =\n+        ReflectHelpers.declaredMethodsWithAnnotation(\n+            ScalarFn.ApplyMethod.class, clazz, ScalarFn.class);\n+\n+    if (matches.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"No method annotated with @%s found in class %s.\",\n+              ScalarFn.ApplyMethod.class.getSimpleName(), clazz.getName()));\n+    }\n+\n+    // If we have at least one match, then either it should be the only match", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzY1OQ=="}, "originalCommit": {"oid": "3b593dcf66081d836876d48d67ac3d68340a8940"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2429, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}