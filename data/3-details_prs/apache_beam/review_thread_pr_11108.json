{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzA4OTQy", "number": 11108, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNzowNFrODngzwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowNDoyNlrODn8YSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzU4NTkzOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNzowNFrOF1jfJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo0NjoxNlrOF1mrdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDI2Mw==", "bodyText": "Unfortunately, we lose the type infos here. There is no way without calling a builder method to get the correct type.", "url": "https://github.com/apache/beam/pull/11108#discussion_r391700263", "createdAt": "2020-03-12T15:27:04Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -161,29 +167,33 @@ public static DefaultJobBundleFactory create(\n     this.stageIdGenerator = stageIdGenerator;\n     this.environmentExpirationMillis = getEnvironmentExpirationMillis(jobInfo);\n     this.loadBalanceBundles = shouldLoadBalanceBundles(jobInfo);\n+    this.environmentCacheLocks = createEnvironmentCacheLocks(getMaxEnvironmentClients(jobInfo));\n     this.environmentCaches =\n         createEnvironmentCaches(serverFactory -> serverInfo, getMaxEnvironmentClients(jobInfo));\n     this.availableCachesSemaphore = new Semaphore(environmentCaches.size(), true);\n     this.availableCaches = new LinkedBlockingDeque<>(environmentCaches);\n-    this.evictedActiveClients = Sets.newIdentityHashSet();\n+    this.evictedActiveClients = Sets.newConcurrentHashSet();\n+  }\n+\n+  private ImmutableList<Lock> createEnvironmentCacheLocks(int count) {\n+    ImmutableList.Builder<Lock> locksForCaches = ImmutableList.builder();\n+    for (int i = 0; i < count; i++) {\n+      final Lock refLock;\n+      if (environmentExpirationMillis > 0) {\n+        // The lock ensures there is no race condition between expiring an environment and a client\n+        // still attempting to use it, hence referencing it.\n+        refLock = new ReentrantLock(true);\n+      } else {\n+        refLock = NoopLock.get();\n+      }\n+      locksForCaches.add(refLock);\n+    }\n+    return locksForCaches.build();\n   }\n \n   private ImmutableList<LoadingCache<Environment, WrappedSdkHarnessClient>> createEnvironmentCaches(\n       ThrowingFunction<ServerFactory, ServerInfo> serverInfoCreator, int count) {\n-    CacheBuilder<Environment, WrappedSdkHarnessClient> builder =\n-        CacheBuilder.newBuilder()\n-            .removalListener(\n-                (RemovalNotification<Environment, WrappedSdkHarnessClient> notification) -> {\n-                  WrappedSdkHarnessClient client = notification.getValue();\n-                  int refCount = client.unref();\n-                  if (refCount > 0) {\n-                    LOG.warn(\n-                        \"Expiring environment {} with {} remaining bundle references. Taking note to clean it up during shutdown if the references are not removed by then.\",\n-                        notification.getKey(),\n-                        refCount);\n-                    evictedActiveClients.add(client);\n-                  }\n-                });\n+    CacheBuilder builder = CacheBuilder.newBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84e447410ba22827e635b82a4aeb9acc23a7daac"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MjU2Nw==", "bodyText": "This is resolved now.", "url": "https://github.com/apache/beam/pull/11108#discussion_r391752567", "createdAt": "2020-03-12T16:46:16Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -161,29 +167,33 @@ public static DefaultJobBundleFactory create(\n     this.stageIdGenerator = stageIdGenerator;\n     this.environmentExpirationMillis = getEnvironmentExpirationMillis(jobInfo);\n     this.loadBalanceBundles = shouldLoadBalanceBundles(jobInfo);\n+    this.environmentCacheLocks = createEnvironmentCacheLocks(getMaxEnvironmentClients(jobInfo));\n     this.environmentCaches =\n         createEnvironmentCaches(serverFactory -> serverInfo, getMaxEnvironmentClients(jobInfo));\n     this.availableCachesSemaphore = new Semaphore(environmentCaches.size(), true);\n     this.availableCaches = new LinkedBlockingDeque<>(environmentCaches);\n-    this.evictedActiveClients = Sets.newIdentityHashSet();\n+    this.evictedActiveClients = Sets.newConcurrentHashSet();\n+  }\n+\n+  private ImmutableList<Lock> createEnvironmentCacheLocks(int count) {\n+    ImmutableList.Builder<Lock> locksForCaches = ImmutableList.builder();\n+    for (int i = 0; i < count; i++) {\n+      final Lock refLock;\n+      if (environmentExpirationMillis > 0) {\n+        // The lock ensures there is no race condition between expiring an environment and a client\n+        // still attempting to use it, hence referencing it.\n+        refLock = new ReentrantLock(true);\n+      } else {\n+        refLock = NoopLock.get();\n+      }\n+      locksForCaches.add(refLock);\n+    }\n+    return locksForCaches.build();\n   }\n \n   private ImmutableList<LoadingCache<Environment, WrappedSdkHarnessClient>> createEnvironmentCaches(\n       ThrowingFunction<ServerFactory, ServerInfo> serverInfoCreator, int count) {\n-    CacheBuilder<Environment, WrappedSdkHarnessClient> builder =\n-        CacheBuilder.newBuilder()\n-            .removalListener(\n-                (RemovalNotification<Environment, WrappedSdkHarnessClient> notification) -> {\n-                  WrappedSdkHarnessClient client = notification.getValue();\n-                  int refCount = client.unref();\n-                  if (refCount > 0) {\n-                    LOG.warn(\n-                        \"Expiring environment {} with {} remaining bundle references. Taking note to clean it up during shutdown if the references are not removed by then.\",\n-                        notification.getKey(),\n-                        refCount);\n-                    evictedActiveClients.add(client);\n-                  }\n-                });\n+    CacheBuilder builder = CacheBuilder.newBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDI2Mw=="}, "originalCommit": {"oid": "84e447410ba22827e635b82a4aeb9acc23a7daac"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzU4OTgyOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyODowM1rOF1jhqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo0NjoyOFrOF1mr5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDkwNQ==", "bodyText": "Again, not nice but unfortunately in this order we can't use proper type information.", "url": "https://github.com/apache/beam/pull/11108#discussion_r391700905", "createdAt": "2020-03-12T15:28:03Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -192,6 +202,28 @@ public static DefaultJobBundleFactory create(\n     ImmutableList.Builder<LoadingCache<Environment, WrappedSdkHarnessClient>> caches =\n         ImmutableList.builder();\n     for (int i = 0; i < count; i++) {\n+      final Lock refLock = environmentCacheLocks.get(i);\n+      builder = builder.removalListener(\n+          notification -> {\n+            WrappedSdkHarnessClient client = (WrappedSdkHarnessClient) notification.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84e447410ba22827e635b82a4aeb9acc23a7daac"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MjY3OA==", "bodyText": "This is resolved now.", "url": "https://github.com/apache/beam/pull/11108#discussion_r391752678", "createdAt": "2020-03-12T16:46:28Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -192,6 +202,28 @@ public static DefaultJobBundleFactory create(\n     ImmutableList.Builder<LoadingCache<Environment, WrappedSdkHarnessClient>> caches =\n         ImmutableList.builder();\n     for (int i = 0; i < count; i++) {\n+      final Lock refLock = environmentCacheLocks.get(i);\n+      builder = builder.removalListener(\n+          notification -> {\n+            WrappedSdkHarnessClient client = (WrappedSdkHarnessClient) notification.getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDkwNQ=="}, "originalCommit": {"oid": "84e447410ba22827e635b82a4aeb9acc23a7daac"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjEwMzEzOnYy", "diffSide": "RIGHT", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowNDoyNlrOF2PRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxMjo0MToxMlrOF2ZYpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzY3MA==", "bodyText": "This isn't picking the correct lock, addressed in 5ebae2c", "url": "https://github.com/apache/beam/pull/11108#discussion_r392417670", "createdAt": "2020-03-13T19:04:26Z", "author": {"login": "tweise"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -406,8 +438,16 @@ public RemoteBundle getBundle(\n         availableCachesSemaphore.acquire();\n         // The blocking queue of caches for serving multiple bundles concurrently.\n         currentCache = availableCaches.take();\n-        client = currentCache.getUnchecked(executableStage.getEnvironment());\n-        client.ref();\n+        // Lock because the environment expiration can remove the ref for the client\n+        // which would close the underlying environment before we can ref it.\n+        Lock refLock = environmentCacheLocks.get(environmentIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec9b2b53a78b6212727c79630b68668fef7d3bc"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU4MzMzNA==", "bodyText": "Thanks for spotting this!", "url": "https://github.com/apache/beam/pull/11108#discussion_r392583334", "createdAt": "2020-03-14T12:41:12Z", "author": {"login": "mxm"}, "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -406,8 +438,16 @@ public RemoteBundle getBundle(\n         availableCachesSemaphore.acquire();\n         // The blocking queue of caches for serving multiple bundles concurrently.\n         currentCache = availableCaches.take();\n-        client = currentCache.getUnchecked(executableStage.getEnvironment());\n-        client.ref();\n+        // Lock because the environment expiration can remove the ref for the client\n+        // which would close the underlying environment before we can ref it.\n+        Lock refLock = environmentCacheLocks.get(environmentIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzY3MA=="}, "originalCommit": {"oid": "5ec9b2b53a78b6212727c79630b68668fef7d3bc"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1628, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}