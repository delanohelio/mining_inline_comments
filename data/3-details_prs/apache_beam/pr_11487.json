{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTU3MDgx", "number": 11487, "title": "[BEAM-6597, BEAM-6467] Add support for reporting monitoring infos to the Java SDK harness.", "bodyText": "This also exposes a requestProgress API on the RemoteBundle allowing runners to request progress.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-04-21T23:20:44Z", "url": "https://github.com/apache/beam/pull/11487", "merged": true, "mergeCommit": {"oid": "084ac147a4765b468a48fefb7f3a91729e26024c"}, "closed": true, "closedAt": "2020-04-22T14:39:38Z", "author": {"login": "lukecwik"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ8c6CAFqTM5Nzc0ODAyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ--ktgBqjMyNTg1ODU5NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzQ4MDIx", "url": "https://github.com/apache/beam/pull/11487#pullrequestreview-397748021", "createdAt": "2020-04-21T23:38:45Z", "commit": {"oid": "4f8d092681c71d41d2a43f3cb860b3031395df9d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzozODo0NVrOGJc8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzozODo0NVrOGJc8RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDU0OQ==", "bodyText": "Are these values likely to easily change? You could consider writing new matchers in MonitoringInfoMatchers to match that the values are non 0 or something instead to make it easier to maintain.\nOr write matchers that just verify a few fields, unless you really want to verify everything is set on every MonitoringInfo. Might also make it simpler to maintain. Unless you think they are all relevant. Up to your discretion here.", "url": "https://github.com/apache/beam/pull/11487#discussion_r412564549", "createdAt": "2020-04-21T23:38:45Z", "author": {"login": "ajamato"}, "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/RemoteExecutionTest.java", "diffHunk": "@@ -630,72 +644,100 @@ public void process(ProcessContext ctxt) {\n               (Coder<WindowedValue<?>>) remoteOutputCoder.getValue(), outputContents::add));\n     }\n \n-    Iterable<String> sideInputData = Arrays.asList(\"A\", \"B\", \"C\");\n+    final String testPTransformId = \"create/ParMultiDo(Metrics)\";\n+    BundleProgressHandler progressHandler =\n+        new BundleProgressHandler() {\n+          @Override\n+          public void onProgress(ProcessBundleProgressResponse response) {\n+            MetricsDoFn.ALLOW_COMPLETION.get(metricsDoFn.uuid).countDown();\n+            List<Matcher<MonitoringInfo>> matchers = new ArrayList<>();\n \n-    StateRequestHandler stateRequestHandler =\n-        StateRequestHandlers.forSideInputHandlerFactory(\n-            descriptor.getSideInputSpecs(),\n-            new SideInputHandlerFactory() {\n-              @Override\n-              public <V, W extends BoundedWindow>\n-                  IterableSideInputHandler<V, W> forIterableSideInput(\n-                      String pTransformId,\n-                      String sideInputId,\n-                      Coder<V> elementCoder,\n-                      Coder<W> windowCoder) {\n-                throw new UnsupportedOperationException();\n-              }\n+            // We expect all user counters except for the ones in @FinishBundle\n+            // Since non-user metrics are registered at bundle creation time, they will still report\n+            // values most of which will be 0.\n \n-              @Override\n-              public <K, V, W extends BoundedWindow>\n-                  MultimapSideInputHandler<K, V, W> forMultimapSideInput(\n-                      String pTransformId,\n-                      String sideInputId,\n-                      KvCoder<K, V> elementCoder,\n-                      Coder<W> windowCoder) {\n-                return new MultimapSideInputHandler<K, V, W>() {\n-                  @Override\n-                  public Iterable<V> get(BoundedWindow window) {\n-                    return null;\n-                  }\n+            SimpleMonitoringInfoBuilder builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_SUM_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME, MetricsDoFn.PROCESS_USER_COUNTER_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64SumValue(1);\n+            matchers.add(MonitoringInfoMatchers.matchSetFields(builder.build()));\n \n-                  @Override\n-                  public Coder<K> keyCoder() {\n-                    return elementCoder.getKeyCoder();\n-                  }\n+            builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_SUM_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(MonitoringInfoConstants.Labels.NAME, MetricsDoFn.START_USER_COUNTER_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64SumValue(10);\n+            matchers.add(MonitoringInfoMatchers.matchSetFields(builder.build()));\n \n-                  @Override\n-                  public Coder<V> valueCoder() {\n-                    return elementCoder.getValueCoder();\n-                  }\n+            builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_SUM_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME, MetricsDoFn.FINISH_USER_COUNTER_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            matchers.add(not(MonitoringInfoMatchers.matchSetFields(builder.build())));\n \n-                  @Override\n-                  public Iterable<V> get(K key, W window) {\n-                    return (Iterable) sideInputData;\n-                  }\n-                };\n-              }\n-            });\n+            // User Distributions.\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_DISTRIBUTION_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME,\n+                    MetricsDoFn.PROCESS_USER_DISTRIBUTION_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64DistributionValue(DistributionData.create(1, 1, 1, 1));\n+            matchers.add(MonitoringInfoMatchers.matchSetFields(builder.build()));\n \n-    String testPTransformId = \"create/ParMultiDo(Anonymous)\";\n-    BundleProgressHandler progressHandler =\n-        new BundleProgressHandler() {\n-          @Override\n-          public void onProgress(ProcessBundleProgressResponse progress) {}\n+            builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_DISTRIBUTION_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME, MetricsDoFn.START_USER_DISTRIBUTION_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64DistributionValue(DistributionData.create(10, 1, 10, 10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8d092681c71d41d2a43f3cb860b3031395df9d"}, "originalPosition": 264}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d34c4cbca1a2127b62d76b3d958096d847d938d4", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/d34c4cbca1a2127b62d76b3d958096d847d938d4", "committedDate": "2020-04-22T02:36:01Z", "message": "[BEAM-6597, BEAM-6467] Add support for reporting monitoring infos to the Java SDK harness."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "committedDate": "2020-04-22T02:36:01Z", "message": "fixup! Fix spotbugs failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f8d092681c71d41d2a43f3cb860b3031395df9d", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/4f8d092681c71d41d2a43f3cb860b3031395df9d", "committedDate": "2020-04-21T23:14:18Z", "message": "[BEAM-6597, BEAM-6467] Add support for reporting monitoring infos to the Java SDK harness."}, "afterCommit": {"oid": "c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "committedDate": "2020-04-22T02:36:01Z", "message": "fixup! Fix spotbugs failures"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4368, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}