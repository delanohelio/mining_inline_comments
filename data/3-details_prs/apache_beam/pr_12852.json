{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjA1OTM5", "number": 12852, "title": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requ\u2026", "bodyText": "\u2026ests for Java SDK\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-09-15T22:07:59Z", "url": "https://github.com/apache/beam/pull/12852", "merged": true, "mergeCommit": {"oid": "cd13f6e7e619a50cecf435c1b3c9b0285769a339"}, "closed": true, "closedAt": "2021-01-22T01:15:55Z", "author": {"login": "ihji"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJPRZgABqjM3NzA1MTUyMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdydROzgH2gAyNDg3NjA1OTM5OmI0NGQ5Mjg3MTVlNjFkOTA2ZWViNTdlNDU4YjQ0YWZjYTQxNDQwMGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d25a6992c27a114bfbc59e23b2277f4dfca1efa", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/2d25a6992c27a114bfbc59e23b2277f4dfca1efa", "committedDate": "2020-09-15T22:06:45Z", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK"}, "afterCommit": {"oid": "bf75bf2414838f3edb83790963d3e8dd6e589039", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/bf75bf2414838f3edb83790963d3e8dd6e589039", "committedDate": "2020-09-15T22:10:01Z", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODUzMjEy", "url": "https://github.com/apache/beam/pull/12852#pullrequestreview-494853212", "createdAt": "2020-09-23T16:44:13Z", "commit": {"oid": "bf75bf2414838f3edb83790963d3e8dd6e589039"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0NDoxM1rOHW3a9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0ODoxOFrOHW3ktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczODc0Mw==", "bodyText": "Is there a pattern here in java for this. I.e. * MILLIS_PER_SEC. Or converting to duration objects and comparing those?", "url": "https://github.com/apache/beam/pull/12852#discussion_r493738743", "createdAt": "2020-09-23T16:44:13Z", "author": {"login": "ajamato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -150,24 +143,42 @@ public void finishBundle(FinishBundleContext context) throws Exception {\n     for (ValueInSingleWindow<ErrorT> row : failedInserts) {\n       context.output(failedOutputTag, row.getValue(), row.getTimestamp(), row.getWindow());\n     }\n-\n-    long currentTimeMillis = System.currentTimeMillis();\n-    if (histogram.getTotalCount() > 0\n-        && (currentTimeMillis - lastReportedSystemClockMillis)\n-            > options.getLatencyLoggingFrequency() * 1000L) {\n-      logPercentiles();\n-      histogram.clear();\n-      lastReportedSystemClockMillis = currentTimeMillis;\n-    }\n+    reportStreamingApiLogging(options);\n   }\n \n-  private void logPercentiles() {\n-    LOG.info(\n-        \"Total number of streaming insert requests: {}, P99: {}ms, P90: {}ms, P50: {}ms\",\n-        histogram.getTotalCount(),\n-        DoubleMath.roundToInt(histogram.p99(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p90(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p50(), RoundingMode.HALF_UP));\n+  private void reportStreamingApiLogging(BigQueryOptions options) {\n+    if (reportingLock.tryLock()) {\n+      try {\n+        long currentTimeMillis = System.currentTimeMillis();\n+        if (currentTimeMillis - lastReportedSystemClockMillis\n+            > options.getBqStreamingApiLoggingFrequencySec() * 1000L) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf75bf2414838f3edb83790963d3e8dd6e589039"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTIzOQ==", "bodyText": "Please make this message mention BigQuery", "url": "https://github.com/apache/beam/pull/12852#discussion_r493741239", "createdAt": "2020-09-23T16:48:18Z", "author": {"login": "ajamato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -150,24 +143,42 @@ public void finishBundle(FinishBundleContext context) throws Exception {\n     for (ValueInSingleWindow<ErrorT> row : failedInserts) {\n       context.output(failedOutputTag, row.getValue(), row.getTimestamp(), row.getWindow());\n     }\n-\n-    long currentTimeMillis = System.currentTimeMillis();\n-    if (histogram.getTotalCount() > 0\n-        && (currentTimeMillis - lastReportedSystemClockMillis)\n-            > options.getLatencyLoggingFrequency() * 1000L) {\n-      logPercentiles();\n-      histogram.clear();\n-      lastReportedSystemClockMillis = currentTimeMillis;\n-    }\n+    reportStreamingApiLogging(options);\n   }\n \n-  private void logPercentiles() {\n-    LOG.info(\n-        \"Total number of streaming insert requests: {}, P99: {}ms, P90: {}ms, P50: {}ms\",\n-        histogram.getTotalCount(),\n-        DoubleMath.roundToInt(histogram.p99(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p90(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p50(), RoundingMode.HALF_UP));\n+  private void reportStreamingApiLogging(BigQueryOptions options) {\n+    if (reportingLock.tryLock()) {\n+      try {\n+        long currentTimeMillis = System.currentTimeMillis();\n+        if (currentTimeMillis - lastReportedSystemClockMillis\n+            > options.getBqStreamingApiLoggingFrequencySec() * 1000L) {\n+          StringBuilder logMessage = new StringBuilder();\n+          logMessage.append(\n+              String.format(\n+                  \"[Streaming Insert API Statistics since %s]\\n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf75bf2414838f3edb83790963d3e8dd6e589039"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf75bf2414838f3edb83790963d3e8dd6e589039", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/bf75bf2414838f3edb83790963d3e8dd6e589039", "committedDate": "2020-09-15T22:10:01Z", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK"}, "afterCommit": {"oid": "f273f02affdb081db21d34db297190387b715a24", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/f273f02affdb081db21d34db297190387b715a24", "committedDate": "2020-12-05T01:20:39Z", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/014c76c49523172c367079001f1a525c5f3387a9", "committedDate": "2021-01-20T03:39:29Z", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f273f02affdb081db21d34db297190387b715a24", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/f273f02affdb081db21d34db297190387b715a24", "committedDate": "2020-12-05T01:20:39Z", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK"}, "afterCommit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/014c76c49523172c367079001f1a525c5f3387a9", "committedDate": "2021-01-20T03:39:29Z", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNzE4MjY1", "url": "https://github.com/apache/beam/pull/12852#pullrequestreview-572718265", "createdAt": "2021-01-20T22:54:16Z", "commit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMjo1NDoxN1rOIXWxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMzozNDoxMlrOIXXyLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM2MTIzNg==", "bodyText": "Remove space from start of string.\nPlease call this API_REQUEST_LATENCIES_URN latencies. Rather than HISTOGRAM_URN", "url": "https://github.com/apache/beam/pull/12852#discussion_r561361236", "createdAt": "2021-01-20T22:54:17Z", "author": {"login": "ajamato"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LatencyRecordingHttpRequestInitializer.java", "diffHunk": "@@ -31,6 +31,7 @@\n \n /** HttpRequestInitializer for recording request to response latency of Http-based API calls. */\n public class LatencyRecordingHttpRequestInitializer implements HttpRequestInitializer {\n+  // TODO: Import the URN from MonitoringInfoConstants.Urns when it's available\n   public static final String HISTOGRAM_URN = \" beam:metric:io:api_request_latencies:v1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM2MzAyMg==", "bodyText": "I feel like KV isn't an appropriate type here. Isn't there a built in Pair or Tuple we could use in Java instead?\nAs KV is designed for pcollections. I see a org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.util.Pair being used in the repo:\nhttps://github.com/apache/beam/search?q=%22Pair%3C%22", "url": "https://github.com/apache/beam/pull/12852#discussion_r561363022", "createdAt": "2021-01-20T22:58:12Z", "author": {"login": "ajamato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -70,6 +73,15 @@\n   /** Tracks bytes written, exposed as \"ByteCount\" Counter. */\n   private Counter byteCounter = SinkMetrics.bytesWritten();\n \n+  private Set<KV<String, String>> metricFilter =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MDA5MQ==", "bodyText": "Since you are instantiing the latency monitoring info, please add a MonitoringInfoSpec for it, and pull it its urn as the constant here\n\n  \n    \n      beam/model/pipeline/src/main/proto/metrics.proto\n    \n    \n         Line 69\n      in\n      eca935b\n    \n    \n    \n    \n\n        \n          \n           USER_SUM_INT64 = 0 [(monitoring_info_spec) = { \n        \n    \n  \n\n\nThis would be ideal, as we should not instantiate metrics for URNs without a MonitoringInfoSpec.\nIt should be very similar to the API_REQUEST_COUNT, without STATUS label, a different URN, and a histogram type\ni.e. you can use\nAPI_REQUEST_LATENCIES = 20 [(monitoring_info_spec) = {\n  urn: \"beam:metric:io:api_request_latencies:v1\",\n  type: \"beam:metrics:histogram_int64:v1\",\n  required_labels: [\n    \"SERVICE\",\n    \"METHOD\",\n    \"RESOURCE\",\n    \"PTRANSFORM\"\n  ],\n  annotations: [\n     {\n        key: \"description\",\n        value: \"Histogram counts for request latencies made to an IO\u2019s service APIs to batch read or write elements.\"\n    }, \n    {\n      key: \"units\",\n      value: \"Milliseconds\"\n    },\n    {\n      key: \"process_metric\",  // Should be reported as a process metric\n                              // instead of a bundle metric\n      value: \"true\"\n    }\n  ]\n}];", "url": "https://github.com/apache/beam/pull/12852#discussion_r561370091", "createdAt": "2021-01-20T23:15:31Z", "author": {"login": "ajamato"}, "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LatencyRecordingHttpRequestInitializer.java", "diffHunk": "@@ -31,6 +31,7 @@\n \n /** HttpRequestInitializer for recording request to response latency of Http-based API calls. */\n public class LatencyRecordingHttpRequestInitializer implements HttpRequestInitializer {\n+  // TODO: Import the URN from MonitoringInfoConstants.Urns when it's available\n   public static final String HISTOGRAM_URN = \" beam:metric:io:api_request_latencies:v1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3NzM2Mg==", "bodyText": "HashSet metricFilter\nI think it would make more sense to make the metricFilter just be a Set of MetricNames as well.  MetricName has a hash code so you can do efficient set lookups this way as well. It is used with Map types as a key normally, so this should work.\nAlso, make the metric  you are defining uses a MonitoringInfoMetricName, which doesn't have a name+namespace concept, it instead has a urn and labels. Instantiate a MonitoringInfoMetricName for it using the full URN and labels. Don't parse the URN and put it in a MetricName as a namespace+name\n\n  \n    \n      beam/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MonitoringInfoMetricName.java\n    \n    \n         Line 105\n      in\n      a724602\n    \n    \n    \n    \n\n        \n          \n           public boolean equals(@Nullable Object o) {", "url": "https://github.com/apache/beam/pull/12852#discussion_r561377362", "createdAt": "2021-01-20T23:32:53Z", "author": {"login": "ajamato"}, "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MetricsContainerImpl.java", "diffHunk": "@@ -411,20 +412,23 @@ public int hashCode() {\n   }\n \n   /**\n-   * Match a MetricName with a given namespace and a name. If the namespace or the name is null, it\n-   * will be ignored for the match.\n+   * Match a MetricName with a given metric filter. If the metric filter is null, the method always\n+   * returns true.\n    */\n   private boolean matchMetricName(\n-      MetricName metricName, @Nullable String namespace, @Nullable String name) {\n-    return (namespace == null || namespace.equals(metricName.getNamespace()))\n-        && (name == null || name.equals(metricName.getName()));\n+      MetricName metricName, @Nullable Set<KV<String, String>> metricFilter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3NzgzOQ==", "bodyText": "It looks like you are parsing the URN and treating it as if it were the \"namespace\" and \"name\" of the metric.\nHowever, this metric does not have a namespace+name, and should not be modeled as such.\nRemember, namespace+name is a concept that only applies to user defined metrics. The namespace and name are simply labels populated with the keys \"namespace\" and \"name\"\nSee the MonitoringInfoSpec on USER_SUM_INT64\n\n  \n    \n      beam/model/pipeline/src/main/proto/metrics.proto\n    \n    \n         Line 69\n      in\n      eca935b\n    \n    \n    \n    \n\n        \n          \n           USER_SUM_INT64 = 0 [(monitoring_info_spec) = { \n        \n    \n  \n\n\nThis metric should be identified using the urn, and it's labels.\nInstantiate a MonitoringInfoMetricName for it instead, and update the comparison logic to just filter using MetricNames (MonitoringInfoMetricName is a subclass of MetricName).", "url": "https://github.com/apache/beam/pull/12852#discussion_r561377839", "createdAt": "2021-01-20T23:34:12Z", "author": {"login": "ajamato"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -70,6 +73,15 @@\n   /** Tracks bytes written, exposed as \"ByteCount\" Counter. */\n   private Counter byteCounter = SinkMetrics.bytesWritten();\n \n+  private Set<KV<String, String>> metricFilter =\n+      ImmutableSet.of(\n+          KV.of(\n+              LatencyRecordingHttpRequestInitializer.HISTOGRAM_URN.split(\":\", 2)[0],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "014c76c49523172c367079001f1a525c5f3387a9"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "171ba9d31f6cbd1893a2cd41a2252d5e8b28fcec", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/171ba9d31f6cbd1893a2cd41a2252d5e8b28fcec", "committedDate": "2021-01-21T03:26:06Z", "message": "add API_REQUEST_LATENCIES, match by MetricName"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNjgzNTA0", "url": "https://github.com/apache/beam/pull/12852#pullrequestreview-573683504", "createdAt": "2021-01-21T19:52:11Z", "commit": {"oid": "171ba9d31f6cbd1893a2cd41a2252d5e8b28fcec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44d928715e61d906eeb57e458b44afca414400f", "author": {"user": {"login": "ihji", "name": "Heejong Lee"}}, "url": "https://github.com/apache/beam/commit/b44d928715e61d906eeb57e458b44afca414400f", "committedDate": "2021-01-21T23:39:31Z", "message": "fix encoding error in windows"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2768, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}