{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMzcxMzQ5", "number": 11399, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowNzozOFrODxRbLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowNzozOFrODxRbLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTkyMzAyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowNzozOFrOGEpfHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDoyMDozMlrOGE9qBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzE5Ng==", "bodyText": "Does this not change the semantics from using the username/password found in the settings to interpreting them as environment variables names and loading them from the environment? If so, shouldn't this be configurable?", "url": "https://github.com/apache/beam/pull/11399#discussion_r407527196", "createdAt": "2020-04-13T15:07:38Z", "author": {"login": "mxm"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -600,9 +600,10 @@ class BeamModulePlugin implements Plugin<Project> {\n                   ? 'apache.releases.https' : 'apache.snapshots.https')\n           def m2SettingCreds = new XmlSlurper().parse(settingsXml).servers.server.find { server -> serverId.equals(server.id.text()) }\n           if (m2SettingCreds) {\n+            def GroovyShell shell = new GroovyShell(new Binding([env:System.getenv()]))\n             credentials {\n-              username m2SettingCreds.username.text()\n-              password m2SettingCreds.password.text()\n+              username shell.evaluate('\"' + m2SettingCreds.username.text() +'\"')\n+              password shell.evaluate('\"' + m2SettingCreds.password.text() +'\"')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee0bb68c859d99900f1ea429cf43825506477506"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyOTM2Ng==", "bodyText": "It doesn't change semantics but expands environment variables, when present.", "url": "https://github.com/apache/beam/pull/11399#discussion_r407529366", "createdAt": "2020-04-13T15:11:30Z", "author": {"login": "tweise"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -600,9 +600,10 @@ class BeamModulePlugin implements Plugin<Project> {\n                   ? 'apache.releases.https' : 'apache.snapshots.https')\n           def m2SettingCreds = new XmlSlurper().parse(settingsXml).servers.server.find { server -> serverId.equals(server.id.text()) }\n           if (m2SettingCreds) {\n+            def GroovyShell shell = new GroovyShell(new Binding([env:System.getenv()]))\n             credentials {\n-              username m2SettingCreds.username.text()\n-              password m2SettingCreds.password.text()\n+              username shell.evaluate('\"' + m2SettingCreds.username.text() +'\"')\n+              password shell.evaluate('\"' + m2SettingCreds.password.text() +'\"')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzE5Ng=="}, "originalCommit": {"oid": "ee0bb68c859d99900f1ea429cf43825506477506"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzNDM4OA==", "bodyText": "At the least I have to make sure for my password not to contain $}{ or any Groovy keywords. I think this also allows arbitrary groovy code to be injected into the build code. Could we introduce a flag in the xml settings to indicate whether we have an environment variable or a plain password?", "url": "https://github.com/apache/beam/pull/11399#discussion_r407534388", "createdAt": "2020-04-13T15:20:29Z", "author": {"login": "mxm"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -600,9 +600,10 @@ class BeamModulePlugin implements Plugin<Project> {\n                   ? 'apache.releases.https' : 'apache.snapshots.https')\n           def m2SettingCreds = new XmlSlurper().parse(settingsXml).servers.server.find { server -> serverId.equals(server.id.text()) }\n           if (m2SettingCreds) {\n+            def GroovyShell shell = new GroovyShell(new Binding([env:System.getenv()]))\n             credentials {\n-              username m2SettingCreds.username.text()\n-              password m2SettingCreds.password.text()\n+              username shell.evaluate('\"' + m2SettingCreds.username.text() +'\"')\n+              password shell.evaluate('\"' + m2SettingCreds.password.text() +'\"')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzE5Ng=="}, "originalCommit": {"oid": "ee0bb68c859d99900f1ea429cf43825506477506"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0NTcyNQ==", "bodyText": "What about considering using a plugin to do this, there seems to be a few promising ones:\nhttps://github.com/datlowe/gradle-maven-publish-auth\nhttps://github.com/sebersole/gradle-maven-publish-auth\n(might be more as well)\nAlso, if finding an existing plugin to do this doesn't work out, what about integrating with the maven settings builder?\nhttps://github.com/apache/maven/blob/a2b800de32cdb9adc1e64a43a0fc32e3ba878103/maven-core/src/main/java/org/apache/maven/settings/MavenSettingsBuilder.java#L42", "url": "https://github.com/apache/beam/pull/11399#discussion_r407545725", "createdAt": "2020-04-13T15:42:01Z", "author": {"login": "lukecwik"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -600,9 +600,10 @@ class BeamModulePlugin implements Plugin<Project> {\n                   ? 'apache.releases.https' : 'apache.snapshots.https')\n           def m2SettingCreds = new XmlSlurper().parse(settingsXml).servers.server.find { server -> serverId.equals(server.id.text()) }\n           if (m2SettingCreds) {\n+            def GroovyShell shell = new GroovyShell(new Binding([env:System.getenv()]))\n             credentials {\n-              username m2SettingCreds.username.text()\n-              password m2SettingCreds.password.text()\n+              username shell.evaluate('\"' + m2SettingCreds.username.text() +'\"')\n+              password shell.evaluate('\"' + m2SettingCreds.password.text() +'\"')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzE5Ng=="}, "originalCommit": {"oid": "ee0bb68c859d99900f1ea429cf43825506477506"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwNTY4Nw==", "bodyText": "@lukecwik the gradle-maven-publish-auth plugin looks like a good fit, but AFAIK the LGPL license would be in the way of using it (hard dependency in our build system).", "url": "https://github.com/apache/beam/pull/11399#discussion_r407605687", "createdAt": "2020-04-13T17:31:56Z", "author": {"login": "tweise"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -600,9 +600,10 @@ class BeamModulePlugin implements Plugin<Project> {\n                   ? 'apache.releases.https' : 'apache.snapshots.https')\n           def m2SettingCreds = new XmlSlurper().parse(settingsXml).servers.server.find { server -> serverId.equals(server.id.text()) }\n           if (m2SettingCreds) {\n+            def GroovyShell shell = new GroovyShell(new Binding([env:System.getenv()]))\n             credentials {\n-              username m2SettingCreds.username.text()\n-              password m2SettingCreds.password.text()\n+              username shell.evaluate('\"' + m2SettingCreds.username.text() +'\"')\n+              password shell.evaluate('\"' + m2SettingCreds.password.text() +'\"')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzE5Ng=="}, "originalCommit": {"oid": "ee0bb68c859d99900f1ea429cf43825506477506"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1MTMyNA==", "bodyText": "I see, followed up with one plugin author: hibernate/gradle-maven-publish-auth#16 (comment)", "url": "https://github.com/apache/beam/pull/11399#discussion_r407651324", "createdAt": "2020-04-13T18:54:00Z", "author": {"login": "lukecwik"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -600,9 +600,10 @@ class BeamModulePlugin implements Plugin<Project> {\n                   ? 'apache.releases.https' : 'apache.snapshots.https')\n           def m2SettingCreds = new XmlSlurper().parse(settingsXml).servers.server.find { server -> serverId.equals(server.id.text()) }\n           if (m2SettingCreds) {\n+            def GroovyShell shell = new GroovyShell(new Binding([env:System.getenv()]))\n             credentials {\n-              username m2SettingCreds.username.text()\n-              password m2SettingCreds.password.text()\n+              username shell.evaluate('\"' + m2SettingCreds.username.text() +'\"')\n+              password shell.evaluate('\"' + m2SettingCreds.password.text() +'\"')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzE5Ng=="}, "originalCommit": {"oid": "ee0bb68c859d99900f1ea429cf43825506477506"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NzY2OA==", "bodyText": "@lukecwik I found a plugin with Apache license that achieves what is required. PTAL.", "url": "https://github.com/apache/beam/pull/11399#discussion_r407857668", "createdAt": "2020-04-14T04:20:32Z", "author": {"login": "tweise"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -600,9 +600,10 @@ class BeamModulePlugin implements Plugin<Project> {\n                   ? 'apache.releases.https' : 'apache.snapshots.https')\n           def m2SettingCreds = new XmlSlurper().parse(settingsXml).servers.server.find { server -> serverId.equals(server.id.text()) }\n           if (m2SettingCreds) {\n+            def GroovyShell shell = new GroovyShell(new Binding([env:System.getenv()]))\n             credentials {\n-              username m2SettingCreds.username.text()\n-              password m2SettingCreds.password.text()\n+              username shell.evaluate('\"' + m2SettingCreds.username.text() +'\"')\n+              password shell.evaluate('\"' + m2SettingCreds.password.text() +'\"')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNzE5Ng=="}, "originalCommit": {"oid": "ee0bb68c859d99900f1ea429cf43825506477506"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1249, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}