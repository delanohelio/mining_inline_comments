{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NzQ1Nzkz", "number": 13431, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDoyNzozOFrOE-5elw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1MDoyMlrOE_UEwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzg4ODg3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDoyNzozOFrOH8TSXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTozOTozMFrOH8Uvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5MjYwNg==", "bodyText": "Can we add WatermarkEstimatorProvider for testing as well?", "url": "https://github.com/apache/beam/pull/13431#discussion_r532992606", "createdAt": "2020-12-01T00:27:38Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "diffHunk": "@@ -510,6 +510,21 @@ def process(\n       actual = (p | beam.Create(data) | beam.ParDo(ExpandingStringsDoFn()))\n       assert_that(actual, equal_to(list(''.join(data))))\n \n+  def test_sdf_with_dofn_as_restriction_provider(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd34d04df24733b3af421673b358a447d8969e0c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjQ4Nw==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13431#discussion_r533016487", "createdAt": "2020-12-01T01:39:30Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner_test.py", "diffHunk": "@@ -510,6 +510,21 @@ def process(\n       actual = (p | beam.Create(data) | beam.ParDo(ExpandingStringsDoFn()))\n       assert_that(actual, equal_to(list(''.join(data))))\n \n+  def test_sdf_with_dofn_as_restriction_provider(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5MjYwNg=="}, "originalCommit": {"oid": "dd34d04df24733b3af421673b358a447d8969e0c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODI0NjQwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/common.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1MDoyMlrOH89MVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowNDo1OVrOH9Bodg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTE4OA==", "bodyText": "It might be less likely to happen but I'm curious what if the sdk author provides different RestrictionProvider from both ways, which one should be dominant. From implementation here, it seems like we will pick the param one.", "url": "https://github.com/apache/beam/pull/13431#discussion_r533679188", "createdAt": "2020-12-01T19:50:22Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -218,10 +218,11 @@ def __init__(self, obj_to_invoke, method_name):\n       elif core.DoFn.KeyParam == v:\n         self.key_arg_name = kw\n       elif isinstance(v, core.DoFn.RestrictionParam):\n-        self.restriction_provider = v.restriction_provider\n+        self.restriction_provider = v.restriction_provider or obj_to_invoke", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e16a85c0e79e980abd67a33f00d334490dd1954"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4Mzk3NQ==", "bodyText": "v.restriction_provider will be None iff None was passed to DoFn.RestrictionParam (or omitted, as None is the default value).", "url": "https://github.com/apache/beam/pull/13431#discussion_r533683975", "createdAt": "2020-12-01T19:58:27Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -218,10 +218,11 @@ def __init__(self, obj_to_invoke, method_name):\n       elif core.DoFn.KeyParam == v:\n         self.key_arg_name = kw\n       elif isinstance(v, core.DoFn.RestrictionParam):\n-        self.restriction_provider = v.restriction_provider\n+        self.restriction_provider = v.restriction_provider or obj_to_invoke", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTE4OA=="}, "originalCommit": {"oid": "4e16a85c0e79e980abd67a33f00d334490dd1954"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MTkyNg==", "bodyText": "I understand. The case I'm wondering is like:\nclass MySDF(beam.DoFn, TypeARestrictionTracker):\n  def process(restriction_tracker=RestrictionParam(TypeBRestrictionTracker()))\nIn this case, the sdk will pick up TypeBRestrictionTracker implementation. Is it ideal? I thought we want to pick up TypeARestrictionTracker in this case or just say the DoFn is not valid.", "url": "https://github.com/apache/beam/pull/13431#discussion_r533751926", "createdAt": "2020-12-01T22:04:59Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -218,10 +218,11 @@ def __init__(self, obj_to_invoke, method_name):\n       elif core.DoFn.KeyParam == v:\n         self.key_arg_name = kw\n       elif isinstance(v, core.DoFn.RestrictionParam):\n-        self.restriction_provider = v.restriction_provider\n+        self.restriction_provider = v.restriction_provider or obj_to_invoke", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTE4OA=="}, "originalCommit": {"oid": "4e16a85c0e79e980abd67a33f00d334490dd1954"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2669, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}