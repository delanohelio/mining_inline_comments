{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTY1MjEw", "number": 12218, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1MTozOFrOENZcHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowMToxOVrOENZmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDgzNzQwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/testing/PAssert.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1MTozOFrOGwD24w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1MTozOFrOGwD24w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA0ODAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Default end-of-window trigger dissallowed for unbounded PCollections.\n          \n          \n            \n                            // Default end-of-window trigger disallowed for unbounded PCollections.\n          \n      \n    \n    \n  \n\nNit: spelling", "url": "https://github.com/apache/beam/pull/12218#discussion_r453048035", "createdAt": "2020-07-10T19:51:38Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/testing/PAssert.java", "diffHunk": "@@ -1171,6 +1174,41 @@ public GroupGlobally(AssertionWindows rewindowingStrategy) {\n     public PCollection<Iterable<ValueInSingleWindow<T>>> expand(PCollection<T> input) {\n       final int combinedKey = 42;\n \n+      if (input.getWindowingStrategy().equals(WindowingStrategy.globalDefault())\n+          && rewindowingStrategy instanceof IntoGlobalWindow) {\n+        // If we don't have to worry about complicated triggering semantics we can generate\n+        // a much simpler pipeline.  This is particularly useful for bootstrapping runners so that\n+        // we can run subsets of the validates runner test suite requiring support of only the\n+        // most basic primitives.\n+\n+        // In order to ensure we actually get an (empty) iterable rather than an empty PCollection\n+        // when the input is an empty PCollection, we flatten with a dummy PCollection containing\n+        // an empty iterable before grouping on a singleton key and concatenating.\n+        PCollection<Iterable<ValueInSingleWindow<T>>> actual =\n+            input.apply(Reify.windows()).apply(ParDo.of(new ToSingletonIterables<>()));\n+        PCollection<Iterable<ValueInSingleWindow<T>>> dummy =\n+            input\n+                .getPipeline()\n+                .apply(\n+                    Create.<Iterable<ValueInSingleWindow<T>>>of(\n+                            ImmutableList.of(ImmutableList.of()))\n+                        .withCoder(actual.getCoder()));\n+        return PCollectionList.of(dummy)\n+            .and(actual)\n+            .apply(Flatten.pCollections())\n+            .apply(\n+                // Default end-of-window trigger dissallowed for unbounded PCollections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505cad3b4505b62d2224c4af42b41fa3db5536b0"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDg2MzUwOnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/testing/PAssert.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowMToxOVrOGwEG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzowODoxMlrOGwH8dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MjE0MA==", "bodyText": "Why does this only apply to unbounded PCollections? It looks like the existing translation removes triggers for both bounded and unbounded.", "url": "https://github.com/apache/beam/pull/12218#discussion_r453052140", "createdAt": "2020-07-10T20:01:19Z", "author": {"login": "ibzib"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/testing/PAssert.java", "diffHunk": "@@ -1171,6 +1174,41 @@ public GroupGlobally(AssertionWindows rewindowingStrategy) {\n     public PCollection<Iterable<ValueInSingleWindow<T>>> expand(PCollection<T> input) {\n       final int combinedKey = 42;\n \n+      if (input.getWindowingStrategy().equals(WindowingStrategy.globalDefault())\n+          && rewindowingStrategy instanceof IntoGlobalWindow) {\n+        // If we don't have to worry about complicated triggering semantics we can generate\n+        // a much simpler pipeline.  This is particularly useful for bootstrapping runners so that\n+        // we can run subsets of the validates runner test suite requiring support of only the\n+        // most basic primitives.\n+\n+        // In order to ensure we actually get an (empty) iterable rather than an empty PCollection\n+        // when the input is an empty PCollection, we flatten with a dummy PCollection containing\n+        // an empty iterable before grouping on a singleton key and concatenating.\n+        PCollection<Iterable<ValueInSingleWindow<T>>> actual =\n+            input.apply(Reify.windows()).apply(ParDo.of(new ToSingletonIterables<>()));\n+        PCollection<Iterable<ValueInSingleWindow<T>>> dummy =\n+            input\n+                .getPipeline()\n+                .apply(\n+                    Create.<Iterable<ValueInSingleWindow<T>>>of(\n+                            ImmutableList.of(ImmutableList.of()))\n+                        .withCoder(actual.getCoder()));\n+        return PCollectionList.of(dummy)\n+            .and(actual)\n+            .apply(Flatten.pCollections())\n+            .apply(\n+                // Default end-of-window trigger dissallowed for unbounded PCollections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505cad3b4505b62d2224c4af42b41fa3db5536b0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExNDk5OQ==", "bodyText": "Due to the if condition, the triggering (and windowing) is already the default, which is fine for bounded but not for unbounded. (I opted to leave it this way for bounded so that you don't have to know about the never.ever trigger to do bounded PAsserts.)", "url": "https://github.com/apache/beam/pull/12218#discussion_r453114999", "createdAt": "2020-07-10T23:08:12Z", "author": {"login": "robertwb"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/testing/PAssert.java", "diffHunk": "@@ -1171,6 +1174,41 @@ public GroupGlobally(AssertionWindows rewindowingStrategy) {\n     public PCollection<Iterable<ValueInSingleWindow<T>>> expand(PCollection<T> input) {\n       final int combinedKey = 42;\n \n+      if (input.getWindowingStrategy().equals(WindowingStrategy.globalDefault())\n+          && rewindowingStrategy instanceof IntoGlobalWindow) {\n+        // If we don't have to worry about complicated triggering semantics we can generate\n+        // a much simpler pipeline.  This is particularly useful for bootstrapping runners so that\n+        // we can run subsets of the validates runner test suite requiring support of only the\n+        // most basic primitives.\n+\n+        // In order to ensure we actually get an (empty) iterable rather than an empty PCollection\n+        // when the input is an empty PCollection, we flatten with a dummy PCollection containing\n+        // an empty iterable before grouping on a singleton key and concatenating.\n+        PCollection<Iterable<ValueInSingleWindow<T>>> actual =\n+            input.apply(Reify.windows()).apply(ParDo.of(new ToSingletonIterables<>()));\n+        PCollection<Iterable<ValueInSingleWindow<T>>> dummy =\n+            input\n+                .getPipeline()\n+                .apply(\n+                    Create.<Iterable<ValueInSingleWindow<T>>>of(\n+                            ImmutableList.of(ImmutableList.of()))\n+                        .withCoder(actual.getCoder()));\n+        return PCollectionList.of(dummy)\n+            .and(actual)\n+            .apply(Flatten.pCollections())\n+            .apply(\n+                // Default end-of-window trigger dissallowed for unbounded PCollections.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MjE0MA=="}, "originalCommit": {"oid": "505cad3b4505b62d2224c4af42b41fa3db5536b0"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1011, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}