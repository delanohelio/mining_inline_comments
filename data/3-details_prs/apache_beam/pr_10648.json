{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTc5OTEw", "number": 10648, "title": "[BEAM-3419] Support iterable on Dataflow runner when using the unified worker.", "bodyText": "Note that all other portable runners are using iterable side inputs.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-01-21T23:24:54Z", "url": "https://github.com/apache/beam/pull/10648", "merged": true, "mergeCommit": {"oid": "dd16657bcba42c93dac0da6ab2681865eb560d54"}, "closed": true, "closedAt": "2020-01-23T00:13:27Z", "author": {"login": "lukecwik"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8pp3IgH2gAyMzY1NTc5OTEwOjk1YWM2MWU4NTRiZjlkM2YzZDQwODVhOTRkZDdjZThiMTliOTFhMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb887u6AFqTM0NjkyNjYwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e", "author": {"user": {"login": "lukecwik", "name": "Lukasz Cwik"}}, "url": "https://github.com/apache/beam/commit/95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e", "committedDate": "2020-01-21T23:22:13Z", "message": "[BEAM-3419] Support iterable on Dataflow runner when using the unified worker.\n\nNote that all other portable runners are using iterable side inputs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTI2NjA4", "url": "https://github.com/apache/beam/pull/10648#pullrequestreview-346926608", "createdAt": "2020-01-22T21:47:42Z", "commit": {"oid": "95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0Nzo0M1rOFgsIgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0OTowM1rOFgsKxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTgyNA==", "bodyText": "Please file a JIRA to get to the root of this discrepancy.", "url": "https://github.com/apache/beam/pull/10648#discussion_r369821824", "createdAt": "2020-01-22T21:47:43Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -320,24 +320,32 @@ def visit_transform(self, transform_node):\n           for ix, side_input in enumerate(transform_node.side_inputs):\n             access_pattern = side_input._side_input_data().access_pattern\n             if access_pattern == common_urns.side_inputs.ITERABLE.urn:\n-              # Add a map to ('', value) as Dataflow currently only handles\n-              # keyed side inputs.\n-              pipeline = side_input.pvalue.pipeline\n-              new_side_input = _DataflowIterableSideInput(side_input)\n-              new_side_input.pvalue = beam.pvalue.PCollection(\n-                  pipeline,\n-                  element_type=typehints.KV[\n-                      bytes, side_input.pvalue.element_type],\n-                  is_bounded=side_input.pvalue.is_bounded)\n-              parent = transform_node.parent or pipeline._root_transform()\n-              map_to_void_key = beam.pipeline.AppliedPTransform(\n-                  pipeline,\n-                  beam.Map(lambda x: (b'', x)),\n-                  transform_node.full_label + '/MapToVoidKey%s' % ix,\n-                  (side_input.pvalue,))\n-              new_side_input.pvalue.producer = map_to_void_key\n-              map_to_void_key.add_output(new_side_input.pvalue)\n-              parent.add_part(map_to_void_key)\n+              if use_unified_worker:\n+                # Patch up the access pattern to appease Dataflow when using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjQwNA==", "bodyText": "Why is a special _DataflowIterableSideInput needed?", "url": "https://github.com/apache/beam/pull/10648#discussion_r369822404", "createdAt": "2020-01-22T21:49:03Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -320,24 +320,32 @@ def visit_transform(self, transform_node):\n           for ix, side_input in enumerate(transform_node.side_inputs):\n             access_pattern = side_input._side_input_data().access_pattern\n             if access_pattern == common_urns.side_inputs.ITERABLE.urn:\n-              # Add a map to ('', value) as Dataflow currently only handles\n-              # keyed side inputs.\n-              pipeline = side_input.pvalue.pipeline\n-              new_side_input = _DataflowIterableSideInput(side_input)\n-              new_side_input.pvalue = beam.pvalue.PCollection(\n-                  pipeline,\n-                  element_type=typehints.KV[\n-                      bytes, side_input.pvalue.element_type],\n-                  is_bounded=side_input.pvalue.is_bounded)\n-              parent = transform_node.parent or pipeline._root_transform()\n-              map_to_void_key = beam.pipeline.AppliedPTransform(\n-                  pipeline,\n-                  beam.Map(lambda x: (b'', x)),\n-                  transform_node.full_label + '/MapToVoidKey%s' % ix,\n-                  (side_input.pvalue,))\n-              new_side_input.pvalue.producer = map_to_void_key\n-              map_to_void_key.add_output(new_side_input.pvalue)\n-              parent.add_part(map_to_void_key)\n+              if use_unified_worker:\n+                # Patch up the access pattern to appease Dataflow when using\n+                # the UW and hardcode the output type to be Any since\n+                # the Dataflow JSON and pipeline proto can differ in coders\n+                # which leads to encoding/decoding issues within the runner.\n+                side_input.pvalue.element_type = typehints.Any\n+                new_side_input = _DataflowIterableSideInput(side_input)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3547, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}