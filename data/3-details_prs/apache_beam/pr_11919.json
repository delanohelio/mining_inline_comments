{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODk2OTUz", "number": 11919, "title": "[BEAM-10114] Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.", "bodyText": "Also adapt to beam conventions and restrictions.\nThis is staged here https://github.com/googleapis/java-pubsublite/tree/master/pubsublite-beam-io\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-04T14:57:41Z", "url": "https://github.com/apache/beam/pull/11919", "merged": true, "mergeCommit": {"oid": "0359f9072996b7ac08222f18781aa56db4f46b25"}, "closed": true, "closedAt": "2020-07-13T19:14:26Z", "author": {"login": "dpcollins-google"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn_TlEAH2gAyNDI3ODk2OTUzOjhhYTg5OGUyZWIwYTY4NmY0Yjk5Zjk3OGIwYTY0OWYzMjY1YjlkYzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0hryFABqjM1Mzk2MDY1NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8aa898e2eb0a686f4b99f978b0a649f3265b9dc6", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/8aa898e2eb0a686f4b99f978b0a649f3265b9dc6", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "967530c7e7c2c41632d5a4c8780f6962c590b9e7", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/967530c7e7c2c41632d5a4c8780f6962c590b9e7", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "a2d74ca34c0aadbda2c7293d1b59aaff3adea88a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a2d74ca34c0aadbda2c7293d1b59aaff3adea88a", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzYwNTM4", "url": "https://github.com/apache/beam/pull/11919#pullrequestreview-425360538", "createdAt": "2020-06-05T14:38:05Z", "commit": {"oid": "a2d74ca34c0aadbda2c7293d1b59aaff3adea88a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozODowNVrOGfxPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozODowNVrOGfxPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2NTc1OQ==", "bodyText": "this will fail on dataflow, it doesn't support SetState or MapState yet.  Dataflow does have its own deduplicate implementation [1] that pushes the work to windmill's own exactly-once impl, you might be able to override this transform w/ that in the runner?  There's also a Deduplicate transform [2] in beam now, but I don't think it'd scale very well.\n[1] \n  \n    \n      beam/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java\n    \n    \n         Line 1729\n      in\n      8aedab2\n    \n    \n    \n    \n\n        \n          \n           private static class Deduplicate<T> \n        \n    \n  \n\n\n[2] https://github.com/apache/beam/blob/8aedab2da96e1324f8433df3c772d59346f825b4/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Deduplicate.java", "url": "https://github.com/apache/beam/pull/11919#discussion_r435965759", "createdAt": "2020-06-05T14:38:05Z", "author": {"login": "steveniemitz"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/DeduplicationFn.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import org.apache.beam.sdk.coders.Coder;\n+import org.apache.beam.sdk.coders.DelegateCoder;\n+import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.coders.ListCoder;\n+import org.apache.beam.sdk.coders.MapCoder;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.joda.time.Instant;\n+\n+// A DeduplicationFn takes a KV from a hashed version of KeyT to a KV of KeyT and ValueT and\n+// deduplicates based on KeyT. KeyT must provide a non-identity implementation of equals.\n+class DeduplicationFn<KeyT, ValueT> extends DoFn<KV<Integer, KV<KeyT, ValueT>>, KV<KeyT, ValueT>> {\n+  private final DeduplicationFnOptions<KeyT> options;\n+\n+  // A state cell holding the set of recently received keys.\n+  @SuppressWarnings(\"unused\")\n+  @StateId(\"keySet\")\n+  private final StateSpec<SetState<KeyT>> keySetSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d74ca34c0aadbda2c7293d1b59aaff3adea88a"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2d74ca34c0aadbda2c7293d1b59aaff3adea88a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a2d74ca34c0aadbda2c7293d1b59aaff3adea88a", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "96d150819f333bd1a76f6b085b151cd14e8a9089", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/96d150819f333bd1a76f6b085b151cd14e8a9089", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96d150819f333bd1a76f6b085b151cd14e8a9089", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/96d150819f333bd1a76f6b085b151cd14e8a9089", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a6ee4b3fa536f480075c4b619076864a23ad127f", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjQ2NzI0", "url": "https://github.com/apache/beam/pull/11919#pullrequestreview-434246724", "createdAt": "2020-06-19T17:43:14Z", "commit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo0MzoxNVrOGmctmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoyNzoyNFrOGmgcHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw==", "bodyText": "In addition to @experimental, this needs javadoc about how it's not yet supported by GCP.\nMaybe this should all live in a directory with \"experimental\" in the name?  Unfortunately, there's quite a bit of stuff marked @experimental in Beam, so users won't treat it with appropriate caution", "url": "https://github.com/apache/beam/pull/11919#discussion_r442969497", "createdAt": "2020-06-19T17:43:15Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTk3OA==", "bodyText": "Change comments to javadoc style", "url": "https://github.com/apache/beam/pull/11919#discussion_r442969978", "createdAt": "2020-06-19T17:44:25Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3MDI3OA==", "bodyText": "Clarify that the call to addUuids() is assumed to have happened on the publisher side", "url": "https://github.com/apache/beam/pull/11919#discussion_r442970278", "createdAt": "2020-06-19T17:45:02Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+  // retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+  // duplicates.\n+  public static Read.Unbounded<SequencedMessage> read(SubscriberOptions options) {\n+    return Read.from(new PubsubLiteUnboundedSource(options));\n+  }\n+\n+  // Remove duplicates from the PTransform from a read. Assumes by default that the uuids were\n+  // added by a call to PubsubLiteIO.addUuids().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTk2OQ==", "bodyText": "Beam already has access to an assertThat call in org.hamcrest.MatcherAssert.assertThat.  Do we need this new dependency?", "url": "https://github.com/apache/beam/pull/11919#discussion_r442981969", "createdAt": "2020-06-19T18:13:13Z", "author": {"login": "dpmills"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -555,6 +557,8 @@ class BeamModulePlugin implements Plugin<Project> {\n         spark_sql                                   : \"org.apache.spark:spark-sql_2.11:$spark_version\",\n         spark_streaming                             : \"org.apache.spark:spark-streaming_2.11:$spark_version\",\n         stax2_api                                   : \"org.codehaus.woodstox:stax2-api:3.1.4\",\n+        truth                                       : \"com.google.truth:truth:1.0.1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzQyMA==", "bodyText": "I'm not sure if adding new exceptions here is ok; please check with @kennknowles", "url": "https://github.com/apache/beam/pull/11919#discussion_r442983420", "createdAt": "2020-06-19T18:16:43Z", "author": {"login": "dpmills"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -88,6 +88,10 @@\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ExpressionConverter\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*ZetaSQLPlannerImpl\\.java\" />\n   <suppress id=\"ForbidNonVendoredGuava\" files=\".*zetasql.*SqlAnalyzer\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*AddUuidsTransform\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*MessageCoderTest\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*PubsubLiteSink\\.java\" />\n+  <suppress id=\"ForbidNonVendoredGuava\" files=\".*pubsublite.*UuidDeduplicationTransformTest\\.java\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzYyMA==", "bodyText": "Here and elsewhere, javadoc for classes at least", "url": "https://github.com/apache/beam/pull/11919#discussion_r442983620", "createdAt": "2020-06-19T18:17:14Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NDM3Nw==", "bodyText": "What does \"standard transformation methods\" mean? Is this something a user might hit? If so, how would they go about fixing things?", "url": "https://github.com/apache/beam/pull/11919#discussion_r442984377", "createdAt": "2020-06-19T18:19:11Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and\n+  // publish_time) to Pub/Sub Lite Messages.\n+  public static PTransform<PCollection<? extends PubsubMessage>, PCollection<Message>>\n+      fromCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<PubsubMessage, Message>() {\n+          @ProcessElement\n+          public void processElement(@Element PubsubMessage message, OutputReceiver<Message> output)\n+              throws StatusException {\n+            output.output(fromCpsPublishTransformer(KeyExtractor.DEFAULT).transform(message));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Pub/Sub Lite Messages to publishab Cloud Pub/Sub incomplete,\n+  // publishable\n+  // PubsubMessages.\n+  public static PTransform<PCollection<? extends Message>, PCollection<PubsubMessage>>\n+      toCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<Message, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(@Element Message message, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsPublishTransformer().transform(message));\n+          }\n+        });\n+  }\n+\n+  // Ensure that all messages that pass through can be converted to Cloud Pub/Sub messages using the\n+  // standard transformation methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMTg3NQ==", "bodyText": "link to deduplicate()", "url": "https://github.com/apache/beam/pull/11919#discussion_r443021875", "createdAt": "2020-06-19T20:01:40Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  // Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+  // retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMjgzNg==", "bodyText": "This will result in many small bundles downstream, which may end up being inefficient for the PubsubLiteSink.  It will probably perform better to pick a fixed number of keys to reshuffle on, such as maxNumWorkers*10", "url": "https://github.com/apache/beam/pull/11919#discussion_r443022836", "createdAt": "2020-06-19T20:04:38Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {\n+  private static Message addUuid(Message message) {\n+    ImmutableListMultimap.Builder<String, ByteString> attributesBuilder =\n+        ImmutableListMultimap.builder();\n+    message.attributes().entries().stream()\n+        .filter(entry -> !entry.getKey().equals(Uuid.DEFAULT_ATTRIBUTE))\n+        .forEach(attributesBuilder::put);\n+    attributesBuilder.put(Uuid.DEFAULT_ATTRIBUTE, Uuid.random().value());\n+    return message.toBuilder().setAttributes(attributesBuilder.build()).build();\n+  }\n+\n+  @Override\n+  public PCollection<Message> expand(PCollection<Message> input) {\n+    PCollection<Message> withUuids =\n+        input\n+            .apply(\n+                \"AddUuids\",\n+                MapElements.into(new TypeDescriptor<Message>() {}).via(AddUuidsTransform::addUuid))\n+            .setCoder(new MessageCoder());\n+    return withUuids.apply(\"ShuffleToPersist\", Reshuffle.viaRandomKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMzg5Ng==", "bodyText": "Should message_id be converted to PubsubLite's UUID?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443023896", "createdAt": "2020-06-19T20:07:49Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNTUyNA==", "bodyText": "This will cast away the type of the input PCollection, and always return PCollection, which seems like a bad consequence of something that is intended to be a passthrough.  Maybe give this a type param?", "url": "https://github.com/apache/beam/pull/11919#discussion_r443025524", "createdAt": "2020-06-19T20:12:48Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {\n+    return ParDo.of(\n+        new DoFn<SequencedMessage, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(\n+              @Element SequencedMessage sequencedMessage, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsSubscribeTransformer().transform(sequencedMessage));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Cloud Pub/Sub publishable PubsubMessages (ignoring message_id and\n+  // publish_time) to Pub/Sub Lite Messages.\n+  public static PTransform<PCollection<? extends PubsubMessage>, PCollection<Message>>\n+      fromCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<PubsubMessage, Message>() {\n+          @ProcessElement\n+          public void processElement(@Element PubsubMessage message, OutputReceiver<Message> output)\n+              throws StatusException {\n+            output.output(fromCpsPublishTransformer(KeyExtractor.DEFAULT).transform(message));\n+          }\n+        });\n+  }\n+\n+  // Transform a collection of Pub/Sub Lite Messages to publishab Cloud Pub/Sub incomplete,\n+  // publishable\n+  // PubsubMessages.\n+  public static PTransform<PCollection<? extends Message>, PCollection<PubsubMessage>>\n+      toCpsPublishTransform() {\n+    return ParDo.of(\n+        new DoFn<Message, PubsubMessage>() {\n+          @ProcessElement\n+          public void processElement(@Element Message message, OutputReceiver<PubsubMessage> output)\n+              throws StatusException {\n+            output.output(toCpsPublishTransformer().transform(message));\n+          }\n+        });\n+  }\n+\n+  // Ensure that all messages that pass through can be converted to Cloud Pub/Sub messages using the\n+  // standard transformation methods.\n+  public static PTransform<PCollection<? extends Message>, PCollection<Message>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzEyOQ==", "bodyText": "The names of these methods aren't very clear.  I think something like PubsubLiteConversions.sequenceMessageToCloudPubsubMessage would read better.  The distinction between publish and subscribe isn't obvious from the method name anyways, and is probably better in comments.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443027129", "createdAt": "2020-06-19T20:17:33Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.\n+public final class CloudPubsubTransforms {\n+  private CloudPubsubTransforms() {}\n+\n+  // Transform a collection of SequencedMessages to Cloud Pub/Sub received PubsubMessages.\n+  public static PTransform<PCollection<? extends SequencedMessage>, PCollection<PubsubMessage>>\n+      toCpsSubscribeTransform() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzYwOQ==", "bodyText": "Provide more information about when these should be used.\nDo we expect it to be a common use case for pipelines to be using both Cloud Pub/Sub and Pub/Sub Lite? We might not need these as part of Beam.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443027609", "createdAt": "2020-06-19T20:18:59Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/CloudPubsubTransforms.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.fromCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsPublishTransformer;\n+import static com.google.cloud.pubsublite.cloudpubsub.MessageTransforms.toCpsSubscribeTransformer;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.cloud.pubsublite.cloudpubsub.KeyExtractor;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.grpc.StatusException;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+\n+// A class providing transforms between Cloud Pub/Sub and Pub/Sub Lite message types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyOTU5Ng==", "bodyText": "This is an awkward way for the user to configure the deduplication.  If you want to be future proof it's ok to still have this option, but provide a helper so the user only has to pass the time domain and duration", "url": "https://github.com/apache/beam/pull/11919#discussion_r443029596", "createdAt": "2020-06-19T20:24:37Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.internal.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.protobuf.ByteString;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.transforms.Deduplicate;\n+\n+@AutoValue\n+public abstract class UuidDeduplicationOptions implements Serializable {\n+  private static final long serialVersionUID = 9837489720893L;\n+\n+  public static final SerializableStatusFunction<SequencedMessage, Uuid> DEFAULT_UUID_EXTRACTOR =\n+      message -> {\n+        checkArgument(\n+            message.message().attributes().containsKey(Uuid.DEFAULT_ATTRIBUTE),\n+            \"Uuid attribute missing.\");\n+        List<ByteString> attributes =\n+            message.message().attributes().get(Uuid.DEFAULT_ATTRIBUTE);\n+        checkArgument(attributes.size() == 1, \"Duplicate Uuid attribute values exist.\");\n+        return Uuid.of(attributes.get(0));\n+      };\n+\n+  public static final int DEFAULT_HASH_PARTITIONS = 10000;\n+\n+  // All parameters are optional.\n+  public abstract SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor();\n+\n+  public abstract Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate();\n+\n+  // The number of partitions to hash values into.\n+  public abstract int hashPartitions();\n+\n+  @SuppressWarnings(\"CheckReturnValue\")\n+  public static Builder newBuilder() {\n+    Builder builder = new AutoValue_UuidDeduplicationOptions.Builder();\n+    builder.setUuidExtractor(DEFAULT_UUID_EXTRACTOR);\n+    builder.setDeduplicate(\n+        Deduplicate.<Uuid, SequencedMessage>keyedValues().withTimeDomain(TimeDomain.EVENT_TIME));\n+    builder.setHashPartitions(DEFAULT_HASH_PARTITIONS);\n+    return builder;\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setUuidExtractor(\n+        SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor);\n+\n+    public abstract Builder setDeduplicate(\n+        Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng==", "bodyText": "Registering a coder as part of expand is weird, and will be confusing if the user uses these types elsewhere in the pipeline.  You can instead use the @defaultcoder annotation on Uuid and SequencedMessage to set their default coders globally.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443030556", "createdAt": "2020-06-19T20:27:24Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzUwNDc0", "url": "https://github.com/apache/beam/pull/11919#pullrequestreview-434350474", "createdAt": "2020-06-19T21:31:10Z", "commit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozMToxMFrOGmhtsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozMToxMFrOGmhtsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MTQ0MA==", "bodyText": "Google cloud pubsublite depends on grpc 1.29 and has other deps that differ greatly from the common set used within Beam.\nPlease validate that no additional linkage errors were produced using the linkage checker for all impacted modules and post the results here. You will need to resolve linkage errors by either downgrading the version of the library used to one that is compatible with the current versions in Beam or upgrading Beam's dependencies till they are compatible with the library.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443051440", "createdAt": "2020-06-19T21:31:10Z", "author": {"login": "lukecwik"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -480,6 +479,7 @@ class BeamModulePlugin implements Plugin<Project> {\n         google_cloud_datacatalog_v1beta1            : \"com.google.cloud:google-cloud-datacatalog:$google_cloud_datacatalog_version\",\n         google_cloud_dataflow_java_proto_library_all: \"com.google.cloud.dataflow:google-cloud-dataflow-java-proto-library-all:0.5.160304\",\n         google_cloud_datastore_v1_proto_client      : \"com.google.cloud.datastore:datastore-v1-proto-client:1.6.3\",\n+        google_cloud_pubsublite                     : \"com.google.cloud:google-cloud-pubsublite:$google_cloud_pubsublite_version\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a6ee4b3fa536f480075c4b619076864a23ad127f", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "ed381889c4e177c9dffa427c52f946ffe4c28252", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ed381889c4e177c9dffa427c52f946ffe4c28252", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed381889c4e177c9dffa427c52f946ffe4c28252", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/ed381889c4e177c9dffa427c52f946ffe4c28252", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/bef2df8e99b05d210672b0f9baedc3d7123cd87e", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTIyNzgz", "url": "https://github.com/apache/beam/pull/11919#pullrequestreview-435122783", "createdAt": "2020-06-22T17:13:57Z", "commit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMzo1N1rOGnJ2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MToyMlrOGnKvTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODk3Mg==", "bodyText": "Adding a customizable numBuckets to Reshuffle.viaRandomKey sounds good to me.  Leave the default behavior as is to avoid breaking current users, though.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443708972", "createdAt": "2020-06-22T17:13:57Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/AddUuidsTransform.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.protobuf.ByteString;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Reshuffle;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class AddUuidsTransform extends PTransform<PCollection<Message>, PCollection<Message>> {\n+  private static Message addUuid(Message message) {\n+    ImmutableListMultimap.Builder<String, ByteString> attributesBuilder =\n+        ImmutableListMultimap.builder();\n+    message.attributes().entries().stream()\n+        .filter(entry -> !entry.getKey().equals(Uuid.DEFAULT_ATTRIBUTE))\n+        .forEach(attributesBuilder::put);\n+    attributesBuilder.put(Uuid.DEFAULT_ATTRIBUTE, Uuid.random().value());\n+    return message.toBuilder().setAttributes(attributesBuilder.build()).build();\n+  }\n+\n+  @Override\n+  public PCollection<Message> expand(PCollection<Message> input) {\n+    PCollection<Message> withUuids =\n+        input\n+            .apply(\n+                \"AddUuids\",\n+                MapElements.into(new TypeDescriptor<Message>() {}).via(AddUuidsTransform::addUuid))\n+            .setCoder(new MessageCoder());\n+    return withUuids.apply(\"ShuffleToPersist\", Reshuffle.viaRandomKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyMjgzNg=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwOTUxMw==", "bodyText": "Please add javadoc explaining the current state of this code.  Current directory setup LGTM.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443709513", "createdAt": "2020-06-22T17:15:06Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMTA4NA==", "bodyText": "This is the only caller of toTransform now; I think it would be more readable to just inline that logic here", "url": "https://github.com/apache/beam/pull/11919#discussion_r443711084", "createdAt": "2020-06-22T17:17:50Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+   * retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+   * duplicates.\n+   */\n+  public static Read.Unbounded<SequencedMessage> read(SubscriberOptions options) {\n+    return Read.from(new PubsubLiteUnboundedSource(options));\n+  }\n+\n+  /**\n+   * Remove duplicates from the PTransform from a read. Assumes by default that the uuids were added\n+   * by a call to PubsubLiteIO.addUuids() when published.\n+   */\n+  public static PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>>\n+      deduplicate(UuidDeduplicationOptions options) {\n+    return new UuidDeduplicationTransform(options);\n+  }\n+\n+  /** Add Uuids to to-be-published messages that ensures that uniqueness is maintained. */\n+  public static PTransform<PCollection<Message>, PCollection<Message>> addUuids() {\n+    return new AddUuidsTransform();\n+  }\n+\n+  /** Write messages to Pub/Sub Lite. */\n+  public static PTransform<PCollection<Message>, PDone> write(PublisherOptions options) {\n+    return toTransform(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMjMzMA==", "bodyText": "I think you can revert this change now", "url": "https://github.com/apache/beam/pull/11919#discussion_r443712330", "createdAt": "2020-06-22T17:20:15Z", "author": {"login": "dpmills"}, "path": "sdks/java/build-tools/src/main/resources/beam/checkstyle.xml", "diffHunk": "@@ -101,7 +101,7 @@ page at http://checkstyle.sourceforge.net/config.html -->\n     -->\n     <module name=\"RegexpSinglelineJava\">\n       <property name=\"id\" value=\"ForbidNonVendoredGuava\"/>\n-      <property name=\"format\" value=\"(\\scom\\.google\\.common\\.(?!testing))|(\\scom\\.google\\.thirdparty)\"/>\n+      <property name=\"format\" value=\"(\\scom\\.google\\.common\\.(?!testing)(?!truth))|(\\scom\\.google\\.thirdparty)\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMDg1MA==", "bodyText": "Yeah, it's the wrapping into a tranform that I don't like.  I'm fine with leaving this as is if you add an example as I mentioned in a comment above", "url": "https://github.com/apache/beam/pull/11919#discussion_r443720850", "createdAt": "2020-06-22T17:36:18Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import static com.google.cloud.pubsublite.internal.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import com.google.protobuf.ByteString;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.transforms.Deduplicate;\n+\n+@AutoValue\n+public abstract class UuidDeduplicationOptions implements Serializable {\n+  private static final long serialVersionUID = 9837489720893L;\n+\n+  public static final SerializableStatusFunction<SequencedMessage, Uuid> DEFAULT_UUID_EXTRACTOR =\n+      message -> {\n+        checkArgument(\n+            message.message().attributes().containsKey(Uuid.DEFAULT_ATTRIBUTE),\n+            \"Uuid attribute missing.\");\n+        List<ByteString> attributes =\n+            message.message().attributes().get(Uuid.DEFAULT_ATTRIBUTE);\n+        checkArgument(attributes.size() == 1, \"Duplicate Uuid attribute values exist.\");\n+        return Uuid.of(attributes.get(0));\n+      };\n+\n+  public static final int DEFAULT_HASH_PARTITIONS = 10000;\n+\n+  // All parameters are optional.\n+  public abstract SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor();\n+\n+  public abstract Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate();\n+\n+  // The number of partitions to hash values into.\n+  public abstract int hashPartitions();\n+\n+  @SuppressWarnings(\"CheckReturnValue\")\n+  public static Builder newBuilder() {\n+    Builder builder = new AutoValue_UuidDeduplicationOptions.Builder();\n+    builder.setUuidExtractor(DEFAULT_UUID_EXTRACTOR);\n+    builder.setDeduplicate(\n+        Deduplicate.<Uuid, SequencedMessage>keyedValues().withTimeDomain(TimeDomain.EVENT_TIME));\n+    builder.setHashPartitions(DEFAULT_HASH_PARTITIONS);\n+    return builder;\n+  }\n+\n+  @AutoValue.Builder\n+  public abstract static class Builder {\n+    public abstract Builder setUuidExtractor(\n+        SerializableStatusFunction<SequencedMessage, Uuid> uuidExtractor);\n+\n+    public abstract Builder setDeduplicate(\n+        Deduplicate.KeyedValues<Uuid, SequencedMessage> deduplicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyOTU5Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMTk5OQ==", "bodyText": "For each of the main entrypoint functions here, please add examples of calling them to the javadoc.", "url": "https://github.com/apache/beam/pull/11919#discussion_r443721999", "createdAt": "2020-06-22T17:38:28Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  private static <InT extends PInput, OutT extends POutput> PTransform<InT, OutT> toTransform(\n+      SerializableFunction<InT, OutT> fn, String name) {\n+    return new PTransform<InT, OutT>(name) {\n+      @Override\n+      public OutT expand(InT input) {\n+        return fn.apply(input);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher\n+   * retried, which the PubsubLiteIO write method will do. Use the dedupe transform to remove these\n+   * duplicates.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMzU5OA==", "bodyText": "Yeah, you can create a CoderProviderRegistrar.  There's an example from another IO solving the same problem here: https://github.com/apache/beam/blob/master/sdks/java/io/hbase/src/main/java/org/apache/beam/sdk/io/hbase/HBaseCoderProviderRegistrar.java\nIn that provider, add default coders for SequencedMessage and Message\nAlso, remove the registerCoderForClass calls here", "url": "https://github.com/apache/beam/pull/11919#discussion_r443723598", "createdAt": "2020-06-22T17:41:22Z", "author": {"login": "dpmills"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/UuidDeduplicationTransform.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import java.math.BigInteger;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+class UuidDeduplicationTransform\n+    extends PTransform<PCollection<SequencedMessage>, PCollection<SequencedMessage>> {\n+  private final UuidDeduplicationOptions options;\n+\n+  UuidDeduplicationTransform(UuidDeduplicationOptions options) {\n+    this.options = options;\n+  }\n+\n+  @Override\n+  public PCollection<SequencedMessage> expand(PCollection<SequencedMessage> input) {\n+    input.getPipeline().getCoderRegistry().registerCoderForClass(Uuid.class, Uuid.getCoder());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzMDU1Ng=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bef2df8e99b05d210672b0f9baedc3d7123cd87e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/bef2df8e99b05d210672b0f9baedc3d7123cd87e", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "fe4bcca94bd9837055ba1c001ea935357b29bc9e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/fe4bcca94bd9837055ba1c001ea935357b29bc9e", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe4bcca94bd9837055ba1c001ea935357b29bc9e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/fe4bcca94bd9837055ba1c001ea935357b29bc9e", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "02f165e1061a9996d618c297b031af2ca27cdb91", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/02f165e1061a9996d618c297b031af2ca27cdb91", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjI0MDcy", "url": "https://github.com/apache/beam/pull/11919#pullrequestreview-435224072", "createdAt": "2020-06-22T19:48:24Z", "commit": {"oid": "02f165e1061a9996d618c297b031af2ca27cdb91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02f165e1061a9996d618c297b031af2ca27cdb91", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/02f165e1061a9996d618c297b031af2ca27cdb91", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "1b0caecb34b3114898e4ef819918bc888f0ac990", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1b0caecb34b3114898e4ef819918bc888f0ac990", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b0caecb34b3114898e4ef819918bc888f0ac990", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1b0caecb34b3114898e4ef819918bc888f0ac990", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}, "afterCommit": {"oid": "35d1d18c32e6ebcc8ffdc6e90b782b499a3b8fa1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/35d1d18c32e6ebcc8ffdc6e90b782b499a3b8fa1", "committedDate": "2020-06-04T14:54:32Z", "message": "Copy Pub/Sub Lite IO from Pub/Sub Lite github to beam.\n\nAlso adapt to beam conventions and restrictions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0498102f88fc12318dd352c9c361f6db7d3bd155", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0498102f88fc12318dd352c9c361f6db7d3bd155", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eead238f8ee96de571bffebe59b68cbd840fe4f6", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eead238f8ee96de571bffebe59b68cbd840fe4f6", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "de5140f56af2efeb9a815abb7c611c59eb29d19f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/de5140f56af2efeb9a815abb7c611c59eb29d19f", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de5140f56af2efeb9a815abb7c611c59eb29d19f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/de5140f56af2efeb9a815abb7c611c59eb29d19f", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "19fa0f3d69096cf403b77bfdeaf202a6027d6647", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/19fa0f3d69096cf403b77bfdeaf202a6027d6647", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19fa0f3d69096cf403b77bfdeaf202a6027d6647", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/19fa0f3d69096cf403b77bfdeaf202a6027d6647", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "657348046ef28da217f597c8f93ff41d9a97ffba", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/657348046ef28da217f597c8f93ff41d9a97ffba", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "657348046ef28da217f597c8f93ff41d9a97ffba", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/657348046ef28da217f597c8f93ff41d9a97ffba", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "05ec4749645b259d83a4f831ddde31ef4850e36c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/05ec4749645b259d83a4f831ddde31ef4850e36c", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05ec4749645b259d83a4f831ddde31ef4850e36c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/05ec4749645b259d83a4f831ddde31ef4850e36c", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "eac451f9716173a0a2b11af41dfe7bb9542d12f1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eac451f9716173a0a2b11af41dfe7bb9542d12f1", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eac451f9716173a0a2b11af41dfe7bb9542d12f1", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/eac451f9716173a0a2b11af41dfe7bb9542d12f1", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "dba6edfa09d85127322f79a71903521b293722e3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/dba6edfa09d85127322f79a71903521b293722e3", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dba6edfa09d85127322f79a71903521b293722e3", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/dba6edfa09d85127322f79a71903521b293722e3", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/24cf3af864cac20f57fe38ec192ad4a194b17165", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTQ1NzM0", "url": "https://github.com/apache/beam/pull/11919#pullrequestreview-446145734", "createdAt": "2020-07-10T06:16:47Z", "commit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxNjo0N1rOGvrIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo0NTo0MFrOGvruFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0Mjg1Ng==", "bodyText": "Could you send the update to core as a separate PR ?", "url": "https://github.com/apache/beam/pull/11919#discussion_r452642856", "createdAt": "2020-07-10T06:16:47Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "diffHunk": "@@ -109,16 +110,33 @@ public void processElement(\n   public static class ViaRandomKey<T> extends PTransform<PCollection<T>, PCollection<T>> {\n     private ViaRandomKey() {}\n \n+    private ViaRandomKey(@Nullable Integer numBuckets) {\n+      this.numBuckets = numBuckets;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MDM5OQ==", "bodyText": "Did you run into an issue when using existing Reshuffle implementation ?", "url": "https://github.com/apache/beam/pull/11919#discussion_r452650399", "createdAt": "2020-07-10T06:39:43Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Reshuffle.java", "diffHunk": "@@ -109,16 +110,33 @@ public void processElement(\n   public static class ViaRandomKey<T> extends PTransform<PCollection<T>, PCollection<T>> {\n     private ViaRandomKey() {}\n \n+    private ViaRandomKey(@Nullable Integer numBuckets) {\n+      this.numBuckets = numBuckets;\n+    }\n+\n+    // The number of buckets to shard into. This is a performance optimization to prevent having\n+    // unit sized bundles on the output. If unset, uses a random integer key.\n+    private @Nullable Integer numBuckets;\n+\n+    public ViaRandomKey<T> withNumBuckets(@Nullable Integer numBuckets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MDk0Mg==", "bodyText": "Please address this.", "url": "https://github.com/apache/beam/pull/11919#discussion_r452650942", "createdAt": "2020-07-10T06:41:15Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.Message;\n+import com.google.cloud.pubsublite.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.PInput;\n+import org.apache.beam.sdk.values.POutput;\n+\n+@Experimental", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2OTQ5Nw=="}, "originalCommit": {"oid": "a6ee4b3fa536f480075c4b619076864a23ad127f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTYwMA==", "bodyText": "Please add a link to a Website that describes Pub/Sub Lite and briefly describe the difference between this and the Pub/Sub connector.", "url": "https://github.com/apache/beam/pull/11919#discussion_r452651600", "createdAt": "2020-07-10T06:42:59Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteIO.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsublite;\n+\n+import com.google.cloud.pubsublite.proto.PubSubMessage;\n+import com.google.cloud.pubsublite.proto.SequencedMessage;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.Read;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+\n+@Experimental\n+public final class PubsubLiteIO {\n+  private PubsubLiteIO() {}\n+\n+  /**\n+   * Read messages from Pub/Sub Lite. These messages may contain duplicates if the publisher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MjU2Ng==", "bodyText": "Are you hoping to add integration tests for source and sink in a follow up CL ?", "url": "https://github.com/apache/beam/pull/11919#discussion_r452652566", "createdAt": "2020-07-10T06:45:40Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/pubsublite/PubsubLiteUnboundedReaderTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24cf3af864cac20f57fe38ec192ad4a194b17165", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/24cf3af864cac20f57fe38ec192ad4a194b17165", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "d15f50a83ff2c58e159b0429983d3c5c9d1574eb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d15f50a83ff2c58e159b0429983d3c5c9d1574eb", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d15f50a83ff2c58e159b0429983d3c5c9d1574eb", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d15f50a83ff2c58e159b0429983d3c5c9d1574eb", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}, "afterCommit": {"oid": "0498102f88fc12318dd352c9c361f6db7d3bd155", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0498102f88fc12318dd352c9c361f6db7d3bd155", "committedDate": "2020-06-27T22:35:18Z", "message": "Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4010, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}