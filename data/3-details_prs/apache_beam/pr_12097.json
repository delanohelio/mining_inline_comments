{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDM4OTI0", "number": 12097, "title": "[BEAM-10327] Create a pattern that shows use of Schema using Joins", "bodyText": "[BEAM-10327] Create a pattern showing use of Schema\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\n\n\n\n\nGo\n\n---\n\n---\n\n\n\nJava\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n\n\nXLang\n---\n---\n\n---\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-06-26T07:56:26Z", "url": "https://github.com/apache/beam/pull/12097", "merged": true, "mergeCommit": {"oid": "68a3a730c7697e4838883c4de4acefb9a72ded70"}, "closed": true, "closedAt": "2020-07-01T22:00:19Z", "author": {"login": "abhiy13"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcu-YrWAH2gAyNDQwNDM4OTI0OmM1MTFjZDY4ZGFkNWJiYTlhNDY4ZGVhODc2OWU0NzNiMzU1YWY4OWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwxkq9gFqTQ0MTIyMzcxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c511cd68dad5bba9a468dea8769e473b355af89f", "author": {"user": {"login": "abhiy13", "name": "Abhishek Yadav"}}, "url": "https://github.com/apache/beam/commit/c511cd68dad5bba9a468dea8769e473b355af89f", "committedDate": "2020-06-26T07:47:40Z", "message": "[BEAM-10327] Create a pattern that shows use of Schema using Joins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "author": {"user": {"login": "abhiy13", "name": "Abhishek Yadav"}}, "url": "https://github.com/apache/beam/commit/e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "committedDate": "2020-06-26T15:01:33Z", "message": "Run Spotless PreCommit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDg1Mzc2", "url": "https://github.com/apache/beam/pull/12097#pullrequestreview-438485376", "createdAt": "2020-06-26T17:49:23Z", "commit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDg2ODAy", "url": "https://github.com/apache/beam/pull/12097#pullrequestreview-438486802", "createdAt": "2020-06-26T17:51:43Z", "commit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MTo0M1rOGppqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoxNToxNFrOGpqVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzM2Mg==", "bodyText": "How about \"The samples on this page describe common patterns using Schemas.\"", "url": "https://github.com/apache/beam/pull/12097#discussion_r446327362", "createdAt": "2020-06-26T17:51:43Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODI3MA==", "bodyText": "Might be easier to read if we break up this sentence.", "url": "https://github.com/apache/beam/pull/12097#discussion_r446328270", "createdAt": "2020-06-26T17:53:34Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTQxNw==", "bodyText": "A Schema is a way to represent records with a fixed structure. Schemas are useful because Beam sources commonly produce JSON, Avro or database row objects all of which have a well-defined structure.", "url": "https://github.com/apache/beam/pull/12097#discussion_r446329417", "createdAt": "2020-06-26T17:56:02Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODI3MA=="}, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTc2Ng==", "bodyText": "s/Join/Join\n(Adding link + ticks)", "url": "https://github.com/apache/beam/pull/12097#discussion_r446329766", "createdAt": "2020-06-26T17:56:46Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMDE4NA==", "bodyText": "Should we use consistent terminology here: 'collection' or 'dataset' instead of several terms: file, collection, dataset, data set?", "url": "https://github.com/apache/beam/pull/12097#discussion_r446330184", "createdAt": "2020-06-26T17:57:43Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzgyNA==", "bodyText": "s/examples/example", "url": "https://github.com/apache/beam/pull/12097#discussion_r446333824", "createdAt": "2020-06-26T18:05:33Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.\n+You can join the two data sets using the name as a common key and the other data as the associated values.\n+After the join, you have one dataset that contains all the information (email address and phone numbers) associated with each name.\n+\n+The following conceptual examples uses two input collections to show the mechanism of Join.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDIwNw==", "bodyText": "How about: 'We define PCollections, their  schemas  and then perform...\"", "url": "https://github.com/apache/beam/pull/12097#discussion_r446334207", "createdAt": "2020-06-26T18:06:28Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.\n+You can join the two data sets using the name as a common key and the other data as the associated values.\n+After the join, you have one dataset that contains all the information (email address and phone numbers) associated with each name.\n+\n+The following conceptual examples uses two input collections to show the mechanism of Join.\n+\n+You can define the Schema and the schema `PCollection` and then perform join on the two `PCollections` using a [Join](https://beam.apache.org/releases/javadoc/2.21.0/org/apache/beam/sdk/schemas/transforms/Join.html). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDg5NQ==", "bodyText": "Nit: let's add ticks around Join since it refers to a code statement Join.", "url": "https://github.com/apache/beam/pull/12097#discussion_r446334895", "createdAt": "2020-06-26T18:07:50Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.\n+You can join the two data sets using the name as a common key and the other data as the associated values.\n+After the join, you have one dataset that contains all the information (email address and phone numbers) associated with each name.\n+\n+The following conceptual examples uses two input collections to show the mechanism of Join.\n+\n+You can define the Schema and the schema `PCollection` and then perform join on the two `PCollections` using a [Join](https://beam.apache.org/releases/javadoc/2.21.0/org/apache/beam/sdk/schemas/transforms/Join.html). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzODM3OQ==", "bodyText": "actually, let me add @rosetn @davidwrede who can guide better on the style of Website narrative.", "url": "https://github.com/apache/beam/pull/12097#discussion_r446338379", "createdAt": "2020-06-26T18:15:14Z", "author": {"login": "tvalentyn"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzM2Mg=="}, "originalCommit": {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9443d5c0ddc3d8ca444d2cabdbeab79ddb3bbda", "author": {"user": {"login": "abhiy13", "name": "Abhishek Yadav"}}, "url": "https://github.com/apache/beam/commit/f9443d5c0ddc3d8ca444d2cabdbeab79ddb3bbda", "committedDate": "2020-06-26T23:02:32Z", "message": "Add tests for the SchemaJoinPattern and Fix Documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3db8eaa7ba60d18998308d49e0ea1a1aff81370", "author": {"user": {"login": "abhiy13", "name": "Abhishek Yadav"}}, "url": "https://github.com/apache/beam/commit/f3db8eaa7ba60d18998308d49e0ea1a1aff81370", "committedDate": "2020-06-26T23:51:53Z", "message": "QuickFix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODc2ODc2", "url": "https://github.com/apache/beam/pull/12097#pullrequestreview-438876876", "createdAt": "2020-06-29T04:20:53Z", "commit": {"oid": "f3db8eaa7ba60d18998308d49e0ea1a1aff81370"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDoyMDo1M1rOGqETFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDoyMzoxM1rOGqEVBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2Mzc5OA==", "bodyText": "Maybe just borrow the text from:\nhttps://beam.apache.org/documentation/programming-guide/#what-is-a-schema\nSchemas provide us a type-system for Beam records that is independent of any specific programming-language type. There might be multiple Java classes that all have the same schema (for example a Protocol-Buffer class or a POJO class), and Beam will allow us to seamlessly convert between these types. Schemas also provide a simple way to reason about types across different programming-language APIs.", "url": "https://github.com/apache/beam/pull/12097#discussion_r446763798", "createdAt": "2020-06-29T04:20:53Z", "author": {"login": "rezarokni"}, "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,56 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page describe common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure. Schemas are useful because Beam sources commonly produce JSON, Avro or database row objects all of which have a well-defined structure. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3db8eaa7ba60d18998308d49e0ea1a1aff81370"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2NDI5NQ==", "bodyText": "As this is example snippet code, consider if it would be easier for the reader to have the code be inlined here rather than be abstracted in a class.", "url": "https://github.com/apache/beam/pull/12097#discussion_r446764295", "createdAt": "2020-06-29T04:23:13Z", "author": {"login": "rezarokni"}, "path": "examples/java/src/test/java/org/apache/beam/examples/snippets/SnippetsTest.java", "diffHunk": "@@ -154,6 +156,73 @@ public void testCoGroupByKeyTuple() throws IOException {\n     p.run();\n   }\n \n+  /* Tests SchemaJoinPattern */\n+  @Test\n+  public void testSchemaJoinPattern() {\n+    // [START SchemaJoinPatternCreate]\n+    // Define Schemas\n+    Schema emailSchema =\n+        Schema.of(\n+            Schema.Field.of(\"name\", Schema.FieldType.STRING),\n+            Schema.Field.of(\"email\", Schema.FieldType.STRING));\n+\n+    Schema phoneSchema =\n+        Schema.of(\n+            Schema.Field.of(\"name\", Schema.FieldType.STRING),\n+            Schema.Field.of(\"phone\", Schema.FieldType.STRING));\n+\n+    // Create User Data Collections\n+    final List<Row> emailUsers =\n+        Arrays.asList(\n+            Row.withSchema(emailSchema).addValue(\"person1\").addValue(\"person1@example.com\").build(),\n+            Row.withSchema(emailSchema).addValue(\"person2\").addValue(\"person2@example.com\").build(),\n+            Row.withSchema(emailSchema).addValue(\"person3\").addValue(\"person3@example.com\").build(),\n+            Row.withSchema(emailSchema)\n+                .addValue(\"person4\")\n+                .addValue(\"person4@example.com\")\n+                .build());\n+\n+    final List<Row> phoneUsers =\n+        Arrays.asList(\n+            Row.withSchema(phoneSchema).addValue(\"person1\").addValue(\"111-222-3333\").build(),\n+            Row.withSchema(phoneSchema).addValue(\"person2\").addValue(\"222-333-4444\").build(),\n+            Row.withSchema(phoneSchema).addValue(\"person3\").addValue(\"444-333-4444\").build(),\n+            Row.withSchema(phoneSchema).addValue(\"person4\").addValue(\"555-333-4444\").build());\n+\n+    // [END SchemaJoinPatternCreate]\n+\n+    PCollection<String> actualFormattedResult =\n+        Snippets.SchemaJoinPattern.main(p, emailUsers, phoneUsers, emailSchema, phoneSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3db8eaa7ba60d18998308d49e0ea1a1aff81370"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af470d00cf7eb5687ef572faf80ffa0f949b293", "author": {"user": {"login": "abhiy13", "name": "Abhishek Yadav"}}, "url": "https://github.com/apache/beam/commit/4af470d00cf7eb5687ef572faf80ffa0f949b293", "committedDate": "2020-06-29T10:04:20Z", "message": "Add non-match to example and documentation improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e81c24fd56bf9d2790f63103a240f2a697124d4", "author": {"user": {"login": "abhiy13", "name": "Abhishek Yadav"}}, "url": "https://github.com/apache/beam/commit/5e81c24fd56bf9d2790f63103a240f2a697124d4", "committedDate": "2020-06-29T13:16:24Z", "message": "quickfix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjIzNzE3", "url": "https://github.com/apache/beam/pull/12097#pullrequestreview-441223717", "createdAt": "2020-07-01T21:59:51Z", "commit": {"oid": "5e81c24fd56bf9d2790f63103a240f2a697124d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3156, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}