{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzM4OTc4", "number": 10752, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNDo0MVrODep2fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyNzowNlrODe7pVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDY5NTY0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNDo0MVrOFn6Wpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToxMzo1NlrOFoFKQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NDg1NQ==", "bodyText": "Can this be made configurable.", "url": "https://github.com/apache/beam/pull/10752#discussion_r377394855", "createdAt": "2020-02-11T00:24:41Z", "author": {"login": "allenpradeep"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerConfig.java", "diffHunk": "@@ -42,6 +50,10 @@\n   private static final String USER_AGENT_PREFIX = \"Apache_Beam_Java\";\n   // A default host name for batch traffic.\n   private static final String DEFAULT_HOST = \"https://batch-spanner.googleapis.com/\";\n+  // Deadline for Commit API call.\n+  private static final Duration DEFAULT_COMMIT_DEADLINE = Duration.standardSeconds(15);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecfb125889c12848b1eec744e3bbcc978d086763"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3MTkwNw==", "bodyText": "Configurable using SpannerIO.Write.withCommitDeadline()\nas is DEFAULT_MAX_CUMULATIVE_BACKOFF with SpannerIO.Write.withMaxCumulativeBackoff()", "url": "https://github.com/apache/beam/pull/10752#discussion_r377571907", "createdAt": "2020-02-11T11:13:56Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerConfig.java", "diffHunk": "@@ -42,6 +50,10 @@\n   private static final String USER_AGENT_PREFIX = \"Apache_Beam_Java\";\n   // A default host name for batch traffic.\n   private static final String DEFAULT_HOST = \"https://batch-spanner.googleapis.com/\";\n+  // Deadline for Commit API call.\n+  private static final Duration DEFAULT_COMMIT_DEADLINE = Duration.standardSeconds(15);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NDg1NQ=="}, "originalCommit": {"oid": "ecfb125889c12848b1eec744e3bbcc978d086763"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDcwMDQ1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNzoxMFrOFn6Zbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToxNDoyOFrOFoFLPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NTU2Nw==", "bodyText": "we can remove this if this is not being used.", "url": "https://github.com/apache/beam/pull/10752#discussion_r377395567", "createdAt": "2020-02-11T00:27:10Z", "author": {"login": "allenpradeep"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1285,30 +1373,84 @@ public void processElement(ProcessContext c) throws Exception {\n       boolean tryIndividual = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecfb125889c12848b1eec744e3bbcc978d086763"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3MjE1Nw==", "bodyText": "its gone.", "url": "https://github.com/apache/beam/pull/10752#discussion_r377572157", "createdAt": "2020-02-11T11:14:28Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1285,30 +1373,84 @@ public void processElement(ProcessContext c) throws Exception {\n       boolean tryIndividual = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NTU2Nw=="}, "originalCommit": {"oid": "ecfb125889c12848b1eec744e3bbcc978d086763"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDcxMzg1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDozNDozOVrOFn6haQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMToxODo0M1rOFoFS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NzYwOQ==", "bodyText": "Would an average writeLatency(if its possible to calculate) be more actionable to the user rather than a total write latency? In the sense, if the write latency is high then the user can reduce the workers.", "url": "https://github.com/apache/beam/pull/10752#discussion_r377397609", "createdAt": "2020-02-11T00:34:39Z", "author": {"login": "allenpradeep"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1248,20 +1307,44 @@ public void processElement(ProcessContext c) {\n     }\n   }\n \n-  private static class WriteToSpannerFn extends DoFn<Iterable<MutationGroup>, Void> {\n+  @VisibleForTesting\n+  static class WriteToSpannerFn extends DoFn<Iterable<MutationGroup>, Void> {\n \n     private transient SpannerAccessor spannerAccessor;\n     private final SpannerConfig spannerConfig;\n     private final FailureMode failureMode;\n-    private final Counter mutationGroupBatchesCounter =\n-        Metrics.counter(WriteGrouped.class, \"mutation_group_batches\");\n-    private final Counter mutationGroupWriteSuccessCounter =\n+\n+    @VisibleForTesting static Sleeper sleeper = Sleeper.DEFAULT;\n+\n+    private final Counter mutationGroupBatchesReceived =\n+        Metrics.counter(WriteGrouped.class, \"mutation_group_batches_received\");\n+    private final Counter mutationGroupBatchesWriteSuccess =\n+        Metrics.counter(WriteGrouped.class, \"mutation_group_batches_write_success\");\n+    private final Counter mutationGroupBatchesWriteFail =\n+        Metrics.counter(WriteGrouped.class, \"mutation_group_batches_write_fail\");\n+\n+    private final Counter mutationGroupsReceived =\n+        Metrics.counter(WriteGrouped.class, \"mutation_groups_received\");\n+    private final Counter mutationGroupsWriteSuccess =\n         Metrics.counter(WriteGrouped.class, \"mutation_groups_write_success\");\n-    private final Counter mutationGroupWriteFailCounter =\n+    private final Counter mutationGroupsWriteFail =\n         Metrics.counter(WriteGrouped.class, \"mutation_groups_write_fail\");\n \n+    private final Counter spannerWriteSuccess =\n+        Metrics.counter(WriteGrouped.class, \"spanner_write_success\");\n+    private final Counter spannerWriteFail =\n+        Metrics.counter(WriteGrouped.class, \"spanner_write_fail\");\n+    private final Counter spannerWriteTotalLatency =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecfb125889c12848b1eec744e3bbcc978d086763"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NDA5Ng==", "bodyText": "Its not possible - the only things we can export are counters and gauges.\nUser will have to manually calculate average latency.", "url": "https://github.com/apache/beam/pull/10752#discussion_r377574096", "createdAt": "2020-02-11T11:18:43Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1248,20 +1307,44 @@ public void processElement(ProcessContext c) {\n     }\n   }\n \n-  private static class WriteToSpannerFn extends DoFn<Iterable<MutationGroup>, Void> {\n+  @VisibleForTesting\n+  static class WriteToSpannerFn extends DoFn<Iterable<MutationGroup>, Void> {\n \n     private transient SpannerAccessor spannerAccessor;\n     private final SpannerConfig spannerConfig;\n     private final FailureMode failureMode;\n-    private final Counter mutationGroupBatchesCounter =\n-        Metrics.counter(WriteGrouped.class, \"mutation_group_batches\");\n-    private final Counter mutationGroupWriteSuccessCounter =\n+\n+    @VisibleForTesting static Sleeper sleeper = Sleeper.DEFAULT;\n+\n+    private final Counter mutationGroupBatchesReceived =\n+        Metrics.counter(WriteGrouped.class, \"mutation_group_batches_received\");\n+    private final Counter mutationGroupBatchesWriteSuccess =\n+        Metrics.counter(WriteGrouped.class, \"mutation_group_batches_write_success\");\n+    private final Counter mutationGroupBatchesWriteFail =\n+        Metrics.counter(WriteGrouped.class, \"mutation_group_batches_write_fail\");\n+\n+    private final Counter mutationGroupsReceived =\n+        Metrics.counter(WriteGrouped.class, \"mutation_groups_received\");\n+    private final Counter mutationGroupsWriteSuccess =\n         Metrics.counter(WriteGrouped.class, \"mutation_groups_write_success\");\n-    private final Counter mutationGroupWriteFailCounter =\n+    private final Counter mutationGroupsWriteFail =\n         Metrics.counter(WriteGrouped.class, \"mutation_groups_write_fail\");\n \n+    private final Counter spannerWriteSuccess =\n+        Metrics.counter(WriteGrouped.class, \"spanner_write_success\");\n+    private final Counter spannerWriteFail =\n+        Metrics.counter(WriteGrouped.class, \"spanner_write_fail\");\n+    private final Counter spannerWriteTotalLatency =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NzYwOQ=="}, "originalCommit": {"oid": "ecfb125889c12848b1eec744e3bbcc978d086763"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzYxMTExOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyNzowNlrOFoWGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1MzoxM1rOFoaiUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0OTQ0OQ==", "bodyText": "Just to confirm, this deadline will not cause Dataflow workitems to fail but just that request will be retried by SpannerIO within the same workitem ? (otherwise jobs can significantly slow down or fail if we rely on workitem retries.)", "url": "https://github.com/apache/beam/pull/10752#discussion_r377849449", "createdAt": "2020-02-11T19:27:06Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerConfig.java", "diffHunk": "@@ -136,13 +163,51 @@ public SpannerConfig withHost(ValueProvider<String> host) {\n     return toBuilder().setHost(host).build();\n   }\n \n+  public SpannerConfig withCommitDeadline(Duration commitDeadline) {\n+    return withCommitDeadline(ValueProvider.StaticValueProvider.of(commitDeadline));\n+  }\n+\n+  public SpannerConfig withCommitDeadline(ValueProvider<Duration> commitDeadline) {\n+    return toBuilder().setCommitDeadline(commitDeadline).build();\n+  }\n+\n+  public SpannerConfig withMaxCumulativeBackoff(Duration maxCumulativeBackoff) {\n+    return withMaxCumulativeBackoff(ValueProvider.StaticValueProvider.of(maxCumulativeBackoff));\n+  }\n+\n+  public SpannerConfig withMaxCumulativeBackoff(ValueProvider<Duration> maxCumulativeBackoff) {\n+    return toBuilder().setMaxCumulativeBackoff(maxCumulativeBackoff).build();\n+  }\n+\n   @VisibleForTesting\n   SpannerConfig withServiceFactory(ServiceFactory<Spanner, SpannerOptions> serviceFactory) {\n     return toBuilder().setServiceFactory(serviceFactory).build();\n   }\n \n   public SpannerAccessor connectToSpanner() {\n     SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    if (getCommitDeadline() != null && getCommitDeadline().get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =\n+      // builder.getSpannerStubSettingsBuilder().commitSettings();\n+      // RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder()\n+      // commitSettings.setRetrySettings(\n+      //     commitRetrySettings.setTotalTimeout(\n+      //         Duration.ofMillis(getCommitDeadlineMillis().get()))\n+      //     .build());\n+      //\n+      // However, at time of this commit, the Spanner API is at only at v1.6.0, where the only\n+      // method to set a deadline is with GRPC Interceptors, so we have to use that...\n+      SpannerInterceptorProvider interceptorProvider =\n+          SpannerInterceptorProvider.createDefault()\n+              .with(new CommitDeadlineSettingInterceptor(getCommitDeadline().get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1ff5b808020d237e2e0e23c453b52a192ef2ae"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NTk5MA==", "bodyText": "This seems to be the case. I'll merge after tests pass. Thanks folks.", "url": "https://github.com/apache/beam/pull/10752#discussion_r377855990", "createdAt": "2020-02-11T19:39:38Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerConfig.java", "diffHunk": "@@ -136,13 +163,51 @@ public SpannerConfig withHost(ValueProvider<String> host) {\n     return toBuilder().setHost(host).build();\n   }\n \n+  public SpannerConfig withCommitDeadline(Duration commitDeadline) {\n+    return withCommitDeadline(ValueProvider.StaticValueProvider.of(commitDeadline));\n+  }\n+\n+  public SpannerConfig withCommitDeadline(ValueProvider<Duration> commitDeadline) {\n+    return toBuilder().setCommitDeadline(commitDeadline).build();\n+  }\n+\n+  public SpannerConfig withMaxCumulativeBackoff(Duration maxCumulativeBackoff) {\n+    return withMaxCumulativeBackoff(ValueProvider.StaticValueProvider.of(maxCumulativeBackoff));\n+  }\n+\n+  public SpannerConfig withMaxCumulativeBackoff(ValueProvider<Duration> maxCumulativeBackoff) {\n+    return toBuilder().setMaxCumulativeBackoff(maxCumulativeBackoff).build();\n+  }\n+\n   @VisibleForTesting\n   SpannerConfig withServiceFactory(ServiceFactory<Spanner, SpannerOptions> serviceFactory) {\n     return toBuilder().setServiceFactory(serviceFactory).build();\n   }\n \n   public SpannerAccessor connectToSpanner() {\n     SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    if (getCommitDeadline() != null && getCommitDeadline().get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =\n+      // builder.getSpannerStubSettingsBuilder().commitSettings();\n+      // RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder()\n+      // commitSettings.setRetrySettings(\n+      //     commitRetrySettings.setTotalTimeout(\n+      //         Duration.ofMillis(getCommitDeadlineMillis().get()))\n+      //     .build());\n+      //\n+      // However, at time of this commit, the Spanner API is at only at v1.6.0, where the only\n+      // method to set a deadline is with GRPC Interceptors, so we have to use that...\n+      SpannerInterceptorProvider interceptorProvider =\n+          SpannerInterceptorProvider.createDefault()\n+              .with(new CommitDeadlineSettingInterceptor(getCommitDeadline().get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0OTQ0OQ=="}, "originalCommit": {"oid": "fd1ff5b808020d237e2e0e23c453b52a192ef2ae"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMjEzMA==", "bodyText": "Just to confirm, this deadline will not cause Dataflow workitems to fail but just that request will be retried by SpannerIO within the same workitem\n\nCorrect, it will backoff/retry up to a configurable time limit (default 15 mins per workitem).", "url": "https://github.com/apache/beam/pull/10752#discussion_r377922130", "createdAt": "2020-02-11T21:53:13Z", "author": {"login": "nielm"}, "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerConfig.java", "diffHunk": "@@ -136,13 +163,51 @@ public SpannerConfig withHost(ValueProvider<String> host) {\n     return toBuilder().setHost(host).build();\n   }\n \n+  public SpannerConfig withCommitDeadline(Duration commitDeadline) {\n+    return withCommitDeadline(ValueProvider.StaticValueProvider.of(commitDeadline));\n+  }\n+\n+  public SpannerConfig withCommitDeadline(ValueProvider<Duration> commitDeadline) {\n+    return toBuilder().setCommitDeadline(commitDeadline).build();\n+  }\n+\n+  public SpannerConfig withMaxCumulativeBackoff(Duration maxCumulativeBackoff) {\n+    return withMaxCumulativeBackoff(ValueProvider.StaticValueProvider.of(maxCumulativeBackoff));\n+  }\n+\n+  public SpannerConfig withMaxCumulativeBackoff(ValueProvider<Duration> maxCumulativeBackoff) {\n+    return toBuilder().setMaxCumulativeBackoff(maxCumulativeBackoff).build();\n+  }\n+\n   @VisibleForTesting\n   SpannerConfig withServiceFactory(ServiceFactory<Spanner, SpannerOptions> serviceFactory) {\n     return toBuilder().setServiceFactory(serviceFactory).build();\n   }\n \n   public SpannerAccessor connectToSpanner() {\n     SpannerOptions.Builder builder = SpannerOptions.newBuilder();\n+\n+    if (getCommitDeadline() != null && getCommitDeadline().get().getMillis() > 0) {\n+\n+      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n+      // call using the following code:\n+      //\n+      // UnaryCallSettings.Builder commitSettings =\n+      // builder.getSpannerStubSettingsBuilder().commitSettings();\n+      // RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder()\n+      // commitSettings.setRetrySettings(\n+      //     commitRetrySettings.setTotalTimeout(\n+      //         Duration.ofMillis(getCommitDeadlineMillis().get()))\n+      //     .build());\n+      //\n+      // However, at time of this commit, the Spanner API is at only at v1.6.0, where the only\n+      // method to set a deadline is with GRPC Interceptors, so we have to use that...\n+      SpannerInterceptorProvider interceptorProvider =\n+          SpannerInterceptorProvider.createDefault()\n+              .with(new CommitDeadlineSettingInterceptor(getCommitDeadline().get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0OTQ0OQ=="}, "originalCommit": {"oid": "fd1ff5b808020d237e2e0e23c453b52a192ef2ae"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2132, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}