{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1Njg5Njg3", "number": 12516, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyNDo0N1rOEXSZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzowMjo1NlrOEYo3IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU0MTQxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyNDo0N1rOG-_oCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMDo0OVrOG_JFMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwNzMzNg==", "bodyText": "Would using 'nlargest' for the name of both the per-partition and global computed expression cause confusion for debugging or UX?", "url": "https://github.com/apache/beam/pull/12516#discussion_r468707336", "createdAt": "2020-08-11T16:24:47Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nlargest',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc21a154c32bb322bdbf5d7a65f1765ebe50547d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MjI1Ng==", "bodyText": "Good point, updated.", "url": "https://github.com/apache/beam/pull/12516#discussion_r468862256", "createdAt": "2020-08-11T21:00:49Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nlargest',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwNzMzNg=="}, "originalCommit": {"oid": "dc21a154c32bb322bdbf5d7a65f1765ebe50547d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODgzMjY0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzoyMToxMVrOHAg4LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0NToyM1rOHDQRvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwMDcxNw==", "bodyText": "How does 'keep' relate to the order sensitivity mentioned in the error? Using 'keep' can result in a possibly larger than n Series returned. Shouldn't this be using 'first' to return the first n occurrences?", "url": "https://github.com/apache/beam/pull/12516#discussion_r470300717", "createdAt": "2020-08-13T23:21:11Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NDQ2Mg==", "bodyText": "When there is a tie, a specification like \"first\" or \"last\" makes the result depend on the ordering to decide which ones to keep. With \"all\" we may return more than n occurrences (as in Pandas) but we no longer have to worry about keeping (or discarding) the right ones.", "url": "https://github.com/apache/beam/pull/12516#discussion_r473174462", "createdAt": "2020-08-19T16:45:23Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwMDcxNw=="}, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODg0OTYyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzozMDo0NFrOHAhCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1MToyN1rOHDQfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwMzM3MQ==", "bodyText": "Should this be up with the other elementwise_methods (e.g. prod) in the class? Or closer to the call site? I'm just trying to understand why it is here.\nAlso, I tried to follow along the implementation of elementwise_method but got lost at the _proxy_function. What does this do?", "url": "https://github.com/apache/beam/pull/12516#discussion_r470303371", "createdAt": "2020-08-13T23:30:44Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nlargest-per-partition',\n+        lambda df: df.nlargest(**kwargs), [self._expr],\n+        preserves_partition_by=partitionings.Singleton(),\n+        requires_partition_by=partitionings.Nothing())\n+    with expressions.allow_non_parallel_operations(True):\n+      return frame_base.DeferredFrame.wrap(\n+          expressions.ComputedExpression(\n+              'nlargest',\n+              lambda df: df.nlargest(**kwargs), [per_partition],\n+              preserves_partition_by=partitionings.Singleton(),\n+              requires_partition_by=partitionings.Singleton()))\n+\n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nsmallest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nsmallest-per-partition',\n+        lambda df: df.nsmallest(**kwargs), [self._expr],\n+        preserves_partition_by=partitionings.Singleton(),\n+        requires_partition_by=partitionings.Nothing())\n+    with expressions.allow_non_parallel_operations(True):\n+      return frame_base.DeferredFrame.wrap(\n+          expressions.ComputedExpression(\n+              'nsmallest',\n+              lambda df: df.nsmallest(**kwargs), [per_partition],\n+              preserves_partition_by=partitionings.Singleton(),\n+              requires_partition_by=partitionings.Singleton()))\n+\n+  rename_axis = frame_base._elementwise_method('rename_axis')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3Nzk4NA==", "bodyText": "Given I'm going for full coverage, I tried to keep them in basic alphabetical order, unless there is an obvious relationship between methods.\nAs for elementwise_method, basically it creates a method that returns expressions.ComputedExpression(name, lambda df: getattr(df, name)(args), self._expr, preserves=Singleton(), requires=Nothing) but also handles a mix of deferred and non-deferred arguments. It was such a common pattern that I made a helper for it.", "url": "https://github.com/apache/beam/pull/12516#discussion_r473177984", "createdAt": "2020-08-19T16:51:27Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nlargest-per-partition',\n+        lambda df: df.nlargest(**kwargs), [self._expr],\n+        preserves_partition_by=partitionings.Singleton(),\n+        requires_partition_by=partitionings.Nothing())\n+    with expressions.allow_non_parallel_operations(True):\n+      return frame_base.DeferredFrame.wrap(\n+          expressions.ComputedExpression(\n+              'nlargest',\n+              lambda df: df.nlargest(**kwargs), [per_partition],\n+              preserves_partition_by=partitionings.Singleton(),\n+              requires_partition_by=partitionings.Singleton()))\n+\n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nsmallest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nsmallest-per-partition',\n+        lambda df: df.nsmallest(**kwargs), [self._expr],\n+        preserves_partition_by=partitionings.Singleton(),\n+        requires_partition_by=partitionings.Nothing())\n+    with expressions.allow_non_parallel_operations(True):\n+      return frame_base.DeferredFrame.wrap(\n+          expressions.ComputedExpression(\n+              'nsmallest',\n+              lambda df: df.nsmallest(**kwargs), [per_partition],\n+              preserves_partition_by=partitionings.Singleton(),\n+              requires_partition_by=partitionings.Singleton()))\n+\n+  rename_axis = frame_base._elementwise_method('rename_axis')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwMzM3MQ=="}, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTQ4NjU2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNDoyMzo1OVrOHAnF0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0MjozMlrOHDQLRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQwMjUxNA==", "bodyText": "Documentation? The method name itself is pretty self documenting but at least on the parameters? I had to go look them up from pd.Series. Similarly for other public methods in this class, documentation would be helpful and go a long way towards making this more accessible for contributors.", "url": "https://github.com/apache/beam/pull/12516#discussion_r470402514", "createdAt": "2020-08-14T04:23:59Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3MjgwNw==", "bodyText": "All of these public methods are proxies for the (extensively documented) methods of the same name in Pandas.", "url": "https://github.com/apache/beam/pull/12516#discussion_r473172807", "createdAt": "2020-08-19T16:42:32Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQwMjUxNA=="}, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTU0ODQ0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNTowMzowOFrOHAnouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0Njo0MVrOHDQU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxMTQ0OA==", "bodyText": "Are DeferredFrame expressions that are configured at pipeline construction but passed to workers for execution?", "url": "https://github.com/apache/beam/pull/12516#discussion_r470411448", "createdAt": "2020-08-14T05:03:08Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nlargest-per-partition',\n+        lambda df: df.nlargest(**kwargs), [self._expr],\n+        preserves_partition_by=partitionings.Singleton(),\n+        requires_partition_by=partitionings.Nothing())\n+    with expressions.allow_non_parallel_operations(True):\n+      return frame_base.DeferredFrame.wrap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NTI2NQ==", "bodyText": "Technically, it's the Expressions that they wrap that are passed down to workers for execution, but yes, that's the basic idea.", "url": "https://github.com/apache/beam/pull/12516#discussion_r473175265", "createdAt": "2020-08-19T16:46:41Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -54,6 +54,42 @@ def agg(self, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  @frame_base.args_to_kwargs(pd.Series)\n+  def nlargest(self, **kwargs):\n+    if 'keep' in kwargs and kwargs['keep'] != 'all':\n+      raise frame_base.WontImplementError('order-sensitive')\n+    per_partition = expressions.ComputedExpression(\n+        'nlargest-per-partition',\n+        lambda df: df.nlargest(**kwargs), [self._expr],\n+        preserves_partition_by=partitionings.Singleton(),\n+        requires_partition_by=partitionings.Nothing())\n+    with expressions.allow_non_parallel_operations(True):\n+      return frame_base.DeferredFrame.wrap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQxMTQ0OA=="}, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTYzMTMyOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/frames.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNTo1MDozOFrOHAoXgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1Nzo0NlrOHDQxmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQyMzQyNg==", "bodyText": "Why is this not defined as a method like revert is above?", "url": "https://github.com/apache/beam/pull/12516#discussion_r470423426", "createdAt": "2020-08-14T05:50:38Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -200,9 +236,178 @@ def dropna(self, axis, **kwargs):\n   items = itertuples = iterrows = iteritems = frame_base.wont_implement_method(\n       'non-lazy')\n \n+  def _cols_as_temporary_index(self, cols, suffix=''):\n+    original_index_names = list(self._expr.proxy().index.names)\n+    new_index_names = [\n+        '__apache_beam_temp_%d_%s' % (ix, suffix)\n+        for (ix, _) in enumerate(original_index_names)]\n+    def revert(df):\n+      return frame_base.DeferredFrame.wrap(\n+          expressions.ComputedExpression(\n+              'join_restoreindex',\n+              lambda df:\n+                  df.reset_index().set_index(new_index_names)\n+                  .rename_axis(index=original_index_names, copy=False),\n+              [df._expr],\n+              preserves_partition_by=partitionings.Nothing(),\n+              requires_partition_by=partitionings.Nothing()))\n+    reindexed = frame_base.DeferredFrame.wrap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4MjYxOA==", "bodyText": "Good question. Only because it was always invoked right away. Updated to be a method for symmetry.", "url": "https://github.com/apache/beam/pull/12516#discussion_r473182618", "createdAt": "2020-08-19T16:57:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -200,9 +236,178 @@ def dropna(self, axis, **kwargs):\n   items = itertuples = iterrows = iteritems = frame_base.wont_implement_method(\n       'non-lazy')\n \n+  def _cols_as_temporary_index(self, cols, suffix=''):\n+    original_index_names = list(self._expr.proxy().index.names)\n+    new_index_names = [\n+        '__apache_beam_temp_%d_%s' % (ix, suffix)\n+        for (ix, _) in enumerate(original_index_names)]\n+    def revert(df):\n+      return frame_base.DeferredFrame.wrap(\n+          expressions.ComputedExpression(\n+              'join_restoreindex',\n+              lambda df:\n+                  df.reset_index().set_index(new_index_names)\n+                  .rename_axis(index=original_index_names, copy=False),\n+              [df._expr],\n+              preserves_partition_by=partitionings.Nothing(),\n+              requires_partition_by=partitionings.Nothing()))\n+    reindexed = frame_base.DeferredFrame.wrap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQyMzQyNg=="}, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjY5MDg1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/pandas_doctests_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjo1MToxN1rOHBFOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1ODo0NlrOHDQ1mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NjE0OQ==", "bodyText": "keep='first' as well?", "url": "https://github.com/apache/beam/pull/12516#discussion_r470896149", "createdAt": "2020-08-14T22:51:17Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/pandas_doctests_test.py", "diffHunk": "@@ -43,6 +43,13 @@ def test_dataframe_tests(self):\n             'pandas.core.frame.DataFrame.itertuples': ['*'],\n             'pandas.core.frame.DataFrame.iterrows': ['*'],\n             'pandas.core.frame.DataFrame.iteritems': ['*'],\n+            'pandas.core.frame.DataFrame.nlargest': [\n+                \"df.nlargest(3, 'population', keep='last')\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4MzY0Mw==", "bodyText": "This is skipping a specific test that exists in the docstring.", "url": "https://github.com/apache/beam/pull/12516#discussion_r473183643", "createdAt": "2020-08-19T16:58:46Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/pandas_doctests_test.py", "diffHunk": "@@ -43,6 +43,13 @@ def test_dataframe_tests(self):\n             'pandas.core.frame.DataFrame.itertuples': ['*'],\n             'pandas.core.frame.DataFrame.iterrows': ['*'],\n             'pandas.core.frame.DataFrame.iteritems': ['*'],\n+            'pandas.core.frame.DataFrame.nlargest': [\n+                \"df.nlargest(3, 'population', keep='last')\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NjE0OQ=="}, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjcwNzUzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/pandas_doctests_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzowMjo1N1rOHBFXyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1ODo1NVrOHDQ2RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5ODYzMw==", "bodyText": "'first' here too?", "url": "https://github.com/apache/beam/pull/12516#discussion_r470898633", "createdAt": "2020-08-14T23:02:57Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/pandas_doctests_test.py", "diffHunk": "@@ -121,6 +130,12 @@ def test_series_tests(self):\n             'pandas.core.series.Series.cumsum': ['*'],\n             'pandas.core.series.Series.cumprod': ['*'],\n             'pandas.core.series.Series.diff': ['*'],\n+            'pandas.core.series.Series.nlargest': [\n+                \"s.nlargest(3, keep='last')\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4MzgxMg==", "bodyText": "Same.", "url": "https://github.com/apache/beam/pull/12516#discussion_r473183812", "createdAt": "2020-08-19T16:58:55Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/pandas_doctests_test.py", "diffHunk": "@@ -121,6 +130,12 @@ def test_series_tests(self):\n             'pandas.core.series.Series.cumsum': ['*'],\n             'pandas.core.series.Series.cumprod': ['*'],\n             'pandas.core.series.Series.diff': ['*'],\n+            'pandas.core.series.Series.nlargest': [\n+                \"s.nlargest(3, keep='last')\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5ODYzMw=="}, "originalCommit": {"oid": "5c9288bcab2cf4e9ba557ec29e880f7fbb00ce21"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 619, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}