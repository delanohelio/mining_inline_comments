{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODU4MzEz", "number": 13077, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo0Njo1N1rOEyClCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNzozM1rOEyDd9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTA2NTA3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/doctests.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo0Njo1N1rOHodqog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoyOTozMVrOHpK-EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTEzOA==", "bodyText": "This regex lacks a whitespace after the colon. Not sure if it matters.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512191138", "createdAt": "2020-10-26T18:46:57Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -502,31 +512,33 @@ def is_example_line(line):\n   IMPORT_PANDAS = 'import pandas as pd'\n \n   example_srcs = []\n-  lines = iter(\n-      [line.rstrip()\n-       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+  lines = iter([(lineno, line.rstrip()) for lineno,\n+                line in enumerate(rst.split('\\n')) if is_example_line(line)] +\n+               [(None, 'END')])\n \n   # https://ipython.readthedocs.io/en/stable/sphinxext.html\n-  line = next(lines)\n+  lineno, line = next(lines)\n   while True:\n     if line == 'END':\n       break\n     if line.startswith('.. ipython::'):\n-      line = next(lines)\n+      lineno, line = next(lines)\n       indent = get_indent(line)\n       example = []\n-      example_srcs.append(example)\n+      example_srcs.append((lineno, example))\n       while get_indent(line) >= indent:\n         if '@verbatim' in line or ':verbatim:' in line or '@savefig' in line:\n           example_srcs.pop()\n           break\n+        line = re.sub(r'In \\[\\d+\\]: ', '', line)\n+        line = re.sub(r'\\.\\.\\.+:', '', line)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyNzk0Mg==", "bodyText": "This is correct, there may not be whitespace following this colon in all cases (but if there is, it's fine to include it as part of the indentation). This is different than the initial prompt.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512927942", "createdAt": "2020-10-27T18:20:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -502,31 +512,33 @@ def is_example_line(line):\n   IMPORT_PANDAS = 'import pandas as pd'\n \n   example_srcs = []\n-  lines = iter(\n-      [line.rstrip()\n-       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+  lines = iter([(lineno, line.rstrip()) for lineno,\n+                line in enumerate(rst.split('\\n')) if is_example_line(line)] +\n+               [(None, 'END')])\n \n   # https://ipython.readthedocs.io/en/stable/sphinxext.html\n-  line = next(lines)\n+  lineno, line = next(lines)\n   while True:\n     if line == 'END':\n       break\n     if line.startswith('.. ipython::'):\n-      line = next(lines)\n+      lineno, line = next(lines)\n       indent = get_indent(line)\n       example = []\n-      example_srcs.append(example)\n+      example_srcs.append((lineno, example))\n       while get_indent(line) >= indent:\n         if '@verbatim' in line or ':verbatim:' in line or '@savefig' in line:\n           example_srcs.pop()\n           break\n+        line = re.sub(r'In \\[\\d+\\]: ', '', line)\n+        line = re.sub(r'\\.\\.\\.+:', '', line)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTEzOA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMzM5Mg==", "bodyText": "Ack.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512933392", "createdAt": "2020-10-27T18:29:31Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -502,31 +512,33 @@ def is_example_line(line):\n   IMPORT_PANDAS = 'import pandas as pd'\n \n   example_srcs = []\n-  lines = iter(\n-      [line.rstrip()\n-       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+  lines = iter([(lineno, line.rstrip()) for lineno,\n+                line in enumerate(rst.split('\\n')) if is_example_line(line)] +\n+               [(None, 'END')])\n \n   # https://ipython.readthedocs.io/en/stable/sphinxext.html\n-  line = next(lines)\n+  lineno, line = next(lines)\n   while True:\n     if line == 'END':\n       break\n     if line.startswith('.. ipython::'):\n-      line = next(lines)\n+      lineno, line = next(lines)\n       indent = get_indent(line)\n       example = []\n-      example_srcs.append(example)\n+      example_srcs.append((lineno, example))\n       while get_indent(line) >= indent:\n         if '@verbatim' in line or ':verbatim:' in line or '@savefig' in line:\n           example_srcs.pop()\n           break\n+        line = re.sub(r'In \\[\\d+\\]: ', '', line)\n+        line = re.sub(r'\\.\\.\\.+:', '', line)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTEzOA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTIxMDc5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNzozM1rOHofEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozMDowMVrOHpK_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDEyNA==", "bodyText": "Why did this change? There still seem to be only 5 ipython statements in the RST_IPYTHON rst.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512214124", "createdAt": "2020-10-26T19:27:33Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "diffHunk": "@@ -212,13 +228,21 @@ def test_not_implemented_followed_by_name_error(self):\n     self.assertEqual(result.attempted, 6)\n     self.assertEqual(result.failed, 1)  # Only the very last one.\n \n+  def test_failed_assignment(self):\n+    result = doctests.teststring(\n+        FAILED_ASSIGNMENT,\n+        optionflags=doctest.ELLIPSIS,\n+        not_implemented_ok=True)\n+    self.assertNotEqual(result.attempted, 0)\n+    self.assertEqual(result.failed, 0)\n+\n   def test_rst_ipython(self):\n     try:\n       import IPython\n     except ImportError:\n       raise unittest.SkipTest('IPython not available')\n     result = doctests.test_rst_ipython(RST_IPYTHON, 'test_rst_ipython')\n-    self.assertEqual(result.attempted, 5)\n+    self.assertEqual(result.attempted, 8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyOTI0Mw==", "bodyText": "I added\nfoo(\n    4\n)\n\nplus the re-definition of foo and another invocation foo(5).", "url": "https://github.com/apache/beam/pull/13077#discussion_r512929243", "createdAt": "2020-10-27T18:22:57Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "diffHunk": "@@ -212,13 +228,21 @@ def test_not_implemented_followed_by_name_error(self):\n     self.assertEqual(result.attempted, 6)\n     self.assertEqual(result.failed, 1)  # Only the very last one.\n \n+  def test_failed_assignment(self):\n+    result = doctests.teststring(\n+        FAILED_ASSIGNMENT,\n+        optionflags=doctest.ELLIPSIS,\n+        not_implemented_ok=True)\n+    self.assertNotEqual(result.attempted, 0)\n+    self.assertEqual(result.failed, 0)\n+\n   def test_rst_ipython(self):\n     try:\n       import IPython\n     except ImportError:\n       raise unittest.SkipTest('IPython not available')\n     result = doctests.test_rst_ipython(RST_IPYTHON, 'test_rst_ipython')\n-    self.assertEqual(result.attempted, 5)\n+    self.assertEqual(result.attempted, 8)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDEyNA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMzc1MQ==", "bodyText": "OK, thanks. I misunderstood how counting worked here.", "url": "https://github.com/apache/beam/pull/13077#discussion_r512933751", "createdAt": "2020-10-27T18:30:01Z", "author": {"login": "tysonjh"}, "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "diffHunk": "@@ -212,13 +228,21 @@ def test_not_implemented_followed_by_name_error(self):\n     self.assertEqual(result.attempted, 6)\n     self.assertEqual(result.failed, 1)  # Only the very last one.\n \n+  def test_failed_assignment(self):\n+    result = doctests.teststring(\n+        FAILED_ASSIGNMENT,\n+        optionflags=doctest.ELLIPSIS,\n+        not_implemented_ok=True)\n+    self.assertNotEqual(result.attempted, 0)\n+    self.assertEqual(result.failed, 0)\n+\n   def test_rst_ipython(self):\n     try:\n       import IPython\n     except ImportError:\n       raise unittest.SkipTest('IPython not available')\n     result = doctests.test_rst_ipython(RST_IPYTHON, 'test_rst_ipython')\n-    self.assertEqual(result.attempted, 5)\n+    self.assertEqual(result.attempted, 8)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDEyNA=="}, "originalCommit": {"oid": "bd1a2a949d1e38a2d32de7216e8a45e2376c5252"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2943, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}