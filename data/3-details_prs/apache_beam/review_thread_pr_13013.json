{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MTA4NDU3", "number": 13013, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNDo1NlrOEqhgGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoyODoxOFrOEqhpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDI0NTM4OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/pardo.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNDo1NlrOHcx2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozNzoxMlrOHdel9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzOTAxMg==", "bodyText": "Consider amending the comment here making the optimization explicit.\n...doesn't observe windows meaning they can be computed simultaneously as a single window.\nMostly because processSingleWindow is very explicit at saying it's for 1 window only, which could cause this to read as a bug otherwise.", "url": "https://github.com/apache/beam/pull/13013#discussion_r499939012", "createdAt": "2020-10-06T00:14:56Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/pardo.go", "diffHunk": "@@ -134,40 +134,40 @@ func (n *ParDo) processMainInput(mainIn *MainInput) error {\n \t// If the function observes windows, we must invoke it for each window. The expected fast path\n \t// is that either there is a single window or the function doesn't observes windows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e95d3c4bbbca12aed318d424d981779f2b6626"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MTk4OQ==", "bodyText": "Done, added some comments making this optimization more explicit.", "url": "https://github.com/apache/beam/pull/13013#discussion_r500671989", "createdAt": "2020-10-07T00:37:12Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/pardo.go", "diffHunk": "@@ -134,40 +134,40 @@ func (n *ParDo) processMainInput(mainIn *MainInput) error {\n \t// If the function observes windows, we must invoke it for each window. The expected fast path\n \t// is that either there is a single window or the function doesn't observes windows.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzOTAxMg=="}, "originalCommit": {"oid": "c5e95d3c4bbbca12aed318d424d981779f2b6626"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDI2NDA2OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/sdf_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoyNTowNlrOHcyBLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozNzoxOFrOHdemBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MTY3OA==", "bodyText": "rm commented out code.", "url": "https://github.com/apache/beam/pull/13013#discussion_r499941678", "createdAt": "2020-10-06T00:25:06Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf_test.go", "diffHunk": "@@ -400,6 +400,90 @@ func TestAsSplittableUnit(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatalf(\"invalid function: %v\", err)\n \t}\n+\t//wdfn, err := graph.NewDoFn(&VetWindowSdf{}, graph.NumMainInputs(graph.MainSingle))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e95d3c4bbbca12aed318d424d981779f2b6626"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MjAwNQ==", "bodyText": "Done.", "url": "https://github.com/apache/beam/pull/13013#discussion_r500672005", "createdAt": "2020-10-07T00:37:18Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf_test.go", "diffHunk": "@@ -400,6 +400,90 @@ func TestAsSplittableUnit(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatalf(\"invalid function: %v\", err)\n \t}\n+\t//wdfn, err := graph.NewDoFn(&VetWindowSdf{}, graph.NumMainInputs(graph.MainSingle))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MTY3OA=="}, "originalCommit": {"oid": "c5e95d3c4bbbca12aed318d424d981779f2b6626"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDI2ODc5OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/sdf_test.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoyODoxOFrOHcyEDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0NToxOFrOHdeuFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MjQxNQ==", "bodyText": "VetSdf doesn't observe windows (either explicitly or implicitly via side input), so I'm not sure it checks the code?", "url": "https://github.com/apache/beam/pull/13013#discussion_r499942415", "createdAt": "2020-10-06T00:28:18Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf_test.go", "diffHunk": "@@ -400,6 +400,90 @@ func TestAsSplittableUnit(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatalf(\"invalid function: %v\", err)\n \t}\n+\t//wdfn, err := graph.NewDoFn(&VetWindowSdf{}, graph.NumMainInputs(graph.MainSingle))\n+\t//if err != nil {\n+\t//\tt.Fatalf(\"invalid function: %v\", err)\n+\t//}\n+\tmultiWindows := []typex.Window{\n+\t\twindow.IntervalWindow{Start: 10, End: 20},\n+\t\twindow.IntervalWindow{Start: 11, End: 21},\n+\t\twindow.IntervalWindow{Start: 12, End: 22},\n+\t\twindow.IntervalWindow{Start: 13, End: 23},\n+\t}\n+\n+\t// Test that progress returns expected results and respects windows.\n+\tt.Run(\"Progress\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\tname          string\n+\t\t\tfn            *graph.DoFn\n+\t\t\tin            FullValue\n+\t\t\tdoneWork      float64 // Will be output by RTracker's GetProgress.\n+\t\t\tremainingWork float64 // Will be output by RTracker's GetProgress.\n+\t\t\tcurrWindow    int\n+\t\t\twantProgress  float64\n+\t\t}{\n+\t\t\t{\n+\t\t\t\tname: \"SingleWindow\",\n+\t\t\t\tfn:   dfn,\n+\t\t\t\tin: FullValue{\n+\t\t\t\t\tElm: &FullValue{\n+\t\t\t\t\t\tElm:  1,\n+\t\t\t\t\t\tElm2: &VetRestriction{ID: \"Sdf\"},\n+\t\t\t\t\t},\n+\t\t\t\t\tElm2:      1.0,\n+\t\t\t\t\tTimestamp: testTimestamp,\n+\t\t\t\t\tWindows:   testWindows,\n+\t\t\t\t},\n+\t\t\t\tdoneWork:      1.0,\n+\t\t\t\tremainingWork: 1.0,\n+\t\t\t\tcurrWindow:    0,\n+\t\t\t\twantProgress:  0.5,\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tname: \"MultipleWindows\",\n+\t\t\t\tfn:   dfn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e95d3c4bbbca12aed318d424d981779f2b6626"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDA3MA==", "bodyText": "This test doesn't actually check the code in ProcessElement because it never actually calls ProcessElement, so it doesn't actually matter what the DoFn being used is (in fact, I can probably erase that field from the tests). It's unit testing the SplittableUnit behavior specifically.\nI think I can add a unit test to make sure ProcessElement handles windows correctly (or a component test technically, since it's testing multiple methods), but it's a little more involved since I need to figure out how to block processing to check progress and perform splits. I'll add it in the upcoming PR enabling multi-window splitting.", "url": "https://github.com/apache/beam/pull/13013#discussion_r500674070", "createdAt": "2020-10-07T00:45:18Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/sdf_test.go", "diffHunk": "@@ -400,6 +400,90 @@ func TestAsSplittableUnit(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatalf(\"invalid function: %v\", err)\n \t}\n+\t//wdfn, err := graph.NewDoFn(&VetWindowSdf{}, graph.NumMainInputs(graph.MainSingle))\n+\t//if err != nil {\n+\t//\tt.Fatalf(\"invalid function: %v\", err)\n+\t//}\n+\tmultiWindows := []typex.Window{\n+\t\twindow.IntervalWindow{Start: 10, End: 20},\n+\t\twindow.IntervalWindow{Start: 11, End: 21},\n+\t\twindow.IntervalWindow{Start: 12, End: 22},\n+\t\twindow.IntervalWindow{Start: 13, End: 23},\n+\t}\n+\n+\t// Test that progress returns expected results and respects windows.\n+\tt.Run(\"Progress\", func(t *testing.T) {\n+\t\ttests := []struct {\n+\t\t\tname          string\n+\t\t\tfn            *graph.DoFn\n+\t\t\tin            FullValue\n+\t\t\tdoneWork      float64 // Will be output by RTracker's GetProgress.\n+\t\t\tremainingWork float64 // Will be output by RTracker's GetProgress.\n+\t\t\tcurrWindow    int\n+\t\t\twantProgress  float64\n+\t\t}{\n+\t\t\t{\n+\t\t\t\tname: \"SingleWindow\",\n+\t\t\t\tfn:   dfn,\n+\t\t\t\tin: FullValue{\n+\t\t\t\t\tElm: &FullValue{\n+\t\t\t\t\t\tElm:  1,\n+\t\t\t\t\t\tElm2: &VetRestriction{ID: \"Sdf\"},\n+\t\t\t\t\t},\n+\t\t\t\t\tElm2:      1.0,\n+\t\t\t\t\tTimestamp: testTimestamp,\n+\t\t\t\t\tWindows:   testWindows,\n+\t\t\t\t},\n+\t\t\t\tdoneWork:      1.0,\n+\t\t\t\tremainingWork: 1.0,\n+\t\t\t\tcurrWindow:    0,\n+\t\t\t\twantProgress:  0.5,\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tname: \"MultipleWindows\",\n+\t\t\t\tfn:   dfn,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MjQxNQ=="}, "originalCommit": {"oid": "c5e95d3c4bbbca12aed318d424d981779f2b6626"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3114, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}