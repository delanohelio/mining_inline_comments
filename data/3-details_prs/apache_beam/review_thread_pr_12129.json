{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzUyNDUx", "number": 12129, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxNzo1MFrOEKLHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxNzo1MFrOEKLHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTAzMzg2OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/snippets/transforms/aggregation/groupintobatches_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxNzo1MFrOGrEIuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzozMjoyM1rOGrHQDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwOTcyMw==", "bodyText": "This might need to be updated. The third argument to assert_matches_stdout expects a function to \"normalize\" the elements before comparing (after parsing the string into a Python value). This is important for transforms where order is not guaranteed.\nIn this case we're only using the batch length instead of the actual elements since those can be in any order or mixed in between different batches, but the batch keys with their respective sizes should be constant.\nWe might need to do something like:\nlambda batch: (batch[0], len(batch[1]))", "url": "https://github.com/apache/beam/pull/12129#discussion_r447809723", "createdAt": "2020-06-30T16:17:50Z", "author": {"login": "davidcavazos"}, "path": "sdks/python/apache_beam/examples/snippets/transforms/aggregation/groupintobatches_test.py", "diffHunk": "@@ -31,11 +31,11 @@\n \n def check_batches_with_keys(actual):\n   expected = '''[START batches_with_keys]\n-[('spring', '\ud83c\udf53'), ('spring', '\ud83e\udd55'), ('spring', '\ud83c\udf46')]\n-[('summer', '\ud83e\udd55'), ('summer', '\ud83c\udf45'), ('summer', '\ud83c\udf3d')]\n-[('spring', '\ud83c\udf45')]\n-[('fall', '\ud83e\udd55'), ('fall', '\ud83c\udf45')]\n-[('winter', '\ud83c\udf46')]\n+('spring', ['\ud83c\udf53', '\ud83e\udd55', '\ud83c\udf46'])\n+('summer', ['\ud83e\udd55', '\ud83c\udf45', '\ud83c\udf3d'])\n+('spring', ['\ud83c\udf45'])\n+('fall', ['\ud83e\udd55', '\ud83c\udf45'])\n+('winter', ['\ud83c\udf46'])\n [END batches_with_keys]'''.splitlines()[1:-1]\n   assert_matches_stdout(\n       actual, expected, lambda batch: (batch[0][0], len(batch)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21723541e3e248ec4dcd7d8df0cee95f667a427a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2MDc0OA==", "bodyText": "Thank you, fixed it.", "url": "https://github.com/apache/beam/pull/12129#discussion_r447860748", "createdAt": "2020-06-30T17:32:23Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/examples/snippets/transforms/aggregation/groupintobatches_test.py", "diffHunk": "@@ -31,11 +31,11 @@\n \n def check_batches_with_keys(actual):\n   expected = '''[START batches_with_keys]\n-[('spring', '\ud83c\udf53'), ('spring', '\ud83e\udd55'), ('spring', '\ud83c\udf46')]\n-[('summer', '\ud83e\udd55'), ('summer', '\ud83c\udf45'), ('summer', '\ud83c\udf3d')]\n-[('spring', '\ud83c\udf45')]\n-[('fall', '\ud83e\udd55'), ('fall', '\ud83c\udf45')]\n-[('winter', '\ud83c\udf46')]\n+('spring', ['\ud83c\udf53', '\ud83e\udd55', '\ud83c\udf46'])\n+('summer', ['\ud83e\udd55', '\ud83c\udf45', '\ud83c\udf3d'])\n+('spring', ['\ud83c\udf45'])\n+('fall', ['\ud83e\udd55', '\ud83c\udf45'])\n+('winter', ['\ud83c\udf46'])\n [END batches_with_keys]'''.splitlines()[1:-1]\n   assert_matches_stdout(\n       actual, expected, lambda batch: (batch[0][0], len(batch)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwOTcyMw=="}, "originalCommit": {"oid": "21723541e3e248ec4dcd7d8df0cee95f667a427a"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3389, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}