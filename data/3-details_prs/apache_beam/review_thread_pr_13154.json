{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDk2NDc2", "number": 13154, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDozNjo1MVrOEymuXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1NjoxMFrOEzaqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDk4NzE3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/iobase.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMDozNjo1MVrOHpV4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxNTowNFrOHp9vfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExMjA3Ng==", "bodyText": "It seems like the major difference between SDFBoundedSourceWrapper  and SDFBoundedSourceReader  is that SDFBoundedSourceWrapper takes the source as construction param where SDFBoundedSourceReader takes the source as input element. We could change the implementation of SDFBoundedSourceWrapper as well.", "url": "https://github.com/apache/beam/pull/13154#discussion_r513112076", "createdAt": "2020-10-28T00:36:51Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1618,3 +1628,48 @@ def display_data(self):\n         'source': DisplayDataItem(self.source.__class__, label='Read Source'),\n         'source_dd': self.source\n     }\n+\n+\n+class SDFBoundedSourceReader(PTransform):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f2d14dab6b28a00d60a00fe59d102b45b7dc4"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3MDk3Ng==", "bodyText": "I've done this - but I've still allowed the source to come in via the constructor as well as as an input. The intention of doing this is to keep the display data for simple Read transforms where the source is known at construction time.", "url": "https://github.com/apache/beam/pull/13154#discussion_r513670976", "createdAt": "2020-10-28T18:27:27Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1618,3 +1628,48 @@ def display_data(self):\n         'source': DisplayDataItem(self.source.__class__, label='Read Source'),\n         'source_dd': self.source\n     }\n+\n+\n+class SDFBoundedSourceReader(PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExMjA3Ng=="}, "originalCommit": {"oid": "c82f2d14dab6b28a00d60a00fe59d102b45b7dc4"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1ODgwNg==", "bodyText": "I see. I thought we still keep _SDFBoundedSourceWrapper . Thanks for the clarification!", "url": "https://github.com/apache/beam/pull/13154#discussion_r513758806", "createdAt": "2020-10-28T21:03:48Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1618,3 +1628,48 @@ def display_data(self):\n         'source': DisplayDataItem(self.source.__class__, label='Read Source'),\n         'source_dd': self.source\n     }\n+\n+\n+class SDFBoundedSourceReader(PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExMjA3Ng=="}, "originalCommit": {"oid": "c82f2d14dab6b28a00d60a00fe59d102b45b7dc4"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NTI0Nw==", "bodyText": "I'm thinking whether it would be better for SDFBoundedSourceReader  to take data_to_display as constructor instead of source directly if any. What do you think?", "url": "https://github.com/apache/beam/pull/13154#discussion_r513765247", "createdAt": "2020-10-28T21:15:04Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1618,3 +1628,48 @@ def display_data(self):\n         'source': DisplayDataItem(self.source.__class__, label='Read Source'),\n         'source_dd': self.source\n     }\n+\n+\n+class SDFBoundedSourceReader(PTransform):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExMjA3Ng=="}, "originalCommit": {"oid": "c82f2d14dab6b28a00d60a00fe59d102b45b7dc4"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTEzMDU0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/iobase.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTowNDoyM1rOHp9X2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTowNDoyM1rOHp9X2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1OTE5NQ==", "bodyText": "We should be able to remote source here?", "url": "https://github.com/apache/beam/pull/13154#discussion_r513759195", "createdAt": "2020-10-28T21:04:23Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1427,185 +1429,189 @@ def with_completed(self, completed):\n         fraction=self._fraction, remaining=self._remaining, completed=completed)\n \n \n-class _SDFBoundedSourceWrapper(ptransform.PTransform):\n-  \"\"\"A ``PTransform`` that uses SDF to read from a ``BoundedSource``.\n+class _SDFBoundedSourceRestriction(object):\n+  \"\"\" A restriction wraps SourceBundle and RangeTracker. \"\"\"\n+  def __init__(self, source_bundle, range_tracker=None):\n+    self._source_bundle = source_bundle\n+    self._range_tracker = range_tracker\n \n-  NOTE: This transform can only be used with beam_fn_api enabled.\n+  def __reduce__(self):\n+    # The instance of RangeTracker shouldn't be serialized.\n+    return (self.__class__, (self._source_bundle, ))\n+\n+  def range_tracker(self):\n+    if not self._range_tracker:\n+      self._range_tracker = self._source_bundle.source.get_range_tracker(\n+          self._source_bundle.start_position, self._source_bundle.stop_position)\n+    return self._range_tracker\n+\n+  def weight(self):\n+    return self._source_bundle.weight\n+\n+  def source(self):\n+    return self._source_bundle.source\n+\n+  def try_split(self, fraction_of_remainder):\n+    consumed_fraction = self.range_tracker().fraction_consumed()\n+    fraction = (\n+        consumed_fraction + (1 - consumed_fraction) * fraction_of_remainder)\n+    position = self.range_tracker().position_at_fraction(fraction)\n+    # Need to stash current stop_pos before splitting since\n+    # range_tracker.split will update its stop_pos if splits\n+    # successfully.\n+    stop_pos = self._source_bundle.stop_position\n+    split_result = self.range_tracker().try_split(position)\n+    if split_result:\n+      split_pos, split_fraction = split_result\n+      primary_weight = self._source_bundle.weight * split_fraction\n+      residual_weight = self._source_bundle.weight - primary_weight\n+      # Update self to primary weight and end position.\n+      self._source_bundle = SourceBundle(\n+          primary_weight,\n+          self._source_bundle.source,\n+          self._source_bundle.start_position,\n+          split_pos)\n+      return (\n+          self,\n+          _SDFBoundedSourceRestriction(\n+              SourceBundle(\n+                  residual_weight,\n+                  self._source_bundle.source,\n+                  split_pos,\n+                  stop_pos)))\n+\n+\n+class _SDFBoundedSourceRestrictionTracker(RestrictionTracker):\n+  \"\"\"An `iobase.RestrictionTracker` implementations for wrapping BoundedSource\n+  with SDF. The tracked restriction is a _SDFBoundedSourceRestriction, which\n+  wraps SourceBundle and RangeTracker.\n+\n+  Delegated RangeTracker guarantees synchronization safety.\n   \"\"\"\n-  class _SDFBoundedSourceRestriction(object):\n-    \"\"\" A restriction wraps SourceBundle and RangeTracker. \"\"\"\n-    def __init__(self, source_bundle, range_tracker=None):\n-      self._source_bundle = source_bundle\n-      self._range_tracker = range_tracker\n-\n-    def __reduce__(self):\n-      # The instance of RangeTracker shouldn't be serialized.\n-      return (self.__class__, (self._source_bundle, ))\n-\n-    def range_tracker(self):\n-      if not self._range_tracker:\n-        self._range_tracker = self._source_bundle.source.get_range_tracker(\n-            self._source_bundle.start_position,\n-            self._source_bundle.stop_position)\n-      return self._range_tracker\n-\n-    def weight(self):\n-      return self._source_bundle.weight\n-\n-    def source(self):\n-      return self._source_bundle.source\n-\n-    def try_split(self, fraction_of_remainder):\n-      consumed_fraction = self.range_tracker().fraction_consumed()\n-      fraction = (\n-          consumed_fraction + (1 - consumed_fraction) * fraction_of_remainder)\n-      position = self.range_tracker().position_at_fraction(fraction)\n-      # Need to stash current stop_pos before splitting since\n-      # range_tracker.split will update its stop_pos if splits\n-      # successfully.\n-      stop_pos = self._source_bundle.stop_position\n-      split_result = self.range_tracker().try_split(position)\n-      if split_result:\n-        split_pos, split_fraction = split_result\n-        primary_weight = self._source_bundle.weight * split_fraction\n-        residual_weight = self._source_bundle.weight - primary_weight\n-        # Update self to primary weight and end position.\n-        self._source_bundle = SourceBundle(\n-            primary_weight,\n-            self._source_bundle.source,\n-            self._source_bundle.start_position,\n-            split_pos)\n-        return (\n-            self,\n-            _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-                SourceBundle(\n-                    residual_weight,\n-                    self._source_bundle.source,\n-                    split_pos,\n-                    stop_pos)))\n-\n-  class _SDFBoundedSourceRestrictionTracker(RestrictionTracker):\n-    \"\"\"An `iobase.RestrictionTracker` implementations for wrapping BoundedSource\n-    with SDF. The tracked restriction is a _SDFBoundedSourceRestriction, which\n-    wraps SourceBundle and RangeTracker.\n-\n-    Delegated RangeTracker guarantees synchronization safety.\n-    \"\"\"\n-    def __init__(self, restriction):\n-      if not isinstance(restriction,\n-                        _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction):\n-        raise ValueError(\n-            'Initializing SDFBoundedSourceRestrictionTracker'\n-            ' requires a _SDFBoundedSourceRestriction')\n-      self.restriction = restriction\n-\n-    def current_progress(self):\n-      # type: () -> RestrictionProgress\n-      return RestrictionProgress(\n-          fraction=self.restriction.range_tracker().fraction_consumed())\n-\n-    def current_restriction(self):\n-      self.restriction.range_tracker()\n-      return self.restriction\n-\n-    def start_pos(self):\n-      return self.restriction.range_tracker().start_position()\n-\n-    def stop_pos(self):\n-      return self.restriction.range_tracker().stop_position()\n-\n-    def try_claim(self, position):\n-      return self.restriction.range_tracker().try_claim(position)\n-\n-    def try_split(self, fraction_of_remainder):\n-      return self.restriction.try_split(fraction_of_remainder)\n-\n-    def check_done(self):\n-      return self.restriction.range_tracker().fraction_consumed() >= 1.0\n-\n-    def is_bounded(self):\n-      return True\n-\n-  class _SDFBoundedSourceRestrictionProvider(core.RestrictionProvider):\n-    \"\"\"A `RestrictionProvider` that is used by SDF for `BoundedSource`.\"\"\"\n-    def __init__(self, source, desired_chunk_size=None):\n-      self._source = source\n-      self._desired_chunk_size = desired_chunk_size\n-\n-    def initial_restriction(self, element):\n-      # Get initial range_tracker from source\n-      range_tracker = self._source.get_range_tracker(None, None)\n-      return _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-          SourceBundle(\n-              None,\n-              self._source,\n-              range_tracker.start_position(),\n-              range_tracker.stop_position()))\n-\n-    def create_tracker(self, restriction):\n-      return _SDFBoundedSourceWrapper._SDFBoundedSourceRestrictionTracker(\n-          restriction)\n-\n-    def split(self, element, restriction):\n-      if self._desired_chunk_size is None:\n-        try:\n-          estimated_size = self._source.estimate_size()\n-        except NotImplementedError:\n-          estimated_size = None\n-        self._desired_chunk_size = Read.get_desired_chunk_size(estimated_size)\n-\n-      # Invoke source.split to get initial splitting results.\n-      source_bundles = self._source.split(self._desired_chunk_size)\n-      for source_bundle in source_bundles:\n-        yield _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-            source_bundle)\n-\n-    def restriction_size(self, element, restriction):\n-      return restriction.weight()\n-\n-    def restriction_coder(self):\n-      return coders.DillCoder()\n+  def __init__(self, restriction):\n+    if not isinstance(restriction, _SDFBoundedSourceRestriction):\n+      raise ValueError(\n+          'Initializing SDFBoundedSourceRestrictionTracker'\n+          ' requires a _SDFBoundedSourceRestriction')\n+    self.restriction = restriction\n \n-  def __init__(self, source):\n-    if not isinstance(source, BoundedSource):\n-      raise RuntimeError('SDFBoundedSourceWrapper can only wrap BoundedSource')\n-    super(_SDFBoundedSourceWrapper, self).__init__()\n+  def current_progress(self):\n+    # type: () -> RestrictionProgress\n+    return RestrictionProgress(\n+        fraction=self.restriction.range_tracker().fraction_consumed())\n+\n+  def current_restriction(self):\n+    self.restriction.range_tracker()\n+    return self.restriction\n+\n+  def start_pos(self):\n+    return self.restriction.range_tracker().start_position()\n+\n+  def stop_pos(self):\n+    return self.restriction.range_tracker().stop_position()\n+\n+  def try_claim(self, position):\n+    return self.restriction.range_tracker().try_claim(position)\n+\n+  def try_split(self, fraction_of_remainder):\n+    return self.restriction.try_split(fraction_of_remainder)\n+\n+  def check_done(self):\n+    return self.restriction.range_tracker().fraction_consumed() >= 1.0\n+\n+  def is_bounded(self):\n+    return True\n+\n+\n+class _SDFBoundedSourceRestrictionProvider(core.RestrictionProvider):\n+  \"\"\"\n+  A `RestrictionProvider` that is used by SDF for `BoundedSource`.\n+\n+  If source is provided, uses it for initializing restriction. Otherwise\n+  initializes restriction based on input element that is expected to be of\n+  BoundedSource type.\n+  \"\"\"\n+  def __init__(self, source: BoundedSource = None, desired_chunk_size=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297e0a8e0e3f873afe490f83ec0e0eb3aba3ddf"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQyNjgzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/iobase.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozOToyOFrOHqnUQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozOToyOFrOHqnUQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NjQwMA==", "bodyText": "It seems like we also need to update pydoc here as well.", "url": "https://github.com/apache/beam/pull/13154#discussion_r514446400", "createdAt": "2020-10-29T17:39:28Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1427,194 +1432,184 @@ def with_completed(self, completed):\n         fraction=self._fraction, remaining=self._remaining, completed=completed)\n \n \n-class _SDFBoundedSourceWrapper(ptransform.PTransform):\n-  \"\"\"A ``PTransform`` that uses SDF to read from a ``BoundedSource``.\n+class _SDFBoundedSourceRestriction(object):\n+  \"\"\" A restriction wraps SourceBundle and RangeTracker. \"\"\"\n+  def __init__(self, source_bundle, range_tracker=None):\n+    self._source_bundle = source_bundle\n+    self._range_tracker = range_tracker\n \n-  NOTE: This transform can only be used with beam_fn_api enabled.\n+  def __reduce__(self):\n+    # The instance of RangeTracker shouldn't be serialized.\n+    return (self.__class__, (self._source_bundle, ))\n+\n+  def range_tracker(self):\n+    if not self._range_tracker:\n+      self._range_tracker = self._source_bundle.source.get_range_tracker(\n+          self._source_bundle.start_position, self._source_bundle.stop_position)\n+    return self._range_tracker\n+\n+  def weight(self):\n+    return self._source_bundle.weight\n+\n+  def source(self):\n+    return self._source_bundle.source\n+\n+  def try_split(self, fraction_of_remainder):\n+    consumed_fraction = self.range_tracker().fraction_consumed()\n+    fraction = (\n+        consumed_fraction + (1 - consumed_fraction) * fraction_of_remainder)\n+    position = self.range_tracker().position_at_fraction(fraction)\n+    # Need to stash current stop_pos before splitting since\n+    # range_tracker.split will update its stop_pos if splits\n+    # successfully.\n+    stop_pos = self._source_bundle.stop_position\n+    split_result = self.range_tracker().try_split(position)\n+    if split_result:\n+      split_pos, split_fraction = split_result\n+      primary_weight = self._source_bundle.weight * split_fraction\n+      residual_weight = self._source_bundle.weight - primary_weight\n+      # Update self to primary weight and end position.\n+      self._source_bundle = SourceBundle(\n+          primary_weight,\n+          self._source_bundle.source,\n+          self._source_bundle.start_position,\n+          split_pos)\n+      return (\n+          self,\n+          _SDFBoundedSourceRestriction(\n+              SourceBundle(\n+                  residual_weight,\n+                  self._source_bundle.source,\n+                  split_pos,\n+                  stop_pos)))\n+\n+\n+class _SDFBoundedSourceRestrictionTracker(RestrictionTracker):\n+  \"\"\"An `iobase.RestrictionTracker` implementations for wrapping BoundedSource\n+  with SDF. The tracked restriction is a _SDFBoundedSourceRestriction, which\n+  wraps SourceBundle and RangeTracker.\n+\n+  Delegated RangeTracker guarantees synchronization safety.\n   \"\"\"\n-  class _SDFBoundedSourceRestriction(object):\n-    \"\"\" A restriction wraps SourceBundle and RangeTracker. \"\"\"\n-    def __init__(self, source_bundle, range_tracker=None):\n-      self._source_bundle = source_bundle\n-      self._range_tracker = range_tracker\n-\n-    def __reduce__(self):\n-      # The instance of RangeTracker shouldn't be serialized.\n-      return (self.__class__, (self._source_bundle, ))\n-\n-    def range_tracker(self):\n-      if not self._range_tracker:\n-        self._range_tracker = self._source_bundle.source.get_range_tracker(\n-            self._source_bundle.start_position,\n-            self._source_bundle.stop_position)\n-      return self._range_tracker\n-\n-    def weight(self):\n-      return self._source_bundle.weight\n-\n-    def source(self):\n-      return self._source_bundle.source\n-\n-    def try_split(self, fraction_of_remainder):\n-      consumed_fraction = self.range_tracker().fraction_consumed()\n-      fraction = (\n-          consumed_fraction + (1 - consumed_fraction) * fraction_of_remainder)\n-      position = self.range_tracker().position_at_fraction(fraction)\n-      # Need to stash current stop_pos before splitting since\n-      # range_tracker.split will update its stop_pos if splits\n-      # successfully.\n-      stop_pos = self._source_bundle.stop_position\n-      split_result = self.range_tracker().try_split(position)\n-      if split_result:\n-        split_pos, split_fraction = split_result\n-        primary_weight = self._source_bundle.weight * split_fraction\n-        residual_weight = self._source_bundle.weight - primary_weight\n-        # Update self to primary weight and end position.\n-        self._source_bundle = SourceBundle(\n-            primary_weight,\n-            self._source_bundle.source,\n-            self._source_bundle.start_position,\n-            split_pos)\n-        return (\n-            self,\n-            _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-                SourceBundle(\n-                    residual_weight,\n-                    self._source_bundle.source,\n-                    split_pos,\n-                    stop_pos)))\n-\n-  class _SDFBoundedSourceRestrictionTracker(RestrictionTracker):\n-    \"\"\"An `iobase.RestrictionTracker` implementations for wrapping BoundedSource\n-    with SDF. The tracked restriction is a _SDFBoundedSourceRestriction, which\n-    wraps SourceBundle and RangeTracker.\n-\n-    Delegated RangeTracker guarantees synchronization safety.\n-    \"\"\"\n-    def __init__(self, restriction):\n-      if not isinstance(restriction,\n-                        _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction):\n-        raise ValueError(\n-            'Initializing SDFBoundedSourceRestrictionTracker'\n-            ' requires a _SDFBoundedSourceRestriction')\n-      self.restriction = restriction\n-\n-    def current_progress(self):\n-      # type: () -> RestrictionProgress\n-      return RestrictionProgress(\n-          fraction=self.restriction.range_tracker().fraction_consumed())\n-\n-    def current_restriction(self):\n-      self.restriction.range_tracker()\n-      return self.restriction\n-\n-    def start_pos(self):\n-      return self.restriction.range_tracker().start_position()\n-\n-    def stop_pos(self):\n-      return self.restriction.range_tracker().stop_position()\n-\n-    def try_claim(self, position):\n-      return self.restriction.range_tracker().try_claim(position)\n-\n-    def try_split(self, fraction_of_remainder):\n-      return self.restriction.try_split(fraction_of_remainder)\n-\n-    def check_done(self):\n-      return self.restriction.range_tracker().fraction_consumed() >= 1.0\n-\n-    def is_bounded(self):\n-      return True\n-\n-  class _SDFBoundedSourceRestrictionProvider(core.RestrictionProvider):\n-    \"\"\"A `RestrictionProvider` that is used by SDF for `BoundedSource`.\"\"\"\n-    def __init__(self, source, desired_chunk_size=None):\n-      self._source = source\n-      self._desired_chunk_size = desired_chunk_size\n-\n-    def initial_restriction(self, element):\n-      # Get initial range_tracker from source\n-      range_tracker = self._source.get_range_tracker(None, None)\n-      return _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-          SourceBundle(\n-              None,\n-              self._source,\n-              range_tracker.start_position(),\n-              range_tracker.stop_position()))\n-\n-    def create_tracker(self, restriction):\n-      return _SDFBoundedSourceWrapper._SDFBoundedSourceRestrictionTracker(\n-          restriction)\n-\n-    def split(self, element, restriction):\n-      if self._desired_chunk_size is None:\n-        try:\n-          estimated_size = self._source.estimate_size()\n-        except NotImplementedError:\n-          estimated_size = None\n-        self._desired_chunk_size = Read.get_desired_chunk_size(estimated_size)\n-\n-      # Invoke source.split to get initial splitting results.\n-      source_bundles = self._source.split(self._desired_chunk_size)\n-      for source_bundle in source_bundles:\n-        yield _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-            source_bundle)\n-\n-    def restriction_size(self, element, restriction):\n-      return restriction.weight()\n-\n-    def restriction_coder(self):\n-      return coders.DillCoder()\n+  def __init__(self, restriction):\n+    if not isinstance(restriction, _SDFBoundedSourceRestriction):\n+      raise ValueError(\n+          'Initializing SDFBoundedSourceRestrictionTracker'\n+          ' requires a _SDFBoundedSourceRestriction')\n+    self.restriction = restriction\n \n-  def __init__(self, source):\n-    if not isinstance(source, BoundedSource):\n-      raise RuntimeError('SDFBoundedSourceWrapper can only wrap BoundedSource')\n-    super(_SDFBoundedSourceWrapper, self).__init__()\n-    self.source = source\n+  def current_progress(self):\n+    # type: () -> RestrictionProgress\n+    return RestrictionProgress(\n+        fraction=self.restriction.range_tracker().fraction_consumed())\n \n-  def _create_sdf_bounded_source_dofn(self):\n-    source = self.source\n+  def current_restriction(self):\n+    self.restriction.range_tracker()\n+    return self.restriction\n \n-    class SDFBoundedSourceDoFn(core.DoFn):\n-      def __init__(self, read_source):\n-        self.source = read_source\n+  def start_pos(self):\n+    return self.restriction.range_tracker().start_position()\n+\n+  def stop_pos(self):\n+    return self.restriction.range_tracker().stop_position()\n+\n+  def try_claim(self, position):\n+    return self.restriction.range_tracker().try_claim(position)\n \n-      def display_data(self):\n-        return {\n-            'source': DisplayDataItem(\n-                self.source.__class__, label='Read Source'),\n-            'source_dd': self.source\n-        }\n+  def try_split(self, fraction_of_remainder):\n+    return self.restriction.try_split(fraction_of_remainder)\n+\n+  def check_done(self):\n+    return self.restriction.range_tracker().fraction_consumed() >= 1.0\n+\n+  def is_bounded(self):\n+    return True\n+\n+\n+class _SDFBoundedSourceRestrictionProvider(core.RestrictionProvider):\n+  \"\"\"\n+  A `RestrictionProvider` that is used by SDF for `BoundedSource`.\n+\n+  If source is provided, uses it for initializing restriction. Otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0a15099de62d1b7a9b08a8378f816e624b816ac"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ5NTc3OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/iobase.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1NjoxMFrOHqn_LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1NjoxMFrOHqn_LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1NzM4OQ==", "bodyText": "The src cannot be None, right?", "url": "https://github.com/apache/beam/pull/13154#discussion_r514457389", "createdAt": "2020-10-29T17:56:10Z", "author": {"login": "boyuanzz"}, "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1427,194 +1432,184 @@ def with_completed(self, completed):\n         fraction=self._fraction, remaining=self._remaining, completed=completed)\n \n \n-class _SDFBoundedSourceWrapper(ptransform.PTransform):\n-  \"\"\"A ``PTransform`` that uses SDF to read from a ``BoundedSource``.\n+class _SDFBoundedSourceRestriction(object):\n+  \"\"\" A restriction wraps SourceBundle and RangeTracker. \"\"\"\n+  def __init__(self, source_bundle, range_tracker=None):\n+    self._source_bundle = source_bundle\n+    self._range_tracker = range_tracker\n \n-  NOTE: This transform can only be used with beam_fn_api enabled.\n+  def __reduce__(self):\n+    # The instance of RangeTracker shouldn't be serialized.\n+    return (self.__class__, (self._source_bundle, ))\n+\n+  def range_tracker(self):\n+    if not self._range_tracker:\n+      self._range_tracker = self._source_bundle.source.get_range_tracker(\n+          self._source_bundle.start_position, self._source_bundle.stop_position)\n+    return self._range_tracker\n+\n+  def weight(self):\n+    return self._source_bundle.weight\n+\n+  def source(self):\n+    return self._source_bundle.source\n+\n+  def try_split(self, fraction_of_remainder):\n+    consumed_fraction = self.range_tracker().fraction_consumed()\n+    fraction = (\n+        consumed_fraction + (1 - consumed_fraction) * fraction_of_remainder)\n+    position = self.range_tracker().position_at_fraction(fraction)\n+    # Need to stash current stop_pos before splitting since\n+    # range_tracker.split will update its stop_pos if splits\n+    # successfully.\n+    stop_pos = self._source_bundle.stop_position\n+    split_result = self.range_tracker().try_split(position)\n+    if split_result:\n+      split_pos, split_fraction = split_result\n+      primary_weight = self._source_bundle.weight * split_fraction\n+      residual_weight = self._source_bundle.weight - primary_weight\n+      # Update self to primary weight and end position.\n+      self._source_bundle = SourceBundle(\n+          primary_weight,\n+          self._source_bundle.source,\n+          self._source_bundle.start_position,\n+          split_pos)\n+      return (\n+          self,\n+          _SDFBoundedSourceRestriction(\n+              SourceBundle(\n+                  residual_weight,\n+                  self._source_bundle.source,\n+                  split_pos,\n+                  stop_pos)))\n+\n+\n+class _SDFBoundedSourceRestrictionTracker(RestrictionTracker):\n+  \"\"\"An `iobase.RestrictionTracker` implementations for wrapping BoundedSource\n+  with SDF. The tracked restriction is a _SDFBoundedSourceRestriction, which\n+  wraps SourceBundle and RangeTracker.\n+\n+  Delegated RangeTracker guarantees synchronization safety.\n   \"\"\"\n-  class _SDFBoundedSourceRestriction(object):\n-    \"\"\" A restriction wraps SourceBundle and RangeTracker. \"\"\"\n-    def __init__(self, source_bundle, range_tracker=None):\n-      self._source_bundle = source_bundle\n-      self._range_tracker = range_tracker\n-\n-    def __reduce__(self):\n-      # The instance of RangeTracker shouldn't be serialized.\n-      return (self.__class__, (self._source_bundle, ))\n-\n-    def range_tracker(self):\n-      if not self._range_tracker:\n-        self._range_tracker = self._source_bundle.source.get_range_tracker(\n-            self._source_bundle.start_position,\n-            self._source_bundle.stop_position)\n-      return self._range_tracker\n-\n-    def weight(self):\n-      return self._source_bundle.weight\n-\n-    def source(self):\n-      return self._source_bundle.source\n-\n-    def try_split(self, fraction_of_remainder):\n-      consumed_fraction = self.range_tracker().fraction_consumed()\n-      fraction = (\n-          consumed_fraction + (1 - consumed_fraction) * fraction_of_remainder)\n-      position = self.range_tracker().position_at_fraction(fraction)\n-      # Need to stash current stop_pos before splitting since\n-      # range_tracker.split will update its stop_pos if splits\n-      # successfully.\n-      stop_pos = self._source_bundle.stop_position\n-      split_result = self.range_tracker().try_split(position)\n-      if split_result:\n-        split_pos, split_fraction = split_result\n-        primary_weight = self._source_bundle.weight * split_fraction\n-        residual_weight = self._source_bundle.weight - primary_weight\n-        # Update self to primary weight and end position.\n-        self._source_bundle = SourceBundle(\n-            primary_weight,\n-            self._source_bundle.source,\n-            self._source_bundle.start_position,\n-            split_pos)\n-        return (\n-            self,\n-            _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-                SourceBundle(\n-                    residual_weight,\n-                    self._source_bundle.source,\n-                    split_pos,\n-                    stop_pos)))\n-\n-  class _SDFBoundedSourceRestrictionTracker(RestrictionTracker):\n-    \"\"\"An `iobase.RestrictionTracker` implementations for wrapping BoundedSource\n-    with SDF. The tracked restriction is a _SDFBoundedSourceRestriction, which\n-    wraps SourceBundle and RangeTracker.\n-\n-    Delegated RangeTracker guarantees synchronization safety.\n-    \"\"\"\n-    def __init__(self, restriction):\n-      if not isinstance(restriction,\n-                        _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction):\n-        raise ValueError(\n-            'Initializing SDFBoundedSourceRestrictionTracker'\n-            ' requires a _SDFBoundedSourceRestriction')\n-      self.restriction = restriction\n-\n-    def current_progress(self):\n-      # type: () -> RestrictionProgress\n-      return RestrictionProgress(\n-          fraction=self.restriction.range_tracker().fraction_consumed())\n-\n-    def current_restriction(self):\n-      self.restriction.range_tracker()\n-      return self.restriction\n-\n-    def start_pos(self):\n-      return self.restriction.range_tracker().start_position()\n-\n-    def stop_pos(self):\n-      return self.restriction.range_tracker().stop_position()\n-\n-    def try_claim(self, position):\n-      return self.restriction.range_tracker().try_claim(position)\n-\n-    def try_split(self, fraction_of_remainder):\n-      return self.restriction.try_split(fraction_of_remainder)\n-\n-    def check_done(self):\n-      return self.restriction.range_tracker().fraction_consumed() >= 1.0\n-\n-    def is_bounded(self):\n-      return True\n-\n-  class _SDFBoundedSourceRestrictionProvider(core.RestrictionProvider):\n-    \"\"\"A `RestrictionProvider` that is used by SDF for `BoundedSource`.\"\"\"\n-    def __init__(self, source, desired_chunk_size=None):\n-      self._source = source\n-      self._desired_chunk_size = desired_chunk_size\n-\n-    def initial_restriction(self, element):\n-      # Get initial range_tracker from source\n-      range_tracker = self._source.get_range_tracker(None, None)\n-      return _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-          SourceBundle(\n-              None,\n-              self._source,\n-              range_tracker.start_position(),\n-              range_tracker.stop_position()))\n-\n-    def create_tracker(self, restriction):\n-      return _SDFBoundedSourceWrapper._SDFBoundedSourceRestrictionTracker(\n-          restriction)\n-\n-    def split(self, element, restriction):\n-      if self._desired_chunk_size is None:\n-        try:\n-          estimated_size = self._source.estimate_size()\n-        except NotImplementedError:\n-          estimated_size = None\n-        self._desired_chunk_size = Read.get_desired_chunk_size(estimated_size)\n-\n-      # Invoke source.split to get initial splitting results.\n-      source_bundles = self._source.split(self._desired_chunk_size)\n-      for source_bundle in source_bundles:\n-        yield _SDFBoundedSourceWrapper._SDFBoundedSourceRestriction(\n-            source_bundle)\n-\n-    def restriction_size(self, element, restriction):\n-      return restriction.weight()\n-\n-    def restriction_coder(self):\n-      return coders.DillCoder()\n+  def __init__(self, restriction):\n+    if not isinstance(restriction, _SDFBoundedSourceRestriction):\n+      raise ValueError(\n+          'Initializing SDFBoundedSourceRestrictionTracker'\n+          ' requires a _SDFBoundedSourceRestriction')\n+    self.restriction = restriction\n \n-  def __init__(self, source):\n-    if not isinstance(source, BoundedSource):\n-      raise RuntimeError('SDFBoundedSourceWrapper can only wrap BoundedSource')\n-    super(_SDFBoundedSourceWrapper, self).__init__()\n-    self.source = source\n+  def current_progress(self):\n+    # type: () -> RestrictionProgress\n+    return RestrictionProgress(\n+        fraction=self.restriction.range_tracker().fraction_consumed())\n \n-  def _create_sdf_bounded_source_dofn(self):\n-    source = self.source\n+  def current_restriction(self):\n+    self.restriction.range_tracker()\n+    return self.restriction\n \n-    class SDFBoundedSourceDoFn(core.DoFn):\n-      def __init__(self, read_source):\n-        self.source = read_source\n+  def start_pos(self):\n+    return self.restriction.range_tracker().start_position()\n+\n+  def stop_pos(self):\n+    return self.restriction.range_tracker().stop_position()\n+\n+  def try_claim(self, position):\n+    return self.restriction.range_tracker().try_claim(position)\n \n-      def display_data(self):\n-        return {\n-            'source': DisplayDataItem(\n-                self.source.__class__, label='Read Source'),\n-            'source_dd': self.source\n-        }\n+  def try_split(self, fraction_of_remainder):\n+    return self.restriction.try_split(fraction_of_remainder)\n+\n+  def check_done(self):\n+    return self.restriction.range_tracker().fraction_consumed() >= 1.0\n+\n+  def is_bounded(self):\n+    return True\n+\n+\n+class _SDFBoundedSourceRestrictionProvider(core.RestrictionProvider):\n+  \"\"\"\n+  A `RestrictionProvider` that is used by SDF for `BoundedSource`.\n+\n+  If source is provided, uses it for initializing restriction. Otherwise\n+  initializes restriction based on input element that is expected to be of\n+  BoundedSource type.\n+  \"\"\"\n+  def __init__(self, desired_chunk_size=None):\n+    self._desired_chunk_size = desired_chunk_size\n+\n+  def _check_source(self, src):\n+    if src is not None and not isinstance(src, BoundedSource):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0a15099de62d1b7a9b08a8378f816e624b816ac"}, "originalPosition": 283}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3046, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}