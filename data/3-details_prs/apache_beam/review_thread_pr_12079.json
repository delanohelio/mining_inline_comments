{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDI5NDc3", "number": 12079, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyNzowNFrOEIhGWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjozMDo1MFrOEJSFIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzY2MzYxOnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyNzowNFrOGoh6Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMjowM1rOGojApA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ==", "bodyText": "-1L makes it a bit harder to read. Why not use 1L instead?", "url": "https://github.com/apache/beam/pull/12079#discussion_r445151779", "createdAt": "2020-06-24T20:27:04Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41dd5018f90bcac90079f68624710c811f05e50"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDM2NQ==", "bodyText": "Because -1L is represented as 64 bits of 1 in binary while 1L only has one 1 at the least significant bit.\nIn order to do bit_and operation, I think the initial bit mask should consists of only 1s, so I use -1L.", "url": "https://github.com/apache/beam/pull/12079#discussion_r445160365", "createdAt": "2020-06-24T20:43:43Z", "author": {"login": "Imfuyuwei"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}, "originalCommit": {"oid": "d41dd5018f90bcac90079f68624710c811f05e50"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MzE4OQ==", "bodyText": "That's a good point \ud83d\udc4d  I should go back to re-visit CMU 15213 course slides.", "url": "https://github.com/apache/beam/pull/12079#discussion_r445163189", "createdAt": "2020-06-24T20:49:11Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}, "originalCommit": {"oid": "d41dd5018f90bcac90079f68624710c811f05e50"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2NzM5MQ==", "bodyText": "Thanks!\nBTW I want to mention that I also added 1 line at the end of the previous testBitOrFunction(). I noticed that without this line, the previous bit_or test would always pass no matter what expected result I set, which made it an invalid test.\nIt will be good if you can take a look.", "url": "https://github.com/apache/beam/pull/12079#discussion_r445167391", "createdAt": "2020-06-24T20:57:16Z", "author": {"login": "Imfuyuwei"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}, "originalCommit": {"oid": "d41dd5018f90bcac90079f68624710c811f05e50"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTgyOA==", "bodyText": "O for that pipeline run and then wait. Thanks that's a nice catch.", "url": "https://github.com/apache/beam/pull/12079#discussion_r445169828", "createdAt": "2020-06-24T21:02:03Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}, "originalCommit": {"oid": "d41dd5018f90bcac90079f68624710c811f05e50"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY4ODY3OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjozMDo1MFrOGpwZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjozMTozM1rOGpwaKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNzc1OA==", "bodyText": "In fact, I wasn't sure what's the result of NULL & long", "url": "https://github.com/apache/beam/pull/12079#discussion_r446437758", "createdAt": "2020-06-26T22:30:50Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;\n+    }\n+\n+    @Override\n+    public Long addInput(Long accum, T input) {\n+      return accum & input.longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41dd5018f90bcac90079f68624710c811f05e50"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNzkzMA==", "bodyText": "If consider NULL is unknown, then unknown op something should be unknown.", "url": "https://github.com/apache/beam/pull/12079#discussion_r446437930", "createdAt": "2020-06-26T22:31:33Z", "author": {"login": "amaliujia"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;\n+    }\n+\n+    @Override\n+    public Long addInput(Long accum, T input) {\n+      return accum & input.longValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNzc1OA=="}, "originalCommit": {"oid": "d41dd5018f90bcac90079f68624710c811f05e50"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3576, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}