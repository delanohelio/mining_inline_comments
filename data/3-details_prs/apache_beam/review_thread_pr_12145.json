{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDU5Njkx", "number": 12145, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0MzowM1rOENA1Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyNToyNFrOEPdskw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDgwNTk4OnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0MzowM1rOGvdZ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDowNTowNFrOGvpLZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODAyOQ==", "bodyText": "Looks like this will be in 2.24.0", "url": "https://github.com/apache/beam/pull/12145#discussion_r452418029", "createdAt": "2020-07-09T18:43:03Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -78,6 +78,8 @@\n   is experimental. It reads data from BigQuery by exporting data to Avro files, and reading those files. It also supports\n   reading data by exporting to JSON files. This has small differences in behavior for Time and Date-related fields. See\n   Pydoc for more information.\n+* Add cross-language support to JdbcIO.ReadRows([BEAM-10135](https://issues.apache.org/jira/browse/BEAM-10135)).\n+* Add cross-language support to JdbcIO.Write([BEAM-10136](https://issues.apache.org/jira/browse/BEAM-10136)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxMDkxOQ==", "bodyText": "Yeah, the time has passed :)", "url": "https://github.com/apache/beam/pull/12145#discussion_r452610919", "createdAt": "2020-07-10T04:05:04Z", "author": {"login": "piotr-szuberski"}, "path": "CHANGES.md", "diffHunk": "@@ -78,6 +78,8 @@\n   is experimental. It reads data from BigQuery by exporting data to Avro files, and reading those files. It also supports\n   reading data by exporting to JSON files. This has small differences in behavior for Time and Date-related fields. See\n   Pydoc for more information.\n+* Add cross-language support to JdbcIO.ReadRows([BEAM-10135](https://issues.apache.org/jira/browse/BEAM-10135)).\n+* Add cross-language support to JdbcIO.Write([BEAM-10136](https://issues.apache.org/jira/browse/BEAM-10136)).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODAyOQ=="}, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDgzMjI0OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1MDo1NFrOGvdqMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1MDo1NFrOGvdqMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMjE5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"\"\"An external PTransform which reads Rows from the specified database.\n          \n          \n            \n              \"\"\"A PTransform which reads Rows from the specified database via JDBC.", "url": "https://github.com/apache/beam/pull/12145#discussion_r452422193", "createdAt": "2020-07-09T18:50:54Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"An external PTransform which writes Rows to the specified database.\n+\n+  This transform receives Rows defined as NamedTuple type and registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)\n+\n+  An example can be found in\n+  `apache_beam.examples.xlang_jdbcio_it_test`\n+  \"\"\"\n+\n+  URN = 'beam:external:java:jdbc:write:v1'\n+\n+  def __init__(\n+      self,\n+      driver_class_name,\n+      jdbc_url,\n+      username,\n+      password,\n+      statement,\n+      connection_properties=None,\n+      connection_init_sqls=None,\n+      expansion_service=None,\n+  ):\n+    \"\"\"\n+    Initializes a write operation to Jdbc.\n+\n+    :param driver_class_name: name of the jdbc driver class\n+    :param jdbc_url: full jdbc url to the database.\n+    :param username: database username\n+    :param password: database password\n+    :param statement: sql statement to be executed\n+    :param connection_properties: properties of the jdbc connection\n+                                  passed as string with format\n+                                  [propertyName=property;]*\n+    :param connection_init_sqls: required only for MySql and MariaDB.\n+                                 passed as list of strings\n+    :param expansion_service: The address (host:port) of the ExpansionService.\n+    \"\"\"\n+\n+    super(WriteToJdbc, self).__init__(\n+        self.URN,\n+        NamedTupleBasedPayloadBuilder(\n+            WriteToJdbcSchema(\n+                driver_class_name=driver_class_name,\n+                jdbc_url=jdbc_url,\n+                username=username,\n+                password=password,\n+                statement=statement,\n+                connection_properties=connection_properties,\n+                connection_init_sqls=connection_init_sqls,\n+            ),\n+        ),\n+        expansion_service or default_io_expansion_service(),\n+    )\n+\n+\n+ReadFromJdbcSchema = typing.NamedTuple(\n+    'ReadFromJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('query', unicode),\n+        ('fetch_size', typing.Optional[int]),\n+        ('output_parallelization', typing.Optional[bool]),\n+    ],\n+)\n+\n+\n+class ReadFromJdbc(ExternalTransform):\n+  \"\"\"An external PTransform which reads Rows from the specified database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDgzMzk1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1MToxOVrOGvdrNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1MToxOVrOGvdrNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMjQ1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"\"\"An external PTransform which writes Rows to the specified database.\n          \n          \n            \n              \"\"\"A PTransform which writes Rows to the specified database via JDBC.", "url": "https://github.com/apache/beam/pull/12145#discussion_r452422452", "createdAt": "2020-07-09T18:51:19Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"An external PTransform which writes Rows to the specified database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDgzNjMxOnYy", "diffSide": "RIGHT", "path": "sdks/java/container/boot.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1MTo1NFrOGvdspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDowNjowMlrOGvpMTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMjgyMw==", "bodyText": "I think this change and the changes in sdks/java/container/build.gradle are no longer necessary (like the Dockerfile one from here: #12022 (comment)). I think they were required before we had artifact staging.", "url": "https://github.com/apache/beam/pull/12145#discussion_r452422823", "createdAt": "2020-07-09T18:51:54Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/container/boot.go", "diffHunk": "@@ -122,6 +122,7 @@ func main() {\n \t\tfilepath.Join(jarsDir, \"beam-sdks-java-harness.jar\"),\n \t\tfilepath.Join(jarsDir, \"beam-sdks-java-io-kafka.jar\"),\n \t\tfilepath.Join(jarsDir, \"kafka-clients.jar\"),\n+\t\tfilepath.Join(jarsDir, \"beam-sdks-java-io-jdbc.jar\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxMTE1MQ==", "bodyText": "You're right, that's a good news! :)", "url": "https://github.com/apache/beam/pull/12145#discussion_r452611151", "createdAt": "2020-07-10T04:06:02Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/container/boot.go", "diffHunk": "@@ -122,6 +122,7 @@ func main() {\n \t\tfilepath.Join(jarsDir, \"beam-sdks-java-harness.jar\"),\n \t\tfilepath.Join(jarsDir, \"beam-sdks-java-io-kafka.jar\"),\n \t\tfilepath.Join(jarsDir, \"kafka-clients.jar\"),\n+\t\tfilepath.Join(jarsDir, \"beam-sdks-java-io-jdbc.jar\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMjgyMw=="}, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDg0NjUxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1NDo1N1rOGvdzDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1NDo1N1rOGvdzDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNDQ2MA==", "bodyText": "This looks great, thanks!", "url": "https://github.com/apache/beam/pull/12145#discussion_r452424460", "createdAt": "2020-07-09T18:54:57Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDg1NTg1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1Nzo0OVrOGvd47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDowNjozOVrOGvpM6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNTk2NA==", "bodyText": "Could you add this dependency in :sdks:java:io:expansion-service instead? I think that would have the same effect, but saves users who don't need it from pulling it in.", "url": "https://github.com/apache/beam/pull/12145#discussion_r452425964", "createdAt": "2020-07-09T18:57:49Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/jdbc/build.gradle", "diffHunk": "@@ -25,6 +25,7 @@ description = \"Apache Beam :: SDKs :: Java :: IO :: JDBC\"\n ext.summary = \"IO to read and write on JDBC datasource.\"\n \n dependencies {\n+  compile library.java.postgres", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxMTMwNg==", "bodyText": "Good idea! I could even add it as runtime dependency", "url": "https://github.com/apache/beam/pull/12145#discussion_r452611306", "createdAt": "2020-07-10T04:06:39Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/jdbc/build.gradle", "diffHunk": "@@ -25,6 +25,7 @@ description = \"Apache Beam :: SDKs :: Java :: IO :: JDBC\"\n ext.summary = \"IO to read and write on JDBC datasource.\"\n \n dependencies {\n+  compile library.java.postgres", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNTk2NA=="}, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDg3MzIwOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTowMzoxN1rOGveEEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTowMzoxN1rOGveEEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyODgxNw==", "bodyText": "Ah sorry, I see now that this is how you know it's running on Flink and Spark :)", "url": "https://github.com/apache/beam/pull/12145#discussion_r452428817", "createdAt": "2020-07-09T19:03:17Z", "author": {"login": "TheNeuralBit"}, "path": "build.gradle", "diffHunk": "@@ -273,6 +273,7 @@ task python37PostCommit() {\n \n task python38PostCommit() {\n   dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaKafkaIOFlink\"\n+  dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaJdbcIO\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDg4NzUxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTowNzo1OFrOGveNWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDowNzoyN1rOGvpNjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzMTE5Mw==", "bodyText": "wouldn't it be preferable to make false the default? I'd think most tox tasks do not need this.", "url": "https://github.com/apache/beam/pull/12145#discussion_r452431193", "createdAt": "2020-07-09T19:07:58Z", "author": {"login": "TheNeuralBit"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = true ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxMTQ2OA==", "bodyText": "Yeah, definitely. I made it true as default without thinking at the moment of writing it.", "url": "https://github.com/apache/beam/pull/12145#discussion_r452611468", "createdAt": "2020-07-10T04:07:27Z", "author": {"login": "piotr-szuberski"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = true ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzMTE5Mw=="}, "originalCommit": {"oid": "439d71dc619de750ce112332bff82a0e1391124c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDAzMjI5OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/expansion-service/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozNTowMlrOGv7-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoxNjozMFrOGv_LbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxODk2Ng==", "bodyText": "nit: It might not be clear why this is here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              runtime library.java.postgres\n          \n          \n            \n              // Include postgres so it can be used with external JDBC\n          \n          \n            \n              runtime library.java.postgres", "url": "https://github.com/apache/beam/pull/12145#discussion_r452918966", "createdAt": "2020-07-10T15:35:02Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/expansion-service/build.gradle", "diffHunk": "@@ -33,6 +33,8 @@ ext.summary = \"Expansion service serving several Java IOs\"\n dependencies {\n   compile project(\":sdks:java:expansion-service\")\n   compile project(\":sdks:java:io:kafka\")\n+  runtime project(\":sdks:java:io:jdbc\")\n   runtime library.java.kafka_clients\n+  runtime library.java.postgres", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d6cbea658767c87c3df663af4c29c6ba793a088"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3MTM3Mg==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12145#discussion_r452971372", "createdAt": "2020-07-10T17:16:30Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/expansion-service/build.gradle", "diffHunk": "@@ -33,6 +33,8 @@ ext.summary = \"Expansion service serving several Java IOs\"\n dependencies {\n   compile project(\":sdks:java:expansion-service\")\n   compile project(\":sdks:java:io:kafka\")\n+  runtime project(\":sdks:java:io:jdbc\")\n   runtime library.java.kafka_clients\n+  runtime library.java.postgres", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxODk2Ng=="}, "originalCommit": {"oid": "6d6cbea658767c87c3df663af4c29c6ba793a088"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDA0NjY0OnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozOTowNVrOGv8HzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoxNzoxNFrOGv_M1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Add cross-language support to JdbcIO.ReadRows([BEAM-10135](https://issues.apache.org/jira/browse/BEAM-10135)).\n          \n          \n            \n            * Add cross-language support to JdbcIO.Write([BEAM-10136](https://issues.apache.org/jira/browse/BEAM-10136)).\n          \n          \n            \n            * Add cross-language support to Java's JdbcIO, now available in the Python module `apache_beam.io.external.jdbc` ([BEAM-10135](https://issues.apache.org/jira/browse/BEAM-10135), [BEAM-10136](https://issues.apache.org/jira/browse/BEAM-10136)).", "url": "https://github.com/apache/beam/pull/12145#discussion_r452921292", "createdAt": "2020-07-10T15:39:05Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -55,6 +55,8 @@\n \n * New overloads for BigtableIO.Read.withKeyRange() and BigtableIO.Read.withRowFilter()\n   methods that take ValueProvider as a parameter (Java) ([BEAM-10283](https://issues.apache.org/jira/browse/BEAM-10283)).\n+* Add cross-language support to JdbcIO.ReadRows([BEAM-10135](https://issues.apache.org/jira/browse/BEAM-10135)).\n+* Add cross-language support to JdbcIO.Write([BEAM-10136](https://issues.apache.org/jira/browse/BEAM-10136)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d6cbea658767c87c3df663af4c29c6ba793a088"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3MTczNA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12145#discussion_r452971734", "createdAt": "2020-07-10T17:17:14Z", "author": {"login": "piotr-szuberski"}, "path": "CHANGES.md", "diffHunk": "@@ -55,6 +55,8 @@\n \n * New overloads for BigtableIO.Read.withKeyRange() and BigtableIO.Read.withRowFilter()\n   methods that take ValueProvider as a parameter (Java) ([BEAM-10283](https://issues.apache.org/jira/browse/BEAM-10283)).\n+* Add cross-language support to JdbcIO.ReadRows([BEAM-10135](https://issues.apache.org/jira/browse/BEAM-10135)).\n+* Add cross-language support to JdbcIO.Write([BEAM-10136](https://issues.apache.org/jira/browse/BEAM-10136)).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTI5Mg=="}, "originalCommit": {"oid": "6d6cbea658767c87c3df663af4c29c6ba793a088"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDU2MTEyOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoyNjozNFrOGwBMxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0OTo1MFrOGzI_0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDQ4NQ==", "bodyText": "Could you clarify why this copy is needed ? Is building \":sdks:java:io:expansion-service\" inadequate for some reason ?", "url": "https://github.com/apache/beam/pull/12145#discussion_r453004485", "createdAt": "2020-07-10T18:26:34Z", "author": {"login": "chamikaramj"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = false ->\n+        project.evaluationDependsOn(\":sdks:java:io:expansion-service\")\n         project.tasks.create(name) {\n           dependsOn 'setupVirtualenv'\n           dependsOn ':sdks:python:sdist'\n+          if (needsExpansionServiceJar) {\n+            dependsOn ':sdks:java:io:expansion-service:shadowJar'\n+          }\n \n           doLast {\n             // Python source directory is also tox execution workspace, We want\n             // to isolate them per tox suite to avoid conflict when running\n             // multiple tox suites in parallel.\n             project.copy { from project.pythonSdkDeps; into copiedSrcRoot }\n-\n+            if (needsExpansionServiceJar) {\n+              def expansionServiceJar =  project.project(':sdks:java:io:expansion-service').shadowJar.archivePath\n+              def expansionServiceDestinationDir = \"${copiedSrcRoot}/sdks/java/io/expansion-service/build/libs\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1OTk5NQ==", "bodyText": "Python tox suites tlike pythonLint, pythonFormatter, pythonDocs do not require expansion service to be built for their executions. Only tox test suites require them.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453059995", "createdAt": "2020-07-10T20:21:34Z", "author": {"login": "piotr-szuberski"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = false ->\n+        project.evaluationDependsOn(\":sdks:java:io:expansion-service\")\n         project.tasks.create(name) {\n           dependsOn 'setupVirtualenv'\n           dependsOn ':sdks:python:sdist'\n+          if (needsExpansionServiceJar) {\n+            dependsOn ':sdks:java:io:expansion-service:shadowJar'\n+          }\n \n           doLast {\n             // Python source directory is also tox execution workspace, We want\n             // to isolate them per tox suite to avoid conflict when running\n             // multiple tox suites in parallel.\n             project.copy { from project.pythonSdkDeps; into copiedSrcRoot }\n-\n+            if (needsExpansionServiceJar) {\n+              def expansionServiceJar =  project.project(':sdks:java:io:expansion-service').shadowJar.archivePath\n+              def expansionServiceDestinationDir = \"${copiedSrcRoot}/sdks/java/io/expansion-service/build/libs\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDQ4NQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MTc3Nw==", "bodyText": "Sorry, I didn't read carefully. Tox suites use separate environment and BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar') cannot find the jar unless it is not copied into the tox suite's root path", "url": "https://github.com/apache/beam/pull/12145#discussion_r453161777", "createdAt": "2020-07-11T06:12:04Z", "author": {"login": "piotr-szuberski"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = false ->\n+        project.evaluationDependsOn(\":sdks:java:io:expansion-service\")\n         project.tasks.create(name) {\n           dependsOn 'setupVirtualenv'\n           dependsOn ':sdks:python:sdist'\n+          if (needsExpansionServiceJar) {\n+            dependsOn ':sdks:java:io:expansion-service:shadowJar'\n+          }\n \n           doLast {\n             // Python source directory is also tox execution workspace, We want\n             // to isolate them per tox suite to avoid conflict when running\n             // multiple tox suites in parallel.\n             project.copy { from project.pythonSdkDeps; into copiedSrcRoot }\n-\n+            if (needsExpansionServiceJar) {\n+              def expansionServiceJar =  project.project(':sdks:java:io:expansion-service').shadowJar.archivePath\n+              def expansionServiceDestinationDir = \"${copiedSrcRoot}/sdks/java/io/expansion-service/build/libs\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDQ4NQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNjk4NQ==", "bodyText": "Why to we need a jar in tox (unit test) suite?", "url": "https://github.com/apache/beam/pull/12145#discussion_r456206985", "createdAt": "2020-07-17T04:07:32Z", "author": {"login": "tvalentyn"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = false ->\n+        project.evaluationDependsOn(\":sdks:java:io:expansion-service\")\n         project.tasks.create(name) {\n           dependsOn 'setupVirtualenv'\n           dependsOn ':sdks:python:sdist'\n+          if (needsExpansionServiceJar) {\n+            dependsOn ':sdks:java:io:expansion-service:shadowJar'\n+          }\n \n           doLast {\n             // Python source directory is also tox execution workspace, We want\n             // to isolate them per tox suite to avoid conflict when running\n             // multiple tox suites in parallel.\n             project.copy { from project.pythonSdkDeps; into copiedSrcRoot }\n-\n+            if (needsExpansionServiceJar) {\n+              def expansionServiceJar =  project.project(':sdks:java:io:expansion-service').shadowJar.archivePath\n+              def expansionServiceDestinationDir = \"${copiedSrcRoot}/sdks/java/io/expansion-service/build/libs\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDQ4NQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwNzE2MA==", "bodyText": "I understand that we may need it for  integration tests (most of those should  run in postcommits), but why precommits/unit-tests-on-tox need it?", "url": "https://github.com/apache/beam/pull/12145#discussion_r456207160", "createdAt": "2020-07-17T04:08:27Z", "author": {"login": "tvalentyn"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = false ->\n+        project.evaluationDependsOn(\":sdks:java:io:expansion-service\")\n         project.tasks.create(name) {\n           dependsOn 'setupVirtualenv'\n           dependsOn ':sdks:python:sdist'\n+          if (needsExpansionServiceJar) {\n+            dependsOn ':sdks:java:io:expansion-service:shadowJar'\n+          }\n \n           doLast {\n             // Python source directory is also tox execution workspace, We want\n             // to isolate them per tox suite to avoid conflict when running\n             // multiple tox suites in parallel.\n             project.copy { from project.pythonSdkDeps; into copiedSrcRoot }\n-\n+            if (needsExpansionServiceJar) {\n+              def expansionServiceJar =  project.project(':sdks:java:io:expansion-service').shadowJar.archivePath\n+              def expansionServiceDestinationDir = \"${copiedSrcRoot}/sdks/java/io/expansion-service/build/libs\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDQ4NQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3Nzk2OQ==", "bodyText": "Because I understood that we want these tests to run in precommit with fn_api runner. If we don't then I'll leave them running in postcommit suites (which is good enough as I assume) and disable them in precommit.", "url": "https://github.com/apache/beam/pull/12145#discussion_r456277969", "createdAt": "2020-07-17T07:49:50Z", "author": {"login": "piotr-szuberski"}, "path": "buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy", "diffHunk": "@@ -1982,17 +1982,25 @@ class BeamModulePlugin implements Plugin<Project> {\n         return argList.join(' ')\n       }\n \n-      project.ext.toxTask = { name, tox_env ->\n+      project.ext.toxTask = { name, tox_env, needsExpansionServiceJar = false ->\n+        project.evaluationDependsOn(\":sdks:java:io:expansion-service\")\n         project.tasks.create(name) {\n           dependsOn 'setupVirtualenv'\n           dependsOn ':sdks:python:sdist'\n+          if (needsExpansionServiceJar) {\n+            dependsOn ':sdks:java:io:expansion-service:shadowJar'\n+          }\n \n           doLast {\n             // Python source directory is also tox execution workspace, We want\n             // to isolate them per tox suite to avoid conflict when running\n             // multiple tox suites in parallel.\n             project.copy { from project.pythonSdkDeps; into copiedSrcRoot }\n-\n+            if (needsExpansionServiceJar) {\n+              def expansionServiceJar =  project.project(':sdks:java:io:expansion-service').shadowJar.archivePath\n+              def expansionServiceDestinationDir = \"${copiedSrcRoot}/sdks/java/io/expansion-service/build/libs\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDQ4NQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDY2MzkxOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/expansion-service/build.gradle", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODo1Mjo0NVrOGwCLOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNjowMzozMFrOGwKwog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyMDQ3Mw==", "bodyText": "These runtime dependencies are not included in the shadow jar ? How do they get staged for the runner ?", "url": "https://github.com/apache/beam/pull/12145#discussion_r453020473", "createdAt": "2020-07-10T18:52:45Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/expansion-service/build.gradle", "diffHunk": "@@ -33,6 +33,9 @@ ext.summary = \"Expansion service serving several Java IOs\"\n dependencies {\n   compile project(\":sdks:java:expansion-service\")\n   compile project(\":sdks:java:io:kafka\")\n+  runtime project(\":sdks:java:io:jdbc\")\n   runtime library.java.kafka_clients\n+  // Include postgres so it can be used with external JDBC\n+  runtime library.java.postgres", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MDY0NQ==", "bodyText": "To be honest I don't really know these dependencies work under the hood. It just happened to work this way.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453060645", "createdAt": "2020-07-10T20:23:21Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/expansion-service/build.gradle", "diffHunk": "@@ -33,6 +33,9 @@ ext.summary = \"Expansion service serving several Java IOs\"\n dependencies {\n   compile project(\":sdks:java:expansion-service\")\n   compile project(\":sdks:java:io:kafka\")\n+  runtime project(\":sdks:java:io:jdbc\")\n   runtime library.java.kafka_clients\n+  // Include postgres so it can be used with external JDBC\n+  runtime library.java.postgres", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyMDQ3Mw=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2Mjg4OA==", "bodyText": "Let's test/confirm before adding it :)\nFor example this should work for a distributed Flink deployment as well not just a local instance running in a single JVM.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453062888", "createdAt": "2020-07-10T20:29:20Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/expansion-service/build.gradle", "diffHunk": "@@ -33,6 +33,9 @@ ext.summary = \"Expansion service serving several Java IOs\"\n dependencies {\n   compile project(\":sdks:java:expansion-service\")\n   compile project(\":sdks:java:io:kafka\")\n+  runtime project(\":sdks:java:io:jdbc\")\n   runtime library.java.kafka_clients\n+  // Include postgres so it can be used with external JDBC\n+  runtime library.java.postgres", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyMDQ3Mw=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NTEzNQ==", "bodyText": "They must be in the shadowJar though right? Otherwise the request to expand jdbc:read would fail immediately", "url": "https://github.com/apache/beam/pull/12145#discussion_r453085135", "createdAt": "2020-07-10T21:28:08Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/io/expansion-service/build.gradle", "diffHunk": "@@ -33,6 +33,9 @@ ext.summary = \"Expansion service serving several Java IOs\"\n dependencies {\n   compile project(\":sdks:java:expansion-service\")\n   compile project(\":sdks:java:io:kafka\")\n+  runtime project(\":sdks:java:io:jdbc\")\n   runtime library.java.kafka_clients\n+  // Include postgres so it can be used with external JDBC\n+  runtime library.java.postgres", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyMDQ3Mw=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MTEyMg==", "bodyText": "I changed it to compile dependencies just to be on the safe side. Strange thing is that the size of the io-expansion-service has the same growth in size as with the runtime dependencies - from 51,4Mb to 52,7Mb - maybe it was why it worked.\nI managed to start flink job server on docker and the io-expansion-server on non-default port and run the tests using the io-expansion-server. I'm not sure though whether it confirms it works or not.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453161122", "createdAt": "2020-07-11T06:03:30Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/expansion-service/build.gradle", "diffHunk": "@@ -33,6 +33,9 @@ ext.summary = \"Expansion service serving several Java IOs\"\n dependencies {\n   compile project(\":sdks:java:expansion-service\")\n   compile project(\":sdks:java:io:kafka\")\n+  runtime project(\":sdks:java:io:jdbc\")\n   runtime library.java.kafka_clients\n+  // Include postgres so it can be used with external JDBC\n+  runtime library.java.postgres", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyMDQ3Mw=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDcwNTAwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTowMToxNVrOGwCjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoyNDo1M1rOGwEqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyNjcwNA==", "bodyText": "How about renaming this to \"JdbcReadRowsRegistrar\". Current name make this sounds like a transform while in reality this is just a utility to register the existing transform with the expansion service.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453026704", "createdAt": "2020-07-10T19:01:15Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.ReadRows} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalRead implements ExternalTransformRegistrar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MTE5Ng==", "bodyText": "Good point, I'll change it.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453061196", "createdAt": "2020-07-10T20:24:53Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.ReadRows} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalRead implements ExternalTransformRegistrar {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyNjcwNA=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDcwODg1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTowMjo0NlrOGwCmKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoyNjoxOFrOGwEsrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyNzM3MQ==", "bodyText": "Probably \"beam:external:java:jdbc:read_rows:v1\" is more unique to this transform", "url": "https://github.com/apache/beam/pull/12145#discussion_r453027371", "createdAt": "2020-07-10T19:02:46Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.ReadRows} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalRead implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:read:v1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MTgwNg==", "bodyText": "Sure! Done.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453061806", "createdAt": "2020-07-10T20:26:18Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.ReadRows} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalRead implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:read:v1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyNzM3MQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDcxMzY0OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTowNDoyOFrOGwCpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoyNjozOVrOGwEtIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyODE1NA==", "bodyText": "JdbcWriteRegistrar", "url": "https://github.com/apache/beam/pull/12145#discussion_r453028154", "createdAt": "2020-07-10T19:04:28Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.Write} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalWrite implements ExternalTransformRegistrar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MTkyMA==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12145#discussion_r453061920", "createdAt": "2020-07-10T20:26:39Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.Write} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalWrite implements ExternalTransformRegistrar {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyODE1NA=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDcxNjU1OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTowNTo0MVrOGwCrSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoyOTozN1rOGwExXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyODY4Mw==", "bodyText": "How about calling this \"BeamRowPreparedStatementSetter\" and moving this out of external directory ? This sounds like a more generic utility.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453028683", "createdAt": "2020-07-10T19:05:41Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.Write} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalWrite implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:write:v1\";\n+\n+  @Override\n+  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n+    return ImmutableMap.of(URN, JdbcExternalWrite.Builder.class);\n+  }\n+\n+  /** Parameters class to expose the Write transform to an external SDK. */\n+  public static class WriteConfiguration extends Configuration {\n+    private String statement;\n+\n+    public void setStatement(String statement) {\n+      this.statement = statement;\n+    }\n+  }\n+\n+  public static class Builder\n+      implements ExternalTransformBuilder<WriteConfiguration, PCollection<Row>, PDone> {\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildExternal(WriteConfiguration configuration) {\n+      DataSourceConfiguration dataSourceConfiguration = configuration.getDataSourceConfiguration();\n+\n+      // TODO: BEAM-10396 use writeRows() when it's available\n+      return JdbcIO.<Row>write()\n+          .withDataSourceConfiguration(dataSourceConfiguration)\n+          .withStatement(configuration.statement)\n+          .withPreparedStatementSetter(new XlangPreparedStatementSetter());\n+    }\n+\n+    private static class XlangPreparedStatementSetter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MzAwNg==", "bodyText": "Good idea. Done.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453063006", "createdAt": "2020-07-10T20:29:37Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.Write} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalWrite implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:write:v1\";\n+\n+  @Override\n+  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n+    return ImmutableMap.of(URN, JdbcExternalWrite.Builder.class);\n+  }\n+\n+  /** Parameters class to expose the Write transform to an external SDK. */\n+  public static class WriteConfiguration extends Configuration {\n+    private String statement;\n+\n+    public void setStatement(String statement) {\n+      this.statement = statement;\n+    }\n+  }\n+\n+  public static class Builder\n+      implements ExternalTransformBuilder<WriteConfiguration, PCollection<Row>, PDone> {\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildExternal(WriteConfiguration configuration) {\n+      DataSourceConfiguration dataSourceConfiguration = configuration.getDataSourceConfiguration();\n+\n+      // TODO: BEAM-10396 use writeRows() when it's available\n+      return JdbcIO.<Row>write()\n+          .withDataSourceConfiguration(dataSourceConfiguration)\n+          .withStatement(configuration.statement)\n+          .withPreparedStatementSetter(new XlangPreparedStatementSetter());\n+    }\n+\n+    private static class XlangPreparedStatementSetter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyODY4Mw=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDczMzQwOnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxMjoxMVrOGwC2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNToxMTo1OVrOGwKg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMTQyOQ==", "bodyText": "Please add unit tests for these conversions.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453031429", "createdAt": "2020-07-10T19:12:11Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.Write} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalWrite implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:write:v1\";\n+\n+  @Override\n+  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n+    return ImmutableMap.of(URN, JdbcExternalWrite.Builder.class);\n+  }\n+\n+  /** Parameters class to expose the Write transform to an external SDK. */\n+  public static class WriteConfiguration extends Configuration {\n+    private String statement;\n+\n+    public void setStatement(String statement) {\n+      this.statement = statement;\n+    }\n+  }\n+\n+  public static class Builder\n+      implements ExternalTransformBuilder<WriteConfiguration, PCollection<Row>, PDone> {\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildExternal(WriteConfiguration configuration) {\n+      DataSourceConfiguration dataSourceConfiguration = configuration.getDataSourceConfiguration();\n+\n+      // TODO: BEAM-10396 use writeRows() when it's available\n+      return JdbcIO.<Row>write()\n+          .withDataSourceConfiguration(dataSourceConfiguration)\n+          .withStatement(configuration.statement)\n+          .withPreparedStatementSetter(new XlangPreparedStatementSetter());\n+    }\n+\n+    private static class XlangPreparedStatementSetter\n+        implements JdbcIO.PreparedStatementSetter<Row> {\n+      @Override\n+      public void setParameters(Row row, PreparedStatement statement) throws SQLException {\n+        List<Schema.Field> fieldTypes = row.getSchema().getFields();\n+        for (int i = 0; i < fieldTypes.size(); ++i) {\n+          Schema.TypeName typeName = fieldTypes.get(i).getType().getTypeName();\n+          switch (typeName) {\n+            case DATETIME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NzA3NQ==", "bodyText": "@chamikaramj  I'll do a separate PR for this on Monday. I don't get how should I deal with such PRs that depend on each other? I'm used to Gerrit where every commit is a separate PR rebased on the previous commit. But here it would be a duplicate PR with one more commit. Is that ok or there is a smarter way to publish a PR based on the changes that are not merged yet and reviewed in another PR?", "url": "https://github.com/apache/beam/pull/12145#discussion_r453157075", "createdAt": "2020-07-11T05:11:59Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalWrite.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.Write} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalWrite implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:write:v1\";\n+\n+  @Override\n+  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n+    return ImmutableMap.of(URN, JdbcExternalWrite.Builder.class);\n+  }\n+\n+  /** Parameters class to expose the Write transform to an external SDK. */\n+  public static class WriteConfiguration extends Configuration {\n+    private String statement;\n+\n+    public void setStatement(String statement) {\n+      this.statement = statement;\n+    }\n+  }\n+\n+  public static class Builder\n+      implements ExternalTransformBuilder<WriteConfiguration, PCollection<Row>, PDone> {\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildExternal(WriteConfiguration configuration) {\n+      DataSourceConfiguration dataSourceConfiguration = configuration.getDataSourceConfiguration();\n+\n+      // TODO: BEAM-10396 use writeRows() when it's available\n+      return JdbcIO.<Row>write()\n+          .withDataSourceConfiguration(dataSourceConfiguration)\n+          .withStatement(configuration.statement)\n+          .withPreparedStatementSetter(new XlangPreparedStatementSetter());\n+    }\n+\n+    private static class XlangPreparedStatementSetter\n+        implements JdbcIO.PreparedStatementSetter<Row> {\n+      @Override\n+      public void setParameters(Row row, PreparedStatement statement) throws SQLException {\n+        List<Schema.Field> fieldTypes = row.getSchema().getFields();\n+        for (int i = 0; i < fieldTypes.size(); ++i) {\n+          Schema.TypeName typeName = fieldTypes.get(i).getType().getTypeName();\n+          switch (typeName) {\n+            case DATETIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMTQyOQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDczNDgwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxMjo0N1rOGwC23w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozMTo0NFrOGwE0iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMTY0Nw==", "bodyText": "Please move this to io module directly. \"apache_beam/io/jdbc.py\"", "url": "https://github.com/apache/beam/pull/12145#discussion_r453031647", "createdAt": "2020-07-10T19:12:47Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MzgxNg==", "bodyText": "Ok, done", "url": "https://github.com/apache/beam/pull/12145#discussion_r453063816", "createdAt": "2020-07-10T20:31:44Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMTY0Nw=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDczNjkxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxMzoyNFrOGwC4Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozMjoyM1rOGwE1cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMTk1NA==", "bodyText": "Is support for Dataflow runner confirmed and tested ?", "url": "https://github.com/apache/beam/pull/12145#discussion_r453031954", "createdAt": "2020-07-10T19:13:24Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NDA0OA==", "bodyText": "Sorry, no. I didn't manage to run in on Dataflow. I'll remove this information.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453064048", "createdAt": "2020-07-10T20:32:23Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMTk1NA=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDc0MDYwOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxNDoyN1rOGwC6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozNDozNVrOGwE4lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMjUwNg==", "bodyText": "This should be Beam 2.24.0 for Jdbc.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453032506", "createdAt": "2020-07-10T19:14:27Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NDg1Mw==", "bodyText": "Right, done", "url": "https://github.com/apache/beam/pull/12145#discussion_r453064853", "createdAt": "2020-07-10T20:34:35Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMjUwNg=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDc0NDA4OnYy", "diffSide": "RIGHT", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxNTozOVrOGwC8Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1MjozNVrOGwFTug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMzAzNQ==", "bodyText": "How about adding unit tests for Builder classes for read and write ?", "url": "https://github.com/apache/beam/pull/12145#discussion_r453033035", "createdAt": "2020-07-10T19:15:39Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.ReadRows} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalRead implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:read:v1\";\n+\n+  @Override\n+  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n+    return ImmutableMap.of(URN, JdbcExternalRead.Builder.class);\n+  }\n+\n+  /** Parameters class to expose the Read transform to an external SDK. */\n+  public static class ReadConfiguration extends Configuration {\n+    private String query;\n+    private Integer fetchSize;\n+    private Boolean outputParallelization;\n+\n+    public void setOutputParallelization(Boolean outputParallelization) {\n+      this.outputParallelization = outputParallelization;\n+    }\n+\n+    public void setFetchSize(Integer fetchSize) {\n+      this.fetchSize = fetchSize;\n+    }\n+\n+    public void setQuery(String query) {\n+      this.query = query;\n+    }\n+  }\n+\n+  public static class Builder\n+      implements ExternalTransformBuilder<ReadConfiguration, PBegin, PCollection<Row>> {\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(ReadConfiguration configuration) {\n+      DataSourceConfiguration dataSourceConfiguration = configuration.getDataSourceConfiguration();\n+\n+      JdbcIO.ReadRows readRows =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2ODE4Mg==", "bodyText": "Ok, I'll do that on Monday. Could it be on separate PR? This one is already a big one.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453068182", "createdAt": "2020-07-10T20:43:17Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.ReadRows} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalRead implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:read:v1\";\n+\n+  @Override\n+  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n+    return ImmutableMap.of(URN, JdbcExternalRead.Builder.class);\n+  }\n+\n+  /** Parameters class to expose the Read transform to an external SDK. */\n+  public static class ReadConfiguration extends Configuration {\n+    private String query;\n+    private Integer fetchSize;\n+    private Boolean outputParallelization;\n+\n+    public void setOutputParallelization(Boolean outputParallelization) {\n+      this.outputParallelization = outputParallelization;\n+    }\n+\n+    public void setFetchSize(Integer fetchSize) {\n+      this.fetchSize = fetchSize;\n+    }\n+\n+    public void setQuery(String query) {\n+      this.query = query;\n+    }\n+  }\n+\n+  public static class Builder\n+      implements ExternalTransformBuilder<ReadConfiguration, PBegin, PCollection<Row>> {\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(ReadConfiguration configuration) {\n+      DataSourceConfiguration dataSourceConfiguration = configuration.getDataSourceConfiguration();\n+\n+      JdbcIO.ReadRows readRows =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMzAzNQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MTgwMg==", "bodyText": "A separate PR for this is fine. Thanks.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453071802", "createdAt": "2020-07-10T20:52:35Z", "author": {"login": "chamikaramj"}, "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/external/JdbcExternalRead.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc.external;\n+\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO;\n+import org.apache.beam.sdk.io.jdbc.JdbcIO.DataSourceConfiguration;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link JdbcIO.ReadRows} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class JdbcExternalRead implements ExternalTransformRegistrar {\n+\n+  public static final String URN = \"beam:external:java:jdbc:read:v1\";\n+\n+  @Override\n+  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n+    return ImmutableMap.of(URN, JdbcExternalRead.Builder.class);\n+  }\n+\n+  /** Parameters class to expose the Read transform to an external SDK. */\n+  public static class ReadConfiguration extends Configuration {\n+    private String query;\n+    private Integer fetchSize;\n+    private Boolean outputParallelization;\n+\n+    public void setOutputParallelization(Boolean outputParallelization) {\n+      this.outputParallelization = outputParallelization;\n+    }\n+\n+    public void setFetchSize(Integer fetchSize) {\n+      this.fetchSize = fetchSize;\n+    }\n+\n+    public void setQuery(String query) {\n+      this.query = query;\n+    }\n+  }\n+\n+  public static class Builder\n+      implements ExternalTransformBuilder<ReadConfiguration, PBegin, PCollection<Row>> {\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(ReadConfiguration configuration) {\n+      DataSourceConfiguration dataSourceConfiguration = configuration.getDataSourceConfiguration();\n+\n+      JdbcIO.ReadRows readRows =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzMzAzNQ=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDc1MDI1OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxNzo1M1rOGwDAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoxODoyMVrOGwEhDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNDA0Ng==", "bodyText": "Is this example being added in a separate PR ?", "url": "https://github.com/apache/beam/pull/12145#discussion_r453034046", "createdAt": "2020-07-10T19:17:53Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+\n+  This transform receives Rows defined as NamedTuple type and registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)\n+\n+  An example can be found in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1ODgyOA==", "bodyText": "No, the example leads to the integration test which is a quite straightforward example of using this transform.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453058828", "createdAt": "2020-07-10T20:18:21Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+\n+  This transform receives Rows defined as NamedTuple type and registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)\n+\n+  An example can be found in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNDA0Ng=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDc1MzczOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxOTowNFrOGwDCQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo0MjoxNVrOGwFEKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNDU2Mw==", "bodyText": "Let's add a simple code example here to showcase the usage of this transform.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453034563", "createdAt": "2020-07-10T19:19:04Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+\n+  This transform receives Rows defined as NamedTuple type and registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NzgxNw==", "bodyText": "Ok, done", "url": "https://github.com/apache/beam/pull/12145#discussion_r453067817", "createdAt": "2020-07-10T20:42:15Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+\n+  This transform receives Rows defined as NamedTuple type and registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNDU2Mw=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDc1NDk4OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/external/jdbc.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOToxOToyOVrOGwDDAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo0MjoyNFrOGwFEZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNDc1NA==", "bodyText": "Ditto regarding adding a simple code example here.", "url": "https://github.com/apache/beam/pull/12145#discussion_r453034754", "createdAt": "2020-07-10T19:19:29Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+\n+  This transform receives Rows defined as NamedTuple type and registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)\n+\n+  An example can be found in\n+  `apache_beam.examples.xlang_jdbcio_it_test`\n+  \"\"\"\n+\n+  URN = 'beam:external:java:jdbc:write:v1'\n+\n+  def __init__(\n+      self,\n+      driver_class_name,\n+      jdbc_url,\n+      username,\n+      password,\n+      statement,\n+      connection_properties=None,\n+      connection_init_sqls=None,\n+      expansion_service=None,\n+  ):\n+    \"\"\"\n+    Initializes a write operation to Jdbc.\n+\n+    :param driver_class_name: name of the jdbc driver class\n+    :param jdbc_url: full jdbc url to the database.\n+    :param username: database username\n+    :param password: database password\n+    :param statement: sql statement to be executed\n+    :param connection_properties: properties of the jdbc connection\n+                                  passed as string with format\n+                                  [propertyName=property;]*\n+    :param connection_init_sqls: required only for MySql and MariaDB.\n+                                 passed as list of strings\n+    :param expansion_service: The address (host:port) of the ExpansionService.\n+    \"\"\"\n+\n+    super(WriteToJdbc, self).__init__(\n+        self.URN,\n+        NamedTupleBasedPayloadBuilder(\n+            WriteToJdbcSchema(\n+                driver_class_name=driver_class_name,\n+                jdbc_url=jdbc_url,\n+                username=username,\n+                password=password,\n+                statement=statement,\n+                connection_properties=connection_properties,\n+                connection_init_sqls=connection_init_sqls,\n+            ),\n+        ),\n+        expansion_service or default_io_expansion_service(),\n+    )\n+\n+\n+ReadFromJdbcSchema = typing.NamedTuple(\n+    'ReadFromJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('query', unicode),\n+        ('fetch_size', typing.Optional[int]),\n+        ('output_parallelization', typing.Optional[bool]),\n+    ],\n+)\n+\n+\n+class ReadFromJdbc(ExternalTransform):\n+  \"\"\"A PTransform which reads Rows from the specified database via JDBC.\n+\n+  This transform delivers Rows defined as NamedTuple registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2Nzg3Ng==", "bodyText": "Done", "url": "https://github.com/apache/beam/pull/12145#discussion_r453067876", "createdAt": "2020-07-10T20:42:24Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/io/external/jdbc.py", "diffHunk": "@@ -0,0 +1,254 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable runners (for\n+  example, portable Flink and Spark) as well as Dataflow runner.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.22.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Jdbc transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import typing\n+\n+from past.builtins import unicode\n+\n+from apache_beam.transforms.external import BeamJarExpansionService\n+from apache_beam.transforms.external import ExternalTransform\n+from apache_beam.transforms.external import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToJdbc',\n+    'ReadFromJdbc',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService('sdks:java:io:expansion-service:shadowJar')\n+\n+\n+WriteToJdbcSchema = typing.NamedTuple(\n+    'WriteToJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('statement', unicode),\n+    ],\n+)\n+\n+\n+class WriteToJdbc(ExternalTransform):\n+  \"\"\"A PTransform which writes Rows to the specified database via JDBC.\n+\n+  This transform receives Rows defined as NamedTuple type and registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)\n+\n+  An example can be found in\n+  `apache_beam.examples.xlang_jdbcio_it_test`\n+  \"\"\"\n+\n+  URN = 'beam:external:java:jdbc:write:v1'\n+\n+  def __init__(\n+      self,\n+      driver_class_name,\n+      jdbc_url,\n+      username,\n+      password,\n+      statement,\n+      connection_properties=None,\n+      connection_init_sqls=None,\n+      expansion_service=None,\n+  ):\n+    \"\"\"\n+    Initializes a write operation to Jdbc.\n+\n+    :param driver_class_name: name of the jdbc driver class\n+    :param jdbc_url: full jdbc url to the database.\n+    :param username: database username\n+    :param password: database password\n+    :param statement: sql statement to be executed\n+    :param connection_properties: properties of the jdbc connection\n+                                  passed as string with format\n+                                  [propertyName=property;]*\n+    :param connection_init_sqls: required only for MySql and MariaDB.\n+                                 passed as list of strings\n+    :param expansion_service: The address (host:port) of the ExpansionService.\n+    \"\"\"\n+\n+    super(WriteToJdbc, self).__init__(\n+        self.URN,\n+        NamedTupleBasedPayloadBuilder(\n+            WriteToJdbcSchema(\n+                driver_class_name=driver_class_name,\n+                jdbc_url=jdbc_url,\n+                username=username,\n+                password=password,\n+                statement=statement,\n+                connection_properties=connection_properties,\n+                connection_init_sqls=connection_init_sqls,\n+            ),\n+        ),\n+        expansion_service or default_io_expansion_service(),\n+    )\n+\n+\n+ReadFromJdbcSchema = typing.NamedTuple(\n+    'ReadFromJdbcSchema',\n+    [\n+        ('driver_class_name', unicode),\n+        ('jdbc_url', unicode),\n+        ('username', unicode),\n+        ('password', unicode),\n+        ('connection_properties', typing.Optional[unicode]),\n+        ('connection_init_sqls', typing.Optional[typing.List[unicode]]),\n+        ('query', unicode),\n+        ('fetch_size', typing.Optional[int]),\n+        ('output_parallelization', typing.Optional[bool]),\n+    ],\n+)\n+\n+\n+class ReadFromJdbc(ExternalTransform):\n+  \"\"\"A PTransform which reads Rows from the specified database via JDBC.\n+\n+  This transform delivers Rows defined as NamedTuple registered in\n+  the coders registry, e.g.::\n+\n+    ExampleRow = typing.NamedTuple('ExampleRow',\n+                                   [('id', int), ('name', unicode)])\n+    coders.registry.register_coder(ExampleRow, coders.RowCoder)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNDc1NA=="}, "originalCommit": {"oid": "a9a07c2668a7ec6f3b9a915d56d9672dd4e50f55"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ5MzIyOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyMTozNlrOGzL7mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoxNjowMFrOGzcszw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNjA0Mg==", "bodyText": "Probably add to other post-commits as well ?", "url": "https://github.com/apache/beam/pull/12145#discussion_r456326042", "createdAt": "2020-07-17T09:21:36Z", "author": {"login": "chamikaramj"}, "path": "build.gradle", "diffHunk": "@@ -273,6 +273,7 @@ task python37PostCommit() {\n \n task python38PostCommit() {\n   dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaKafkaIOFlink\"\n+  dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaJdbcIO\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf95a03749d834d039f51832b8f760c7dc5ff68"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MjM1MA==", "bodyText": "I'm ok with that. The reason why I chose py38 only was that KafkaIO cross-language tests are run on py38 only.\nBut the tests can't be run on py2 due to testcontainers availability for python3 only.", "url": "https://github.com/apache/beam/pull/12145#discussion_r456452350", "createdAt": "2020-07-17T13:46:01Z", "author": {"login": "piotr-szuberski"}, "path": "build.gradle", "diffHunk": "@@ -273,6 +273,7 @@ task python37PostCommit() {\n \n task python38PostCommit() {\n   dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaKafkaIOFlink\"\n+  dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaJdbcIO\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNjA0Mg=="}, "originalCommit": {"oid": "ccf95a03749d834d039f51832b8f760c7dc5ff68"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5ODUzNQ==", "bodyText": "Some tests will run only in high-priority python versions and that's ok. @lazylynx  is working on making the workflow easy to configure in #12239.", "url": "https://github.com/apache/beam/pull/12145#discussion_r456598535", "createdAt": "2020-07-17T18:11:11Z", "author": {"login": "tvalentyn"}, "path": "build.gradle", "diffHunk": "@@ -273,6 +273,7 @@ task python37PostCommit() {\n \n task python38PostCommit() {\n   dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaKafkaIOFlink\"\n+  dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaJdbcIO\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNjA0Mg=="}, "originalCommit": {"oid": "ccf95a03749d834d039f51832b8f760c7dc5ff68"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDc4Mw==", "bodyText": "@tvalentyn should I remove this from other python versions then?", "url": "https://github.com/apache/beam/pull/12145#discussion_r456600783", "createdAt": "2020-07-17T18:16:00Z", "author": {"login": "piotr-szuberski"}, "path": "build.gradle", "diffHunk": "@@ -273,6 +273,7 @@ task python37PostCommit() {\n \n task python38PostCommit() {\n   dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaKafkaIOFlink\"\n+  dependsOn \":sdks:python:test-suites:portable:py38:crossLanguagePythonJavaJdbcIO\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNjA0Mg=="}, "originalCommit": {"oid": "ccf95a03749d834d039f51832b8f760c7dc5ff68"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjUwNjQzOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/io/jdbc.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyNToyNFrOGzMDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0Nzo1NFrOGzTtjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyODA4Mg==", "bodyText": "Let's mark new transforms here as experimental.", "url": "https://github.com/apache/beam/pull/12145#discussion_r456328082", "createdAt": "2020-07-17T09:25:24Z", "author": {"login": "chamikaramj"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -0,0 +1,272 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable\n+  Flink and Spark runners.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.24.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf95a03749d834d039f51832b8f760c7dc5ff68"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MzUxNw==", "bodyText": "I added Experimental; no backwards compatibility guarantees. at the end of the docstrings.", "url": "https://github.com/apache/beam/pull/12145#discussion_r456453517", "createdAt": "2020-07-17T13:47:54Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/python/apache_beam/io/jdbc.py", "diffHunk": "@@ -0,0 +1,272 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Jdbc in Python pipelines.\n+\n+  These transforms are currently supported by Beam portable\n+  Flink and Spark runners.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Jdbc transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Jdbc\n+  transforms. This option is only available for Beam 2.24.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Jdbc transforms use the\n+  'beam-sdks-java-io-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyODA4Mg=="}, "originalCommit": {"oid": "ccf95a03749d834d039f51832b8f760c7dc5ff68"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3422, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}