{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNjk5NTEz", "number": 11568, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToyODozNVrOD329aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToyODozNVrOD329aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODk4NzI5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToyODozNVrOGOWsmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTo0NjoyN1rOGOh4ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNTExNQ==", "bodyText": "I believe you're missing a save_main_session=False here, otherwise it won't run successfully with the pytest-xdist plugin (pickle error). You can test it on your machine with tox -e py37-cloud.", "url": "https://github.com/apache/beam/pull/11568#discussion_r417705115", "createdAt": "2020-04-30T01:28:35Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging_test.py", "diffHunk": "@@ -0,0 +1,109 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Unit test for the streaming wordcount example with debug.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import mock\n+\n+import apache_beam as beam\n+from apache_beam.examples import streaming_wordcount_debugging\n+from apache_beam.testing.test_stream import TestStream\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+\n+# Protect against environments where the PubSub library is not available.\n+# pylint: disable=wrong-import-order, wrong-import-position\n+try:\n+  from google.cloud import pubsub\n+except ImportError:\n+  pubsub = None\n+# pylint: enable=wrong-import-order, wrong-import-position\n+\n+\n+class StreamingWordcountDebugging(unittest.TestCase):\n+  @unittest.skipIf(pubsub is None, 'GCP dependencies are not installed')\n+  @mock.patch('apache_beam.io.ReadFromPubSub')\n+  @mock.patch('apache_beam.io.WriteToPubSub')\n+  def test_streaming_wordcount_debugging(self, *unused_mocks):\n+    def FakeReadFromPubSub(topic=None, subscription=None, values=None):\n+      expected_topic = topic\n+      expected_subscription = subscription\n+\n+      def _inner(topic=None, subscription=None):\n+        assert topic == expected_topic\n+        assert subscription == expected_subscription\n+        return TestStream().add_elements(values)\n+\n+      return _inner\n+\n+    class AssertTransform(beam.PTransform):\n+      def __init__(self, matcher):\n+        self.matcher = matcher\n+\n+      def expand(self, pcoll):\n+        assert_that(pcoll, self.matcher)\n+\n+    def FakeWriteToPubSub(topic=None, values=None):\n+      expected_topic = topic\n+\n+      def _inner(topic=None, subscription=None):\n+        assert topic == expected_topic\n+        return AssertTransform(equal_to(values))\n+\n+      return _inner\n+\n+    input_topic = 'projects/fake-beam-test-project/topic/intopic'\n+    input_values = [\n+        '150', '151', '152', '153', '154', '210', '211', '212', '213', '214'\n+    ]\n+    output_topic = 'projects/fake-beam-test-project/topic/outtopic'\n+    output_values = [\n+        '150: 1',\n+        '151: 1',\n+        '152: 1',\n+        '153: 1',\n+        '154: 1',\n+        '210: 1',\n+        '211: 1',\n+        '212: 1',\n+        '213: 1',\n+        '214: 1'\n+    ]\n+    beam.io.ReadFromPubSub = (\n+        FakeReadFromPubSub(\n+            topic=input_topic,\n+            values=list(x.encode('utf-8') for x in input_values)))\n+    beam.io.WriteToPubSub = (\n+        FakeWriteToPubSub(\n+            topic=output_topic,\n+            values=list(x.encode('utf-8') for x in output_values)))\n+    streaming_wordcount_debugging.run([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf0396447a301b04f31ba095631268713294a0d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg4ODM3OQ==", "bodyText": "Yes, I missed that param. Fixed.", "url": "https://github.com/apache/beam/pull/11568#discussion_r417888379", "createdAt": "2020-04-30T09:46:27Z", "author": {"login": "Tesio"}, "path": "sdks/python/apache_beam/examples/streaming_wordcount_debugging_test.py", "diffHunk": "@@ -0,0 +1,109 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Unit test for the streaming wordcount example with debug.\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import mock\n+\n+import apache_beam as beam\n+from apache_beam.examples import streaming_wordcount_debugging\n+from apache_beam.testing.test_stream import TestStream\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+\n+# Protect against environments where the PubSub library is not available.\n+# pylint: disable=wrong-import-order, wrong-import-position\n+try:\n+  from google.cloud import pubsub\n+except ImportError:\n+  pubsub = None\n+# pylint: enable=wrong-import-order, wrong-import-position\n+\n+\n+class StreamingWordcountDebugging(unittest.TestCase):\n+  @unittest.skipIf(pubsub is None, 'GCP dependencies are not installed')\n+  @mock.patch('apache_beam.io.ReadFromPubSub')\n+  @mock.patch('apache_beam.io.WriteToPubSub')\n+  def test_streaming_wordcount_debugging(self, *unused_mocks):\n+    def FakeReadFromPubSub(topic=None, subscription=None, values=None):\n+      expected_topic = topic\n+      expected_subscription = subscription\n+\n+      def _inner(topic=None, subscription=None):\n+        assert topic == expected_topic\n+        assert subscription == expected_subscription\n+        return TestStream().add_elements(values)\n+\n+      return _inner\n+\n+    class AssertTransform(beam.PTransform):\n+      def __init__(self, matcher):\n+        self.matcher = matcher\n+\n+      def expand(self, pcoll):\n+        assert_that(pcoll, self.matcher)\n+\n+    def FakeWriteToPubSub(topic=None, values=None):\n+      expected_topic = topic\n+\n+      def _inner(topic=None, subscription=None):\n+        assert topic == expected_topic\n+        return AssertTransform(equal_to(values))\n+\n+      return _inner\n+\n+    input_topic = 'projects/fake-beam-test-project/topic/intopic'\n+    input_values = [\n+        '150', '151', '152', '153', '154', '210', '211', '212', '213', '214'\n+    ]\n+    output_topic = 'projects/fake-beam-test-project/topic/outtopic'\n+    output_values = [\n+        '150: 1',\n+        '151: 1',\n+        '152: 1',\n+        '153: 1',\n+        '154: 1',\n+        '210: 1',\n+        '211: 1',\n+        '212: 1',\n+        '213: 1',\n+        '214: 1'\n+    ]\n+    beam.io.ReadFromPubSub = (\n+        FakeReadFromPubSub(\n+            topic=input_topic,\n+            values=list(x.encode('utf-8') for x in input_values)))\n+    beam.io.WriteToPubSub = (\n+        FakeWriteToPubSub(\n+            topic=output_topic,\n+            values=list(x.encode('utf-8') for x in output_values)))\n+    streaming_wordcount_debugging.run([", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNTExNQ=="}, "originalCommit": {"oid": "dbf0396447a301b04f31ba095631268713294a0d"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1207, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}