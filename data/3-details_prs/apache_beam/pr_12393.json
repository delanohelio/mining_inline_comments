{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTA3MTU0", "number": 12393, "title": "Support creation of empty PCollection in beam CreateList", "bodyText": "This PR allow to pass an empty list to the beam.CreateList function.\nPlease merge #12392 before this.\n\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n---\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-07-28T16:03:48Z", "url": "https://github.com/apache/beam/pull/12393", "merged": true, "mergeCommit": {"oid": "da49b24ee3c5dc08e1435100691fd53d9c40bd32"}, "closed": true, "closedAt": "2020-07-29T20:42:31Z", "author": {"login": "simonepri"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5Y5oRABqjM1OTUxNjM2MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5xKHpAFqTQ1Nzg3NzE0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e4f95819998908dab9d651350b7d232e5956e1c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0e4f95819998908dab9d651350b7d232e5956e1c", "committedDate": "2020-07-28T16:01:42Z", "message": "Add tests for CreateList with an empty input list"}, "afterCommit": {"oid": "c230c28318621741c577e36de8acc9dc9c9ed4ee", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c230c28318621741c577e36de8acc9dc9c9ed4ee", "committedDate": "2020-07-28T16:20:14Z", "message": "Support creation of empty PCollection in beam CreateList"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c230c28318621741c577e36de8acc9dc9c9ed4ee", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c230c28318621741c577e36de8acc9dc9c9ed4ee", "committedDate": "2020-07-28T16:20:14Z", "message": "Support creation of empty PCollection in beam CreateList"}, "afterCommit": {"oid": "b0c3cf085ad0e6ad5dbf7b17d51925fcf7be526a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b0c3cf085ad0e6ad5dbf7b17d51925fcf7be526a", "committedDate": "2020-07-28T21:40:39Z", "message": "Support creation of empty PCollection in beam CreateList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c92e57b694112eb176ebf78ba1adefdb537d8e15", "committedDate": "2020-07-28T21:42:40Z", "message": "Support creation of empty PCollection in beam CreateList"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0c3cf085ad0e6ad5dbf7b17d51925fcf7be526a", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/b0c3cf085ad0e6ad5dbf7b17d51925fcf7be526a", "committedDate": "2020-07-28T21:40:39Z", "message": "Support creation of empty PCollection in beam CreateList"}, "afterCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/c92e57b694112eb176ebf78ba1adefdb537d8e15", "committedDate": "2020-07-28T21:42:40Z", "message": "Support creation of empty PCollection in beam CreateList"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTAxMzg2", "url": "https://github.com/apache/beam/pull/12393#pullrequestreview-457101386", "createdAt": "2020-07-28T23:41:07Z", "commit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzo0MTowN1rOG4jenQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowMjo1NlrOG4j5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDcxNw==", "bodyText": "Optional, but how about this wording?:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // array. Differently from Create this supports the creation of an empty\n          \n          \n            \n            // array. Unlike Create this supports the creation of an empty", "url": "https://github.com/apache/beam/pull/12393#discussion_r461954717", "createdAt": "2020-07-28T23:41:07Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Differently from Create this supports the creation of an empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NTM4Ng==", "bodyText": "It seems better to have the error check below happen before this loop (unless you have a specific reason for putting the loop first).", "url": "https://github.com/apache/beam/pull/12393#discussion_r461955386", "createdAt": "2020-07-28T23:43:17Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Differently from Create this supports the creation of an empty\n+// PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n+\tvar ret []interface{}\n+\tfor i := 0; i < val.Len(); i++ {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MTU1MA==", "bodyText": "Same suggestion as above:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // array. The values must be of the same type. Differently from TryCreate this\n          \n          \n            \n            // array. The values must be of the same type. Unlike TryCreate this", "url": "https://github.com/apache/beam/pull/12393#discussion_r461961550", "createdAt": "2020-07-29T00:02:56Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Differently from Create this supports the creation of an empty\n+// PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n+\tvar ret []interface{}\n+\tfor i := 0; i < val.Len(); i++ {\n+\t\tret = append(ret, val.Index(i).Interface())\n+\t}\n \tif val.Kind() != reflect.Slice && val.Kind() != reflect.Array {\n \t\tpanic(fmt.Sprintf(\"Input %v must be a slice or array\", list))\n \t}\n-\tfor i := 0; i < val.Len(); i++ {\n-\t\tret = append(ret, val.Index(i).Interface())\n+\tif val.Len() == 0 {\n+\t\tt := reflect.TypeOf(list).Elem()\n+\t\treturn Must(TryCreateList(s, t, ret))\n \t}\n-\treturn Must(TryCreate(s, ret...))\n+\tt := reflect.ValueOf(ret[0]).Type()\n+\treturn Must(TryCreateList(s, t, ret))\n }\n \n func addCreateCtx(err error, s Scope) error {\n \treturn errors.WithContextf(err, \"inserting Create in scope %s\", s)\n }\n \n-// TryCreate inserts a fixed set of values into the pipeline. The values must\n-// be of the same type.\n+// TryCreate inserts a fixed non-empty set of values into the pipeline. The\n+// values must be of the same type.\n func TryCreate(s Scope, values ...interface{}) (PCollection, error) {\n \tif len(values) == 0 {\n \t\treturn PCollection{}, addCreateCtx(errors.New(\"create has no values\"), s)\n \t}\n \n \tt := reflect.ValueOf(values[0]).Type()\n+\treturn TryCreateList(s, t, values)\n+}\n+\n+// TryCreateList inserts a fixed set of values into the pipeline from a slice or\n+// array. The values must be of the same type. Differently from TryCreate this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c92e57b694112eb176ebf78ba1adefdb537d8e15"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9848fe20fb394bcf1f7465562db6ff0ae52183", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/5f9848fe20fb394bcf1f7465562db6ff0ae52183", "committedDate": "2020-07-29T06:45:41Z", "message": "Update docstrings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e651d804e44ec9d02a251b0054a28345ce5677b", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/1e651d804e44ec9d02a251b0054a28345ce5677b", "committedDate": "2020-07-29T06:46:16Z", "message": "Refactor CreateList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57133f8db8bbfd96c02beffb3cb7e907ac8c4697", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/57133f8db8bbfd96c02beffb3cb7e907ac8c4697", "committedDate": "2020-07-29T06:56:23Z", "message": "Merge branch 'master' into beam-go-create-empty-pcollection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjgxMDA4", "url": "https://github.com/apache/beam/pull/12393#pullrequestreview-457681008", "createdAt": "2020-07-29T16:16:38Z", "commit": {"oid": "57133f8db8bbfd96c02beffb3cb7e907ac8c4697"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxNjozOVrOG5ABVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxNjozOVrOG5ABVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMjM1Nw==", "bodyText": "TryCreateList and CreateList should only differ in returning an error, and not force different parameters.\nThat said, for convenience it's totally reasonable for an unexported tryCreateList to have this signature for reuse as you've done, and have the exported TryCreateList infer from the raw empty list type.", "url": "https://github.com/apache/beam/pull/12393#discussion_r462422357", "createdAt": "2020-07-29T16:16:39Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/create.go", "diffHunk": "@@ -34,31 +34,44 @@ func Create(s Scope, values ...interface{}) PCollection {\n }\n \n // CreateList inserts a fixed set of values into the pipeline from a slice or\n-// array. It is a convenience wrapper over Create.\n+// array. Unlike Create this supports the creation of an empty PCollection.\n func CreateList(s Scope, list interface{}) PCollection {\n-\tvar ret []interface{}\n \tval := reflect.ValueOf(list)\n \tif val.Kind() != reflect.Slice && val.Kind() != reflect.Array {\n \t\tpanic(fmt.Sprintf(\"Input %v must be a slice or array\", list))\n \t}\n+\tvar ret []interface{}\n \tfor i := 0; i < val.Len(); i++ {\n \t\tret = append(ret, val.Index(i).Interface())\n \t}\n-\treturn Must(TryCreate(s, ret...))\n+\tvar t reflect.Type\n+\tif len(ret) == 0 {\n+\t\tt = reflect.TypeOf(list).Elem()\n+\t} else {\n+\t\tt = reflect.ValueOf(ret[0]).Type()\n+\t}\n+\treturn Must(TryCreateList(s, ret, t))\n }\n \n func addCreateCtx(err error, s Scope) error {\n \treturn errors.WithContextf(err, \"inserting Create in scope %s\", s)\n }\n \n-// TryCreate inserts a fixed set of values into the pipeline. The values must\n-// be of the same type.\n+// TryCreate inserts a fixed non-empty set of values into the pipeline. The\n+// values must be of the same type.\n func TryCreate(s Scope, values ...interface{}) (PCollection, error) {\n \tif len(values) == 0 {\n \t\treturn PCollection{}, addCreateCtx(errors.New(\"create has no values\"), s)\n \t}\n \n \tt := reflect.ValueOf(values[0]).Type()\n+\treturn TryCreateList(s, values, t)\n+}\n+\n+// TryCreateList inserts a fixed set of values into the pipeline from a slice or\n+// array. The values must be of the same type. Unlike TryCreate this supports\n+// the creation of an empty PCollection.\n+func TryCreateList(s Scope, values []interface{}, t reflect.Type) (PCollection, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57133f8db8bbfd96c02beffb3cb7e907ac8c4697"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07394e44fbe57ae730d5c6c77606f9cd9465749c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/07394e44fbe57ae730d5c6c77606f9cd9465749c", "committedDate": "2020-07-29T16:45:02Z", "message": "Refactor CreateList and TryCreateList"}, "afterCommit": {"oid": "f57dff397e5ea5ab1c1f79f4d9cd2aee96922b63", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f57dff397e5ea5ab1c1f79f4d9cd2aee96922b63", "committedDate": "2020-07-29T16:54:29Z", "message": "Refactor CreateList"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f57dff397e5ea5ab1c1f79f4d9cd2aee96922b63", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f57dff397e5ea5ab1c1f79f4d9cd2aee96922b63", "committedDate": "2020-07-29T16:54:29Z", "message": "Refactor CreateList"}, "afterCommit": {"oid": "58d6bf689fb8105f115d931527c7ea7502c1a0c0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/58d6bf689fb8105f115d931527c7ea7502c1a0c0", "committedDate": "2020-07-29T17:02:01Z", "message": "Refactor CreateList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631bbb8bb018f10d0594b151647e9b59ac314a5c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/631bbb8bb018f10d0594b151647e9b59ac314a5c", "committedDate": "2020-07-29T17:04:18Z", "message": "Refactor CreateList"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58d6bf689fb8105f115d931527c7ea7502c1a0c0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/58d6bf689fb8105f115d931527c7ea7502c1a0c0", "committedDate": "2020-07-29T17:02:01Z", "message": "Refactor CreateList"}, "afterCommit": {"oid": "631bbb8bb018f10d0594b151647e9b59ac314a5c", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/631bbb8bb018f10d0594b151647e9b59ac314a5c", "committedDate": "2020-07-29T17:04:18Z", "message": "Refactor CreateList"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzIyMDU2", "url": "https://github.com/apache/beam/pull/12393#pullrequestreview-457722056", "createdAt": "2020-07-29T17:08:12Z", "commit": {"oid": "631bbb8bb018f10d0594b151647e9b59ac314a5c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODc3MTQ0", "url": "https://github.com/apache/beam/pull/12393#pullrequestreview-457877144", "createdAt": "2020-07-29T20:36:10Z", "commit": {"oid": "631bbb8bb018f10d0594b151647e9b59ac314a5c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3977, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}