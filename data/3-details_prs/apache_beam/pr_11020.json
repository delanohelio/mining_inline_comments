{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjc1MzAw", "number": 11020, "title": "[BEAM-7926] Update Data Visualization", "bodyText": "Added include_window_info and visualize_data as **kwargs passed into\nshow.\nUpdated javascripts to make the data visualization smooth and\nresilient to DOM changes. Now datatable is loaded dynamically without\nflickering nor changing of user's page/search state; javascripts also\nwork when refreshing the browser.\nResolved the jQuery+Datatable loading issue by forcing chained\nloading. Any customized javascripts relying on jQuery should only use\nwindow.jquery341. Always carry out a check for window.jquery341.\nRun javascripts in the last onload of the jQuery loading chain if\nwindow.jquery341 is not available.\nAll HTML imports are chained at onload of webcomponents (if HTML import\nis not supported) or plainly imported (if HTML import supported) in a\nsingle place in document.head. This makes HTML import resilient to\nDOM changes caused by normal notebook usages.\nUpdated some logging statements.\nAdded show_graph API to render DAG of a pipeline. pipeline.run\ndoes not render DAG now.\n\nChange-Id: Id2ca548860fb2d30e1557a35e7b14d2e61b5f1a4\nPlease add a meaningful description for your change here\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-03T00:05:03Z", "url": "https://github.com/apache/beam/pull/11020", "merged": true, "mergeCommit": {"oid": "83083e48d0616381f06c90ab500bab3096360c1b"}, "closed": true, "closedAt": "2020-03-09T21:51:05Z", "author": {"login": "KevinGG"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ3ClSABqjMwOTAxODA3NzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLFWtpgBqjMxMDY1OTk5Njg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d68deea92d86d5f96d49e4566756cd4453ace9e2", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/d68deea92d86d5f96d49e4566756cd4453ace9e2", "committedDate": "2020-03-02T23:57:10Z", "message": "[BEAM-7926] Update Data Visualization\n\n1. Added include_window_info and visualize_data as **kwargs passed into\n   `show`.\n2. Updated javascripts to make the data visualization smooth and\n   resilient to DOM changes. Now datatable is loaded dynamically without\n   flickering nor changing of user's page/search state; javascripts also\n   work when refreshing the browser.\n3. Resolved the jQuery+Datatable loading issue by forcing chained\n   loading. Any customized javascripts relying on jQuery should only use\n   `window.jquery341`. Always carry out a check for `window.jquery341`.\n   Run javascripts in the last onload of the jQuery loading chain if\n   `window.jquery341` is not available.\n4. All HTML imports are chained at onload of webcomponents (if HTML import\n   is not supported) or plainly imported (if HTML import supported) in a\n   single place in document.head. This makes HTML import resilient to\n   DOM changes caused by normal notebook usages.\n5. Updated some logging statements.\n6. Added `show_graph` API to render DAG of a pipeline. `pipeline.run`\n   does not render DAG now.\n\nChange-Id: Id2ca548860fb2d30e1557a35e7b14d2e61b5f1a4"}, "afterCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/4c0d28f273f23031abc968f7ca3472440b0d325f", "committedDate": "2020-03-03T00:18:48Z", "message": "[BEAM-7926] Update Data Visualization\n\n1. Added include_window_info and visualize_data as **kwargs passed into\n   `show`.\n2. Updated javascripts to make the data visualization smooth and\n   resilient to DOM changes. Now datatable is loaded dynamically without\n   flickering nor changing of user's page/search state; javascripts also\n   work when refreshing the browser.\n3. Resolved the jQuery+Datatable loading issue by forcing chained\n   loading. Any customized javascripts relying on jQuery should only use\n   `window.jquery341`. Always carry out a check for `window.jquery341`.\n   Run javascripts in the last onload of the jQuery loading chain if\n   `window.jquery341` is not available.\n4. All HTML imports are chained at onload of webcomponents (if HTML import\n   is not supported) or plainly imported (if HTML import supported) in a\n   single place in document.head. This makes HTML import resilient to\n   DOM changes caused by normal notebook usages.\n5. Updated some logging statements.\n6. Added `show_graph` API to render DAG of a pipeline. `pipeline.run`\n   does not render DAG now.\n\nChange-Id: Id2ca548860fb2d30e1557a35e7b14d2e61b5f1a4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjcyODI0", "url": "https://github.com/apache/beam/pull/11020#pullrequestreview-368272824", "createdAt": "2020-03-03T19:46:10Z", "commit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NjoxMFrOFxUCbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDowMDowMFrOFxUf3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjg0NA==", "bodyText": "Why this one does not have the catch statement?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387252844", "createdAt": "2020-03-03T19:46:10Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");\n+              }}\"\"\"\n+_OVERVIEW_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-overview id=\"{display_id}\"></facets-overview>\n             <script>\n               document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mjk0MA==", "bodyText": "Could we wait for document onLoad?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387252940", "createdAt": "2020-03-03T19:46:22Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -52,42 +56,89 @@\n except ImportError:\n   _pcoll_visualization_ready = False\n \n+_LOGGER = logging.getLogger(__name__)\n+\n # 1-d types that need additional normalization to be compatible with DataFrame.\n _one_dimension_types = (int, float, str, bool, list, tuple)\n \n+_CSS = \"\"\"\n+            <style>\n+            .p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            .p-Widget.jp-RenderedJavaScript.jp-mod-trusted.jp-OutputArea-output:empty {{\n+              padding: 0;\n+              border: 0;\n+            }}\n+            </style>\"\"\"\n _DIVE_SCRIPT_TEMPLATE = \"\"\"\n-            document.querySelector(\"#{display_id}\").data = {jsonstr};\"\"\"\n-_DIVE_HTML_TEMPLATE = \"\"\"\n+            try {{\n+              document.querySelector(\"#{display_id}\").data = {jsonstr};\n+            }} catch (e) {{\n+              console.log(\"#{display_id} is not rendered yet.\");\n+            }}\"\"\"\n+_DIVE_HTML_TEMPLATE = _CSS + \"\"\"\n             <script src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.3.3/webcomponents-lite.js\"></script>\n             <link rel=\"import\" href=\"https://raw.githubusercontent.com/PAIR-code/facets/1.0.0/facets-dist/facets-jupyter.html\">\n             <facets-dive sprite-image-width=\"{sprite_size}\" sprite-image-height=\"{sprite_size}\" id=\"{display_id}\" height=\"600\"></facets-dive>\n             <script>\n               document.querySelector(\"#{display_id}\").data = {jsonstr};\n             </script>\"\"\"\n _OVERVIEW_SCRIPT_TEMPLATE = \"\"\"\n-              document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n-              \"\"\"\n-_OVERVIEW_HTML_TEMPLATE = \"\"\"\n+              try {{\n+                document.querySelector(\"#{display_id}\").protoInput = \"{protostr}\";\n+              }} catch (e) {{\n+                console.log(\"#{display_id} is not rendered yet.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Mzg5Mg==", "bodyText": "You can probably drop these comments. They are pretty obvious form variable names and use up to this point.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387253892", "createdAt": "2020-03-03T19:48:10Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -181,6 +247,12 @@ def __init__(self, pcoll):\n     self._overview_display_id = 'facets_overview_{}_{}'.format(\n         self._cache_key, id(self))\n     self._df_display_id = 'df_{}_{}'.format(self._cache_key, id(self))\n+    # Whether the visualization should include window info.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NDY2OQ==", "bodyText": "Why are we copying data?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387254669", "createdAt": "2020-03-03T19:49:32Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -215,20 +287,32 @@ def display_facets(self, updating_pv=None):\n     # Ensures that dive, overview and table render the same data because the\n     # materialized PCollection data might being updated continuously.\n     data = self._to_dataframe()\n+    # String-ify the dictionaries for display because elements of type dict\n+    # cannot be ordered.\n+    data = data.applymap(lambda x: str(x) if isinstance(x, dict) else x)\n     if updating_pv:\n-      self._display_dive(data, updating_pv._dive_display_id)\n-      self._display_overview(data, updating_pv._overview_display_id)\n-      self._display_dataframe(data, updating_pv._df_display_id)\n+      # Only updates when data is not empty. Otherwise, consider it a bad\n+      # iteration and noop since there is nothing to be updated.\n+      if data.empty:\n+        _LOGGER.debug('Skip a visualization update due to empty data.')\n+      else:\n+        self._display_dataframe(data.copy(deep=True), updating_pv)\n+        if self._display_facets:\n+          self._display_dive(data.copy(deep=True), updating_pv)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTcxNw==", "bodyText": "What is happening in here in the next few lines?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387255717", "createdAt": "2020-03-03T19:51:19Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -238,31 +322,57 @@ def _display_dive(self, data, update=None):\n       display(HTML(html))\n \n   def _display_overview(self, data, update=None):\n+    if (not data.empty and self._include_window_info and\n+        all(column in data.columns\n+            for column in ('event_time', 'windows', 'pane_info'))):\n+      data = data.drop(['event_time', 'windows', 'pane_info'], axis=1)\n+\n     gfsg = GenericFeatureStatisticsGenerator()\n     proto = gfsg.ProtoFromDataFrames([{'name': 'data', 'table': data}])\n     protostr = base64.b64encode(proto.SerializeToString()).decode('utf-8')\n     if update:\n       script = _OVERVIEW_SCRIPT_TEMPLATE.format(\n-          display_id=update, protostr=protostr)\n+          display_id=update._overview_display_id, protostr=protostr)\n       display_javascript(Javascript(script))\n     else:\n       html = _OVERVIEW_HTML_TEMPLATE.format(\n           display_id=self._overview_display_id, protostr=protostr)\n       display(HTML(html))\n \n   def _display_dataframe(self, data, update=None):\n-    if update:\n-      table_id = 'table_{}'.format(update)\n-      html = _DATAFRAME_PAGINATION_TEMPLATE.format(\n-          dataframe_html=data.to_html(notebook=True, table_id=table_id),\n-          table_id=table_id)\n-      update_display(HTML(html), display_id=update)\n+    table_id = 'table_{}'.format(\n+        update._df_display_id if update else self._df_display_id)\n+    columns = [{\n+        'title': ''\n+    }] + [{\n+        'title': str(column)\n+    } for column in data.columns]\n+    format_window_info_in_dataframe(data)\n+    rows = data.applymap(lambda x: str(x)).to_dict('split')['data']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjYwNA==", "bodyText": "is it possible to use strftime?\nhttps://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes", "url": "https://github.com/apache/beam/pull/11020#discussion_r387256604", "createdAt": "2020-03-03T19:53:03Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/display/pcoll_visualization.py", "diffHunk": "@@ -291,3 +402,81 @@ def _to_dataframe(self):\n \n   def _is_one_dimension_type(self, val):\n     return type(val) in _one_dimension_types\n+\n+\n+def format_window_info_in_dataframe(data):\n+  if 'event_time' in data.columns:\n+    data['event_time'] = data['event_time'].apply(event_time_formatter)\n+  if 'windows' in data.columns:\n+    data['windows'] = data['windows'].apply(windows_formatter)\n+  if 'pane_info' in data.columns:\n+    data['pane_info'] = data['pane_info'].apply(pane_info_formatter)\n+\n+\n+def event_time_formatter(event_time_us):\n+  options = ie.current_env().options\n+  to_tz = options.display_timezone\n+  try:\n+    return (\n+        datetime.datetime.utcfromtimestamp(event_time_us / 1000000).replace(\n+            tzinfo=tz.tzutc()).astimezone(to_tz).strftime(\n+                options.display_timestamp_format))\n+  except ValueError:\n+    if event_time_us < 0:\n+      return 'Min Timestamp'\n+    return 'Max Timestamp'\n+\n+\n+def windows_formatter(windows):\n+  result = []\n+  for w in windows:\n+    if isinstance(w, GlobalWindow):\n+      result.append(str(w))\n+    elif isinstance(w, IntervalWindow):\n+      # First get the duration in terms of hours, minutes, seconds, and\n+      # micros.\n+      duration = w.end.micros - w.start.micros\n+      duration_secs = duration // 1000000\n+      hours, remainder = divmod(duration_secs, 3600)\n+      minutes, seconds = divmod(remainder, 60)\n+      micros = (duration - duration_secs * 1000000) % 1000000\n+\n+      # Construct the duration string. Try and write the string in such a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Nzc4Mw==", "bodyText": "Where is the default defined?\nIf defined somewhere else, let's not repeat these in comments. It will require sync both places going forward.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387257783", "createdAt": "2020-03-03T19:55:19Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -86,10 +85,57 @@ def capture_duration(self, value):\n       # The next PCollection evaluation will capture fresh data from sources,\n       # and the data captured will be replayed until another eviction.\n     \"\"\"\n+    assert value.total_seconds() > 0, 'Duration must be a positive value.'\n     self.capture_control._capture_duration = value\n \n   # TODO(BEAM-8335): add capture_size options when they are supported.\n \n+  @property\n+  def display_timestamp_format(self):\n+    \"\"\"The format in which timestamps are displayed.\n+\n+    Default is '%Y-%m-%d %H:%M:%S.%f%z', e.g. 2020-02-01 15:05:06.000015-08:00.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODUzNg==", "bodyText": "import at top?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387258536", "createdAt": "2020-03-03T19:56:40Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -211,20 +280,27 @@ def show(*pcolls):\n         watched_pcollections.add(val)\n   for pcoll in pcolls:\n     if pcoll not in watched_pcollections:\n-      watch({re.sub(r'[\\[\\]\\(\\)]', '_', str(pcoll)): pcoll})\n+      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n+  import warnings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1ODkwMw==", "bodyText": "This will filter out all deprecation warnings. Not a good outcome, if we would like user to see deprecation warnings.", "url": "https://github.com/apache/beam/pull/11020#discussion_r387258903", "createdAt": "2020-03-03T19:57:16Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_beam.py", "diffHunk": "@@ -211,20 +280,27 @@ def show(*pcolls):\n         watched_pcollections.add(val)\n   for pcoll in pcolls:\n     if pcoll not in watched_pcollections:\n-      watch({re.sub(r'[\\[\\]\\(\\)]', '_', str(pcoll)): pcoll})\n+      watch({'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n+  import warnings\n+  warnings.filterwarnings('ignore', category=DeprecationWarning)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTMwMw==", "bodyText": "what is jquery341 ?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387259303", "createdAt": "2020-03-03T19:58:03Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1OTc1Mg==", "bodyText": "what does this do?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387259752", "createdAt": "2020-03-03T19:58:50Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -43,6 +43,55 @@\n \n _LOGGER = logging.getLogger(__name__)\n \n+# By `format(customized_script=xxx)`, the given `customized_script` is\n+# guaranteed to be executed within access to a jquery with datatable plugin\n+# configured which is useful so that any `customized_script` is resilient to\n+# browser refresh. Inside `customized_script`, use `$` as jQuery.\n+_JQUERY_WITH_DATATABLE_TEMPLATE = \"\"\"\n+        if (typeof window.jquery341 == 'undefined') {{\n+          var jqueryScript = document.createElement('script');\n+          jqueryScript.src = 'https://code.jquery.com/jquery-3.4.1.slim.min.js';\n+          jqueryScript.type = 'text/javascript';\n+          jqueryScript.onload = function() {{\n+            var datatableScript = document.createElement('script');\n+            datatableScript.src = 'https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js';\n+            datatableScript.type = 'text/javascript';\n+            datatableScript.onload = function() {{\n+              window.jquery341 = jQuery.noConflict(true);\n+              window.jquery341(document).ready(function($){{\n+                {customized_script}\n+              }});\n+            }}\n+            document.head.appendChild(datatableScript);\n+          }};\n+          document.head.appendChild(jqueryScript);\n+        }} else {{\n+          window.jquery341(document).ready(function($){{\n+            {customized_script}\n+          }});\n+        }}\"\"\"\n+\n+_HTML_IMPORT_TEMPLATE = \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2MDM4MA==", "bodyText": "Are we using timezone from pytz or tz from dateutil?", "url": "https://github.com/apache/beam/pull/11020#discussion_r387260380", "createdAt": "2020-03-03T20:00:00Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/runners/interactive/options/interactive_options.py", "diffHunk": "@@ -24,6 +24,8 @@\n \n from __future__ import absolute_import\n \n+from dateutil import tz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0d28f273f23031abc968f7ca3472440b0d325f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTI1NDY4", "url": "https://github.com/apache/beam/pull/11020#pullrequestreview-369125468", "createdAt": "2020-03-04T21:11:17Z", "commit": {"oid": "46082bbd3804ceedad6bbdec702a694853a11b1f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00fefef9f4e988225a38bd6b78797bec8c8c74a6", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/00fefef9f4e988225a38bd6b78797bec8c8c74a6", "committedDate": "2020-03-06T19:32:49Z", "message": "[BEAM-7926] Update Data Visualization\n\n1. Added include_window_info and visualize_data as **kwargs passed into\n   `show`.\n2. Updated javascripts to make the data visualization smooth and\n   resilient to DOM changes. Now datatable is loaded dynamically without\n   flickering nor changing of user's page/search state; javascripts also\n   work when refreshing the browser.\n3. Resolved the jQuery+Datatable loading issue by forcing chained\n   loading. Any customized javascripts relying on jQuery should only use\n   `window.jquery341`. Always carry out a check for `window.jquery341`.\n   Run javascripts in the last onload of the jQuery loading chain if\n   `window.jquery341` is not available.\n4. All HTML imports are chained at onload of webcomponents (if HTML import\n   is not supported) or plainly imported (if HTML import supported) in a\n   single place in document.head. This makes HTML import resilient to\n   DOM changes caused by normal notebook usages.\n5. Updated some logging statements.\n6. Added `show_graph` API to render DAG of a pipeline. `pipeline.run`\n   does not render DAG now.\n\nChange-Id: Id2ca548860fb2d30e1557a35e7b14d2e61b5f1a4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edaf72f94554f97e88b5c52f52b6a98aee12687", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/4edaf72f94554f97e88b5c52f52b6a98aee12687", "committedDate": "2020-03-06T19:32:55Z", "message": "Fix based on comments\n\nChange-Id: I04c744d880b57bb3f577cda15700050444b93c06"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0516fe05b558e4f552f18fbc0ca1e258be86c8e8", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/0516fe05b558e4f552f18fbc0ca1e258be86c8e8", "committedDate": "2020-03-06T19:32:55Z", "message": "Added comments and renamed jquery instance\n\nChange-Id: Iec0c6bb4990e373bcef3fe9f4670249b24f604cb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44cc0208897bdc9f2ec2d287d5eac77a2a919cf5", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/44cc0208897bdc9f2ec2d287d5eac77a2a919cf5", "committedDate": "2020-03-06T19:32:55Z", "message": "Removed JS console logging and added some minor fixes.\n\nChange-Id: I55ffd3c992c2627c12ada0de2e13b4cad32a7241"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9b2ae9fa2dd59391dbe499e3644b02f58b6bf8e", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/f9b2ae9fa2dd59391dbe499e3644b02f58b6bf8e", "committedDate": "2020-03-06T19:32:55Z", "message": "fix lint and tests\n\nChange-Id: Ib381a7081ae1100011d63715e1fefd4d9419bf3d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1f967eed16982ba7e339d87ed0b6b4b30d9c0a5", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a1f967eed16982ba7e339d87ed0b6b4b30d9c0a5", "committedDate": "2020-03-06T19:32:56Z", "message": "fix isort import orderings\n\nChange-Id: I7d04645aa65b6f79368c54c1e62c8c806b68e7a0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b4b511676d0bd76184078e4f02267fd53aef6c0", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/4b4b511676d0bd76184078e4f02267fd53aef6c0", "committedDate": "2020-03-05T18:13:36Z", "message": "fix isort import orderings\n\nChange-Id: I7d04645aa65b6f79368c54c1e62c8c806b68e7a0"}, "afterCommit": {"oid": "a1f967eed16982ba7e339d87ed0b6b4b30d9c0a5", "author": {"user": null}, "url": "https://github.com/apache/beam/commit/a1f967eed16982ba7e339d87ed0b6b4b30d9c0a5", "committedDate": "2020-03-06T19:32:56Z", "message": "fix isort import orderings\n\nChange-Id: I7d04645aa65b6f79368c54c1e62c8c806b68e7a0"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2956, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}