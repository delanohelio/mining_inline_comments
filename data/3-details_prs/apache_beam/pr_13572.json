{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTEwNDYx", "number": 13572, "title": "[BEAM-11482] Thrift support for KafkaTableProvider", "bodyText": "This is a follow-up for #13428 to add Thrift support in KafkaTableProvider, since we now have all the building blocks for a BeamKafkaThriftTable.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nDataflow\nFlink\nSamza\nSpark\nTwister2\n\n\n\n\nGo\n\n---\n\n---\n\n---\n\n\nJava\n\n\n\n\n\n\n\n\nPython\n\n\n\n---\n\n---\n\n\nXLang\n\n\n\n---\n\n---\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\nWhitespace\nTypescript\n\n\n\n\nNon-portable\n\n \n\n\n\n\n\n\nPortable\n---\n\n---\n---\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.\nGitHub Actions Tests Status (on master branch)\n\n\n\nSee CI.md for more information about GitHub Actions CI.", "createdAt": "2020-12-17T14:40:34Z", "url": "https://github.com/apache/beam/pull/13572", "merged": true, "mergeCommit": {"oid": "9de4ea4035787552f2f8421883a165dbf723802c"}, "closed": true, "closedAt": "2020-12-30T00:27:00Z", "author": {"login": "ccciudatu"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnErn4gBqjQxMjU0NjU2MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdp8zpngBqjQxNDk2MDQ1MTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2194572deb314905f4dc561579910814fb4872d", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/b2194572deb314905f4dc561579910814fb4872d", "committedDate": "2020-12-17T14:28:58Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "a42657c783e459f4c79fcac24c51c5dc86dca9f9", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/a42657c783e459f4c79fcac24c51c5dc86dca9f9", "committedDate": "2020-12-17T14:46:19Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a42657c783e459f4c79fcac24c51c5dc86dca9f9", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/a42657c783e459f4c79fcac24c51c5dc86dca9f9", "committedDate": "2020-12-17T14:46:19Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "73397c9b0f0e9766b6e6c3b191aa59c918cbd412", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/73397c9b0f0e9766b6e6c3b191aa59c918cbd412", "committedDate": "2020-12-17T14:54:08Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73397c9b0f0e9766b6e6c3b191aa59c918cbd412", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/73397c9b0f0e9766b6e6c3b191aa59c918cbd412", "committedDate": "2020-12-17T14:54:08Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "945fe14c57b3117579513fcc0cf71e2cc94a07df", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/945fe14c57b3117579513fcc0cf71e2cc94a07df", "committedDate": "2020-12-18T13:29:17Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "945fe14c57b3117579513fcc0cf71e2cc94a07df", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/945fe14c57b3117579513fcc0cf71e2cc94a07df", "committedDate": "2020-12-18T13:29:17Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "5eae86159d692c2db98fbfcd1f62939b2a53e702", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/5eae86159d692c2db98fbfcd1f62939b2a53e702", "committedDate": "2020-12-18T16:13:35Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5eae86159d692c2db98fbfcd1f62939b2a53e702", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/5eae86159d692c2db98fbfcd1f62939b2a53e702", "committedDate": "2020-12-18T16:13:35Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/a203a0969bcf450bf92a43d1ad7e16467f1131cd", "committedDate": "2020-12-18T16:32:40Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTQzNzg1", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-555943785", "createdAt": "2020-12-19T14:07:33Z", "commit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNDowNzozM1rOII7-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNDozNjozNFrOII8J8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0MjI3NA==", "bodyText": "It would be good to update the external table documentation (create-external-table.md) as well.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546242274", "createdAt": "2020-12-19T14:07:33Z", "author": {"login": "piotr-szuberski"}, "path": "CHANGES.md", "diffHunk": "@@ -66,6 +66,7 @@\n * Added Cloud Bigtable Provider extension to Beam SQL ([BEAM-11173](https://issues.apache.org/jira/browse/BEAM-11173), [BEAM-11373](https://issues.apache.org/jira/browse/BEAM-11373))\n * Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))\n * Added combiner packing pipeline optimization to Dataflow runner. ([BEAM-10641](https://issues.apache.org/jira/browse/BEAM-10641))\n+* Added support for thrift in KafkaTableProvider ([BEAM-11482](https://issues.apache.org/jira/browse/BEAM-11482))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0MzExNw==", "bodyText": "I may be wrong but I think that@NonNull annotations are quite redundant as it's the default for the checker and only @Nullable params are worth annotating. The same below.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546243117", "createdAt": "2020-12-19T14:16:22Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.beam.sdk.io.thrift.ThriftCoder;\n+import org.apache.beam.sdk.io.thrift.ThriftSchema;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n+public class BeamKafkaThriftTable<FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>>\n+    extends BeamKafkaTable {\n+  private final ThriftCoder<T> thriftCoder;\n+  private final TypeDescriptor<T> typeDescriptor;\n+\n+  public BeamKafkaThriftTable(\n+      @NonNull Schema requiredSchema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0MzM0OQ==", "bodyText": "Can't it be written without suppressing the nullness? Sometimes checker is awkward and requires some workarounds but I think it should be possible.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546243349", "createdAt": "2020-12-19T14:18:33Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.beam.sdk.io.thrift.ThriftCoder;\n+import org.apache.beam.sdk.io.thrift.ThriftSchema;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n+public class BeamKafkaThriftTable<FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>>\n+    extends BeamKafkaTable {\n+  private final ThriftCoder<T> thriftCoder;\n+  private final TypeDescriptor<T> typeDescriptor;\n+\n+  public BeamKafkaThriftTable(\n+      @NonNull Schema requiredSchema,\n+      @NonNull String bootstrapServers,\n+      @NonNull List<String> topics,\n+      @NonNull Class<T> thriftClass,\n+      @NonNull TProtocolFactory protocolFactory) {\n+    super(thriftSchema(thriftClass, requiredSchema), bootstrapServers, topics);\n+    typeDescriptor = TypeDescriptor.of(thriftClass);\n+    thriftCoder = ThriftCoder.of(thriftClass, protocolFactory);\n+  }\n+\n+  private static Schema thriftSchema(\n+      @NonNull Class<?> thriftClass, @NonNull Schema requiredSchema) {\n+    @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0MzQ1OA==", "bodyText": "As the rest of @NonNull when a param is not @Nullable we assume it can't be null", "url": "https://github.com/apache/beam/pull/13572#discussion_r546243458", "createdAt": "2020-12-19T14:19:52Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.beam.sdk.io.thrift.ThriftCoder;\n+import org.apache.beam.sdk.io.thrift.ThriftSchema;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n+public class BeamKafkaThriftTable<FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>>\n+    extends BeamKafkaTable {\n+  private final ThriftCoder<T> thriftCoder;\n+  private final TypeDescriptor<T> typeDescriptor;\n+\n+  public BeamKafkaThriftTable(\n+      @NonNull Schema requiredSchema,\n+      @NonNull String bootstrapServers,\n+      @NonNull List<String> topics,\n+      @NonNull Class<T> thriftClass,\n+      @NonNull TProtocolFactory protocolFactory) {\n+    super(thriftSchema(thriftClass, requiredSchema), bootstrapServers, topics);\n+    typeDescriptor = TypeDescriptor.of(thriftClass);\n+    thriftCoder = ThriftCoder.of(thriftClass, protocolFactory);\n+  }\n+\n+  private static Schema thriftSchema(\n+      @NonNull Class<?> thriftClass, @NonNull Schema requiredSchema) {\n+    @SuppressWarnings(\"nullness\")\n+    final @NonNull Schema thriftSchema =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0Mzc1OQ==", "bodyText": "I'd try to get rid of this nullness suppression. Usually if (var != null) {} else { throw NullPointerException(\"var was null\") is unfortunatelly needed to achieve that (that's my experience, maybe there is some cleaner way that I don't know about)", "url": "https://github.com/apache/beam/pull/13572#discussion_r546243759", "createdAt": "2020-12-19T14:23:11Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.beam.sdk.io.thrift.ThriftCoder;\n+import org.apache.beam.sdk.io.thrift.ThriftSchema;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n+public class BeamKafkaThriftTable<FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>>\n+    extends BeamKafkaTable {\n+  private final ThriftCoder<T> thriftCoder;\n+  private final TypeDescriptor<T> typeDescriptor;\n+\n+  public BeamKafkaThriftTable(\n+      @NonNull Schema requiredSchema,\n+      @NonNull String bootstrapServers,\n+      @NonNull List<String> topics,\n+      @NonNull Class<T> thriftClass,\n+      @NonNull TProtocolFactory protocolFactory) {\n+    super(thriftSchema(thriftClass, requiredSchema), bootstrapServers, topics);\n+    typeDescriptor = TypeDescriptor.of(thriftClass);\n+    thriftCoder = ThriftCoder.of(thriftClass, protocolFactory);\n+  }\n+\n+  private static Schema thriftSchema(\n+      @NonNull Class<?> thriftClass, @NonNull Schema requiredSchema) {\n+    @SuppressWarnings(\"nullness\")\n+    final @NonNull Schema thriftSchema =\n+        ThriftSchema.provider().schemaFor(TypeDescriptor.of(thriftClass));\n+    if (!requiredSchema.equivalent(thriftSchema)) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Given message schema: '%s'%n\"\n+                  + \"does not match schema inferred from thrift class.%n\"\n+                  + \"Thrift class: '%s'%n\"\n+                  + \"Inferred schema: '%s'\",\n+              requiredSchema, thriftClass.getName(), thriftSchema));\n+    }\n+    return thriftSchema;\n+  }\n+\n+  @Override\n+  protected PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> getPTransformForInput() {\n+    final @NonNull SchemaProvider schemaProvider = ThriftSchema.provider();\n+    return new PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>>() {\n+      @Override\n+      @SuppressWarnings(\"nullness\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0Mzg3NQ==", "bodyText": "Wouldn't this::decode be sufficient?", "url": "https://github.com/apache/beam/pull/13572#discussion_r546243875", "createdAt": "2020-12-19T14:24:26Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.beam.sdk.io.thrift.ThriftCoder;\n+import org.apache.beam.sdk.io.thrift.ThriftSchema;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n+public class BeamKafkaThriftTable<FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>>\n+    extends BeamKafkaTable {\n+  private final ThriftCoder<T> thriftCoder;\n+  private final TypeDescriptor<T> typeDescriptor;\n+\n+  public BeamKafkaThriftTable(\n+      @NonNull Schema requiredSchema,\n+      @NonNull String bootstrapServers,\n+      @NonNull List<String> topics,\n+      @NonNull Class<T> thriftClass,\n+      @NonNull TProtocolFactory protocolFactory) {\n+    super(thriftSchema(thriftClass, requiredSchema), bootstrapServers, topics);\n+    typeDescriptor = TypeDescriptor.of(thriftClass);\n+    thriftCoder = ThriftCoder.of(thriftClass, protocolFactory);\n+  }\n+\n+  private static Schema thriftSchema(\n+      @NonNull Class<?> thriftClass, @NonNull Schema requiredSchema) {\n+    @SuppressWarnings(\"nullness\")\n+    final @NonNull Schema thriftSchema =\n+        ThriftSchema.provider().schemaFor(TypeDescriptor.of(thriftClass));\n+    if (!requiredSchema.equivalent(thriftSchema)) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Given message schema: '%s'%n\"\n+                  + \"does not match schema inferred from thrift class.%n\"\n+                  + \"Thrift class: '%s'%n\"\n+                  + \"Inferred schema: '%s'\",\n+              requiredSchema, thriftClass.getName(), thriftSchema));\n+    }\n+    return thriftSchema;\n+  }\n+\n+  @Override\n+  protected PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> getPTransformForInput() {\n+    final @NonNull SchemaProvider schemaProvider = ThriftSchema.provider();\n+    return new PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>>() {\n+      @Override\n+      @SuppressWarnings(\"nullness\")\n+      public PCollection<Row> expand(PCollection<KV<byte[], byte[]>> input) {\n+        return input\n+            .apply(Values.create())\n+            .apply(MapElements.into(typeDescriptor).via(BeamKafkaThriftTable.this::decode))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0Mzk5Mg==", "bodyText": "Could you add some message to this exception?", "url": "https://github.com/apache/beam/pull/13572#discussion_r546243992", "createdAt": "2020-12-19T14:25:33Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.beam.sdk.io.thrift.ThriftCoder;\n+import org.apache.beam.sdk.io.thrift.ThriftSchema;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n+public class BeamKafkaThriftTable<FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>>\n+    extends BeamKafkaTable {\n+  private final ThriftCoder<T> thriftCoder;\n+  private final TypeDescriptor<T> typeDescriptor;\n+\n+  public BeamKafkaThriftTable(\n+      @NonNull Schema requiredSchema,\n+      @NonNull String bootstrapServers,\n+      @NonNull List<String> topics,\n+      @NonNull Class<T> thriftClass,\n+      @NonNull TProtocolFactory protocolFactory) {\n+    super(thriftSchema(thriftClass, requiredSchema), bootstrapServers, topics);\n+    typeDescriptor = TypeDescriptor.of(thriftClass);\n+    thriftCoder = ThriftCoder.of(thriftClass, protocolFactory);\n+  }\n+\n+  private static Schema thriftSchema(\n+      @NonNull Class<?> thriftClass, @NonNull Schema requiredSchema) {\n+    @SuppressWarnings(\"nullness\")\n+    final @NonNull Schema thriftSchema =\n+        ThriftSchema.provider().schemaFor(TypeDescriptor.of(thriftClass));\n+    if (!requiredSchema.equivalent(thriftSchema)) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Given message schema: '%s'%n\"\n+                  + \"does not match schema inferred from thrift class.%n\"\n+                  + \"Thrift class: '%s'%n\"\n+                  + \"Inferred schema: '%s'\",\n+              requiredSchema, thriftClass.getName(), thriftSchema));\n+    }\n+    return thriftSchema;\n+  }\n+\n+  @Override\n+  protected PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> getPTransformForInput() {\n+    final @NonNull SchemaProvider schemaProvider = ThriftSchema.provider();\n+    return new PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>>() {\n+      @Override\n+      @SuppressWarnings(\"nullness\")\n+      public PCollection<Row> expand(PCollection<KV<byte[], byte[]>> input) {\n+        return input\n+            .apply(Values.create())\n+            .apply(MapElements.into(typeDescriptor).via(BeamKafkaThriftTable.this::decode))\n+            .setSchema(\n+                schema,\n+                typeDescriptor,\n+                schemaProvider.toRowFunction(typeDescriptor),\n+                schemaProvider.fromRowFunction(typeDescriptor))\n+            .apply(Convert.toRows());\n+      }\n+    };\n+  }\n+\n+  private T decode(byte[] bytes) {\n+    try {\n+      return thriftCoder.decode(new ByteArrayInputStream(bytes));\n+    } catch (IOException e) {\n+      throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0NDI4OA==", "bodyText": "Please add some message to the exception", "url": "https://github.com/apache/beam/pull/13572#discussion_r546244288", "createdAt": "2020-12-19T14:28:07Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.beam.sdk.io.thrift.ThriftCoder;\n+import org.apache.beam.sdk.io.thrift.ThriftSchema;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.schemas.transforms.Convert;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.Values;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+\n+public class BeamKafkaThriftTable<FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>>\n+    extends BeamKafkaTable {\n+  private final ThriftCoder<T> thriftCoder;\n+  private final TypeDescriptor<T> typeDescriptor;\n+\n+  public BeamKafkaThriftTable(\n+      @NonNull Schema requiredSchema,\n+      @NonNull String bootstrapServers,\n+      @NonNull List<String> topics,\n+      @NonNull Class<T> thriftClass,\n+      @NonNull TProtocolFactory protocolFactory) {\n+    super(thriftSchema(thriftClass, requiredSchema), bootstrapServers, topics);\n+    typeDescriptor = TypeDescriptor.of(thriftClass);\n+    thriftCoder = ThriftCoder.of(thriftClass, protocolFactory);\n+  }\n+\n+  private static Schema thriftSchema(\n+      @NonNull Class<?> thriftClass, @NonNull Schema requiredSchema) {\n+    @SuppressWarnings(\"nullness\")\n+    final @NonNull Schema thriftSchema =\n+        ThriftSchema.provider().schemaFor(TypeDescriptor.of(thriftClass));\n+    if (!requiredSchema.equivalent(thriftSchema)) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Given message schema: '%s'%n\"\n+                  + \"does not match schema inferred from thrift class.%n\"\n+                  + \"Thrift class: '%s'%n\"\n+                  + \"Inferred schema: '%s'\",\n+              requiredSchema, thriftClass.getName(), thriftSchema));\n+    }\n+    return thriftSchema;\n+  }\n+\n+  @Override\n+  protected PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> getPTransformForInput() {\n+    final @NonNull SchemaProvider schemaProvider = ThriftSchema.provider();\n+    return new PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>>() {\n+      @Override\n+      @SuppressWarnings(\"nullness\")\n+      public PCollection<Row> expand(PCollection<KV<byte[], byte[]>> input) {\n+        return input\n+            .apply(Values.create())\n+            .apply(MapElements.into(typeDescriptor).via(BeamKafkaThriftTable.this::decode))\n+            .setSchema(\n+                schema,\n+                typeDescriptor,\n+                schemaProvider.toRowFunction(typeDescriptor),\n+                schemaProvider.fromRowFunction(typeDescriptor))\n+            .apply(Convert.toRows());\n+      }\n+    };\n+  }\n+\n+  private T decode(byte[] bytes) {\n+    try {\n+      return thriftCoder.decode(new ByteArrayInputStream(bytes));\n+    } catch (IOException e) {\n+      throw new IllegalStateException(e);\n+    }\n+  }\n+\n+  @Override\n+  protected PTransform<PCollection<Row>, PCollection<KV<byte[], byte[]>>> getPTransformForOutput() {\n+    final byte[] emptyKey = {};\n+    final TypeDescriptor<byte[]> binTypeDescriptor = TypeDescriptor.of(byte[].class);\n+    return new PTransform<PCollection<Row>, PCollection<KV<byte[], byte[]>>>() {\n+      @Override\n+      public PCollection<KV<byte[], byte[]>> expand(PCollection<Row> input) {\n+        return input\n+            .apply(Convert.fromRows(typeDescriptor))\n+            .apply(\n+                MapElements.into(TypeDescriptors.kvs(binTypeDescriptor, binTypeDescriptor))\n+                    .via(thrift -> KV.of(emptyKey, encode(thrift))));\n+      }\n+    };\n+  }\n+\n+  private byte[] encode(T thrift) {\n+    final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+    try {\n+      thriftCoder.encode(thrift, out);\n+      return out.toByteArray();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0NDY5Mw==", "bodyText": "I'd delegate this part of code to a function. It'll get a bit messy after we add another case to the switch statement.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546244693", "createdAt": "2020-12-19T14:33:06Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProvider.java", "diffHunk": "@@ -85,6 +89,33 @@ public BeamSqlTable buildBeamSqlTable(Table table) {\n         } catch (ClassNotFoundException e) {\n           throw new IllegalArgumentException(\"Incorrect proto class provided: \" + protoClassName);\n         }\n+      case THRIFT:\n+        final String thriftClassName = properties.getString(\"thriftClass\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0NDgxMw==", "bodyText": "Please add a message here as well.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546244813", "createdAt": "2020-12-19T14:34:02Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProvider.java", "diffHunk": "@@ -85,6 +89,33 @@ public BeamSqlTable buildBeamSqlTable(Table table) {\n         } catch (ClassNotFoundException e) {\n           throw new IllegalArgumentException(\"Incorrect proto class provided: \" + protoClassName);\n         }\n+      case THRIFT:\n+        final String thriftClassName = properties.getString(\"thriftClass\");\n+        final String thriftProtocolFactoryClassName =\n+            properties.getString(\"thriftProtocolFactoryClass\");\n+        try {\n+          final Class<TBase> thriftClass = (Class<TBase>) Class.forName(thriftClassName);\n+          final TProtocolFactory thriftProtocolFactory;\n+          try {\n+            final Class<TProtocolFactory> thriftProtocolFactoryClass =\n+                (Class<TProtocolFactory>) Class.forName(thriftProtocolFactoryClassName);\n+            thriftProtocolFactory =\n+                thriftProtocolFactoryClass.getDeclaredConstructor().newInstance();\n+          } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\n+                \"Incorrect thrift protocol factory class provided: \"\n+                    + thriftProtocolFactoryClassName);\n+          } catch (InstantiationException\n+              | IllegalAccessException\n+              | InvocationTargetException\n+              | NoSuchMethodException e) {\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0NDg5Mw==", "bodyText": "+1 for this comment - it'll be helpful :)", "url": "https://github.com/apache/beam/pull/13572#discussion_r546244893", "createdAt": "2020-12-19T14:34:47Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/test/thrift/kafka/message.thrift", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+thrift --gen java:private-members \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0NTEwNQ==", "bodyText": "if {} else {} or  return fieldDescriptor.requirementType == REQUIRED ? ... : ... would be neater as there is only one case.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546245105", "createdAt": "2020-12-19T14:36:34Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -183,7 +184,12 @@ private Schema schemaFor(Class<?> targetClass) {\n   private Schema.Field beamField(FieldMetaData fieldDescriptor) {\n     try {\n       final FieldType type = beamType(fieldDescriptor.valueMetaData);\n-      return Schema.Field.nullable(fieldDescriptor.fieldName, type);\n+      switch (fieldDescriptor.requirementType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTY4MTMz", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-555968133", "createdAt": "2020-12-19T21:01:14Z", "commit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMTowMToxNFrOII-bvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMTowMToxNFrOII-bvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4MjQzMA==", "bodyText": "The last comment from me. Could you also add a test that will run on SQL precommit as well? You could use the same thrift file as in the IT test.\nExample here:\n\n  \n    \n      beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaTableAvroTest.java\n    \n    \n         Line 31\n      in\n      1466db9\n    \n    \n    \n    \n\n        \n          \n           public class BeamKafkaTableAvroTest extends BeamKafkaTableTest { \n        \n    \n  \n\n\nAnd a unit test testBuildBeamSqlThriftTable for thrift table creation, like here:\n\n  \n    \n      beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProviderTest.java\n    \n    \n         Line 66\n      in\n      1466db9\n    \n    \n    \n    \n\n        \n          \n           public void testBuildBeamSqlProtoTable() {", "url": "https://github.com/apache/beam/pull/13572#discussion_r546282430", "createdAt": "2020-12-19T21:01:14Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProviderThriftIT.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a203a0969bcf450bf92a43d1ad7e16467f1131cd", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/a203a0969bcf450bf92a43d1ad7e16467f1131cd", "committedDate": "2020-12-18T16:32:40Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "bd1aded20c05012197eacff2faac33c8f902533e", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/bd1aded20c05012197eacff2faac33c8f902533e", "committedDate": "2020-12-20T12:55:17Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd1aded20c05012197eacff2faac33c8f902533e", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/bd1aded20c05012197eacff2faac33c8f902533e", "committedDate": "2020-12-20T12:55:17Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "c0680a4e3da57e8c239009d8bed73de51e663846", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/c0680a4e3da57e8c239009d8bed73de51e663846", "committedDate": "2020-12-20T13:09:57Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0680a4e3da57e8c239009d8bed73de51e663846", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/c0680a4e3da57e8c239009d8bed73de51e663846", "committedDate": "2020-12-20T13:09:57Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "52487eb98bfe672b4cd81b0892686587f5ed3016", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/52487eb98bfe672b4cd81b0892686587f5ed3016", "committedDate": "2020-12-20T13:17:34Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52487eb98bfe672b4cd81b0892686587f5ed3016", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/52487eb98bfe672b4cd81b0892686587f5ed3016", "committedDate": "2020-12-20T13:17:34Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "98f695906f4dae8ebc676e030694ae24ac0e70bc", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/98f695906f4dae8ebc676e030694ae24ac0e70bc", "committedDate": "2020-12-20T13:20:18Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98f695906f4dae8ebc676e030694ae24ac0e70bc", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/98f695906f4dae8ebc676e030694ae24ac0e70bc", "committedDate": "2020-12-20T13:20:18Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "d9ecd618409f7305ffad602d711553aa04c440f2", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/d9ecd618409f7305ffad602d711553aa04c440f2", "committedDate": "2020-12-20T13:22:48Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9ecd618409f7305ffad602d711553aa04c440f2", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/d9ecd618409f7305ffad602d711553aa04c440f2", "committedDate": "2020-12-20T13:22:48Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "3f24ab1333689af592520138c3a239948d0d9c7d", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/3f24ab1333689af592520138c3a239948d0d9c7d", "committedDate": "2020-12-20T13:33:09Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f24ab1333689af592520138c3a239948d0d9c7d", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/3f24ab1333689af592520138c3a239948d0d9c7d", "committedDate": "2020-12-20T13:33:09Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "5ab68f72686311f08290e086477593510ededccd", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/5ab68f72686311f08290e086477593510ededccd", "committedDate": "2020-12-20T14:16:01Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDIxMzQ3", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-556021347", "createdAt": "2020-12-20T14:11:26Z", "commit": {"oid": "3f24ab1333689af592520138c3a239948d0d9c7d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoxMToyNlrOIJEiCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDozOToyMFrOIJEvMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MjM0Nw==", "bodyText": "Good catch! Thanks!", "url": "https://github.com/apache/beam/pull/13572#discussion_r546382347", "createdAt": "2020-12-20T14:11:26Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProviderTest.java", "diffHunk": "@@ -64,15 +66,34 @@ public void testBuildBeamSqlAvroTable() {\n \n   @Test\n   public void testBuildBeamSqlProtoTable() {\n-    Table table = mockTable(\"hello\", \"proto\", KafkaMessages.SimpleMessage.class.getName());\n+    Table table =\n+        mockTable(\"hello\", \"proto\", KafkaMessages.SimpleMessage.class.getName(), null, null);\n     BeamSqlTable sqlTable = provider.buildBeamSqlTable(table);\n \n     assertNotNull(sqlTable);\n     assertTrue(sqlTable instanceof BeamKafkaProtoTable);\n \n-    BeamKafkaProtoTable csvTable = (BeamKafkaProtoTable) sqlTable;\n-    assertEquals(\"localhost:9092\", csvTable.getBootstrapServers());\n-    assertEquals(ImmutableList.of(\"topic1\", \"topic2\"), csvTable.getTopics());\n+    BeamKafkaProtoTable protoTable = (BeamKafkaProtoTable) sqlTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f24ab1333689af592520138c3a239948d0d9c7d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4NTcxNQ==", "bodyText": "What I meant was to create some SerializableFunction or SimpleFuntion outside of this package (e.g. in  io/thrift) that would do the encoding/decoding. Right now we'll have to implement encode/decode it in every table provider that supports thrift format. You wouldn't need InputTransformer and OutputTransformer then.\nWhat I have in mind it's the same as is done here:\n\n  \n    \n      beam/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java\n    \n    \n         Line 132\n      in\n      1466db9\n    \n    \n    \n    \n\n        \n          \n           public static <T> SimpleFunction<byte[], Row> getProtoBytesToRowFn(Class<T> clazz) { \n        \n    \n  \n\n\nAnd then here:\n\n  \n    \n      beam/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaProtoTable.java\n    \n    \n         Line 83\n      in\n      1466db9\n    \n    \n    \n    \n\n        \n          \n           .apply(\"Map bytes to rows\", MapElements.via(toRowFn)) \n        \n    \n  \n\n\nonly for Thrift encoding/decoding", "url": "https://github.com/apache/beam/pull/13572#discussion_r546385715", "createdAt": "2020-12-20T14:39:20Z", "author": {"login": "piotr-szuberski"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaThriftTable.java", "diffHunk": "@@ -74,55 +92,81 @@ private static Schema thriftSchema(\n \n   @Override\n   protected PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> getPTransformForInput() {\n-    final @NonNull SchemaProvider schemaProvider = ThriftSchema.provider();\n-    return new PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>>() {\n-      @Override\n-      @SuppressWarnings(\"nullness\")\n-      public PCollection<Row> expand(PCollection<KV<byte[], byte[]>> input) {\n-        return input\n-            .apply(Values.create())\n-            .apply(MapElements.into(typeDescriptor).via(BeamKafkaThriftTable.this::decode))\n-            .setSchema(\n-                schema,\n-                typeDescriptor,\n-                schemaProvider.toRowFunction(typeDescriptor),\n-                schemaProvider.fromRowFunction(typeDescriptor))\n-            .apply(Convert.toRows());\n-      }\n-    };\n+    return new InputTransformer(typeDescriptor, coder, schema);\n   }\n \n-  private T decode(byte[] bytes) {\n-    try {\n-      return thriftCoder.decode(new ByteArrayInputStream(bytes));\n-    } catch (IOException e) {\n-      throw new IllegalStateException(e);\n+  private static class InputTransformer<T extends TBase<?, ?>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab68f72686311f08290e086477593510ededccd"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ab68f72686311f08290e086477593510ededccd", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/5ab68f72686311f08290e086477593510ededccd", "committedDate": "2020-12-20T14:16:01Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "14890bcfee5bb05ce9c6414f7bd9f7a783545945", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/14890bcfee5bb05ce9c6414f7bd9f7a783545945", "committedDate": "2020-12-20T14:38:43Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32ed858f87b392b709d6d4798ceca3b2a8b77ec7", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/32ed858f87b392b709d6d4798ceca3b2a8b77ec7", "committedDate": "2020-12-20T18:36:55Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "fc719a495343f192fec877bdae8cc0e9498dba10", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/fc719a495343f192fec877bdae8cc0e9498dba10", "committedDate": "2020-12-20T18:41:21Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc719a495343f192fec877bdae8cc0e9498dba10", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/fc719a495343f192fec877bdae8cc0e9498dba10", "committedDate": "2020-12-20T18:41:21Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/488370798f06270d5eb431f2dd48746bded6a9c9", "committedDate": "2020-12-20T18:44:10Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDQxNjE4", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-556041618", "createdAt": "2020-12-20T18:46:17Z", "commit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxODo0NjoxN1rOIJGdjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxODo1MzoxN1rOIJGgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMzk2NQ==", "bodyText": "This change breaks any clients that used to pass a mere Class<?> here!\nIs this acceptable?", "url": "https://github.com/apache/beam/pull/13572#discussion_r546413965", "createdAt": "2020-12-20T18:46:17Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaProtoTable.java", "diffHunk": "@@ -32,10 +34,10 @@\n   \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n })\n public class BeamKafkaProtoTable extends BeamKafkaTable {\n-  private final Class<?> protoClass;\n+  private final Class<? extends Message> protoClass;\n \n   public BeamKafkaProtoTable(\n-      Schema messageSchema, String bootstrapServers, List<String> topics, Class<?> protoClass) {\n+      Schema messageSchema, String bootstrapServers, List<String> topics, Class<? extends Message> protoClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNDE0Mg==", "bodyText": "Is this acceptable?", "url": "https://github.com/apache/beam/pull/13572#discussion_r546414142", "createdAt": "2020-12-20T18:47:51Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/BeamKafkaProtoTable.java", "diffHunk": "@@ -95,9 +97,9 @@ private static Schema inferAndVerifySchema(Class<?> protoClass, Schema messageSc\n   /** A PTransform to convert {@link Row} to {@code KV<byte[], byte[]>}. */\n   private static class ProtoRecorderEncoder\n       extends PTransform<PCollection<Row>, PCollection<KV<byte[], byte[]>>> {\n-    private final Class<?> clazz;\n+    private final Class<? extends Message> clazz;\n \n-    public ProtoRecorderEncoder(Class<?> clazz) {\n+    public ProtoRecorderEncoder(Class<? extends Message> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNDQzMA==", "bodyText": "This again breaks compatibility with Class<?>.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546414430", "createdAt": "2020-12-20T18:50:37Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java", "diffHunk": "@@ -129,68 +129,29 @@ public SchemaUserTypeCreator schemaTypeCreator(Class<?> targetClass, Schema sche\n     \"rawtypes\", // TODO(https://issues.apache.org/jira/browse/BEAM-10556)\n     \"unchecked\"\n   })\n-  public static <T> SimpleFunction<byte[], Row> getProtoBytesToRowFn(Class<T> clazz) {\n+  public static <T extends Message> SimpleFunction<byte[], Row> getProtoBytesToRowFn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNDQ2Ng==", "bodyText": "Class<?> won't work anymore", "url": "https://github.com/apache/beam/pull/13572#discussion_r546414466", "createdAt": "2020-12-20T18:51:05Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java", "diffHunk": "@@ -129,68 +129,29 @@ public SchemaUserTypeCreator schemaTypeCreator(Class<?> targetClass, Schema sche\n     \"rawtypes\", // TODO(https://issues.apache.org/jira/browse/BEAM-10556)\n     \"unchecked\"\n   })\n-  public static <T> SimpleFunction<byte[], Row> getProtoBytesToRowFn(Class<T> clazz) {\n+  public static <T extends Message> SimpleFunction<byte[], Row> getProtoBytesToRowFn(\n+      Class<T> clazz) {\n     checkForMessageType(clazz);\n-    return new ProtoBytesToRowFn(clazz);\n-  }\n-\n-  private static class ProtoBytesToRowFn<T extends Message> extends SimpleFunction<byte[], Row> {\n-    private final ProtoCoder<T> protoCoder;\n-    private final SerializableFunction<T, Row> toRowFunction;\n-\n-    public ProtoBytesToRowFn(Class<T> clazz) {\n-      this.protoCoder = ProtoCoder.of(clazz);\n-      this.toRowFunction = new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(clazz));\n-    }\n-\n-    @Override\n-    public Row apply(byte[] bytes) {\n-      try {\n-        T message = protoCoder.getParser().parseFrom(bytes);\n-        return toRowFunction.apply(message);\n-      } catch (IOException e) {\n-        throw new IllegalArgumentException(\"Could not decode row from proto payload.\", e);\n-      }\n-    }\n+    final ProtoCoder<T> protoCoder = ProtoCoder.of(clazz);\n+    final SerializableFunction<T, Row> toRowFunction =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(clazz));\n+    return new SqlRows.BytesToRowFn<>(protoCoder.getParser()::parseFrom, toRowFunction);\n   }\n \n   // Other modules are not allowed to use non-vendored Message class\n   @SuppressWarnings({\n     \"rawtypes\", // TODO(https://issues.apache.org/jira/browse/BEAM-10556)\n     \"unchecked\"\n   })\n-  public static <T> SimpleFunction<Row, byte[]> getRowToProtoBytesFn(Class<T> clazz) {\n+  public static <T extends Message> SimpleFunction<Row, byte[]> getRowToProtoBytesFn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNDY2Mg==", "bodyText": "@chrlarsen Just trying to make sure I haven't missed anything: was there a reason why we're currently writing to a temporary in-memory stream and then copy that to the actual stream? i.e. do you see any potential pitfalls with the optimization that I just made?", "url": "https://github.com/apache/beam/pull/13572#discussion_r546414662", "createdAt": "2020-12-20T18:53:17Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftCoder.java", "diffHunk": "@@ -72,15 +71,13 @@ protected ThriftCoder(Class<T> type, TProtocolFactory protocolFactory) {\n    */\n   @Override\n   public void encode(T value, OutputStream outStream) throws CoderException, IOException {\n-    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-    TProtocol protocol = protocolFactory.getProtocol(new TIOStreamTransport(baos));\n+    TProtocol protocol = protocolFactory.getProtocol(new TIOStreamTransport(outStream));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "488370798f06270d5eb431f2dd48746bded6a9c9", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/488370798f06270d5eb431f2dd48746bded6a9c9", "committedDate": "2020-12-20T18:44:10Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "dd269c1c24263e1887a3048cdf55153a773b76b5", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/dd269c1c24263e1887a3048cdf55153a773b76b5", "committedDate": "2020-12-20T18:55:21Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd269c1c24263e1887a3048cdf55153a773b76b5", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/dd269c1c24263e1887a3048cdf55153a773b76b5", "committedDate": "2020-12-20T18:55:21Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "c5b2d3a04c7010389ce196e359da85625bc32407", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/c5b2d3a04c7010389ce196e359da85625bc32407", "committedDate": "2020-12-20T19:31:21Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDQ4NDc1", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-556048475", "createdAt": "2020-12-20T19:33:13Z", "commit": {"oid": "c5b2d3a04c7010389ce196e359da85625bc32407"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxOTozMzoxNFrOIJGwuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxOTozMzoxNFrOIJGwuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxODg3Mg==", "bodyText": "Is this ok?", "url": "https://github.com/apache/beam/pull/13572#discussion_r546418872", "createdAt": "2020-12-20T19:33:14Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/build-tools/src/main/resources/beam/suppressions.xml", "diffHunk": "@@ -94,6 +94,7 @@\n   <!-- Non-vendored gRPC/protobuf imports are allowed for files that depend on libraries that expose gRPC/protobuf in its public API -->\n   <suppress id=\"ForbidNonVendoredGrpcProtobuf\" files=\".*sdk.*extensions.*protobuf.*\" />\n   <suppress id=\"ForbidNonVendoredGrpcProtobuf\" files=\".*sdk.*extensions.*ml.*\" />\n+  <suppress id=\"ForbidNonVendoredGrpcProtobuf\" files=\".*sdk.*extensions.*sql.*\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b2d3a04c7010389ce196e359da85625bc32407"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5b2d3a04c7010389ce196e359da85625bc32407", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/c5b2d3a04c7010389ce196e359da85625bc32407", "committedDate": "2020-12-20T19:31:21Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "b1dbfbfc5860840b2047388eb04f4be83bee350b", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/b1dbfbfc5860840b2047388eb04f4be83bee350b", "committedDate": "2020-12-20T19:46:08Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1dbfbfc5860840b2047388eb04f4be83bee350b", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/b1dbfbfc5860840b2047388eb04f4be83bee350b", "committedDate": "2020-12-20T19:46:08Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "1ed4f44c800de49eeaeaff00152bbb10f8cc6cd3", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/1ed4f44c800de49eeaeaff00152bbb10f8cc6cd3", "committedDate": "2020-12-20T19:49:25Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ed4f44c800de49eeaeaff00152bbb10f8cc6cd3", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/1ed4f44c800de49eeaeaff00152bbb10f8cc6cd3", "committedDate": "2020-12-20T19:49:25Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "2bc7260f0f10a32628982a60b9a4292517aa45a3", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/2bc7260f0f10a32628982a60b9a4292517aa45a3", "committedDate": "2020-12-20T20:07:15Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bc7260f0f10a32628982a60b9a4292517aa45a3", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/2bc7260f0f10a32628982a60b9a4292517aa45a3", "committedDate": "2020-12-20T20:07:15Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "77adcca90c03cfb684adaf52ca723de2ec4fcd1d", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/77adcca90c03cfb684adaf52ca723de2ec4fcd1d", "committedDate": "2020-12-20T20:10:08Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77adcca90c03cfb684adaf52ca723de2ec4fcd1d", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/77adcca90c03cfb684adaf52ca723de2ec4fcd1d", "committedDate": "2020-12-20T20:10:08Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "79c718f3901529d65883a94f7a4fc4c5effd306d", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/79c718f3901529d65883a94f7a4fc4c5effd306d", "committedDate": "2020-12-20T20:30:24Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDYwMTM5", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-556060139", "createdAt": "2020-12-20T20:42:51Z", "commit": {"oid": "79c718f3901529d65883a94f7a4fc4c5effd306d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMDo0Mjo1MVrOIJHqkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMDo0Mjo1MVrOIJHqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzMzY4MQ==", "bodyText": "this can't be a method reference (protoCoder.getParser()::parseFrom) because the protobuf Parser is not Serializable.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546433681", "createdAt": "2020-12-20T20:42:51Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java", "diffHunk": "@@ -130,28 +129,12 @@ public SchemaUserTypeCreator schemaTypeCreator(Class<?> targetClass, Schema sche\n     \"unchecked\"\n   })\n   public static <T> SimpleFunction<byte[], Row> getProtoBytesToRowFn(Class<T> clazz) {\n-    checkForMessageType(clazz);\n-    return new ProtoBytesToRowFn(clazz);\n-  }\n-\n-  private static class ProtoBytesToRowFn<T extends Message> extends SimpleFunction<byte[], Row> {\n-    private final ProtoCoder<T> protoCoder;\n-    private final SerializableFunction<T, Row> toRowFunction;\n-\n-    public ProtoBytesToRowFn(Class<T> clazz) {\n-      this.protoCoder = ProtoCoder.of(clazz);\n-      this.toRowFunction = new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(clazz));\n-    }\n-\n-    @Override\n-    public Row apply(byte[] bytes) {\n-      try {\n-        T message = protoCoder.getParser().parseFrom(bytes);\n-        return toRowFunction.apply(message);\n-      } catch (IOException e) {\n-        throw new IllegalArgumentException(\"Could not decode row from proto payload.\", e);\n-      }\n-    }\n+    Class<Message> protoClass = ensureMessageType(clazz);\n+    ProtoCoder<Message> protoCoder = ProtoCoder.of(protoClass);\n+    return new SqlRows.BytesToRowFn<>(\n+        new ProtoMessageSchema(),\n+        TypeDescriptor.of(protoClass),\n+        bytes -> protoCoder.getParser().parseFrom(bytes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c718f3901529d65883a94f7a4fc4c5effd306d"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79c718f3901529d65883a94f7a4fc4c5effd306d", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/79c718f3901529d65883a94f7a4fc4c5effd306d", "committedDate": "2020-12-20T20:30:24Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "9557ed6a29868c0a61e9181edfe35cc20e471d78", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/9557ed6a29868c0a61e9181edfe35cc20e471d78", "committedDate": "2020-12-20T21:30:38Z", "message": "fixup! [BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e092f2d9338dedbde74c3340be0c8889bc35002a", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/e092f2d9338dedbde74c3340be0c8889bc35002a", "committedDate": "2020-12-21T00:24:12Z", "message": "support for field reordering in thrift schema"}, "afterCommit": {"oid": "fe2089100461236459f7449e6345e0faed9681d3", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/fe2089100461236459f7449e6345e0faed9681d3", "committedDate": "2020-12-21T00:33:52Z", "message": "support for field reordering in thrift schema"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe2089100461236459f7449e6345e0faed9681d3", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/fe2089100461236459f7449e6345e0faed9681d3", "committedDate": "2020-12-21T00:33:52Z", "message": "support for field reordering in thrift schema"}, "afterCommit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/b34a224497b3dfb4e6927db1b978184e6b26f243", "committedDate": "2020-12-21T00:48:23Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDgzMDg4", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-556083088", "createdAt": "2020-12-21T01:09:06Z", "commit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTowOTowN1rOIJJkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMTowOTowN1rOIJJkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ2NDgyOA==", "bodyText": "This wasn't possible before because of the \"nullness\" checks, but now it seems to work so I cleaned it up.", "url": "https://github.com/apache/beam/pull/13572#discussion_r546464828", "createdAt": "2020-12-21T01:09:07Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -243,37 +253,65 @@ private FieldValueTypeInformation fieldValueTypeInfo(Class<?> type, String field\n   @Override\n   public @NonNull SchemaUserTypeCreator schemaTypeCreator(\n       @NonNull Class<?> targetClass, @NonNull Schema schema) {\n-    return params -> restoreThriftObject(targetClass, params);\n+    return thriftMapper(targetClass, schema);\n+  }\n+\n+  private <FieldT extends Enum<FieldT> & TFieldIdEnum, T extends TBase<T, FieldT>>\n+      SchemaUserTypeCreator thriftMapper(Class<?> targetClass, Schema schema) {\n+    final Map<FieldT, FieldMetaData> fieldDescriptors = schemaFieldDescriptors(targetClass, schema);\n+    return params -> restoreThriftObject(targetClass, fieldDescriptors, params);\n   }\n \n+  @SuppressWarnings(\"nullness\")\n   private <FieldT extends Enum<FieldT> & TFieldIdEnum, T extends TBase<T, FieldT>>\n-      T restoreThriftObject(Class<?> targetClass, Object[] params) {\n+      Map<FieldT, FieldMetaData> schemaFieldDescriptors(Class<?> targetClass, Schema schema) {\n+    final Map<FieldT, FieldMetaData> fieldDescriptors = thriftFieldDescriptors(targetClass);\n+    final Map<String, FieldT> fields =\n+        fieldDescriptors.keySet().stream()\n+            .collect(Collectors.toMap(FieldT::getFieldName, Function.identity()));\n+\n+    return schema.getFields().stream()\n+        .map(Schema.Field::getName)\n+        .map(fields::get)\n+        .collect(\n+            Collectors.toMap(\n+                Function.identity(),\n+                fieldDescriptors::get,\n+                ThriftSchema::throwingCombiner,\n+                LinkedHashMap::new));\n+  }\n+\n+  private <FieldT extends Enum<FieldT> & TFieldIdEnum, T extends TBase<T, FieldT>>\n+      T restoreThriftObject(\n+          Class<?> targetClass, Map<FieldT, FieldMetaData> fields, Object[] params) {\n+    if (params.length != fields.size()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"The parameter list: %s does not match the expected fields: %s\",\n+              Arrays.toString(params), fields.keySet()));\n+    }\n     try {\n       @SuppressWarnings(\"unchecked\")\n       final T thrift = (T) targetClass.getDeclaredConstructor().newInstance();\n-      final Map<FieldT, FieldMetaData> fieldMap = thriftFieldDescriptors(targetClass);\n-      // the underlying Map is an EnumMap, so it's safe to rely on the order of its keys\n-      fieldMap.forEach(\n-          (field, descriptor) ->\n-              setThriftField(thrift, field, descriptor, params[field.ordinal()]));\n+      final Iterator<Entry<FieldT, FieldMetaData>> iter = fields.entrySet().iterator();\n+      Stream.of(params).forEach(param -> setThriftField(thrift, iter.next(), param));\n       return thrift;\n     } catch (Exception e) {\n       throw new IllegalStateException(e);\n     }\n   }\n \n   private <FieldT extends TFieldIdEnum, T extends TBase<T, FieldT>> void setThriftField(\n-      T thrift, FieldT field, FieldMetaData descriptor, Object value) {\n+      T thrift, Entry<FieldT, FieldMetaData> fieldDescriptor, Object value) {\n+    final FieldT field = fieldDescriptor.getKey();\n+    final FieldMetaData descriptor = fieldDescriptor.getValue();\n     if (value != null) {\n       final Object actualValue;\n       switch (descriptor.valueMetaData.type) {\n         case TType.SET:\n-          final Set<Object> set = new HashSet<>();\n-          final Iterable<@NonNull ?> iterable = (Iterable<@NonNull ?>) value;\n-          for (@NonNull Object elem : iterable) {\n-            set.add(elem);\n-          }\n-          actualValue = set;\n+          actualValue =\n+              StreamSupport.stream(((Iterable<?>) value).spliterator(), false)\n+                  .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDQ0MzU5", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-556444359", "createdAt": "2020-12-21T15:04:40Z", "commit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDQ0NjA0", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-557444604", "createdAt": "2020-12-23T00:42:55Z", "commit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMDo0Mjo1NlrOIKNVGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTowMjoxN1rOIKNtSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NTA2Nw==", "bodyText": "Shoot sorry I just merged a refactor from @piotr-szuberski that conflicts with this: #13542\nCan you update this PR to use the parameterized test approach for KafkaTableProividerIT:\n\n  \n    \n      beam/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProviderIT.java\n    \n    \n        Lines 105 to 113\n      in\n      6171a36\n    \n    \n    \n    \n\n        \n          \n           @Parameters \n        \n\n        \n          \n           public static Collection<Object[]> data() { \n        \n\n        \n          \n             return Arrays.asList( \n        \n\n        \n          \n                 new Object[][] { \n        \n\n        \n          \n                   {new KafkaJsonObjectProvider(), \"json_topic\"}, \n        \n\n        \n          \n                   {new KafkaAvroObjectProvider(), \"avro_topic\"}, \n        \n\n        \n          \n                   {new KafkaProtoObjectProvider(), \"proto_topic\"}, \n        \n\n        \n          \n                   {new KafkaCsvObjectProvider(), \"csv_topic\"} \n        \n\n        \n          \n                 });", "url": "https://github.com/apache/beam/pull/13572#discussion_r547575067", "createdAt": "2020-12-23T00:42:56Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/kafka/KafkaTableProviderThriftIT.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.kafka;\n+\n+import org.apache.beam.sdk.extensions.sql.meta.provider.kafka.thrift.ItThriftMessage;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.TSerializer;\n+import org.apache.thrift.protocol.TBinaryProtocol;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+public class KafkaTableProviderThriftIT extends KafkaTableProviderIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3OTI5OQ==", "bodyText": "This is getting close to the abstraction that I was discussing in your other PR. A couple suggestions for this class:\n\nLet's make it @Internal, we don't want Beam users to use this and expect backwards compatibility. It's only public so other Beam modules can use it.\nI think it belongs in the schemas package\nDrop SQL from the name. Right now this is only used in SQL, but we will want to use this infra outside of SQL at some point (which is why I don't think it belongs in the sql package). Maybe something like RowMessages?", "url": "https://github.com/apache/beam/pull/13572#discussion_r547579299", "createdAt": "2020-12-23T00:59:26Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/SqlRows.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.sdk.util.Preconditions.checkArgumentNotNull;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import org.apache.beam.sdk.coders.Coder;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaProvider;\n+import org.apache.beam.sdk.transforms.ProcessFunction;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.SimpleFunction;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+public final class SqlRows {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4MTI1Nw==", "bodyText": "Unfortunately this will be in 2.28.0 since 2.27.0 was cut last week. Could you merge master (it should have the 2.28 section), and move this there?", "url": "https://github.com/apache/beam/pull/13572#discussion_r547581257", "createdAt": "2020-12-23T01:02:17Z", "author": {"login": "TheNeuralBit"}, "path": "CHANGES.md", "diffHunk": "@@ -66,6 +66,7 @@\n * Added Cloud Bigtable Provider extension to Beam SQL ([BEAM-11173](https://issues.apache.org/jira/browse/BEAM-11173), [BEAM-11373](https://issues.apache.org/jira/browse/BEAM-11373))\n * Added a schema provider for thrift data ([BEAM-11338](https://issues.apache.org/jira/browse/BEAM-11338))\n * Added combiner packing pipeline optimization to Dataflow runner. ([BEAM-10641](https://issues.apache.org/jira/browse/BEAM-10641))\n+* Added support for thrift in KafkaTableProvider ([BEAM-11482](https://issues.apache.org/jira/browse/BEAM-11482))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b34a224497b3dfb4e6927db1b978184e6b26f243", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/b34a224497b3dfb4e6927db1b978184e6b26f243", "committedDate": "2020-12-21T00:48:23Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "f7251165c1b42d80f44eaffd5e0fa0a8206437c0", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/f7251165c1b42d80f44eaffd5e0fa0a8206437c0", "committedDate": "2020-12-23T11:00:41Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7251165c1b42d80f44eaffd5e0fa0a8206437c0", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/f7251165c1b42d80f44eaffd5e0fa0a8206437c0", "committedDate": "2020-12-23T11:00:41Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "ab96c02254cd2b7d17063b4605edaf744d8b15e8", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/ab96c02254cd2b7d17063b4605edaf744d8b15e8", "committedDate": "2020-12-23T11:49:36Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab96c02254cd2b7d17063b4605edaf744d8b15e8", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/ab96c02254cd2b7d17063b4605edaf744d8b15e8", "committedDate": "2020-12-23T11:49:36Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "98ed67395e8c562425e7809ee4517d4e56796967", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/98ed67395e8c562425e7809ee4517d4e56796967", "committedDate": "2020-12-23T12:07:55Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98ed67395e8c562425e7809ee4517d4e56796967", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/98ed67395e8c562425e7809ee4517d4e56796967", "committedDate": "2020-12-23T12:07:55Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "3e452e02b5f20793244ffe44751b068b0fdbb7cc", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/3e452e02b5f20793244ffe44751b068b0fdbb7cc", "committedDate": "2020-12-23T12:54:19Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e452e02b5f20793244ffe44751b068b0fdbb7cc", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/3e452e02b5f20793244ffe44751b068b0fdbb7cc", "committedDate": "2020-12-23T12:54:19Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/a73e3c2e15a5e253c1f3d9713bc9eb6fba312339", "committedDate": "2020-12-23T18:23:51Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjU2NDg4", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-558256488", "createdAt": "2020-12-23T22:35:52Z", "commit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mzg3ODY0", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-558387864", "createdAt": "2020-12-24T07:33:56Z", "commit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzozMzo1N1rOILBh1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzozNTo0OFrOILBjsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzMDI5Mg==", "bodyText": "This is still the case with thrift metadata, but it's no longer a \"strong assumption\" for this class, as now the field order is infered from the schema, allowing for field reordering.", "url": "https://github.com/apache/beam/pull/13572#discussion_r548430292", "createdAt": "2020-12-24T07:33:57Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -90,17 +95,17 @@\n  *       parameter exists.\n  *   <li>All non-union types have a corresponding java field with the same name for every field in\n  *       the original thrift source file.\n- *   <li>The underlying {@link FieldMetaData#getStructMetaDataMap(Class) metadata maps} are {@link\n- *       java.util.EnumMap enum maps}, so the natural order of the field keys is preserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzMDc3MQ==", "bodyText": "I changed the set-ALL-fields policy to set non-null only, as I think this is safer (no NPE if primitive thrift fields are null in the beam row), easier to reason about and more natural for thrift clients (who are used to check if fields are set before using them).", "url": "https://github.com/apache/beam/pull/13572#discussion_r548430771", "createdAt": "2020-12-24T07:35:48Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -90,17 +95,17 @@\n  *       parameter exists.\n  *   <li>All non-union types have a corresponding java field with the same name for every field in\n  *       the original thrift source file.\n- *   <li>The underlying {@link FieldMetaData#getStructMetaDataMap(Class) metadata maps} are {@link\n- *       java.util.EnumMap enum maps}, so the natural order of the field keys is preserved.\n  * </ul>\n  *\n  * <p>Thrift typedefs for container types (and possibly others) do not preserve the full type\n  * information. For this reason, this class allows for {@link #custom() manual registration} of such\n  * \"lossy\" typedefs with their corresponding beam types.\n  *\n- * <p>Note: upon restoring the same thrift object from a Beam {@link\n- * org.apache.beam.sdk.values.Row}, the {@link TBase#isSet(TFieldIdEnum) isSet flag} will be {@code\n- * true} for all fields, except for non-primitive types with no default values.\n+ * <p>Note: Thrift encoding and decoding are not fully symmetrical, i.e. the {@link\n+ * TBase#isSet(TFieldIdEnum) isSet} flag may not be preserved upon converting a thrift object to a\n+ * beam row and back. On encoding, we extract all thrift values, no matter if the fields are set or\n+ * not. On decoding, we set all non-{@code null} beam row values to the corresponding thrift fields,\n+ * leaving the rest unset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzkwNDg5", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-558390489", "createdAt": "2020-12-24T07:42:31Z", "commit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0MjozMVrOILBqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0MjozMVrOILBqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzMjU3Nw==", "bodyText": "This seemed like a good idea at the time, as it prevented null values in the beam row from ending up as fields with default values in thrift (in case defaults were provided in the thrift descriptor), so it seemed closer to a \"symmetrical\" transformation.\nHowever, leaving the fields unset when they're null in the source row is both safer and more natural.", "url": "https://github.com/apache/beam/pull/13572#discussion_r548432577", "createdAt": "2020-12-24T07:42:31Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -286,8 +324,6 @@ T restoreThriftObject(Class<?> targetClass, Object[] params) {\n           actualValue = value;\n       }\n       thrift.setFieldValue(field, actualValue);\n-    } else if (!TUnion.class.isInstance(thrift)) {\n-      thrift.setFieldValue(field, value); // nullness checks don't allow setting null here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzkxMzky", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-558391392", "createdAt": "2020-12-24T07:45:31Z", "commit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0NTozMVrOILBt9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0NTozMVrOILBt9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzMzM5Ng==", "bodyText": "This allows using the order of fields in the incoming schema, instead of the original order in the thrift descriptor, so this will still work if fields are reordered by clients (the shuffled schema table test validates this).", "url": "https://github.com/apache/beam/pull/13572#discussion_r548433396", "createdAt": "2020-12-24T07:45:31Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -243,37 +253,65 @@ private FieldValueTypeInformation fieldValueTypeInfo(Class<?> type, String field\n   @Override\n   public @NonNull SchemaUserTypeCreator schemaTypeCreator(\n       @NonNull Class<?> targetClass, @NonNull Schema schema) {\n-    return params -> restoreThriftObject(targetClass, params);\n+    return thriftMapper(targetClass, schema);\n+  }\n+\n+  private <FieldT extends Enum<FieldT> & TFieldIdEnum, T extends TBase<T, FieldT>>\n+      SchemaUserTypeCreator thriftMapper(Class<?> targetClass, Schema schema) {\n+    final Map<FieldT, FieldMetaData> fieldDescriptors = schemaFieldDescriptors(targetClass, schema);\n+    return params -> restoreThriftObject(targetClass, fieldDescriptors, params);\n   }\n \n+  @SuppressWarnings(\"nullness\")\n   private <FieldT extends Enum<FieldT> & TFieldIdEnum, T extends TBase<T, FieldT>>\n-      T restoreThriftObject(Class<?> targetClass, Object[] params) {\n+      Map<FieldT, FieldMetaData> schemaFieldDescriptors(Class<?> targetClass, Schema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzkyMzY2", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-558392366", "createdAt": "2020-12-24T07:48:29Z", "commit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0ODoyOVrOILBxdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0ODoyOVrOILBxdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDI5Mw==", "bodyText": "Fields used to always be nullable for thrift schemas and the table integration test requires non-nullable fields. So I just added what was actually missing, i.e. marking required as non-nullable in beam. default is still nullable, the same as optional, for safety reasons -- as it's defined as \"opt-in, req-out\".", "url": "https://github.com/apache/beam/pull/13572#discussion_r548434293", "createdAt": "2020-12-24T07:48:29Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -183,7 +188,12 @@ private Schema schemaFor(Class<?> targetClass) {\n   private Schema.Field beamField(FieldMetaData fieldDescriptor) {\n     try {\n       final FieldType type = beamType(fieldDescriptor.valueMetaData);\n-      return Schema.Field.nullable(fieldDescriptor.fieldName, type);\n+      switch (fieldDescriptor.requirementType) {\n+        case TFieldRequirementType.REQUIRED:\n+          return Schema.Field.of(fieldDescriptor.fieldName, type);\n+        default:\n+          return Schema.Field.nullable(fieldDescriptor.fieldName, type);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mzk3MTQw", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-558397140", "createdAt": "2020-12-24T08:03:18Z", "commit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODowMzoxOFrOILCBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODowMzoxOFrOILCBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODM4Mg==", "bodyText": "this method only exists for \"pinning\" the generics between the two invocations", "url": "https://github.com/apache/beam/pull/13572#discussion_r548438382", "createdAt": "2020-12-24T08:03:18Z", "author": {"login": "ccciudatu"}, "path": "sdks/java/io/thrift/src/main/java/org/apache/beam/sdk/io/thrift/ThriftSchema.java", "diffHunk": "@@ -243,37 +253,65 @@ private FieldValueTypeInformation fieldValueTypeInfo(Class<?> type, String field\n   @Override\n   public @NonNull SchemaUserTypeCreator schemaTypeCreator(\n       @NonNull Class<?> targetClass, @NonNull Schema schema) {\n-    return params -> restoreThriftObject(targetClass, params);\n+    return thriftMapper(targetClass, schema);\n+  }\n+\n+  private <FieldT extends Enum<FieldT> & TFieldIdEnum, T extends TBase<T, FieldT>>\n+      SchemaUserTypeCreator thriftMapper(Class<?> targetClass, Schema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NjgyNDY4", "url": "https://github.com/apache/beam/pull/13572#pullrequestreview-558682468", "createdAt": "2020-12-24T16:42:40Z", "commit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a73e3c2e15a5e253c1f3d9713bc9eb6fba312339", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/a73e3c2e15a5e253c1f3d9713bc9eb6fba312339", "committedDate": "2020-12-23T18:23:51Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "339ad46ceeafc3bf6b24c1bdae99bac99c9c7e93", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/339ad46ceeafc3bf6b24c1bdae99bac99c9c7e93", "committedDate": "2020-12-25T11:19:21Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "339ad46ceeafc3bf6b24c1bdae99bac99c9c7e93", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/339ad46ceeafc3bf6b24c1bdae99bac99c9c7e93", "committedDate": "2020-12-25T11:19:21Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "549ba04c4b1d208ac19e45bb3e0bde511e490c94", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/549ba04c4b1d208ac19e45bb3e0bde511e490c94", "committedDate": "2020-12-25T14:44:53Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "549ba04c4b1d208ac19e45bb3e0bde511e490c94", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/549ba04c4b1d208ac19e45bb3e0bde511e490c94", "committedDate": "2020-12-25T14:44:53Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "962da298b8f82b526728c62f662dc6d32ae13173", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/962da298b8f82b526728c62f662dc6d32ae13173", "committedDate": "2020-12-26T11:29:10Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "962da298b8f82b526728c62f662dc6d32ae13173", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/962da298b8f82b526728c62f662dc6d32ae13173", "committedDate": "2020-12-26T11:29:10Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "1ef342d1dffd208e46e5a14e8af0c1ca8d36be83", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/1ef342d1dffd208e46e5a14e8af0c1ca8d36be83", "committedDate": "2020-12-26T11:57:40Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ef342d1dffd208e46e5a14e8af0c1ca8d36be83", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/1ef342d1dffd208e46e5a14e8af0c1ca8d36be83", "committedDate": "2020-12-26T11:57:40Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "705174512fb7aff23d42ea3f7fa016553022b278", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/705174512fb7aff23d42ea3f7fa016553022b278", "committedDate": "2020-12-26T13:11:21Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be47279ec27e44378ae4109f74ba86a6c3474c72", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/be47279ec27e44378ae4109f74ba86a6c3474c72", "committedDate": "2020-12-26T13:18:35Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "705174512fb7aff23d42ea3f7fa016553022b278", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/705174512fb7aff23d42ea3f7fa016553022b278", "committedDate": "2020-12-26T13:11:21Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}, "afterCommit": {"oid": "be47279ec27e44378ae4109f74ba86a6c3474c72", "author": {"user": {"login": "ccciudatu", "name": "Costi Ciudatu"}}, "url": "https://github.com/apache/beam/commit/be47279ec27e44378ae4109f74ba86a6c3474c72", "committedDate": "2020-12-26T13:18:35Z", "message": "[BEAM-11482] Thrift support for KafkaTableProvider"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4197, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}