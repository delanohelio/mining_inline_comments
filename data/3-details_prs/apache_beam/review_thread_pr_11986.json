{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzgxODQ4", "number": 11986, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyNjoyOFrOEEu3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTo0MzowOFrOEEvdiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzk3NjY3OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/transforms/stats/count.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyNjoyOFrOGiib0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwODowMjoyNVrOGjWWuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2ODk0NQ==", "bodyText": "Consider removing that last sentence about injections (here and above). Or we can change it!\nI think it's supposed to require that the encodings be deterministic  (which is required since Count uses elements as keys) which is clearer than the formal wording that currently exists.", "url": "https://github.com/apache/beam/pull/11986#discussion_r438868945", "createdAt": "2020-06-11T15:26:28Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/transforms/stats/count.go", "diffHunk": "@@ -18,18 +18,36 @@ package stats\n \n import (\n \t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n )\n \n-// Count counts the number of elements in a collection. It expects a\n-// PCollection<T> as input and returns a PCollection<KV<T,int>>. T's encoding\n-// must be a well-defined injection.\n+// Count counts the number of appearances of each element in a collection. It\n+// expects a PCollection<T> as input and returns a PCollection<KV<T,int>>. T's\n+// encoding must be a well-defined injection.\n func Count(s beam.Scope, col beam.PCollection) beam.PCollection {\n \ts = s.Scope(\"stats.Count\")\n \n-\tpre := beam.ParDo(s, mapFn, col)\n+\tpre := beam.ParDo(s, keyedMapFn, col)\n \treturn SumPerKey(s, pre)\n }\n \n-func mapFn(elm beam.T) (beam.T, int) {\n+func keyedMapFn(elm beam.T) (beam.T, int) {\n \treturn elm, 1\n }\n+\n+// CountElms counts the number of elements in a collection. It expects a\n+// PCollection<T> as input and returns a PCollection<int> of one element\n+// containing the count. T's encoding must be a well-defined injection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be9fea5568ee25224c4027ef0aa05cd964a7850"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxOTYxMQ==", "bodyText": "Done for Count. And for CountElms I removed the line because T's encoding doesn't need to be deterministic since it's not used as a key.", "url": "https://github.com/apache/beam/pull/11986#discussion_r439719611", "createdAt": "2020-06-13T08:02:25Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/transforms/stats/count.go", "diffHunk": "@@ -18,18 +18,36 @@ package stats\n \n import (\n \t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n )\n \n-// Count counts the number of elements in a collection. It expects a\n-// PCollection<T> as input and returns a PCollection<KV<T,int>>. T's encoding\n-// must be a well-defined injection.\n+// Count counts the number of appearances of each element in a collection. It\n+// expects a PCollection<T> as input and returns a PCollection<KV<T,int>>. T's\n+// encoding must be a well-defined injection.\n func Count(s beam.Scope, col beam.PCollection) beam.PCollection {\n \ts = s.Scope(\"stats.Count\")\n \n-\tpre := beam.ParDo(s, mapFn, col)\n+\tpre := beam.ParDo(s, keyedMapFn, col)\n \treturn SumPerKey(s, pre)\n }\n \n-func mapFn(elm beam.T) (beam.T, int) {\n+func keyedMapFn(elm beam.T) (beam.T, int) {\n \treturn elm, 1\n }\n+\n+// CountElms counts the number of elements in a collection. It expects a\n+// PCollection<T> as input and returns a PCollection<int> of one element\n+// containing the count. T's encoding must be a well-defined injection.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2ODk0NQ=="}, "originalCommit": {"oid": "6be9fea5568ee25224c4027ef0aa05cd964a7850"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDA3MzcxOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/transforms/stats/count.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTo0MzowOFrOGijZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwODowNzoxM1rOGjWX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDYyNw==", "bodyText": "Consider countFn?", "url": "https://github.com/apache/beam/pull/11986#discussion_r438884627", "createdAt": "2020-06-11T15:43:08Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/transforms/stats/count.go", "diffHunk": "@@ -18,18 +18,36 @@ package stats\n \n import (\n \t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n )\n \n-// Count counts the number of elements in a collection. It expects a\n-// PCollection<T> as input and returns a PCollection<KV<T,int>>. T's encoding\n-// must be a well-defined injection.\n+// Count counts the number of appearances of each element in a collection. It\n+// expects a PCollection<T> as input and returns a PCollection<KV<T,int>>. T's\n+// encoding must be a well-defined injection.\n func Count(s beam.Scope, col beam.PCollection) beam.PCollection {\n \ts = s.Scope(\"stats.Count\")\n \n-\tpre := beam.ParDo(s, mapFn, col)\n+\tpre := beam.ParDo(s, keyedMapFn, col)\n \treturn SumPerKey(s, pre)\n }\n \n-func mapFn(elm beam.T) (beam.T, int) {\n+func keyedMapFn(elm beam.T) (beam.T, int) {\n \treturn elm, 1\n }\n+\n+// CountElms counts the number of elements in a collection. It expects a\n+// PCollection<T> as input and returns a PCollection<int> of one element\n+// containing the count. T's encoding must be a well-defined injection.\n+func CountElms(s beam.Scope, col beam.PCollection) beam.PCollection {\n+\ts = s.Scope(\"stats.CountElms\")\n+\n+\tif typex.IsKV(col.Type()) {\n+\t\tcol = beam.DropKey(s, col)\n+\t}\n+\tpre := beam.ParDo(s, mapFn, col)\n+\treturn Sum(s, pre)\n+}\n+\n+func mapFn(_ beam.T) int {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be9fea5568ee25224c4027ef0aa05cd964a7850"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxOTkwOA==", "bodyText": "Sounds good to me. Changed this to countFn and the other to keyedCountFn.", "url": "https://github.com/apache/beam/pull/11986#discussion_r439719908", "createdAt": "2020-06-13T08:07:13Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/transforms/stats/count.go", "diffHunk": "@@ -18,18 +18,36 @@ package stats\n \n import (\n \t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n )\n \n-// Count counts the number of elements in a collection. It expects a\n-// PCollection<T> as input and returns a PCollection<KV<T,int>>. T's encoding\n-// must be a well-defined injection.\n+// Count counts the number of appearances of each element in a collection. It\n+// expects a PCollection<T> as input and returns a PCollection<KV<T,int>>. T's\n+// encoding must be a well-defined injection.\n func Count(s beam.Scope, col beam.PCollection) beam.PCollection {\n \ts = s.Scope(\"stats.Count\")\n \n-\tpre := beam.ParDo(s, mapFn, col)\n+\tpre := beam.ParDo(s, keyedMapFn, col)\n \treturn SumPerKey(s, pre)\n }\n \n-func mapFn(elm beam.T) (beam.T, int) {\n+func keyedMapFn(elm beam.T) (beam.T, int) {\n \treturn elm, 1\n }\n+\n+// CountElms counts the number of elements in a collection. It expects a\n+// PCollection<T> as input and returns a PCollection<int> of one element\n+// containing the count. T's encoding must be a well-defined injection.\n+func CountElms(s beam.Scope, col beam.PCollection) beam.PCollection {\n+\ts = s.Scope(\"stats.CountElms\")\n+\n+\tif typex.IsKV(col.Type()) {\n+\t\tcol = beam.DropKey(s, col)\n+\t}\n+\tpre := beam.ParDo(s, mapFn, col)\n+\treturn Sum(s, pre)\n+}\n+\n+func mapFn(_ beam.T) int {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDYyNw=="}, "originalCommit": {"oid": "6be9fea5568ee25224c4027ef0aa05cd964a7850"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3674, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}