{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODg4NDYy", "number": 12702, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo0OTowNVrOEeZ8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo1NTo1OVrOEeaFxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzE3ODA5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo0OTowNVrOHKCglw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjowNDoxOVrOHSdWkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4ODkxOQ==", "bodyText": "Ah this is odd indeed - this line must be hit by the test in capture_control_test.py, right? But codecov is marking it as not covered, correct?\ncc: @udim", "url": "https://github.com/apache/beam/pull/12702#discussion_r480288919", "createdAt": "2020-08-31T17:49:05Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -87,11 +87,10 @@ def _should_end_condition_checker(self):\n     return any([l.is_triggered() for l in self._limiters])\n \n   def is_done(self):\n-    is_terminated = self._pipeline_result.state is PipelineState.DONE\n+    is_terminated = self._pipeline_result.state in (\n+        PipelineState.DONE, PipelineState.CANCELLED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc39bc52f517000b9e8b59c56ede57d49e11ef3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzY3Ng==", "bodyText": "Yeah, it definitely looks like it should be. Maybe Codev is trying to do something smarter like static analysis on the logic?", "url": "https://github.com/apache/beam/pull/12702#discussion_r480307676", "createdAt": "2020-08-31T18:24:32Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -87,11 +87,10 @@ def _should_end_condition_checker(self):\n     return any([l.is_triggered() for l in self._limiters])\n \n   def is_done(self):\n-    is_terminated = self._pipeline_result.state is PipelineState.DONE\n+    is_terminated = self._pipeline_result.state in (\n+        PipelineState.DONE, PipelineState.CANCELLED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4ODkxOQ=="}, "originalCommit": {"oid": "6bc39bc52f517000b9e8b59c56ede57d49e11ef3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNzMzMQ==", "bodyText": "Codecov reporting was buggy, should be better now. :)", "url": "https://github.com/apache/beam/pull/12702#discussion_r489117331", "createdAt": "2020-09-16T02:04:19Z", "author": {"login": "udim"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -87,11 +87,10 @@ def _should_end_condition_checker(self):\n     return any([l.is_triggered() for l in self._limiters])\n \n   def is_done(self):\n-    is_terminated = self._pipeline_result.state is PipelineState.DONE\n+    is_terminated = self._pipeline_result.state in (\n+        PipelineState.DONE, PipelineState.CANCELLED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4ODkxOQ=="}, "originalCommit": {"oid": "6bc39bc52f517000b9e8b59c56ede57d49e11ef3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzIwMTk5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo1NTo1OVrOHKCvPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTozNDoxNFrOHMJLdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5MjY2OA==", "bodyText": "I'm sure you've considered this, but just to be sure, have you given thought to other code assuming that this call is asynchronous?\nAlso, might this pipeline run in an environment where a cancelation may take a long time? I guess it shouldnt be a problem generally?", "url": "https://github.com/apache/beam/pull/12702#discussion_r480292668", "createdAt": "2020-08-31T17:55:59Z", "author": {"login": "pabloem"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -103,6 +102,7 @@ def cancel(self):\n     if not PipelineState.is_terminal(self._pipeline_result.state):\n       try:\n         self._pipeline_result.cancel()\n+        self._pipeline_result.wait_until_finish()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc39bc52f517000b9e8b59c56ede57d49e11ef3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NTM0OQ==", "bodyText": "Yeah, in a later PR I added a lock about the pipeline result because of this comment. And it generally shouldn't be a problem if the cancellation takes a long time.", "url": "https://github.com/apache/beam/pull/12702#discussion_r482495349", "createdAt": "2020-09-02T21:34:14Z", "author": {"login": "rohdesamuel"}, "path": "sdks/python/apache_beam/runners/interactive/background_caching_job.py", "diffHunk": "@@ -103,6 +102,7 @@ def cancel(self):\n     if not PipelineState.is_terminal(self._pipeline_result.state):\n       try:\n         self._pipeline_result.cancel()\n+        self._pipeline_result.wait_until_finish()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5MjY2OA=="}, "originalCommit": {"oid": "6bc39bc52f517000b9e8b59c56ede57d49e11ef3"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 601, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}