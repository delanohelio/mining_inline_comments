{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjU4Njgx", "number": 11787, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NzowOFrOECXEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NzowOFrOECXEiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNjAxOnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/dataframe/doctests.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NzowOFrOGexXhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTo1ODoxMlrOGfM67w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTMwMw==", "bodyText": "It looks like this is inlined in FakePandasObject.__call__ now, we should either remove _deferred_frame or call it from FakePandasObject. I think I'm partial to the latter since the method modifies _inputs, but either way is fine.", "url": "https://github.com/apache/beam/pull/11787#discussion_r434919303", "createdAt": "2020-06-03T23:57:08Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -66,30 +93,19 @@ def __init__(self):\n     self._all_frames = {}\n \n   def fake_pandas_module(self):\n-    class FakePandas(object):\n-      \"\"\"A stand-in for the pandas top-level module.\n-      \"\"\"\n-      # For now, only populated with the frame types (below).\n-      # TODO(BEAM-9561): We may want to put more here.\n-      pass\n-\n-    fake_pd = FakePandas()\n-    for pandas_type, deferred_type in DeferredFrame._pandas_type_map.items():\n-      setattr(\n-          fake_pd,\n-          pandas_type.__name__,\n-          self._deferred_frame(pandas_type, deferred_type))\n-\n-    return fake_pd\n-\n-  def _deferred_frame(self, pandas_type, deferred_type):\n+    return FakePandasObject(pd, self)\n+\n+  def _deferred_frame(self, pandas_callable):\n     \"\"\"Creates a \"constructor\" that record the actual value as an input and\n     returns a placeholder frame in its place.\"\"\"\n     def wrapper(*args, **kwargs):\n-      df = pandas_type(*args, **kwargs)\n-      placeholder = expressions.PlaceholderExpression(df[0:0])\n-      self._inputs[placeholder] = df\n-      return deferred_type(placeholder)\n+      df = pandas_callable(*args, **kwargs)\n+      if type(df) in DeferredFrame._pandas_type_map.keys():\n+        placeholder = expressions.PlaceholderExpression(df[0:0])\n+        self._inputs[placeholder] = df\n+        return DeferredFrame.wrap(placeholder)\n+      else:\n+        return df", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a34ed5ec5cd90a735ac214aab7ffee82d0c8cb64"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3MDczNQ==", "bodyText": "Thanks. Removed.", "url": "https://github.com/apache/beam/pull/11787#discussion_r435370735", "createdAt": "2020-06-04T15:58:12Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -66,30 +93,19 @@ def __init__(self):\n     self._all_frames = {}\n \n   def fake_pandas_module(self):\n-    class FakePandas(object):\n-      \"\"\"A stand-in for the pandas top-level module.\n-      \"\"\"\n-      # For now, only populated with the frame types (below).\n-      # TODO(BEAM-9561): We may want to put more here.\n-      pass\n-\n-    fake_pd = FakePandas()\n-    for pandas_type, deferred_type in DeferredFrame._pandas_type_map.items():\n-      setattr(\n-          fake_pd,\n-          pandas_type.__name__,\n-          self._deferred_frame(pandas_type, deferred_type))\n-\n-    return fake_pd\n-\n-  def _deferred_frame(self, pandas_type, deferred_type):\n+    return FakePandasObject(pd, self)\n+\n+  def _deferred_frame(self, pandas_callable):\n     \"\"\"Creates a \"constructor\" that record the actual value as an input and\n     returns a placeholder frame in its place.\"\"\"\n     def wrapper(*args, **kwargs):\n-      df = pandas_type(*args, **kwargs)\n-      placeholder = expressions.PlaceholderExpression(df[0:0])\n-      self._inputs[placeholder] = df\n-      return deferred_type(placeholder)\n+      df = pandas_callable(*args, **kwargs)\n+      if type(df) in DeferredFrame._pandas_type_map.keys():\n+        placeholder = expressions.PlaceholderExpression(df[0:0])\n+        self._inputs[placeholder] = df\n+        return DeferredFrame.wrap(placeholder)\n+      else:\n+        return df", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTMwMw=="}, "originalCommit": {"oid": "a34ed5ec5cd90a735ac214aab7ffee82d0c8cb64"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3851, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}