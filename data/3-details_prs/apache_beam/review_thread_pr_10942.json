{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjYzNDUz", "number": 10942, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo1MjozMFrODihOqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxNjozMVrODi0YnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTIyNjAwOnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/plan.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo1MjozMFrOFt0Djg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzo1MjozMFrOFt0Djg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MzExOA==", "bodyText": "This comment should probably be updated to explain that the bool returned represents whether the snapshot has a DataSource, as opposed to the usual assumption of an \"ok\" value.", "url": "https://github.com/apache/beam/pull/10942#discussion_r383583118", "createdAt": "2020-02-24T23:52:30Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/plan.go", "diffHunk": "@@ -178,19 +160,25 @@ func (p *Plan) String() string {\n \treturn fmt.Sprintf(\"Plan[%v]:\\n%v\", p.ID(), strings.Join(units, \"\\n\"))\n }\n \n-// Progress returns a snapshot of input progress of the plan, and associated metrics.\n-func (p *Plan) Progress() (ProgressReportSnapshot, bool) {\n-\tif p.source != nil {\n-\t\treturn p.source.Progress(), true\n-\t}\n-\treturn ProgressReportSnapshot{}, false\n+// PlanSnapshot contains system metrics for the current run of the plan.\n+type PlanSnapshot struct {\n+\tSource ProgressReportSnapshot\n+\tPCols  []PCollectionSnapshot\n }\n \n-// Store returns the metric store for the last use of this plan.\n-func (p *Plan) Store() *metrics.Store {\n-\tp.storeMu.Lock()\n-\tdefer p.storeMu.Unlock()\n-\treturn p.store\n+// Progress returns a snapshot of progress of the plan, and associated metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f4d7a432a6488f0227e2be0064e2a768e3592d"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM2NDQ0OnYy", "diffSide": "RIGHT", "path": "sdks/go/pkg/beam/core/runtime/exec/datasource_test.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxNjozMVrOFuR0MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozNjo0OVrOFuX0Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDcwNA==", "bodyText": "Just checking, we use the size of a small int instead of an int64 because the keys are encoded as small ints, right?", "url": "https://github.com/apache/beam/pull/10942#discussion_r384070704", "createdAt": "2020-02-25T19:16:31Z", "author": {"login": "youngoli"}, "path": "sdks/go/pkg/beam/core/runtime/exec/datasource_test.go", "diffHunk": "@@ -201,6 +201,16 @@ func TestDataSource_Iterators(t *testing.T) {\n \t\t\tif got, want := iVals, expectedKeys; !equalList(got, want) {\n \t\t\t\tt.Errorf(\"DataSource => %#v, want %#v\", extractValues(got...), extractValues(want...))\n \t\t\t}\n+\n+\t\t\t// We're using small ints, so do some quick math to validate.\n+\t\t\tsizeOfSmallInt := 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f4d7a432a6488f0227e2be0064e2a768e3592d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2ODk5OA==", "bodyText": "You're right that my wording is ambiguous. I literally mean small ints as in 0-127 which are definitely encoded as a single byte with varint64 encoding.\nIf we use larger integers (as one of the PCollection tests do), the encoded size is larger.", "url": "https://github.com/apache/beam/pull/10942#discussion_r384168998", "createdAt": "2020-02-25T22:36:49Z", "author": {"login": "lostluck"}, "path": "sdks/go/pkg/beam/core/runtime/exec/datasource_test.go", "diffHunk": "@@ -201,6 +201,16 @@ func TestDataSource_Iterators(t *testing.T) {\n \t\t\tif got, want := iVals, expectedKeys; !equalList(got, want) {\n \t\t\t\tt.Errorf(\"DataSource => %#v, want %#v\", extractValues(got...), extractValues(want...))\n \t\t\t}\n+\n+\t\t\t// We're using small ints, so do some quick math to validate.\n+\t\t\tsizeOfSmallInt := 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MDcwNA=="}, "originalCommit": {"oid": "52f4d7a432a6488f0227e2be0064e2a768e3592d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1887, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}